
PM2_FW_ARMA_6_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f664  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040f664  0040f664  0001f664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a70  20000000  0040f66c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000015cc  20000a70  004100dc  00020a70  2**2
                  ALLOC
  4 .stack        00003004  2000203c  004116a8  00020a70  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020a70  2**0
                  CONTENTS, READONLY
  6 .comment      000000b4  00000000  00000000  00020a9a  2**0
                  CONTENTS, READONLY
  7 .debug_info   00030705  00000000  00000000  00020b4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00006594  00000000  00000000  00051253  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00011991  00000000  00000000  000577e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000012f8  00000000  00000000  00069178  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000013d8  00000000  00000000  0006a470  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001ea8e  00000000  00000000  0006b848  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000212ef  00000000  00000000  0008a2d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005cb3f  00000000  00000000  000ab5c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003ef4  00000000  00000000  00108104  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	40 50 00 20 dd 51 40 00 d9 51 40 00 d9 51 40 00     @P. .Q@..Q@..Q@.
  400010:	d9 51 40 00 d9 51 40 00 d9 51 40 00 00 00 00 00     .Q@..Q@..Q@.....
	...
  40002c:	d9 51 40 00 d9 51 40 00 00 00 00 00 d9 51 40 00     .Q@..Q@......Q@.
  40003c:	09 7e 40 00 2d 7e 40 00 d9 51 40 00 d9 51 40 00     .~@.-~@..Q@..Q@.
  40004c:	d9 51 40 00 d9 51 40 00 d9 51 40 00 d9 51 40 00     .Q@..Q@..Q@..Q@.
  40005c:	00 00 00 00 15 7e 40 00 21 7e 40 00 00 00 00 00     .....~@.!~@.....
  40006c:	61 4c 40 00 75 4c 40 00 00 00 00 00 d9 51 40 00     aL@.uL@......Q@.
  40007c:	d9 51 40 00 00 00 00 00 00 00 00 00 d9 51 40 00     .Q@..........Q@.
  40008c:	d9 51 40 00 d9 51 40 00 d9 51 40 00 d9 51 40 00     .Q@..Q@..Q@..Q@.
  40009c:	d9 51 40 00 d9 51 40 00 d9 51 40 00 00 00 00 00     .Q@..Q@..Q@.....
	...
  4000b4:	d9 51 40 00 d9 51 40 00 d9 51 40 00 d9 51 40 00     .Q@..Q@..Q@..Q@.
  4000c4:	d9 51 40 00 d9 51 40 00                             .Q@..Q@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000a70 	.word	0x20000a70
  4000e8:	00000000 	.word	0x00000000
  4000ec:	0040f66c 	.word	0x0040f66c

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	0040f66c 	.word	0x0040f66c
  40012c:	20000a74 	.word	0x20000a74
  400130:	0040f66c 	.word	0x0040f66c
  400134:	00000000 	.word	0x00000000

00400138 <API_BOOT_ARM_start_upload_req>:
/// @brief Start firmware update.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_BOOT_ARM_start_upload_req( msg_t * msg_ptr )
{
  400138:	b510      	push	{r4, lr}
  40013a:	b084      	sub	sp, #16
  40013c:	4604      	mov	r4, r0
	
	uint8_t response;
	
	// Accept command only if payload length is equal to new image structure
    if ( msg_ptr->packet_in[msg_h_payload_len] == sizeof(new_image_t) ) {
  40013e:	7c43      	ldrb	r3, [r0, #17]
  400140:	2b10      	cmp	r3, #16
  400142:	d00f      	beq.n	400164 <API_BOOT_ARM_start_upload_req+0x2c>
		response = bootloader_start_upload( (uint8_t *)&msg_ptr->packet_in[msg_h_payload_1st_byte] );

	} 
	else {

	    response = 0x1;
  400144:	2301      	movs	r3, #1
  400146:	f88d 300f 	strb.w	r3, [sp, #15]

    }	
		
	comm_send_msg( msg_ptr->uart_ptr ,
  40014a:	7c22      	ldrb	r2, [r4, #16]
  40014c:	3201      	adds	r2, #1
  40014e:	7ba1      	ldrb	r1, [r4, #14]
  400150:	6820      	ldr	r0, [r4, #0]
  400152:	f10d 030f 	add.w	r3, sp, #15
  400156:	9300      	str	r3, [sp, #0]
  400158:	2301      	movs	r3, #1
  40015a:	b2d2      	uxtb	r2, r2
  40015c:	4c04      	ldr	r4, [pc, #16]	; (400170 <API_BOOT_ARM_start_upload_req+0x38>)
  40015e:	47a0      	blx	r4
	               msg_ptr->packet_in[msg_h_src_id] ,
	               msg_ptr->packet_in[msg_h_msg_id]+1 ,
	               1 ,
 	               &response);

}
  400160:	b004      	add	sp, #16
  400162:	bd10      	pop	{r4, pc}
		response = bootloader_start_upload( (uint8_t *)&msg_ptr->packet_in[msg_h_payload_1st_byte] );
  400164:	3012      	adds	r0, #18
  400166:	4b03      	ldr	r3, [pc, #12]	; (400174 <API_BOOT_ARM_start_upload_req+0x3c>)
  400168:	4798      	blx	r3
  40016a:	f88d 000f 	strb.w	r0, [sp, #15]
  40016e:	e7ec      	b.n	40014a <API_BOOT_ARM_start_upload_req+0x12>
  400170:	00402ff1 	.word	0x00402ff1
  400174:	00400ef5 	.word	0x00400ef5

00400178 <API_BOOT_ARM_upload_block_req>:
/// @brief Update block in scratchpad.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_BOOT_ARM_upload_block_req( msg_t * msg_ptr )
{
  400178:	b510      	push	{r4, lr}
  40017a:	b084      	sub	sp, #16
  40017c:	4604      	mov	r4, r0

	uint8_t response;
	
	response = bootloader_upload_block( (uint8_t *)&msg_ptr->packet_in[msg_h_payload_1st_byte] , msg_ptr->packet_in[msg_h_payload_len] );
  40017e:	7c41      	ldrb	r1, [r0, #17]
  400180:	3012      	adds	r0, #18
  400182:	4b08      	ldr	r3, [pc, #32]	; (4001a4 <API_BOOT_ARM_upload_block_req+0x2c>)
  400184:	4798      	blx	r3
  400186:	ab04      	add	r3, sp, #16
  400188:	f803 0d01 	strb.w	r0, [r3, #-1]!
	
	comm_send_msg( msg_ptr->uart_ptr ,
  40018c:	7c22      	ldrb	r2, [r4, #16]
  40018e:	3201      	adds	r2, #1
  400190:	7ba1      	ldrb	r1, [r4, #14]
  400192:	6820      	ldr	r0, [r4, #0]
  400194:	9300      	str	r3, [sp, #0]
  400196:	2301      	movs	r3, #1
  400198:	b2d2      	uxtb	r2, r2
  40019a:	4c03      	ldr	r4, [pc, #12]	; (4001a8 <API_BOOT_ARM_upload_block_req+0x30>)
  40019c:	47a0      	blx	r4
                   msg_ptr->packet_in[msg_h_src_id] ,
                   msg_ptr->packet_in[msg_h_msg_id]+1 ,
                   1 ,
                   &response);
	
}
  40019e:	b004      	add	sp, #16
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	bf00      	nop
  4001a4:	00400f49 	.word	0x00400f49
  4001a8:	00402ff1 	.word	0x00402ff1

004001ac <API_BOOT_ARM_install_image_req>:
/// @brief Install image from scratchpad.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_BOOT_ARM_install_image_req( msg_t * msg_ptr )
{
  4001ac:	b510      	push	{r4, lr}
  4001ae:	b084      	sub	sp, #16
  4001b0:	4604      	mov	r4, r0

	uint8_t response;
	
	// Accept command only if payload length is equal to new image structure
	if ( msg_ptr->packet_in[msg_h_payload_len] == sizeof(new_image_t) ) {
  4001b2:	7c43      	ldrb	r3, [r0, #17]
  4001b4:	2b10      	cmp	r3, #16
  4001b6:	d00f      	beq.n	4001d8 <API_BOOT_ARM_install_image_req+0x2c>
		response = bootloader_install_image( (uint8_t *)&msg_ptr->packet_in[msg_h_payload_1st_byte] );

	}
	else {

		response = 0x1;
  4001b8:	2301      	movs	r3, #1
  4001ba:	f88d 300f 	strb.w	r3, [sp, #15]

	}
	
	comm_send_msg( msg_ptr->uart_ptr ,
  4001be:	7c22      	ldrb	r2, [r4, #16]
  4001c0:	3201      	adds	r2, #1
  4001c2:	7ba1      	ldrb	r1, [r4, #14]
  4001c4:	6820      	ldr	r0, [r4, #0]
  4001c6:	f10d 030f 	add.w	r3, sp, #15
  4001ca:	9300      	str	r3, [sp, #0]
  4001cc:	2301      	movs	r3, #1
  4001ce:	b2d2      	uxtb	r2, r2
  4001d0:	4c04      	ldr	r4, [pc, #16]	; (4001e4 <API_BOOT_ARM_install_image_req+0x38>)
  4001d2:	47a0      	blx	r4
               	   msg_ptr->packet_in[msg_h_src_id] ,
               	   msg_ptr->packet_in[msg_h_msg_id]+1 ,
	               1 ,
                   &response);
	
}
  4001d4:	b004      	add	sp, #16
  4001d6:	bd10      	pop	{r4, pc}
		response = bootloader_install_image( (uint8_t *)&msg_ptr->packet_in[msg_h_payload_1st_byte] );
  4001d8:	3012      	adds	r0, #18
  4001da:	4b03      	ldr	r3, [pc, #12]	; (4001e8 <API_BOOT_ARM_install_image_req+0x3c>)
  4001dc:	4798      	blx	r3
  4001de:	f88d 000f 	strb.w	r0, [sp, #15]
  4001e2:	e7ec      	b.n	4001be <API_BOOT_ARM_install_image_req+0x12>
  4001e4:	00402ff1 	.word	0x00402ff1
  4001e8:	00400f71 	.word	0x00400f71

004001ec <API_FW_DSP_version_res>:

///// @brief Response to request of DSP FW version.
/////
///// @param[in] msp_ptr Pointer to incoming message
/////
void API_FW_DSP_version_res(msg_t * msg_ptr) {
  4001ec:	b508      	push	{r3, lr}
	
	// Accept command only if:
	//     1) payload length is equal to 1 byte
	//     2) ARM is waiting for this message 
	if ((msg_ptr->packet_in[msg_h_payload_len] == 2) && ((comm_flags & SETTINGS_COMM_FLAG_FW_REQUEST_MASK) != 0 )) {
  4001ee:	7c43      	ldrb	r3, [r0, #17]
  4001f0:	2b02      	cmp	r3, #2
  4001f2:	d000      	beq.n	4001f6 <API_FW_DSP_version_res+0xa>
  4001f4:	bd08      	pop	{r3, pc}
  4001f6:	4b0a      	ldr	r3, [pc, #40]	; (400220 <API_FW_DSP_version_res+0x34>)
  4001f8:	881b      	ldrh	r3, [r3, #0]
  4001fa:	f013 0f01 	tst.w	r3, #1
  4001fe:	d0f9      	beq.n	4001f4 <API_FW_DSP_version_res+0x8>
	
		// save DSP firmware version
		DSP_fw[0] = msg_ptr->packet_in[msg_h_payload_1st_byte];
  400200:	7c82      	ldrb	r2, [r0, #18]
  400202:	4b08      	ldr	r3, [pc, #32]	; (400224 <API_FW_DSP_version_res+0x38>)
  400204:	701a      	strb	r2, [r3, #0]
		DSP_fw[1] = msg_ptr->packet_in[msg_h_payload_1st_byte+1];
  400206:	7cc2      	ldrb	r2, [r0, #19]
  400208:	705a      	strb	r2, [r3, #1]
		
		// Clear flag 
		comm_flags &= ~SETTINGS_COMM_FLAG_FW_REQUEST_MASK;
  40020a:	4a05      	ldr	r2, [pc, #20]	; (400220 <API_FW_DSP_version_res+0x34>)
  40020c:	8813      	ldrh	r3, [r2, #0]
  40020e:	f023 0301 	bic.w	r3, r3, #1
  400212:	041b      	lsls	r3, r3, #16
  400214:	0c1b      	lsrs	r3, r3, #16
  400216:	8013      	strh	r3, [r2, #0]
		
		// force next communication
		comm_TX_counter_clear();
  400218:	4b03      	ldr	r3, [pc, #12]	; (400228 <API_FW_DSP_version_res+0x3c>)
  40021a:	4798      	blx	r3
		
	}
	
}
  40021c:	e7ea      	b.n	4001f4 <API_FW_DSP_version_res+0x8>
  40021e:	bf00      	nop
  400220:	20001e54 	.word	0x20001e54
  400224:	20000be8 	.word	0x20000be8
  400228:	004030f5 	.word	0x004030f5

0040022c <API_FW_DSP_send_comm_flag_res>:

///// @brief Response to request of DSP comm flags.
/////
///// @param[in] msp_ptr Pointer to incoming message
/////
void API_FW_DSP_send_comm_flag_res(msg_t * msg_ptr) {
  40022c:	b510      	push	{r4, lr}
  40022e:	b082      	sub	sp, #8
  400230:	4604      	mov	r4, r0

	volatile uint16_t temp;

	gpio_set_pin_high(TP0_GPIO);
  400232:	2021      	movs	r0, #33	; 0x21
  400234:	4b15      	ldr	r3, [pc, #84]	; (40028c <API_FW_DSP_send_comm_flag_res+0x60>)
  400236:	4798      	blx	r3

	// Accept command only if:
	//     1) payload length is equal to 2 byte
	//     2) ARM is waiting for this message
	if ((msg_ptr->packet_in[msg_h_payload_len] == 2) && (comm_flags & SETTINGS_COMM_FLAG_REQUEST_MASK)) {
  400238:	7c63      	ldrb	r3, [r4, #17]
  40023a:	2b02      	cmp	r3, #2
  40023c:	d004      	beq.n	400248 <API_FW_DSP_send_comm_flag_res+0x1c>
		// force next communication
		comm_TX_counter_clear();
		
	}
	
	gpio_set_pin_low(TP0_GPIO);
  40023e:	2021      	movs	r0, #33	; 0x21
  400240:	4b13      	ldr	r3, [pc, #76]	; (400290 <API_FW_DSP_send_comm_flag_res+0x64>)
  400242:	4798      	blx	r3
	
}
  400244:	b002      	add	sp, #8
  400246:	bd10      	pop	{r4, pc}
	if ((msg_ptr->packet_in[msg_h_payload_len] == 2) && (comm_flags & SETTINGS_COMM_FLAG_REQUEST_MASK)) {
  400248:	4b12      	ldr	r3, [pc, #72]	; (400294 <API_FW_DSP_send_comm_flag_res+0x68>)
  40024a:	881b      	ldrh	r3, [r3, #0]
  40024c:	f013 0f02 	tst.w	r3, #2
  400250:	d0f5      	beq.n	40023e <API_FW_DSP_send_comm_flag_res+0x12>
		temp = msg_ptr->packet_in[msg_h_payload_1st_byte] +  (msg_ptr->packet_in[msg_h_payload_1st_byte+1]<<8);
  400252:	7ce2      	ldrb	r2, [r4, #19]
  400254:	7ca3      	ldrb	r3, [r4, #18]
  400256:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  40025a:	b29b      	uxth	r3, r3
  40025c:	f8ad 3006 	strh.w	r3, [sp, #6]
		comm_flags |= temp;
  400260:	f8bd 1006 	ldrh.w	r1, [sp, #6]
  400264:	4a0b      	ldr	r2, [pc, #44]	; (400294 <API_FW_DSP_send_comm_flag_res+0x68>)
  400266:	8813      	ldrh	r3, [r2, #0]
  400268:	430b      	orrs	r3, r1
  40026a:	b29b      	uxth	r3, r3
  40026c:	8013      	strh	r3, [r2, #0]
		comm_flags &= ~SETTINGS_COMM_FLAG_REQUEST_MASK;
  40026e:	8813      	ldrh	r3, [r2, #0]
  400270:	f023 0302 	bic.w	r3, r3, #2
  400274:	041b      	lsls	r3, r3, #16
  400276:	0c1b      	lsrs	r3, r3, #16
  400278:	8013      	strh	r3, [r2, #0]
		sdcard_save_flags(temp);
  40027a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  40027e:	b280      	uxth	r0, r0
  400280:	4b05      	ldr	r3, [pc, #20]	; (400298 <API_FW_DSP_send_comm_flag_res+0x6c>)
  400282:	4798      	blx	r3
		comm_TX_counter_clear();
  400284:	4b05      	ldr	r3, [pc, #20]	; (40029c <API_FW_DSP_send_comm_flag_res+0x70>)
  400286:	4798      	blx	r3
  400288:	e7d9      	b.n	40023e <API_FW_DSP_send_comm_flag_res+0x12>
  40028a:	bf00      	nop
  40028c:	0040498b 	.word	0x0040498b
  400290:	004049a5 	.word	0x004049a5
  400294:	20001e54 	.word	0x20001e54
  400298:	00401f99 	.word	0x00401f99
  40029c:	004030f5 	.word	0x004030f5

004002a0 <API_RTC_DSP_update_res>:

///// @brief Response to request of update DSP RTC.
/////
///// @param[in] msp_ptr Pointer to incoming message
/////
void API_RTC_DSP_update_res(msg_t * msg_ptr) {
  4002a0:	b508      	push	{r3, lr}
	
	// Accept command only if:
	//     1) payload length is equal to 1 byte
	//     2) payload is equal to 0 (NO ERROR)
	//     3) ARM is waiting for this message
	if ( (msg_ptr->packet_in[msg_h_payload_len] == 1) &&
  4002a2:	6903      	ldr	r3, [r0, #16]
  4002a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4002a8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
  4002ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4002b0:	d000      	beq.n	4002b4 <API_RTC_DSP_update_res+0x14>
  4002b2:	bd08      	pop	{r3, pc}
	     (msg_ptr->packet_in[msg_h_payload_1st_byte] == 0) &&
	     (comm_flags & SETTINGS_COMM_FLAG_RTC_REQUEST_MASK) ) {
  4002b4:	4b07      	ldr	r3, [pc, #28]	; (4002d4 <API_RTC_DSP_update_res+0x34>)
  4002b6:	881b      	ldrh	r3, [r3, #0]
	     (msg_ptr->packet_in[msg_h_payload_1st_byte] == 0) &&
  4002b8:	f013 0f04 	tst.w	r3, #4
  4002bc:	d0f9      	beq.n	4002b2 <API_RTC_DSP_update_res+0x12>
					
		// Update flag to avoid
		comm_flags &= ~SETTINGS_COMM_FLAG_RTC_REQUEST_MASK;
  4002be:	4a05      	ldr	r2, [pc, #20]	; (4002d4 <API_RTC_DSP_update_res+0x34>)
  4002c0:	8813      	ldrh	r3, [r2, #0]
  4002c2:	f023 0304 	bic.w	r3, r3, #4
  4002c6:	041b      	lsls	r3, r3, #16
  4002c8:	0c1b      	lsrs	r3, r3, #16
  4002ca:	8013      	strh	r3, [r2, #0]
		
		// force next communication
		comm_TX_counter_clear();
  4002cc:	4b02      	ldr	r3, [pc, #8]	; (4002d8 <API_RTC_DSP_update_res+0x38>)
  4002ce:	4798      	blx	r3
			
	}
	
}
  4002d0:	e7ef      	b.n	4002b2 <API_RTC_DSP_update_res+0x12>
  4002d2:	bf00      	nop
  4002d4:	20001e54 	.word	0x20001e54
  4002d8:	004030f5 	.word	0x004030f5

004002dc <API_UNIT_CONFIG_DSP_update_res>:

///// @brief Response to request of update DSP unit config.
/////
///// @param[in] msp_ptr Pointer to incoming message
/////
void API_UNIT_CONFIG_DSP_update_res(msg_t * msg_ptr) {
  4002dc:	b508      	push	{r3, lr}

	// Accept command only if:
	//     1) payload length is equal to 1 byte
	//     2) payload is equal to 0 (NO ERROR)
	//     3) ARM is waiting for this message
	if ( (msg_ptr->packet_in[msg_h_payload_len] == 1) &&
  4002de:	6903      	ldr	r3, [r0, #16]
  4002e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4002e4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
  4002e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4002ec:	d000      	beq.n	4002f0 <API_UNIT_CONFIG_DSP_update_res+0x14>
  4002ee:	bd08      	pop	{r3, pc}
	     (msg_ptr->packet_in[msg_h_payload_1st_byte] == 0) &&
	     (comm_flags & SETTINGS_COMM_FLAG_UNIT_CONFIG_REQUEST_MASK) ) {
  4002f0:	4b07      	ldr	r3, [pc, #28]	; (400310 <API_UNIT_CONFIG_DSP_update_res+0x34>)
  4002f2:	881b      	ldrh	r3, [r3, #0]
	     (msg_ptr->packet_in[msg_h_payload_1st_byte] == 0) &&
  4002f4:	f013 0f08 	tst.w	r3, #8
  4002f8:	d0f9      	beq.n	4002ee <API_UNIT_CONFIG_DSP_update_res+0x12>
					
		// Update flag to avoid
		comm_flags &= ~SETTINGS_COMM_FLAG_UNIT_CONFIG_REQUEST_MASK;
  4002fa:	4a05      	ldr	r2, [pc, #20]	; (400310 <API_UNIT_CONFIG_DSP_update_res+0x34>)
  4002fc:	8813      	ldrh	r3, [r2, #0]
  4002fe:	f023 0308 	bic.w	r3, r3, #8
  400302:	041b      	lsls	r3, r3, #16
  400304:	0c1b      	lsrs	r3, r3, #16
  400306:	8013      	strh	r3, [r2, #0]
		
		// force next communication
		comm_TX_counter_clear();
  400308:	4b02      	ldr	r3, [pc, #8]	; (400314 <API_UNIT_CONFIG_DSP_update_res+0x38>)
  40030a:	4798      	blx	r3
			
	}
	
}
  40030c:	e7ef      	b.n	4002ee <API_UNIT_CONFIG_DSP_update_res+0x12>
  40030e:	bf00      	nop
  400310:	20001e54 	.word	0x20001e54
  400314:	004030f5 	.word	0x004030f5

00400318 <API_UNIT_CALIBRATION_DSP_update_res>:

///// @brief Response to request of update DSP unit calibration.
/////
///// @param[in] msp_ptr Pointer to incoming message
/////
void API_UNIT_CALIBRATION_DSP_update_res(msg_t * msg_ptr) {
  400318:	b508      	push	{r3, lr}

	// Accept command only if:
	//     1) payload length is equal to 1 byte
	//     2) payload is equal to 0 (NO ERROR)
	//     3) ARM is waiting for this message
	if ( (msg_ptr->packet_in[msg_h_payload_len] == 1) &&
  40031a:	6903      	ldr	r3, [r0, #16]
  40031c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  400320:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
  400324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  400328:	d000      	beq.n	40032c <API_UNIT_CALIBRATION_DSP_update_res+0x14>
  40032a:	bd08      	pop	{r3, pc}
	     (msg_ptr->packet_in[msg_h_payload_1st_byte] == 0) &&
	     (comm_flags & SETTINGS_COMM_FLAG_UNIT_CALIBRATION_REQUEST_MASK) ) {
  40032c:	4b07      	ldr	r3, [pc, #28]	; (40034c <API_UNIT_CALIBRATION_DSP_update_res+0x34>)
  40032e:	881b      	ldrh	r3, [r3, #0]
	     (msg_ptr->packet_in[msg_h_payload_1st_byte] == 0) &&
  400330:	f013 0f10 	tst.w	r3, #16
  400334:	d0f9      	beq.n	40032a <API_UNIT_CALIBRATION_DSP_update_res+0x12>
		
		// Update flag to avoid
		comm_flags &= ~SETTINGS_COMM_FLAG_UNIT_CALIBRATION_REQUEST_MASK;
  400336:	4a05      	ldr	r2, [pc, #20]	; (40034c <API_UNIT_CALIBRATION_DSP_update_res+0x34>)
  400338:	8813      	ldrh	r3, [r2, #0]
  40033a:	f023 0310 	bic.w	r3, r3, #16
  40033e:	041b      	lsls	r3, r3, #16
  400340:	0c1b      	lsrs	r3, r3, #16
  400342:	8013      	strh	r3, [r2, #0]
		
		// force next communication
		comm_TX_counter_clear();
  400344:	4b02      	ldr	r3, [pc, #8]	; (400350 <API_UNIT_CALIBRATION_DSP_update_res+0x38>)
  400346:	4798      	blx	r3
		
	}
	
}
  400348:	e7ef      	b.n	40032a <API_UNIT_CALIBRATION_DSP_update_res+0x12>
  40034a:	bf00      	nop
  40034c:	20001e54 	.word	0x20001e54
  400350:	004030f5 	.word	0x004030f5

00400354 <API_CTRL_DSP_trend_150cycles_res>:

///// @brief Response to request of 150 cycles trend.
/////
///// @param[in] msp_ptr Pointer to incoming message
/////
void API_CTRL_DSP_trend_150cycles_res(msg_t * msg_ptr) {	
  400354:	b508      	push	{r3, lr}
	
	// Accept command only if ARM is waiting for this message
	if (comm_flags & SETTINGS_COMM_FLAG_TREND_150CYCLE_MASK) {
  400356:	4b21      	ldr	r3, [pc, #132]	; (4003dc <API_CTRL_DSP_trend_150cycles_res+0x88>)
  400358:	881b      	ldrh	r3, [r3, #0]
  40035a:	f013 0f20 	tst.w	r3, #32
  40035e:	d039      	beq.n	4003d4 <API_CTRL_DSP_trend_150cycles_res+0x80>

		// First msg (trend_request_counter=0). It must return 0x00.
		if ( (trend_150cycles_request_counter==0) && (msg_ptr->packet_in[msg_h_payload_len] == 1) && (msg_ptr->packet_in[msg_h_payload_1st_byte] == 0x00)) {
  400360:	4b1f      	ldr	r3, [pc, #124]	; (4003e0 <API_CTRL_DSP_trend_150cycles_res+0x8c>)
  400362:	8819      	ldrh	r1, [r3, #0]
  400364:	b959      	cbnz	r1, 40037e <API_CTRL_DSP_trend_150cycles_res+0x2a>
  400366:	6903      	ldr	r3, [r0, #16]
  400368:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40036c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
  400370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  400374:	d12e      	bne.n	4003d4 <API_CTRL_DSP_trend_150cycles_res+0x80>
			 trend_150cycles_request_counter++;
  400376:	2201      	movs	r2, #1
  400378:	4b19      	ldr	r3, [pc, #100]	; (4003e0 <API_CTRL_DSP_trend_150cycles_res+0x8c>)
  40037a:	801a      	strh	r2, [r3, #0]
  40037c:	e02a      	b.n	4003d4 <API_CTRL_DSP_trend_150cycles_res+0x80>
		}
		// Trend data (0 < trend_request_counter < (SETTINGS_TREND_MSG_NUMBER-1) ). Save data into trend structure.
		else if ((trend_150cycles_request_counter>0) && (trend_150cycles_request_counter<(SETTINGS_TREND_LENGHT_IN_MSG-1))) {
  40037e:	1e4b      	subs	r3, r1, #1
  400380:	b29b      	uxth	r3, r3
  400382:	2b09      	cmp	r3, #9
  400384:	d907      	bls.n	400396 <API_CTRL_DSP_trend_150cycles_res+0x42>
			copy_content( &msg_ptr->packet_in[msg_h_payload_1st_byte] , (((uint8_t *)&sdcard_trend_150cycles)+((trend_150cycles_request_counter-1)<<7)) , msg_ptr->packet_in[msg_h_payload_len] );
			trend_150cycles_request_counter++;
		}
		// Last msg. It must return 0xFF.
		else if ((trend_150cycles_request_counter==(SETTINGS_TREND_LENGHT_IN_MSG-1)) && (msg_ptr->packet_in[msg_h_payload_len] == 1) && (msg_ptr->packet_in[msg_h_payload_1st_byte] = 0xFF)) {
  400386:	290b      	cmp	r1, #11
  400388:	d111      	bne.n	4003ae <API_CTRL_DSP_trend_150cycles_res+0x5a>
  40038a:	7c43      	ldrb	r3, [r0, #17]
  40038c:	2b01      	cmp	r3, #1
  40038e:	d121      	bne.n	4003d4 <API_CTRL_DSP_trend_150cycles_res+0x80>
  400390:	23ff      	movs	r3, #255	; 0xff
  400392:	7483      	strb	r3, [r0, #18]
  400394:	e00f      	b.n	4003b6 <API_CTRL_DSP_trend_150cycles_res+0x62>
			copy_content( &msg_ptr->packet_in[msg_h_payload_1st_byte] , (((uint8_t *)&sdcard_trend_150cycles)+((trend_150cycles_request_counter-1)<<7)) , msg_ptr->packet_in[msg_h_payload_len] );
  400396:	3901      	subs	r1, #1
  400398:	7c42      	ldrb	r2, [r0, #17]
  40039a:	4b12      	ldr	r3, [pc, #72]	; (4003e4 <API_CTRL_DSP_trend_150cycles_res+0x90>)
  40039c:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
  4003a0:	3012      	adds	r0, #18
  4003a2:	4b11      	ldr	r3, [pc, #68]	; (4003e8 <API_CTRL_DSP_trend_150cycles_res+0x94>)
  4003a4:	4798      	blx	r3
			trend_150cycles_request_counter++;
  4003a6:	4a0e      	ldr	r2, [pc, #56]	; (4003e0 <API_CTRL_DSP_trend_150cycles_res+0x8c>)
  4003a8:	8813      	ldrh	r3, [r2, #0]
  4003aa:	3301      	adds	r3, #1
  4003ac:	8013      	strh	r3, [r2, #0]
		}
		// If no one, do nothing.

		// If trend structure is complete, clear communication flag and set sd-card task flag to force 
		// data storing in background.
		if (trend_150cycles_request_counter == SETTINGS_TREND_LENGHT_IN_MSG) {
  4003ae:	4b0c      	ldr	r3, [pc, #48]	; (4003e0 <API_CTRL_DSP_trend_150cycles_res+0x8c>)
  4003b0:	881b      	ldrh	r3, [r3, #0]
  4003b2:	2b0c      	cmp	r3, #12
  4003b4:	d10e      	bne.n	4003d4 <API_CTRL_DSP_trend_150cycles_res+0x80>
				
			// Update flags
			comm_flags &= ~SETTINGS_COMM_FLAG_TREND_150CYCLE_MASK;
  4003b6:	4a09      	ldr	r2, [pc, #36]	; (4003dc <API_CTRL_DSP_trend_150cycles_res+0x88>)
  4003b8:	8813      	ldrh	r3, [r2, #0]
  4003ba:	f023 0320 	bic.w	r3, r3, #32
  4003be:	041b      	lsls	r3, r3, #16
  4003c0:	0c1b      	lsrs	r3, r3, #16
  4003c2:	8013      	strh	r3, [r2, #0]
			sdcard_flags_task |= SDCARD_FLAGS_TASK_SAVE_TRENDS_150CYCLES;	
  4003c4:	4a09      	ldr	r2, [pc, #36]	; (4003ec <API_CTRL_DSP_trend_150cycles_res+0x98>)
  4003c6:	7813      	ldrb	r3, [r2, #0]
  4003c8:	f043 0301 	orr.w	r3, r3, #1
  4003cc:	7013      	strb	r3, [r2, #0]
			
			// Reset counter
			trend_150cycles_request_counter = 0;
  4003ce:	2200      	movs	r2, #0
  4003d0:	4b03      	ldr	r3, [pc, #12]	; (4003e0 <API_CTRL_DSP_trend_150cycles_res+0x8c>)
  4003d2:	801a      	strh	r2, [r3, #0]
		}	
	
	}

	// force next communication
	comm_TX_counter_clear();
  4003d4:	4b06      	ldr	r3, [pc, #24]	; (4003f0 <API_CTRL_DSP_trend_150cycles_res+0x9c>)
  4003d6:	4798      	blx	r3
  4003d8:	bd08      	pop	{r3, pc}
  4003da:	bf00      	nop
  4003dc:	20001e54 	.word	0x20001e54
  4003e0:	20000a8e 	.word	0x20000a8e
  4003e4:	20001830 	.word	0x20001830
  4003e8:	00403129 	.word	0x00403129
  4003ec:	20001cf0 	.word	0x20001cf0
  4003f0:	004030f5 	.word	0x004030f5

004003f4 <API_CTRL_DSP_trend_5minutes_res>:

///// @brief Response to request of 5 minutes trend.
/////
///// @param[in] msp_ptr Pointer to incoming message
/////
void API_CTRL_DSP_trend_5minutes_res(msg_t * msg_ptr) {
  4003f4:	b508      	push	{r3, lr}
	
	// Accept command only if ARM is waiting for this message
	if (comm_flags & SETTINGS_COMM_FLAG_TREND_5MINUTES_MASK) {
  4003f6:	4b21      	ldr	r3, [pc, #132]	; (40047c <API_CTRL_DSP_trend_5minutes_res+0x88>)
  4003f8:	881b      	ldrh	r3, [r3, #0]
  4003fa:	f013 0f40 	tst.w	r3, #64	; 0x40
  4003fe:	d039      	beq.n	400474 <API_CTRL_DSP_trend_5minutes_res+0x80>

		// First msg (trend_request_counter=0). It must return 0x00.
		if ( (trend_5minutes_request_counter==0) && (msg_ptr->packet_in[msg_h_payload_len] == 1) && (msg_ptr->packet_in[msg_h_payload_1st_byte] == 0x00)) {
  400400:	4b1f      	ldr	r3, [pc, #124]	; (400480 <API_CTRL_DSP_trend_5minutes_res+0x8c>)
  400402:	8819      	ldrh	r1, [r3, #0]
  400404:	b959      	cbnz	r1, 40041e <API_CTRL_DSP_trend_5minutes_res+0x2a>
  400406:	6903      	ldr	r3, [r0, #16]
  400408:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40040c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
  400410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  400414:	d12e      	bne.n	400474 <API_CTRL_DSP_trend_5minutes_res+0x80>
			trend_5minutes_request_counter++;
  400416:	2201      	movs	r2, #1
  400418:	4b19      	ldr	r3, [pc, #100]	; (400480 <API_CTRL_DSP_trend_5minutes_res+0x8c>)
  40041a:	801a      	strh	r2, [r3, #0]
  40041c:	e02a      	b.n	400474 <API_CTRL_DSP_trend_5minutes_res+0x80>
		}
		// Trend data (0 < trend_request_counter < (SETTINGS_TREND_MSG_NUMBER-1) ). Save data into trend structure.
		else if ((trend_5minutes_request_counter>0) && (trend_5minutes_request_counter<(SETTINGS_TREND_LENGHT_IN_MSG-1))) {
  40041e:	1e4b      	subs	r3, r1, #1
  400420:	b29b      	uxth	r3, r3
  400422:	2b09      	cmp	r3, #9
  400424:	d907      	bls.n	400436 <API_CTRL_DSP_trend_5minutes_res+0x42>
			copy_content( &msg_ptr->packet_in[msg_h_payload_1st_byte] , (((uint8_t *)&sdcard_trend_5minutes)+((trend_5minutes_request_counter-1)<<7)) , msg_ptr->packet_in[msg_h_payload_len] );
			trend_5minutes_request_counter++;
		}
		// Last msg. It must return 0xFF.
		else if ((trend_5minutes_request_counter==(SETTINGS_TREND_LENGHT_IN_MSG-1)) && (msg_ptr->packet_in[msg_h_payload_len] == 1) && (msg_ptr->packet_in[msg_h_payload_1st_byte] = 0xFF)) {
  400426:	290b      	cmp	r1, #11
  400428:	d111      	bne.n	40044e <API_CTRL_DSP_trend_5minutes_res+0x5a>
  40042a:	7c43      	ldrb	r3, [r0, #17]
  40042c:	2b01      	cmp	r3, #1
  40042e:	d121      	bne.n	400474 <API_CTRL_DSP_trend_5minutes_res+0x80>
  400430:	23ff      	movs	r3, #255	; 0xff
  400432:	7483      	strb	r3, [r0, #18]
  400434:	e00f      	b.n	400456 <API_CTRL_DSP_trend_5minutes_res+0x62>
			copy_content( &msg_ptr->packet_in[msg_h_payload_1st_byte] , (((uint8_t *)&sdcard_trend_5minutes)+((trend_5minutes_request_counter-1)<<7)) , msg_ptr->packet_in[msg_h_payload_len] );
  400436:	3901      	subs	r1, #1
  400438:	7c42      	ldrb	r2, [r0, #17]
  40043a:	4b12      	ldr	r3, [pc, #72]	; (400484 <API_CTRL_DSP_trend_5minutes_res+0x90>)
  40043c:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
  400440:	3012      	adds	r0, #18
  400442:	4b11      	ldr	r3, [pc, #68]	; (400488 <API_CTRL_DSP_trend_5minutes_res+0x94>)
  400444:	4798      	blx	r3
			trend_5minutes_request_counter++;
  400446:	4a0e      	ldr	r2, [pc, #56]	; (400480 <API_CTRL_DSP_trend_5minutes_res+0x8c>)
  400448:	8813      	ldrh	r3, [r2, #0]
  40044a:	3301      	adds	r3, #1
  40044c:	8013      	strh	r3, [r2, #0]
		}
		// If no one, do nothing.

		// If trend structure is complete, clear communication flag and set sd-card task flag to force
		// data storing in background.
		if (trend_5minutes_request_counter == SETTINGS_TREND_LENGHT_IN_MSG) {
  40044e:	4b0c      	ldr	r3, [pc, #48]	; (400480 <API_CTRL_DSP_trend_5minutes_res+0x8c>)
  400450:	881b      	ldrh	r3, [r3, #0]
  400452:	2b0c      	cmp	r3, #12
  400454:	d10e      	bne.n	400474 <API_CTRL_DSP_trend_5minutes_res+0x80>
			
			// Update flags
			comm_flags &= ~SETTINGS_COMM_FLAG_TREND_5MINUTES_MASK;
  400456:	4a09      	ldr	r2, [pc, #36]	; (40047c <API_CTRL_DSP_trend_5minutes_res+0x88>)
  400458:	8813      	ldrh	r3, [r2, #0]
  40045a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  40045e:	041b      	lsls	r3, r3, #16
  400460:	0c1b      	lsrs	r3, r3, #16
  400462:	8013      	strh	r3, [r2, #0]
			sdcard_flags_task |= SDCARD_FLAGS_TASK_SAVE_TRENDS_5MINUTES;
  400464:	4a09      	ldr	r2, [pc, #36]	; (40048c <API_CTRL_DSP_trend_5minutes_res+0x98>)
  400466:	7813      	ldrb	r3, [r2, #0]
  400468:	f043 0302 	orr.w	r3, r3, #2
  40046c:	7013      	strb	r3, [r2, #0]
			
			// Reset counter
			trend_5minutes_request_counter = 0;
  40046e:	2200      	movs	r2, #0
  400470:	4b03      	ldr	r3, [pc, #12]	; (400480 <API_CTRL_DSP_trend_5minutes_res+0x8c>)
  400472:	801a      	strh	r2, [r3, #0]
		}
		
	}

	// force next communication
	comm_TX_counter_clear();
  400474:	4b06      	ldr	r3, [pc, #24]	; (400490 <API_CTRL_DSP_trend_5minutes_res+0x9c>)
  400476:	4798      	blx	r3
  400478:	bd08      	pop	{r3, pc}
  40047a:	bf00      	nop
  40047c:	20001e54 	.word	0x20001e54
  400480:	20000a90 	.word	0x20000a90
  400484:	20001300 	.word	0x20001300
  400488:	00403129 	.word	0x00403129
  40048c:	20001cf0 	.word	0x20001cf0
  400490:	004030f5 	.word	0x004030f5

00400494 <API_CTRL_DSP_event_buffer_res>:

///// @brief Response to request of event buffer.
/////
///// @param[in] msp_ptr Pointer to incoming message
/////
void API_CTRL_DSP_event_buffer_res(msg_t * msg_ptr) {
  400494:	b508      	push	{r3, lr}
	
	// Accept command only if ARM is waiting for this message
	if (comm_flags & SETTINGS_COMM_FLAG_EVENT_BUFFER_MASK) {
  400496:	4b25      	ldr	r3, [pc, #148]	; (40052c <API_CTRL_DSP_event_buffer_res+0x98>)
  400498:	881b      	ldrh	r3, [r3, #0]
  40049a:	f413 7f80 	tst.w	r3, #256	; 0x100
  40049e:	d005      	beq.n	4004ac <API_CTRL_DSP_event_buffer_res+0x18>

		// First msg (event_request_counter=0).
		if ( (event_request_counter==0) && (msg_ptr->packet_in[msg_h_payload_len] == sizeof(sdcard_event_buffer_info) ) ) {
  4004a0:	4b23      	ldr	r3, [pc, #140]	; (400530 <API_CTRL_DSP_event_buffer_res+0x9c>)
  4004a2:	881b      	ldrh	r3, [r3, #0]
  4004a4:	b9a3      	cbnz	r3, 4004d0 <API_CTRL_DSP_event_buffer_res+0x3c>
  4004a6:	7c43      	ldrb	r3, [r0, #17]
  4004a8:	2b06      	cmp	r3, #6
  4004aa:	d002      	beq.n	4004b2 <API_CTRL_DSP_event_buffer_res+0x1e>
		}
		
	}

	// force next communication
	comm_TX_counter_clear();
  4004ac:	4b21      	ldr	r3, [pc, #132]	; (400534 <API_CTRL_DSP_event_buffer_res+0xa0>)
  4004ae:	4798      	blx	r3
  4004b0:	bd08      	pop	{r3, pc}
			copy_content( &msg_ptr->packet_in[msg_h_payload_1st_byte] , ((uint8_t *)&sdcard_event_buffer_info[0]) , sizeof(sdcard_event_buffer_info) );
  4004b2:	2206      	movs	r2, #6
  4004b4:	4920      	ldr	r1, [pc, #128]	; (400538 <API_CTRL_DSP_event_buffer_res+0xa4>)
  4004b6:	3012      	adds	r0, #18
  4004b8:	4b20      	ldr	r3, [pc, #128]	; (40053c <API_CTRL_DSP_event_buffer_res+0xa8>)
  4004ba:	4798      	blx	r3
			sdcard_flags_task |= SDCARD_FLAGS_TASK_SAVE_EVENT_BUFFER_INFO;
  4004bc:	4a20      	ldr	r2, [pc, #128]	; (400540 <API_CTRL_DSP_event_buffer_res+0xac>)
  4004be:	7813      	ldrb	r3, [r2, #0]
  4004c0:	f043 0308 	orr.w	r3, r3, #8
  4004c4:	7013      	strb	r3, [r2, #0]
			event_request_counter++;
  4004c6:	4a1a      	ldr	r2, [pc, #104]	; (400530 <API_CTRL_DSP_event_buffer_res+0x9c>)
  4004c8:	8813      	ldrh	r3, [r2, #0]
  4004ca:	3301      	adds	r3, #1
  4004cc:	8013      	strh	r3, [r2, #0]
  4004ce:	e7ed      	b.n	4004ac <API_CTRL_DSP_event_buffer_res+0x18>
		else if ( (event_request_counter>0) && (event_request_counter<=SETTINGS_EVENT_BUFFER_LENGHT) && (msg_ptr->packet_in[msg_h_payload_len] == sizeof(sdcard_event_buffer)) ) {
  4004d0:	1e5a      	subs	r2, r3, #1
  4004d2:	b292      	uxth	r2, r2
  4004d4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
  4004d8:	d202      	bcs.n	4004e0 <API_CTRL_DSP_event_buffer_res+0x4c>
  4004da:	7c42      	ldrb	r2, [r0, #17]
  4004dc:	2a12      	cmp	r2, #18
  4004de:	d016      	beq.n	40050e <API_CTRL_DSP_event_buffer_res+0x7a>
		else if ((event_request_counter==(SETTINGS_EVENT_BUFFER_LENGHT+1)) && (msg_ptr->packet_in[msg_h_payload_len] == 1) && (msg_ptr->packet_in[msg_h_payload_1st_byte] == 0)) {
  4004e0:	f240 4201 	movw	r2, #1025	; 0x401
  4004e4:	4293      	cmp	r3, r2
  4004e6:	d1e1      	bne.n	4004ac <API_CTRL_DSP_event_buffer_res+0x18>
  4004e8:	6903      	ldr	r3, [r0, #16]
  4004ea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4004ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
  4004f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4004f6:	d1d9      	bne.n	4004ac <API_CTRL_DSP_event_buffer_res+0x18>
			event_request_counter=0;		
  4004f8:	2200      	movs	r2, #0
  4004fa:	4b0d      	ldr	r3, [pc, #52]	; (400530 <API_CTRL_DSP_event_buffer_res+0x9c>)
  4004fc:	801a      	strh	r2, [r3, #0]
			comm_flags &= ~SETTINGS_COMM_FLAG_EVENT_BUFFER_MASK;
  4004fe:	4a0b      	ldr	r2, [pc, #44]	; (40052c <API_CTRL_DSP_event_buffer_res+0x98>)
  400500:	8813      	ldrh	r3, [r2, #0]
  400502:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  400506:	041b      	lsls	r3, r3, #16
  400508:	0c1b      	lsrs	r3, r3, #16
  40050a:	8013      	strh	r3, [r2, #0]
  40050c:	e7ce      	b.n	4004ac <API_CTRL_DSP_event_buffer_res+0x18>
			copy_content( &msg_ptr->packet_in[msg_h_payload_1st_byte] , ((uint8_t *)&sdcard_event_buffer[0]) , sizeof(sdcard_event_buffer) );
  40050e:	490d      	ldr	r1, [pc, #52]	; (400544 <API_CTRL_DSP_event_buffer_res+0xb0>)
  400510:	4410      	add	r0, r2
  400512:	4b0a      	ldr	r3, [pc, #40]	; (40053c <API_CTRL_DSP_event_buffer_res+0xa8>)
  400514:	4798      	blx	r3
			sdcard_flags_task |= SDCARD_FLAGS_TASK_SAVE_EVENT_BUFFER;
  400516:	4a0a      	ldr	r2, [pc, #40]	; (400540 <API_CTRL_DSP_event_buffer_res+0xac>)
  400518:	7813      	ldrb	r3, [r2, #0]
  40051a:	f043 0310 	orr.w	r3, r3, #16
  40051e:	7013      	strb	r3, [r2, #0]
			event_request_counter++;
  400520:	4a03      	ldr	r2, [pc, #12]	; (400530 <API_CTRL_DSP_event_buffer_res+0x9c>)
  400522:	8813      	ldrh	r3, [r2, #0]
  400524:	3301      	adds	r3, #1
  400526:	8013      	strh	r3, [r2, #0]
  400528:	e7c0      	b.n	4004ac <API_CTRL_DSP_event_buffer_res+0x18>
  40052a:	bf00      	nop
  40052c:	20001e54 	.word	0x20001e54
  400530:	20000a8c 	.word	0x20000a8c
  400534:	004030f5 	.word	0x004030f5
  400538:	20001cf4 	.word	0x20001cf4
  40053c:	00403129 	.word	0x00403129
  400540:	20001cf0 	.word	0x20001cf0
  400544:	200012ec 	.word	0x200012ec

00400548 <API_CTRL_DSP_event_det_res>:

///// @brief Response to request of detection info.
/////
///// @param[in] msp_ptr Pointer to incoming message
/////
void API_CTRL_DSP_event_det_res(msg_t * msg_ptr) {
  400548:	b508      	push	{r3, lr}
	
	// Accept command only if:
	//     1) payload length is equal to sizeof(event_det_t)
	//     2) ARM is waiting for this message
	if ( (msg_ptr->packet_in[msg_h_payload_len] == sizeof(event_det_t)) &&
  40054a:	7c43      	ldrb	r3, [r0, #17]
  40054c:	2b18      	cmp	r3, #24
  40054e:	d000      	beq.n	400552 <API_CTRL_DSP_event_det_res+0xa>
  400550:	bd08      	pop	{r3, pc}
	     (comm_flags & SETTINGS_COMM_FLAG_EVENT_DET_MASK) ) {
  400552:	4b0c      	ldr	r3, [pc, #48]	; (400584 <API_CTRL_DSP_event_det_res+0x3c>)
  400554:	881b      	ldrh	r3, [r3, #0]
	if ( (msg_ptr->packet_in[msg_h_payload_len] == sizeof(event_det_t)) &&
  400556:	f413 7f00 	tst.w	r3, #512	; 0x200
  40055a:	d0f9      	beq.n	400550 <API_CTRL_DSP_event_det_res+0x8>

		// copy data to temporal variable
		copy_content( &msg_ptr->packet_in[msg_h_payload_1st_byte] ,
  40055c:	2218      	movs	r2, #24
  40055e:	490a      	ldr	r1, [pc, #40]	; (400588 <API_CTRL_DSP_event_det_res+0x40>)
  400560:	3012      	adds	r0, #18
  400562:	4b0a      	ldr	r3, [pc, #40]	; (40058c <API_CTRL_DSP_event_det_res+0x44>)
  400564:	4798      	blx	r3
		              (uint8_t *)&sdcard_event_det ,
					  sizeof(event_det_t));

		// Update flags
		comm_flags &= ~SETTINGS_COMM_FLAG_EVENT_DET_MASK;
  400566:	4a07      	ldr	r2, [pc, #28]	; (400584 <API_CTRL_DSP_event_det_res+0x3c>)
  400568:	8813      	ldrh	r3, [r2, #0]
  40056a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  40056e:	041b      	lsls	r3, r3, #16
  400570:	0c1b      	lsrs	r3, r3, #16
  400572:	8013      	strh	r3, [r2, #0]
		sdcard_flags_task |= SDCARD_FLAGS_TASK_SAVE_EVENT_DET_INFO;
  400574:	4a06      	ldr	r2, [pc, #24]	; (400590 <API_CTRL_DSP_event_det_res+0x48>)
  400576:	7813      	ldrb	r3, [r2, #0]
  400578:	f043 0304 	orr.w	r3, r3, #4
  40057c:	7013      	strb	r3, [r2, #0]
		
		// force next communication
		comm_TX_counter_clear();
  40057e:	4b05      	ldr	r3, [pc, #20]	; (400594 <API_CTRL_DSP_event_det_res+0x4c>)
  400580:	4798      	blx	r3

	}
	
}
  400582:	e7e5      	b.n	400550 <API_CTRL_DSP_event_det_res+0x8>
  400584:	20001e54 	.word	0x20001e54
  400588:	20001818 	.word	0x20001818
  40058c:	00403129 	.word	0x00403129
  400590:	20001cf0 	.word	0x20001cf0
  400594:	004030f5 	.word	0x004030f5

00400598 <API_FW_ARM_version_req>:
/// @brief Response to FW version request.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_FW_ARM_version_req( msg_t * msg_ptr )
{
  400598:	b510      	push	{r4, lr}
  40059a:	b088      	sub	sp, #32

	// by default size = 2 + 12 + 9
	const uint8_t fw_version[2 + sizeof(__DATE__) + sizeof(__TIME__)] = {
  40059c:	2302      	movs	r3, #2
  40059e:	f88d 3008 	strb.w	r3, [sp, #8]
  4005a2:	2303      	movs	r3, #3
  4005a4:	f88d 3009 	strb.w	r3, [sp, #9]
  4005a8:	2353      	movs	r3, #83	; 0x53
  4005aa:	f88d 300a 	strb.w	r3, [sp, #10]
  4005ae:	2365      	movs	r3, #101	; 0x65
  4005b0:	f88d 300b 	strb.w	r3, [sp, #11]
  4005b4:	2370      	movs	r3, #112	; 0x70
  4005b6:	f88d 300c 	strb.w	r3, [sp, #12]
  4005ba:	2220      	movs	r2, #32
  4005bc:	f88d 200d 	strb.w	r2, [sp, #13]
  4005c0:	2331      	movs	r3, #49	; 0x31
  4005c2:	f88d 300e 	strb.w	r3, [sp, #14]
  4005c6:	2133      	movs	r1, #51	; 0x33
  4005c8:	f88d 100f 	strb.w	r1, [sp, #15]
  4005cc:	f88d 2010 	strb.w	r2, [sp, #16]
  4005d0:	2232      	movs	r2, #50	; 0x32
  4005d2:	f88d 2011 	strb.w	r2, [sp, #17]
  4005d6:	2430      	movs	r4, #48	; 0x30
  4005d8:	f88d 4012 	strb.w	r4, [sp, #18]
  4005dc:	f88d 2013 	strb.w	r2, [sp, #19]
  4005e0:	f88d 3014 	strb.w	r3, [sp, #20]
  4005e4:	2200      	movs	r2, #0
  4005e6:	f88d 2015 	strb.w	r2, [sp, #21]
  4005ea:	f88d 3016 	strb.w	r3, [sp, #22]
  4005ee:	2137      	movs	r1, #55	; 0x37
  4005f0:	f88d 1017 	strb.w	r1, [sp, #23]
  4005f4:	213a      	movs	r1, #58	; 0x3a
  4005f6:	f88d 1018 	strb.w	r1, [sp, #24]
  4005fa:	f88d 3019 	strb.w	r3, [sp, #25]
  4005fe:	f88d 401a 	strb.w	r4, [sp, #26]
  400602:	f88d 101b 	strb.w	r1, [sp, #27]
  400606:	2335      	movs	r3, #53	; 0x35
  400608:	f88d 301c 	strb.w	r3, [sp, #28]
  40060c:	2334      	movs	r3, #52	; 0x34
  40060e:	f88d 301d 	strb.w	r3, [sp, #29]
  400612:	f88d 201e 	strb.w	r2, [sp, #30]
		SETTINGS_ARM_FW_VERSION,SETTINGS_ARM_FW_VERSION_ENG_BUILD,
		__DATE__[0],__DATE__[1],__DATE__[2],__DATE__[3],__DATE__[4],__DATE__[5],__DATE__[6],__DATE__[7],__DATE__[8],__DATE__[9],__DATE__[10],__DATE__[11],
		__TIME__[0],__TIME__[1],__TIME__[2],__TIME__[3],__TIME__[4],__TIME__[5],__TIME__[6],__TIME__[7],__TIME__[8]};

	comm_send_msg( msg_ptr->uart_ptr ,
  400616:	7c02      	ldrb	r2, [r0, #16]
  400618:	3201      	adds	r2, #1
  40061a:	7b81      	ldrb	r1, [r0, #14]
  40061c:	6800      	ldr	r0, [r0, #0]
  40061e:	ab02      	add	r3, sp, #8
  400620:	9300      	str	r3, [sp, #0]
  400622:	2317      	movs	r3, #23
  400624:	b2d2      	uxtb	r2, r2
  400626:	4c02      	ldr	r4, [pc, #8]	; (400630 <API_FW_ARM_version_req+0x98>)
  400628:	47a0      	blx	r4
                   msg_ptr->packet_in[msg_h_src_id] ,
			       msg_ptr->packet_in[msg_h_msg_id]+1 ,
			       sizeof(fw_version) ,
				   (uint8_t *)&fw_version[0]);

}
  40062a:	b008      	add	sp, #32
  40062c:	bd10      	pop	{r4, pc}
  40062e:	bf00      	nop
  400630:	00402ff1 	.word	0x00402ff1

00400634 <API_FW_ARM_echo_req>:
/// @brief Send echo back to source.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_FW_ARM_echo_req( msg_t * msg_ptr )
{
  400634:	b510      	push	{r4, lr}
  400636:	b082      	sub	sp, #8

	comm_send_msg( msg_ptr->uart_ptr ,
  400638:	7c43      	ldrb	r3, [r0, #17]
  40063a:	7c02      	ldrb	r2, [r0, #16]
  40063c:	3201      	adds	r2, #1
  40063e:	7b81      	ldrb	r1, [r0, #14]
  400640:	4604      	mov	r4, r0
  400642:	f854 0b12 	ldr.w	r0, [r4], #18
  400646:	9400      	str	r4, [sp, #0]
  400648:	b2d2      	uxtb	r2, r2
  40064a:	4c02      	ldr	r4, [pc, #8]	; (400654 <API_FW_ARM_echo_req+0x20>)
  40064c:	47a0      	blx	r4
				   msg_ptr->packet_in[msg_h_src_id] ,
				   msg_ptr->packet_in[msg_h_msg_id]+1 ,
				   msg_ptr->packet_in[msg_h_payload_len] ,
				   (uint8_t *)&msg_ptr->packet_in[msg_h_payload_1st_byte]);

}
  40064e:	b002      	add	sp, #8
  400650:	bd10      	pop	{r4, pc}
  400652:	bf00      	nop
  400654:	00402ff1 	.word	0x00402ff1

00400658 <API_FW_ARM_unique_id_req>:
/// @brief Send ARM unique ID.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_FW_ARM_unique_id_req( msg_t * msg_ptr )
{
  400658:	b510      	push	{r4, lr}
  40065a:	b082      	sub	sp, #8

	comm_send_msg( msg_ptr->uart_ptr ,
  40065c:	7c02      	ldrb	r2, [r0, #16]
  40065e:	3201      	adds	r2, #1
  400660:	7b81      	ldrb	r1, [r0, #14]
  400662:	6800      	ldr	r0, [r0, #0]
  400664:	4b03      	ldr	r3, [pc, #12]	; (400674 <API_FW_ARM_unique_id_req+0x1c>)
  400666:	9300      	str	r3, [sp, #0]
  400668:	2310      	movs	r3, #16
  40066a:	b2d2      	uxtb	r2, r2
  40066c:	4c02      	ldr	r4, [pc, #8]	; (400678 <API_FW_ARM_unique_id_req+0x20>)
  40066e:	47a0      	blx	r4
				   msg_ptr->packet_in[msg_h_src_id] ,
				   msg_ptr->packet_in[msg_h_msg_id]+1 ,
				   sizeof(ARM_unique_id) ,
				   (uint8_t *)ARM_unique_id);

}
  400670:	b002      	add	sp, #8
  400672:	bd10      	pop	{r4, pc}
  400674:	20001da0 	.word	0x20001da0
  400678:	00402ff1 	.word	0x00402ff1

0040067c <API_FW_ARM_reset_req>:

/// @brief Request ARM reset.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_FW_ARM_reset_req( msg_t * msg_ptr ) {
  40067c:	b570      	push	{r4, r5, r6, lr}
  40067e:	b084      	sub	sp, #16
  400680:	4605      	mov	r5, r0
	
	uint8_t response = 1;
  400682:	2601      	movs	r6, #1
  400684:	ac04      	add	r4, sp, #16
  400686:	f804 6d01 	strb.w	r6, [r4, #-1]!
	
	system_reset_ARM();
  40068a:	4b06      	ldr	r3, [pc, #24]	; (4006a4 <API_FW_ARM_reset_req+0x28>)
  40068c:	4798      	blx	r3
	
	// send error
	comm_send_msg( msg_ptr->uart_ptr ,
  40068e:	7c2a      	ldrb	r2, [r5, #16]
  400690:	4432      	add	r2, r6
  400692:	7ba9      	ldrb	r1, [r5, #14]
  400694:	6828      	ldr	r0, [r5, #0]
  400696:	9400      	str	r4, [sp, #0]
  400698:	4633      	mov	r3, r6
  40069a:	b2d2      	uxtb	r2, r2
  40069c:	4c02      	ldr	r4, [pc, #8]	; (4006a8 <API_FW_ARM_reset_req+0x2c>)
  40069e:	47a0      	blx	r4
	               msg_ptr->packet_in[msg_h_src_id] ,
	               msg_ptr->packet_in[msg_h_msg_id]+1 ,
	               1 ,
	               &response);
	
}
  4006a0:	b004      	add	sp, #16
  4006a2:	bd70      	pop	{r4, r5, r6, pc}
  4006a4:	00403659 	.word	0x00403659
  4006a8:	00402ff1 	.word	0x00402ff1

004006ac <API_FW_ARM_unknow_msg_id>:
/// @param[in] msp_ptr Pointer to incoming message
///
void API_FW_ARM_unknow_msg_id( msg_t * msg_ptr ) {

	// Do not send a error message (id unknown) if DSP is the source.
	if (msg_ptr->packet_in[msg_h_src_id] != SETTINGS_DSP_ID ) {
  4006ac:	7b81      	ldrb	r1, [r0, #14]
  4006ae:	2933      	cmp	r1, #51	; 0x33
  4006b0:	d00b      	beq.n	4006ca <API_FW_ARM_unknow_msg_id+0x1e>
void API_FW_ARM_unknow_msg_id( msg_t * msg_ptr ) {
  4006b2:	b510      	push	{r4, lr}
  4006b4:	b082      	sub	sp, #8

		comm_send_msg( msg_ptr->uart_ptr ,
  4006b6:	4603      	mov	r3, r0
  4006b8:	f853 0b10 	ldr.w	r0, [r3], #16
  4006bc:	9300      	str	r3, [sp, #0]
  4006be:	2301      	movs	r3, #1
  4006c0:	220f      	movs	r2, #15
  4006c2:	4c02      	ldr	r4, [pc, #8]	; (4006cc <API_FW_ARM_unknow_msg_id+0x20>)
  4006c4:	47a0      	blx	r4
				       1 ,
					   (uint8_t *)&msg_ptr->packet_in[msg_h_msg_id]);

	}

}
  4006c6:	b002      	add	sp, #8
  4006c8:	bd10      	pop	{r4, pc}
  4006ca:	4770      	bx	lr
  4006cc:	00402ff1 	.word	0x00402ff1

004006d0 <API_RTC_ARM_send_req>:

/// @brief Send real time clock.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_RTC_ARM_send_req( msg_t * msg_ptr ) {
  4006d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4006d2:	b083      	sub	sp, #12
  4006d4:	4606      	mov	r6, r0
	
	// get time and date
	rtc_get_time(RTC, &data.hour, &data.minute, &data.second);
  4006d6:	4c10      	ldr	r4, [pc, #64]	; (400718 <API_RTC_ARM_send_req+0x48>)
  4006d8:	4f10      	ldr	r7, [pc, #64]	; (40071c <API_RTC_ARM_send_req+0x4c>)
  4006da:	4623      	mov	r3, r4
  4006dc:	1f22      	subs	r2, r4, #4
  4006de:	f1a4 0108 	sub.w	r1, r4, #8
  4006e2:	4638      	mov	r0, r7
  4006e4:	4d0e      	ldr	r5, [pc, #56]	; (400720 <API_RTC_ARM_send_req+0x50>)
  4006e6:	47a8      	blx	r5
	rtc_get_date(RTC, &data.year, &data.month, &data.day, &data.week);
  4006e8:	f1a4 0518 	sub.w	r5, r4, #24
  4006ec:	f1a4 030c 	sub.w	r3, r4, #12
  4006f0:	9300      	str	r3, [sp, #0]
  4006f2:	f1a4 0310 	sub.w	r3, r4, #16
  4006f6:	f1a4 0214 	sub.w	r2, r4, #20
  4006fa:	4629      	mov	r1, r5
  4006fc:	4638      	mov	r0, r7
  4006fe:	4c09      	ldr	r4, [pc, #36]	; (400724 <API_RTC_ARM_send_req+0x54>)
  400700:	47a0      	blx	r4

	comm_send_msg( msg_ptr->uart_ptr ,
  400702:	7c32      	ldrb	r2, [r6, #16]
  400704:	3201      	adds	r2, #1
  400706:	7bb1      	ldrb	r1, [r6, #14]
  400708:	6830      	ldr	r0, [r6, #0]
  40070a:	9500      	str	r5, [sp, #0]
  40070c:	231c      	movs	r3, #28
  40070e:	b2d2      	uxtb	r2, r2
  400710:	4c05      	ldr	r4, [pc, #20]	; (400728 <API_RTC_ARM_send_req+0x58>)
  400712:	47a0      	blx	r4
/*	comm_send_msg( msg_ptr->uart_ptr ,
                   msg_ptr->packet_in[msg_h_src_id] ,
	               msg_ptr->packet_in[msg_h_msg_id]+1 ,
	               sizeof(rtc_time_and_date_t),
	               (uint8_t *)&temp_data);*/
}
  400714:	b003      	add	sp, #12
  400716:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400718:	20000f00 	.word	0x20000f00
  40071c:	400e1460 	.word	0x400e1460
  400720:	00404f17 	.word	0x00404f17
  400724:	00405005 	.word	0x00405005
  400728:	00402ff1 	.word	0x00402ff1

0040072c <API_RTC_ARM_update_req>:

void API_RTC_ARM_update_req( msg_t * msg_ptr ) {
  40072c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40072e:	b085      	sub	sp, #20
  400730:	4604      	mov	r4, r0

	uint8_t response;

    // Accept command only if payload length is equal to 0
    if (msg_ptr->packet_in[msg_h_payload_len] == sizeof(rtc_time_and_date_t) )
  400732:	7c43      	ldrb	r3, [r0, #17]
  400734:	2b1c      	cmp	r3, #28
  400736:	d00f      	beq.n	400758 <API_RTC_ARM_update_req+0x2c>
	}
	else
	{

		// response
		response = 0x01;
  400738:	2301      	movs	r3, #1
  40073a:	f88d 300f 	strb.w	r3, [sp, #15]

	}

	comm_send_msg( msg_ptr->uart_ptr ,
  40073e:	7c22      	ldrb	r2, [r4, #16]
  400740:	3201      	adds	r2, #1
  400742:	7ba1      	ldrb	r1, [r4, #14]
  400744:	6820      	ldr	r0, [r4, #0]
  400746:	f10d 030f 	add.w	r3, sp, #15
  40074a:	9300      	str	r3, [sp, #0]
  40074c:	2301      	movs	r3, #1
  40074e:	b2d2      	uxtb	r2, r2
  400750:	4c11      	ldr	r4, [pc, #68]	; (400798 <API_RTC_ARM_update_req+0x6c>)
  400752:	47a0      	blx	r4
	               msg_ptr->packet_in[msg_h_src_id] ,
                   msg_ptr->packet_in[msg_h_msg_id]+1 ,
	               1 ,
	               &response);

}
  400754:	b005      	add	sp, #20
  400756:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	copy_content( (uint8_t *)&msg_ptr->packet_in[msg_h_payload_1st_byte] ,
  400758:	4d10      	ldr	r5, [pc, #64]	; (40079c <API_RTC_ARM_update_req+0x70>)
  40075a:	221c      	movs	r2, #28
  40075c:	4629      	mov	r1, r5
  40075e:	3012      	adds	r0, #18
  400760:	4b0f      	ldr	r3, [pc, #60]	; (4007a0 <API_RTC_ARM_update_req+0x74>)
  400762:	4798      	blx	r3
   		rtc_set_time(RTC,data.hour,data.minute,data.second);
  400764:	4e0f      	ldr	r6, [pc, #60]	; (4007a4 <API_RTC_ARM_update_req+0x78>)
  400766:	69ab      	ldr	r3, [r5, #24]
  400768:	696a      	ldr	r2, [r5, #20]
  40076a:	6929      	ldr	r1, [r5, #16]
  40076c:	4630      	mov	r0, r6
  40076e:	4f0e      	ldr	r7, [pc, #56]	; (4007a8 <API_RTC_ARM_update_req+0x7c>)
  400770:	47b8      	blx	r7
   		rtc_set_date(RTC,data.year,data.month,data.day,data.week);
  400772:	68ab      	ldr	r3, [r5, #8]
  400774:	686a      	ldr	r2, [r5, #4]
  400776:	6829      	ldr	r1, [r5, #0]
  400778:	68e8      	ldr	r0, [r5, #12]
  40077a:	9000      	str	r0, [sp, #0]
  40077c:	4630      	mov	r0, r6
  40077e:	4d0b      	ldr	r5, [pc, #44]	; (4007ac <API_RTC_ARM_update_req+0x80>)
  400780:	47a8      	blx	r5
		comm_flags |= SETTINGS_COMM_FLAG_RTC_REQUEST_MASK;
  400782:	4a0b      	ldr	r2, [pc, #44]	; (4007b0 <API_RTC_ARM_update_req+0x84>)
  400784:	8813      	ldrh	r3, [r2, #0]
  400786:	b29b      	uxth	r3, r3
  400788:	f043 0304 	orr.w	r3, r3, #4
  40078c:	8013      	strh	r3, [r2, #0]
		response = 0x00;
  40078e:	2300      	movs	r3, #0
  400790:	f88d 300f 	strb.w	r3, [sp, #15]
  400794:	e7d3      	b.n	40073e <API_RTC_ARM_update_req+0x12>
  400796:	bf00      	nop
  400798:	00402ff1 	.word	0x00402ff1
  40079c:	20000ee8 	.word	0x20000ee8
  4007a0:	00403129 	.word	0x00403129
  4007a4:	400e1460 	.word	0x400e1460
  4007a8:	00404f71 	.word	0x00404f71
  4007ac:	00405079 	.word	0x00405079
  4007b0:	20001e54 	.word	0x20001e54

004007b4 <API_SDCARD_dir_open_req>:
/// @brief Response to open directory.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_SDCARD_dir_open_req( msg_t * msg_ptr )
{
  4007b4:	b530      	push	{r4, r5, lr}
  4007b6:	b083      	sub	sp, #12
  4007b8:	4604      	mov	r4, r0

	// predefine device root directory
	memset( (void *)&sdcard_api_string , 0 , sizeof(sdcard_api_string) );
  4007ba:	4d10      	ldr	r5, [pc, #64]	; (4007fc <API_SDCARD_dir_open_req+0x48>)
  4007bc:	2280      	movs	r2, #128	; 0x80
  4007be:	2100      	movs	r1, #0
  4007c0:	4628      	mov	r0, r5
  4007c2:	4b0f      	ldr	r3, [pc, #60]	; (400800 <API_SDCARD_dir_open_req+0x4c>)
  4007c4:	4798      	blx	r3
	sprintf( (char *)&sdcard_api_string ,"%s" , "0:/"); // store first three characteres
  4007c6:	4b0f      	ldr	r3, [pc, #60]	; (400804 <API_SDCARD_dir_open_req+0x50>)
  4007c8:	6818      	ldr	r0, [r3, #0]
  4007ca:	4629      	mov	r1, r5
  4007cc:	f841 0b03 	str.w	r0, [r1], #3
	
	// copy name of directory
	copy_content( (uint8_t *)&msg_ptr->packet_in[msg_h_payload_1st_byte] ,
  4007d0:	7c62      	ldrb	r2, [r4, #17]
  4007d2:	f104 0012 	add.w	r0, r4, #18
  4007d6:	4b0c      	ldr	r3, [pc, #48]	; (400808 <API_SDCARD_dir_open_req+0x54>)
  4007d8:	4798      	blx	r3
	              ((uint8_t *)&sdcard_api_string) + 3,
	              msg_ptr->packet_in[msg_h_payload_len] );
	
	// open directory
	res = f_opendir ( (DIR *)&directory , (const TCHAR *)&sdcard_api_string );
  4007da:	4629      	mov	r1, r5
  4007dc:	480b      	ldr	r0, [pc, #44]	; (40080c <API_SDCARD_dir_open_req+0x58>)
  4007de:	4b0c      	ldr	r3, [pc, #48]	; (400810 <API_SDCARD_dir_open_req+0x5c>)
  4007e0:	4798      	blx	r3
  4007e2:	4b0c      	ldr	r3, [pc, #48]	; (400814 <API_SDCARD_dir_open_req+0x60>)
  4007e4:	7018      	strb	r0, [r3, #0]
	
	// Send response
	comm_send_msg( msg_ptr->uart_ptr ,
  4007e6:	7c22      	ldrb	r2, [r4, #16]
  4007e8:	3201      	adds	r2, #1
  4007ea:	7ba1      	ldrb	r1, [r4, #14]
  4007ec:	6820      	ldr	r0, [r4, #0]
  4007ee:	9300      	str	r3, [sp, #0]
  4007f0:	2301      	movs	r3, #1
  4007f2:	b2d2      	uxtb	r2, r2
  4007f4:	4c08      	ldr	r4, [pc, #32]	; (400818 <API_SDCARD_dir_open_req+0x64>)
  4007f6:	47a0      	blx	r4
		           msg_ptr->packet_in[msg_h_src_id] ,
	               msg_ptr->packet_in[msg_h_msg_id]+1 ,
	               sizeof(FRESULT),
	               (uint8_t *)&res);

}
  4007f8:	b003      	add	sp, #12
  4007fa:	bd30      	pop	{r4, r5, pc}
  4007fc:	20000f70 	.word	0x20000f70
  400800:	00409669 	.word	0x00409669
  400804:	0040d4e8 	.word	0x0040d4e8
  400808:	00403129 	.word	0x00403129
  40080c:	20000f04 	.word	0x20000f04
  400810:	004073b9 	.word	0x004073b9
  400814:	20000f6c 	.word	0x20000f6c
  400818:	00402ff1 	.word	0x00402ff1

0040081c <API_SDCARD_item_next_req>:

	uint8_t payload_len;
	uint8_t * payload_ptr;
		
	// Accept command only if payload length is equal to 0
	if (msg_ptr->packet_in[msg_h_payload_len] == 0) {
  40081c:	7c43      	ldrb	r3, [r0, #17]
  40081e:	b103      	cbz	r3, 400822 <API_SDCARD_item_next_req+0x6>
  400820:	4770      	bx	lr
{
  400822:	b5f0      	push	{r4, r5, r6, r7, lr}
  400824:	b083      	sub	sp, #12
  400826:	4604      	mov	r4, r0
		
		// clear previous file info
		memset( (void *)&file_info , 0 , sizeof(FILINFO) );
  400828:	4d13      	ldr	r5, [pc, #76]	; (400878 <API_SDCARD_item_next_req+0x5c>)
  40082a:	2220      	movs	r2, #32
  40082c:	2100      	movs	r1, #0
  40082e:	4628      	mov	r0, r5
  400830:	4b12      	ldr	r3, [pc, #72]	; (40087c <API_SDCARD_item_next_req+0x60>)
  400832:	4798      	blx	r3
	
		// read item from directory
		res = f_readdir ( (DIR *)&directory , &file_info );
  400834:	4629      	mov	r1, r5
  400836:	4812      	ldr	r0, [pc, #72]	; (400880 <API_SDCARD_item_next_req+0x64>)
  400838:	4b12      	ldr	r3, [pc, #72]	; (400884 <API_SDCARD_item_next_req+0x68>)
  40083a:	4798      	blx	r3
  40083c:	4b12      	ldr	r3, [pc, #72]	; (400888 <API_SDCARD_item_next_req+0x6c>)
  40083e:	7018      	strb	r0, [r3, #0]

		// Define response depending on f_opendir.
		if (res == FR_OK) {
  400840:	b158      	cbz	r0, 40085a <API_SDCARD_item_next_req+0x3e>
			payload_len = sizeof(FILINFO);
			payload_ptr = (uint8_t *)&file_info;
		}
		else {
			payload_len = sizeof(FRESULT);
			payload_ptr = (uint8_t *)&res;
  400842:	4d11      	ldr	r5, [pc, #68]	; (400888 <API_SDCARD_item_next_req+0x6c>)
			payload_len = sizeof(FRESULT);
  400844:	2301      	movs	r3, #1
		}

		// Send response
		comm_send_msg( msg_ptr->uart_ptr ,
  400846:	7c22      	ldrb	r2, [r4, #16]
  400848:	3201      	adds	r2, #1
  40084a:	7ba1      	ldrb	r1, [r4, #14]
  40084c:	6820      	ldr	r0, [r4, #0]
  40084e:	9500      	str	r5, [sp, #0]
  400850:	b2d2      	uxtb	r2, r2
  400852:	4c0e      	ldr	r4, [pc, #56]	; (40088c <API_SDCARD_item_next_req+0x70>)
  400854:	47a0      	blx	r4
					   payload_len ,
					   payload_ptr);

	}

}
  400856:	b003      	add	sp, #12
  400858:	bdf0      	pop	{r4, r5, r6, r7, pc}
			memset( (void *)&sdcard_api_string , 0 , sizeof(sdcard_api_string) );
  40085a:	4e0d      	ldr	r6, [pc, #52]	; (400890 <API_SDCARD_item_next_req+0x74>)
  40085c:	2780      	movs	r7, #128	; 0x80
  40085e:	463a      	mov	r2, r7
  400860:	2100      	movs	r1, #0
  400862:	4630      	mov	r0, r6
  400864:	4b05      	ldr	r3, [pc, #20]	; (40087c <API_SDCARD_item_next_req+0x60>)
  400866:	4798      	blx	r3
			sdcard_file_get_name( &directory, &file_info , &sdcard_api_string[0] , STRING_MAX);
  400868:	463b      	mov	r3, r7
  40086a:	4632      	mov	r2, r6
  40086c:	4629      	mov	r1, r5
  40086e:	4804      	ldr	r0, [pc, #16]	; (400880 <API_SDCARD_item_next_req+0x64>)
  400870:	4e08      	ldr	r6, [pc, #32]	; (400894 <API_SDCARD_item_next_req+0x78>)
  400872:	47b0      	blx	r6
			payload_len = sizeof(FILINFO);
  400874:	2320      	movs	r3, #32
  400876:	e7e6      	b.n	400846 <API_SDCARD_item_next_req+0x2a>
  400878:	20000f4c 	.word	0x20000f4c
  40087c:	00409669 	.word	0x00409669
  400880:	20000f04 	.word	0x20000f04
  400884:	00407439 	.word	0x00407439
  400888:	20000f6c 	.word	0x20000f6c
  40088c:	00402ff1 	.word	0x00402ff1
  400890:	20000f70 	.word	0x20000f70
  400894:	004021c5 	.word	0x004021c5

00400898 <API_SDCARD_item_name_req>:
{

	uint8_t name_length = 0;
	
	// Accept command only if payload length is equal to 0
	if (msg_ptr->packet_in[msg_h_payload_len] == 0) {
  400898:	7c43      	ldrb	r3, [r0, #17]
  40089a:	b9bb      	cbnz	r3, 4008cc <API_SDCARD_item_name_req+0x34>
{
  40089c:	b510      	push	{r4, lr}
  40089e:	b082      	sub	sp, #8
			
		// calculate LFN length (find null caracter)
		for (;;) {
			if (sdcard_api_string[name_length] != 0)
  4008a0:	4a0b      	ldr	r2, [pc, #44]	; (4008d0 <API_SDCARD_item_name_req+0x38>)
  4008a2:	7812      	ldrb	r2, [r2, #0]
  4008a4:	b182      	cbz	r2, 4008c8 <API_SDCARD_item_name_req+0x30>
  4008a6:	490a      	ldr	r1, [pc, #40]	; (4008d0 <API_SDCARD_item_name_req+0x38>)
				name_length++;
  4008a8:	3301      	adds	r3, #1
  4008aa:	b2db      	uxtb	r3, r3
			if (sdcard_api_string[name_length] != 0)
  4008ac:	5cca      	ldrb	r2, [r1, r3]
  4008ae:	2a00      	cmp	r2, #0
  4008b0:	d1fa      	bne.n	4008a8 <API_SDCARD_item_name_req+0x10>
			else
				break;
		}
			
		// Send response
		comm_send_msg( msg_ptr->uart_ptr ,
  4008b2:	7c02      	ldrb	r2, [r0, #16]
  4008b4:	3201      	adds	r2, #1
  4008b6:	7b81      	ldrb	r1, [r0, #14]
  4008b8:	6800      	ldr	r0, [r0, #0]
  4008ba:	4c05      	ldr	r4, [pc, #20]	; (4008d0 <API_SDCARD_item_name_req+0x38>)
  4008bc:	9400      	str	r4, [sp, #0]
  4008be:	b2d2      	uxtb	r2, r2
  4008c0:	4c04      	ldr	r4, [pc, #16]	; (4008d4 <API_SDCARD_item_name_req+0x3c>)
  4008c2:	47a0      	blx	r4
		               name_length,
		               (uint8_t *)&sdcard_api_string[0]);

	}

}
  4008c4:	b002      	add	sp, #8
  4008c6:	bd10      	pop	{r4, pc}
			if (sdcard_api_string[name_length] != 0)
  4008c8:	4613      	mov	r3, r2
  4008ca:	e7f2      	b.n	4008b2 <API_SDCARD_item_name_req+0x1a>
  4008cc:	4770      	bx	lr
  4008ce:	bf00      	nop
  4008d0:	20000f70 	.word	0x20000f70
  4008d4:	00402ff1 	.word	0x00402ff1

004008d8 <API_SDCARD_file_size_req>:
/// @param[in] msp_ptr Pointer to incoming message
///
void API_SDCARD_file_size_req( msg_t * msg_ptr ) {

	// Accept command only if payload length is equal to 0
	if (msg_ptr->packet_in[msg_h_payload_len] == 0) {
  4008d8:	7c43      	ldrb	r3, [r0, #17]
  4008da:	b103      	cbz	r3, 4008de <API_SDCARD_file_size_req+0x6>
  4008dc:	4770      	bx	lr
void API_SDCARD_file_size_req( msg_t * msg_ptr ) {
  4008de:	b510      	push	{r4, lr}
  4008e0:	b082      	sub	sp, #8
	
		// Send response
		comm_send_msg( msg_ptr->uart_ptr ,
  4008e2:	7c02      	ldrb	r2, [r0, #16]
  4008e4:	3201      	adds	r2, #1
  4008e6:	7b81      	ldrb	r1, [r0, #14]
  4008e8:	6800      	ldr	r0, [r0, #0]
  4008ea:	4b04      	ldr	r3, [pc, #16]	; (4008fc <API_SDCARD_file_size_req+0x24>)
  4008ec:	9300      	str	r3, [sp, #0]
  4008ee:	2304      	movs	r3, #4
  4008f0:	b2d2      	uxtb	r2, r2
  4008f2:	4c03      	ldr	r4, [pc, #12]	; (400900 <API_SDCARD_file_size_req+0x28>)
  4008f4:	47a0      	blx	r4
					   msg_ptr->packet_in[msg_h_msg_id]+1 ,
					   sizeof(DWORD),
					   (uint8_t *)&sdcard_api_file_object.fsize);
	
	}
}
  4008f6:	b002      	add	sp, #8
  4008f8:	bd10      	pop	{r4, pc}
  4008fa:	bf00      	nop
  4008fc:	20000f34 	.word	0x20000f34
  400900:	00402ff1 	.word	0x00402ff1

00400904 <API_SDCARD_file_open_req>:

/// @brief Response to open file request.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_SDCARD_file_open_req( msg_t * msg_ptr ) {
  400904:	b530      	push	{r4, r5, lr}
  400906:	b083      	sub	sp, #12
  400908:	4604      	mov	r4, r0
	
	// predefine device root directory
	memset( (void *)&sdcard_api_string , 0 , sizeof(sdcard_api_string) );
  40090a:	4d11      	ldr	r5, [pc, #68]	; (400950 <API_SDCARD_file_open_req+0x4c>)
  40090c:	2280      	movs	r2, #128	; 0x80
  40090e:	2100      	movs	r1, #0
  400910:	4628      	mov	r0, r5
  400912:	4b10      	ldr	r3, [pc, #64]	; (400954 <API_SDCARD_file_open_req+0x50>)
  400914:	4798      	blx	r3
	sprintf( (char *)&sdcard_api_string ,"%s" , "0:/");
  400916:	4b10      	ldr	r3, [pc, #64]	; (400958 <API_SDCARD_file_open_req+0x54>)
  400918:	6818      	ldr	r0, [r3, #0]
  40091a:	4629      	mov	r1, r5
  40091c:	f841 0b03 	str.w	r0, [r1], #3
		
	// copy name of directory
	copy_content( (uint8_t *)&msg_ptr->packet_in[msg_h_payload_1st_byte] ,
  400920:	7c62      	ldrb	r2, [r4, #17]
  400922:	f104 0012 	add.w	r0, r4, #18
  400926:	4b0d      	ldr	r3, [pc, #52]	; (40095c <API_SDCARD_file_open_req+0x58>)
  400928:	4798      	blx	r3
				  ((uint8_t *)&sdcard_api_string) + 3,
				  msg_ptr->packet_in[msg_h_payload_len] );
		
	// open directory
	res = f_open( &sdcard_api_file_object , (char const *)&sdcard_api_string , FA_READ );
  40092a:	2201      	movs	r2, #1
  40092c:	4629      	mov	r1, r5
  40092e:	480c      	ldr	r0, [pc, #48]	; (400960 <API_SDCARD_file_open_req+0x5c>)
  400930:	4b0c      	ldr	r3, [pc, #48]	; (400964 <API_SDCARD_file_open_req+0x60>)
  400932:	4798      	blx	r3
  400934:	4b0c      	ldr	r3, [pc, #48]	; (400968 <API_SDCARD_file_open_req+0x64>)
  400936:	7018      	strb	r0, [r3, #0]
		
	// Send response
	comm_send_msg( msg_ptr->uart_ptr ,
  400938:	7c22      	ldrb	r2, [r4, #16]
  40093a:	3201      	adds	r2, #1
  40093c:	7ba1      	ldrb	r1, [r4, #14]
  40093e:	6820      	ldr	r0, [r4, #0]
  400940:	9300      	str	r3, [sp, #0]
  400942:	2301      	movs	r3, #1
  400944:	b2d2      	uxtb	r2, r2
  400946:	4c09      	ldr	r4, [pc, #36]	; (40096c <API_SDCARD_file_open_req+0x68>)
  400948:	47a0      	blx	r4
	               msg_ptr->packet_in[msg_h_src_id] ,
	               msg_ptr->packet_in[msg_h_msg_id]+1 ,
	               sizeof(FRESULT),
	               (uint8_t *)&res);
	
}
  40094a:	b003      	add	sp, #12
  40094c:	bd30      	pop	{r4, r5, pc}
  40094e:	bf00      	nop
  400950:	20000f70 	.word	0x20000f70
  400954:	00409669 	.word	0x00409669
  400958:	0040d4e8 	.word	0x0040d4e8
  40095c:	00403129 	.word	0x00403129
  400960:	20000f28 	.word	0x20000f28
  400964:	00406c79 	.word	0x00406c79
  400968:	20000f6c 	.word	0x20000f6c
  40096c:	00402ff1 	.word	0x00402ff1

00400970 <API_SDCARD_file_read_req>:
	
	UINT br;
	UINT offset;
	
	// Accept command only if payload length is equal to SDCARD_FILE_READ_LENGTH
	if (msg_ptr->packet_in[msg_h_payload_len] == SDCARD_FILE_READ_LENGTH) {
  400970:	7c43      	ldrb	r3, [r0, #17]
  400972:	2b04      	cmp	r3, #4
  400974:	d000      	beq.n	400978 <API_SDCARD_file_read_req+0x8>
  400976:	4770      	bx	lr
void API_SDCARD_file_read_req( msg_t * msg_ptr ) {
  400978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40097c:	b084      	sub	sp, #16
  40097e:	4604      	mov	r4, r0
	
		// Read offset
		copy_content( (uint8_t *)&msg_ptr->packet_in[msg_h_payload_1st_byte] ,
  400980:	2204      	movs	r2, #4
  400982:	a902      	add	r1, sp, #8
  400984:	3012      	adds	r0, #18
  400986:	4e14      	ldr	r6, [pc, #80]	; (4009d8 <API_SDCARD_file_read_req+0x68>)
  400988:	47b0      	blx	r6
		              (uint8_t *)&offset,
		               SDCARD_FILE_READ_LENGTH );
		
		// Moves the file read/write pointer
		res = f_lseek ( &sdcard_api_file_object , offset*SDCARD_FILE_READ_BYTE_MAX );
  40098a:	9902      	ldr	r1, [sp, #8]
  40098c:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
  400990:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4009ec <API_SDCARD_file_read_req+0x7c>
  400994:	0089      	lsls	r1, r1, #2
  400996:	4640      	mov	r0, r8
  400998:	4b10      	ldr	r3, [pc, #64]	; (4009dc <API_SDCARD_file_read_req+0x6c>)
  40099a:	4798      	blx	r3
  40099c:	4f10      	ldr	r7, [pc, #64]	; (4009e0 <API_SDCARD_file_read_req+0x70>)
  40099e:	7038      	strb	r0, [r7, #0]

		// Reads data from a file. Left SDCARD_FILE_READ_LENGTH bytes to store number of read bytes.
		res = f_read ( &sdcard_api_file_object , (uint8_t *)&sdcard_api_string[SDCARD_FILE_READ_LENGTH] , SDCARD_FILE_READ_BYTE_MAX , &br );
  4009a0:	4d10      	ldr	r5, [pc, #64]	; (4009e4 <API_SDCARD_file_read_req+0x74>)
  4009a2:	ab03      	add	r3, sp, #12
  4009a4:	227c      	movs	r2, #124	; 0x7c
  4009a6:	4629      	mov	r1, r5
  4009a8:	4640      	mov	r0, r8
  4009aa:	f8df 8044 	ldr.w	r8, [pc, #68]	; 4009f0 <API_SDCARD_file_read_req+0x80>
  4009ae:	47c0      	blx	r8
  4009b0:	7038      	strb	r0, [r7, #0]
		
		// save read bytes
		copy_content( (uint8_t *)&br ,
  4009b2:	3d04      	subs	r5, #4
  4009b4:	2204      	movs	r2, #4
  4009b6:	4629      	mov	r1, r5
  4009b8:	a803      	add	r0, sp, #12
  4009ba:	47b0      	blx	r6
		              (uint8_t *)&sdcard_api_string,
		              SDCARD_FILE_READ_LENGTH );

		// Send response
		comm_send_msg( msg_ptr->uart_ptr ,
  4009bc:	9b03      	ldr	r3, [sp, #12]
  4009be:	3304      	adds	r3, #4
  4009c0:	7c22      	ldrb	r2, [r4, #16]
  4009c2:	3201      	adds	r2, #1
  4009c4:	7ba1      	ldrb	r1, [r4, #14]
  4009c6:	6820      	ldr	r0, [r4, #0]
  4009c8:	9500      	str	r5, [sp, #0]
  4009ca:	b2db      	uxtb	r3, r3
  4009cc:	b2d2      	uxtb	r2, r2
  4009ce:	4c06      	ldr	r4, [pc, #24]	; (4009e8 <API_SDCARD_file_read_req+0x78>)
  4009d0:	47a0      	blx	r4
		               (uint8_t *)&sdcard_api_string);
		

	}
	
}
  4009d2:	b004      	add	sp, #16
  4009d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4009d8:	00403129 	.word	0x00403129
  4009dc:	0040725d 	.word	0x0040725d
  4009e0:	20000f6c 	.word	0x20000f6c
  4009e4:	20000f74 	.word	0x20000f74
  4009e8:	00402ff1 	.word	0x00402ff1
  4009ec:	20000f28 	.word	0x20000f28
  4009f0:	00406e11 	.word	0x00406e11

004009f4 <API_SDCARD_file_close_req>:

/// @brief Response to close file request.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_SDCARD_file_close_req( msg_t * msg_ptr ) {
  4009f4:	b510      	push	{r4, lr}
  4009f6:	b084      	sub	sp, #16
  4009f8:	4604      	mov	r4, r0
	
	uint8_t response;
	
	// Accept command only if payload length is equal to 0
	if (msg_ptr->packet_in[msg_h_payload_len] == 0) {
  4009fa:	7c43      	ldrb	r3, [r0, #17]
  4009fc:	b17b      	cbz	r3, 400a1e <API_SDCARD_file_close_req+0x2a>
			
	}
	else {
		
		// response
		response = 0xFF;
  4009fe:	23ff      	movs	r3, #255	; 0xff
  400a00:	f88d 300f 	strb.w	r3, [sp, #15]

	}

	// Send response
	comm_send_msg( msg_ptr->uart_ptr ,
  400a04:	7c22      	ldrb	r2, [r4, #16]
  400a06:	3201      	adds	r2, #1
  400a08:	7ba1      	ldrb	r1, [r4, #14]
  400a0a:	6820      	ldr	r0, [r4, #0]
  400a0c:	f10d 030f 	add.w	r3, sp, #15
  400a10:	9300      	str	r3, [sp, #0]
  400a12:	2301      	movs	r3, #1
  400a14:	b2d2      	uxtb	r2, r2
  400a16:	4c06      	ldr	r4, [pc, #24]	; (400a30 <API_SDCARD_file_close_req+0x3c>)
  400a18:	47a0      	blx	r4
	               msg_ptr->packet_in[msg_h_src_id] ,
	               msg_ptr->packet_in[msg_h_msg_id]+1 ,
	               1 ,
	               &response);
	
}
  400a1a:	b004      	add	sp, #16
  400a1c:	bd10      	pop	{r4, pc}
		res = f_close( &sdcard_api_file_object );
  400a1e:	4805      	ldr	r0, [pc, #20]	; (400a34 <API_SDCARD_file_close_req+0x40>)
  400a20:	4b05      	ldr	r3, [pc, #20]	; (400a38 <API_SDCARD_file_close_req+0x44>)
  400a22:	4798      	blx	r3
  400a24:	4b05      	ldr	r3, [pc, #20]	; (400a3c <API_SDCARD_file_close_req+0x48>)
  400a26:	7018      	strb	r0, [r3, #0]
		response = res;
  400a28:	f88d 000f 	strb.w	r0, [sp, #15]
  400a2c:	e7ea      	b.n	400a04 <API_SDCARD_file_close_req+0x10>
  400a2e:	bf00      	nop
  400a30:	00402ff1 	.word	0x00402ff1
  400a34:	20000f28 	.word	0x20000f28
  400a38:	00407245 	.word	0x00407245
  400a3c:	20000f6c 	.word	0x20000f6c

00400a40 <API_SDCARD_file_and_dir_remove_req>:
/// @param[in] msp_ptr Pointer to incoming message
///
/// @note Removing a directory could take a long time since all files and sub-directory
///       must be removed first. As, result, this function update the file/directory to
///       be removed in background (one file each time that it is executed).
void API_SDCARD_file_and_dir_remove_req( msg_t * msg_ptr ) {
  400a40:	b510      	push	{r4, lr}
  400a42:	b084      	sub	sp, #16
  400a44:	4604      	mov	r4, r0
	
	uint8_t response;
				  
	// update folder to be removed
	response = sdcard_update_file_and_dir_to_remove( (uint8_t *)&msg_ptr->packet_in[msg_h_payload_1st_byte] );
  400a46:	3012      	adds	r0, #18
  400a48:	4b07      	ldr	r3, [pc, #28]	; (400a68 <API_SDCARD_file_and_dir_remove_req+0x28>)
  400a4a:	4798      	blx	r3
  400a4c:	ab04      	add	r3, sp, #16
  400a4e:	f803 0d01 	strb.w	r0, [r3, #-1]!
			
	// Send response
	comm_send_msg( msg_ptr->uart_ptr ,
  400a52:	7c22      	ldrb	r2, [r4, #16]
  400a54:	3201      	adds	r2, #1
  400a56:	7ba1      	ldrb	r1, [r4, #14]
  400a58:	6820      	ldr	r0, [r4, #0]
  400a5a:	9300      	str	r3, [sp, #0]
  400a5c:	2301      	movs	r3, #1
  400a5e:	b2d2      	uxtb	r2, r2
  400a60:	4c02      	ldr	r4, [pc, #8]	; (400a6c <API_SDCARD_file_and_dir_remove_req+0x2c>)
  400a62:	47a0      	blx	r4
	               msg_ptr->packet_in[msg_h_src_id] ,
				   msg_ptr->packet_in[msg_h_msg_id]+1 ,
	               1 ,
	               &response);
	
}
  400a64:	b004      	add	sp, #16
  400a66:	bd10      	pop	{r4, pc}
  400a68:	00402159 	.word	0x00402159
  400a6c:	00402ff1 	.word	0x00402ff1

00400a70 <API_SDCARD_get_mbytes_req>:

/// @brief Response to size request.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_SDCARD_get_mbytes_req( msg_t * msg_ptr ) {
  400a70:	b510      	push	{r4, lr}
  400a72:	b084      	sub	sp, #16
  400a74:	4604      	mov	r4, r0

	uint32_t info[2];
	
	info[0] = sdcard_get_total_mbytes_req();
  400a76:	4b09      	ldr	r3, [pc, #36]	; (400a9c <API_SDCARD_get_mbytes_req+0x2c>)
  400a78:	4798      	blx	r3
  400a7a:	9002      	str	r0, [sp, #8]
	info[1] = sdcard_get_free_mbytes_req();
  400a7c:	4b08      	ldr	r3, [pc, #32]	; (400aa0 <API_SDCARD_get_mbytes_req+0x30>)
  400a7e:	4798      	blx	r3
  400a80:	9003      	str	r0, [sp, #12]

	// Send response
	comm_send_msg( msg_ptr->uart_ptr ,
  400a82:	7c22      	ldrb	r2, [r4, #16]
  400a84:	3201      	adds	r2, #1
  400a86:	7ba1      	ldrb	r1, [r4, #14]
  400a88:	6820      	ldr	r0, [r4, #0]
  400a8a:	ab02      	add	r3, sp, #8
  400a8c:	9300      	str	r3, [sp, #0]
  400a8e:	2308      	movs	r3, #8
  400a90:	b2d2      	uxtb	r2, r2
  400a92:	4c04      	ldr	r4, [pc, #16]	; (400aa4 <API_SDCARD_get_mbytes_req+0x34>)
  400a94:	47a0      	blx	r4
	   			   msg_ptr->packet_in[msg_h_msg_id]+1 ,
				   sizeof(info),
				   (uint8_t *)&info);
	
	
}
  400a96:	b004      	add	sp, #16
  400a98:	bd10      	pop	{r4, pc}
  400a9a:	bf00      	nop
  400a9c:	004020e9 	.word	0x004020e9
  400aa0:	00402115 	.word	0x00402115
  400aa4:	00402ff1 	.word	0x00402ff1

00400aa8 <API_UNIT_CONFIG_ARM_update_req>:
/// @brief Set unit configuration with custom data.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_UNIT_CONFIG_ARM_update_req( msg_t * msg_ptr )
{
  400aa8:	b530      	push	{r4, r5, lr}
  400aaa:	b085      	sub	sp, #20
  400aac:	4604      	mov	r4, r0

	uint8_t response;
	static unit_config_t temp;

    // Accept command only if payload length is equal to unit config length
    if (msg_ptr->packet_in[msg_h_payload_len] == sizeof(unit_config_t) )
  400aae:	7c43      	ldrb	r3, [r0, #17]
  400ab0:	2b44      	cmp	r3, #68	; 0x44
  400ab2:	d00f      	beq.n	400ad4 <API_UNIT_CONFIG_ARM_update_req+0x2c>
		response = 0x00;

    } else {

    	// response
	    response = 0x01;
  400ab4:	2301      	movs	r3, #1
  400ab6:	f88d 300f 	strb.w	r3, [sp, #15]

	}

	comm_send_msg( msg_ptr->uart_ptr ,
  400aba:	7c22      	ldrb	r2, [r4, #16]
  400abc:	3201      	adds	r2, #1
  400abe:	7ba1      	ldrb	r1, [r4, #14]
  400ac0:	6820      	ldr	r0, [r4, #0]
  400ac2:	f10d 030f 	add.w	r3, sp, #15
  400ac6:	9300      	str	r3, [sp, #0]
  400ac8:	2301      	movs	r3, #1
  400aca:	b2d2      	uxtb	r2, r2
  400acc:	4c0f      	ldr	r4, [pc, #60]	; (400b0c <API_UNIT_CONFIG_ARM_update_req+0x64>)
  400ace:	47a0      	blx	r4
                   msg_ptr->packet_in[msg_h_src_id] ,
	               msg_ptr->packet_in[msg_h_msg_id]+1 ,
	               1 ,
	               &response);

}
  400ad0:	b005      	add	sp, #20
  400ad2:	bd30      	pop	{r4, r5, pc}
    	copy_content( (uint8_t *)&msg_ptr->packet_in[msg_h_payload_1st_byte] ,
  400ad4:	4d0e      	ldr	r5, [pc, #56]	; (400b10 <API_UNIT_CONFIG_ARM_update_req+0x68>)
  400ad6:	2244      	movs	r2, #68	; 0x44
  400ad8:	4629      	mov	r1, r5
  400ada:	3012      	adds	r0, #18
  400adc:	4b0d      	ldr	r3, [pc, #52]	; (400b14 <API_UNIT_CONFIG_ARM_update_req+0x6c>)
  400ade:	4798      	blx	r3
    	unit_config_set_custom(&temp);
  400ae0:	4628      	mov	r0, r5
  400ae2:	4b0d      	ldr	r3, [pc, #52]	; (400b18 <API_UNIT_CONFIG_ARM_update_req+0x70>)
  400ae4:	4798      	blx	r3
		comm_flags |= SETTINGS_COMM_FLAG_UNIT_CONFIG_REQUEST_MASK;
  400ae6:	4a0d      	ldr	r2, [pc, #52]	; (400b1c <API_UNIT_CONFIG_ARM_update_req+0x74>)
  400ae8:	8813      	ldrh	r3, [r2, #0]
  400aea:	b29b      	uxth	r3, r3
  400aec:	f043 0308 	orr.w	r3, r3, #8
  400af0:	8013      	strh	r3, [r2, #0]
		if (sdcard_flags_status & SDCARD_FLAGS_STATUS_CARD_READY)
  400af2:	4b0b      	ldr	r3, [pc, #44]	; (400b20 <API_UNIT_CONFIG_ARM_update_req+0x78>)
  400af4:	781b      	ldrb	r3, [r3, #0]
  400af6:	f013 0f20 	tst.w	r3, #32
  400afa:	d103      	bne.n	400b04 <API_UNIT_CONFIG_ARM_update_req+0x5c>
		response = 0x00;
  400afc:	2300      	movs	r3, #0
  400afe:	f88d 300f 	strb.w	r3, [sp, #15]
  400b02:	e7da      	b.n	400aba <API_UNIT_CONFIG_ARM_update_req+0x12>
			sdcard_save_unit_config();
  400b04:	4b07      	ldr	r3, [pc, #28]	; (400b24 <API_UNIT_CONFIG_ARM_update_req+0x7c>)
  400b06:	4798      	blx	r3
  400b08:	e7f8      	b.n	400afc <API_UNIT_CONFIG_ARM_update_req+0x54>
  400b0a:	bf00      	nop
  400b0c:	00402ff1 	.word	0x00402ff1
  400b10:	20000a94 	.word	0x20000a94
  400b14:	00403129 	.word	0x00403129
  400b18:	004027f1 	.word	0x004027f1
  400b1c:	20001e54 	.word	0x20001e54
  400b20:	20001cc8 	.word	0x20001cc8
  400b24:	00401e01 	.word	0x00401e01

00400b28 <API_UNIT_CONFIG_ARM_send_req>:
/// @brief Get unit configuration
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_UNIT_CONFIG_ARM_send_req( msg_t * msg_ptr )
{
  400b28:	b510      	push	{r4, lr}
  400b2a:	b082      	sub	sp, #8

	comm_send_msg( msg_ptr->uart_ptr ,
  400b2c:	7c02      	ldrb	r2, [r0, #16]
  400b2e:	3201      	adds	r2, #1
  400b30:	7b81      	ldrb	r1, [r0, #14]
  400b32:	6800      	ldr	r0, [r0, #0]
  400b34:	4b03      	ldr	r3, [pc, #12]	; (400b44 <API_UNIT_CONFIG_ARM_send_req+0x1c>)
  400b36:	9300      	str	r3, [sp, #0]
  400b38:	2344      	movs	r3, #68	; 0x44
  400b3a:	b2d2      	uxtb	r2, r2
  400b3c:	4c02      	ldr	r4, [pc, #8]	; (400b48 <API_UNIT_CONFIG_ARM_send_req+0x20>)
  400b3e:	47a0      	blx	r4
                   msg_ptr->packet_in[msg_h_src_id] ,
	               msg_ptr->packet_in[msg_h_msg_id]+1 ,
	               sizeof(unit_config_t),
	               (uint8_t *)&unit_config);

}
  400b40:	b002      	add	sp, #8
  400b42:	bd10      	pop	{r4, pc}
  400b44:	20001db0 	.word	0x20001db0
  400b48:	00402ff1 	.word	0x00402ff1

00400b4c <API_UNIT_CONFIG_ARM_set_default_req>:
/// @brief Set unit configuration to default.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_UNIT_CONFIG_ARM_set_default_req( msg_t * msg_ptr )
{
  400b4c:	b510      	push	{r4, lr}
  400b4e:	b084      	sub	sp, #16
  400b50:	4604      	mov	r4, r0

	uint8_t response;

	// Accept command only if payload length is equal to 0
	if (msg_ptr->packet_in[msg_h_payload_len] == 0)
  400b52:	7c43      	ldrb	r3, [r0, #17]
  400b54:	b17b      	cbz	r3, 400b76 <API_UNIT_CONFIG_ARM_set_default_req+0x2a>
	}
	else
	{

		// response
		response = 0x01;
  400b56:	2301      	movs	r3, #1
  400b58:	f88d 300f 	strb.w	r3, [sp, #15]

	}

	comm_send_msg( msg_ptr->uart_ptr ,
  400b5c:	7c22      	ldrb	r2, [r4, #16]
  400b5e:	3201      	adds	r2, #1
  400b60:	7ba1      	ldrb	r1, [r4, #14]
  400b62:	6820      	ldr	r0, [r4, #0]
  400b64:	f10d 030f 	add.w	r3, sp, #15
  400b68:	9300      	str	r3, [sp, #0]
  400b6a:	2301      	movs	r3, #1
  400b6c:	b2d2      	uxtb	r2, r2
  400b6e:	4c0c      	ldr	r4, [pc, #48]	; (400ba0 <API_UNIT_CONFIG_ARM_set_default_req+0x54>)
  400b70:	47a0      	blx	r4
	               msg_ptr->packet_in[msg_h_src_id] ,
	               msg_ptr->packet_in[msg_h_msg_id]+1 ,
                   1 ,
                   &response);

}
  400b72:	b004      	add	sp, #16
  400b74:	bd10      	pop	{r4, pc}
		unit_config_set_default();
  400b76:	4b0b      	ldr	r3, [pc, #44]	; (400ba4 <API_UNIT_CONFIG_ARM_set_default_req+0x58>)
  400b78:	4798      	blx	r3
		comm_flags |= SETTINGS_COMM_FLAG_UNIT_CONFIG_REQUEST_MASK;
  400b7a:	4a0b      	ldr	r2, [pc, #44]	; (400ba8 <API_UNIT_CONFIG_ARM_set_default_req+0x5c>)
  400b7c:	8813      	ldrh	r3, [r2, #0]
  400b7e:	b29b      	uxth	r3, r3
  400b80:	f043 0308 	orr.w	r3, r3, #8
  400b84:	8013      	strh	r3, [r2, #0]
		if (sdcard_flags_status & SDCARD_FLAGS_STATUS_CARD_READY)
  400b86:	4b09      	ldr	r3, [pc, #36]	; (400bac <API_UNIT_CONFIG_ARM_set_default_req+0x60>)
  400b88:	781b      	ldrb	r3, [r3, #0]
  400b8a:	f013 0f20 	tst.w	r3, #32
  400b8e:	d103      	bne.n	400b98 <API_UNIT_CONFIG_ARM_set_default_req+0x4c>
		response = 0x00;
  400b90:	2300      	movs	r3, #0
  400b92:	f88d 300f 	strb.w	r3, [sp, #15]
  400b96:	e7e1      	b.n	400b5c <API_UNIT_CONFIG_ARM_set_default_req+0x10>
			sdcard_save_unit_config();
  400b98:	4b05      	ldr	r3, [pc, #20]	; (400bb0 <API_UNIT_CONFIG_ARM_set_default_req+0x64>)
  400b9a:	4798      	blx	r3
  400b9c:	e7f8      	b.n	400b90 <API_UNIT_CONFIG_ARM_set_default_req+0x44>
  400b9e:	bf00      	nop
  400ba0:	00402ff1 	.word	0x00402ff1
  400ba4:	0040277d 	.word	0x0040277d
  400ba8:	20001e54 	.word	0x20001e54
  400bac:	20001cc8 	.word	0x20001cc8
  400bb0:	00401e01 	.word	0x00401e01

00400bb4 <API_UNIT_CALIBRATION_ARM_update_req>:
/// @brief Set unit configuration with custom data.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_UNIT_CALIBRATION_ARM_update_req( msg_t * msg_ptr )
{
  400bb4:	b530      	push	{r4, r5, lr}
  400bb6:	b085      	sub	sp, #20
  400bb8:	4604      	mov	r4, r0

	uint8_t response;
	static unit_calibration_t temp;

	// Accept command only if payload length is equal to unit config length
	if (msg_ptr->packet_in[msg_h_payload_len] == sizeof(unit_calibration_t) )
  400bba:	7c43      	ldrb	r3, [r0, #17]
  400bbc:	2b60      	cmp	r3, #96	; 0x60
  400bbe:	d00f      	beq.n	400be0 <API_UNIT_CALIBRATION_ARM_update_req+0x2c>
		response = 0x00;

	} else {

		// response
		response = 0x01;
  400bc0:	2301      	movs	r3, #1
  400bc2:	f88d 300f 	strb.w	r3, [sp, #15]

	}

	comm_send_msg( msg_ptr->uart_ptr ,
  400bc6:	7c22      	ldrb	r2, [r4, #16]
  400bc8:	3201      	adds	r2, #1
  400bca:	7ba1      	ldrb	r1, [r4, #14]
  400bcc:	6820      	ldr	r0, [r4, #0]
  400bce:	f10d 030f 	add.w	r3, sp, #15
  400bd2:	9300      	str	r3, [sp, #0]
  400bd4:	2301      	movs	r3, #1
  400bd6:	b2d2      	uxtb	r2, r2
  400bd8:	4c0f      	ldr	r4, [pc, #60]	; (400c18 <API_UNIT_CALIBRATION_ARM_update_req+0x64>)
  400bda:	47a0      	blx	r4
                   msg_ptr->packet_in[msg_h_src_id] ,
	               msg_ptr->packet_in[msg_h_msg_id]+1 ,
	               1 ,
	               &response);

}
  400bdc:	b005      	add	sp, #20
  400bde:	bd30      	pop	{r4, r5, pc}
		copy_content( (uint8_t *)&msg_ptr->packet_in[msg_h_payload_1st_byte] ,
  400be0:	4d0e      	ldr	r5, [pc, #56]	; (400c1c <API_UNIT_CALIBRATION_ARM_update_req+0x68>)
  400be2:	2260      	movs	r2, #96	; 0x60
  400be4:	4629      	mov	r1, r5
  400be6:	3012      	adds	r0, #18
  400be8:	4b0d      	ldr	r3, [pc, #52]	; (400c20 <API_UNIT_CALIBRATION_ARM_update_req+0x6c>)
  400bea:	4798      	blx	r3
		unit_calibration_set_custom(&temp);
  400bec:	4628      	mov	r0, r5
  400bee:	4b0d      	ldr	r3, [pc, #52]	; (400c24 <API_UNIT_CALIBRATION_ARM_update_req+0x70>)
  400bf0:	4798      	blx	r3
		comm_flags |= SETTINGS_COMM_FLAG_UNIT_CALIBRATION_REQUEST_MASK;
  400bf2:	4a0d      	ldr	r2, [pc, #52]	; (400c28 <API_UNIT_CALIBRATION_ARM_update_req+0x74>)
  400bf4:	8813      	ldrh	r3, [r2, #0]
  400bf6:	b29b      	uxth	r3, r3
  400bf8:	f043 0310 	orr.w	r3, r3, #16
  400bfc:	8013      	strh	r3, [r2, #0]
		if (sdcard_flags_status & SDCARD_FLAGS_STATUS_CARD_READY)
  400bfe:	4b0b      	ldr	r3, [pc, #44]	; (400c2c <API_UNIT_CALIBRATION_ARM_update_req+0x78>)
  400c00:	781b      	ldrb	r3, [r3, #0]
  400c02:	f013 0f20 	tst.w	r3, #32
  400c06:	d103      	bne.n	400c10 <API_UNIT_CALIBRATION_ARM_update_req+0x5c>
		response = 0x00;
  400c08:	2300      	movs	r3, #0
  400c0a:	f88d 300f 	strb.w	r3, [sp, #15]
  400c0e:	e7da      	b.n	400bc6 <API_UNIT_CALIBRATION_ARM_update_req+0x12>
			sdcard_save_unit_calibration();
  400c10:	4b07      	ldr	r3, [pc, #28]	; (400c30 <API_UNIT_CALIBRATION_ARM_update_req+0x7c>)
  400c12:	4798      	blx	r3
  400c14:	e7f8      	b.n	400c08 <API_UNIT_CALIBRATION_ARM_update_req+0x54>
  400c16:	bf00      	nop
  400c18:	00402ff1 	.word	0x00402ff1
  400c1c:	20000ad8 	.word	0x20000ad8
  400c20:	00403129 	.word	0x00403129
  400c24:	00402839 	.word	0x00402839
  400c28:	20001e54 	.word	0x20001e54
  400c2c:	20001cc8 	.word	0x20001cc8
  400c30:	00401ecd 	.word	0x00401ecd

00400c34 <API_UNIT_CALIBRATION_ARM_send_req>:
/// @brief Get unit configuration.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_UNIT_CALIBRATION_ARM_send_req( msg_t * msg_ptr )
{
  400c34:	b510      	push	{r4, lr}
  400c36:	b082      	sub	sp, #8

	comm_send_msg( msg_ptr->uart_ptr ,
  400c38:	7c02      	ldrb	r2, [r0, #16]
  400c3a:	3201      	adds	r2, #1
  400c3c:	7b81      	ldrb	r1, [r0, #14]
  400c3e:	6800      	ldr	r0, [r0, #0]
  400c40:	4b03      	ldr	r3, [pc, #12]	; (400c50 <API_UNIT_CALIBRATION_ARM_send_req+0x1c>)
  400c42:	9300      	str	r3, [sp, #0]
  400c44:	2360      	movs	r3, #96	; 0x60
  400c46:	b2d2      	uxtb	r2, r2
  400c48:	4c02      	ldr	r4, [pc, #8]	; (400c54 <API_UNIT_CALIBRATION_ARM_send_req+0x20>)
  400c4a:	47a0      	blx	r4
	               msg_ptr->packet_in[msg_h_src_id] ,
	               msg_ptr->packet_in[msg_h_msg_id]+1 ,
	               sizeof(unit_calibration_t),
	               (uint8_t *)&unit_calibration);

}
  400c4c:	b002      	add	sp, #8
  400c4e:	bd10      	pop	{r4, pc}
  400c50:	20001df4 	.word	0x20001df4
  400c54:	00402ff1 	.word	0x00402ff1

00400c58 <API_UNIT_CALIBRATION_ARM_set_default_req>:
/// @brief Set unit configuration to default.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_UNIT_CALIBRATION_ARM_set_default_req( msg_t * msg_ptr )
{
  400c58:	b510      	push	{r4, lr}
  400c5a:	b084      	sub	sp, #16
  400c5c:	4604      	mov	r4, r0

	uint8_t response;

	// Accept command only if payload length is equal to 0
	if (msg_ptr->packet_in[msg_h_payload_len] == 0)
  400c5e:	7c43      	ldrb	r3, [r0, #17]
  400c60:	b17b      	cbz	r3, 400c82 <API_UNIT_CALIBRATION_ARM_set_default_req+0x2a>
	}
	else
	{

		// response
		response = 0x01;
  400c62:	2301      	movs	r3, #1
  400c64:	f88d 300f 	strb.w	r3, [sp, #15]

	}

	comm_send_msg( msg_ptr->uart_ptr ,
  400c68:	7c22      	ldrb	r2, [r4, #16]
  400c6a:	3201      	adds	r2, #1
  400c6c:	7ba1      	ldrb	r1, [r4, #14]
  400c6e:	6820      	ldr	r0, [r4, #0]
  400c70:	f10d 030f 	add.w	r3, sp, #15
  400c74:	9300      	str	r3, [sp, #0]
  400c76:	2301      	movs	r3, #1
  400c78:	b2d2      	uxtb	r2, r2
  400c7a:	4c0c      	ldr	r4, [pc, #48]	; (400cac <API_UNIT_CALIBRATION_ARM_set_default_req+0x54>)
  400c7c:	47a0      	blx	r4
	               msg_ptr->packet_in[msg_h_src_id] ,
	               msg_ptr->packet_in[msg_h_msg_id]+1 ,
	               1 ,
	               &response);

}
  400c7e:	b004      	add	sp, #16
  400c80:	bd10      	pop	{r4, pc}
		unit_calibration_set_default();
  400c82:	4b0b      	ldr	r3, [pc, #44]	; (400cb0 <API_UNIT_CALIBRATION_ARM_set_default_req+0x58>)
  400c84:	4798      	blx	r3
		comm_flags |= SETTINGS_COMM_FLAG_UNIT_CALIBRATION_REQUEST_MASK;
  400c86:	4a0b      	ldr	r2, [pc, #44]	; (400cb4 <API_UNIT_CALIBRATION_ARM_set_default_req+0x5c>)
  400c88:	8813      	ldrh	r3, [r2, #0]
  400c8a:	b29b      	uxth	r3, r3
  400c8c:	f043 0310 	orr.w	r3, r3, #16
  400c90:	8013      	strh	r3, [r2, #0]
		if (sdcard_flags_status & SDCARD_FLAGS_STATUS_CARD_READY)
  400c92:	4b09      	ldr	r3, [pc, #36]	; (400cb8 <API_UNIT_CALIBRATION_ARM_set_default_req+0x60>)
  400c94:	781b      	ldrb	r3, [r3, #0]
  400c96:	f013 0f20 	tst.w	r3, #32
  400c9a:	d103      	bne.n	400ca4 <API_UNIT_CALIBRATION_ARM_set_default_req+0x4c>
		response = 0x00;
  400c9c:	2300      	movs	r3, #0
  400c9e:	f88d 300f 	strb.w	r3, [sp, #15]
  400ca2:	e7e1      	b.n	400c68 <API_UNIT_CALIBRATION_ARM_set_default_req+0x10>
			sdcard_save_unit_calibration();
  400ca4:	4b05      	ldr	r3, [pc, #20]	; (400cbc <API_UNIT_CALIBRATION_ARM_set_default_req+0x64>)
  400ca6:	4798      	blx	r3
  400ca8:	e7f8      	b.n	400c9c <API_UNIT_CALIBRATION_ARM_set_default_req+0x44>
  400caa:	bf00      	nop
  400cac:	00402ff1 	.word	0x00402ff1
  400cb0:	00402805 	.word	0x00402805
  400cb4:	20001e54 	.word	0x20001e54
  400cb8:	20001cc8 	.word	0x20001cc8
  400cbc:	00401ecd 	.word	0x00401ecd

00400cc0 <scratch_erase>:
/// @brief Function to erase the scratchpad space on flash memory
///
/// @return 0 if successful; otherwise returns an error code.
///
uint32_t scratch_erase(void)
{	
  400cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t i = 0;
	uint32_t erase_address = app_temp.start;
  400cc4:	4c14      	ldr	r4, [pc, #80]	; (400d18 <scratch_erase+0x58>)
  400cc6:	6825      	ldr	r5, [r4, #0]
	uint32_t erase_error = 0;
	
	/* Flash Unlock Temp App region */
	erase_error = flash_unlock(app_temp.start, app_temp.start + app_temp.size - 1, 0, 0);
  400cc8:	6861      	ldr	r1, [r4, #4]
  400cca:	4429      	add	r1, r5
  400ccc:	2300      	movs	r3, #0
  400cce:	461a      	mov	r2, r3
  400cd0:	3901      	subs	r1, #1
  400cd2:	4628      	mov	r0, r5
  400cd4:	4e11      	ldr	r6, [pc, #68]	; (400d1c <scratch_erase+0x5c>)
  400cd6:	47b0      	blx	r6
  400cd8:	4606      	mov	r6, r0
	
	/* Erase sectors from Temp App region */
	for (i=0; i<(app_temp.size / FLASH_SECTOR_SIZE); i++)
  400cda:	6861      	ldr	r1, [r4, #4]
  400cdc:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
  400ce0:	d30e      	bcc.n	400d00 <scratch_erase+0x40>
  400ce2:	2400      	movs	r4, #0
	{
		erase_error |= flash_erase_sector(erase_address);
  400ce4:	f8df 803c 	ldr.w	r8, [pc, #60]	; 400d24 <scratch_erase+0x64>
	for (i=0; i<(app_temp.size / FLASH_SECTOR_SIZE); i++)
  400ce8:	4f0b      	ldr	r7, [pc, #44]	; (400d18 <scratch_erase+0x58>)
		erase_error |= flash_erase_sector(erase_address);
  400cea:	4628      	mov	r0, r5
  400cec:	47c0      	blx	r8
  400cee:	4306      	orrs	r6, r0
		erase_address += FLASH_SECTOR_SIZE;
  400cf0:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
	for (i=0; i<(app_temp.size / FLASH_SECTOR_SIZE); i++)
  400cf4:	3401      	adds	r4, #1
  400cf6:	b2e4      	uxtb	r4, r4
  400cf8:	6879      	ldr	r1, [r7, #4]
  400cfa:	ebb4 4f11 	cmp.w	r4, r1, lsr #16
  400cfe:	d3f4      	bcc.n	400cea <scratch_erase+0x2a>
	}
	
	/* Flash Lock Temp App region */
	erase_error |= flash_lock(app_temp.start, app_temp.start + app_temp.size - 1, 0, 0);
  400d00:	4b05      	ldr	r3, [pc, #20]	; (400d18 <scratch_erase+0x58>)
  400d02:	6818      	ldr	r0, [r3, #0]
  400d04:	1e44      	subs	r4, r0, #1
  400d06:	2300      	movs	r3, #0
  400d08:	461a      	mov	r2, r3
  400d0a:	4421      	add	r1, r4
  400d0c:	4c04      	ldr	r4, [pc, #16]	; (400d20 <scratch_erase+0x60>)
  400d0e:	47a0      	blx	r4
	
	return erase_error;
}
  400d10:	4330      	orrs	r0, r6
  400d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400d16:	bf00      	nop
  400d18:	20001000 	.word	0x20001000
  400d1c:	00402aad 	.word	0x00402aad
  400d20:	00402a45 	.word	0x00402a45
  400d24:	00402955 	.word	0x00402955

00400d28 <scratch_checksum>:
///
/// @param[in] image_size Image length
/// @return Checksum value is returned in a 16 bits word.
///
uint16_t scratch_checksum(uint32_t image_size)
{
  400d28:	b500      	push	{lr}
  400d2a:	b083      	sub	sp, #12
	uint16_t checksum = 0;
  400d2c:	aa02      	add	r2, sp, #8
  400d2e:	2300      	movs	r3, #0
  400d30:	f822 3d02 	strh.w	r3, [r2, #-2]!
	
	calculate_checksum_ptr((uint8_t*)app_temp.start, image_size, &checksum);
  400d34:	4601      	mov	r1, r0
  400d36:	4b04      	ldr	r3, [pc, #16]	; (400d48 <scratch_checksum+0x20>)
  400d38:	6818      	ldr	r0, [r3, #0]
  400d3a:	4b04      	ldr	r3, [pc, #16]	; (400d4c <scratch_checksum+0x24>)
  400d3c:	4798      	blx	r3
		
	return checksum;
}
  400d3e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  400d42:	b003      	add	sp, #12
  400d44:	f85d fb04 	ldr.w	pc, [sp], #4
  400d48:	20001000 	.word	0x20001000
  400d4c:	00403195 	.word	0x00403195

00400d50 <verify_scratch_image>:
	if (img_size == 0)
  400d50:	b908      	cbnz	r0, 400d56 <verify_scratch_image+0x6>
		return FALSE;
  400d52:	2000      	movs	r0, #0
  400d54:	4770      	bx	lr
{
  400d56:	b510      	push	{r4, lr}
  400d58:	460c      	mov	r4, r1
	if (scratch_checksum(img_size) == img_crc)
  400d5a:	4b03      	ldr	r3, [pc, #12]	; (400d68 <verify_scratch_image+0x18>)
  400d5c:	4798      	blx	r3
		return FALSE;
  400d5e:	42a0      	cmp	r0, r4
  400d60:	bf14      	ite	ne
  400d62:	2000      	movne	r0, #0
  400d64:	2001      	moveq	r0, #1
  400d66:	bd10      	pop	{r4, pc}
  400d68:	00400d29 	.word	0x00400d29

00400d6c <save_image_block>:

uint8_t save_image_block(uint16_t blk_number, uint8_t* blk_ptr, uint16_t blk_size)
{
  400d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400d70:	460d      	mov	r5, r1
  400d72:	4616      	mov	r6, r2
	uint32_t blk_error;
	uint32_t blk_offset = (uint32_t)blk_number * new_image.block_size;
  400d74:	4b1a      	ldr	r3, [pc, #104]	; (400de0 <save_image_block+0x74>)
  400d76:	68dc      	ldr	r4, [r3, #12]
  400d78:	fb04 f400 	mul.w	r4, r4, r0
	
	/* Save block into scratch. Only write block if memory content is different */
	if (memcmp((const void *)(blk_ptr), (const void *)(app_temp.start + blk_offset), blk_size))
  400d7c:	4b19      	ldr	r3, [pc, #100]	; (400de4 <save_image_block+0x78>)
  400d7e:	6819      	ldr	r1, [r3, #0]
  400d80:	4421      	add	r1, r4
  400d82:	4628      	mov	r0, r5
  400d84:	4b18      	ldr	r3, [pc, #96]	; (400de8 <save_image_block+0x7c>)
  400d86:	4798      	blx	r3
  400d88:	b910      	cbnz	r0, 400d90 <save_image_block+0x24>
		{
			return 1;
		}
	}
		
	return 0;
  400d8a:	2000      	movs	r0, #0
}
  400d8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    This function disables FIQ interrupts by setting the F-bit in the CPSR.
    Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
{
  __ASM volatile ("cpsid f" : : : "memory");
  400d90:	b671      	cpsid	f
		blk_error = flash_unlock((uint32_t)app_temp.start + blk_offset, (uint32_t)app_temp.start + blk_offset + blk_size - 1, 0, 0);
  400d92:	4f14      	ldr	r7, [pc, #80]	; (400de4 <save_image_block+0x78>)
  400d94:	6838      	ldr	r0, [r7, #0]
  400d96:	4420      	add	r0, r4
  400d98:	f106 38ff 	add.w	r8, r6, #4294967295
  400d9c:	2300      	movs	r3, #0
  400d9e:	461a      	mov	r2, r3
  400da0:	eb00 0108 	add.w	r1, r0, r8
  400da4:	f8df 904c 	ldr.w	r9, [pc, #76]	; 400df4 <save_image_block+0x88>
  400da8:	47c8      	blx	r9
  400daa:	4681      	mov	r9, r0
		blk_error |= flash_write((uint32_t)app_temp.start + blk_offset, blk_ptr, (uint32_t)blk_size, 0);
  400dac:	6838      	ldr	r0, [r7, #0]
  400dae:	2300      	movs	r3, #0
  400db0:	4632      	mov	r2, r6
  400db2:	4629      	mov	r1, r5
  400db4:	4420      	add	r0, r4
  400db6:	4d0d      	ldr	r5, [pc, #52]	; (400dec <save_image_block+0x80>)
  400db8:	47a8      	blx	r5
  400dba:	ea49 0900 	orr.w	r9, r9, r0
		blk_error |= flash_lock((uint32_t)app_temp.start + blk_offset, (uint32_t)app_temp.start + blk_offset + blk_size - 1, 0, 0);
  400dbe:	6838      	ldr	r0, [r7, #0]
  400dc0:	4420      	add	r0, r4
  400dc2:	2300      	movs	r3, #0
  400dc4:	461a      	mov	r2, r3
  400dc6:	eb00 0108 	add.w	r1, r0, r8
  400dca:	4c09      	ldr	r4, [pc, #36]	; (400df0 <save_image_block+0x84>)
  400dcc:	47a0      	blx	r4
  __ASM volatile ("cpsie f" : : : "memory");
  400dce:	b661      	cpsie	f
		if (blk_error != 0)
  400dd0:	ea59 0300 	orrs.w	r3, r9, r0
			return 1;
  400dd4:	bf14      	ite	ne
  400dd6:	2001      	movne	r0, #1
  400dd8:	2000      	moveq	r0, #0
  400dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400dde:	bf00      	nop
  400de0:	20000ff0 	.word	0x20000ff0
  400de4:	20001000 	.word	0x20001000
  400de8:	004094d5 	.word	0x004094d5
  400dec:	00402979 	.word	0x00402979
  400df0:	00402a45 	.word	0x00402a45
  400df4:	00402aad 	.word	0x00402aad

00400df8 <boot_set_flag>:

uint32_t boot_set_flag(uint16_t fw_crc, uint32_t fw_size)
{
  400df8:	b570      	push	{r4, r5, r6, lr}
  400dfa:	b082      	sub	sp, #8
	uint32_t error_code;
	static uint16_t boot_flag = RUN_BOOT_FLAG_SET;
	uint8_t boot_flag_buffer[8];
	
	/* Save on last flash page boot flag and new image checksum and size  */
	memcpy(boot_flag_buffer, &boot_flag, sizeof(boot_flag));
  400dfc:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
  400e00:	f8ad 3000 	strh.w	r3, [sp]
	memcpy(boot_flag_buffer + 2, &fw_crc, sizeof(fw_crc));
  400e04:	f8ad 0002 	strh.w	r0, [sp, #2]
	memcpy(boot_flag_buffer + 4, &fw_size, sizeof(fw_size));
  400e08:	9101      	str	r1, [sp, #4]
  __ASM volatile ("cpsid f" : : : "memory");
  400e0a:	b671      	cpsid	f
	
	/* Disable interrupts */
	__disable_fault_irq();
	/* Flash Unlock */
	error_code = flash_unlock((uint32_t)app_temp.flag_add, (uint32_t)app_temp.start + app_temp.size - 1, 0, 0);
  400e0c:	4c0f      	ldr	r4, [pc, #60]	; (400e4c <boot_set_flag+0x54>)
  400e0e:	6821      	ldr	r1, [r4, #0]
  400e10:	6863      	ldr	r3, [r4, #4]
  400e12:	4419      	add	r1, r3
  400e14:	2300      	movs	r3, #0
  400e16:	461a      	mov	r2, r3
  400e18:	3901      	subs	r1, #1
  400e1a:	68a0      	ldr	r0, [r4, #8]
  400e1c:	4d0c      	ldr	r5, [pc, #48]	; (400e50 <boot_set_flag+0x58>)
  400e1e:	47a8      	blx	r5
  400e20:	4605      	mov	r5, r0
	/*Flash Write */
	error_code |= flash_write((uint32_t)app_temp.flag_add, boot_flag_buffer, sizeof(boot_flag_buffer), 0);
  400e22:	2300      	movs	r3, #0
  400e24:	2208      	movs	r2, #8
  400e26:	4669      	mov	r1, sp
  400e28:	68a0      	ldr	r0, [r4, #8]
  400e2a:	4e0a      	ldr	r6, [pc, #40]	; (400e54 <boot_set_flag+0x5c>)
  400e2c:	47b0      	blx	r6
  400e2e:	4305      	orrs	r5, r0
	/* Flash Lock */
	error_code |= flash_lock((uint32_t)app_temp.flag_add, (uint32_t)app_temp.start + app_temp.size - 1, 0, 0);
  400e30:	6821      	ldr	r1, [r4, #0]
  400e32:	6863      	ldr	r3, [r4, #4]
  400e34:	4419      	add	r1, r3
  400e36:	2300      	movs	r3, #0
  400e38:	461a      	mov	r2, r3
  400e3a:	3901      	subs	r1, #1
  400e3c:	68a0      	ldr	r0, [r4, #8]
  400e3e:	4c06      	ldr	r4, [pc, #24]	; (400e58 <boot_set_flag+0x60>)
  400e40:	47a0      	blx	r4
  __ASM volatile ("cpsie f" : : : "memory");
  400e42:	b661      	cpsie	f
	/* Enable interrupts */
	__enable_fault_irq();
	
	return error_code;
}
  400e44:	4328      	orrs	r0, r5
  400e46:	b002      	add	sp, #8
  400e48:	bd70      	pop	{r4, r5, r6, pc}
  400e4a:	bf00      	nop
  400e4c:	20001000 	.word	0x20001000
  400e50:	00402aad 	.word	0x00402aad
  400e54:	00402979 	.word	0x00402979
  400e58:	00402a45 	.word	0x00402a45

00400e5c <bootloader_init>:
	return (flash_size_t)((CHIPID->CHIPID_CIDR & CHIPID_CIDR_NVPSIZ_Msk) >> CHIPID_CIDR_NVPSIZ_Pos);
  400e5c:	4b23      	ldr	r3, [pc, #140]	; (400eec <bootloader_init+0x90>)
  400e5e:	681b      	ldr	r3, [r3, #0]
/// @brief Bootloader initialization.
/// @details Scratchpad origin and length are estimated.
void bootloader_init(void){
	
	// Get flash size and critical memory addresses
	switch (get_flash_size())
  400e60:	f3c3 2303 	ubfx	r3, r3, #8, #4
  400e64:	3b07      	subs	r3, #7
  400e66:	2b07      	cmp	r3, #7
  400e68:	d838      	bhi.n	400edc <bootloader_init+0x80>
  400e6a:	e8df f003 	tbb	[pc, r3]
  400e6e:	3704      	.short	0x3704
  400e70:	27371f17 	.word	0x27371f17
  400e74:	2f37      	.short	0x2f37
	{
		case FLASH_SIZE_128K:
			app_temp.start = 0x00410000;
  400e76:	4b1e      	ldr	r3, [pc, #120]	; (400ef0 <bootloader_init+0x94>)
  400e78:	f44f 0282 	mov.w	r2, #4259840	; 0x410000
  400e7c:	601a      	str	r2, [r3, #0]
			app_temp.size = 0x00010000;
  400e7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400e82:	605a      	str	r2, [r3, #4]
			app_temp.size = 0x00010000;
			break;
	}
		
	// Load boot flag, app temp image checksum and size addresses
	app_temp.flag_add = app_temp.start + app_temp.size - 8;
  400e84:	4a1a      	ldr	r2, [pc, #104]	; (400ef0 <bootloader_init+0x94>)
  400e86:	6813      	ldr	r3, [r2, #0]
  400e88:	6851      	ldr	r1, [r2, #4]
  400e8a:	440b      	add	r3, r1
  400e8c:	f1a3 0108 	sub.w	r1, r3, #8
  400e90:	6091      	str	r1, [r2, #8]
	app_temp.crc_add = app_temp.start + app_temp.size - 6;
  400e92:	1f99      	subs	r1, r3, #6
  400e94:	60d1      	str	r1, [r2, #12]
	app_temp.size_add = app_temp.start + app_temp.size - 4;
  400e96:	3b04      	subs	r3, #4
  400e98:	6113      	str	r3, [r2, #16]
  400e9a:	4770      	bx	lr
			app_temp.start = 0x00420000;
  400e9c:	4b14      	ldr	r3, [pc, #80]	; (400ef0 <bootloader_init+0x94>)
  400e9e:	f44f 0284 	mov.w	r2, #4325376	; 0x420000
  400ea2:	601a      	str	r2, [r3, #0]
			app_temp.size = 0x00020000;
  400ea4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  400ea8:	605a      	str	r2, [r3, #4]
			break;
  400eaa:	e7eb      	b.n	400e84 <bootloader_init+0x28>
			app_temp.start = 0x00440000;
  400eac:	4b10      	ldr	r3, [pc, #64]	; (400ef0 <bootloader_init+0x94>)
  400eae:	f44f 0288 	mov.w	r2, #4456448	; 0x440000
  400eb2:	601a      	str	r2, [r3, #0]
			app_temp.size = 0x00040000;
  400eb4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  400eb8:	605a      	str	r2, [r3, #4]
			break;
  400eba:	e7e3      	b.n	400e84 <bootloader_init+0x28>
			app_temp.start = 0x00480000;
  400ebc:	4b0c      	ldr	r3, [pc, #48]	; (400ef0 <bootloader_init+0x94>)
  400ebe:	f44f 0290 	mov.w	r2, #4718592	; 0x480000
  400ec2:	601a      	str	r2, [r3, #0]
			app_temp.size = 0x00080000;
  400ec4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400ec8:	605a      	str	r2, [r3, #4]
		break;
  400eca:	e7db      	b.n	400e84 <bootloader_init+0x28>
			app_temp.start = 0x00500000;
  400ecc:	4b08      	ldr	r3, [pc, #32]	; (400ef0 <bootloader_init+0x94>)
  400ece:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
  400ed2:	601a      	str	r2, [r3, #0]
			app_temp.size = 0x00100000;
  400ed4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400ed8:	605a      	str	r2, [r3, #4]
		break;
  400eda:	e7d3      	b.n	400e84 <bootloader_init+0x28>
			app_temp.start = 0x00410000;
  400edc:	4b04      	ldr	r3, [pc, #16]	; (400ef0 <bootloader_init+0x94>)
  400ede:	f44f 0282 	mov.w	r2, #4259840	; 0x410000
  400ee2:	601a      	str	r2, [r3, #0]
			app_temp.size = 0x00010000;
  400ee4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  400ee8:	605a      	str	r2, [r3, #4]
			break;
  400eea:	e7cb      	b.n	400e84 <bootloader_init+0x28>
  400eec:	400e0740 	.word	0x400e0740
  400ef0:	20001000 	.word	0x20001000

00400ef4 <bootloader_start_upload>:
///         3- Image bigger than space available.
///         4- CRC (param) same as CRC image on scratch pad space.
///         5- Blocks size bigger than max payload message
///         6- Fail to erase flash.
///
uint8_t bootloader_start_upload( uint8_t * payload ) {
  400ef4:	b510      	push	{r4, lr}
		
	start_upload_ready = 0;
  400ef6:	2200      	movs	r2, #0
  400ef8:	4b0e      	ldr	r3, [pc, #56]	; (400f34 <bootloader_start_upload+0x40>)
  400efa:	701a      	strb	r2, [r3, #0]
		
	// Save new image info
   	copy_content( payload , (uint8_t *)&new_image , sizeof(new_image_t) );
  400efc:	4c0e      	ldr	r4, [pc, #56]	; (400f38 <bootloader_start_upload+0x44>)
  400efe:	2210      	movs	r2, #16
  400f00:	4621      	mov	r1, r4
  400f02:	4b0e      	ldr	r3, [pc, #56]	; (400f3c <bootloader_start_upload+0x48>)
  400f04:	4798      	blx	r3
	// Check new FW version
//	if ( new_image.fw_version < ( (SETTINGS_ARM_FW_VERSION<<8) | SETTINGS_ARM_FW_VERSION_ENG_BUILD )  )
//		return 2;
		
	// Check that new FW fits into application space
	if (new_image.length > (app_temp.size - BOOT_SIZE))
  400f06:	4b0e      	ldr	r3, [pc, #56]	; (400f40 <bootloader_start_upload+0x4c>)
  400f08:	685b      	ldr	r3, [r3, #4]
  400f0a:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
  400f0e:	6862      	ldr	r2, [r4, #4]
  400f10:	429a      	cmp	r2, r3
  400f12:	d901      	bls.n	400f18 <bootloader_start_upload+0x24>
		return 3;
  400f14:	2003      	movs	r0, #3
  400f16:	bd10      	pop	{r4, pc}
	// Check if image on temp app region is the same that is going to be download
//	if (verify_scratch_image(new_image.length, new_image.crc))
//		return 4;
		
	// Check block size
	if (new_image.block_size > (SETTINGS_MSG_LENGHT_PAYLOAD - sizeof(uint16_t) ) )
  400f18:	68e3      	ldr	r3, [r4, #12]
  400f1a:	2b7e      	cmp	r3, #126	; 0x7e
  400f1c:	d901      	bls.n	400f22 <bootloader_start_upload+0x2e>
		return 5;
  400f1e:	2005      	movs	r0, #5
  400f20:	bd10      	pop	{r4, pc}
			
	// Erase scratch-pad
	if (scratch_erase() != 0)
  400f22:	4b08      	ldr	r3, [pc, #32]	; (400f44 <bootloader_start_upload+0x50>)
  400f24:	4798      	blx	r3
  400f26:	b108      	cbz	r0, 400f2c <bootloader_start_upload+0x38>
		return 6;
  400f28:	2006      	movs	r0, #6
						
	// All is ok
	start_upload_ready = 1;
	return 0;
		
}
  400f2a:	bd10      	pop	{r4, pc}
	start_upload_ready = 1;
  400f2c:	2201      	movs	r2, #1
  400f2e:	4b01      	ldr	r3, [pc, #4]	; (400f34 <bootloader_start_upload+0x40>)
  400f30:	701a      	strb	r2, [r3, #0]
	return 0;
  400f32:	bd10      	pop	{r4, pc}
  400f34:	20000b38 	.word	0x20000b38
  400f38:	20000ff0 	.word	0x20000ff0
  400f3c:	00403129 	.word	0x00403129
  400f40:	20001000 	.word	0x20001000
  400f44:	00400cc1 	.word	0x00400cc1

00400f48 <bootloader_upload_block>:
/// @param[in] payload Pointer to input data
/// @return 0 if successful; otherwise returns an error code:
///         2- Start upload command was not successfully executed.
///         3- Fail to save block.
///
uint8_t bootloader_upload_block( uint8_t * payload , uint8_t payload_length ) {
  400f48:	b508      	push	{r3, lr}
		
	// Load block number
	memcpy(&blk_number, payload , sizeof(blk_number));
		
	// Only execute the followings command if start upload command was executed successfully
	if (start_upload_ready == 0)
  400f4a:	4b07      	ldr	r3, [pc, #28]	; (400f68 <bootloader_upload_block+0x20>)
  400f4c:	781b      	ldrb	r3, [r3, #0]
  400f4e:	b90b      	cbnz	r3, 400f54 <bootloader_upload_block+0xc>
		return 2;
  400f50:	2002      	movs	r0, #2
		return 3;
		
	// All is ok
	return 0;
			
}
  400f52:	bd08      	pop	{r3, pc}
	if (save_image_block(blk_number, payload + 2, payload_length - 2) != 0)
  400f54:	1e8a      	subs	r2, r1, #2
  400f56:	b292      	uxth	r2, r2
  400f58:	1c81      	adds	r1, r0, #2
  400f5a:	8800      	ldrh	r0, [r0, #0]
  400f5c:	4b03      	ldr	r3, [pc, #12]	; (400f6c <bootloader_upload_block+0x24>)
  400f5e:	4798      	blx	r3
  400f60:	2800      	cmp	r0, #0
		return 3;
  400f62:	bf18      	it	ne
  400f64:	2003      	movne	r0, #3
  400f66:	bd08      	pop	{r3, pc}
  400f68:	20000b38 	.word	0x20000b38
  400f6c:	00400d6d 	.word	0x00400d6d

00400f70 <bootloader_install_image>:
///			2- received info do not match with previous info 
///			3- CRC (param) same as CRC image on scratch pad space.
///         4- flags not set
///			5- ARM was not reset
///
uint8_t bootloader_install_image( uint8_t * payload ) {	
  400f70:	b510      	push	{r4, lr}
		
	// check that info is equal to info received with the start command
	if (compare_content( (uint8_t *)&new_image , payload , sizeof(new_image_t)) != 0)
  400f72:	2210      	movs	r2, #16
  400f74:	4601      	mov	r1, r0
  400f76:	480e      	ldr	r0, [pc, #56]	; (400fb0 <bootloader_install_image+0x40>)
  400f78:	4b0e      	ldr	r3, [pc, #56]	; (400fb4 <bootloader_install_image+0x44>)
  400f7a:	4798      	blx	r3
  400f7c:	b108      	cbz	r0, 400f82 <bootloader_install_image+0x12>
		return 2;
  400f7e:	2002      	movs	r0, #2
  400f80:	bd10      	pop	{r4, pc}
	
	// Check if CRC received as parameter matches with the scratchpad image CRC
	if (verify_scratch_image(new_image.length, new_image.crc) == FALSE)
  400f82:	4b0b      	ldr	r3, [pc, #44]	; (400fb0 <bootloader_install_image+0x40>)
  400f84:	8919      	ldrh	r1, [r3, #8]
  400f86:	6858      	ldr	r0, [r3, #4]
  400f88:	4b0b      	ldr	r3, [pc, #44]	; (400fb8 <bootloader_install_image+0x48>)
  400f8a:	4798      	blx	r3
  400f8c:	b908      	cbnz	r0, 400f92 <bootloader_install_image+0x22>
		return 3;
  400f8e:	2003      	movs	r0, #3
  400f90:	bd10      	pop	{r4, pc}
	
	// Set flags
	if (boot_set_flag(new_image.crc, new_image.length) != 0)
  400f92:	4b07      	ldr	r3, [pc, #28]	; (400fb0 <bootloader_install_image+0x40>)
  400f94:	6859      	ldr	r1, [r3, #4]
  400f96:	8918      	ldrh	r0, [r3, #8]
  400f98:	4b08      	ldr	r3, [pc, #32]	; (400fbc <bootloader_install_image+0x4c>)
  400f9a:	4798      	blx	r3
  400f9c:	b108      	cbz	r0, 400fa2 <bootloader_install_image+0x32>
		return 4;
  400f9e:	2004      	movs	r0, #4
	system_reset_ARM();

	// Should never get here
	return 0;
	
}
  400fa0:	bd10      	pop	{r4, pc}
	start_upload_ready = 0;
  400fa2:	2400      	movs	r4, #0
  400fa4:	4b06      	ldr	r3, [pc, #24]	; (400fc0 <bootloader_install_image+0x50>)
  400fa6:	701c      	strb	r4, [r3, #0]
	system_reset_ARM();
  400fa8:	4b06      	ldr	r3, [pc, #24]	; (400fc4 <bootloader_install_image+0x54>)
  400faa:	4798      	blx	r3
	return 0;
  400fac:	4620      	mov	r0, r4
  400fae:	bd10      	pop	{r4, pc}
  400fb0:	20000ff0 	.word	0x20000ff0
  400fb4:	00403149 	.word	0x00403149
  400fb8:	00400d51 	.word	0x00400d51
  400fbc:	00400df9 	.word	0x00400df9
  400fc0:	20000b38 	.word	0x20000b38
  400fc4:	00403659 	.word	0x00403659

00400fc8 <sdcard_mount_logic_drive>:
volatile int16_t      sdcard_event_buffer[SETTINGS_EVENT_BUFFER_NUM];

/**************************** LOCAL FUNCTIONS ********************************/

/// @brief Mount the logic drive
FRESULT sdcard_mount_logic_drive(void) {
  400fc8:	b510      	push	{r4, lr}

	memset(&fs, 0, sizeof(FATFS));
  400fca:	4c06      	ldr	r4, [pc, #24]	; (400fe4 <sdcard_mount_logic_drive+0x1c>)
  400fcc:	f44f 720d 	mov.w	r2, #564	; 0x234
  400fd0:	2100      	movs	r1, #0
  400fd2:	4620      	mov	r0, r4
  400fd4:	4b04      	ldr	r3, [pc, #16]	; (400fe8 <sdcard_mount_logic_drive+0x20>)
  400fd6:	4798      	blx	r3
	return f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
  400fd8:	4621      	mov	r1, r4
  400fda:	2000      	movs	r0, #0
  400fdc:	4b03      	ldr	r3, [pc, #12]	; (400fec <sdcard_mount_logic_drive+0x24>)
  400fde:	4798      	blx	r3
}
  400fe0:	bd10      	pop	{r4, pc}
  400fe2:	bf00      	nop
  400fe4:	20001014 	.word	0x20001014
  400fe8:	00409669 	.word	0x00409669
  400fec:	00406c51 	.word	0x00406c51

00400ff0 <compute_mod_and_phase>:

/*****************************************************************************/

void compute_mod_and_phase(trend_complex16_t * complex , int16_t * complex_mod , int16_t * complex_phase ) {
  400ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400ff4:	b083      	sub	sp, #12
  400ff6:	1e84      	subs	r4, r0, #2
  400ff8:	f1a1 0a02 	sub.w	sl, r1, #2
  400ffc:	f1a2 0b02 	sub.w	fp, r2, #2
  401000:	1d86      	adds	r6, r0, #6
  401002:	f100 0904 	add.w	r9, r0, #4

	for ( uint8_t i=0 ; i<3 ; i++ ) {

		complex_mod[i] = MATH_SQRT( SQUARE(complex->real[i]) + SQUARE(complex->imag[i]) );
  401006:	4d18      	ldr	r5, [pc, #96]	; (401068 <compute_mod_and_phase+0x78>)
  401008:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
  40100c:	46b0      	mov	r8, r6
  40100e:	f936 3b02 	ldrsh.w	r3, [r6], #2
  401012:	fb03 f303 	mul.w	r3, r3, r3
  401016:	fb00 3000 	mla	r0, r0, r0, r3
  40101a:	47a8      	blx	r5
  40101c:	4b13      	ldr	r3, [pc, #76]	; (40106c <compute_mod_and_phase+0x7c>)
  40101e:	4798      	blx	r3
  401020:	4f13      	ldr	r7, [pc, #76]	; (401070 <compute_mod_and_phase+0x80>)
  401022:	47b8      	blx	r7
  401024:	f82a 0f02 	strh.w	r0, [sl, #2]!
		complex_phase[i] = ((360.0/6.283185307179586)*64) * MATH_ATAN2( complex->imag[i] , complex->real[i] );
  401028:	f934 0f02 	ldrsh.w	r0, [r4, #2]!
  40102c:	47a8      	blx	r5
  40102e:	e9cd 0100 	strd	r0, r1, [sp]
  401032:	f9b8 0000 	ldrsh.w	r0, [r8]
  401036:	47a8      	blx	r5
  401038:	e9dd 2300 	ldrd	r2, r3, [sp]
  40103c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 401074 <compute_mod_and_phase+0x84>
  401040:	47c0      	blx	r8
  401042:	a307      	add	r3, pc, #28	; (adr r3, 401060 <compute_mod_and_phase+0x70>)
  401044:	e9d3 2300 	ldrd	r2, r3, [r3]
  401048:	f8df 802c 	ldr.w	r8, [pc, #44]	; 401078 <compute_mod_and_phase+0x88>
  40104c:	47c0      	blx	r8
  40104e:	47b8      	blx	r7
  401050:	f82b 0f02 	strh.w	r0, [fp, #2]!
	for ( uint8_t i=0 ; i<3 ; i++ ) {
  401054:	454c      	cmp	r4, r9
  401056:	d1d7      	bne.n	401008 <compute_mod_and_phase+0x18>

	}
	
}
  401058:	b003      	add	sp, #12
  40105a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40105e:	bf00      	nop
  401060:	1a63c1f8 	.word	0x1a63c1f8
  401064:	40aca5dc 	.word	0x40aca5dc
  401068:	00408855 	.word	0x00408855
  40106c:	00407e55 	.word	0x00407e55
  401070:	00408e81 	.word	0x00408e81
  401074:	00407e51 	.word	0x00407e51
  401078:	00408921 	.word	0x00408921

0040107c <save_data_x1>:
}

/*****************************************************************************/

/// @brief Save 1 data
bool save_data_x1( int16_t * data , float gain ) {
  40107c:	b570      	push	{r4, r5, r6, lr}
  40107e:	460d      	mov	r5, r1

	float temp;

	temp = data[0]*gain;
  401080:	4c13      	ldr	r4, [pc, #76]	; (4010d0 <save_data_x1+0x54>)
  401082:	f9b0 0000 	ldrsh.w	r0, [r0]
  401086:	47a0      	blx	r4
  401088:	4629      	mov	r1, r5
  40108a:	4b12      	ldr	r3, [pc, #72]	; (4010d4 <save_data_x1+0x58>)
  40108c:	4798      	blx	r3
  40108e:	4606      	mov	r6, r0
	if (EOF == f_printf( &file_object, "%d.%03d", (int16_t)temp , ABS((int16_t)((temp-(int32_t)temp)*1000.0)) )) return 0;
  401090:	4d11      	ldr	r5, [pc, #68]	; (4010d8 <save_data_x1+0x5c>)
  401092:	47a8      	blx	r5
  401094:	47a0      	blx	r4
  401096:	4601      	mov	r1, r0
  401098:	4630      	mov	r0, r6
  40109a:	4b10      	ldr	r3, [pc, #64]	; (4010dc <save_data_x1+0x60>)
  40109c:	4798      	blx	r3
  40109e:	4b10      	ldr	r3, [pc, #64]	; (4010e0 <save_data_x1+0x64>)
  4010a0:	4798      	blx	r3
  4010a2:	2200      	movs	r2, #0
  4010a4:	4b0f      	ldr	r3, [pc, #60]	; (4010e4 <save_data_x1+0x68>)
  4010a6:	4c10      	ldr	r4, [pc, #64]	; (4010e8 <save_data_x1+0x6c>)
  4010a8:	47a0      	blx	r4
  4010aa:	4b10      	ldr	r3, [pc, #64]	; (4010ec <save_data_x1+0x70>)
  4010ac:	4798      	blx	r3
  4010ae:	b200      	sxth	r0, r0
  4010b0:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
  4010b4:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
  4010b8:	4630      	mov	r0, r6
  4010ba:	47a8      	blx	r5
  4010bc:	4623      	mov	r3, r4
  4010be:	b202      	sxth	r2, r0
  4010c0:	490b      	ldr	r1, [pc, #44]	; (4010f0 <save_data_x1+0x74>)
  4010c2:	480c      	ldr	r0, [pc, #48]	; (4010f4 <save_data_x1+0x78>)
  4010c4:	4c0c      	ldr	r4, [pc, #48]	; (4010f8 <save_data_x1+0x7c>)
  4010c6:	47a0      	blx	r4

	return 1;
	
}
  4010c8:	3001      	adds	r0, #1
  4010ca:	bf18      	it	ne
  4010cc:	2001      	movne	r0, #1
  4010ce:	bd70      	pop	{r4, r5, r6, pc}
  4010d0:	004090e5 	.word	0x004090e5
  4010d4:	0040918d 	.word	0x0040918d
  4010d8:	0040942d 	.word	0x0040942d
  4010dc:	00408f79 	.word	0x00408f79
  4010e0:	00408879 	.word	0x00408879
  4010e4:	408f4000 	.word	0x408f4000
  4010e8:	00408921 	.word	0x00408921
  4010ec:	00408e81 	.word	0x00408e81
  4010f0:	0040d628 	.word	0x0040d628
  4010f4:	20001248 	.word	0x20001248
  4010f8:	004079a5 	.word	0x004079a5

004010fc <save_data_x3>:

/// @brief Save max, min and average
bool save_data_x3( int16_t * data , float gain ) {
  4010fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401100:	4606      	mov	r6, r0
  401102:	460d      	mov	r5, r1

	float temp;

	temp = data[0]*gain;
  401104:	4c3d      	ldr	r4, [pc, #244]	; (4011fc <save_data_x3+0x100>)
  401106:	f9b0 0000 	ldrsh.w	r0, [r0]
  40110a:	47a0      	blx	r4
  40110c:	4629      	mov	r1, r5
  40110e:	4b3c      	ldr	r3, [pc, #240]	; (401200 <save_data_x3+0x104>)
  401110:	4798      	blx	r3
  401112:	4680      	mov	r8, r0
	if (EOF == f_printf( &file_object, ",%d.%03d", (int16_t)temp , ABS((int16_t)((temp-(int32_t)temp)*1000.0)) )) return 0;
  401114:	4f3b      	ldr	r7, [pc, #236]	; (401204 <save_data_x3+0x108>)
  401116:	47b8      	blx	r7
  401118:	47a0      	blx	r4
  40111a:	4601      	mov	r1, r0
  40111c:	4640      	mov	r0, r8
  40111e:	4b3a      	ldr	r3, [pc, #232]	; (401208 <save_data_x3+0x10c>)
  401120:	4798      	blx	r3
  401122:	4b3a      	ldr	r3, [pc, #232]	; (40120c <save_data_x3+0x110>)
  401124:	4798      	blx	r3
  401126:	2200      	movs	r2, #0
  401128:	4b39      	ldr	r3, [pc, #228]	; (401210 <save_data_x3+0x114>)
  40112a:	4c3a      	ldr	r4, [pc, #232]	; (401214 <save_data_x3+0x118>)
  40112c:	47a0      	blx	r4
  40112e:	4b3a      	ldr	r3, [pc, #232]	; (401218 <save_data_x3+0x11c>)
  401130:	4798      	blx	r3
  401132:	b200      	sxth	r0, r0
  401134:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
  401138:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
  40113c:	4640      	mov	r0, r8
  40113e:	47b8      	blx	r7
  401140:	4623      	mov	r3, r4
  401142:	b202      	sxth	r2, r0
  401144:	4935      	ldr	r1, [pc, #212]	; (40121c <save_data_x3+0x120>)
  401146:	4836      	ldr	r0, [pc, #216]	; (401220 <save_data_x3+0x124>)
  401148:	4c36      	ldr	r4, [pc, #216]	; (401224 <save_data_x3+0x128>)
  40114a:	47a0      	blx	r4
  40114c:	f1b0 3fff 	cmp.w	r0, #4294967295
  401150:	d04d      	beq.n	4011ee <save_data_x3+0xf2>
	temp = data[1]*gain;
  401152:	4c2a      	ldr	r4, [pc, #168]	; (4011fc <save_data_x3+0x100>)
  401154:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
  401158:	47a0      	blx	r4
  40115a:	4629      	mov	r1, r5
  40115c:	4b28      	ldr	r3, [pc, #160]	; (401200 <save_data_x3+0x104>)
  40115e:	4798      	blx	r3
  401160:	4680      	mov	r8, r0
	if (EOF == f_printf( &file_object, ",%d.%03d", (int16_t)temp , ABS((int16_t)((temp-(int32_t)temp)*1000.0)) )) return 0;
  401162:	47b8      	blx	r7
  401164:	47a0      	blx	r4
  401166:	4601      	mov	r1, r0
  401168:	4640      	mov	r0, r8
  40116a:	4b27      	ldr	r3, [pc, #156]	; (401208 <save_data_x3+0x10c>)
  40116c:	4798      	blx	r3
  40116e:	4b27      	ldr	r3, [pc, #156]	; (40120c <save_data_x3+0x110>)
  401170:	4798      	blx	r3
  401172:	2200      	movs	r2, #0
  401174:	4b26      	ldr	r3, [pc, #152]	; (401210 <save_data_x3+0x114>)
  401176:	4c27      	ldr	r4, [pc, #156]	; (401214 <save_data_x3+0x118>)
  401178:	47a0      	blx	r4
  40117a:	4b27      	ldr	r3, [pc, #156]	; (401218 <save_data_x3+0x11c>)
  40117c:	4798      	blx	r3
  40117e:	b200      	sxth	r0, r0
  401180:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
  401184:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
  401188:	4640      	mov	r0, r8
  40118a:	47b8      	blx	r7
  40118c:	4623      	mov	r3, r4
  40118e:	b202      	sxth	r2, r0
  401190:	4922      	ldr	r1, [pc, #136]	; (40121c <save_data_x3+0x120>)
  401192:	4823      	ldr	r0, [pc, #140]	; (401220 <save_data_x3+0x124>)
  401194:	4c23      	ldr	r4, [pc, #140]	; (401224 <save_data_x3+0x128>)
  401196:	47a0      	blx	r4
  401198:	f1b0 3fff 	cmp.w	r0, #4294967295
  40119c:	d02a      	beq.n	4011f4 <save_data_x3+0xf8>
	temp = data[2]*gain;
  40119e:	4c17      	ldr	r4, [pc, #92]	; (4011fc <save_data_x3+0x100>)
  4011a0:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
  4011a4:	47a0      	blx	r4
  4011a6:	4629      	mov	r1, r5
  4011a8:	4b15      	ldr	r3, [pc, #84]	; (401200 <save_data_x3+0x104>)
  4011aa:	4798      	blx	r3
  4011ac:	4606      	mov	r6, r0
	if (EOF == f_printf( &file_object, ",%d.%03d", (int16_t)temp , ABS((int16_t)((temp-(int32_t)temp)*1000.0)) )) return 0;
  4011ae:	47b8      	blx	r7
  4011b0:	47a0      	blx	r4
  4011b2:	4601      	mov	r1, r0
  4011b4:	4630      	mov	r0, r6
  4011b6:	4b14      	ldr	r3, [pc, #80]	; (401208 <save_data_x3+0x10c>)
  4011b8:	4798      	blx	r3
  4011ba:	4b14      	ldr	r3, [pc, #80]	; (40120c <save_data_x3+0x110>)
  4011bc:	4798      	blx	r3
  4011be:	2200      	movs	r2, #0
  4011c0:	4b13      	ldr	r3, [pc, #76]	; (401210 <save_data_x3+0x114>)
  4011c2:	4c14      	ldr	r4, [pc, #80]	; (401214 <save_data_x3+0x118>)
  4011c4:	47a0      	blx	r4
  4011c6:	4b14      	ldr	r3, [pc, #80]	; (401218 <save_data_x3+0x11c>)
  4011c8:	4798      	blx	r3
  4011ca:	b200      	sxth	r0, r0
  4011cc:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
  4011d0:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
  4011d4:	4630      	mov	r0, r6
  4011d6:	47b8      	blx	r7
  4011d8:	4623      	mov	r3, r4
  4011da:	b202      	sxth	r2, r0
  4011dc:	490f      	ldr	r1, [pc, #60]	; (40121c <save_data_x3+0x120>)
  4011de:	4810      	ldr	r0, [pc, #64]	; (401220 <save_data_x3+0x124>)
  4011e0:	4c10      	ldr	r4, [pc, #64]	; (401224 <save_data_x3+0x128>)
  4011e2:	47a0      	blx	r4
  4011e4:	3001      	adds	r0, #1
  4011e6:	bf18      	it	ne
  4011e8:	2001      	movne	r0, #1
  4011ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (EOF == f_printf( &file_object, ",%d.%03d", (int16_t)temp , ABS((int16_t)((temp-(int32_t)temp)*1000.0)) )) return 0;
  4011ee:	2000      	movs	r0, #0
  4011f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (EOF == f_printf( &file_object, ",%d.%03d", (int16_t)temp , ABS((int16_t)((temp-(int32_t)temp)*1000.0)) )) return 0;
  4011f4:	2000      	movs	r0, #0
	
	return 1;

}
  4011f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4011fa:	bf00      	nop
  4011fc:	004090e5 	.word	0x004090e5
  401200:	0040918d 	.word	0x0040918d
  401204:	0040942d 	.word	0x0040942d
  401208:	00408f79 	.word	0x00408f79
  40120c:	00408879 	.word	0x00408879
  401210:	408f4000 	.word	0x408f4000
  401214:	00408921 	.word	0x00408921
  401218:	00408e81 	.word	0x00408e81
  40121c:	0040d630 	.word	0x0040d630
  401220:	20001248 	.word	0x20001248
  401224:	004079a5 	.word	0x004079a5

00401228 <print_device_identification>:

/// @brief print_device_label
bool print_device_identification( void ) {
  401228:	b510      	push	{r4, lr}

	if (EOF ==  f_printf( &file_object, "%s (Project ID=0x%02x)\n", SETTINGS_PROJECT_NAME , SETTINGS_PROJECT_ID )) return 0;
  40122a:	2304      	movs	r3, #4
  40122c:	4a2e      	ldr	r2, [pc, #184]	; (4012e8 <print_device_identification+0xc0>)
  40122e:	492f      	ldr	r1, [pc, #188]	; (4012ec <print_device_identification+0xc4>)
  401230:	482f      	ldr	r0, [pc, #188]	; (4012f0 <print_device_identification+0xc8>)
  401232:	4c30      	ldr	r4, [pc, #192]	; (4012f4 <print_device_identification+0xcc>)
  401234:	47a0      	blx	r4
  401236:	f1b0 3fff 	cmp.w	r0, #4294967295
  40123a:	d042      	beq.n	4012c2 <print_device_identification+0x9a>
	if (EOF ==  f_printf( &file_object, "ARM FW version = %d.%d\n", SETTINGS_ARM_FW_VERSION , SETTINGS_ARM_FW_VERSION_ENG_BUILD )) return 0;
  40123c:	2303      	movs	r3, #3
  40123e:	2202      	movs	r2, #2
  401240:	492d      	ldr	r1, [pc, #180]	; (4012f8 <print_device_identification+0xd0>)
  401242:	482b      	ldr	r0, [pc, #172]	; (4012f0 <print_device_identification+0xc8>)
  401244:	47a0      	blx	r4
  401246:	f1b0 3fff 	cmp.w	r0, #4294967295
  40124a:	d03c      	beq.n	4012c6 <print_device_identification+0x9e>
	if (EOF ==  f_printf( &file_object, "DSP FW version = %d.%d\n", DSP_fw[0] , DSP_fw[1] )) return 0;
  40124c:	4b2b      	ldr	r3, [pc, #172]	; (4012fc <print_device_identification+0xd4>)
  40124e:	781a      	ldrb	r2, [r3, #0]
  401250:	785b      	ldrb	r3, [r3, #1]
  401252:	492b      	ldr	r1, [pc, #172]	; (401300 <print_device_identification+0xd8>)
  401254:	4826      	ldr	r0, [pc, #152]	; (4012f0 <print_device_identification+0xc8>)
  401256:	47a0      	blx	r4
  401258:	f1b0 3fff 	cmp.w	r0, #4294967295
  40125c:	d035      	beq.n	4012ca <print_device_identification+0xa2>
	if (EOF ==  f_puts( "Location name = none\n" , &file_object )) return 0;
  40125e:	4924      	ldr	r1, [pc, #144]	; (4012f0 <print_device_identification+0xc8>)
  401260:	4828      	ldr	r0, [pc, #160]	; (401304 <print_device_identification+0xdc>)
  401262:	4b29      	ldr	r3, [pc, #164]	; (401308 <print_device_identification+0xe0>)
  401264:	4798      	blx	r3
  401266:	f1b0 3fff 	cmp.w	r0, #4294967295
  40126a:	d030      	beq.n	4012ce <print_device_identification+0xa6>
	if (EOF ==  f_puts( "Device name = none\n" , &file_object )) return 0;
  40126c:	4920      	ldr	r1, [pc, #128]	; (4012f0 <print_device_identification+0xc8>)
  40126e:	4827      	ldr	r0, [pc, #156]	; (40130c <print_device_identification+0xe4>)
  401270:	4b25      	ldr	r3, [pc, #148]	; (401308 <print_device_identification+0xe0>)
  401272:	4798      	blx	r3
  401274:	f1b0 3fff 	cmp.w	r0, #4294967295
  401278:	d02b      	beq.n	4012d2 <print_device_identification+0xaa>
	if (EOF ==  f_puts( "Note_1 = none\n" , &file_object )) return 0;
  40127a:	491d      	ldr	r1, [pc, #116]	; (4012f0 <print_device_identification+0xc8>)
  40127c:	4824      	ldr	r0, [pc, #144]	; (401310 <print_device_identification+0xe8>)
  40127e:	4b22      	ldr	r3, [pc, #136]	; (401308 <print_device_identification+0xe0>)
  401280:	4798      	blx	r3
  401282:	f1b0 3fff 	cmp.w	r0, #4294967295
  401286:	d026      	beq.n	4012d6 <print_device_identification+0xae>
	if (EOF ==  f_puts( "Note_2 = none\n" , &file_object )) return 0;
  401288:	4919      	ldr	r1, [pc, #100]	; (4012f0 <print_device_identification+0xc8>)
  40128a:	4822      	ldr	r0, [pc, #136]	; (401314 <print_device_identification+0xec>)
  40128c:	4b1e      	ldr	r3, [pc, #120]	; (401308 <print_device_identification+0xe0>)
  40128e:	4798      	blx	r3
  401290:	f1b0 3fff 	cmp.w	r0, #4294967295
  401294:	d021      	beq.n	4012da <print_device_identification+0xb2>
	if (EOF ==  f_puts( "Power configuration = Wye/Star\n" , &file_object )) return 0;
  401296:	4916      	ldr	r1, [pc, #88]	; (4012f0 <print_device_identification+0xc8>)
  401298:	481f      	ldr	r0, [pc, #124]	; (401318 <print_device_identification+0xf0>)
  40129a:	4b1b      	ldr	r3, [pc, #108]	; (401308 <print_device_identification+0xe0>)
  40129c:	4798      	blx	r3
  40129e:	f1b0 3fff 	cmp.w	r0, #4294967295
  4012a2:	d01c      	beq.n	4012de <print_device_identification+0xb6>
	if (EOF ==  f_puts( "Nominal Line-to-Line Voltage = 380V\n" , &file_object )) return 0;
  4012a4:	4912      	ldr	r1, [pc, #72]	; (4012f0 <print_device_identification+0xc8>)
  4012a6:	481d      	ldr	r0, [pc, #116]	; (40131c <print_device_identification+0xf4>)
  4012a8:	4b17      	ldr	r3, [pc, #92]	; (401308 <print_device_identification+0xe0>)
  4012aa:	4798      	blx	r3
  4012ac:	f1b0 3fff 	cmp.w	r0, #4294967295
  4012b0:	d017      	beq.n	4012e2 <print_device_identification+0xba>
	if (EOF ==  f_puts( "Nominal Line-to-Neutral Voltage = 220V\n\n" , &file_object )) return 0;
  4012b2:	490f      	ldr	r1, [pc, #60]	; (4012f0 <print_device_identification+0xc8>)
  4012b4:	481a      	ldr	r0, [pc, #104]	; (401320 <print_device_identification+0xf8>)
  4012b6:	4b14      	ldr	r3, [pc, #80]	; (401308 <print_device_identification+0xe0>)
  4012b8:	4798      	blx	r3
  4012ba:	3001      	adds	r0, #1
  4012bc:	bf18      	it	ne
  4012be:	2001      	movne	r0, #1
  4012c0:	bd10      	pop	{r4, pc}
	if (EOF ==  f_printf( &file_object, "%s (Project ID=0x%02x)\n", SETTINGS_PROJECT_NAME , SETTINGS_PROJECT_ID )) return 0;
  4012c2:	2000      	movs	r0, #0
  4012c4:	bd10      	pop	{r4, pc}
	if (EOF ==  f_printf( &file_object, "ARM FW version = %d.%d\n", SETTINGS_ARM_FW_VERSION , SETTINGS_ARM_FW_VERSION_ENG_BUILD )) return 0;
  4012c6:	2000      	movs	r0, #0
  4012c8:	bd10      	pop	{r4, pc}
	if (EOF ==  f_printf( &file_object, "DSP FW version = %d.%d\n", DSP_fw[0] , DSP_fw[1] )) return 0;
  4012ca:	2000      	movs	r0, #0
  4012cc:	bd10      	pop	{r4, pc}
	if (EOF ==  f_puts( "Location name = none\n" , &file_object )) return 0;
  4012ce:	2000      	movs	r0, #0
  4012d0:	bd10      	pop	{r4, pc}
	if (EOF ==  f_puts( "Device name = none\n" , &file_object )) return 0;
  4012d2:	2000      	movs	r0, #0
  4012d4:	bd10      	pop	{r4, pc}
	if (EOF ==  f_puts( "Note_1 = none\n" , &file_object )) return 0;
  4012d6:	2000      	movs	r0, #0
  4012d8:	bd10      	pop	{r4, pc}
	if (EOF ==  f_puts( "Note_2 = none\n" , &file_object )) return 0;
  4012da:	2000      	movs	r0, #0
  4012dc:	bd10      	pop	{r4, pc}
	if (EOF ==  f_puts( "Power configuration = Wye/Star\n" , &file_object )) return 0;
  4012de:	2000      	movs	r0, #0
  4012e0:	bd10      	pop	{r4, pc}
	if (EOF ==  f_puts( "Nominal Line-to-Line Voltage = 380V\n" , &file_object )) return 0;
  4012e2:	2000      	movs	r0, #0
	
	return 1;

}
  4012e4:	bd10      	pop	{r4, pc}
  4012e6:	bf00      	nop
  4012e8:	0040d510 	.word	0x0040d510
  4012ec:	0040d520 	.word	0x0040d520
  4012f0:	20001248 	.word	0x20001248
  4012f4:	004079a5 	.word	0x004079a5
  4012f8:	0040d538 	.word	0x0040d538
  4012fc:	20000be8 	.word	0x20000be8
  401300:	0040d550 	.word	0x0040d550
  401304:	0040d568 	.word	0x0040d568
  401308:	00407975 	.word	0x00407975
  40130c:	0040d580 	.word	0x0040d580
  401310:	0040d594 	.word	0x0040d594
  401314:	0040d5a4 	.word	0x0040d5a4
  401318:	0040d5b4 	.word	0x0040d5b4
  40131c:	0040d5d4 	.word	0x0040d5d4
  401320:	0040d5fc 	.word	0x0040d5fc
  401324:	00000000 	.word	0x00000000

00401328 <sdcard_save_trends>:

/// @brief Save trends into SD-Card.
//EXAMPLE: 12:50:43,13:01:13, 156.246, 156.246, 156.246, 226.391, 226.391, 226.391,   0.012,   0.012,   0.012, 180.000, 180.000, 180.000, 310.998, 310.998, 310.998, -90.000,   0.000, -90.000,  69.982,  69.982,  69.982,  50.625,  50.625,  50.625,   0.012,   0.012,   0.012, 180.000, 180.000, 180.000,  29.992,  29.992,  29.992,-140.625,   0.000,-140.625,  24.462,  24.462,  24.462,  95.117,  95.117,  95.117,   0.012,   0.012,   0.012, 180.000, 180.000, 180.000,  99.987,  99.987,  99.987, 149.062, 149.062, 149.062,   0.012,   0.012,   0.012, -90.000,   0.000, -90.000,   0.012,   0.012,   0.012, -90.000,   0.000, -90.000,  90.002,  90.002,  90.002,-140.609,   0.000,-140.609,  89.990,  89.990,  89.990,  45.251,  45.251,  45.251,   0.012,   0.012,   0.012, 180.000, 180.000, 180.000,  49.987,  49.987,  49.987,  30.921,  30.921,  30.921,  39.978,  39.978,  39.978,  50.609,  50.609,  50.609,   0.012,   0.012,   0.012, 180.000, 180.000, 180.000,   0.012,   0.012,   0.012,-135.000,   0.000,-135.000,  80.004,  80.004,  80.004,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.024,   0.024,   0.024,  84.844,  84.844,  84.844,   0.006,   0.006,   0.006, 180.000, 180.000, 180.000, 120.001, 120.001, 120.001, -90.000,   0.000, -90.000,   0.006,   0.006,   0.006, -90.000,   0.000, -90.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,  84.844,  84.844,  84.844,   0.006,   0.006,   0.006, 180.000, 180.000, 180.000, 119.995, 119.995, 119.995, 149.062, 149.062, 149.062,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.006,   0.006,   0.006, -90.000,   0.000, -90.000,   0.006,   0.006,   0.006,-135.000,   0.000,-135.000,   0.512,   0.512,   0.512,  84.844,  84.844,  84.844,   0.006,   0.006,   0.006, 180.000, 180.000, 180.000, 119.989, 119.989, 119.989,  30.921,  30.921,  30.921,   0.006,   0.006,   0.006, 180.000, 180.000, 180.000,   0.006,   0.006,   0.006,-135.000,   0.000,-135.000,   0.006,   0.006,   0.006, -90.000,   0.000, -90.000,   1.123,   1.123,   1.123,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.024,   0.024,   0.024, 153.649, 153.649, 153.649, -90.093,   0.000, -90.093,  80.688,  80.688,  80.688, -79.593,   0.000, -79.593,  79.260,  79.260,  79.260,-100.375,   0.000,-100.375,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,  52.490,  52.490,  52.490,  51.562,  51.562,  51.562,1000.000,1000.000,1000.000,1000.000,1000.000,1000.000,1000.000,1000.000,1000.000,1000.000,1000.000,1000.000
bool sdcard_save_trends( trend_t * trend , uint8_t type) {
  401328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40132c:	b08f      	sub	sp, #60	; 0x3c
  40132e:	4606      	mov	r6, r0
  401330:	4689      	mov	r9, r1
	uint32_t year, month, day, hour, minute, second;
	float gain_voltage,gain_current,gain_power_Q14;
	int16_t complex_mod[6], complex_phase[6];
		
	// update gains
	gain_voltage = unit_config.gain_volt/SETTINGS_DSP_ADC_MAX_TICK;
  401332:	4b52      	ldr	r3, [pc, #328]	; (40147c <sdcard_save_trends+0x154>)
  401334:	f8d3 a020 	ldr.w	sl, [r3, #32]
	gain_current = unit_config.gain_curr_A/SETTINGS_DSP_ADC_MAX_TICK;
  401338:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
	gain_power_Q14 = gain_voltage*gain_current*Q14;
	
	// get date from RTC
	rtc_get_date(RTC, &year, &month, &day, 0);
  40133c:	4c50      	ldr	r4, [pc, #320]	; (401480 <sdcard_save_trends+0x158>)
  40133e:	2500      	movs	r5, #0
  401340:	9500      	str	r5, [sp, #0]
  401342:	ab0b      	add	r3, sp, #44	; 0x2c
  401344:	aa0c      	add	r2, sp, #48	; 0x30
  401346:	a90d      	add	r1, sp, #52	; 0x34
  401348:	4620      	mov	r0, r4
  40134a:	4f4e      	ldr	r7, [pc, #312]	; (401484 <sdcard_save_trends+0x15c>)
  40134c:	47b8      	blx	r7
	rtc_get_time(RTC, &hour, &minute, &second);
  40134e:	ab08      	add	r3, sp, #32
  401350:	aa09      	add	r2, sp, #36	; 0x24
  401352:	a90a      	add	r1, sp, #40	; 0x28
  401354:	4620      	mov	r0, r4
  401356:	4c4c      	ldr	r4, [pc, #304]	; (401488 <sdcard_save_trends+0x160>)
  401358:	47a0      	blx	r4
	
	// Define directory name (example "2015/Month_12/Day_01" for 1 of December of 2015) and create it.
	memset( (void *)&string , 0 , sizeof(string) );
  40135a:	4c4c      	ldr	r4, [pc, #304]	; (40148c <sdcard_save_trends+0x164>)
  40135c:	2280      	movs	r2, #128	; 0x80
  40135e:	4629      	mov	r1, r5
  401360:	4620      	mov	r0, r4
  401362:	4b4b      	ldr	r3, [pc, #300]	; (401490 <sdcard_save_trends+0x168>)
  401364:	4798      	blx	r3
	sprintf( (char *)&string ,"%4d" , (int16_t)year);
  401366:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
  40136a:	494a      	ldr	r1, [pc, #296]	; (401494 <sdcard_save_trends+0x16c>)
  40136c:	4620      	mov	r0, r4
  40136e:	4f4a      	ldr	r7, [pc, #296]	; (401498 <sdcard_save_trends+0x170>)
  401370:	47b8      	blx	r7
	f_mkdir(string);	// Create folder if it do not exist
  401372:	4620      	mov	r0, r4
  401374:	4d49      	ldr	r5, [pc, #292]	; (40149c <sdcard_save_trends+0x174>)
  401376:	47a8      	blx	r5
	sprintf( (char *)&string+4 ,"/Month_%02d" , (int16_t)month);
  401378:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
  40137c:	4948      	ldr	r1, [pc, #288]	; (4014a0 <sdcard_save_trends+0x178>)
  40137e:	1d20      	adds	r0, r4, #4
  401380:	47b8      	blx	r7
	f_mkdir(string);	// Create folder if it do not exist
  401382:	4620      	mov	r0, r4
  401384:	47a8      	blx	r5
	sprintf( (char *)&string+13 ,"/Day_%02d" , (int16_t)day);
  401386:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
  40138a:	4946      	ldr	r1, [pc, #280]	; (4014a4 <sdcard_save_trends+0x17c>)
  40138c:	f104 000d 	add.w	r0, r4, #13
  401390:	47b8      	blx	r7
	f_mkdir(string);	// Create folder if it do not exist
  401392:	4620      	mov	r0, r4
  401394:	47a8      	blx	r5
	
	// define file name (example "PM_2015_12_05_DailyTrend_3s.txt" for 5 of December of 2015). File name is added to folder name so pointer is moved 20 chars.
	if (type == 0)
  401396:	f1b9 0f00 	cmp.w	r9, #0
  40139a:	d15a      	bne.n	401452 <sdcard_save_trends+0x12a>
		sprintf( (char *)&string+20 ,"/LICPM2_%4d_%02d_%02d_DailyTrend_3s.txt" , (int16_t)year , (int16_t)month , (int16_t)day);
  40139c:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
  4013a0:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
  4013a4:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
  4013a8:	9100      	str	r1, [sp, #0]
  4013aa:	493f      	ldr	r1, [pc, #252]	; (4014a8 <sdcard_save_trends+0x180>)
  4013ac:	f104 0014 	add.w	r0, r4, #20
  4013b0:	47b8      	blx	r7
	else
		sprintf( (char *)&string+20 ,"/LICPM2_%4d_%02d_%02d_DailyTrend_5m.txt" , (int16_t)year , (int16_t)month , (int16_t)day);
		
	// get date from RTC. TODO: Por alguna razon que no entiendo sprintf sobrescribe la variable day. Repito la lectura del RTC hasta entender este problema.
	rtc_get_date(RTC, &year, &month, &day, 0);
  4013b2:	2300      	movs	r3, #0
  4013b4:	9300      	str	r3, [sp, #0]
  4013b6:	ab0b      	add	r3, sp, #44	; 0x2c
  4013b8:	aa0c      	add	r2, sp, #48	; 0x30
  4013ba:	a90d      	add	r1, sp, #52	; 0x34
  4013bc:	4830      	ldr	r0, [pc, #192]	; (401480 <sdcard_save_trends+0x158>)
  4013be:	4c31      	ldr	r4, [pc, #196]	; (401484 <sdcard_save_trends+0x15c>)
  4013c0:	47a0      	blx	r4

	// open file or create it if it do not exist.
	if (FR_OK != f_open( &file_object , (char const *)string , FA_OPEN_ALWAYS | FA_WRITE ))	return 0;
  4013c2:	2212      	movs	r2, #18
  4013c4:	4931      	ldr	r1, [pc, #196]	; (40148c <sdcard_save_trends+0x164>)
  4013c6:	4839      	ldr	r0, [pc, #228]	; (4014ac <sdcard_save_trends+0x184>)
  4013c8:	4b39      	ldr	r3, [pc, #228]	; (4014b0 <sdcard_save_trends+0x188>)
  4013ca:	4798      	blx	r3
  4013cc:	2800      	cmp	r0, #0
  4013ce:	f040 81b5 	bne.w	40173c <sdcard_save_trends+0x414>

	// if file was created, read/write pointer at begging, print Power Meter information
	if (f_tell ( &file_object ) == 0) {
  4013d2:	4b36      	ldr	r3, [pc, #216]	; (4014ac <sdcard_save_trends+0x184>)
  4013d4:	689b      	ldr	r3, [r3, #8]
  4013d6:	2b00      	cmp	r3, #0
  4013d8:	d133      	bne.n	401442 <sdcard_save_trends+0x11a>
		// device information
		if (EOF == print_device_identification()) return 0;
  4013da:	4b36      	ldr	r3, [pc, #216]	; (4014b4 <sdcard_save_trends+0x18c>)
  4013dc:	4798      	blx	r3
		// specific information
		if (EOF == f_printf( &file_object, "Daily Trend\n" )) return 0;
  4013de:	4936      	ldr	r1, [pc, #216]	; (4014b8 <sdcard_save_trends+0x190>)
  4013e0:	4832      	ldr	r0, [pc, #200]	; (4014ac <sdcard_save_trends+0x184>)
  4013e2:	4b36      	ldr	r3, [pc, #216]	; (4014bc <sdcard_save_trends+0x194>)
  4013e4:	4798      	blx	r3
  4013e6:	f1b0 3fff 	cmp.w	r0, #4294967295
  4013ea:	f000 81ab 	beq.w	401744 <sdcard_save_trends+0x41c>
		if (EOF == f_puts( "Type = " , &file_object )) return 0;
  4013ee:	492f      	ldr	r1, [pc, #188]	; (4014ac <sdcard_save_trends+0x184>)
  4013f0:	4833      	ldr	r0, [pc, #204]	; (4014c0 <sdcard_save_trends+0x198>)
  4013f2:	4b34      	ldr	r3, [pc, #208]	; (4014c4 <sdcard_save_trends+0x19c>)
  4013f4:	4798      	blx	r3
  4013f6:	f1b0 3fff 	cmp.w	r0, #4294967295
  4013fa:	f000 81a5 	beq.w	401748 <sdcard_save_trends+0x420>
		if (type == 0) 
  4013fe:	f1b9 0f00 	cmp.w	r9, #0
  401402:	d132      	bne.n	40146a <sdcard_save_trends+0x142>
			{ if (EOF == f_puts( "3 seconds" , &file_object )) return 0; }
  401404:	4929      	ldr	r1, [pc, #164]	; (4014ac <sdcard_save_trends+0x184>)
  401406:	4830      	ldr	r0, [pc, #192]	; (4014c8 <sdcard_save_trends+0x1a0>)
  401408:	4b2e      	ldr	r3, [pc, #184]	; (4014c4 <sdcard_save_trends+0x19c>)
  40140a:	4798      	blx	r3
  40140c:	f1b0 3fff 	cmp.w	r0, #4294967295
  401410:	f000 819c 	beq.w	40174c <sdcard_save_trends+0x424>
		else
			{ if (EOF == f_puts( "5 minutes" , &file_object )) return 0; }
		if (EOF == f_printf( &file_object, "\nDate = %4d/%02d/%02d\n\n", (int16_t)year , (int16_t)month , (int16_t)day )) return 0;
  401414:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
  401418:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
  40141c:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
  401420:	9100      	str	r1, [sp, #0]
  401422:	492a      	ldr	r1, [pc, #168]	; (4014cc <sdcard_save_trends+0x1a4>)
  401424:	4821      	ldr	r0, [pc, #132]	; (4014ac <sdcard_save_trends+0x184>)
  401426:	4c25      	ldr	r4, [pc, #148]	; (4014bc <sdcard_save_trends+0x194>)
  401428:	47a0      	blx	r4
  40142a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40142e:	f000 818f 	beq.w	401750 <sdcard_save_trends+0x428>
		if (EOF == f_puts( TRENDS_LABELS , &file_object )) return 0;
  401432:	491e      	ldr	r1, [pc, #120]	; (4014ac <sdcard_save_trends+0x184>)
  401434:	4826      	ldr	r0, [pc, #152]	; (4014d0 <sdcard_save_trends+0x1a8>)
  401436:	4b23      	ldr	r3, [pc, #140]	; (4014c4 <sdcard_save_trends+0x19c>)
  401438:	4798      	blx	r3
  40143a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40143e:	f000 8189 	beq.w	401754 <sdcard_save_trends+0x42c>
	}
	
	// Move to end of the file to append data (needed when a existing file is open)
	if (FR_OK != f_lseek( &file_object , f_size(&file_object)) ) return 0;
  401442:	481a      	ldr	r0, [pc, #104]	; (4014ac <sdcard_save_trends+0x184>)
  401444:	68c1      	ldr	r1, [r0, #12]
  401446:	4b23      	ldr	r3, [pc, #140]	; (4014d4 <sdcard_save_trends+0x1ac>)
  401448:	4798      	blx	r3
  40144a:	2800      	cmp	r0, #0
  40144c:	d04a      	beq.n	4014e4 <sdcard_save_trends+0x1bc>
  40144e:	2000      	movs	r0, #0
  401450:	e175      	b.n	40173e <sdcard_save_trends+0x416>
		sprintf( (char *)&string+20 ,"/LICPM2_%4d_%02d_%02d_DailyTrend_5m.txt" , (int16_t)year , (int16_t)month , (int16_t)day);
  401452:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
  401456:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
  40145a:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
  40145e:	9100      	str	r1, [sp, #0]
  401460:	491d      	ldr	r1, [pc, #116]	; (4014d8 <sdcard_save_trends+0x1b0>)
  401462:	481e      	ldr	r0, [pc, #120]	; (4014dc <sdcard_save_trends+0x1b4>)
  401464:	4c0c      	ldr	r4, [pc, #48]	; (401498 <sdcard_save_trends+0x170>)
  401466:	47a0      	blx	r4
  401468:	e7a3      	b.n	4013b2 <sdcard_save_trends+0x8a>
			{ if (EOF == f_puts( "5 minutes" , &file_object )) return 0; }
  40146a:	4910      	ldr	r1, [pc, #64]	; (4014ac <sdcard_save_trends+0x184>)
  40146c:	481c      	ldr	r0, [pc, #112]	; (4014e0 <sdcard_save_trends+0x1b8>)
  40146e:	4b15      	ldr	r3, [pc, #84]	; (4014c4 <sdcard_save_trends+0x19c>)
  401470:	4798      	blx	r3
  401472:	f1b0 3fff 	cmp.w	r0, #4294967295
  401476:	d1cd      	bne.n	401414 <sdcard_save_trends+0xec>
  401478:	2000      	movs	r0, #0
  40147a:	e160      	b.n	40173e <sdcard_save_trends+0x416>
  40147c:	20001db0 	.word	0x20001db0
  401480:	400e1460 	.word	0x400e1460
  401484:	00405005 	.word	0x00405005
  401488:	00404f17 	.word	0x00404f17
  40148c:	2000126c 	.word	0x2000126c
  401490:	00409669 	.word	0x00409669
  401494:	0040d8b4 	.word	0x0040d8b4
  401498:	00409705 	.word	0x00409705
  40149c:	0040770d 	.word	0x0040770d
  4014a0:	0040d8b8 	.word	0x0040d8b8
  4014a4:	0040d8c4 	.word	0x0040d8c4
  4014a8:	0040d8d0 	.word	0x0040d8d0
  4014ac:	20001248 	.word	0x20001248
  4014b0:	00406c79 	.word	0x00406c79
  4014b4:	00401229 	.word	0x00401229
  4014b8:	0040d920 	.word	0x0040d920
  4014bc:	004079a5 	.word	0x004079a5
  4014c0:	0040d930 	.word	0x0040d930
  4014c4:	00407975 	.word	0x00407975
  4014c8:	0040d938 	.word	0x0040d938
  4014cc:	0040d950 	.word	0x0040d950
  4014d0:	0040d968 	.word	0x0040d968
  4014d4:	0040725d 	.word	0x0040725d
  4014d8:	0040d8f8 	.word	0x0040d8f8
  4014dc:	20001280 	.word	0x20001280
  4014e0:	0040d944 	.word	0x0040d944
	
	// Print ARM RTC for debugging porpuose.
	if (EOF == f_printf( &file_object, "%02d:%02d:%02d,", (int16_t)hour , (int16_t)minute , (int16_t)second )) return 0;
  4014e4:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
  4014e8:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
  4014ec:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
  4014f0:	9100      	str	r1, [sp, #0]
  4014f2:	499f      	ldr	r1, [pc, #636]	; (401770 <sdcard_save_trends+0x448>)
  4014f4:	489f      	ldr	r0, [pc, #636]	; (401774 <sdcard_save_trends+0x44c>)
  4014f6:	4ca0      	ldr	r4, [pc, #640]	; (401778 <sdcard_save_trends+0x450>)
  4014f8:	47a0      	blx	r4
  4014fa:	f1b0 3fff 	cmp.w	r0, #4294967295
  4014fe:	f000 812b 	beq.w	401758 <sdcard_save_trends+0x430>
	
	// Print trends into sd-card
	{
		// Print time
		if (EOF == f_printf( &file_object, "%02d:%02d:%02d", trend->time.hour , trend->time.minute , trend->time.second )) return 0;
  401502:	88b3      	ldrh	r3, [r6, #4]
  401504:	88f2      	ldrh	r2, [r6, #6]
  401506:	8871      	ldrh	r1, [r6, #2]
  401508:	9100      	str	r1, [sp, #0]
  40150a:	499c      	ldr	r1, [pc, #624]	; (40177c <sdcard_save_trends+0x454>)
  40150c:	4899      	ldr	r0, [pc, #612]	; (401774 <sdcard_save_trends+0x44c>)
  40150e:	47a0      	blx	r4
  401510:	f1b0 3fff 	cmp.w	r0, #4294967295
  401514:	f000 8122 	beq.w	40175c <sdcard_save_trends+0x434>

		// Print flags
		if (EOF == f_printf( &file_object, ",%016b", trend->flags )) return 0;
  401518:	8932      	ldrh	r2, [r6, #8]
  40151a:	4999      	ldr	r1, [pc, #612]	; (401780 <sdcard_save_trends+0x458>)
  40151c:	4895      	ldr	r0, [pc, #596]	; (401774 <sdcard_save_trends+0x44c>)
  40151e:	47a0      	blx	r4
  401520:	f1b0 3fff 	cmp.w	r0, #4294967295
  401524:	f000 811c 	beq.w	401760 <sdcard_save_trends+0x438>

		// Print time utilization
		{
			float temp = trend->time_utilization * (1.0 / SETTINGS_DSP_SYSCLK_MHZ);
  401528:	f9b6 000a 	ldrsh.w	r0, [r6, #10]
  40152c:	4b95      	ldr	r3, [pc, #596]	; (401784 <sdcard_save_trends+0x45c>)
  40152e:	4798      	blx	r3
  401530:	4c95      	ldr	r4, [pc, #596]	; (401788 <sdcard_save_trends+0x460>)
  401532:	a38d      	add	r3, pc, #564	; (adr r3, 401768 <sdcard_save_trends+0x440>)
  401534:	e9d3 2300 	ldrd	r2, r3, [r3]
  401538:	47a0      	blx	r4
  40153a:	4b94      	ldr	r3, [pc, #592]	; (40178c <sdcard_save_trends+0x464>)
  40153c:	4798      	blx	r3
  40153e:	4607      	mov	r7, r0
			if (EOF == f_printf( &file_object, ",%d.%03d", (int16_t)temp , ABS((int16_t)((temp-(int32_t)temp)*1000.0)) )) return 0;
  401540:	4d93      	ldr	r5, [pc, #588]	; (401790 <sdcard_save_trends+0x468>)
  401542:	47a8      	blx	r5
  401544:	4b93      	ldr	r3, [pc, #588]	; (401794 <sdcard_save_trends+0x46c>)
  401546:	4798      	blx	r3
  401548:	4601      	mov	r1, r0
  40154a:	4638      	mov	r0, r7
  40154c:	4b92      	ldr	r3, [pc, #584]	; (401798 <sdcard_save_trends+0x470>)
  40154e:	4798      	blx	r3
  401550:	4b92      	ldr	r3, [pc, #584]	; (40179c <sdcard_save_trends+0x474>)
  401552:	4798      	blx	r3
  401554:	2200      	movs	r2, #0
  401556:	4b92      	ldr	r3, [pc, #584]	; (4017a0 <sdcard_save_trends+0x478>)
  401558:	47a0      	blx	r4
  40155a:	4b92      	ldr	r3, [pc, #584]	; (4017a4 <sdcard_save_trends+0x47c>)
  40155c:	4798      	blx	r3
  40155e:	b200      	sxth	r0, r0
  401560:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
  401564:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
  401568:	4638      	mov	r0, r7
  40156a:	47a8      	blx	r5
  40156c:	4623      	mov	r3, r4
  40156e:	b202      	sxth	r2, r0
  401570:	498d      	ldr	r1, [pc, #564]	; (4017a8 <sdcard_save_trends+0x480>)
  401572:	4880      	ldr	r0, [pc, #512]	; (401774 <sdcard_save_trends+0x44c>)
  401574:	4c80      	ldr	r4, [pc, #512]	; (401778 <sdcard_save_trends+0x450>)
  401576:	47a0      	blx	r4
  401578:	f1b0 3fff 	cmp.w	r0, #4294967295
  40157c:	f000 8126 	beq.w	4017cc <sdcard_save_trends+0x4a4>
	gain_voltage = unit_config.gain_volt/SETTINGS_DSP_ADC_MAX_TICK;
  401580:	4650      	mov	r0, sl
  401582:	4b80      	ldr	r3, [pc, #512]	; (401784 <sdcard_save_trends+0x45c>)
  401584:	4798      	blx	r3
  401586:	2200      	movs	r2, #0
  401588:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
  40158c:	4c7e      	ldr	r4, [pc, #504]	; (401788 <sdcard_save_trends+0x460>)
  40158e:	47a0      	blx	r4
  401590:	4b7e      	ldr	r3, [pc, #504]	; (40178c <sdcard_save_trends+0x464>)
  401592:	4798      	blx	r3
  401594:	4681      	mov	r9, r0
		}
		
		// Print sampling period
		if (EOF == save_data_x3( &trend->Ts[0] , (1.0/SETTINGS_DSP_SYSCLK_MHZ) )) return 0;
  401596:	4985      	ldr	r1, [pc, #532]	; (4017ac <sdcard_save_trends+0x484>)
  401598:	f106 000c 	add.w	r0, r6, #12
  40159c:	4c84      	ldr	r4, [pc, #528]	; (4017b0 <sdcard_save_trends+0x488>)
  40159e:	47a0      	blx	r4

		// Print frequency
		if (EOF == save_data_x3( &trend->fL[0] , (1.0/Q08) )) return 0;
  4015a0:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
  4015a4:	f106 0012 	add.w	r0, r6, #18
  4015a8:	47a0      	blx	r4
  4015aa:	f106 045a 	add.w	r4, r6, #90	; 0x5a
  4015ae:	f506 7bbd 	add.w	fp, r6, #378	; 0x17a
			uint16_t H_count;

			for ( CH_count=0 ; CH_count<(SETTINGS_DSP_ADC_CH_NUMBER>>1) ; CH_count++ ) {

				// RMS
				if (EOF == save_data_x3( &trend->ch[CH_count].rms[0] , gain_voltage )) return 0;
  4015b2:	4f7f      	ldr	r7, [pc, #508]	; (4017b0 <sdcard_save_trends+0x488>)
					if (EOF == save_data_x3( &complex_phase[0] , (1.0/64.0) )) return 0;

				}

				// Total Waveform Distortion (TWD)
				if (EOF == save_data_x3( &trend->ch[CH_count].twd[0] , (100.0/4096.0) )) return 0;
  4015b4:	46b2      	mov	sl, r6
				if (EOF == save_data_x3( &trend->ch[CH_count].rms[0] , gain_voltage )) return 0;
  4015b6:	4649      	mov	r1, r9
  4015b8:	f1a4 0042 	sub.w	r0, r4, #66	; 0x42
  4015bc:	47b8      	blx	r7
  4015be:	f1a4 053c 	sub.w	r5, r4, #60	; 0x3c
					compute_mod_and_phase(&trend->ch[CH_count].harmonic[H_count] , &complex_mod[0] , &complex_phase[0] );
  4015c2:	4e7c      	ldr	r6, [pc, #496]	; (4017b4 <sdcard_save_trends+0x48c>)
  4015c4:	aa02      	add	r2, sp, #8
  4015c6:	a905      	add	r1, sp, #20
  4015c8:	4628      	mov	r0, r5
  4015ca:	47b0      	blx	r6
					if (EOF == save_data_x3( &complex_mod[0] , gain_voltage)) return 0;
  4015cc:	4649      	mov	r1, r9
  4015ce:	a805      	add	r0, sp, #20
  4015d0:	47b8      	blx	r7
					if (EOF == save_data_x3( &complex_phase[0] , (1.0/64.0) )) return 0;
  4015d2:	f04f 5172 	mov.w	r1, #1015021568	; 0x3c800000
  4015d6:	a802      	add	r0, sp, #8
  4015d8:	47b8      	blx	r7
  4015da:	350c      	adds	r5, #12
				for ( H_count=0 ; H_count<(SETTINGS_DSP_NDFT_MAX+1) ; H_count++ ) {
  4015dc:	42a5      	cmp	r5, r4
  4015de:	d1f1      	bne.n	4015c4 <sdcard_save_trends+0x29c>
				if (EOF == save_data_x3( &trend->ch[CH_count].twd[0] , (100.0/4096.0) )) return 0;
  4015e0:	4975      	ldr	r1, [pc, #468]	; (4017b8 <sdcard_save_trends+0x490>)
  4015e2:	4620      	mov	r0, r4
  4015e4:	47b8      	blx	r7
  4015e6:	3448      	adds	r4, #72	; 0x48
			for ( CH_count=0 ; CH_count<(SETTINGS_DSP_ADC_CH_NUMBER>>1) ; CH_count++ ) {
  4015e8:	455c      	cmp	r4, fp
  4015ea:	d1e4      	bne.n	4015b6 <sdcard_save_trends+0x28e>
	gain_current = unit_config.gain_curr_A/SETTINGS_DSP_ADC_MAX_TICK;
  4015ec:	4640      	mov	r0, r8
  4015ee:	4b65      	ldr	r3, [pc, #404]	; (401784 <sdcard_save_trends+0x45c>)
  4015f0:	4798      	blx	r3
  4015f2:	2200      	movs	r2, #0
  4015f4:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
  4015f8:	4d63      	ldr	r5, [pc, #396]	; (401788 <sdcard_save_trends+0x460>)
  4015fa:	47a8      	blx	r5
  4015fc:	4b63      	ldr	r3, [pc, #396]	; (40178c <sdcard_save_trends+0x464>)
  4015fe:	4798      	blx	r3
  401600:	4680      	mov	r8, r0
  401602:	f20a 2b9a 	addw	fp, sl, #666	; 0x29a
			}

			for ( CH_count=(SETTINGS_DSP_ADC_CH_NUMBER>>1) ; CH_count<SETTINGS_DSP_ADC_CH_NUMBER ; CH_count++ ) {

				// RMS
				if (EOF == save_data_x3( &trend->ch[CH_count].rms[0] , gain_current )) return 0;
  401606:	4f6a      	ldr	r7, [pc, #424]	; (4017b0 <sdcard_save_trends+0x488>)
  401608:	4641      	mov	r1, r8
  40160a:	f1a4 0042 	sub.w	r0, r4, #66	; 0x42
  40160e:	47b8      	blx	r7
  401610:	f1a4 053c 	sub.w	r5, r4, #60	; 0x3c

				// Harmonics
				for ( H_count=0 ; H_count<(SETTINGS_DSP_NDFT_MAX+1) ; H_count++ ) {
				
					compute_mod_and_phase(&trend->ch[CH_count].harmonic[H_count] , &complex_mod[0] , &complex_phase[0] );
  401614:	4e67      	ldr	r6, [pc, #412]	; (4017b4 <sdcard_save_trends+0x48c>)
  401616:	aa02      	add	r2, sp, #8
  401618:	a905      	add	r1, sp, #20
  40161a:	4628      	mov	r0, r5
  40161c:	47b0      	blx	r6
					if (EOF == save_data_x3( &complex_mod[0] , gain_current)) return 0;
  40161e:	4641      	mov	r1, r8
  401620:	a805      	add	r0, sp, #20
  401622:	47b8      	blx	r7
					if (EOF == save_data_x3( &complex_phase[0] , (1.0/64.0) )) return 0;
  401624:	f04f 5172 	mov.w	r1, #1015021568	; 0x3c800000
  401628:	a802      	add	r0, sp, #8
  40162a:	47b8      	blx	r7
  40162c:	350c      	adds	r5, #12
				for ( H_count=0 ; H_count<(SETTINGS_DSP_NDFT_MAX+1) ; H_count++ ) {
  40162e:	42a5      	cmp	r5, r4
  401630:	d1f1      	bne.n	401616 <sdcard_save_trends+0x2ee>

				}

				// Total Waveform Distortion (TWD)
				if (EOF == save_data_x3( &trend->ch[CH_count].twd[0] , (100.0/4096.0) )) return 0;
  401632:	4961      	ldr	r1, [pc, #388]	; (4017b8 <sdcard_save_trends+0x490>)
  401634:	4620      	mov	r0, r4
  401636:	47b8      	blx	r7
  401638:	3448      	adds	r4, #72	; 0x48
			for ( CH_count=(SETTINGS_DSP_ADC_CH_NUMBER>>1) ; CH_count<SETTINGS_DSP_ADC_CH_NUMBER ; CH_count++ ) {
  40163a:	455c      	cmp	r4, fp
  40163c:	d1e4      	bne.n	401608 <sdcard_save_trends+0x2e0>
  40163e:	4656      	mov	r6, sl
	gain_power_Q14 = gain_voltage*gain_current*Q14;
  401640:	4c5e      	ldr	r4, [pc, #376]	; (4017bc <sdcard_save_trends+0x494>)
  401642:	4641      	mov	r1, r8
  401644:	4648      	mov	r0, r9
  401646:	47a0      	blx	r4
  401648:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
  40164c:	47a0      	blx	r4
  40164e:	4607      	mov	r7, r0

		}

		// Print voltage 
		// positive sequence
		compute_mod_and_phase(&trend->v_seq.pos , &complex_mod[0] , &complex_phase[0] );
  401650:	aa02      	add	r2, sp, #8
  401652:	a905      	add	r1, sp, #20
  401654:	f50a 705e 	add.w	r0, sl, #888	; 0x378
  401658:	f8df a158 	ldr.w	sl, [pc, #344]	; 4017b4 <sdcard_save_trends+0x48c>
  40165c:	47d0      	blx	sl
		if (EOF == save_data_x3( &complex_mod[0] , gain_voltage)) return 0;
  40165e:	4649      	mov	r1, r9
  401660:	a805      	add	r0, sp, #20
  401662:	4c53      	ldr	r4, [pc, #332]	; (4017b0 <sdcard_save_trends+0x488>)
  401664:	47a0      	blx	r4
		if (EOF == save_data_x3( &complex_phase[0] , (1.0/64.0) )) return 0;
  401666:	f04f 5572 	mov.w	r5, #1015021568	; 0x3c800000
  40166a:	4629      	mov	r1, r5
  40166c:	a802      	add	r0, sp, #8
  40166e:	47a0      	blx	r4
		// negative sequence
		compute_mod_and_phase(&trend->v_seq.neg , &complex_mod[0] , &complex_phase[0] );
  401670:	aa02      	add	r2, sp, #8
  401672:	a905      	add	r1, sp, #20
  401674:	f506 7061 	add.w	r0, r6, #900	; 0x384
  401678:	47d0      	blx	sl
		if (EOF == save_data_x3( &complex_mod[0] , gain_voltage)) return 0;
  40167a:	4649      	mov	r1, r9
  40167c:	a805      	add	r0, sp, #20
  40167e:	47a0      	blx	r4
		if (EOF == save_data_x3( &complex_phase[0] , (1.0/64.0) )) return 0;
  401680:	4629      	mov	r1, r5
  401682:	a802      	add	r0, sp, #8
  401684:	47a0      	blx	r4
		// homopolar sequence
		compute_mod_and_phase(&trend->v_seq.hom , &complex_mod[0] , &complex_phase[0] );
  401686:	aa02      	add	r2, sp, #8
  401688:	a905      	add	r1, sp, #20
  40168a:	f506 7064 	add.w	r0, r6, #912	; 0x390
  40168e:	47d0      	blx	sl
		if (EOF == save_data_x3( &complex_mod[0] , gain_voltage)) return 0;
  401690:	4649      	mov	r1, r9
  401692:	a805      	add	r0, sp, #20
  401694:	47a0      	blx	r4
		if (EOF == save_data_x3( &complex_phase[0] , (1.0/64.0) )) return 0;
  401696:	4629      	mov	r1, r5
  401698:	a802      	add	r0, sp, #8
  40169a:	47a0      	blx	r4

		// Print current A
		// positive sequence
		compute_mod_and_phase(&trend->iA_seq.pos , &complex_mod[0] , &complex_phase[0] );
  40169c:	aa02      	add	r2, sp, #8
  40169e:	a905      	add	r1, sp, #20
  4016a0:	f506 7067 	add.w	r0, r6, #924	; 0x39c
  4016a4:	47d0      	blx	sl
		if (EOF == save_data_x3( &complex_mod[0] , gain_current)) return 0;
  4016a6:	4641      	mov	r1, r8
  4016a8:	a805      	add	r0, sp, #20
  4016aa:	47a0      	blx	r4
		if (EOF == save_data_x3( &complex_phase[0] , (1.0/64.0) )) return 0;		
  4016ac:	4629      	mov	r1, r5
  4016ae:	a802      	add	r0, sp, #8
  4016b0:	47a0      	blx	r4
		// negative sequence
		compute_mod_and_phase(&trend->iA_seq.neg , &complex_mod[0] , &complex_phase[0] );
  4016b2:	aa02      	add	r2, sp, #8
  4016b4:	a905      	add	r1, sp, #20
  4016b6:	f506 706a 	add.w	r0, r6, #936	; 0x3a8
  4016ba:	47d0      	blx	sl
		if (EOF == save_data_x3( &complex_mod[0] , gain_current)) return 0;
  4016bc:	4641      	mov	r1, r8
  4016be:	a805      	add	r0, sp, #20
  4016c0:	47a0      	blx	r4
		if (EOF == save_data_x3( &complex_phase[0] , (1.0/64.0) )) return 0;
  4016c2:	4629      	mov	r1, r5
  4016c4:	a802      	add	r0, sp, #8
  4016c6:	47a0      	blx	r4
		// homopolar sequence
		compute_mod_and_phase(&trend->iA_seq.hom , &complex_mod[0] , &complex_phase[0] );
  4016c8:	aa02      	add	r2, sp, #8
  4016ca:	a905      	add	r1, sp, #20
  4016cc:	f506 706d 	add.w	r0, r6, #948	; 0x3b4
  4016d0:	47d0      	blx	sl
		if (EOF == save_data_x3( &complex_mod[0] , gain_current)) return 0;
  4016d2:	4641      	mov	r1, r8
  4016d4:	a805      	add	r0, sp, #20
  4016d6:	47a0      	blx	r4
		if (EOF == save_data_x3( &complex_phase[0] , (1.0/64.0) )) return 0;
  4016d8:	4629      	mov	r1, r5
  4016da:	a802      	add	r0, sp, #8
  4016dc:	47a0      	blx	r4

		// Print desbalance
		if (EOF == save_data_x3( &trend->v_desb_neg[0] , (100.0/4096.0) )) return 0;
  4016de:	4d36      	ldr	r5, [pc, #216]	; (4017b8 <sdcard_save_trends+0x490>)
  4016e0:	4629      	mov	r1, r5
  4016e2:	f506 7079 	add.w	r0, r6, #996	; 0x3e4
  4016e6:	47a0      	blx	r4
		if (EOF == save_data_x3( &trend->v_desb_hom[0] , (100.0/4096.0) )) return 0;
  4016e8:	4629      	mov	r1, r5
  4016ea:	f206 30ea 	addw	r0, r6, #1002	; 0x3ea
  4016ee:	47a0      	blx	r4
  4016f0:	f506 6481 	add.w	r4, r6, #1032	; 0x408
  4016f4:	f506 668a 	add.w	r6, r6, #1104	; 0x450
		{
			uint16_t CH_count;

			for ( CH_count=0 ; CH_count<3 ; CH_count++ ) {

				if (EOF == save_data_x3( &trend->ch_power[CH_count].ApparentPower[0] , gain_power_Q14 )) return 0;
  4016f8:	4d2d      	ldr	r5, [pc, #180]	; (4017b0 <sdcard_save_trends+0x488>)
				if (EOF == save_data_x3( &trend->ch_power[CH_count].ActivePower[0]   , gain_power_Q14 )) return 0;
				if (EOF == save_data_x3( &trend->ch_power[CH_count].NoactivePower[0] , gain_power_Q14 )) return 0;
				if (EOF == save_data_x3( &trend->ch_power[CH_count].PowerFactor[0]   , (100.0/4096.0) )) return 0;
  4016fa:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 4017b8 <sdcard_save_trends+0x490>
				if (EOF == save_data_x3( &trend->ch_power[CH_count].ApparentPower[0] , gain_power_Q14 )) return 0;
  4016fe:	4639      	mov	r1, r7
  401700:	4620      	mov	r0, r4
  401702:	47a8      	blx	r5
				if (EOF == save_data_x3( &trend->ch_power[CH_count].ActivePower[0]   , gain_power_Q14 )) return 0;
  401704:	4639      	mov	r1, r7
  401706:	1da0      	adds	r0, r4, #6
  401708:	47a8      	blx	r5
				if (EOF == save_data_x3( &trend->ch_power[CH_count].NoactivePower[0] , gain_power_Q14 )) return 0;
  40170a:	4639      	mov	r1, r7
  40170c:	f104 000c 	add.w	r0, r4, #12
  401710:	47a8      	blx	r5
				if (EOF == save_data_x3( &trend->ch_power[CH_count].PowerFactor[0]   , (100.0/4096.0) )) return 0;
  401712:	4641      	mov	r1, r8
  401714:	f104 0012 	add.w	r0, r4, #18
  401718:	47a8      	blx	r5
  40171a:	3418      	adds	r4, #24
			for ( CH_count=0 ; CH_count<3 ; CH_count++ ) {
  40171c:	42b4      	cmp	r4, r6
  40171e:	d1ee      	bne.n	4016fe <sdcard_save_trends+0x3d6>
		}
	
	}

	// Print new line
	if (EOF == f_puts( "\n" , &file_object )) return 0;
  401720:	4914      	ldr	r1, [pc, #80]	; (401774 <sdcard_save_trends+0x44c>)
  401722:	4827      	ldr	r0, [pc, #156]	; (4017c0 <sdcard_save_trends+0x498>)
  401724:	4b27      	ldr	r3, [pc, #156]	; (4017c4 <sdcard_save_trends+0x49c>)
  401726:	4798      	blx	r3
  401728:	f1b0 3fff 	cmp.w	r0, #4294967295
  40172c:	d050      	beq.n	4017d0 <sdcard_save_trends+0x4a8>
			
	// Close file
	if (FR_OK != f_close( &file_object )) return 0;
  40172e:	4811      	ldr	r0, [pc, #68]	; (401774 <sdcard_save_trends+0x44c>)
  401730:	4b25      	ldr	r3, [pc, #148]	; (4017c8 <sdcard_save_trends+0x4a0>)
  401732:	4798      	blx	r3
  401734:	fab0 f080 	clz	r0, r0
  401738:	0940      	lsrs	r0, r0, #5
  40173a:	e000      	b.n	40173e <sdcard_save_trends+0x416>
	if (FR_OK != f_open( &file_object , (char const *)string , FA_OPEN_ALWAYS | FA_WRITE ))	return 0;
  40173c:	2000      	movs	r0, #0

	return 1;
	
}
  40173e:	b00f      	add	sp, #60	; 0x3c
  401740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (EOF == f_printf( &file_object, "Daily Trend\n" )) return 0;
  401744:	2000      	movs	r0, #0
  401746:	e7fa      	b.n	40173e <sdcard_save_trends+0x416>
		if (EOF == f_puts( "Type = " , &file_object )) return 0;
  401748:	2000      	movs	r0, #0
  40174a:	e7f8      	b.n	40173e <sdcard_save_trends+0x416>
			{ if (EOF == f_puts( "3 seconds" , &file_object )) return 0; }
  40174c:	2000      	movs	r0, #0
  40174e:	e7f6      	b.n	40173e <sdcard_save_trends+0x416>
		if (EOF == f_printf( &file_object, "\nDate = %4d/%02d/%02d\n\n", (int16_t)year , (int16_t)month , (int16_t)day )) return 0;
  401750:	2000      	movs	r0, #0
  401752:	e7f4      	b.n	40173e <sdcard_save_trends+0x416>
		if (EOF == f_puts( TRENDS_LABELS , &file_object )) return 0;
  401754:	2000      	movs	r0, #0
  401756:	e7f2      	b.n	40173e <sdcard_save_trends+0x416>
	if (EOF == f_printf( &file_object, "%02d:%02d:%02d,", (int16_t)hour , (int16_t)minute , (int16_t)second )) return 0;
  401758:	2000      	movs	r0, #0
  40175a:	e7f0      	b.n	40173e <sdcard_save_trends+0x416>
		if (EOF == f_printf( &file_object, "%02d:%02d:%02d", trend->time.hour , trend->time.minute , trend->time.second )) return 0;
  40175c:	2000      	movs	r0, #0
  40175e:	e7ee      	b.n	40173e <sdcard_save_trends+0x416>
		if (EOF == f_printf( &file_object, ",%016b", trend->flags )) return 0;
  401760:	2000      	movs	r0, #0
  401762:	e7ec      	b.n	40173e <sdcard_save_trends+0x416>
  401764:	f3af 8000 	nop.w
  401768:	b4e81b4f 	.word	0xb4e81b4f
  40176c:	3f7b4e81 	.word	0x3f7b4e81
  401770:	0040ed44 	.word	0x0040ed44
  401774:	20001248 	.word	0x20001248
  401778:	004079a5 	.word	0x004079a5
  40177c:	0040ed54 	.word	0x0040ed54
  401780:	0040ed64 	.word	0x0040ed64
  401784:	00408855 	.word	0x00408855
  401788:	00408921 	.word	0x00408921
  40178c:	00408ed1 	.word	0x00408ed1
  401790:	0040942d 	.word	0x0040942d
  401794:	004090e5 	.word	0x004090e5
  401798:	00408f79 	.word	0x00408f79
  40179c:	00408879 	.word	0x00408879
  4017a0:	408f4000 	.word	0x408f4000
  4017a4:	00408e81 	.word	0x00408e81
  4017a8:	0040d630 	.word	0x0040d630
  4017ac:	3bda740e 	.word	0x3bda740e
  4017b0:	004010fd 	.word	0x004010fd
  4017b4:	00400ff1 	.word	0x00400ff1
  4017b8:	3cc80000 	.word	0x3cc80000
  4017bc:	0040918d 	.word	0x0040918d
  4017c0:	0040d850 	.word	0x0040d850
  4017c4:	00407975 	.word	0x00407975
  4017c8:	00407245 	.word	0x00407245
			if (EOF == f_printf( &file_object, ",%d.%03d", (int16_t)temp , ABS((int16_t)((temp-(int32_t)temp)*1000.0)) )) return 0;
  4017cc:	2000      	movs	r0, #0
  4017ce:	e7b6      	b.n	40173e <sdcard_save_trends+0x416>
	if (EOF == f_puts( "\n" , &file_object )) return 0;
  4017d0:	2000      	movs	r0, #0
  4017d2:	e7b4      	b.n	40173e <sdcard_save_trends+0x416>
  4017d4:	0000      	movs	r0, r0
	...

004017d8 <sdcard_save_event_det_info>:

bool sdcard_save_event_det_info( event_det_t * event_det ) {
  4017d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4017dc:	b089      	sub	sp, #36	; 0x24
  4017de:	4606      	mov	r6, r0

	uint32_t year, month, day;
	float gain_voltage,gain_current;
	
	// update gains
	gain_voltage = unit_config.gain_volt/SETTINGS_DSP_ADC_MAX_TICK;
  4017e0:	4ba7      	ldr	r3, [pc, #668]	; (401a80 <sdcard_save_event_det_info+0x2a8>)
  4017e2:	f8d3 b020 	ldr.w	fp, [r3, #32]
	gain_current = unit_config.gain_curr_A/SETTINGS_DSP_ADC_MAX_TICK;
  4017e6:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
	
	// get date from RTC
	rtc_get_date(RTC, &year, &month, &day, 0);
  4017ea:	2700      	movs	r7, #0
  4017ec:	9700      	str	r7, [sp, #0]
  4017ee:	ab05      	add	r3, sp, #20
  4017f0:	aa06      	add	r2, sp, #24
  4017f2:	a907      	add	r1, sp, #28
  4017f4:	48a3      	ldr	r0, [pc, #652]	; (401a84 <sdcard_save_event_det_info+0x2ac>)
  4017f6:	f8df 9328 	ldr.w	r9, [pc, #808]	; 401b20 <sdcard_save_event_det_info+0x348>
  4017fa:	47c8      	blx	r9
	
	// Define directory name (example "2015/Month_12/Day_01" for 1 of December of 2015) and create it.
	memset( (void *)&string , 0 , sizeof(string) );
  4017fc:	4ca2      	ldr	r4, [pc, #648]	; (401a88 <sdcard_save_event_det_info+0x2b0>)
  4017fe:	2280      	movs	r2, #128	; 0x80
  401800:	4639      	mov	r1, r7
  401802:	4620      	mov	r0, r4
  401804:	4ba1      	ldr	r3, [pc, #644]	; (401a8c <sdcard_save_event_det_info+0x2b4>)
  401806:	4798      	blx	r3
	sprintf( (char *)&string ,"%4d" , (int16_t)year);
  401808:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
  40180c:	49a0      	ldr	r1, [pc, #640]	; (401a90 <sdcard_save_event_det_info+0x2b8>)
  40180e:	4620      	mov	r0, r4
  401810:	4da0      	ldr	r5, [pc, #640]	; (401a94 <sdcard_save_event_det_info+0x2bc>)
  401812:	47a8      	blx	r5
	f_mkdir(string);	// Create folder if it do not exist
  401814:	4620      	mov	r0, r4
  401816:	f8df 830c 	ldr.w	r8, [pc, #780]	; 401b24 <sdcard_save_event_det_info+0x34c>
  40181a:	47c0      	blx	r8
	sprintf( (char *)&string+4 ,"/Month_%02d" , (int16_t)month);
  40181c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
  401820:	499d      	ldr	r1, [pc, #628]	; (401a98 <sdcard_save_event_det_info+0x2c0>)
  401822:	1d20      	adds	r0, r4, #4
  401824:	47a8      	blx	r5
	f_mkdir(string);	// Create folder if it do not exist
  401826:	4620      	mov	r0, r4
  401828:	47c0      	blx	r8
	sprintf( (char *)&string+13 ,"/Day_%02d" , (int16_t)day);
  40182a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
  40182e:	499b      	ldr	r1, [pc, #620]	; (401a9c <sdcard_save_event_det_info+0x2c4>)
  401830:	f104 000d 	add.w	r0, r4, #13
  401834:	47a8      	blx	r5
	f_mkdir(string);	// Create folder if it do not exist
  401836:	4620      	mov	r0, r4
  401838:	47c0      	blx	r8
	
	// define file name (example "PM_2015_12_05_Event_15_05_30.txt" for 15:05:30 of 5 of December of 2015). File name is added to folder name so pointer move 20 chars.
	sprintf( (char *)&string+20 ,"/LICPM2_%4d_%02d_%02d_Event_%02d_%02d_%02d.txt" , (int16_t)year , (int16_t)month , (int16_t)day , event_det->time.hour , event_det->time.minute , event_det->time.second );
  40183a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
  40183e:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
  401842:	8a31      	ldrh	r1, [r6, #16]
  401844:	9103      	str	r1, [sp, #12]
  401846:	8a71      	ldrh	r1, [r6, #18]
  401848:	9102      	str	r1, [sp, #8]
  40184a:	8ab1      	ldrh	r1, [r6, #20]
  40184c:	9101      	str	r1, [sp, #4]
  40184e:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
  401852:	9100      	str	r1, [sp, #0]
  401854:	4992      	ldr	r1, [pc, #584]	; (401aa0 <sdcard_save_event_det_info+0x2c8>)
  401856:	f104 0014 	add.w	r0, r4, #20
  40185a:	47a8      	blx	r5
		
	// TODO: Por alguna razon que no entiendo sprintf sobrescribe la variable day. Repito la lectura del RTC hasta entender este problema.
	// get date from RTC
	rtc_get_date(RTC, &year, &month, &day, 0);
  40185c:	9700      	str	r7, [sp, #0]
  40185e:	ab05      	add	r3, sp, #20
  401860:	aa06      	add	r2, sp, #24
  401862:	a907      	add	r1, sp, #28
  401864:	4887      	ldr	r0, [pc, #540]	; (401a84 <sdcard_save_event_det_info+0x2ac>)
  401866:	47c8      	blx	r9

	// create file
	if (FR_OK != f_open( &file_object , (char const *)&string , FA_CREATE_ALWAYS | FA_WRITE )) return 0;
  401868:	220a      	movs	r2, #10
  40186a:	4621      	mov	r1, r4
  40186c:	488d      	ldr	r0, [pc, #564]	; (401aa4 <sdcard_save_event_det_info+0x2cc>)
  40186e:	4b8e      	ldr	r3, [pc, #568]	; (401aa8 <sdcard_save_event_det_info+0x2d0>)
  401870:	4798      	blx	r3
  401872:	b118      	cbz	r0, 40187c <sdcard_save_event_det_info+0xa4>
  401874:	2000      	movs	r0, #0
	// Close file
	if (FR_OK != f_close( &file_object )) return 0;
		
	return 1;
	
}
  401876:	b009      	add	sp, #36	; 0x24
  401878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (EOF == print_device_identification()) return 0;
  40187c:	4b8b      	ldr	r3, [pc, #556]	; (401aac <sdcard_save_event_det_info+0x2d4>)
  40187e:	4798      	blx	r3
	if (EOF == f_printf( &file_object, "Event waveform\n" )) return 0;
  401880:	498b      	ldr	r1, [pc, #556]	; (401ab0 <sdcard_save_event_det_info+0x2d8>)
  401882:	4888      	ldr	r0, [pc, #544]	; (401aa4 <sdcard_save_event_det_info+0x2cc>)
  401884:	4b8b      	ldr	r3, [pc, #556]	; (401ab4 <sdcard_save_event_det_info+0x2dc>)
  401886:	4798      	blx	r3
  401888:	f1b0 3fff 	cmp.w	r0, #4294967295
  40188c:	f000 8198 	beq.w	401bc0 <sdcard_save_event_det_info+0x3e8>
	if (EOF == f_puts( "Type = " , &file_object ))return 0;
  401890:	4984      	ldr	r1, [pc, #528]	; (401aa4 <sdcard_save_event_det_info+0x2cc>)
  401892:	4889      	ldr	r0, [pc, #548]	; (401ab8 <sdcard_save_event_det_info+0x2e0>)
  401894:	4b89      	ldr	r3, [pc, #548]	; (401abc <sdcard_save_event_det_info+0x2e4>)
  401896:	4798      	blx	r3
  401898:	f1b0 3fff 	cmp.w	r0, #4294967295
  40189c:	f000 8192 	beq.w	401bc4 <sdcard_save_event_det_info+0x3ec>
	switch (event_det->type & ~EVENT_TYPE_BUFFER_USED_MASK) {
  4018a0:	8873      	ldrh	r3, [r6, #2]
  4018a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4018a6:	2b20      	cmp	r3, #32
  4018a8:	f000 8152 	beq.w	401b50 <sdcard_save_event_det_info+0x378>
  4018ac:	d820      	bhi.n	4018f0 <sdcard_save_event_det_info+0x118>
  4018ae:	2b04      	cmp	r3, #4
  4018b0:	f000 813a 	beq.w	401b28 <sdcard_save_event_det_info+0x350>
  4018b4:	d80d      	bhi.n	4018d2 <sdcard_save_event_det_info+0xfa>
  4018b6:	2b01      	cmp	r3, #1
  4018b8:	d03f      	beq.n	40193a <sdcard_save_event_det_info+0x162>
  4018ba:	2b02      	cmp	r3, #2
  4018bc:	f040 8170 	bne.w	401ba0 <sdcard_save_event_det_info+0x3c8>
		case EVENT_TYPE_RMS_OV_V2_MASK:		if (EOF == f_puts( "V2 Over voltage"  , &file_object )) return 0; break;
  4018c0:	4978      	ldr	r1, [pc, #480]	; (401aa4 <sdcard_save_event_det_info+0x2cc>)
  4018c2:	487f      	ldr	r0, [pc, #508]	; (401ac0 <sdcard_save_event_det_info+0x2e8>)
  4018c4:	4b7d      	ldr	r3, [pc, #500]	; (401abc <sdcard_save_event_det_info+0x2e4>)
  4018c6:	4798      	blx	r3
  4018c8:	f1b0 3fff 	cmp.w	r0, #4294967295
  4018cc:	d13d      	bne.n	40194a <sdcard_save_event_det_info+0x172>
  4018ce:	2000      	movs	r0, #0
  4018d0:	e7d1      	b.n	401876 <sdcard_save_event_det_info+0x9e>
	switch (event_det->type & ~EVENT_TYPE_BUFFER_USED_MASK) {
  4018d2:	2b08      	cmp	r3, #8
  4018d4:	f000 8132 	beq.w	401b3c <sdcard_save_event_det_info+0x364>
  4018d8:	2b10      	cmp	r3, #16
  4018da:	f040 8161 	bne.w	401ba0 <sdcard_save_event_det_info+0x3c8>
		case EVENT_TYPE_RMS_UV_V2_MASK:		if (EOF == f_puts( "V2 Under voltage" , &file_object )) return 0; break;
  4018de:	4971      	ldr	r1, [pc, #452]	; (401aa4 <sdcard_save_event_det_info+0x2cc>)
  4018e0:	4878      	ldr	r0, [pc, #480]	; (401ac4 <sdcard_save_event_det_info+0x2ec>)
  4018e2:	4b76      	ldr	r3, [pc, #472]	; (401abc <sdcard_save_event_det_info+0x2e4>)
  4018e4:	4798      	blx	r3
  4018e6:	f1b0 3fff 	cmp.w	r0, #4294967295
  4018ea:	d12e      	bne.n	40194a <sdcard_save_event_det_info+0x172>
  4018ec:	2000      	movs	r0, #0
  4018ee:	e7c2      	b.n	401876 <sdcard_save_event_det_info+0x9e>
	switch (event_det->type & ~EVENT_TYPE_BUFFER_USED_MASK) {
  4018f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4018f4:	f000 8140 	beq.w	401b78 <sdcard_save_event_det_info+0x3a0>
  4018f8:	d80e      	bhi.n	401918 <sdcard_save_event_det_info+0x140>
  4018fa:	2b40      	cmp	r3, #64	; 0x40
  4018fc:	f000 8132 	beq.w	401b64 <sdcard_save_event_det_info+0x38c>
  401900:	2b80      	cmp	r3, #128	; 0x80
  401902:	f040 814d 	bne.w	401ba0 <sdcard_save_event_det_info+0x3c8>
		case EVENT_TYPE_RMS_OC_I2_MASK:		if (EOF == f_puts( "I2 Over current"  , &file_object )) return 0; break;
  401906:	4967      	ldr	r1, [pc, #412]	; (401aa4 <sdcard_save_event_det_info+0x2cc>)
  401908:	486f      	ldr	r0, [pc, #444]	; (401ac8 <sdcard_save_event_det_info+0x2f0>)
  40190a:	4b6c      	ldr	r3, [pc, #432]	; (401abc <sdcard_save_event_det_info+0x2e4>)
  40190c:	4798      	blx	r3
  40190e:	f1b0 3fff 	cmp.w	r0, #4294967295
  401912:	d11a      	bne.n	40194a <sdcard_save_event_det_info+0x172>
  401914:	2000      	movs	r0, #0
  401916:	e7ae      	b.n	401876 <sdcard_save_event_det_info+0x9e>
	switch (event_det->type & ~EVENT_TYPE_BUFFER_USED_MASK) {
  401918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40191c:	f000 8136 	beq.w	401b8c <sdcard_save_event_det_info+0x3b4>
  401920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  401924:	f040 813c 	bne.w	401ba0 <sdcard_save_event_det_info+0x3c8>
		case EVENT_TYPE_FREQ_OF_MASK:		if (EOF == f_puts( "Over frequency"   , &file_object )) return 0; break;
  401928:	495e      	ldr	r1, [pc, #376]	; (401aa4 <sdcard_save_event_det_info+0x2cc>)
  40192a:	4868      	ldr	r0, [pc, #416]	; (401acc <sdcard_save_event_det_info+0x2f4>)
  40192c:	4b63      	ldr	r3, [pc, #396]	; (401abc <sdcard_save_event_det_info+0x2e4>)
  40192e:	4798      	blx	r3
  401930:	f1b0 3fff 	cmp.w	r0, #4294967295
  401934:	d109      	bne.n	40194a <sdcard_save_event_det_info+0x172>
  401936:	2000      	movs	r0, #0
  401938:	e79d      	b.n	401876 <sdcard_save_event_det_info+0x9e>
		case EVENT_TYPE_RMS_OV_V1_MASK:		if (EOF == f_puts( "V1 Over voltage"  , &file_object )) return 0; break;
  40193a:	495a      	ldr	r1, [pc, #360]	; (401aa4 <sdcard_save_event_det_info+0x2cc>)
  40193c:	4864      	ldr	r0, [pc, #400]	; (401ad0 <sdcard_save_event_det_info+0x2f8>)
  40193e:	4b5f      	ldr	r3, [pc, #380]	; (401abc <sdcard_save_event_det_info+0x2e4>)
  401940:	4798      	blx	r3
  401942:	f1b0 3fff 	cmp.w	r0, #4294967295
  401946:	f000 813f 	beq.w	401bc8 <sdcard_save_event_det_info+0x3f0>
		float temp = event_det->duration_dsp_ticks * (1.0 / SETTINGS_DSP_SYSCLK_HZ);
  40194a:	6870      	ldr	r0, [r6, #4]
  40194c:	4b61      	ldr	r3, [pc, #388]	; (401ad4 <sdcard_save_event_det_info+0x2fc>)
  40194e:	4798      	blx	r3
  401950:	4c61      	ldr	r4, [pc, #388]	; (401ad8 <sdcard_save_event_det_info+0x300>)
  401952:	a349      	add	r3, pc, #292	; (adr r3, 401a78 <sdcard_save_event_det_info+0x2a0>)
  401954:	e9d3 2300 	ldrd	r2, r3, [r3]
  401958:	47a0      	blx	r4
  40195a:	4b60      	ldr	r3, [pc, #384]	; (401adc <sdcard_save_event_det_info+0x304>)
  40195c:	4798      	blx	r3
  40195e:	4607      	mov	r7, r0
		if (EOF == f_printf( &file_object, "\nDuration = %d.%03d sec", (int16_t)temp , ABS((int16_t)((temp-(int32_t)temp)*1000.0)) ))return 0;
  401960:	4d5f      	ldr	r5, [pc, #380]	; (401ae0 <sdcard_save_event_det_info+0x308>)
  401962:	47a8      	blx	r5
  401964:	4b5f      	ldr	r3, [pc, #380]	; (401ae4 <sdcard_save_event_det_info+0x30c>)
  401966:	4798      	blx	r3
  401968:	4601      	mov	r1, r0
  40196a:	4638      	mov	r0, r7
  40196c:	4b5e      	ldr	r3, [pc, #376]	; (401ae8 <sdcard_save_event_det_info+0x310>)
  40196e:	4798      	blx	r3
  401970:	4b5e      	ldr	r3, [pc, #376]	; (401aec <sdcard_save_event_det_info+0x314>)
  401972:	4798      	blx	r3
  401974:	2200      	movs	r2, #0
  401976:	4b5e      	ldr	r3, [pc, #376]	; (401af0 <sdcard_save_event_det_info+0x318>)
  401978:	47a0      	blx	r4
  40197a:	4b5e      	ldr	r3, [pc, #376]	; (401af4 <sdcard_save_event_det_info+0x31c>)
  40197c:	4798      	blx	r3
  40197e:	b200      	sxth	r0, r0
  401980:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
  401984:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
  401988:	4638      	mov	r0, r7
  40198a:	47a8      	blx	r5
  40198c:	4623      	mov	r3, r4
  40198e:	b202      	sxth	r2, r0
  401990:	4959      	ldr	r1, [pc, #356]	; (401af8 <sdcard_save_event_det_info+0x320>)
  401992:	4844      	ldr	r0, [pc, #272]	; (401aa4 <sdcard_save_event_det_info+0x2cc>)
  401994:	4c47      	ldr	r4, [pc, #284]	; (401ab4 <sdcard_save_event_det_info+0x2dc>)
  401996:	47a0      	blx	r4
  401998:	f1b0 3fff 	cmp.w	r0, #4294967295
  40199c:	f000 8116 	beq.w	401bcc <sdcard_save_event_det_info+0x3f4>
	if (EOF == f_puts( "\nVoltage Max = " , &file_object )) return 0;
  4019a0:	4940      	ldr	r1, [pc, #256]	; (401aa4 <sdcard_save_event_det_info+0x2cc>)
  4019a2:	4856      	ldr	r0, [pc, #344]	; (401afc <sdcard_save_event_det_info+0x324>)
  4019a4:	4b45      	ldr	r3, [pc, #276]	; (401abc <sdcard_save_event_det_info+0x2e4>)
  4019a6:	4798      	blx	r3
  4019a8:	f1b0 3fff 	cmp.w	r0, #4294967295
  4019ac:	f000 8110 	beq.w	401bd0 <sdcard_save_event_det_info+0x3f8>
	gain_voltage = unit_config.gain_volt/SETTINGS_DSP_ADC_MAX_TICK;
  4019b0:	4658      	mov	r0, fp
  4019b2:	4b53      	ldr	r3, [pc, #332]	; (401b00 <sdcard_save_event_det_info+0x328>)
  4019b4:	4798      	blx	r3
  4019b6:	2200      	movs	r2, #0
  4019b8:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
  4019bc:	4c46      	ldr	r4, [pc, #280]	; (401ad8 <sdcard_save_event_det_info+0x300>)
  4019be:	47a0      	blx	r4
  4019c0:	4b46      	ldr	r3, [pc, #280]	; (401adc <sdcard_save_event_det_info+0x304>)
  4019c2:	4798      	blx	r3
  4019c4:	4604      	mov	r4, r0
	if (EOF == save_data_x1( &event_det->v_max , gain_voltage )) return 0;
  4019c6:	4601      	mov	r1, r0
  4019c8:	f106 0008 	add.w	r0, r6, #8
  4019cc:	4b4d      	ldr	r3, [pc, #308]	; (401b04 <sdcard_save_event_det_info+0x32c>)
  4019ce:	4798      	blx	r3
	if (EOF == f_puts( " V\nVoltage Min = " , &file_object )) return 0;
  4019d0:	4934      	ldr	r1, [pc, #208]	; (401aa4 <sdcard_save_event_det_info+0x2cc>)
  4019d2:	484d      	ldr	r0, [pc, #308]	; (401b08 <sdcard_save_event_det_info+0x330>)
  4019d4:	4b39      	ldr	r3, [pc, #228]	; (401abc <sdcard_save_event_det_info+0x2e4>)
  4019d6:	4798      	blx	r3
  4019d8:	f1b0 3fff 	cmp.w	r0, #4294967295
  4019dc:	f000 80fa 	beq.w	401bd4 <sdcard_save_event_det_info+0x3fc>
	if (EOF == save_data_x1( &event_det->v_min , gain_voltage )) return 0;
  4019e0:	4621      	mov	r1, r4
  4019e2:	f106 000a 	add.w	r0, r6, #10
  4019e6:	4b47      	ldr	r3, [pc, #284]	; (401b04 <sdcard_save_event_det_info+0x32c>)
  4019e8:	4798      	blx	r3
	if (EOF == f_puts( " V\nCurrent Max = " , &file_object )) return 0;
  4019ea:	492e      	ldr	r1, [pc, #184]	; (401aa4 <sdcard_save_event_det_info+0x2cc>)
  4019ec:	4847      	ldr	r0, [pc, #284]	; (401b0c <sdcard_save_event_det_info+0x334>)
  4019ee:	4b33      	ldr	r3, [pc, #204]	; (401abc <sdcard_save_event_det_info+0x2e4>)
  4019f0:	4798      	blx	r3
  4019f2:	f1b0 3fff 	cmp.w	r0, #4294967295
  4019f6:	f000 80ef 	beq.w	401bd8 <sdcard_save_event_det_info+0x400>
	gain_current = unit_config.gain_curr_A/SETTINGS_DSP_ADC_MAX_TICK;
  4019fa:	4650      	mov	r0, sl
  4019fc:	4b40      	ldr	r3, [pc, #256]	; (401b00 <sdcard_save_event_det_info+0x328>)
  4019fe:	4798      	blx	r3
  401a00:	2200      	movs	r2, #0
  401a02:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
  401a06:	4c34      	ldr	r4, [pc, #208]	; (401ad8 <sdcard_save_event_det_info+0x300>)
  401a08:	47a0      	blx	r4
  401a0a:	4b34      	ldr	r3, [pc, #208]	; (401adc <sdcard_save_event_det_info+0x304>)
  401a0c:	4798      	blx	r3
	if (EOF == save_data_x1( &event_det->i_max , gain_current )) return 0;
  401a0e:	4601      	mov	r1, r0
  401a10:	f106 000c 	add.w	r0, r6, #12
  401a14:	4b3b      	ldr	r3, [pc, #236]	; (401b04 <sdcard_save_event_det_info+0x32c>)
  401a16:	4798      	blx	r3
	if (EOF == f_puts( " A\n" , &file_object)) return 0;
  401a18:	4922      	ldr	r1, [pc, #136]	; (401aa4 <sdcard_save_event_det_info+0x2cc>)
  401a1a:	483d      	ldr	r0, [pc, #244]	; (401b10 <sdcard_save_event_det_info+0x338>)
  401a1c:	4b27      	ldr	r3, [pc, #156]	; (401abc <sdcard_save_event_det_info+0x2e4>)
  401a1e:	4798      	blx	r3
  401a20:	f1b0 3fff 	cmp.w	r0, #4294967295
  401a24:	f000 80da 	beq.w	401bdc <sdcard_save_event_det_info+0x404>
	if (EOF == f_printf( &file_object, "Trigger Date = %4d/%02d/%02d\n", (int16_t)year , (int16_t)month , (int16_t)day )) return 0;
  401a28:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
  401a2c:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
  401a30:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
  401a34:	9100      	str	r1, [sp, #0]
  401a36:	4937      	ldr	r1, [pc, #220]	; (401b14 <sdcard_save_event_det_info+0x33c>)
  401a38:	481a      	ldr	r0, [pc, #104]	; (401aa4 <sdcard_save_event_det_info+0x2cc>)
  401a3a:	4c1e      	ldr	r4, [pc, #120]	; (401ab4 <sdcard_save_event_det_info+0x2dc>)
  401a3c:	47a0      	blx	r4
  401a3e:	f1b0 3fff 	cmp.w	r0, #4294967295
  401a42:	f000 80cd 	beq.w	401be0 <sdcard_save_event_det_info+0x408>
	if (EOF == f_printf( &file_object, "Trigger Time = %02d:%02d:%02d\n", event_det->time.hour , event_det->time.minute , event_det->time.second )) return 0;
  401a46:	8a73      	ldrh	r3, [r6, #18]
  401a48:	8ab2      	ldrh	r2, [r6, #20]
  401a4a:	8a31      	ldrh	r1, [r6, #16]
  401a4c:	9100      	str	r1, [sp, #0]
  401a4e:	4932      	ldr	r1, [pc, #200]	; (401b18 <sdcard_save_event_det_info+0x340>)
  401a50:	4814      	ldr	r0, [pc, #80]	; (401aa4 <sdcard_save_event_det_info+0x2cc>)
  401a52:	47a0      	blx	r4
  401a54:	f1b0 3fff 	cmp.w	r0, #4294967295
  401a58:	f000 80c4 	beq.w	401be4 <sdcard_save_event_det_info+0x40c>
	if (event_det->type & EVENT_TYPE_BUFFER_USED_MASK) {
  401a5c:	8873      	ldrh	r3, [r6, #2]
  401a5e:	f413 6f00 	tst.w	r3, #2048	; 0x800
  401a62:	f040 80a7 	bne.w	401bb4 <sdcard_save_event_det_info+0x3dc>
	if (FR_OK != f_close( &file_object )) return 0;
  401a66:	480f      	ldr	r0, [pc, #60]	; (401aa4 <sdcard_save_event_det_info+0x2cc>)
  401a68:	4b2c      	ldr	r3, [pc, #176]	; (401b1c <sdcard_save_event_det_info+0x344>)
  401a6a:	4798      	blx	r3
  401a6c:	fab0 f080 	clz	r0, r0
  401a70:	0940      	lsrs	r0, r0, #5
  401a72:	e700      	b.n	401876 <sdcard_save_event_det_info+0x9e>
  401a74:	f3af 8000 	nop.w
  401a78:	d840baf8 	.word	0xd840baf8
  401a7c:	3e3ca213 	.word	0x3e3ca213
  401a80:	20001db0 	.word	0x20001db0
  401a84:	400e1460 	.word	0x400e1460
  401a88:	2000126c 	.word	0x2000126c
  401a8c:	00409669 	.word	0x00409669
  401a90:	0040d8b4 	.word	0x0040d8b4
  401a94:	00409705 	.word	0x00409705
  401a98:	0040d8b8 	.word	0x0040d8b8
  401a9c:	0040d8c4 	.word	0x0040d8c4
  401aa0:	0040d6dc 	.word	0x0040d6dc
  401aa4:	20001248 	.word	0x20001248
  401aa8:	00406c79 	.word	0x00406c79
  401aac:	00401229 	.word	0x00401229
  401ab0:	0040d70c 	.word	0x0040d70c
  401ab4:	004079a5 	.word	0x004079a5
  401ab8:	0040d930 	.word	0x0040d930
  401abc:	00407975 	.word	0x00407975
  401ac0:	0040d72c 	.word	0x0040d72c
  401ac4:	0040d760 	.word	0x0040d760
  401ac8:	0040d798 	.word	0x0040d798
  401acc:	0040d7c8 	.word	0x0040d7c8
  401ad0:	0040d71c 	.word	0x0040d71c
  401ad4:	00408835 	.word	0x00408835
  401ad8:	00408921 	.word	0x00408921
  401adc:	00408ed1 	.word	0x00408ed1
  401ae0:	0040942d 	.word	0x0040942d
  401ae4:	004090e5 	.word	0x004090e5
  401ae8:	00408f79 	.word	0x00408f79
  401aec:	00408879 	.word	0x00408879
  401af0:	408f4000 	.word	0x408f4000
  401af4:	00408e81 	.word	0x00408e81
  401af8:	0040d7e0 	.word	0x0040d7e0
  401afc:	0040d7f8 	.word	0x0040d7f8
  401b00:	00408855 	.word	0x00408855
  401b04:	0040107d 	.word	0x0040107d
  401b08:	0040d808 	.word	0x0040d808
  401b0c:	0040d81c 	.word	0x0040d81c
  401b10:	0040d830 	.word	0x0040d830
  401b14:	0040d834 	.word	0x0040d834
  401b18:	0040d854 	.word	0x0040d854
  401b1c:	00407245 	.word	0x00407245
  401b20:	00405005 	.word	0x00405005
  401b24:	0040770d 	.word	0x0040770d
		case EVENT_TYPE_RMS_OV_V3_MASK:		if (EOF == f_puts( "V3 Over voltage"  , &file_object )) return 0; break;
  401b28:	492f      	ldr	r1, [pc, #188]	; (401be8 <sdcard_save_event_det_info+0x410>)
  401b2a:	4830      	ldr	r0, [pc, #192]	; (401bec <sdcard_save_event_det_info+0x414>)
  401b2c:	4b30      	ldr	r3, [pc, #192]	; (401bf0 <sdcard_save_event_det_info+0x418>)
  401b2e:	4798      	blx	r3
  401b30:	f1b0 3fff 	cmp.w	r0, #4294967295
  401b34:	f47f af09 	bne.w	40194a <sdcard_save_event_det_info+0x172>
  401b38:	2000      	movs	r0, #0
  401b3a:	e69c      	b.n	401876 <sdcard_save_event_det_info+0x9e>
		case EVENT_TYPE_RMS_UV_V1_MASK:		if (EOF == f_puts( "V1 Under voltage" , &file_object )) return 0; break;
  401b3c:	492a      	ldr	r1, [pc, #168]	; (401be8 <sdcard_save_event_det_info+0x410>)
  401b3e:	482d      	ldr	r0, [pc, #180]	; (401bf4 <sdcard_save_event_det_info+0x41c>)
  401b40:	4b2b      	ldr	r3, [pc, #172]	; (401bf0 <sdcard_save_event_det_info+0x418>)
  401b42:	4798      	blx	r3
  401b44:	f1b0 3fff 	cmp.w	r0, #4294967295
  401b48:	f47f aeff 	bne.w	40194a <sdcard_save_event_det_info+0x172>
  401b4c:	2000      	movs	r0, #0
  401b4e:	e692      	b.n	401876 <sdcard_save_event_det_info+0x9e>
		case EVENT_TYPE_RMS_UV_V3_MASK:		if (EOF == f_puts( "V3 Under voltage" , &file_object )) return 0; break;
  401b50:	4925      	ldr	r1, [pc, #148]	; (401be8 <sdcard_save_event_det_info+0x410>)
  401b52:	4829      	ldr	r0, [pc, #164]	; (401bf8 <sdcard_save_event_det_info+0x420>)
  401b54:	4b26      	ldr	r3, [pc, #152]	; (401bf0 <sdcard_save_event_det_info+0x418>)
  401b56:	4798      	blx	r3
  401b58:	f1b0 3fff 	cmp.w	r0, #4294967295
  401b5c:	f47f aef5 	bne.w	40194a <sdcard_save_event_det_info+0x172>
  401b60:	2000      	movs	r0, #0
  401b62:	e688      	b.n	401876 <sdcard_save_event_det_info+0x9e>
		case EVENT_TYPE_RMS_OC_I1_MASK:		if (EOF == f_puts( "I1 Over current"  , &file_object )) return 0; break;
  401b64:	4920      	ldr	r1, [pc, #128]	; (401be8 <sdcard_save_event_det_info+0x410>)
  401b66:	4825      	ldr	r0, [pc, #148]	; (401bfc <sdcard_save_event_det_info+0x424>)
  401b68:	4b21      	ldr	r3, [pc, #132]	; (401bf0 <sdcard_save_event_det_info+0x418>)
  401b6a:	4798      	blx	r3
  401b6c:	f1b0 3fff 	cmp.w	r0, #4294967295
  401b70:	f47f aeeb 	bne.w	40194a <sdcard_save_event_det_info+0x172>
  401b74:	2000      	movs	r0, #0
  401b76:	e67e      	b.n	401876 <sdcard_save_event_det_info+0x9e>
		case EVENT_TYPE_RMS_OC_I3_MASK:		if (EOF == f_puts( "I3 Over current"  , &file_object )) return 0; break;
  401b78:	491b      	ldr	r1, [pc, #108]	; (401be8 <sdcard_save_event_det_info+0x410>)
  401b7a:	4821      	ldr	r0, [pc, #132]	; (401c00 <sdcard_save_event_det_info+0x428>)
  401b7c:	4b1c      	ldr	r3, [pc, #112]	; (401bf0 <sdcard_save_event_det_info+0x418>)
  401b7e:	4798      	blx	r3
  401b80:	f1b0 3fff 	cmp.w	r0, #4294967295
  401b84:	f47f aee1 	bne.w	40194a <sdcard_save_event_det_info+0x172>
  401b88:	2000      	movs	r0, #0
  401b8a:	e674      	b.n	401876 <sdcard_save_event_det_info+0x9e>
		case EVENT_TYPE_FREQ_UF_MASK:		if (EOF == f_puts( "Under frequency"  , &file_object )) return 0; break;
  401b8c:	4916      	ldr	r1, [pc, #88]	; (401be8 <sdcard_save_event_det_info+0x410>)
  401b8e:	481d      	ldr	r0, [pc, #116]	; (401c04 <sdcard_save_event_det_info+0x42c>)
  401b90:	4b17      	ldr	r3, [pc, #92]	; (401bf0 <sdcard_save_event_det_info+0x418>)
  401b92:	4798      	blx	r3
  401b94:	f1b0 3fff 	cmp.w	r0, #4294967295
  401b98:	f47f aed7 	bne.w	40194a <sdcard_save_event_det_info+0x172>
  401b9c:	2000      	movs	r0, #0
  401b9e:	e66a      	b.n	401876 <sdcard_save_event_det_info+0x9e>
		default:							if (EOF == f_puts( "Unknown"          , &file_object )) return 0; break;
  401ba0:	4911      	ldr	r1, [pc, #68]	; (401be8 <sdcard_save_event_det_info+0x410>)
  401ba2:	4819      	ldr	r0, [pc, #100]	; (401c08 <sdcard_save_event_det_info+0x430>)
  401ba4:	4b12      	ldr	r3, [pc, #72]	; (401bf0 <sdcard_save_event_det_info+0x418>)
  401ba6:	4798      	blx	r3
  401ba8:	f1b0 3fff 	cmp.w	r0, #4294967295
  401bac:	f47f aecd 	bne.w	40194a <sdcard_save_event_det_info+0x172>
  401bb0:	2000      	movs	r0, #0
  401bb2:	e660      	b.n	401876 <sdcard_save_event_det_info+0x9e>
		copy_content( (uint8_t *)&string[0] ,  (uint8_t *)&string_event_file_name[0] , sizeof(string) );
  401bb4:	2280      	movs	r2, #128	; 0x80
  401bb6:	4915      	ldr	r1, [pc, #84]	; (401c0c <sdcard_save_event_det_info+0x434>)
  401bb8:	4815      	ldr	r0, [pc, #84]	; (401c10 <sdcard_save_event_det_info+0x438>)
  401bba:	4b16      	ldr	r3, [pc, #88]	; (401c14 <sdcard_save_event_det_info+0x43c>)
  401bbc:	4798      	blx	r3
  401bbe:	e752      	b.n	401a66 <sdcard_save_event_det_info+0x28e>
	if (EOF == f_printf( &file_object, "Event waveform\n" )) return 0;
  401bc0:	2000      	movs	r0, #0
  401bc2:	e658      	b.n	401876 <sdcard_save_event_det_info+0x9e>
	if (EOF == f_puts( "Type = " , &file_object ))return 0;
  401bc4:	2000      	movs	r0, #0
  401bc6:	e656      	b.n	401876 <sdcard_save_event_det_info+0x9e>
		case EVENT_TYPE_RMS_OV_V1_MASK:		if (EOF == f_puts( "V1 Over voltage"  , &file_object )) return 0; break;
  401bc8:	2000      	movs	r0, #0
  401bca:	e654      	b.n	401876 <sdcard_save_event_det_info+0x9e>
		if (EOF == f_printf( &file_object, "\nDuration = %d.%03d sec", (int16_t)temp , ABS((int16_t)((temp-(int32_t)temp)*1000.0)) ))return 0;
  401bcc:	2000      	movs	r0, #0
  401bce:	e652      	b.n	401876 <sdcard_save_event_det_info+0x9e>
	if (EOF == f_puts( "\nVoltage Max = " , &file_object )) return 0;
  401bd0:	2000      	movs	r0, #0
  401bd2:	e650      	b.n	401876 <sdcard_save_event_det_info+0x9e>
	if (EOF == f_puts( " V\nVoltage Min = " , &file_object )) return 0;
  401bd4:	2000      	movs	r0, #0
  401bd6:	e64e      	b.n	401876 <sdcard_save_event_det_info+0x9e>
	if (EOF == f_puts( " V\nCurrent Max = " , &file_object )) return 0;
  401bd8:	2000      	movs	r0, #0
  401bda:	e64c      	b.n	401876 <sdcard_save_event_det_info+0x9e>
	if (EOF == f_puts( " A\n" , &file_object)) return 0;
  401bdc:	2000      	movs	r0, #0
  401bde:	e64a      	b.n	401876 <sdcard_save_event_det_info+0x9e>
	if (EOF == f_printf( &file_object, "Trigger Date = %4d/%02d/%02d\n", (int16_t)year , (int16_t)month , (int16_t)day )) return 0;
  401be0:	2000      	movs	r0, #0
  401be2:	e648      	b.n	401876 <sdcard_save_event_det_info+0x9e>
	if (EOF == f_printf( &file_object, "Trigger Time = %02d:%02d:%02d\n", event_det->time.hour , event_det->time.minute , event_det->time.second )) return 0;
  401be4:	2000      	movs	r0, #0
  401be6:	e646      	b.n	401876 <sdcard_save_event_det_info+0x9e>
  401be8:	20001248 	.word	0x20001248
  401bec:	0040d73c 	.word	0x0040d73c
  401bf0:	00407975 	.word	0x00407975
  401bf4:	0040d74c 	.word	0x0040d74c
  401bf8:	0040d774 	.word	0x0040d774
  401bfc:	0040d788 	.word	0x0040d788
  401c00:	0040d7a8 	.word	0x0040d7a8
  401c04:	0040d7b8 	.word	0x0040d7b8
  401c08:	0040d7d8 	.word	0x0040d7d8
  401c0c:	20001798 	.word	0x20001798
  401c10:	2000126c 	.word	0x2000126c
  401c14:	00403129 	.word	0x00403129

00401c18 <sdcard_save_event_buffer>:

/// @brief Save event into SD-Card.
bool sdcard_save_event_buffer( uint16_t * info , int16_t * buffer) {
  401c18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401c1c:	4604      	mov	r4, r0
  401c1e:	460d      	mov	r5, r1
	
	// open file or create it if it do not exist.
	if (FR_OK != f_open( &file_object , (char const *)string_event_file_name , FA_OPEN_ALWAYS | FA_WRITE )) return 0;
  401c20:	2212      	movs	r2, #18
  401c22:	4967      	ldr	r1, [pc, #412]	; (401dc0 <sdcard_save_event_buffer+0x1a8>)
  401c24:	4867      	ldr	r0, [pc, #412]	; (401dc4 <sdcard_save_event_buffer+0x1ac>)
  401c26:	4b68      	ldr	r3, [pc, #416]	; (401dc8 <sdcard_save_event_buffer+0x1b0>)
  401c28:	4798      	blx	r3
  401c2a:	b110      	cbz	r0, 401c32 <sdcard_save_event_buffer+0x1a>
  401c2c:	2000      	movs	r0, #0
  401c2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	
	// Move to end of the file to append data (needed when a existing file is open)
	if (FR_OK != f_lseek( &file_object , f_size(&file_object)) ) return 0;
  401c32:	4864      	ldr	r0, [pc, #400]	; (401dc4 <sdcard_save_event_buffer+0x1ac>)
  401c34:	68c1      	ldr	r1, [r0, #12]
  401c36:	4b65      	ldr	r3, [pc, #404]	; (401dcc <sdcard_save_event_buffer+0x1b4>)
  401c38:	4798      	blx	r3
  401c3a:	2800      	cmp	r0, #0
  401c3c:	f040 80ab 	bne.w	401d96 <sdcard_save_event_buffer+0x17e>
	
	// Print buffer info if pointer to buffer is NULL.
	if (buffer == NULL ) {
  401c40:	b185      	cbz	r5, 401c64 <sdcard_save_event_buffer+0x4c>
		int16_t data_integer;
		int32_t data_fractional;

		// print counter
		
		if (EOF == f_printf( &file_object, "%d,", buffer[0] )) return 0;
  401c42:	f9b5 2000 	ldrsh.w	r2, [r5]
  401c46:	4962      	ldr	r1, [pc, #392]	; (401dd0 <sdcard_save_event_buffer+0x1b8>)
  401c48:	485e      	ldr	r0, [pc, #376]	; (401dc4 <sdcard_save_event_buffer+0x1ac>)
  401c4a:	4b62      	ldr	r3, [pc, #392]	; (401dd4 <sdcard_save_event_buffer+0x1bc>)
  401c4c:	4798      	blx	r3
  401c4e:	f1b0 3fff 	cmp.w	r0, #4294967295
  401c52:	f000 80ac 	beq.w	401dae <sdcard_save_event_buffer+0x196>
  401c56:	2401      	movs	r4, #1
			if (count_channel<5) {
				data_integer = FPMUL16( abs(data_f) , unit_config.gain_volt , 15 );
				data_fractional = FPMUL32( abs(data_f) , unit_config.gain_volt*100 , 15 ) - (((int32_t)data_integer)*100);
			}
			else {
				data_integer = FPMUL16( abs(data_f) , unit_config.gain_curr_A , 15 );
  401c58:	4e5f      	ldr	r6, [pc, #380]	; (401dd8 <sdcard_save_event_buffer+0x1c0>)
			
			// Since data is an absolute value, add signal
			if (data_f<0)
				{if (EOF == f_printf( &file_object, "%d.%02d,", -data_integer , data_fractional )) return 0;}
			else
				{if (EOF == f_printf( &file_object, "%d.%02d,",  data_integer , data_fractional )) return 0;}
  401c5a:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 401dfc <sdcard_save_event_buffer+0x1e4>
  401c5e:	f8df b164 	ldr.w	fp, [pc, #356]	; 401dc4 <sdcard_save_event_buffer+0x1ac>
  401c62:	e05b      	b.n	401d1c <sdcard_save_event_buffer+0x104>
		if (EOF == f_printf( &file_object , "\nStart index = %d\n" , info[0] )) return 0;
  401c64:	8822      	ldrh	r2, [r4, #0]
  401c66:	495d      	ldr	r1, [pc, #372]	; (401ddc <sdcard_save_event_buffer+0x1c4>)
  401c68:	4856      	ldr	r0, [pc, #344]	; (401dc4 <sdcard_save_event_buffer+0x1ac>)
  401c6a:	4b5a      	ldr	r3, [pc, #360]	; (401dd4 <sdcard_save_event_buffer+0x1bc>)
  401c6c:	4798      	blx	r3
  401c6e:	f1b0 3fff 	cmp.w	r0, #4294967295
  401c72:	f000 8093 	beq.w	401d9c <sdcard_save_event_buffer+0x184>
		if (EOF == f_printf( &file_object , "Stop index = %d\n" , info[1] )) return 0;
  401c76:	8862      	ldrh	r2, [r4, #2]
  401c78:	4959      	ldr	r1, [pc, #356]	; (401de0 <sdcard_save_event_buffer+0x1c8>)
  401c7a:	4852      	ldr	r0, [pc, #328]	; (401dc4 <sdcard_save_event_buffer+0x1ac>)
  401c7c:	4b55      	ldr	r3, [pc, #340]	; (401dd4 <sdcard_save_event_buffer+0x1bc>)
  401c7e:	4798      	blx	r3
  401c80:	f1b0 3fff 	cmp.w	r0, #4294967295
  401c84:	f000 808d 	beq.w	401da2 <sdcard_save_event_buffer+0x18a>
		if (info[2] == 1)
  401c88:	88a3      	ldrh	r3, [r4, #4]
  401c8a:	2b01      	cmp	r3, #1
  401c8c:	d011      	beq.n	401cb2 <sdcard_save_event_buffer+0x9a>
			{if (EOF == f_puts( "Buffer not divided\n\n" , &file_object )) return 0;}
  401c8e:	494d      	ldr	r1, [pc, #308]	; (401dc4 <sdcard_save_event_buffer+0x1ac>)
  401c90:	4854      	ldr	r0, [pc, #336]	; (401de4 <sdcard_save_event_buffer+0x1cc>)
  401c92:	4b55      	ldr	r3, [pc, #340]	; (401de8 <sdcard_save_event_buffer+0x1d0>)
  401c94:	4798      	blx	r3
  401c96:	f1b0 3fff 	cmp.w	r0, #4294967295
  401c9a:	f000 8085 	beq.w	401da8 <sdcard_save_event_buffer+0x190>
		if (EOF == f_puts( "Counter,V1[V],V2[V],V3[V],VE[V],I1[A],I2[A],I3[A],IN[A]\n" , &file_object )) return 0;
  401c9e:	4949      	ldr	r1, [pc, #292]	; (401dc4 <sdcard_save_event_buffer+0x1ac>)
  401ca0:	4852      	ldr	r0, [pc, #328]	; (401dec <sdcard_save_event_buffer+0x1d4>)
  401ca2:	4b51      	ldr	r3, [pc, #324]	; (401de8 <sdcard_save_event_buffer+0x1d0>)
  401ca4:	4798      	blx	r3
  401ca6:	f1b0 3fff 	cmp.w	r0, #4294967295
  401caa:	d16c      	bne.n	401d86 <sdcard_save_event_buffer+0x16e>
  401cac:	2000      	movs	r0, #0
  401cae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			{if (EOF == f_puts( "Buffer divided\n\n" , &file_object )) return 0;}
  401cb2:	4944      	ldr	r1, [pc, #272]	; (401dc4 <sdcard_save_event_buffer+0x1ac>)
  401cb4:	484e      	ldr	r0, [pc, #312]	; (401df0 <sdcard_save_event_buffer+0x1d8>)
  401cb6:	4b4c      	ldr	r3, [pc, #304]	; (401de8 <sdcard_save_event_buffer+0x1d0>)
  401cb8:	4798      	blx	r3
  401cba:	f1b0 3fff 	cmp.w	r0, #4294967295
  401cbe:	d1ee      	bne.n	401c9e <sdcard_save_event_buffer+0x86>
  401cc0:	2000      	movs	r0, #0
  401cc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				data_integer = FPMUL16( abs(data_f) , unit_config.gain_curr_A , 15 );
  401cc6:	ea87 7ee7 	eor.w	lr, r7, r7, asr #31
  401cca:	ebae 7ee7 	sub.w	lr, lr, r7, asr #31
  401cce:	6a72      	ldr	r2, [r6, #36]	; 0x24
  401cd0:	fb02 f20e 	mul.w	r2, r2, lr
  401cd4:	f342 32cf 	sbfx	r2, r2, #15, #16
				data_fractional = FPMUL32( abs(data_f) , unit_config.gain_curr_A*100 , 15 ) - (((int32_t)data_integer)*100);
  401cd8:	6a73      	ldr	r3, [r6, #36]	; 0x24
  401cda:	2064      	movs	r0, #100	; 0x64
  401cdc:	fb00 f303 	mul.w	r3, r0, r3
  401ce0:	17d9      	asrs	r1, r3, #31
  401ce2:	ea4f 79ee 	mov.w	r9, lr, asr #31
  401ce6:	fb03 fc09 	mul.w	ip, r3, r9
  401cea:	fb0e cc01 	mla	ip, lr, r1, ip
  401cee:	fba3 010e 	umull	r0, r1, r3, lr
  401cf2:	4461      	add	r1, ip
  401cf4:	0bc0      	lsrs	r0, r0, #15
  401cf6:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
  401cfa:	f06f 0363 	mvn.w	r3, #99	; 0x63
  401cfe:	fb03 0302 	mla	r3, r3, r2, r0
			if (data_f<0)
  401d02:	2f00      	cmp	r7, #0
  401d04:	db2d      	blt.n	401d62 <sdcard_save_event_buffer+0x14a>
				{if (EOF == f_printf( &file_object, "%d.%02d,",  data_integer , data_fractional )) return 0;}
  401d06:	4651      	mov	r1, sl
  401d08:	4658      	mov	r0, fp
  401d0a:	4f32      	ldr	r7, [pc, #200]	; (401dd4 <sdcard_save_event_buffer+0x1bc>)
  401d0c:	47b8      	blx	r7
  401d0e:	f1b0 3fff 	cmp.w	r0, #4294967295
  401d12:	d04f      	beq.n	401db4 <sdcard_save_event_buffer+0x19c>
		for ( count_channel=1 ; count_channel<SETTINGS_EVENT_BUFFER_NUM ; count_channel++ ) {
  401d14:	3401      	adds	r4, #1
  401d16:	b2a4      	uxth	r4, r4
  401d18:	2c09      	cmp	r4, #9
  401d1a:	d02d      	beq.n	401d78 <sdcard_save_event_buffer+0x160>
			data_f = buffer[count_channel];
  401d1c:	f935 7f02 	ldrsh.w	r7, [r5, #2]!
			if (count_channel<5) {
  401d20:	2c04      	cmp	r4, #4
  401d22:	d8d0      	bhi.n	401cc6 <sdcard_save_event_buffer+0xae>
				data_integer = FPMUL16( abs(data_f) , unit_config.gain_volt , 15 );
  401d24:	ea87 7ee7 	eor.w	lr, r7, r7, asr #31
  401d28:	ebae 7ee7 	sub.w	lr, lr, r7, asr #31
  401d2c:	6a32      	ldr	r2, [r6, #32]
  401d2e:	fb02 f20e 	mul.w	r2, r2, lr
  401d32:	f342 32cf 	sbfx	r2, r2, #15, #16
				data_fractional = FPMUL32( abs(data_f) , unit_config.gain_volt*100 , 15 ) - (((int32_t)data_integer)*100);
  401d36:	6a33      	ldr	r3, [r6, #32]
  401d38:	2064      	movs	r0, #100	; 0x64
  401d3a:	fb00 f303 	mul.w	r3, r0, r3
  401d3e:	17d9      	asrs	r1, r3, #31
  401d40:	ea4f 79ee 	mov.w	r9, lr, asr #31
  401d44:	fb03 fc09 	mul.w	ip, r3, r9
  401d48:	fb0e cc01 	mla	ip, lr, r1, ip
  401d4c:	fba3 010e 	umull	r0, r1, r3, lr
  401d50:	4461      	add	r1, ip
  401d52:	0bc0      	lsrs	r0, r0, #15
  401d54:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
  401d58:	f06f 0363 	mvn.w	r3, #99	; 0x63
  401d5c:	fb03 0302 	mla	r3, r3, r2, r0
  401d60:	e7cf      	b.n	401d02 <sdcard_save_event_buffer+0xea>
				{if (EOF == f_printf( &file_object, "%d.%02d,", -data_integer , data_fractional )) return 0;}
  401d62:	4252      	negs	r2, r2
  401d64:	4651      	mov	r1, sl
  401d66:	4658      	mov	r0, fp
  401d68:	4f1a      	ldr	r7, [pc, #104]	; (401dd4 <sdcard_save_event_buffer+0x1bc>)
  401d6a:	47b8      	blx	r7
  401d6c:	f1b0 3fff 	cmp.w	r0, #4294967295
  401d70:	d1d0      	bne.n	401d14 <sdcard_save_event_buffer+0xfc>
  401d72:	2000      	movs	r0, #0
  401d74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

		}
		if (EOF == f_puts( "\n" , &file_object )) return 0;
  401d78:	4912      	ldr	r1, [pc, #72]	; (401dc4 <sdcard_save_event_buffer+0x1ac>)
  401d7a:	481e      	ldr	r0, [pc, #120]	; (401df4 <sdcard_save_event_buffer+0x1dc>)
  401d7c:	4b1a      	ldr	r3, [pc, #104]	; (401de8 <sdcard_save_event_buffer+0x1d0>)
  401d7e:	4798      	blx	r3
  401d80:	f1b0 3fff 	cmp.w	r0, #4294967295
  401d84:	d019      	beq.n	401dba <sdcard_save_event_buffer+0x1a2>
		
	}
	
	// Close file
	if (FR_OK != f_close( &file_object )) return 0;
  401d86:	480f      	ldr	r0, [pc, #60]	; (401dc4 <sdcard_save_event_buffer+0x1ac>)
  401d88:	4b1b      	ldr	r3, [pc, #108]	; (401df8 <sdcard_save_event_buffer+0x1e0>)
  401d8a:	4798      	blx	r3
  401d8c:	fab0 f080 	clz	r0, r0
  401d90:	0940      	lsrs	r0, r0, #5
  401d92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (FR_OK != f_lseek( &file_object , f_size(&file_object)) ) return 0;
  401d96:	2000      	movs	r0, #0
  401d98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (EOF == f_printf( &file_object , "\nStart index = %d\n" , info[0] )) return 0;
  401d9c:	2000      	movs	r0, #0
  401d9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (EOF == f_printf( &file_object , "Stop index = %d\n" , info[1] )) return 0;
  401da2:	2000      	movs	r0, #0
  401da4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			{if (EOF == f_puts( "Buffer not divided\n\n" , &file_object )) return 0;}
  401da8:	2000      	movs	r0, #0
  401daa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (EOF == f_printf( &file_object, "%d,", buffer[0] )) return 0;
  401dae:	2000      	movs	r0, #0
  401db0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				{if (EOF == f_printf( &file_object, "%d.%02d,",  data_integer , data_fractional )) return 0;}
  401db4:	2000      	movs	r0, #0
  401db6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (EOF == f_puts( "\n" , &file_object )) return 0;
  401dba:	2000      	movs	r0, #0
	
	return 1;
}
  401dbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401dc0:	20001798 	.word	0x20001798
  401dc4:	20001248 	.word	0x20001248
  401dc8:	00406c79 	.word	0x00406c79
  401dcc:	0040725d 	.word	0x0040725d
  401dd0:	0040d6cc 	.word	0x0040d6cc
  401dd4:	004079a5 	.word	0x004079a5
  401dd8:	20001db0 	.word	0x20001db0
  401ddc:	0040d63c 	.word	0x0040d63c
  401de0:	0040d650 	.word	0x0040d650
  401de4:	0040d678 	.word	0x0040d678
  401de8:	00407975 	.word	0x00407975
  401dec:	0040d690 	.word	0x0040d690
  401df0:	0040d664 	.word	0x0040d664
  401df4:	0040d850 	.word	0x0040d850
  401df8:	00407245 	.word	0x00407245
  401dfc:	0040d6d0 	.word	0x0040d6d0

00401e00 <sdcard_save_unit_config>:
			
	}
}

/// @brief Save unit configuration into SD-Card.
bool sdcard_save_unit_config(void) {
  401e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		
	// Since file do not exist or need to be over written, create it
	if (FR_OK != f_open( &file_object , (char const *)file_name_conf , FA_CREATE_ALWAYS | FA_WRITE )) return 0;
  401e04:	220a      	movs	r2, #10
  401e06:	490e      	ldr	r1, [pc, #56]	; (401e40 <sdcard_save_unit_config+0x40>)
  401e08:	480e      	ldr	r0, [pc, #56]	; (401e44 <sdcard_save_unit_config+0x44>)
  401e0a:	4b0f      	ldr	r3, [pc, #60]	; (401e48 <sdcard_save_unit_config+0x48>)
  401e0c:	4798      	blx	r3
  401e0e:	b9a0      	cbnz	r0, 401e3a <sdcard_save_unit_config+0x3a>
  401e10:	4c0e      	ldr	r4, [pc, #56]	; (401e4c <sdcard_save_unit_config+0x4c>)
  401e12:	f104 0844 	add.w	r8, r4, #68	; 0x44
			
	// Save default unit config
	for ( uint8_t i=0 ; i<(sizeof(unit_config)>>2) ; i++ ) {
		f_printf( &file_object , "%d\n", ((int32_t *)&unit_config)[i] );
  401e16:	4f0e      	ldr	r7, [pc, #56]	; (401e50 <sdcard_save_unit_config+0x50>)
  401e18:	4e0a      	ldr	r6, [pc, #40]	; (401e44 <sdcard_save_unit_config+0x44>)
  401e1a:	4d0e      	ldr	r5, [pc, #56]	; (401e54 <sdcard_save_unit_config+0x54>)
  401e1c:	f854 2f04 	ldr.w	r2, [r4, #4]!
  401e20:	4639      	mov	r1, r7
  401e22:	4630      	mov	r0, r6
  401e24:	47a8      	blx	r5
	for ( uint8_t i=0 ; i<(sizeof(unit_config)>>2) ; i++ ) {
  401e26:	4544      	cmp	r4, r8
  401e28:	d1f8      	bne.n	401e1c <sdcard_save_unit_config+0x1c>
	}
			
	// Close file
	if (FR_OK != f_close( &file_object )) return 0;
  401e2a:	4806      	ldr	r0, [pc, #24]	; (401e44 <sdcard_save_unit_config+0x44>)
  401e2c:	4b0a      	ldr	r3, [pc, #40]	; (401e58 <sdcard_save_unit_config+0x58>)
  401e2e:	4798      	blx	r3
  401e30:	fab0 f080 	clz	r0, r0
  401e34:	0940      	lsrs	r0, r0, #5
  401e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (FR_OK != f_open( &file_object , (char const *)file_name_conf , FA_CREATE_ALWAYS | FA_WRITE )) return 0;
  401e3a:	2000      	movs	r0, #0
		
	return 1;
	
}
  401e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401e40:	0040d500 	.word	0x0040d500
  401e44:	20001248 	.word	0x20001248
  401e48:	00406c79 	.word	0x00406c79
  401e4c:	20001dac 	.word	0x20001dac
  401e50:	0040d54c 	.word	0x0040d54c
  401e54:	004079a5 	.word	0x004079a5
  401e58:	00407245 	.word	0x00407245

00401e5c <sdcard_check_and_read_unit_config>:
bool sdcard_check_and_read_unit_config(void) {
  401e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  401e5e:	b085      	sub	sp, #20
	if (FR_OK == f_open( &file_object , (char const *)file_name_conf , FA_READ )) {
  401e60:	2201      	movs	r2, #1
  401e62:	4912      	ldr	r1, [pc, #72]	; (401eac <sdcard_check_and_read_unit_config+0x50>)
  401e64:	4812      	ldr	r0, [pc, #72]	; (401eb0 <sdcard_check_and_read_unit_config+0x54>)
  401e66:	4b13      	ldr	r3, [pc, #76]	; (401eb4 <sdcard_check_and_read_unit_config+0x58>)
  401e68:	4798      	blx	r3
  401e6a:	b9d8      	cbnz	r0, 401ea4 <sdcard_check_and_read_unit_config+0x48>
  401e6c:	4c12      	ldr	r4, [pc, #72]	; (401eb8 <sdcard_check_and_read_unit_config+0x5c>)
  401e6e:	f104 0744 	add.w	r7, r4, #68	; 0x44
			uint8_t buffer[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
  401e72:	2600      	movs	r6, #0
  401e74:	4635      	mov	r5, r6
  401e76:	9501      	str	r5, [sp, #4]
  401e78:	9502      	str	r5, [sp, #8]
  401e7a:	9503      	str	r5, [sp, #12]
			f_gets( (TCHAR *)buffer , (int)12 , &file_object );
  401e7c:	4a0c      	ldr	r2, [pc, #48]	; (401eb0 <sdcard_check_and_read_unit_config+0x54>)
  401e7e:	210c      	movs	r1, #12
  401e80:	a801      	add	r0, sp, #4
  401e82:	4b0e      	ldr	r3, [pc, #56]	; (401ebc <sdcard_check_and_read_unit_config+0x60>)
  401e84:	4798      	blx	r3
			(*UTILS_Strchr( (char *)buffer , '\n' ) ) = '\0';
  401e86:	210a      	movs	r1, #10
  401e88:	a801      	add	r0, sp, #4
  401e8a:	4b0d      	ldr	r3, [pc, #52]	; (401ec0 <sdcard_check_and_read_unit_config+0x64>)
  401e8c:	4798      	blx	r3
  401e8e:	7006      	strb	r6, [r0, #0]
			UTILS_Atoi( (char *)buffer , &((int32_t *)&unit_config)[i] );
  401e90:	4621      	mov	r1, r4
  401e92:	a801      	add	r0, sp, #4
  401e94:	4b0b      	ldr	r3, [pc, #44]	; (401ec4 <sdcard_check_and_read_unit_config+0x68>)
  401e96:	4798      	blx	r3
  401e98:	3404      	adds	r4, #4
		for ( uint8_t i=0 ; i<(sizeof(unit_config)>>2) ; i++ ) {
  401e9a:	42bc      	cmp	r4, r7
  401e9c:	d1eb      	bne.n	401e76 <sdcard_check_and_read_unit_config+0x1a>
	return 1;
  401e9e:	2001      	movs	r0, #1
}
  401ea0:	b005      	add	sp, #20
  401ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (1 != sdcard_save_unit_config())
  401ea4:	4b08      	ldr	r3, [pc, #32]	; (401ec8 <sdcard_check_and_read_unit_config+0x6c>)
  401ea6:	4798      	blx	r3
  401ea8:	e7fa      	b.n	401ea0 <sdcard_check_and_read_unit_config+0x44>
  401eaa:	bf00      	nop
  401eac:	0040d500 	.word	0x0040d500
  401eb0:	20001248 	.word	0x20001248
  401eb4:	00406c79 	.word	0x00406c79
  401eb8:	20001db0 	.word	0x20001db0
  401ebc:	004078fd 	.word	0x004078fd
  401ec0:	00403261 	.word	0x00403261
  401ec4:	00403295 	.word	0x00403295
  401ec8:	00401e01 	.word	0x00401e01

00401ecc <sdcard_save_unit_calibration>:

/// @brief Save unit calibration into SD-Card.
bool sdcard_save_unit_calibration(void) {
  401ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	
	// Since file do not exist or need to be over written, create it
	if (FR_OK != f_open( &file_object , (char const *)file_name_cal , FA_CREATE_ALWAYS | FA_WRITE )) return 0;
  401ed0:	220a      	movs	r2, #10
  401ed2:	490e      	ldr	r1, [pc, #56]	; (401f0c <sdcard_save_unit_calibration+0x40>)
  401ed4:	480e      	ldr	r0, [pc, #56]	; (401f10 <sdcard_save_unit_calibration+0x44>)
  401ed6:	4b0f      	ldr	r3, [pc, #60]	; (401f14 <sdcard_save_unit_calibration+0x48>)
  401ed8:	4798      	blx	r3
  401eda:	b9a0      	cbnz	r0, 401f06 <sdcard_save_unit_calibration+0x3a>
  401edc:	4c0e      	ldr	r4, [pc, #56]	; (401f18 <sdcard_save_unit_calibration+0x4c>)
  401ede:	f104 0860 	add.w	r8, r4, #96	; 0x60
	
	// Save default unit config
	for ( uint8_t i=0 ; i<(sizeof(unit_calibration)>>2) ; i++ ) {
		f_printf( &file_object , "%d\n", ((int32_t *)&unit_calibration)[i] );
  401ee2:	4f0e      	ldr	r7, [pc, #56]	; (401f1c <sdcard_save_unit_calibration+0x50>)
  401ee4:	4e0a      	ldr	r6, [pc, #40]	; (401f10 <sdcard_save_unit_calibration+0x44>)
  401ee6:	4d0e      	ldr	r5, [pc, #56]	; (401f20 <sdcard_save_unit_calibration+0x54>)
  401ee8:	f854 2f04 	ldr.w	r2, [r4, #4]!
  401eec:	4639      	mov	r1, r7
  401eee:	4630      	mov	r0, r6
  401ef0:	47a8      	blx	r5
	for ( uint8_t i=0 ; i<(sizeof(unit_calibration)>>2) ; i++ ) {
  401ef2:	4544      	cmp	r4, r8
  401ef4:	d1f8      	bne.n	401ee8 <sdcard_save_unit_calibration+0x1c>
	}
	
	// Close file
	if (FR_OK != f_close( &file_object )) return 0;
  401ef6:	4806      	ldr	r0, [pc, #24]	; (401f10 <sdcard_save_unit_calibration+0x44>)
  401ef8:	4b0a      	ldr	r3, [pc, #40]	; (401f24 <sdcard_save_unit_calibration+0x58>)
  401efa:	4798      	blx	r3
  401efc:	fab0 f080 	clz	r0, r0
  401f00:	0940      	lsrs	r0, r0, #5
  401f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (FR_OK != f_open( &file_object , (char const *)file_name_cal , FA_CREATE_ALWAYS | FA_WRITE )) return 0;
  401f06:	2000      	movs	r0, #0
	
	return 1;
	
}
  401f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401f0c:	0040d4ec 	.word	0x0040d4ec
  401f10:	20001248 	.word	0x20001248
  401f14:	00406c79 	.word	0x00406c79
  401f18:	20001df0 	.word	0x20001df0
  401f1c:	0040d54c 	.word	0x0040d54c
  401f20:	004079a5 	.word	0x004079a5
  401f24:	00407245 	.word	0x00407245

00401f28 <sdcard_check_and_read_unit_calibration>:
bool sdcard_check_and_read_unit_calibration(void) {
  401f28:	b5f0      	push	{r4, r5, r6, r7, lr}
  401f2a:	b085      	sub	sp, #20
	if (FR_OK == f_open( &file_object , (char const *)file_name_cal , FA_READ )) {
  401f2c:	2201      	movs	r2, #1
  401f2e:	4912      	ldr	r1, [pc, #72]	; (401f78 <sdcard_check_and_read_unit_calibration+0x50>)
  401f30:	4812      	ldr	r0, [pc, #72]	; (401f7c <sdcard_check_and_read_unit_calibration+0x54>)
  401f32:	4b13      	ldr	r3, [pc, #76]	; (401f80 <sdcard_check_and_read_unit_calibration+0x58>)
  401f34:	4798      	blx	r3
  401f36:	b9d8      	cbnz	r0, 401f70 <sdcard_check_and_read_unit_calibration+0x48>
  401f38:	4c12      	ldr	r4, [pc, #72]	; (401f84 <sdcard_check_and_read_unit_calibration+0x5c>)
  401f3a:	f104 0760 	add.w	r7, r4, #96	; 0x60
			uint8_t buffer[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
  401f3e:	2600      	movs	r6, #0
  401f40:	4635      	mov	r5, r6
  401f42:	9501      	str	r5, [sp, #4]
  401f44:	9502      	str	r5, [sp, #8]
  401f46:	9503      	str	r5, [sp, #12]
			f_gets( (TCHAR *)buffer , (int)12 , &file_object );
  401f48:	4a0c      	ldr	r2, [pc, #48]	; (401f7c <sdcard_check_and_read_unit_calibration+0x54>)
  401f4a:	210c      	movs	r1, #12
  401f4c:	a801      	add	r0, sp, #4
  401f4e:	4b0e      	ldr	r3, [pc, #56]	; (401f88 <sdcard_check_and_read_unit_calibration+0x60>)
  401f50:	4798      	blx	r3
			(*UTILS_Strchr( (char *)buffer , '\n' ) ) = '\0';
  401f52:	210a      	movs	r1, #10
  401f54:	a801      	add	r0, sp, #4
  401f56:	4b0d      	ldr	r3, [pc, #52]	; (401f8c <sdcard_check_and_read_unit_calibration+0x64>)
  401f58:	4798      	blx	r3
  401f5a:	7006      	strb	r6, [r0, #0]
			UTILS_Atoi( (char *)buffer , &((int32_t *)&unit_calibration)[i] );
  401f5c:	4621      	mov	r1, r4
  401f5e:	a801      	add	r0, sp, #4
  401f60:	4b0b      	ldr	r3, [pc, #44]	; (401f90 <sdcard_check_and_read_unit_calibration+0x68>)
  401f62:	4798      	blx	r3
  401f64:	3404      	adds	r4, #4
		for ( uint8_t i=0 ; i<(sizeof(unit_calibration)>>2) ; i++ ) {
  401f66:	42bc      	cmp	r4, r7
  401f68:	d1eb      	bne.n	401f42 <sdcard_check_and_read_unit_calibration+0x1a>
	return 1;
  401f6a:	2001      	movs	r0, #1
}
  401f6c:	b005      	add	sp, #20
  401f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (1 != sdcard_save_unit_calibration())
  401f70:	4b08      	ldr	r3, [pc, #32]	; (401f94 <sdcard_check_and_read_unit_calibration+0x6c>)
  401f72:	4798      	blx	r3
  401f74:	e7fa      	b.n	401f6c <sdcard_check_and_read_unit_calibration+0x44>
  401f76:	bf00      	nop
  401f78:	0040d4ec 	.word	0x0040d4ec
  401f7c:	20001248 	.word	0x20001248
  401f80:	00406c79 	.word	0x00406c79
  401f84:	20001df4 	.word	0x20001df4
  401f88:	004078fd 	.word	0x004078fd
  401f8c:	00403261 	.word	0x00403261
  401f90:	00403295 	.word	0x00403295
  401f94:	00401ecd 	.word	0x00401ecd

00401f98 <sdcard_save_flags>:

#if SETTINGS_ARM_ENABLE_SDCARD_COMM_FLAG_SAVE

bool sdcard_save_flags(uint16_t flags) {
  401f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401f9c:	b088      	sub	sp, #32
  401f9e:	4682      	mov	sl, r0
	static FIL file_log;
	uint32_t hour, minute, second;
	uint32_t year, month, day;
		
	// get date from RTC
	rtc_get_time(RTC, &hour, &minute, &second);
  401fa0:	4e3d      	ldr	r6, [pc, #244]	; (402098 <sdcard_save_flags+0x100>)
  401fa2:	ab05      	add	r3, sp, #20
  401fa4:	aa06      	add	r2, sp, #24
  401fa6:	a907      	add	r1, sp, #28
  401fa8:	4630      	mov	r0, r6
  401faa:	4c3c      	ldr	r4, [pc, #240]	; (40209c <sdcard_save_flags+0x104>)
  401fac:	47a0      	blx	r4
	rtc_get_date(RTC, &year, &month, &day, 0);	
  401fae:	2700      	movs	r7, #0
  401fb0:	9700      	str	r7, [sp, #0]
  401fb2:	ab02      	add	r3, sp, #8
  401fb4:	aa03      	add	r2, sp, #12
  401fb6:	a904      	add	r1, sp, #16
  401fb8:	4630      	mov	r0, r6
  401fba:	f8df 9124 	ldr.w	r9, [pc, #292]	; 4020e0 <sdcard_save_flags+0x148>
  401fbe:	47c8      	blx	r9
	
	// Define directory name (example "2015/Month_12/Day_01" for 1 of December of 2015) and create it.
	memset( (void *)&string , 0 , sizeof(string) );
  401fc0:	4c37      	ldr	r4, [pc, #220]	; (4020a0 <sdcard_save_flags+0x108>)
  401fc2:	2280      	movs	r2, #128	; 0x80
  401fc4:	4639      	mov	r1, r7
  401fc6:	4620      	mov	r0, r4
  401fc8:	4b36      	ldr	r3, [pc, #216]	; (4020a4 <sdcard_save_flags+0x10c>)
  401fca:	4798      	blx	r3
	sprintf( (char *)&string ,"%4d" , (int16_t)year);
  401fcc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
  401fd0:	4935      	ldr	r1, [pc, #212]	; (4020a8 <sdcard_save_flags+0x110>)
  401fd2:	4620      	mov	r0, r4
  401fd4:	4d35      	ldr	r5, [pc, #212]	; (4020ac <sdcard_save_flags+0x114>)
  401fd6:	47a8      	blx	r5
	f_mkdir(string);	// Create folder if it do not exist
  401fd8:	4620      	mov	r0, r4
  401fda:	f8df 8108 	ldr.w	r8, [pc, #264]	; 4020e4 <sdcard_save_flags+0x14c>
  401fde:	47c0      	blx	r8
	sprintf( (char *)&string+4 ,"/Month_%02d" , (int16_t)month);
  401fe0:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
  401fe4:	4932      	ldr	r1, [pc, #200]	; (4020b0 <sdcard_save_flags+0x118>)
  401fe6:	1d20      	adds	r0, r4, #4
  401fe8:	47a8      	blx	r5
	f_mkdir(string);	// Create folder if it do not exist
  401fea:	4620      	mov	r0, r4
  401fec:	47c0      	blx	r8
	sprintf( (char *)&string+13 ,"/Day_%02d" , (int16_t)day);
  401fee:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
  401ff2:	4930      	ldr	r1, [pc, #192]	; (4020b4 <sdcard_save_flags+0x11c>)
  401ff4:	f104 000d 	add.w	r0, r4, #13
  401ff8:	47a8      	blx	r5
	f_mkdir(string);	// Create folder if it do not exist
  401ffa:	4620      	mov	r0, r4
  401ffc:	47c0      	blx	r8
	
	// define file name (example "LICPM2_2015_12_05_log.txt" for 5 of December of 2015). File name is added to folder name so pointer is moved 20 chars.
	sprintf( (char *)&string+20 ,"/LICPM2_%4d_%02d_%02d_log.txt" , (int16_t)year , (int16_t)month , (int16_t)day);
  401ffe:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
  402002:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
  402006:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
  40200a:	9100      	str	r1, [sp, #0]
  40200c:	492a      	ldr	r1, [pc, #168]	; (4020b8 <sdcard_save_flags+0x120>)
  40200e:	f104 0014 	add.w	r0, r4, #20
  402012:	47a8      	blx	r5
		
	// get date from RTC. TODO: Por alguna razon que no entiendo sprintf sobrescribe la variable day. Repito la lectura del RTC hasta entender este problema.
	rtc_get_date(RTC, &year, &month, &day, 0);
  402014:	9700      	str	r7, [sp, #0]
  402016:	ab02      	add	r3, sp, #8
  402018:	aa03      	add	r2, sp, #12
  40201a:	a904      	add	r1, sp, #16
  40201c:	4630      	mov	r0, r6
  40201e:	47c8      	blx	r9

	// open file or create it if it do not exist.
	if (FR_OK != f_open( &file_log , (char const *)string , FA_OPEN_ALWAYS | FA_WRITE ))	return 0;
  402020:	2212      	movs	r2, #18
  402022:	4621      	mov	r1, r4
  402024:	4825      	ldr	r0, [pc, #148]	; (4020bc <sdcard_save_flags+0x124>)
  402026:	4b26      	ldr	r3, [pc, #152]	; (4020c0 <sdcard_save_flags+0x128>)
  402028:	4798      	blx	r3
  40202a:	b118      	cbz	r0, 402034 <sdcard_save_flags+0x9c>
  40202c:	2000      	movs	r0, #0
	// Close file
	if (FR_OK != f_close( &file_log )) return 0;
	
	return 1;
	
}
  40202e:	b008      	add	sp, #32
  402030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (FR_OK != f_lseek( &file_log , f_size(&file_log)) ) return 0;
  402034:	4821      	ldr	r0, [pc, #132]	; (4020bc <sdcard_save_flags+0x124>)
  402036:	68c1      	ldr	r1, [r0, #12]
  402038:	4b22      	ldr	r3, [pc, #136]	; (4020c4 <sdcard_save_flags+0x12c>)
  40203a:	4798      	blx	r3
  40203c:	b108      	cbz	r0, 402042 <sdcard_save_flags+0xaa>
  40203e:	2000      	movs	r0, #0
  402040:	e7f5      	b.n	40202e <sdcard_save_flags+0x96>
	if (EOF == f_printf( &file_log, "%02d:%02d:%02d ", (int16_t)hour , (int16_t)minute , (int16_t)second )) return 0;
  402042:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
  402046:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
  40204a:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
  40204e:	9100      	str	r1, [sp, #0]
  402050:	491d      	ldr	r1, [pc, #116]	; (4020c8 <sdcard_save_flags+0x130>)
  402052:	481a      	ldr	r0, [pc, #104]	; (4020bc <sdcard_save_flags+0x124>)
  402054:	4c1d      	ldr	r4, [pc, #116]	; (4020cc <sdcard_save_flags+0x134>)
  402056:	47a0      	blx	r4
  402058:	f1b0 3fff 	cmp.w	r0, #4294967295
  40205c:	d015      	beq.n	40208a <sdcard_save_flags+0xf2>
	if (EOF == f_printf( &file_log, "%016b ", flags )) return 0;
  40205e:	4652      	mov	r2, sl
  402060:	491b      	ldr	r1, [pc, #108]	; (4020d0 <sdcard_save_flags+0x138>)
  402062:	4816      	ldr	r0, [pc, #88]	; (4020bc <sdcard_save_flags+0x124>)
  402064:	47a0      	blx	r4
  402066:	f1b0 3fff 	cmp.w	r0, #4294967295
  40206a:	d010      	beq.n	40208e <sdcard_save_flags+0xf6>
	if (EOF == f_printf( &file_log, "%08b \n", sdcard_flags_status )) return 0;
  40206c:	4b19      	ldr	r3, [pc, #100]	; (4020d4 <sdcard_save_flags+0x13c>)
  40206e:	781a      	ldrb	r2, [r3, #0]
  402070:	4919      	ldr	r1, [pc, #100]	; (4020d8 <sdcard_save_flags+0x140>)
  402072:	4812      	ldr	r0, [pc, #72]	; (4020bc <sdcard_save_flags+0x124>)
  402074:	47a0      	blx	r4
  402076:	f1b0 3fff 	cmp.w	r0, #4294967295
  40207a:	d00a      	beq.n	402092 <sdcard_save_flags+0xfa>
	if (FR_OK != f_close( &file_log )) return 0;
  40207c:	480f      	ldr	r0, [pc, #60]	; (4020bc <sdcard_save_flags+0x124>)
  40207e:	4b17      	ldr	r3, [pc, #92]	; (4020dc <sdcard_save_flags+0x144>)
  402080:	4798      	blx	r3
  402082:	fab0 f080 	clz	r0, r0
  402086:	0940      	lsrs	r0, r0, #5
  402088:	e7d1      	b.n	40202e <sdcard_save_flags+0x96>
	if (EOF == f_printf( &file_log, "%02d:%02d:%02d ", (int16_t)hour , (int16_t)minute , (int16_t)second )) return 0;
  40208a:	2000      	movs	r0, #0
  40208c:	e7cf      	b.n	40202e <sdcard_save_flags+0x96>
	if (EOF == f_printf( &file_log, "%016b ", flags )) return 0;
  40208e:	2000      	movs	r0, #0
  402090:	e7cd      	b.n	40202e <sdcard_save_flags+0x96>
	if (EOF == f_printf( &file_log, "%08b \n", sdcard_flags_status )) return 0;
  402092:	2000      	movs	r0, #0
  402094:	e7cb      	b.n	40202e <sdcard_save_flags+0x96>
  402096:	bf00      	nop
  402098:	400e1460 	.word	0x400e1460
  40209c:	00404f17 	.word	0x00404f17
  4020a0:	2000126c 	.word	0x2000126c
  4020a4:	00409669 	.word	0x00409669
  4020a8:	0040d8b4 	.word	0x0040d8b4
  4020ac:	00409705 	.word	0x00409705
  4020b0:	0040d8b8 	.word	0x0040d8b8
  4020b4:	0040d8c4 	.word	0x0040d8c4
  4020b8:	0040d874 	.word	0x0040d874
  4020bc:	20000b3c 	.word	0x20000b3c
  4020c0:	00406c79 	.word	0x00406c79
  4020c4:	0040725d 	.word	0x0040725d
  4020c8:	0040d894 	.word	0x0040d894
  4020cc:	004079a5 	.word	0x004079a5
  4020d0:	0040d8a4 	.word	0x0040d8a4
  4020d4:	20001cc8 	.word	0x20001cc8
  4020d8:	0040d8ac 	.word	0x0040d8ac
  4020dc:	00407245 	.word	0x00407245
  4020e0:	00405005 	.word	0x00405005
  4020e4:	0040770d 	.word	0x0040770d

004020e8 <sdcard_get_total_mbytes_req>:

/// @brief Get total Mbytes of sd-card.
///
/// @param[out] Total Mbyte
///
uint32_t sdcard_get_total_mbytes_req(void) {
  4020e8:	b430      	push	{r4, r5}

	// Get total bytes (total_MB = clusters * sectors/custers * bytes/sectors / 1024 / 1024)
#if _MAX_SS != 512
	return (( ((uint64_t)fs.n_fatent - 2) * fs.csize * fs.ssize ) / 1048576 );
#else
	return (( ((uint64_t)fs.n_fatent - 2) * fs.csize * 512 ) / 1048576 );
  4020ea:	4909      	ldr	r1, [pc, #36]	; (402110 <sdcard_get_total_mbytes_req+0x28>)
  4020ec:	69c8      	ldr	r0, [r1, #28]
  4020ee:	0dc3      	lsrs	r3, r0, #23
  4020f0:	0242      	lsls	r2, r0, #9
  4020f2:	f5b2 6280 	subs.w	r2, r2, #1024	; 0x400
  4020f6:	f143 33ff 	adc.w	r3, r3, #4294967295
  4020fa:	7888      	ldrb	r0, [r1, #2]
  4020fc:	fba2 4500 	umull	r4, r5, r2, r0
  402100:	fb00 5503 	mla	r5, r0, r3, r5
  402104:	0d20      	lsrs	r0, r4, #20
#endif

}
  402106:	ea40 3005 	orr.w	r0, r0, r5, lsl #12
  40210a:	bc30      	pop	{r4, r5}
  40210c:	4770      	bx	lr
  40210e:	bf00      	nop
  402110:	20001014 	.word	0x20001014

00402114 <sdcard_get_free_mbytes_req>:

/// @brief Get free Mbytes of sd-card.
///
/// @param[out] Free Mbyte
///
uint32_t sdcard_get_free_mbytes_req(void) {
  402114:	b510      	push	{r4, lr}
  402116:	b082      	sub	sp, #8

	DWORD Free_clust;
	FATFS *fs_ptr = &fs;
  402118:	4c0b      	ldr	r4, [pc, #44]	; (402148 <sdcard_get_free_mbytes_req+0x34>)
  40211a:	aa02      	add	r2, sp, #8
  40211c:	f842 4d08 	str.w	r4, [r2, #-8]!
	
	// Get volume information and free clusters of drive
	res = f_getfree("0:/", &Free_clust, &fs_ptr);
  402120:	a901      	add	r1, sp, #4
  402122:	480a      	ldr	r0, [pc, #40]	; (40214c <sdcard_get_free_mbytes_req+0x38>)
  402124:	4b0a      	ldr	r3, [pc, #40]	; (402150 <sdcard_get_free_mbytes_req+0x3c>)
  402126:	4798      	blx	r3
  402128:	4b0a      	ldr	r3, [pc, #40]	; (402154 <sdcard_get_free_mbytes_req+0x40>)
  40212a:	7018      	strb	r0, [r3, #0]

	// return free space
#if _MAX_SS != 512
	return (( ((uint64_t)Free_clust) * fs.csize * fs.ssize ) / 1048576 );
#else
	return (( ((uint64_t)Free_clust) * fs.csize * 512 ) / 1048576 );
  40212c:	78a0      	ldrb	r0, [r4, #2]
  40212e:	9a01      	ldr	r2, [sp, #4]
  402130:	fba2 2300 	umull	r2, r3, r2, r0
  402134:	0258      	lsls	r0, r3, #9
  402136:	ea40 50d2 	orr.w	r0, r0, r2, lsr #23
  40213a:	f3c2 22cb 	ubfx	r2, r2, #11, #12
#endif	

}
  40213e:	ea42 3000 	orr.w	r0, r2, r0, lsl #12
  402142:	b002      	add	sp, #8
  402144:	bd10      	pop	{r4, pc}
  402146:	bf00      	nop
  402148:	20001014 	.word	0x20001014
  40214c:	0040d4e8 	.word	0x0040d4e8
  402150:	00407505 	.word	0x00407505
  402154:	20000f6c 	.word	0x20000f6c

00402158 <sdcard_update_file_and_dir_to_remove>:

/// @brief Update file and directory name to be removed.
uint8_t sdcard_update_file_and_dir_to_remove( uint8_t * str_name ) {
  402158:	b570      	push	{r4, r5, r6, lr}
  40215a:	4605      	mov	r5, r0
		
	uint8_t str_length;
	
	// calculate string length	
	str_length = calculate_string_length( str_name , STRING_MAX );
  40215c:	2180      	movs	r1, #128	; 0x80
  40215e:	4b11      	ldr	r3, [pc, #68]	; (4021a4 <sdcard_update_file_and_dir_to_remove+0x4c>)
  402160:	4798      	blx	r3
	
	// check if there is a file or directory to be removed
	if (dir_remove_name_length == 0) {
  402162:	4b11      	ldr	r3, [pc, #68]	; (4021a8 <sdcard_update_file_and_dir_to_remove+0x50>)
  402164:	781b      	ldrb	r3, [r3, #0]
  402166:	b10b      	cbz	r3, 40216c <sdcard_update_file_and_dir_to_remove+0x14>
		// return
		return 0;
		
	}
	else
		return 2;
  402168:	2002      	movs	r0, #2
  40216a:	bd70      	pop	{r4, r5, r6, pc}
  40216c:	4604      	mov	r4, r0
		memset( (void *)&dir_remove_name , 0 , sizeof(dir_remove_name) );
  40216e:	4e0f      	ldr	r6, [pc, #60]	; (4021ac <sdcard_update_file_and_dir_to_remove+0x54>)
  402170:	2280      	movs	r2, #128	; 0x80
  402172:	2100      	movs	r1, #0
  402174:	4630      	mov	r0, r6
  402176:	4b0e      	ldr	r3, [pc, #56]	; (4021b0 <sdcard_update_file_and_dir_to_remove+0x58>)
  402178:	4798      	blx	r3
		sprintf( (char *)&dir_remove_name ,"%s" , "0:/");
  40217a:	4b0e      	ldr	r3, [pc, #56]	; (4021b4 <sdcard_update_file_and_dir_to_remove+0x5c>)
  40217c:	6818      	ldr	r0, [r3, #0]
  40217e:	4631      	mov	r1, r6
  402180:	f841 0b03 	str.w	r0, [r1], #3
		copy_content( str_name ,
  402184:	b2a2      	uxth	r2, r4
  402186:	4628      	mov	r0, r5
  402188:	4b0b      	ldr	r3, [pc, #44]	; (4021b8 <sdcard_update_file_and_dir_to_remove+0x60>)
  40218a:	4798      	blx	r3
		if (FR_OK != f_stat ( (char const *)&dir_remove_name , &sdcard_file_info ))
  40218c:	490b      	ldr	r1, [pc, #44]	; (4021bc <sdcard_update_file_and_dir_to_remove+0x64>)
  40218e:	4630      	mov	r0, r6
  402190:	4b0b      	ldr	r3, [pc, #44]	; (4021c0 <sdcard_update_file_and_dir_to_remove+0x68>)
  402192:	4798      	blx	r3
  402194:	b918      	cbnz	r0, 40219e <sdcard_update_file_and_dir_to_remove+0x46>
		dir_remove_name_length = str_length+3;
  402196:	3403      	adds	r4, #3
  402198:	4b03      	ldr	r3, [pc, #12]	; (4021a8 <sdcard_update_file_and_dir_to_remove+0x50>)
  40219a:	701c      	strb	r4, [r3, #0]
		return 0;
  40219c:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
  40219e:	2001      	movs	r0, #1
	
}
  4021a0:	bd70      	pop	{r4, r5, r6, pc}
  4021a2:	bf00      	nop
  4021a4:	00403221 	.word	0x00403221
  4021a8:	20000b39 	.word	0x20000b39
  4021ac:	20001cfc 	.word	0x20001cfc
  4021b0:	00409669 	.word	0x00409669
  4021b4:	0040d4e8 	.word	0x0040d4e8
  4021b8:	00403129 	.word	0x00403129
  4021bc:	20001d7c 	.word	0x20001d7c
  4021c0:	004074b1 	.word	0x004074b1

004021c4 <sdcard_file_get_name>:
/// @param[out] name_length
///
/// @note string_name must be cleared outside.
/// @note It must be called after next item function since other fatfs function 
///       related to sd-card could modified the buffer where long name is saved.
uint8_t sdcard_file_get_name(DIR * directory, FILINFO * file_info , uint8_t * name_string , uint8_t limit) {
  4021c4:	b570      	push	{r4, r5, r6, lr}

	uint8_t name_length = 0;

	// check if there is a short file name
	if  (directory->lfn_idx == 0xFFFF) {
  4021c6:	8c05      	ldrh	r5, [r0, #32]
  4021c8:	f64f 74ff 	movw	r4, #65535	; 0xffff
  4021cc:	42a5      	cmp	r5, r4
  4021ce:	d013      	beq.n	4021f8 <sdcard_file_get_name+0x34>
	// it is a long file name (LFN)
	else {
		
		// LFN is stored in a string of 16bits word, so a custom code is used
		for (;;) {
			if ((*(directory->lfn + name_length) != 0) & (name_length < limit)) {
  4021d0:	69c1      	ldr	r1, [r0, #28]
  4021d2:	880d      	ldrh	r5, [r1, #0]
  4021d4:	b175      	cbz	r5, 4021f4 <sdcard_file_get_name+0x30>
  4021d6:	b16b      	cbz	r3, 4021f4 <sdcard_file_get_name+0x30>
  4021d8:	2600      	movs	r6, #0
  4021da:	4634      	mov	r4, r6
				name_string[name_length] = *(directory->lfn + name_length);
  4021dc:	5595      	strb	r5, [r2, r6]
				name_length++;
  4021de:	3401      	adds	r4, #1
  4021e0:	b2e4      	uxtb	r4, r4
			if ((*(directory->lfn + name_length) != 0) & (name_length < limit)) {
  4021e2:	4626      	mov	r6, r4
  4021e4:	69c5      	ldr	r5, [r0, #28]
  4021e6:	f835 5014 	ldrh.w	r5, [r5, r4, lsl #1]
  4021ea:	b10d      	cbz	r5, 4021f0 <sdcard_file_get_name+0x2c>
  4021ec:	42a3      	cmp	r3, r4
  4021ee:	d8f5      	bhi.n	4021dc <sdcard_file_get_name+0x18>

	}
	
	return name_length;

}
  4021f0:	4620      	mov	r0, r4
  4021f2:	bd70      	pop	{r4, r5, r6, pc}
			if ((*(directory->lfn + name_length) != 0) & (name_length < limit)) {
  4021f4:	2400      	movs	r4, #0
  4021f6:	e7fb      	b.n	4021f0 <sdcard_file_get_name+0x2c>
  4021f8:	4615      	mov	r5, r2
		name_length = calculate_string_length( (uint8_t *)&file_info->fname[0] , 13 );
  4021fa:	f101 0609 	add.w	r6, r1, #9
  4021fe:	210d      	movs	r1, #13
  402200:	4630      	mov	r0, r6
  402202:	4b04      	ldr	r3, [pc, #16]	; (402214 <sdcard_file_get_name+0x50>)
  402204:	4798      	blx	r3
  402206:	4604      	mov	r4, r0
		copy_content( (uint8_t *)&(file_info->fname[0]) ,
  402208:	b282      	uxth	r2, r0
  40220a:	4629      	mov	r1, r5
  40220c:	4630      	mov	r0, r6
  40220e:	4b02      	ldr	r3, [pc, #8]	; (402218 <sdcard_file_get_name+0x54>)
  402210:	4798      	blx	r3
  402212:	e7ed      	b.n	4021f0 <sdcard_file_get_name+0x2c>
  402214:	00403221 	.word	0x00403221
  402218:	00403129 	.word	0x00403129

0040221c <sdcard_find_older_directory>:
void sdcard_find_older_directory( char * dir_name ) {
  40221c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402220:	4604      	mov	r4, r0
	dir_name[0] = 0xFF;
  402222:	23ff      	movs	r3, #255	; 0xff
  402224:	7003      	strb	r3, [r0, #0]
		sdcard_file_info.fattrib = 0;
  402226:	4e23      	ldr	r6, [pc, #140]	; (4022b4 <sdcard_find_older_directory+0x98>)
  402228:	f04f 0a00 	mov.w	sl, #0
  40222c:	46d1      	mov	r9, sl
		if (FR_OK != f_readdir ( (DIR *)&sdcard_directory , &sdcard_file_info ))
  40222e:	f8df 809c 	ldr.w	r8, [pc, #156]	; 4022cc <sdcard_find_older_directory+0xb0>
			temp_length = sdcard_file_get_name( &sdcard_directory, &sdcard_file_info , (uint8_t *)&string[0] , STRING_MAX );
  402232:	4f21      	ldr	r7, [pc, #132]	; (4022b8 <sdcard_find_older_directory+0x9c>)
		sdcard_file_info.fattrib = 0;
  402234:	f886 9008 	strb.w	r9, [r6, #8]
		if (FR_OK != f_readdir ( (DIR *)&sdcard_directory , &sdcard_file_info ))
  402238:	4631      	mov	r1, r6
  40223a:	4820      	ldr	r0, [pc, #128]	; (4022bc <sdcard_find_older_directory+0xa0>)
  40223c:	47c0      	blx	r8
  40223e:	2800      	cmp	r0, #0
  402240:	d135      	bne.n	4022ae <sdcard_find_older_directory+0x92>
		if ( sdcard_file_info.fattrib & AM_ARC )
  402242:	7a33      	ldrb	r3, [r6, #8]
  402244:	f013 0f20 	tst.w	r3, #32
  402248:	d1f4      	bne.n	402234 <sdcard_find_older_directory+0x18>
		else if ( sdcard_file_info.fattrib & AM_DIR ) {
  40224a:	f013 0f10 	tst.w	r3, #16
  40224e:	d02e      	beq.n	4022ae <sdcard_find_older_directory+0x92>
			memset( (void *)&string , 0 , sizeof(string) );
  402250:	4d1b      	ldr	r5, [pc, #108]	; (4022c0 <sdcard_find_older_directory+0xa4>)
  402252:	f04f 0b80 	mov.w	fp, #128	; 0x80
  402256:	465a      	mov	r2, fp
  402258:	4651      	mov	r1, sl
  40225a:	4628      	mov	r0, r5
  40225c:	4b19      	ldr	r3, [pc, #100]	; (4022c4 <sdcard_find_older_directory+0xa8>)
  40225e:	4798      	blx	r3
			temp_length = sdcard_file_get_name( &sdcard_directory, &sdcard_file_info , (uint8_t *)&string[0] , STRING_MAX );
  402260:	465b      	mov	r3, fp
  402262:	462a      	mov	r2, r5
  402264:	4631      	mov	r1, r6
  402266:	4815      	ldr	r0, [pc, #84]	; (4022bc <sdcard_find_older_directory+0xa0>)
  402268:	f8df b064 	ldr.w	fp, [pc, #100]	; 4022d0 <sdcard_find_older_directory+0xb4>
  40226c:	47d8      	blx	fp
  40226e:	7038      	strb	r0, [r7, #0]
			if (string[0] == 46 ) // 46 -> "."
  402270:	782a      	ldrb	r2, [r5, #0]
  402272:	2a2e      	cmp	r2, #46	; 0x2e
  402274:	d0de      	beq.n	402234 <sdcard_find_older_directory+0x18>
			for ( i = 0 ; i < STRING_MAX ; i++) {
  402276:	4b14      	ldr	r3, [pc, #80]	; (4022c8 <sdcard_find_older_directory+0xac>)
  402278:	f883 a000 	strb.w	sl, [r3]
				if ( string[i] > dir_name[i] )
  40227c:	7823      	ldrb	r3, [r4, #0]
  40227e:	429a      	cmp	r2, r3
  402280:	d8d8      	bhi.n	402234 <sdcard_find_older_directory+0x18>
					copy_content( (uint8_t *)&string[0] ,
  402282:	f8df b050 	ldr.w	fp, [pc, #80]	; 4022d4 <sdcard_find_older_directory+0xb8>
  402286:	e00b      	b.n	4022a0 <sdcard_find_older_directory+0x84>
			for ( i = 0 ; i < STRING_MAX ; i++) {
  402288:	4a0f      	ldr	r2, [pc, #60]	; (4022c8 <sdcard_find_older_directory+0xac>)
  40228a:	7813      	ldrb	r3, [r2, #0]
  40228c:	3301      	adds	r3, #1
  40228e:	b2db      	uxtb	r3, r3
  402290:	7013      	strb	r3, [r2, #0]
  402292:	f013 0f80 	tst.w	r3, #128	; 0x80
  402296:	d1cd      	bne.n	402234 <sdcard_find_older_directory+0x18>
				if ( string[i] > dir_name[i] )
  402298:	5cea      	ldrb	r2, [r5, r3]
  40229a:	5ce3      	ldrb	r3, [r4, r3]
  40229c:	429a      	cmp	r2, r3
  40229e:	d8c9      	bhi.n	402234 <sdcard_find_older_directory+0x18>
				else if ( string[i] < dir_name[i] ) {
  4022a0:	429a      	cmp	r2, r3
  4022a2:	d2f1      	bcs.n	402288 <sdcard_find_older_directory+0x6c>
					copy_content( (uint8_t *)&string[0] ,
  4022a4:	783a      	ldrb	r2, [r7, #0]
  4022a6:	4621      	mov	r1, r4
  4022a8:	4628      	mov	r0, r5
  4022aa:	47d8      	blx	fp
  4022ac:	e7ec      	b.n	402288 <sdcard_find_older_directory+0x6c>
  4022ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4022b2:	bf00      	nop
  4022b4:	20001d7c 	.word	0x20001d7c
  4022b8:	20000b61 	.word	0x20000b61
  4022bc:	20001ccc 	.word	0x20001ccc
  4022c0:	2000126c 	.word	0x2000126c
  4022c4:	00409669 	.word	0x00409669
  4022c8:	20000b60 	.word	0x20000b60
  4022cc:	00407439 	.word	0x00407439
  4022d0:	004021c5 	.word	0x004021c5
  4022d4:	00403129 	.word	0x00403129

004022d8 <sdcard_find_older_month>:
uint8_t sdcard_find_older_month(char * dir_name) {
  4022d8:	b530      	push	{r4, r5, lr}
  4022da:	b083      	sub	sp, #12
  4022dc:	4604      	mov	r4, r0
	memset( (void *)dir_name , 0 , STRING_MAX );
  4022de:	2280      	movs	r2, #128	; 0x80
  4022e0:	2100      	movs	r1, #0
  4022e2:	4b28      	ldr	r3, [pc, #160]	; (402384 <sdcard_find_older_month+0xac>)
  4022e4:	4798      	blx	r3
	sprintf( (char *)dir_name ,"%s" , "0:/");
  4022e6:	4b28      	ldr	r3, [pc, #160]	; (402388 <sdcard_find_older_month+0xb0>)
  4022e8:	6818      	ldr	r0, [r3, #0]
  4022ea:	6020      	str	r0, [r4, #0]
	if (FR_OK != f_opendir ( (DIR *)&sdcard_directory , &dir_name[0] ))
  4022ec:	4621      	mov	r1, r4
  4022ee:	4827      	ldr	r0, [pc, #156]	; (40238c <sdcard_find_older_month+0xb4>)
  4022f0:	4b27      	ldr	r3, [pc, #156]	; (402390 <sdcard_find_older_month+0xb8>)
  4022f2:	4798      	blx	r3
  4022f4:	b110      	cbz	r0, 4022fc <sdcard_find_older_month+0x24>
		return 0; // Go out since there was a problem.
  4022f6:	2000      	movs	r0, #0
}
  4022f8:	b003      	add	sp, #12
  4022fa:	bd30      	pop	{r4, r5, pc}
	temp_length = calculate_string_length( (uint8_t *)&dir_name[0] , STRING_MAX );
  4022fc:	2180      	movs	r1, #128	; 0x80
  4022fe:	4620      	mov	r0, r4
  402300:	4b24      	ldr	r3, [pc, #144]	; (402394 <sdcard_find_older_month+0xbc>)
  402302:	4798      	blx	r3
  402304:	f88d 0007 	strb.w	r0, [sp, #7]
	sdcard_find_older_directory( &dir_name[temp_length] );
  402308:	f89d 0007 	ldrb.w	r0, [sp, #7]
  40230c:	4420      	add	r0, r4
  40230e:	4b22      	ldr	r3, [pc, #136]	; (402398 <sdcard_find_older_month+0xc0>)
  402310:	4798      	blx	r3
	if (FR_OK != f_opendir ( (DIR *)&sdcard_directory , &dir_name[0] ))
  402312:	4621      	mov	r1, r4
  402314:	481d      	ldr	r0, [pc, #116]	; (40238c <sdcard_find_older_month+0xb4>)
  402316:	4b1e      	ldr	r3, [pc, #120]	; (402390 <sdcard_find_older_month+0xb8>)
  402318:	4798      	blx	r3
  40231a:	b108      	cbz	r0, 402320 <sdcard_find_older_month+0x48>
		return 0; // Go out since there was a problem.
  40231c:	2000      	movs	r0, #0
  40231e:	e7eb      	b.n	4022f8 <sdcard_find_older_month+0x20>
	temp_length = calculate_string_length( (uint8_t *)&dir_name[0] , STRING_MAX );
  402320:	2180      	movs	r1, #128	; 0x80
  402322:	4620      	mov	r0, r4
  402324:	4d1b      	ldr	r5, [pc, #108]	; (402394 <sdcard_find_older_month+0xbc>)
  402326:	47a8      	blx	r5
  402328:	f88d 0007 	strb.w	r0, [sp, #7]
	dir_name[temp_length] = 47; // 47->"/"
  40232c:	f89d 3007 	ldrb.w	r3, [sp, #7]
  402330:	b2db      	uxtb	r3, r3
  402332:	222f      	movs	r2, #47	; 0x2f
  402334:	54e2      	strb	r2, [r4, r3]
	sdcard_find_older_directory( &dir_name[temp_length+1] );
  402336:	f89d 0007 	ldrb.w	r0, [sp, #7]
  40233a:	3001      	adds	r0, #1
  40233c:	4420      	add	r0, r4
  40233e:	4b16      	ldr	r3, [pc, #88]	; (402398 <sdcard_find_older_month+0xc0>)
  402340:	4798      	blx	r3
	temp_length = calculate_string_length( (uint8_t *)&dir_name[0] , STRING_MAX );
  402342:	2180      	movs	r1, #128	; 0x80
  402344:	4620      	mov	r0, r4
  402346:	47a8      	blx	r5
  402348:	f88d 0007 	strb.w	r0, [sp, #7]
	if (dir_name[temp_length-1] == 0xFF ) {
  40234c:	f89d 3007 	ldrb.w	r3, [sp, #7]
  402350:	4423      	add	r3, r4
  402352:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  402356:	2bff      	cmp	r3, #255	; 0xff
  402358:	d003      	beq.n	402362 <sdcard_find_older_month+0x8a>
		return temp_length;	
  40235a:	f89d 0007 	ldrb.w	r0, [sp, #7]
  40235e:	b2c0      	uxtb	r0, r0
  402360:	e7ca      	b.n	4022f8 <sdcard_find_older_month+0x20>
		dir_name[temp_length-1] = 0;   // clear 0xFF
  402362:	f89d 3007 	ldrb.w	r3, [sp, #7]
  402366:	4423      	add	r3, r4
  402368:	2200      	movs	r2, #0
  40236a:	f803 2c01 	strb.w	r2, [r3, #-1]
		dir_name[temp_length-2] = 0; // clear "/"
  40236e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  402372:	441c      	add	r4, r3
  402374:	f804 2c02 	strb.w	r2, [r4, #-2]
		return temp_length-2;
  402378:	f89d 0007 	ldrb.w	r0, [sp, #7]
  40237c:	3802      	subs	r0, #2
  40237e:	b2c0      	uxtb	r0, r0
  402380:	e7ba      	b.n	4022f8 <sdcard_find_older_month+0x20>
  402382:	bf00      	nop
  402384:	00409669 	.word	0x00409669
  402388:	0040d4e8 	.word	0x0040d4e8
  40238c:	20001ccc 	.word	0x20001ccc
  402390:	004073b9 	.word	0x004073b9
  402394:	00403221 	.word	0x00403221
  402398:	0040221d 	.word	0x0040221d

0040239c <sdcard_check_free_space_and_update_directory_to_remove>:
void sdcard_check_free_space_and_update_directory_to_remove(void) {
  40239c:	b510      	push	{r4, lr}
	data_MB = sdcard_get_total_mbytes_req() - sdcard_get_free_mbytes_req();
  40239e:	4b08      	ldr	r3, [pc, #32]	; (4023c0 <sdcard_check_free_space_and_update_directory_to_remove+0x24>)
  4023a0:	4798      	blx	r3
  4023a2:	4604      	mov	r4, r0
  4023a4:	4b07      	ldr	r3, [pc, #28]	; (4023c4 <sdcard_check_free_space_and_update_directory_to_remove+0x28>)
  4023a6:	4798      	blx	r3
	if (data_MB > unit_config.sdcard_memory_max_MB)
  4023a8:	4b07      	ldr	r3, [pc, #28]	; (4023c8 <sdcard_check_free_space_and_update_directory_to_remove+0x2c>)
  4023aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	data_MB = sdcard_get_total_mbytes_req() - sdcard_get_free_mbytes_req();
  4023ac:	1a20      	subs	r0, r4, r0
	if (data_MB > unit_config.sdcard_memory_max_MB)
  4023ae:	4298      	cmp	r0, r3
  4023b0:	dc00      	bgt.n	4023b4 <sdcard_check_free_space_and_update_directory_to_remove+0x18>
  4023b2:	bd10      	pop	{r4, pc}
		dir_remove_name_length = sdcard_find_older_month(&dir_remove_name[0]);
  4023b4:	4805      	ldr	r0, [pc, #20]	; (4023cc <sdcard_check_free_space_and_update_directory_to_remove+0x30>)
  4023b6:	4b06      	ldr	r3, [pc, #24]	; (4023d0 <sdcard_check_free_space_and_update_directory_to_remove+0x34>)
  4023b8:	4798      	blx	r3
  4023ba:	4b06      	ldr	r3, [pc, #24]	; (4023d4 <sdcard_check_free_space_and_update_directory_to_remove+0x38>)
  4023bc:	7018      	strb	r0, [r3, #0]
}
  4023be:	e7f8      	b.n	4023b2 <sdcard_check_free_space_and_update_directory_to_remove+0x16>
  4023c0:	004020e9 	.word	0x004020e9
  4023c4:	00402115 	.word	0x00402115
  4023c8:	20001db0 	.word	0x20001db0
  4023cc:	20001cfc 	.word	0x20001cfc
  4023d0:	004022d9 	.word	0x004022d9
  4023d4:	20000b39 	.word	0x20000b39

004023d8 <sdcard_remove_directory>:
void sdcard_remove_directory(void) {
  4023d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	memset( (void *)&temp_name , 0 , sizeof(temp_name) );
  4023dc:	4d25      	ldr	r5, [pc, #148]	; (402474 <sdcard_remove_directory+0x9c>)
  4023de:	2280      	movs	r2, #128	; 0x80
  4023e0:	2100      	movs	r1, #0
  4023e2:	4628      	mov	r0, r5
  4023e4:	4b24      	ldr	r3, [pc, #144]	; (402478 <sdcard_remove_directory+0xa0>)
  4023e6:	4798      	blx	r3
	copy_content( (uint8_t *)dir_remove_name ,
  4023e8:	4c24      	ldr	r4, [pc, #144]	; (40247c <sdcard_remove_directory+0xa4>)
  4023ea:	7822      	ldrb	r2, [r4, #0]
  4023ec:	4629      	mov	r1, r5
  4023ee:	4824      	ldr	r0, [pc, #144]	; (402480 <sdcard_remove_directory+0xa8>)
  4023f0:	4b24      	ldr	r3, [pc, #144]	; (402484 <sdcard_remove_directory+0xac>)
  4023f2:	4798      	blx	r3
	temp_name_length = dir_remove_name_length;
  4023f4:	7822      	ldrb	r2, [r4, #0]
  4023f6:	4b24      	ldr	r3, [pc, #144]	; (402488 <sdcard_remove_directory+0xb0>)
  4023f8:	701a      	strb	r2, [r3, #0]
  4023fa:	240a      	movs	r4, #10
		res = f_unlink ( (char const *)&temp_name );
  4023fc:	462e      	mov	r6, r5
  4023fe:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 4024a0 <sdcard_remove_directory+0xc8>
  402402:	4f22      	ldr	r7, [pc, #136]	; (40248c <sdcard_remove_directory+0xb4>)
  402404:	4630      	mov	r0, r6
  402406:	47c0      	blx	r8
  402408:	7038      	strb	r0, [r7, #0]
		if (res == FR_OK)
  40240a:	2800      	cmp	r0, #0
  40240c:	d02f      	beq.n	40246e <sdcard_remove_directory+0x96>
		else if (res != FR_DENIED)
  40240e:	2807      	cmp	r0, #7
  402410:	d12a      	bne.n	402468 <sdcard_remove_directory+0x90>
		if (FR_OK != f_opendir ( (DIR *)&sdcard_directory , (const TCHAR *)&temp_name ) )
  402412:	4631      	mov	r1, r6
  402414:	481e      	ldr	r0, [pc, #120]	; (402490 <sdcard_remove_directory+0xb8>)
  402416:	4b1f      	ldr	r3, [pc, #124]	; (402494 <sdcard_remove_directory+0xbc>)
  402418:	4798      	blx	r3
  40241a:	bb28      	cbnz	r0, 402468 <sdcard_remove_directory+0x90>
		if (FR_OK != f_readdir ( (DIR *)&sdcard_directory , &sdcard_file_info ))
  40241c:	491e      	ldr	r1, [pc, #120]	; (402498 <sdcard_remove_directory+0xc0>)
  40241e:	481c      	ldr	r0, [pc, #112]	; (402490 <sdcard_remove_directory+0xb8>)
  402420:	4b1e      	ldr	r3, [pc, #120]	; (40249c <sdcard_remove_directory+0xc4>)
  402422:	4798      	blx	r3
  402424:	bb00      	cbnz	r0, 402468 <sdcard_remove_directory+0x90>
		if (FR_OK != f_readdir ( (DIR *)&sdcard_directory , &sdcard_file_info ))
  402426:	491c      	ldr	r1, [pc, #112]	; (402498 <sdcard_remove_directory+0xc0>)
  402428:	4819      	ldr	r0, [pc, #100]	; (402490 <sdcard_remove_directory+0xb8>)
  40242a:	4b1c      	ldr	r3, [pc, #112]	; (40249c <sdcard_remove_directory+0xc4>)
  40242c:	4798      	blx	r3
  40242e:	b9d8      	cbnz	r0, 402468 <sdcard_remove_directory+0x90>
		if (FR_OK != f_readdir ( (DIR *)&sdcard_directory , &sdcard_file_info ))
  402430:	4919      	ldr	r1, [pc, #100]	; (402498 <sdcard_remove_directory+0xc0>)
  402432:	4817      	ldr	r0, [pc, #92]	; (402490 <sdcard_remove_directory+0xb8>)
  402434:	4b19      	ldr	r3, [pc, #100]	; (40249c <sdcard_remove_directory+0xc4>)
  402436:	4798      	blx	r3
  402438:	b9b0      	cbnz	r0, 402468 <sdcard_remove_directory+0x90>
		temp_name[temp_name_length] = 0x2F;
  40243a:	4d13      	ldr	r5, [pc, #76]	; (402488 <sdcard_remove_directory+0xb0>)
  40243c:	782a      	ldrb	r2, [r5, #0]
  40243e:	232f      	movs	r3, #47	; 0x2f
  402440:	54b3      	strb	r3, [r6, r2]
		temp_name_length += 1;
  402442:	3201      	adds	r2, #1
  402444:	b2d2      	uxtb	r2, r2
  402446:	702a      	strb	r2, [r5, #0]
		temp_name_length += sdcard_file_get_name(  (DIR *)&sdcard_directory, &sdcard_file_info , (uint8_t *)&temp_name[temp_name_length] , STRING_MAX - temp_name_length );
  402448:	f1c2 0380 	rsb	r3, r2, #128	; 0x80
  40244c:	b2db      	uxtb	r3, r3
  40244e:	4432      	add	r2, r6
  402450:	4911      	ldr	r1, [pc, #68]	; (402498 <sdcard_remove_directory+0xc0>)
  402452:	480f      	ldr	r0, [pc, #60]	; (402490 <sdcard_remove_directory+0xb8>)
  402454:	f8df 904c 	ldr.w	r9, [pc, #76]	; 4024a4 <sdcard_remove_directory+0xcc>
  402458:	47c8      	blx	r9
  40245a:	782b      	ldrb	r3, [r5, #0]
  40245c:	4418      	add	r0, r3
  40245e:	7028      	strb	r0, [r5, #0]
  402460:	3c01      	subs	r4, #1
	while (loop_count) {
  402462:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
  402466:	d1cd      	bne.n	402404 <sdcard_remove_directory+0x2c>
	dir_remove_name_length = 0;
  402468:	2200      	movs	r2, #0
  40246a:	4b04      	ldr	r3, [pc, #16]	; (40247c <sdcard_remove_directory+0xa4>)
  40246c:	701a      	strb	r2, [r3, #0]
  40246e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402472:	bf00      	nop
  402474:	20000b64 	.word	0x20000b64
  402478:	00409669 	.word	0x00409669
  40247c:	20000b39 	.word	0x20000b39
  402480:	20001cfc 	.word	0x20001cfc
  402484:	00403129 	.word	0x00403129
  402488:	20000be4 	.word	0x20000be4
  40248c:	20000f6c 	.word	0x20000f6c
  402490:	20001ccc 	.word	0x20001ccc
  402494:	004073b9 	.word	0x004073b9
  402498:	20001d7c 	.word	0x20001d7c
  40249c:	00407439 	.word	0x00407439
  4024a0:	0040760d 	.word	0x0040760d
  4024a4:	004021c5 	.word	0x004021c5

004024a8 <sdcard_background>:
void sdcard_background(void) {
  4024a8:	b508      	push	{r3, lr}
		status = sd_mmc_test_unit_ready(0);
  4024aa:	2000      	movs	r0, #0
  4024ac:	4b64      	ldr	r3, [pc, #400]	; (402640 <sdcard_background+0x198>)
  4024ae:	4798      	blx	r3
  4024b0:	4b64      	ldr	r3, [pc, #400]	; (402644 <sdcard_background+0x19c>)
  4024b2:	7018      	strb	r0, [r3, #0]
		if (sdcard_flags_status & SDCARD_FLAGS_STATUS_ENABLE_SDCARD ) {
  4024b4:	4b64      	ldr	r3, [pc, #400]	; (402648 <sdcard_background+0x1a0>)
  4024b6:	781b      	ldrb	r3, [r3, #0]
  4024b8:	f013 0f01 	tst.w	r3, #1
  4024bc:	d049      	beq.n	402552 <sdcard_background+0xaa>
			if (!(sdcard_flags_status & SDCARD_FLAGS_STATUS_DETECT_SDCARD )) {
  4024be:	4b62      	ldr	r3, [pc, #392]	; (402648 <sdcard_background+0x1a0>)
  4024c0:	781b      	ldrb	r3, [r3, #0]
  4024c2:	f013 0f02 	tst.w	r3, #2
  4024c6:	d107      	bne.n	4024d8 <sdcard_background+0x30>
				if (CTRL_GOOD == status)
  4024c8:	2800      	cmp	r0, #0
  4024ca:	d145      	bne.n	402558 <sdcard_background+0xb0>
					sdcard_flags_status |= SDCARD_FLAGS_STATUS_DETECT_SDCARD;
  4024cc:	4a5e      	ldr	r2, [pc, #376]	; (402648 <sdcard_background+0x1a0>)
  4024ce:	7813      	ldrb	r3, [r2, #0]
  4024d0:	f043 0302 	orr.w	r3, r3, #2
  4024d4:	7013      	strb	r3, [r2, #0]
  4024d6:	e03f      	b.n	402558 <sdcard_background+0xb0>
			else if	(!(sdcard_flags_status & SDCARD_FLAGS_STATUS_LOGIC_MOUNT)) {
  4024d8:	4b5b      	ldr	r3, [pc, #364]	; (402648 <sdcard_background+0x1a0>)
  4024da:	781b      	ldrb	r3, [r3, #0]
  4024dc:	f013 0f04 	tst.w	r3, #4
  4024e0:	d010      	beq.n	402504 <sdcard_background+0x5c>
			else if	(!(sdcard_flags_status & SDCARD_FLAGS_STATUS_READ_UNIT_CONFIG)) {
  4024e2:	4b59      	ldr	r3, [pc, #356]	; (402648 <sdcard_background+0x1a0>)
  4024e4:	781b      	ldrb	r3, [r3, #0]
  4024e6:	f013 0f08 	tst.w	r3, #8
  4024ea:	d014      	beq.n	402516 <sdcard_background+0x6e>
			else if	(!(sdcard_flags_status & SDCARD_FLAGS_STATUS_READ_UNIT_CALIBRATION)) {
  4024ec:	4b56      	ldr	r3, [pc, #344]	; (402648 <sdcard_background+0x1a0>)
  4024ee:	781b      	ldrb	r3, [r3, #0]
  4024f0:	f013 0f10 	tst.w	r3, #16
  4024f4:	d018      	beq.n	402528 <sdcard_background+0x80>
				if (CTRL_GOOD == status)
  4024f6:	bb30      	cbnz	r0, 402546 <sdcard_background+0x9e>
					sdcard_flags_status |= SDCARD_FLAGS_STATUS_CARD_READY;
  4024f8:	4a53      	ldr	r2, [pc, #332]	; (402648 <sdcard_background+0x1a0>)
  4024fa:	7813      	ldrb	r3, [r2, #0]
  4024fc:	f043 0320 	orr.w	r3, r3, #32
  402500:	7013      	strb	r3, [r2, #0]
  402502:	e029      	b.n	402558 <sdcard_background+0xb0>
				if (FR_OK == sdcard_mount_logic_drive())
  402504:	4b51      	ldr	r3, [pc, #324]	; (40264c <sdcard_background+0x1a4>)
  402506:	4798      	blx	r3
  402508:	bb30      	cbnz	r0, 402558 <sdcard_background+0xb0>
					sdcard_flags_status |= SDCARD_FLAGS_STATUS_LOGIC_MOUNT;
  40250a:	4a4f      	ldr	r2, [pc, #316]	; (402648 <sdcard_background+0x1a0>)
  40250c:	7813      	ldrb	r3, [r2, #0]
  40250e:	f043 0304 	orr.w	r3, r3, #4
  402512:	7013      	strb	r3, [r2, #0]
  402514:	e020      	b.n	402558 <sdcard_background+0xb0>
				if (sdcard_check_and_read_unit_config())
  402516:	4b4e      	ldr	r3, [pc, #312]	; (402650 <sdcard_background+0x1a8>)
  402518:	4798      	blx	r3
  40251a:	b1e8      	cbz	r0, 402558 <sdcard_background+0xb0>
					sdcard_flags_status |= SDCARD_FLAGS_STATUS_READ_UNIT_CONFIG;
  40251c:	4a4a      	ldr	r2, [pc, #296]	; (402648 <sdcard_background+0x1a0>)
  40251e:	7813      	ldrb	r3, [r2, #0]
  402520:	f043 0308 	orr.w	r3, r3, #8
  402524:	7013      	strb	r3, [r2, #0]
  402526:	e017      	b.n	402558 <sdcard_background+0xb0>
				if (sdcard_check_and_read_unit_calibration()) {
  402528:	4b4a      	ldr	r3, [pc, #296]	; (402654 <sdcard_background+0x1ac>)
  40252a:	4798      	blx	r3
  40252c:	b1a0      	cbz	r0, 402558 <sdcard_background+0xb0>
					sdcard_flags_status |= SDCARD_FLAGS_STATUS_READ_UNIT_CALIBRATION;
  40252e:	4a46      	ldr	r2, [pc, #280]	; (402648 <sdcard_background+0x1a0>)
  402530:	7813      	ldrb	r3, [r2, #0]
  402532:	f043 0310 	orr.w	r3, r3, #16
  402536:	7013      	strb	r3, [r2, #0]
					comm_flags |= SETTINGS_COMM_FLAG_UNIT_CONFIG_REQUEST_MASK | SETTINGS_COMM_FLAG_UNIT_CALIBRATION_REQUEST_MASK;
  402538:	4a47      	ldr	r2, [pc, #284]	; (402658 <sdcard_background+0x1b0>)
  40253a:	8813      	ldrh	r3, [r2, #0]
  40253c:	b29b      	uxth	r3, r3
  40253e:	f043 0318 	orr.w	r3, r3, #24
  402542:	8013      	strh	r3, [r2, #0]
  402544:	e008      	b.n	402558 <sdcard_background+0xb0>
					sdcard_flags_status &= 0x1; // only save fist flag
  402546:	4a40      	ldr	r2, [pc, #256]	; (402648 <sdcard_background+0x1a0>)
  402548:	7813      	ldrb	r3, [r2, #0]
  40254a:	f003 0301 	and.w	r3, r3, #1
  40254e:	7013      	strb	r3, [r2, #0]
  402550:	e002      	b.n	402558 <sdcard_background+0xb0>
			sdcard_flags_status = 0;
  402552:	2200      	movs	r2, #0
  402554:	4b3c      	ldr	r3, [pc, #240]	; (402648 <sdcard_background+0x1a0>)
  402556:	701a      	strb	r2, [r3, #0]
		if (sdcard_flags_status & SDCARD_FLAGS_STATUS_CARD_READY)
  402558:	4b3b      	ldr	r3, [pc, #236]	; (402648 <sdcard_background+0x1a0>)
  40255a:	781b      	ldrb	r3, [r3, #0]
  40255c:	f013 0f20 	tst.w	r3, #32
			led_green_on();
  402560:	f04f 0010 	mov.w	r0, #16
  402564:	bf14      	ite	ne
  402566:	4b3d      	ldrne	r3, [pc, #244]	; (40265c <sdcard_background+0x1b4>)
			led_green_off();
  402568:	4b3d      	ldreq	r3, [pc, #244]	; (402660 <sdcard_background+0x1b8>)
  40256a:	4798      	blx	r3
	if (sdcard_flags_status & SDCARD_FLAGS_STATUS_CARD_READY) {
  40256c:	4b36      	ldr	r3, [pc, #216]	; (402648 <sdcard_background+0x1a0>)
  40256e:	781b      	ldrb	r3, [r3, #0]
  402570:	f013 0f20 	tst.w	r3, #32
  402574:	d021      	beq.n	4025ba <sdcard_background+0x112>
		if (sdcard_flags_task & SDCARD_FLAGS_TASK_SAVE_TRENDS_150CYCLES ) {
  402576:	4b3b      	ldr	r3, [pc, #236]	; (402664 <sdcard_background+0x1bc>)
  402578:	781b      	ldrb	r3, [r3, #0]
  40257a:	f013 0f01 	tst.w	r3, #1
  40257e:	d11d      	bne.n	4025bc <sdcard_background+0x114>
		else if (sdcard_flags_task & SDCARD_FLAGS_TASK_SAVE_TRENDS_5MINUTES ) {
  402580:	4b38      	ldr	r3, [pc, #224]	; (402664 <sdcard_background+0x1bc>)
  402582:	781b      	ldrb	r3, [r3, #0]
  402584:	f013 0f02 	tst.w	r3, #2
  402588:	d124      	bne.n	4025d4 <sdcard_background+0x12c>
		else if (sdcard_flags_task & SDCARD_FLAGS_TASK_SAVE_EVENT_DET_INFO ) {
  40258a:	4b36      	ldr	r3, [pc, #216]	; (402664 <sdcard_background+0x1bc>)
  40258c:	781b      	ldrb	r3, [r3, #0]
  40258e:	f013 0f04 	tst.w	r3, #4
  402592:	d12b      	bne.n	4025ec <sdcard_background+0x144>
		else if (sdcard_flags_task & SDCARD_FLAGS_TASK_SAVE_EVENT_BUFFER_INFO ) {
  402594:	4b33      	ldr	r3, [pc, #204]	; (402664 <sdcard_background+0x1bc>)
  402596:	781b      	ldrb	r3, [r3, #0]
  402598:	f013 0f08 	tst.w	r3, #8
  40259c:	d131      	bne.n	402602 <sdcard_background+0x15a>
		else if (sdcard_flags_task & SDCARD_FLAGS_TASK_SAVE_EVENT_BUFFER ) {
  40259e:	4b31      	ldr	r3, [pc, #196]	; (402664 <sdcard_background+0x1bc>)
  4025a0:	781b      	ldrb	r3, [r3, #0]
  4025a2:	f013 0f10 	tst.w	r3, #16
  4025a6:	d138      	bne.n	40261a <sdcard_background+0x172>
		if (dir_remove_name_length)
  4025a8:	4b2f      	ldr	r3, [pc, #188]	; (402668 <sdcard_background+0x1c0>)
  4025aa:	781b      	ldrb	r3, [r3, #0]
  4025ac:	2b00      	cmp	r3, #0
  4025ae:	d140      	bne.n	402632 <sdcard_background+0x18a>
		else if (unit_config.mode_flags & UNIT_CONFIG_MODE_SDCARD_DISCARD_ENABLE)
  4025b0:	4b2e      	ldr	r3, [pc, #184]	; (40266c <sdcard_background+0x1c4>)
  4025b2:	681b      	ldr	r3, [r3, #0]
  4025b4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4025b8:	d13e      	bne.n	402638 <sdcard_background+0x190>
  4025ba:	bd08      	pop	{r3, pc}
			if ( 1 == sdcard_save_trends( (trend_t *)&sdcard_trend_150cycles , 0 ) )
  4025bc:	2100      	movs	r1, #0
  4025be:	482c      	ldr	r0, [pc, #176]	; (402670 <sdcard_background+0x1c8>)
  4025c0:	4b2c      	ldr	r3, [pc, #176]	; (402674 <sdcard_background+0x1cc>)
  4025c2:	4798      	blx	r3
  4025c4:	2800      	cmp	r0, #0
  4025c6:	d0ef      	beq.n	4025a8 <sdcard_background+0x100>
				sdcard_flags_task &= ~SDCARD_FLAGS_TASK_SAVE_TRENDS_150CYCLES;
  4025c8:	4a26      	ldr	r2, [pc, #152]	; (402664 <sdcard_background+0x1bc>)
  4025ca:	7813      	ldrb	r3, [r2, #0]
  4025cc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  4025d0:	7013      	strb	r3, [r2, #0]
  4025d2:	e7e9      	b.n	4025a8 <sdcard_background+0x100>
			if ( 1 == sdcard_save_trends( (trend_t *)&sdcard_trend_5minutes , 1 ) )
  4025d4:	2101      	movs	r1, #1
  4025d6:	4828      	ldr	r0, [pc, #160]	; (402678 <sdcard_background+0x1d0>)
  4025d8:	4b26      	ldr	r3, [pc, #152]	; (402674 <sdcard_background+0x1cc>)
  4025da:	4798      	blx	r3
  4025dc:	2800      	cmp	r0, #0
  4025de:	d0e3      	beq.n	4025a8 <sdcard_background+0x100>
				sdcard_flags_task &= ~SDCARD_FLAGS_TASK_SAVE_TRENDS_5MINUTES;
  4025e0:	4a20      	ldr	r2, [pc, #128]	; (402664 <sdcard_background+0x1bc>)
  4025e2:	7813      	ldrb	r3, [r2, #0]
  4025e4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
  4025e8:	7013      	strb	r3, [r2, #0]
  4025ea:	e7dd      	b.n	4025a8 <sdcard_background+0x100>
			if ( 1 == sdcard_save_event_det_info( (event_det_t *)&sdcard_event_det ) )
  4025ec:	4823      	ldr	r0, [pc, #140]	; (40267c <sdcard_background+0x1d4>)
  4025ee:	4b24      	ldr	r3, [pc, #144]	; (402680 <sdcard_background+0x1d8>)
  4025f0:	4798      	blx	r3
  4025f2:	2800      	cmp	r0, #0
  4025f4:	d0d8      	beq.n	4025a8 <sdcard_background+0x100>
				sdcard_flags_task &= ~SDCARD_FLAGS_TASK_SAVE_EVENT_DET_INFO;
  4025f6:	4a1b      	ldr	r2, [pc, #108]	; (402664 <sdcard_background+0x1bc>)
  4025f8:	7813      	ldrb	r3, [r2, #0]
  4025fa:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
  4025fe:	7013      	strb	r3, [r2, #0]
  402600:	e7d2      	b.n	4025a8 <sdcard_background+0x100>
			if ( 1 == sdcard_save_event_buffer( (uint16_t *)&sdcard_event_buffer_info[0] , NULL ) )
  402602:	2100      	movs	r1, #0
  402604:	481f      	ldr	r0, [pc, #124]	; (402684 <sdcard_background+0x1dc>)
  402606:	4b20      	ldr	r3, [pc, #128]	; (402688 <sdcard_background+0x1e0>)
  402608:	4798      	blx	r3
  40260a:	2800      	cmp	r0, #0
  40260c:	d0cc      	beq.n	4025a8 <sdcard_background+0x100>
				sdcard_flags_task &= ~SDCARD_FLAGS_TASK_SAVE_EVENT_BUFFER_INFO;
  40260e:	4a15      	ldr	r2, [pc, #84]	; (402664 <sdcard_background+0x1bc>)
  402610:	7813      	ldrb	r3, [r2, #0]
  402612:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  402616:	7013      	strb	r3, [r2, #0]
  402618:	e7c6      	b.n	4025a8 <sdcard_background+0x100>
			if ( 1 == sdcard_save_event_buffer( NULL , (int16_t *)&sdcard_event_buffer[0] ) )
  40261a:	491c      	ldr	r1, [pc, #112]	; (40268c <sdcard_background+0x1e4>)
  40261c:	2000      	movs	r0, #0
  40261e:	4b1a      	ldr	r3, [pc, #104]	; (402688 <sdcard_background+0x1e0>)
  402620:	4798      	blx	r3
  402622:	2800      	cmp	r0, #0
  402624:	d0c0      	beq.n	4025a8 <sdcard_background+0x100>
				sdcard_flags_task &= ~SDCARD_FLAGS_TASK_SAVE_EVENT_BUFFER;
  402626:	4a0f      	ldr	r2, [pc, #60]	; (402664 <sdcard_background+0x1bc>)
  402628:	7813      	ldrb	r3, [r2, #0]
  40262a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
  40262e:	7013      	strb	r3, [r2, #0]
  402630:	e7ba      	b.n	4025a8 <sdcard_background+0x100>
			sdcard_remove_directory();
  402632:	4b17      	ldr	r3, [pc, #92]	; (402690 <sdcard_background+0x1e8>)
  402634:	4798      	blx	r3
  402636:	bd08      	pop	{r3, pc}
			sdcard_check_free_space_and_update_directory_to_remove();
  402638:	4b16      	ldr	r3, [pc, #88]	; (402694 <sdcard_background+0x1ec>)
  40263a:	4798      	blx	r3
}
  40263c:	e7bd      	b.n	4025ba <sdcard_background+0x112>
  40263e:	bf00      	nop
  402640:	0040412d 	.word	0x0040412d
  402644:	20001d9c 	.word	0x20001d9c
  402648:	20001cc8 	.word	0x20001cc8
  40264c:	00400fc9 	.word	0x00400fc9
  402650:	00401e5d 	.word	0x00401e5d
  402654:	00401f29 	.word	0x00401f29
  402658:	20001e54 	.word	0x20001e54
  40265c:	0040498b 	.word	0x0040498b
  402660:	004049a5 	.word	0x004049a5
  402664:	20001cf0 	.word	0x20001cf0
  402668:	20000b39 	.word	0x20000b39
  40266c:	20001db0 	.word	0x20001db0
  402670:	20001830 	.word	0x20001830
  402674:	00401329 	.word	0x00401329
  402678:	20001300 	.word	0x20001300
  40267c:	20001818 	.word	0x20001818
  402680:	004017d9 	.word	0x004017d9
  402684:	20001cf4 	.word	0x20001cf4
  402688:	00401c19 	.word	0x00401c19
  40268c:	200012ec 	.word	0x200012ec
  402690:	004023d9 	.word	0x004023d9
  402694:	0040239d 	.word	0x0040239d

00402698 <backup_mode_prepare>:
/**************************** GLOBAL VARIABLES *******************************/

/**************************** LOCAL FUNCTIONS ********************************/

void backup_mode_prepare(void)
{
  402698:	b570      	push	{r4, r5, r6, lr}
	// Disable interrupts
	system_disable_interrupt();
  40269a:	4b1d      	ldr	r3, [pc, #116]	; (402710 <backup_mode_prepare+0x78>)
  40269c:	4798      	blx	r3

	// Configure all PIOs as input, disable pull ups and pull downs
	gpio_configure_group( PIOA , PIO_MASK_PORT , (PIO_INPUT | PIO_DEFAULT));
  40269e:	4c1d      	ldr	r4, [pc, #116]	; (402714 <backup_mode_prepare+0x7c>)
  4026a0:	f04f 5220 	mov.w	r2, #671088640	; 0x28000000
  4026a4:	f04f 31ff 	mov.w	r1, #4294967295
  4026a8:	4620      	mov	r0, r4
  4026aa:	4d1b      	ldr	r5, [pc, #108]	; (402718 <backup_mode_prepare+0x80>)
  4026ac:	47a8      	blx	r5
	gpio_configure_group( PIOB , PIO_MASK_PORT , (PIO_INPUT | PIO_DEFAULT));
  4026ae:	4e1b      	ldr	r6, [pc, #108]	; (40271c <backup_mode_prepare+0x84>)
  4026b0:	f04f 5220 	mov.w	r2, #671088640	; 0x28000000
  4026b4:	f04f 31ff 	mov.w	r1, #4294967295
  4026b8:	4630      	mov	r0, r6
  4026ba:	47a8      	blx	r5
	pio_pull_up(PIOA, PIO_MASK_PORT , false );
  4026bc:	2200      	movs	r2, #0
  4026be:	f04f 31ff 	mov.w	r1, #4294967295
  4026c2:	4620      	mov	r0, r4
  4026c4:	4d16      	ldr	r5, [pc, #88]	; (402720 <backup_mode_prepare+0x88>)
  4026c6:	47a8      	blx	r5
	pio_pull_up(PIOB, PIO_MASK_PORT , false );
  4026c8:	2200      	movs	r2, #0
  4026ca:	f04f 31ff 	mov.w	r1, #4294967295
  4026ce:	4630      	mov	r0, r6
  4026d0:	47a8      	blx	r5
	pio_pull_down(PIOA, PIO_MASK_PORT , false );
  4026d2:	2200      	movs	r2, #0
  4026d4:	f04f 31ff 	mov.w	r1, #4294967295
  4026d8:	4620      	mov	r0, r4
  4026da:	4d12      	ldr	r5, [pc, #72]	; (402724 <backup_mode_prepare+0x8c>)
  4026dc:	47a8      	blx	r5
	pio_pull_down(PIOB, PIO_MASK_PORT , false );
  4026de:	2200      	movs	r2, #0
  4026e0:	f04f 31ff 	mov.w	r1, #4294967295
  4026e4:	4630      	mov	r0, r6
  4026e6:	47a8      	blx	r5
			
	// Configure PIO for wake up
	pio_pull_down(PIOA, PIO_PA0 , true );
  4026e8:	2201      	movs	r2, #1
  4026ea:	4611      	mov	r1, r2
  4026ec:	4620      	mov	r0, r4
  4026ee:	47a8      	blx	r5
	
	// Disable all peripheral clocks 
	pmc_disable_all_periph_clk();
  4026f0:	4b0d      	ldr	r3, [pc, #52]	; (402728 <backup_mode_prepare+0x90>)
  4026f2:	4798      	blx	r3
	
	// Disable brown out detector and supply monitor
	supc_disable_brownout_detector( SUPC );	
  4026f4:	f504 64c2 	add.w	r4, r4, #1552	; 0x610
  4026f8:	4620      	mov	r0, r4
  4026fa:	4b0c      	ldr	r3, [pc, #48]	; (40272c <backup_mode_prepare+0x94>)
  4026fc:	4798      	blx	r3
	supc_set_monitor_sampling_period( SUPC , SUPC_SMMR_SMSMPL_SMD );
  4026fe:	2100      	movs	r1, #0
  402700:	4620      	mov	r0, r4
  402702:	4b0b      	ldr	r3, [pc, #44]	; (402730 <backup_mode_prepare+0x98>)
  402704:	4798      	blx	r3
	
	// Disable USB device clock and programmable clocks
	PMC->PMC_SCDR = PMC_SCDR_UDP | PMC_SCDR_PCK0 | PMC_SCDR_PCK1 | PMC_SCDR_PCK2;
  402706:	f44f 62f0 	mov.w	r2, #1920	; 0x780
  40270a:	4b0a      	ldr	r3, [pc, #40]	; (402734 <backup_mode_prepare+0x9c>)
  40270c:	605a      	str	r2, [r3, #4]
  40270e:	bd70      	pop	{r4, r5, r6, pc}
  402710:	0040362d 	.word	0x0040362d
  402714:	400e0e00 	.word	0x400e0e00
  402718:	00404ae1 	.word	0x00404ae1
  40271c:	400e1000 	.word	0x400e1000
  402720:	00404835 	.word	0x00404835
  402724:	00404941 	.word	0x00404941
  402728:	00404eb1 	.word	0x00404eb1
  40272c:	00402905 	.word	0x00402905
  402730:	0040292b 	.word	0x0040292b
  402734:	400e0400 	.word	0x400e0400

00402738 <enter_backup_mode>:
	
}

void enter_backup_mode(void)
{	
  402738:	b508      	push	{r3, lr}
	// Enable the GPIO for wake-up
	supc_set_wakeup_inputs( SUPC , SUPC_WUIR_WKUPEN0_ENABLE , SUPC_WUIR_WKUPT0_HIGH );
  40273a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  40273e:	2101      	movs	r1, #1
  402740:	4807      	ldr	r0, [pc, #28]	; (402760 <enter_backup_mode+0x28>)
  402742:	4b08      	ldr	r3, [pc, #32]	; (402764 <enter_backup_mode+0x2c>)
  402744:	4798      	blx	r3
//	supc_set_wakeup_mode( SUPC , SUPC_WUMR_SMEN );
	
	// Switch MCK to slow clock 
	pmc_switch_mck_to_sclk(PMC_MCKR_PRES_CLK_1);
  402746:	2000      	movs	r0, #0
  402748:	4b07      	ldr	r3, [pc, #28]	; (402768 <enter_backup_mode+0x30>)
  40274a:	4798      	blx	r3
	
	// Disable unused clock to save power - Disable fast RC oscillator and PLL
	pmc_osc_disable_fastrc();
  40274c:	4b07      	ldr	r3, [pc, #28]	; (40276c <enter_backup_mode+0x34>)
  40274e:	4798      	blx	r3
	pmc_osc_disable_xtal( 0 );
  402750:	2000      	movs	r0, #0
  402752:	4b07      	ldr	r3, [pc, #28]	; (402770 <enter_backup_mode+0x38>)
  402754:	4798      	blx	r3
	pmc_disable_pllack();
  402756:	4b07      	ldr	r3, [pc, #28]	; (402774 <enter_backup_mode+0x3c>)
  402758:	4798      	blx	r3
	
	// Enable back up mode
	pmc_enable_backupmode();
  40275a:	4b07      	ldr	r3, [pc, #28]	; (402778 <enter_backup_mode+0x40>)
  40275c:	4798      	blx	r3
  40275e:	bd08      	pop	{r3, pc}
  402760:	400e1410 	.word	0x400e1410
  402764:	0040294f 	.word	0x0040294f
  402768:	00404c89 	.word	0x00404c89
  40276c:	00404d91 	.word	0x00404d91
  402770:	00404dfd 	.word	0x00404dfd
  402774:	00404e3d 	.word	0x00404e3d
  402778:	00404edd 	.word	0x00404edd

0040277c <unit_config_set_default>:
/**************************** GLOBAL FUNCTIONS *******************************/

void unit_config_set_default(void) {

	// General
	unit_config.mode_flags = DEFAULT_MODE_FLAGS;
  40277c:	4b14      	ldr	r3, [pc, #80]	; (4027d0 <unit_config_set_default+0x54>)
  40277e:	4a15      	ldr	r2, [pc, #84]	; (4027d4 <unit_config_set_default+0x58>)
  402780:	601a      	str	r2, [r3, #0]

	// Event flags
	unit_config.event_flags = DEFAULT_EVENT_FLAGS;
  402782:	f240 72ff 	movw	r2, #2047	; 0x7ff
  402786:	605a      	str	r2, [r3, #4]

	// Sampling period set point
	unit_config.Ts_ticks_Q5_SP = DEFAULT_TS_TICKS_Q5_SP;
  402788:	4a13      	ldr	r2, [pc, #76]	; (4027d8 <unit_config_set_default+0x5c>)
  40278a:	609a      	str	r2, [r3, #8]

	// Sampling period controller
	unit_config.Controller_G0_Q10 = DEFAULT_CONTROLLER_G0_Q10;
  40278c:	4a13      	ldr	r2, [pc, #76]	; (4027dc <unit_config_set_default+0x60>)
  40278e:	60da      	str	r2, [r3, #12]
	unit_config.Controller_G1_Q10 = DEFAULT_CONTROLLER_G1_Q10;
  402790:	f5a2 02a2 	sub.w	r2, r2, #5308416	; 0x510000
  402794:	f5a2 722e 	sub.w	r2, r2, #696	; 0x2b8
  402798:	611a      	str	r2, [r3, #16]
	unit_config.Controller_G2_Q10 = DEFAULT_CONTROLLER_G2_Q10;
  40279a:	2200      	movs	r2, #0
  40279c:	615a      	str	r2, [r3, #20]

	// Sampling period limits
	unit_config.DTs_ticks_Q5_MAX = DEFAULT_DTS_TICKS_Q5_MAX;
  40279e:	4a10      	ldr	r2, [pc, #64]	; (4027e0 <unit_config_set_default+0x64>)
  4027a0:	619a      	str	r2, [r3, #24]
	unit_config.DTs_ticks_Q5_MIN = DEFAULT_DTS_TICKS_Q5_MIN;
  4027a2:	4a10      	ldr	r2, [pc, #64]	; (4027e4 <unit_config_set_default+0x68>)
  4027a4:	61da      	str	r2, [r3, #28]

	// channel gain
	unit_config.gain_volt = DEFAULT_GAIN_VOLT;
  4027a6:	f44f 72c8 	mov.w	r2, #400	; 0x190
  4027aa:	621a      	str	r2, [r3, #32]
	unit_config.gain_curr_A = DEFAULT_GAIN_CURR_A;
  4027ac:	625a      	str	r2, [r3, #36]	; 0x24
	unit_config.gain_curr_B = DEFAULT_GAIN_CURR_B;
  4027ae:	629a      	str	r2, [r3, #40]	; 0x28
	
	// sd-card memory
	unit_config.sdcard_memory_max_MB = DEFAULT_SDCARD_MEMORY_MB;
  4027b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4027b4:	62da      	str	r2, [r3, #44]	; 0x2c

	// Event detection and snapshot
	unit_config.event_RMS2_over_voltage_threshold  = DEFAULT_EVENT_RMS_OV_THR;
  4027b6:	4a0c      	ldr	r2, [pc, #48]	; (4027e8 <unit_config_set_default+0x6c>)
  4027b8:	631a      	str	r2, [r3, #48]	; 0x30
	unit_config.event_RMS2_under_voltage_threshold = DEFAULT_EVENT_RMS_UV_THR;
  4027ba:	4a0c      	ldr	r2, [pc, #48]	; (4027ec <unit_config_set_default+0x70>)
  4027bc:	635a      	str	r2, [r3, #52]	; 0x34
	unit_config.event_RMS2_over_current_threshold  = DEFAULT_EVENT_RMS_OC_THR;
  4027be:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
  4027c2:	639a      	str	r2, [r3, #56]	; 0x38
	unit_config.event_FREQ_over_freq_threshold = DEFAULT_EVENT_RMS_OF_THR;
  4027c4:	2234      	movs	r2, #52	; 0x34
  4027c6:	63da      	str	r2, [r3, #60]	; 0x3c
	unit_config.event_FREQ_under_freq_threshold = DEFAULT_EVENT_RMS_UF_THR;
  4027c8:	2230      	movs	r2, #48	; 0x30
  4027ca:	641a      	str	r2, [r3, #64]	; 0x40
  4027cc:	4770      	bx	lr
  4027ce:	bf00      	nop
  4027d0:	20001db0 	.word	0x20001db0
  4027d4:	00010121 	.word	0x00010121
  4027d8:	000b71b0 	.word	0x000b71b0
  4027dc:	00288e98 	.word	0x00288e98
  4027e0:	00017700 	.word	0x00017700
  4027e4:	fffe8900 	.word	0xfffe8900
  4027e8:	176cf41f 	.word	0x176cf41f
  4027ec:	0fae7d56 	.word	0x0fae7d56

004027f0 <unit_config_set_custom>:
	
}

void unit_config_set_custom(unit_config_t * unit_config_new) {
  4027f0:	b508      	push	{r3, lr}

	// copy new configuration
	copy_content( (uint8_t *)unit_config_new ,
  4027f2:	2244      	movs	r2, #68	; 0x44
  4027f4:	4901      	ldr	r1, [pc, #4]	; (4027fc <unit_config_set_custom+0xc>)
  4027f6:	4b02      	ldr	r3, [pc, #8]	; (402800 <unit_config_set_custom+0x10>)
  4027f8:	4798      	blx	r3
  4027fa:	bd08      	pop	{r3, pc}
  4027fc:	20001db0 	.word	0x20001db0
  402800:	00403129 	.word	0x00403129

00402804 <unit_calibration_set_default>:

}

/*****************************************************************************/

void unit_calibration_set_default(void) {
  402804:	b410      	push	{r4}
  402806:	2300      	movs	r3, #0
		uint16_t index = 0;
		for ( index=0 ; index<CH_ADC_GRID_TOTAL_NUM ; index++ ) {
			if (index<4)
				unit_calibration.adc_ch_gain_Q15[index] = -DEFAULT_GAIN;
			else
				unit_calibration.adc_ch_gain_Q15[index] = DEFAULT_GAIN;
  402808:	4a09      	ldr	r2, [pc, #36]	; (402830 <unit_calibration_set_default+0x2c>)
  40280a:	f44f 4400 	mov.w	r4, #32768	; 0x8000
				unit_calibration.adc_ch_gain_Q15[index] = -DEFAULT_GAIN;
  40280e:	4809      	ldr	r0, [pc, #36]	; (402834 <unit_calibration_set_default+0x30>)
			if (index<4)
  402810:	b299      	uxth	r1, r3
  402812:	2903      	cmp	r1, #3
				unit_calibration.adc_ch_gain_Q15[index] = -DEFAULT_GAIN;
  402814:	bf94      	ite	ls
  402816:	f842 0023 	strls.w	r0, [r2, r3, lsl #2]
				unit_calibration.adc_ch_gain_Q15[index] = DEFAULT_GAIN;
  40281a:	f842 4023 	strhi.w	r4, [r2, r3, lsl #2]
			unit_calibration.adc_ch_offset[index] = DEFAULT_OFFSET;
  40281e:	f103 010c 	add.w	r1, r3, #12
  402822:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  402826:	3301      	adds	r3, #1
		for ( index=0 ; index<CH_ADC_GRID_TOTAL_NUM ; index++ ) {
  402828:	2b0c      	cmp	r3, #12
  40282a:	d1f1      	bne.n	402810 <unit_calibration_set_default+0xc>
		}
	}

}
  40282c:	bc10      	pop	{r4}
  40282e:	4770      	bx	lr
  402830:	20001df4 	.word	0x20001df4
  402834:	ffff8000 	.word	0xffff8000

00402838 <unit_calibration_set_custom>:


void unit_calibration_set_custom(unit_calibration_t * unit_calibration_new) {
  402838:	b508      	push	{r3, lr}

	// copy new configuration
	copy_content( (uint8_t *)unit_calibration_new ,
  40283a:	2260      	movs	r2, #96	; 0x60
  40283c:	4901      	ldr	r1, [pc, #4]	; (402844 <unit_calibration_set_custom+0xc>)
  40283e:	4b02      	ldr	r3, [pc, #8]	; (402848 <unit_calibration_set_custom+0x10>)
  402840:	4798      	blx	r3
  402842:	bd08      	pop	{r3, pc}
  402844:	20001df4 	.word	0x20001df4
  402848:	00403129 	.word	0x00403129

0040284c <unit_config_and_calibration_init>:

}

/*****************************************************************************/

void unit_config_and_calibration_init(void) {
  40284c:	b570      	push	{r4, r5, r6, lr}

	// clear variables
	memset( (void *)&unit_config         , 0 , sizeof(unit_config_t)         );
  40284e:	2244      	movs	r2, #68	; 0x44
  402850:	2100      	movs	r1, #0
  402852:	480f      	ldr	r0, [pc, #60]	; (402890 <unit_config_and_calibration_init+0x44>)
  402854:	4c0f      	ldr	r4, [pc, #60]	; (402894 <unit_config_and_calibration_init+0x48>)
  402856:	47a0      	blx	r4
	memset( (void *)&unit_calibration    , 0 , sizeof(unit_calibration_t)    );
  402858:	2260      	movs	r2, #96	; 0x60
  40285a:	2100      	movs	r1, #0
  40285c:	480e      	ldr	r0, [pc, #56]	; (402898 <unit_config_and_calibration_init+0x4c>)
  40285e:	47a0      	blx	r4
	memset( (void *)&sdcard_flags_status , 0 , sizeof(sdcard_flags_status_t) );
  402860:	2300      	movs	r3, #0
  402862:	4a0e      	ldr	r2, [pc, #56]	; (40289c <unit_config_and_calibration_init+0x50>)
  402864:	7013      	strb	r3, [r2, #0]
	memset( (void *)&comm_flags          , 0 , sizeof(comm_flags_t)          );
  402866:	4a0e      	ldr	r2, [pc, #56]	; (4028a0 <unit_config_and_calibration_init+0x54>)
  402868:	8013      	strh	r3, [r2, #0]

	// Read unique ID
	{
		uint32_t error;
		do {
			error = flash_read_unique_id(ARM_unique_id , 4);
  40286a:	4e0e      	ldr	r6, [pc, #56]	; (4028a4 <unit_config_and_calibration_init+0x58>)
  40286c:	2504      	movs	r5, #4
  40286e:	4c0e      	ldr	r4, [pc, #56]	; (4028a8 <unit_config_and_calibration_init+0x5c>)
  402870:	4629      	mov	r1, r5
  402872:	4630      	mov	r0, r6
  402874:	47a0      	blx	r4
		} while (error);
  402876:	2800      	cmp	r0, #0
  402878:	d1fa      	bne.n	402870 <unit_config_and_calibration_init+0x24>
	}
		

	// set unit config to default (optional)
	unit_config_set_default();
  40287a:	4b0c      	ldr	r3, [pc, #48]	; (4028ac <unit_config_and_calibration_init+0x60>)
  40287c:	4798      	blx	r3
	unit_calibration_set_default();
  40287e:	4b0c      	ldr	r3, [pc, #48]	; (4028b0 <unit_config_and_calibration_init+0x64>)
  402880:	4798      	blx	r3

	// set detection of SD-Card and read unit configuration
#if SETTINGS_ARM_ENABLE_SDCARD_FROM_BEGINNING
	sdcard_flags_status = SDCARD_FLAGS_STATUS_ENABLE_SDCARD;
  402882:	2301      	movs	r3, #1
  402884:	4a05      	ldr	r2, [pc, #20]	; (40289c <unit_config_and_calibration_init+0x50>)
  402886:	7013      	strb	r3, [r2, #0]
#endif

	// set DSP communication flags. Request DSP FW version always
	comm_flags = SETTINGS_COMM_FLAG_FW_REQUEST_MASK;
  402888:	4a05      	ldr	r2, [pc, #20]	; (4028a0 <unit_config_and_calibration_init+0x54>)
  40288a:	8013      	strh	r3, [r2, #0]
  40288c:	bd70      	pop	{r4, r5, r6, pc}
  40288e:	bf00      	nop
  402890:	20001db0 	.word	0x20001db0
  402894:	00409669 	.word	0x00409669
  402898:	20001df4 	.word	0x20001df4
  40289c:	20001cc8 	.word	0x20001cc8
  4028a0:	20001e54 	.word	0x20001e54
  4028a4:	20001da0 	.word	0x20001da0
  4028a8:	00402b15 	.word	0x00402b15
  4028ac:	0040277d 	.word	0x0040277d
  4028b0:	00402805 	.word	0x00402805

004028b4 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
  4028b4:	b538      	push	{r3, r4, r5, lr}
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
  4028b6:	f1a1 030e 	sub.w	r3, r1, #14
  4028ba:	2b01      	cmp	r3, #1
  4028bc:	d802      	bhi.n	4028c4 <efc_perform_command+0x10>
		return EFC_RC_NOT_SUPPORT;
  4028be:	f04f 30ff 	mov.w	r0, #4294967295
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
	cpu_irq_restore(flags);
	return result;
}
  4028c2:	bd38      	pop	{r3, r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4028c4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
  4028c8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4028ca:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4028ce:	2500      	movs	r5, #0
  4028d0:	4b0a      	ldr	r3, [pc, #40]	; (4028fc <efc_perform_command+0x48>)
  4028d2:	701d      	strb	r5, [r3, #0]
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
  4028d4:	0212      	lsls	r2, r2, #8
  4028d6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
  4028da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
	result = efc_perform_fcr(p_efc,
  4028de:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
			EEFC_FCR_FCMD(ul_command));
  4028e2:	b2c9      	uxtb	r1, r1
	result = efc_perform_fcr(p_efc,
  4028e4:	4311      	orrs	r1, r2
  4028e6:	4b06      	ldr	r3, [pc, #24]	; (402900 <efc_perform_command+0x4c>)
  4028e8:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4028ea:	2c00      	cmp	r4, #0
  4028ec:	d1e9      	bne.n	4028c2 <efc_perform_command+0xe>
		cpu_irq_enable();
  4028ee:	2201      	movs	r2, #1
  4028f0:	4b02      	ldr	r3, [pc, #8]	; (4028fc <efc_perform_command+0x48>)
  4028f2:	701a      	strb	r2, [r3, #0]
  4028f4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4028f8:	b662      	cpsie	i
  4028fa:	bd38      	pop	{r3, r4, r5, pc}
  4028fc:	200000b8 	.word	0x200000b8
  402900:	2000006d 	.word	0x2000006d

00402904 <supc_disable_brownout_detector>:
 *
 * \param p_supc Pointer to a SUPC instance.
 */
void supc_disable_brownout_detector(Supc *p_supc)
{
	uint32_t ul_mr = p_supc->SUPC_MR & (~(SUPC_MR_KEY_Msk | SUPC_MR_BODDIS));
  402904:	6883      	ldr	r3, [r0, #8]
  402906:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40290a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
	p_supc->SUPC_MR = SUPC_MR_KEY_PASSWD | ul_mr | SUPC_MR_BODDIS;
  40290e:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  402912:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402916:	6083      	str	r3, [r0, #8]
  402918:	4770      	bx	lr

0040291a <supc_set_monitor_threshold>:
 * \param p_supc Pointer to a SUPC instance.
 * \param ul_threshold Supply monitor threshold (between 1.9V and 3.4V).
 */
void supc_set_monitor_threshold(Supc *p_supc, uint32_t ul_threshold)
{
	uint32_t ul_smmr = p_supc->SUPC_SMMR & (~SUPC_SMMR_SMTH_Msk);
  40291a:	6843      	ldr	r3, [r0, #4]
  40291c:	f023 030f 	bic.w	r3, r3, #15
	p_supc->SUPC_SMMR = ul_smmr | (SUPC_SMMR_SMTH_Msk & ul_threshold);
  402920:	f001 010f 	and.w	r1, r1, #15
  402924:	430b      	orrs	r3, r1
  402926:	6043      	str	r3, [r0, #4]
  402928:	4770      	bx	lr

0040292a <supc_set_monitor_sampling_period>:
 * \param p_supc Pointer to a SUPC instance.
 * \param ul_period Supply monitor sampling period.
 */
void supc_set_monitor_sampling_period(Supc *p_supc, uint32_t ul_period)
{
	uint32_t ul_smmr = p_supc->SUPC_SMMR & (~SUPC_SMMR_SMSMPL_Msk);
  40292a:	6843      	ldr	r3, [r0, #4]
  40292c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
	p_supc->SUPC_SMMR = ul_smmr | (SUPC_SMMR_SMSMPL_Msk & ul_period);
  402930:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
  402934:	430b      	orrs	r3, r1
  402936:	6043      	str	r3, [r0, #4]
  402938:	4770      	bx	lr

0040293a <supc_disable_monitor_reset>:
 *
 * \param p_supc Pointer to a SUPC instance.
 */
void supc_disable_monitor_reset(Supc *p_supc)
{
	p_supc->SUPC_SMMR &= ~SUPC_SMMR_SMRSTEN;
  40293a:	6843      	ldr	r3, [r0, #4]
  40293c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  402940:	6043      	str	r3, [r0, #4]
  402942:	4770      	bx	lr

00402944 <supc_enable_monitor_interrupt>:
 *
 * \param p_supc Pointer to a SUPC instance.
 */
void supc_enable_monitor_interrupt(Supc *p_supc)
{
	p_supc->SUPC_SMMR |= SUPC_SMMR_SMIEN;
  402944:	6843      	ldr	r3, [r0, #4]
  402946:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40294a:	6043      	str	r3, [r0, #4]
  40294c:	4770      	bx	lr

0040294e <supc_set_wakeup_inputs>:
 * 0 means a low-to-high level transition forces the wake up of core power supply.
 */
void supc_set_wakeup_inputs(Supc *p_supc, uint32_t ul_inputs,
		uint32_t ul_transition)
{
	p_supc->SUPC_WUIR = ul_inputs | ul_transition;
  40294e:	430a      	orrs	r2, r1
  402950:	6102      	str	r2, [r0, #16]
  402952:	4770      	bx	lr

00402954 <flash_erase_sector>:
 * \param ul_address Flash sector start address.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_erase_sector(uint32_t ul_address)
{
  402954:	b508      	push	{r3, lr}
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
  402956:	f5a0 0280 	sub.w	r2, r0, #4194304	; 0x400000
	Efc *p_efc;
	uint16_t us_page;

	translate_address(&p_efc, ul_address, &us_page, NULL);

	if (EFC_RC_OK != efc_perform_command(p_efc, EFC_FCMD_ES, us_page)) {
  40295a:	f3c2 224f 	ubfx	r2, r2, #9, #16
  40295e:	2111      	movs	r1, #17
  402960:	4803      	ldr	r0, [pc, #12]	; (402970 <flash_erase_sector+0x1c>)
  402962:	4b04      	ldr	r3, [pc, #16]	; (402974 <flash_erase_sector+0x20>)
  402964:	4798      	blx	r3
  402966:	2800      	cmp	r0, #0
		return FLASH_RC_ERROR;
	}

	return FLASH_RC_OK;
}
  402968:	bf18      	it	ne
  40296a:	2010      	movne	r0, #16
  40296c:	bd08      	pop	{r3, pc}
  40296e:	bf00      	nop
  402970:	400e0a00 	.word	0x400e0a00
  402974:	004028b5 	.word	0x004028b5

00402978 <flash_write>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_write(uint32_t ul_address, const void *p_buffer,
		uint32_t ul_size, uint32_t ul_erase_flag)
{
  402978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40297c:	b085      	sub	sp, #20
  40297e:	9100      	str	r1, [sp, #0]
  402980:	9303      	str	r3, [sp, #12]
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
  402982:	f5a0 0380 	sub.w	r3, r0, #4194304	; 0x400000
  402986:	f3c3 2a4f 	ubfx	sl, r3, #9, #16
	us_offset = (ul_addr - IFLASH_ADDR) % IFLASH_PAGE_SIZE;
  40298a:	f3c0 0708 	ubfx	r7, r0, #0, #9
#else
	UNUSED(ul_fws_temp);
#endif

	/* Write all pages */
	while (ul_size > 0) {
  40298e:	4693      	mov	fp, r2
  402990:	2a00      	cmp	r2, #0
  402992:	d04d      	beq.n	402a30 <flash_write+0xb8>
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;

		/* Pre-buffer data */
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
  402994:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 402a40 <flash_write+0xc8>
  402998:	f509 75fe 	add.w	r5, r9, #508	; 0x1fc
  40299c:	e011      	b.n	4029c2 <flash_write+0x4a>

		if (ul_erase_flag) {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
					us_page);
		} else {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
  40299e:	9a01      	ldr	r2, [sp, #4]
  4029a0:	2101      	movs	r1, #1
  4029a2:	4824      	ldr	r0, [pc, #144]	; (402a34 <flash_write+0xbc>)
  4029a4:	4b24      	ldr	r3, [pc, #144]	; (402a38 <flash_write+0xc0>)
  4029a6:	4798      	blx	r3
					us_page);
		}

		if (ul_error) {
  4029a8:	2800      	cmp	r0, #0
  4029aa:	d13e      	bne.n	402a2a <flash_write+0xb2>
			return ul_error;
		}

		/* Progression */
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
  4029ac:	9b00      	ldr	r3, [sp, #0]
  4029ae:	4423      	add	r3, r4
  4029b0:	9300      	str	r3, [sp, #0]
		ul_size -= writeSize;
		us_page++;
  4029b2:	f10a 0a01 	add.w	sl, sl, #1
  4029b6:	fa1f fa8a 	uxth.w	sl, sl
		us_offset = 0;
  4029ba:	2700      	movs	r7, #0
	while (ul_size > 0) {
  4029bc:	ebbb 0b04 	subs.w	fp, fp, r4
  4029c0:	d032      	beq.n	402a28 <flash_write+0xb0>
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
  4029c2:	f5c7 7300 	rsb	r3, r7, #512	; 0x200
  4029c6:	9302      	str	r3, [sp, #8]
  4029c8:	461c      	mov	r4, r3
  4029ca:	455b      	cmp	r3, fp
  4029cc:	bf28      	it	cs
  4029ce:	465c      	movcs	r4, fp
	ul_addr = IFLASH_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
  4029d0:	f8cd a004 	str.w	sl, [sp, #4]
  4029d4:	f50a 5300 	add.w	r3, sl, #8192	; 0x2000
  4029d8:	ea4f 2843 	mov.w	r8, r3, lsl #9
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
  4029dc:	463a      	mov	r2, r7
  4029de:	4641      	mov	r1, r8
  4029e0:	4648      	mov	r0, r9
  4029e2:	4e16      	ldr	r6, [pc, #88]	; (402a3c <flash_write+0xc4>)
  4029e4:	47b0      	blx	r6
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);
  4029e6:	4622      	mov	r2, r4
  4029e8:	9900      	ldr	r1, [sp, #0]
  4029ea:	eb09 0007 	add.w	r0, r9, r7
  4029ee:	47b0      	blx	r6
		memcpy(puc_page_buffer + us_offset + writeSize,
  4029f0:	1938      	adds	r0, r7, r4
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;
  4029f2:	9a02      	ldr	r2, [sp, #8]
  4029f4:	1b12      	subs	r2, r2, r4
				(void *)(ul_page_addr + us_offset + writeSize),
  4029f6:	eb04 0108 	add.w	r1, r4, r8
		memcpy(puc_page_buffer + us_offset + writeSize,
  4029fa:	b292      	uxth	r2, r2
  4029fc:	4439      	add	r1, r7
  4029fe:	4448      	add	r0, r9
  402a00:	47b0      	blx	r6
  402a02:	f1a9 0304 	sub.w	r3, r9, #4
  402a06:	f1a8 0204 	sub.w	r2, r8, #4
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
  402a0a:	f853 1f04 	ldr.w	r1, [r3, #4]!
  402a0e:	f842 1f04 	str.w	r1, [r2, #4]!
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
  402a12:	42ab      	cmp	r3, r5
  402a14:	d1f9      	bne.n	402a0a <flash_write+0x92>
		if (ul_erase_flag) {
  402a16:	9b03      	ldr	r3, [sp, #12]
  402a18:	2b00      	cmp	r3, #0
  402a1a:	d0c0      	beq.n	40299e <flash_write+0x26>
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
  402a1c:	9a01      	ldr	r2, [sp, #4]
  402a1e:	2103      	movs	r1, #3
  402a20:	4804      	ldr	r0, [pc, #16]	; (402a34 <flash_write+0xbc>)
  402a22:	4b05      	ldr	r3, [pc, #20]	; (402a38 <flash_write+0xc0>)
  402a24:	4798      	blx	r3
  402a26:	e7bf      	b.n	4029a8 <flash_write+0x30>
#if SAM3S || SAM3N || SAM3XA || SAM3U
	/* According to the errata, restore the wait state value. */
	efc_set_wait_state(p_efc, ul_fws_temp);
#endif

	return FLASH_RC_OK;
  402a28:	4658      	mov	r0, fp
}
  402a2a:	b005      	add	sp, #20
  402a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return FLASH_RC_OK;
  402a30:	4610      	mov	r0, r2
  402a32:	e7fa      	b.n	402a2a <flash_write+0xb2>
  402a34:	400e0a00 	.word	0x400e0a00
  402a38:	004028b5 	.word	0x004028b5
  402a3c:	00409535 	.word	0x00409535
  402a40:	20000bec 	.word	0x20000bec

00402a44 <flash_lock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_lock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
  402a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
  402a48:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
  402a4c:	f020 001f 	bic.w	r0, r0, #31
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
  402a50:	f421 51ff 	bic.w	r1, r1, #8160	; 0x1fe0
  402a54:	f021 011f 	bic.w	r1, r1, #31
  402a58:	f501 54ff 	add.w	r4, r1, #8160	; 0x1fe0
  402a5c:	341f      	adds	r4, #31
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual lock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);

	if (pul_actual_start != NULL) {
  402a5e:	b102      	cbz	r2, 402a62 <flash_lock+0x1e>
		*pul_actual_start = ul_actual_start;
  402a60:	6010      	str	r0, [r2, #0]
	}

	if (pul_actual_end != NULL) {
  402a62:	b103      	cbz	r3, 402a66 <flash_lock+0x22>
		*pul_actual_end = ul_actual_end;
  402a64:	601c      	str	r4, [r3, #0]
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
  402a66:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
  402a6a:	0a64      	lsrs	r4, r4, #9
  402a6c:	b2a4      	uxth	r4, r4
  402a6e:	4d0c      	ldr	r5, [pc, #48]	; (402aa0 <flash_lock+0x5c>)
  402a70:	440d      	add	r5, r1
  402a72:	f3c5 254f 	ubfx	r5, r5, #9, #16
	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
	translate_address(0, ul_actual_end, &us_end_page, 0);

	/* Lock all pages */
	while (us_start_page < us_end_page) {
  402a76:	42a5      	cmp	r5, r4
  402a78:	d910      	bls.n	402a9c <flash_lock+0x58>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_SLB, us_start_page);
  402a7a:	f8df 802c 	ldr.w	r8, [pc, #44]	; 402aa8 <flash_lock+0x64>
  402a7e:	2708      	movs	r7, #8
  402a80:	4e08      	ldr	r6, [pc, #32]	; (402aa4 <flash_lock+0x60>)
  402a82:	4622      	mov	r2, r4
  402a84:	4639      	mov	r1, r7
  402a86:	4640      	mov	r0, r8
  402a88:	47b0      	blx	r6

		if (ul_error) {
  402a8a:	4603      	mov	r3, r0
  402a8c:	b918      	cbnz	r0, 402a96 <flash_lock+0x52>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
  402a8e:	3410      	adds	r4, #16
  402a90:	b2a4      	uxth	r4, r4
	while (us_start_page < us_end_page) {
  402a92:	42ac      	cmp	r4, r5
  402a94:	d3f5      	bcc.n	402a82 <flash_lock+0x3e>
	}

	return FLASH_RC_OK;
}
  402a96:	4618      	mov	r0, r3
  402a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return FLASH_RC_OK;
  402a9c:	2300      	movs	r3, #0
  402a9e:	e7fa      	b.n	402a96 <flash_lock+0x52>
  402aa0:	ffc01fff 	.word	0xffc01fff
  402aa4:	004028b5 	.word	0x004028b5
  402aa8:	400e0a00 	.word	0x400e0a00

00402aac <flash_unlock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_unlock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
  402aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
  402ab0:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
  402ab4:	f020 001f 	bic.w	r0, r0, #31
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
  402ab8:	f421 51ff 	bic.w	r1, r1, #8160	; 0x1fe0
  402abc:	f021 011f 	bic.w	r1, r1, #31
  402ac0:	f501 54ff 	add.w	r4, r1, #8160	; 0x1fe0
  402ac4:	341f      	adds	r4, #31
	uint16_t us_num_pages_in_region =
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual unlock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
	if (pul_actual_start != NULL) {
  402ac6:	b102      	cbz	r2, 402aca <flash_unlock+0x1e>
		*pul_actual_start = ul_actual_start;
  402ac8:	6010      	str	r0, [r2, #0]
	}
	if (pul_actual_end != NULL) {
  402aca:	b103      	cbz	r3, 402ace <flash_unlock+0x22>
		*pul_actual_end = ul_actual_end;
  402acc:	601c      	str	r4, [r3, #0]
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
  402ace:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
  402ad2:	0a64      	lsrs	r4, r4, #9
  402ad4:	b2a4      	uxth	r4, r4
  402ad6:	4d0c      	ldr	r5, [pc, #48]	; (402b08 <flash_unlock+0x5c>)
  402ad8:	440d      	add	r5, r1
  402ada:	f3c5 254f 	ubfx	r5, r5, #9, #16
	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
	translate_address(0, ul_actual_end, &us_end_page, 0);

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
  402ade:	42a5      	cmp	r5, r4
  402ae0:	d910      	bls.n	402b04 <flash_unlock+0x58>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_CLB,
  402ae2:	f8df 802c 	ldr.w	r8, [pc, #44]	; 402b10 <flash_unlock+0x64>
  402ae6:	2709      	movs	r7, #9
  402ae8:	4e08      	ldr	r6, [pc, #32]	; (402b0c <flash_unlock+0x60>)
  402aea:	4622      	mov	r2, r4
  402aec:	4639      	mov	r1, r7
  402aee:	4640      	mov	r0, r8
  402af0:	47b0      	blx	r6
				us_start_page);
		if (ul_error) {
  402af2:	4603      	mov	r3, r0
  402af4:	b918      	cbnz	r0, 402afe <flash_unlock+0x52>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
  402af6:	3410      	adds	r4, #16
  402af8:	b2a4      	uxth	r4, r4
	while (us_start_page < us_end_page) {
  402afa:	42ac      	cmp	r4, r5
  402afc:	d3f5      	bcc.n	402aea <flash_unlock+0x3e>
	}

	return FLASH_RC_OK;
}
  402afe:	4618      	mov	r0, r3
  402b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return FLASH_RC_OK;
  402b04:	2300      	movs	r3, #0
  402b06:	e7fa      	b.n	402afe <flash_unlock+0x52>
  402b08:	ffc01fff 	.word	0xffc01fff
  402b0c:	004028b5 	.word	0x004028b5
  402b10:	400e0a00 	.word	0x400e0a00

00402b14 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
  402b14:	b570      	push	{r4, r5, r6, lr}
  402b16:	b086      	sub	sp, #24
  402b18:	4604      	mov	r4, r0
  402b1a:	460e      	mov	r6, r1
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
  402b1c:	2304      	movs	r3, #4
  402b1e:	9300      	str	r3, [sp, #0]
  402b20:	ab02      	add	r3, sp, #8
  402b22:	220f      	movs	r2, #15
  402b24:	210e      	movs	r1, #14
  402b26:	480d      	ldr	r0, [pc, #52]	; (402b5c <flash_read_unique_id+0x48>)
  402b28:	4d0d      	ldr	r5, [pc, #52]	; (402b60 <flash_read_unique_id+0x4c>)
  402b2a:	47a8      	blx	r5
  402b2c:	b118      	cbz	r0, 402b36 <flash_read_unique_id+0x22>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
  402b2e:	2510      	movs	r5, #16
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
		pul_data[ul_idx] = uid_buf[ul_idx];
	}

	return FLASH_RC_OK;
}
  402b30:	4628      	mov	r0, r5
  402b32:	b006      	add	sp, #24
  402b34:	bd70      	pop	{r4, r5, r6, pc}
  402b36:	4605      	mov	r5, r0
  402b38:	2e04      	cmp	r6, #4
  402b3a:	bf28      	it	cs
  402b3c:	2604      	movcs	r6, #4
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
  402b3e:	b156      	cbz	r6, 402b56 <flash_read_unique_id+0x42>
  402b40:	aa02      	add	r2, sp, #8
  402b42:	4623      	mov	r3, r4
  402b44:	eb04 0186 	add.w	r1, r4, r6, lsl #2
		pul_data[ul_idx] = uid_buf[ul_idx];
  402b48:	f852 0b04 	ldr.w	r0, [r2], #4
  402b4c:	f843 0b04 	str.w	r0, [r3], #4
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
  402b50:	428b      	cmp	r3, r1
  402b52:	d1f9      	bne.n	402b48 <flash_read_unique_id+0x34>
  402b54:	e7ec      	b.n	402b30 <flash_read_unique_id+0x1c>
	return FLASH_RC_OK;
  402b56:	4635      	mov	r5, r6
  402b58:	e7ea      	b.n	402b30 <flash_read_unique_id+0x1c>
  402b5a:	bf00      	nop
  402b5c:	400e0a00 	.word	0x400e0a00
  402b60:	20000001 	.word	0x20000001

00402b64 <decode_incoming_comms_packet>:
/// @brief Decode incoming message from SCI.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void decode_incoming_comms_packet( msg_t * msg_ptr )
{
  402b64:	b508      	push	{r3, lr}

	if (msg_ptr->packet_in[msg_h_des_id] == SETTINGS_DSP_ID)
  402b66:	7bc3      	ldrb	r3, [r0, #15]
  402b68:	2b33      	cmp	r3, #51	; 0x33
  402b6a:	f000 80ac 	beq.w	402cc6 <decode_incoming_comms_packet+0x162>
		comm_bypass_msg( UART_DSP , msg_ptr );

	else if ( (msg_ptr->packet_in[msg_h_des_id] == SETTINGS_RPI_ID) || (msg_ptr->packet_in[msg_h_des_id] == SETTINGS_OTHERS_ID) )
  402b6e:	2baa      	cmp	r3, #170	; 0xaa
  402b70:	f000 80ae 	beq.w	402cd0 <decode_incoming_comms_packet+0x16c>
  402b74:	2bee      	cmp	r3, #238	; 0xee
  402b76:	f000 80ab 	beq.w	402cd0 <decode_incoming_comms_packet+0x16c>
		comm_bypass_msg( UART_RPI , msg_ptr );
	else
		switch (msg_ptr->packet_in[msg_h_msg_id])
  402b7a:	7c03      	ldrb	r3, [r0, #16]
  402b7c:	3b02      	subs	r3, #2
  402b7e:	2b9e      	cmp	r3, #158	; 0x9e
  402b80:	f200 810e 	bhi.w	402da0 <decode_incoming_comms_packet+0x23c>
  402b84:	e8df f013 	tbh	[pc, r3, lsl #1]
  402b88:	010c00a9 	.word	0x010c00a9
  402b8c:	010c00ac 	.word	0x010c00ac
  402b90:	010c00af 	.word	0x010c00af
  402b94:	010c00b2 	.word	0x010c00b2
  402b98:	010c010c 	.word	0x010c010c
  402b9c:	010c010c 	.word	0x010c010c
  402ba0:	010c010c 	.word	0x010c010c
  402ba4:	00e8010c 	.word	0x00e8010c
  402ba8:	010c010c 	.word	0x010c010c
  402bac:	00eb010c 	.word	0x00eb010c
  402bb0:	010c010c 	.word	0x010c010c
  402bb4:	010c010c 	.word	0x010c010c
  402bb8:	010c010c 	.word	0x010c010c
  402bbc:	010c010c 	.word	0x010c010c
  402bc0:	010c010c 	.word	0x010c010c
  402bc4:	010c00b5 	.word	0x010c00b5
  402bc8:	010c00b8 	.word	0x010c00b8
  402bcc:	010c00bb 	.word	0x010c00bb
  402bd0:	010c00be 	.word	0x010c00be
  402bd4:	010c00c1 	.word	0x010c00c1
  402bd8:	010c00c4 	.word	0x010c00c4
  402bdc:	010c010c 	.word	0x010c010c
  402be0:	010c010c 	.word	0x010c010c
  402be4:	00f1010c 	.word	0x00f1010c
  402be8:	010c010c 	.word	0x010c010c
  402bec:	010c010c 	.word	0x010c010c
  402bf0:	00f4010c 	.word	0x00f4010c
  402bf4:	010c010c 	.word	0x010c010c
  402bf8:	010c010c 	.word	0x010c010c
  402bfc:	010c010c 	.word	0x010c010c
  402c00:	010c010c 	.word	0x010c010c
  402c04:	010c00ca 	.word	0x010c00ca
  402c08:	010c00c7 	.word	0x010c00c7
  402c0c:	010c010c 	.word	0x010c010c
  402c10:	010c010c 	.word	0x010c010c
  402c14:	010c010c 	.word	0x010c010c
  402c18:	010c010c 	.word	0x010c010c
  402c1c:	010c010c 	.word	0x010c010c
  402c20:	010c010c 	.word	0x010c010c
  402c24:	00ee010c 	.word	0x00ee010c
  402c28:	010c010c 	.word	0x010c010c
  402c2c:	010c010c 	.word	0x010c010c
  402c30:	010c010c 	.word	0x010c010c
  402c34:	010c010c 	.word	0x010c010c
  402c38:	010c010c 	.word	0x010c010c
  402c3c:	010c010c 	.word	0x010c010c
  402c40:	010c010c 	.word	0x010c010c
  402c44:	010c00cd 	.word	0x010c00cd
  402c48:	010c00d0 	.word	0x010c00d0
  402c4c:	010c00d3 	.word	0x010c00d3
  402c50:	010c00d6 	.word	0x010c00d6
  402c54:	010c00d9 	.word	0x010c00d9
  402c58:	010c00dc 	.word	0x010c00dc
  402c5c:	010c00df 	.word	0x010c00df
  402c60:	010c00e2 	.word	0x010c00e2
  402c64:	00f7010c 	.word	0x00f7010c
  402c68:	00fa010c 	.word	0x00fa010c
  402c6c:	010c010c 	.word	0x010c010c
  402c70:	010c010c 	.word	0x010c010c
  402c74:	00fd010c 	.word	0x00fd010c
  402c78:	0100010c 	.word	0x0100010c
  402c7c:	010c010c 	.word	0x010c010c
  402c80:	010c010c 	.word	0x010c010c
  402c84:	010c0103 	.word	0x010c0103
  402c88:	010c0106 	.word	0x010c0106
  402c8c:	010c0109 	.word	0x010c0109
  402c90:	010c010c 	.word	0x010c010c
  402c94:	010c010c 	.word	0x010c010c
  402c98:	010c010c 	.word	0x010c010c
  402c9c:	010c010c 	.word	0x010c010c
  402ca0:	010c010c 	.word	0x010c010c
  402ca4:	010c010c 	.word	0x010c010c
  402ca8:	010c010c 	.word	0x010c010c
  402cac:	010c010c 	.word	0x010c010c
  402cb0:	010c010c 	.word	0x010c010c
  402cb4:	010c010c 	.word	0x010c010c
  402cb8:	010c010c 	.word	0x010c010c
  402cbc:	010c010c 	.word	0x010c010c
  402cc0:	010c010c 	.word	0x010c010c
  402cc4:	00e5      	.short	0x00e5
		comm_bypass_msg( UART_DSP , msg_ptr );
  402cc6:	4601      	mov	r1, r0
  402cc8:	4837      	ldr	r0, [pc, #220]	; (402da8 <decode_incoming_comms_packet+0x244>)
  402cca:	4b38      	ldr	r3, [pc, #224]	; (402dac <decode_incoming_comms_packet+0x248>)
  402ccc:	4798      	blx	r3
  402cce:	bd08      	pop	{r3, pc}
		comm_bypass_msg( UART_RPI , msg_ptr );
  402cd0:	4601      	mov	r1, r0
  402cd2:	4837      	ldr	r0, [pc, #220]	; (402db0 <decode_incoming_comms_packet+0x24c>)
  402cd4:	4b35      	ldr	r3, [pc, #212]	; (402dac <decode_incoming_comms_packet+0x248>)
  402cd6:	4798      	blx	r3
  402cd8:	bd08      	pop	{r3, pc}
		{
			// FW
			case API_FW_ARM_VERSION_REQ:                    API_FW_ARM_version_req( msg_ptr );                    break;
  402cda:	4b36      	ldr	r3, [pc, #216]	; (402db4 <decode_incoming_comms_packet+0x250>)
  402cdc:	4798      	blx	r3
  402cde:	bd08      	pop	{r3, pc}
			case API_FW_ARM_ECHO_REQ:                       API_FW_ARM_echo_req( msg_ptr );                       break;
  402ce0:	4b35      	ldr	r3, [pc, #212]	; (402db8 <decode_incoming_comms_packet+0x254>)
  402ce2:	4798      	blx	r3
  402ce4:	bd08      	pop	{r3, pc}
			case API_FW_ARM_UNIQUE_ID_REQ:                  API_FW_ARM_unique_id_req( msg_ptr );                  break;
  402ce6:	4b35      	ldr	r3, [pc, #212]	; (402dbc <decode_incoming_comms_packet+0x258>)
  402ce8:	4798      	blx	r3
  402cea:	bd08      	pop	{r3, pc}
			case API_FW_ARM_RESET_ID_REQ:                   API_FW_ARM_reset_req( msg_ptr );                      break;
  402cec:	4b34      	ldr	r3, [pc, #208]	; (402dc0 <decode_incoming_comms_packet+0x25c>)
  402cee:	4798      	blx	r3
  402cf0:	bd08      	pop	{r3, pc}
			
			// Unit configuration and calibration
			case API_UNIT_CONFIG_ARM_UPDATE_REQ:            API_UNIT_CONFIG_ARM_update_req( msg_ptr );            break;
  402cf2:	4b34      	ldr	r3, [pc, #208]	; (402dc4 <decode_incoming_comms_packet+0x260>)
  402cf4:	4798      	blx	r3
  402cf6:	bd08      	pop	{r3, pc}
			case API_UNIT_CONFIG_ARM_SEND_REQ:              API_UNIT_CONFIG_ARM_send_req( msg_ptr );              break;
  402cf8:	4b33      	ldr	r3, [pc, #204]	; (402dc8 <decode_incoming_comms_packet+0x264>)
  402cfa:	4798      	blx	r3
  402cfc:	bd08      	pop	{r3, pc}
			case API_UNIT_CONFIG_ARM_SET_DEFAULT_REQ:       API_UNIT_CONFIG_ARM_set_default_req( msg_ptr );       break;
  402cfe:	4b33      	ldr	r3, [pc, #204]	; (402dcc <decode_incoming_comms_packet+0x268>)
  402d00:	4798      	blx	r3
  402d02:	bd08      	pop	{r3, pc}
			case API_UNIT_CALIBRATION_ARM_UPDATE_REQ:       API_UNIT_CALIBRATION_ARM_update_req( msg_ptr );       break;
  402d04:	4b32      	ldr	r3, [pc, #200]	; (402dd0 <decode_incoming_comms_packet+0x26c>)
  402d06:	4798      	blx	r3
  402d08:	bd08      	pop	{r3, pc}
			case API_UNIT_CALIBRATION_ARM_SEND_REQ:         API_UNIT_CALIBRATION_ARM_send_req( msg_ptr );         break;
  402d0a:	4b32      	ldr	r3, [pc, #200]	; (402dd4 <decode_incoming_comms_packet+0x270>)
  402d0c:	4798      	blx	r3
  402d0e:	bd08      	pop	{r3, pc}
			case API_UNIT_CALIBRATION_ARM_SET_DEFAULT_REQ:  API_UNIT_CALIBRATION_ARM_set_default_req( msg_ptr );  break;
  402d10:	4b31      	ldr	r3, [pc, #196]	; (402dd8 <decode_incoming_comms_packet+0x274>)
  402d12:	4798      	blx	r3
  402d14:	bd08      	pop	{r3, pc}

			// Rel Time Clock
			case API_RTC_ARM_SEND_REQ:                      API_RTC_ARM_send_req( msg_ptr );                      break;
  402d16:	4b31      	ldr	r3, [pc, #196]	; (402ddc <decode_incoming_comms_packet+0x278>)
  402d18:	4798      	blx	r3
  402d1a:	bd08      	pop	{r3, pc}
			case API_RTC_ARM_UPDATE_REQ:                    API_RTC_ARM_update_req( msg_ptr );                    break;
  402d1c:	4b30      	ldr	r3, [pc, #192]	; (402de0 <decode_incoming_comms_packet+0x27c>)
  402d1e:	4798      	blx	r3
  402d20:	bd08      	pop	{r3, pc}

			// SD-Card
			case API_SDCARD_DIR_OPEN_REQ:                   API_SDCARD_dir_open_req( msg_ptr );                   break;
  402d22:	4b30      	ldr	r3, [pc, #192]	; (402de4 <decode_incoming_comms_packet+0x280>)
  402d24:	4798      	blx	r3
  402d26:	bd08      	pop	{r3, pc}
			case API_SDCARD_DIR_ITEM_NEXT_REQ:              API_SDCARD_item_next_req( msg_ptr );                  break;
  402d28:	4b2f      	ldr	r3, [pc, #188]	; (402de8 <decode_incoming_comms_packet+0x284>)
  402d2a:	4798      	blx	r3
  402d2c:	bd08      	pop	{r3, pc}
			case API_SDCARD_DIR_ITEM_NAME_REQ:              API_SDCARD_item_name_req( msg_ptr );                  break;
  402d2e:	4b2f      	ldr	r3, [pc, #188]	; (402dec <decode_incoming_comms_packet+0x288>)
  402d30:	4798      	blx	r3
  402d32:	bd08      	pop	{r3, pc}
			case API_SDCARD_FILE_OPEN_REQ:                  API_SDCARD_file_open_req( msg_ptr );                  break;
  402d34:	4b2e      	ldr	r3, [pc, #184]	; (402df0 <decode_incoming_comms_packet+0x28c>)
  402d36:	4798      	blx	r3
  402d38:	bd08      	pop	{r3, pc}
			case API_SDCARD_FILE_READ_REQ:                  API_SDCARD_file_read_req( msg_ptr );                  break;
  402d3a:	4b2e      	ldr	r3, [pc, #184]	; (402df4 <decode_incoming_comms_packet+0x290>)
  402d3c:	4798      	blx	r3
  402d3e:	bd08      	pop	{r3, pc}
			case API_SDCARD_FILE_CLOSE_REQ:                 API_SDCARD_file_close_req( msg_ptr );                 break;
  402d40:	4b2d      	ldr	r3, [pc, #180]	; (402df8 <decode_incoming_comms_packet+0x294>)
  402d42:	4798      	blx	r3
  402d44:	bd08      	pop	{r3, pc}
			case API_SDCARD_FILE_SIZE_REQ:                  API_SDCARD_file_size_req( msg_ptr );                  break;
  402d46:	4b2d      	ldr	r3, [pc, #180]	; (402dfc <decode_incoming_comms_packet+0x298>)
  402d48:	4798      	blx	r3
  402d4a:	bd08      	pop	{r3, pc}
			case API_SDCARD_FILE_AND_DIR_REMOVE_REQ:        API_SDCARD_file_and_dir_remove_req( msg_ptr );        break;
  402d4c:	4b2c      	ldr	r3, [pc, #176]	; (402e00 <decode_incoming_comms_packet+0x29c>)
  402d4e:	4798      	blx	r3
  402d50:	bd08      	pop	{r3, pc}
			case API_SDCARD_GET_MBYTES_REQ:                 API_SDCARD_get_mbytes_req( msg_ptr );	              break;
  402d52:	4b2c      	ldr	r3, [pc, #176]	; (402e04 <decode_incoming_comms_packet+0x2a0>)
  402d54:	4798      	blx	r3
  402d56:	bd08      	pop	{r3, pc}

			// DSP Responses
			case API_FW_DSP_VERSION_RES:	                API_FW_DSP_version_res( msg_ptr );                    break;
  402d58:	4b2b      	ldr	r3, [pc, #172]	; (402e08 <decode_incoming_comms_packet+0x2a4>)
  402d5a:	4798      	blx	r3
  402d5c:	bd08      	pop	{r3, pc}
			case API_FW_DSP_SEND_COMM_FLAG_RES:             API_FW_DSP_send_comm_flag_res( msg_ptr );             break;
  402d5e:	4b2b      	ldr	r3, [pc, #172]	; (402e0c <decode_incoming_comms_packet+0x2a8>)
  402d60:	4798      	blx	r3
  402d62:	bd08      	pop	{r3, pc}
			case API_RTC_DSP_UPDATE_RES:                    API_RTC_DSP_update_res( msg_ptr );                    break;
  402d64:	4b2a      	ldr	r3, [pc, #168]	; (402e10 <decode_incoming_comms_packet+0x2ac>)
  402d66:	4798      	blx	r3
  402d68:	bd08      	pop	{r3, pc}
			case API_UNIT_CONFIG_DSP_UPDATE_RES:            API_UNIT_CONFIG_DSP_update_res( msg_ptr );            break;
  402d6a:	4b2a      	ldr	r3, [pc, #168]	; (402e14 <decode_incoming_comms_packet+0x2b0>)
  402d6c:	4798      	blx	r3
  402d6e:	bd08      	pop	{r3, pc}
			case API_UNIT_CALIBRATION_DSP_UPDATE_RES:       API_UNIT_CALIBRATION_DSP_update_res( msg_ptr );       break;
  402d70:	4b29      	ldr	r3, [pc, #164]	; (402e18 <decode_incoming_comms_packet+0x2b4>)
  402d72:	4798      	blx	r3
  402d74:	bd08      	pop	{r3, pc}
			case API_CTRL_DSP_TREND_150CYCLES_RES:          API_CTRL_DSP_trend_150cycles_res( msg_ptr );          break;
  402d76:	4b29      	ldr	r3, [pc, #164]	; (402e1c <decode_incoming_comms_packet+0x2b8>)
  402d78:	4798      	blx	r3
  402d7a:	bd08      	pop	{r3, pc}
			case API_CTRL_DSP_TREND_5MINUTES_RES:           API_CTRL_DSP_trend_5minutes_res( msg_ptr );           break;
  402d7c:	4b28      	ldr	r3, [pc, #160]	; (402e20 <decode_incoming_comms_packet+0x2bc>)
  402d7e:	4798      	blx	r3
  402d80:	bd08      	pop	{r3, pc}
			case API_CTRL_DSP_EVENT_BUFFER_RES:             API_CTRL_DSP_event_buffer_res( msg_ptr );             break;
  402d82:	4b28      	ldr	r3, [pc, #160]	; (402e24 <decode_incoming_comms_packet+0x2c0>)
  402d84:	4798      	blx	r3
  402d86:	bd08      	pop	{r3, pc}
			case API_CTRL_DSP_EVENT_DET_RES:                API_CTRL_DSP_event_det_res( msg_ptr );                break;
  402d88:	4b27      	ldr	r3, [pc, #156]	; (402e28 <decode_incoming_comms_packet+0x2c4>)
  402d8a:	4798      	blx	r3
  402d8c:	bd08      	pop	{r3, pc}
			
			// ARM - Bootloader
			case API_BOOT_ARM_START_UPLOAD_REQ:             API_BOOT_ARM_start_upload_req( msg_ptr );             break;
  402d8e:	4b27      	ldr	r3, [pc, #156]	; (402e2c <decode_incoming_comms_packet+0x2c8>)
  402d90:	4798      	blx	r3
  402d92:	bd08      	pop	{r3, pc}
			case API_BOOT_ARM_UPLOAD_BLOCK_REQ:             API_BOOT_ARM_upload_block_req( msg_ptr );             break;
  402d94:	4b26      	ldr	r3, [pc, #152]	; (402e30 <decode_incoming_comms_packet+0x2cc>)
  402d96:	4798      	blx	r3
  402d98:	bd08      	pop	{r3, pc}
			case API_BOOT_ARM_INSTALL_IMAGE_REQ:            API_BOOT_ARM_install_image_req( msg_ptr );            break;
  402d9a:	4b26      	ldr	r3, [pc, #152]	; (402e34 <decode_incoming_comms_packet+0x2d0>)
  402d9c:	4798      	blx	r3
  402d9e:	bd08      	pop	{r3, pc}
			
			// Unknown command
			default:                                        API_FW_ARM_unknow_msg_id( msg_ptr );	              break;
  402da0:	4b25      	ldr	r3, [pc, #148]	; (402e38 <decode_incoming_comms_packet+0x2d4>)
  402da2:	4798      	blx	r3
  402da4:	bd08      	pop	{r3, pc}
  402da6:	bf00      	nop
  402da8:	400e0600 	.word	0x400e0600
  402dac:	00403059 	.word	0x00403059
  402db0:	400e0800 	.word	0x400e0800
  402db4:	00400599 	.word	0x00400599
  402db8:	00400635 	.word	0x00400635
  402dbc:	00400659 	.word	0x00400659
  402dc0:	0040067d 	.word	0x0040067d
  402dc4:	00400aa9 	.word	0x00400aa9
  402dc8:	00400b29 	.word	0x00400b29
  402dcc:	00400b4d 	.word	0x00400b4d
  402dd0:	00400bb5 	.word	0x00400bb5
  402dd4:	00400c35 	.word	0x00400c35
  402dd8:	00400c59 	.word	0x00400c59
  402ddc:	004006d1 	.word	0x004006d1
  402de0:	0040072d 	.word	0x0040072d
  402de4:	004007b5 	.word	0x004007b5
  402de8:	0040081d 	.word	0x0040081d
  402dec:	00400899 	.word	0x00400899
  402df0:	00400905 	.word	0x00400905
  402df4:	00400971 	.word	0x00400971
  402df8:	004009f5 	.word	0x004009f5
  402dfc:	004008d9 	.word	0x004008d9
  402e00:	00400a41 	.word	0x00400a41
  402e04:	00400a71 	.word	0x00400a71
  402e08:	004001ed 	.word	0x004001ed
  402e0c:	0040022d 	.word	0x0040022d
  402e10:	004002a1 	.word	0x004002a1
  402e14:	004002dd 	.word	0x004002dd
  402e18:	00400319 	.word	0x00400319
  402e1c:	00400355 	.word	0x00400355
  402e20:	004003f5 	.word	0x004003f5
  402e24:	00400495 	.word	0x00400495
  402e28:	00400549 	.word	0x00400549
  402e2c:	00400139 	.word	0x00400139
  402e30:	00400179 	.word	0x00400179
  402e34:	004001ad 	.word	0x004001ad
  402e38:	004006ad 	.word	0x004006ad

00402e3c <comm_preprocess_RX_msg>:

/// @brief Generic UART pre-process incoming message
/// @details This functions is called by Rx interrupt when a byte is received.
///          Byte is added to buffer and counter of received data is updated.
/// @param[in] msg_ptr Pointer to msg_t
void comm_preprocess_RX_msg( msg_t * msg_ptr ) {
  402e3c:	b510      	push	{r4, lr}
  402e3e:	4604      	mov	r4, r0

	// Check if a byte was received
	if ( uart_is_rx_ready(msg_ptr->uart_ptr) ) {
  402e40:	6800      	ldr	r0, [r0, #0]
  402e42:	4b08      	ldr	r3, [pc, #32]	; (402e64 <comm_preprocess_RX_msg+0x28>)
  402e44:	4798      	blx	r3
  402e46:	b900      	cbnz	r0, 402e4a <comm_preprocess_RX_msg+0xe>
  402e48:	bd10      	pop	{r4, pc}

		// save new byte
		uart_read(msg_ptr->uart_ptr, &msg_ptr->packet_in[msg_ptr->rx_counter] );
  402e4a:	7921      	ldrb	r1, [r4, #4]
  402e4c:	310c      	adds	r1, #12
  402e4e:	4421      	add	r1, r4
  402e50:	6820      	ldr	r0, [r4, #0]
  402e52:	4b05      	ldr	r3, [pc, #20]	; (402e68 <comm_preprocess_RX_msg+0x2c>)
  402e54:	4798      	blx	r3

		// increment the rx counter and
		msg_ptr->rx_counter++;
  402e56:	7923      	ldrb	r3, [r4, #4]
  402e58:	3301      	adds	r3, #1
  402e5a:	7123      	strb	r3, [r4, #4]

		// reset timeout counter
		msg_ptr->timeout_counter = 0;
  402e5c:	2300      	movs	r3, #0
  402e5e:	60a3      	str	r3, [r4, #8]

	}

}
  402e60:	e7f2      	b.n	402e48 <comm_preprocess_RX_msg+0xc>
  402e62:	bf00      	nop
  402e64:	004051af 	.word	0x004051af
  402e68:	004051c7 	.word	0x004051c7

00402e6c <comm_process_RX_msg>:


/// @brief Generic UART process incoming message
/// @details This functions is called in background and check if a message is complete.
/// @param[in] msg_ptr Pointer to UART structure
void comm_process_RX_msg( msg_t * msg_ptr ) {
  402e6c:	b510      	push	{r4, lr}
  402e6e:	4604      	mov	r4, r0

	// If error occurs, start over.
    if ( uart_get_status(msg_ptr->uart_ptr) == (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE) ) {
  402e70:	6800      	ldr	r0, [r0, #0]
  402e72:	4b2e      	ldr	r3, [pc, #184]	; (402f2c <comm_process_RX_msg+0xc0>)
  402e74:	4798      	blx	r3
  402e76:	28e0      	cmp	r0, #224	; 0xe0
  402e78:	d01a      	beq.n	402eb0 <comm_process_RX_msg+0x44>
																// TODO: this is e problem for other uC.

    }

    // Increment timeout counter
    msg_ptr->timeout_counter++;
  402e7a:	68a3      	ldr	r3, [r4, #8]
  402e7c:	3301      	adds	r3, #1
  402e7e:	60a3      	str	r3, [r4, #8]

    // Reset counters if timeout occurs
    if (msg_ptr->timeout_counter == MSG_TIMEOUT) {
  402e80:	f240 72ff 	movw	r2, #2047	; 0x7ff
  402e84:	4293      	cmp	r3, r2
  402e86:	d020      	beq.n	402eca <comm_process_RX_msg+0x5e>
    	msg_ptr->timeout_counter = 0;
    	msg_ptr->rx_counter = 0;
    }

   	// Check proper start byte
   	if (msg_ptr->rx_counter > 0) {
  402e88:	7923      	ldrb	r3, [r4, #4]
  402e8a:	b123      	cbz	r3, 402e96 <comm_process_RX_msg+0x2a>
   		if (msg_ptr->packet_in[msg_h_start] != MSG_START_BYTE)
  402e8c:	7b23      	ldrb	r3, [r4, #12]
  402e8e:	2b3c      	cmp	r3, #60	; 0x3c
  402e90:	d02b      	beq.n	402eea <comm_process_RX_msg+0x7e>
   			msg_ptr->rx_counter = 0; // reset buffer
  402e92:	2300      	movs	r3, #0
  402e94:	7123      	strb	r3, [r4, #4]
               (msg_ptr->packet_in[msg_h_src_id] == SETTINGS_RPI_ID) ))
       		msg_ptr->rx_counter = 0; // reset buffer
   	}

   	// Check proper destination id
   	if (msg_ptr->rx_counter > 3) {
  402e96:	7923      	ldrb	r3, [r4, #4]
  402e98:	2b03      	cmp	r3, #3
  402e9a:	d92e      	bls.n	402efa <comm_process_RX_msg+0x8e>
		    //	{
			//		#include "../apps/system.h"
			//		led_green_on();
		   	//	}		   
       	if (!( (msg_ptr->packet_in[msg_h_des_id] == SETTINGS_ARM_ID) ||
  402e9c:	7be3      	ldrb	r3, [r4, #15]
  402e9e:	2b77      	cmp	r3, #119	; 0x77
  402ea0:	d02b      	beq.n	402efa <comm_process_RX_msg+0x8e>
  402ea2:	2baa      	cmp	r3, #170	; 0xaa
  402ea4:	d029      	beq.n	402efa <comm_process_RX_msg+0x8e>
  402ea6:	2b33      	cmp	r3, #51	; 0x33
  402ea8:	d027      	beq.n	402efa <comm_process_RX_msg+0x8e>
       		   (msg_ptr->packet_in[msg_h_des_id] == SETTINGS_RPI_ID) ||
			   (msg_ptr->packet_in[msg_h_des_id] == SETTINGS_DSP_ID)))
       		msg_ptr->rx_counter = 0; // reset buffer
  402eaa:	2300      	movs	r3, #0
  402eac:	7123      	strb	r3, [r4, #4]
  402eae:	bd10      	pop	{r4, pc}
    	memset( msg_ptr->packet_in , 0 , MSG_LENGHT_MAX_SIZE ); // Reset buffer
  402eb0:	2288      	movs	r2, #136	; 0x88
  402eb2:	2100      	movs	r1, #0
  402eb4:	f104 000c 	add.w	r0, r4, #12
  402eb8:	4b1d      	ldr	r3, [pc, #116]	; (402f30 <comm_process_RX_msg+0xc4>)
  402eba:	4798      	blx	r3
        msg_ptr->rx_counter = 0;                                // Reset rx index
  402ebc:	2300      	movs	r3, #0
  402ebe:	7123      	strb	r3, [r4, #4]
        msg_ptr->timeout_counter = 0;                           // Reset timeout counter
  402ec0:	60a3      	str	r3, [r4, #8]
        uart_reset_status(msg_ptr->uart_ptr);					// Clear error since it will block receiving
  402ec2:	6820      	ldr	r0, [r4, #0]
  402ec4:	4b1b      	ldr	r3, [pc, #108]	; (402f34 <comm_process_RX_msg+0xc8>)
  402ec6:	4798      	blx	r3
  402ec8:	e7d7      	b.n	402e7a <comm_process_RX_msg+0xe>
    	msg_ptr->timeout_counter = 0;
  402eca:	2300      	movs	r3, #0
  402ecc:	60a3      	str	r3, [r4, #8]
    	msg_ptr->rx_counter = 0;
  402ece:	7123      	strb	r3, [r4, #4]
   	if (msg_ptr->rx_counter > 2) {
  402ed0:	7923      	ldrb	r3, [r4, #4]
  402ed2:	2b02      	cmp	r3, #2
  402ed4:	d9df      	bls.n	402e96 <comm_process_RX_msg+0x2a>
       	if (!( (msg_ptr->packet_in[msg_h_src_id] == SETTINGS_OTHERS_ID) ||
  402ed6:	7ba3      	ldrb	r3, [r4, #14]
  402ed8:	2bee      	cmp	r3, #238	; 0xee
  402eda:	d0dc      	beq.n	402e96 <comm_process_RX_msg+0x2a>
  402edc:	2b33      	cmp	r3, #51	; 0x33
  402ede:	d0da      	beq.n	402e96 <comm_process_RX_msg+0x2a>
  402ee0:	2baa      	cmp	r3, #170	; 0xaa
  402ee2:	d0d8      	beq.n	402e96 <comm_process_RX_msg+0x2a>
       		msg_ptr->rx_counter = 0; // reset buffer
  402ee4:	2300      	movs	r3, #0
  402ee6:	7123      	strb	r3, [r4, #4]
  402ee8:	bd10      	pop	{r4, pc}
   	if (msg_ptr->rx_counter > 1) {
  402eea:	7923      	ldrb	r3, [r4, #4]
  402eec:	2b01      	cmp	r3, #1
  402eee:	d9ef      	bls.n	402ed0 <comm_process_RX_msg+0x64>
       	if (!(msg_ptr->packet_in[msg_h_proj_id] == SETTINGS_PROJECT_ID) )
  402ef0:	7b63      	ldrb	r3, [r4, #13]
  402ef2:	2b04      	cmp	r3, #4
  402ef4:	d0ec      	beq.n	402ed0 <comm_process_RX_msg+0x64>
       		msg_ptr->rx_counter = 0; // reset buffer
  402ef6:	2300      	movs	r3, #0
  402ef8:	7123      	strb	r3, [r4, #4]
   	}

   	// if the packet is complete, check CRC and packet out is not busy, decode message and reset buffer
   	if (  (msg_ptr->rx_counter >= MSG_LENGHT_HEADER) &&
  402efa:	7921      	ldrb	r1, [r4, #4]
  402efc:	2907      	cmp	r1, #7
  402efe:	d903      	bls.n	402f08 <comm_process_RX_msg+0x9c>
   		  ((msg_ptr->packet_in[msg_h_payload_len] + MSG_LENGHT_HEADER) == msg_ptr->rx_counter) &&
  402f00:	7c63      	ldrb	r3, [r4, #17]
  402f02:	3308      	adds	r3, #8
   	if (  (msg_ptr->rx_counter >= MSG_LENGHT_HEADER) &&
  402f04:	428b      	cmp	r3, r1
  402f06:	d000      	beq.n	402f0a <comm_process_RX_msg+0x9e>
  402f08:	bd10      	pop	{r4, pc}
          (!packet_out_busy ) &&
  402f0a:	4b0b      	ldr	r3, [pc, #44]	; (402f38 <comm_process_RX_msg+0xcc>)
   		  ((msg_ptr->packet_in[msg_h_payload_len] + MSG_LENGHT_HEADER) == msg_ptr->rx_counter) &&
  402f0c:	781b      	ldrb	r3, [r3, #0]
  402f0e:	2b00      	cmp	r3, #0
  402f10:	d1fa      	bne.n	402f08 <comm_process_RX_msg+0x9c>
   		  (!calculate_checksum( msg_ptr->packet_in , (uint16_t) msg_ptr->rx_counter)) ) {
  402f12:	f104 000c 	add.w	r0, r4, #12
  402f16:	4b09      	ldr	r3, [pc, #36]	; (402f3c <comm_process_RX_msg+0xd0>)
  402f18:	4798      	blx	r3
          (!packet_out_busy ) &&
  402f1a:	2800      	cmp	r0, #0
  402f1c:	d1f4      	bne.n	402f08 <comm_process_RX_msg+0x9c>
       		decode_incoming_comms_packet( msg_ptr );
  402f1e:	4620      	mov	r0, r4
  402f20:	4b07      	ldr	r3, [pc, #28]	; (402f40 <comm_process_RX_msg+0xd4>)
  402f22:	4798      	blx	r3
       	msg_ptr->rx_counter = 0; // reset buffer
  402f24:	2300      	movs	r3, #0
  402f26:	7123      	strb	r3, [r4, #4]
   	}

}
  402f28:	e7ee      	b.n	402f08 <comm_process_RX_msg+0x9c>
  402f2a:	bf00      	nop
  402f2c:	0040519b 	.word	0x0040519b
  402f30:	00409669 	.word	0x00409669
  402f34:	0040519f 	.word	0x0040519f
  402f38:	20000dec 	.word	0x20000dec
  402f3c:	00403201 	.word	0x00403201
  402f40:	00402b65 	.word	0x00402b65

00402f44 <uart_send_packet>:

void uart_send_packet(Uart *uart_ptr, uint8_t *tx_packet, uint16_t tx_len) {
	
	while (tx_len--) {
  402f44:	b1aa      	cbz	r2, 402f72 <uart_send_packet+0x2e>
void uart_send_packet(Uart *uart_ptr, uint8_t *tx_packet, uint16_t tx_len) {
  402f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402f4a:	1e57      	subs	r7, r2, #1
  402f4c:	b2bf      	uxth	r7, r7
  402f4e:	4604      	mov	r4, r0
  402f50:	1e4e      	subs	r6, r1, #1
  402f52:	440f      	add	r7, r1

		// wait for sci FIFO transmit data register to have space
        while ( !uart_is_tx_empty(uart_ptr) );
  402f54:	4d07      	ldr	r5, [pc, #28]	; (402f74 <uart_send_packet+0x30>)

		uart_write( uart_ptr , *tx_packet++ );
  402f56:	f8df 8020 	ldr.w	r8, [pc, #32]	; 402f78 <uart_send_packet+0x34>
        while ( !uart_is_tx_empty(uart_ptr) );
  402f5a:	4620      	mov	r0, r4
  402f5c:	47a8      	blx	r5
  402f5e:	2800      	cmp	r0, #0
  402f60:	d0fb      	beq.n	402f5a <uart_send_packet+0x16>
		uart_write( uart_ptr , *tx_packet++ );
  402f62:	f816 1f01 	ldrb.w	r1, [r6, #1]!
  402f66:	4620      	mov	r0, r4
  402f68:	47c0      	blx	r8
	while (tx_len--) {
  402f6a:	42be      	cmp	r6, r7
  402f6c:	d1f5      	bne.n	402f5a <uart_send_packet+0x16>
  402f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402f72:	4770      	bx	lr
  402f74:	004051a7 	.word	0x004051a7
  402f78:	004051b7 	.word	0x004051b7

00402f7c <comm_init>:
}

/**************************** GLOBAL FUNCTIONS *******************************/

/// @brief Communication initialization routine.
void comm_init(void) {
  402f7c:	b570      	push	{r4, r5, r6, lr}

	// TX buffer
	memset( (void *)&packet_out , 0 , MSG_LENGHT_MAX_SIZE );
  402f7e:	2288      	movs	r2, #136	; 0x88
  402f80:	2100      	movs	r1, #0
  402f82:	480c      	ldr	r0, [pc, #48]	; (402fb4 <comm_init+0x38>)
  402f84:	4c0c      	ldr	r4, [pc, #48]	; (402fb8 <comm_init+0x3c>)
  402f86:	47a0      	blx	r4

	// UART DB15 variable initialization
	memset( (void *)&UART_RPI_msg , 0 , sizeof(UART_RPI_msg) );
  402f88:	4d0c      	ldr	r5, [pc, #48]	; (402fbc <comm_init+0x40>)
  402f8a:	2694      	movs	r6, #148	; 0x94
  402f8c:	4632      	mov	r2, r6
  402f8e:	2100      	movs	r1, #0
  402f90:	4628      	mov	r0, r5
  402f92:	47a0      	blx	r4
	UART_RPI_msg.uart_ptr = UART_RPI;
  402f94:	4b0a      	ldr	r3, [pc, #40]	; (402fc0 <comm_init+0x44>)
  402f96:	602b      	str	r3, [r5, #0]

	// UART DSP variable initialization
	memset( (void *)&UART_DSP_msg , 0 , sizeof(UART_DSP_msg) );
  402f98:	4d0a      	ldr	r5, [pc, #40]	; (402fc4 <comm_init+0x48>)
  402f9a:	4632      	mov	r2, r6
  402f9c:	2100      	movs	r1, #0
  402f9e:	4628      	mov	r0, r5
  402fa0:	47a0      	blx	r4
	UART_DSP_msg.uart_ptr = UART_DSP;
  402fa2:	4b09      	ldr	r3, [pc, #36]	; (402fc8 <comm_init+0x4c>)
  402fa4:	602b      	str	r3, [r5, #0]
	
	// init counters
	comm_TX_counter = 0;
  402fa6:	2300      	movs	r3, #0
  402fa8:	4a08      	ldr	r2, [pc, #32]	; (402fcc <comm_init+0x50>)
  402faa:	8013      	strh	r3, [r2, #0]
	comm_DSP_counter = 0;
  402fac:	4a08      	ldr	r2, [pc, #32]	; (402fd0 <comm_init+0x54>)
  402fae:	8013      	strh	r3, [r2, #0]
  402fb0:	bd70      	pop	{r4, r5, r6, pc}
  402fb2:	bf00      	nop
  402fb4:	20001ef0 	.word	0x20001ef0
  402fb8:	00409669 	.word	0x00409669
  402fbc:	20001e58 	.word	0x20001e58
  402fc0:	400e0800 	.word	0x400e0800
  402fc4:	20001f7c 	.word	0x20001f7c
  402fc8:	400e0600 	.word	0x400e0600
  402fcc:	20001f78 	.word	0x20001f78
  402fd0:	20001eec 	.word	0x20001eec

00402fd4 <comm_background>:
/// @details It run several function related to communication:
///          1) Process incoming msg from DSP
///          2) Run the following by priority
///             2.1) Pending communication with DSP
///             2.2) Process incoming msg from RPI
void comm_background(void) {
  402fd4:	b510      	push	{r4, lr}
	// TODO: pass this function to DMA interruption routine
	//comm_preprocess_RX_msg( &UART_DSP_msg );
	//comm_preprocess_RX_msg( &UART_RPI_msg );
	
    // Process message from UART_DSP (run it always)
	comm_process_RX_msg( &UART_DSP_msg );
  402fd6:	4803      	ldr	r0, [pc, #12]	; (402fe4 <comm_background+0x10>)
  402fd8:	4c03      	ldr	r4, [pc, #12]	; (402fe8 <comm_background+0x14>)
  402fda:	47a0      	blx	r4
				API_CTRL_DSP_event_buffer_req();
				gpio_set_pin_low(TP3_GPIO);
			}
			// if nothing to do, process msg from RPI
			else*/
				comm_process_RX_msg( &UART_RPI_msg );
  402fdc:	4803      	ldr	r0, [pc, #12]	; (402fec <comm_background+0x18>)
  402fde:	47a0      	blx	r4
  402fe0:	bd10      	pop	{r4, pc}
  402fe2:	bf00      	nop
  402fe4:	20001f7c 	.word	0x20001f7c
  402fe8:	00402e6d 	.word	0x00402e6d
  402fec:	20001e58 	.word	0x20001e58

00402ff0 <comm_send_msg>:
void comm_send_msg( Uart *uart_ptr ,
		            uint8_t msg_des,
		            uint8_t msg_id ,
		            uint8_t payload_len ,
		            uint8_t * payload_ptr
		            ) {
  402ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402ff4:	4680      	mov	r8, r0
  402ff6:	461d      	mov	r5, r3

	 uint16_t checksum;

	 // set flag of packet out busy
	 packet_out_busy = 1;
  402ff8:	4e12      	ldr	r6, [pc, #72]	; (403044 <comm_send_msg+0x54>)
  402ffa:	2301      	movs	r3, #1
  402ffc:	7033      	strb	r3, [r6, #0]

	 // Fill in output packet structure
	 packet_out[msg_h_start] = MSG_START_BYTE;
  402ffe:	4c12      	ldr	r4, [pc, #72]	; (403048 <comm_send_msg+0x58>)
  403000:	233c      	movs	r3, #60	; 0x3c
  403002:	7023      	strb	r3, [r4, #0]
	 packet_out[msg_h_proj_id] = SETTINGS_PROJECT_ID;
  403004:	2304      	movs	r3, #4
  403006:	7063      	strb	r3, [r4, #1]
	 packet_out[msg_h_src_id] = SETTINGS_ARM_ID;
  403008:	2377      	movs	r3, #119	; 0x77
  40300a:	70a3      	strb	r3, [r4, #2]
	 packet_out[msg_h_des_id] = msg_des;
  40300c:	70e1      	strb	r1, [r4, #3]
	 packet_out[msg_h_msg_id] = msg_id;
  40300e:	7122      	strb	r2, [r4, #4]
	 packet_out[msg_h_payload_len] = payload_len;
  403010:	7165      	strb	r5, [r4, #5]

	 // save payload
	 copy_content( payload_ptr , &packet_out[msg_h_payload_1st_byte] , payload_len );
  403012:	b2af      	uxth	r7, r5
  403014:	463a      	mov	r2, r7
  403016:	1da1      	adds	r1, r4, #6
  403018:	9806      	ldr	r0, [sp, #24]
  40301a:	4b0c      	ldr	r3, [pc, #48]	; (40304c <comm_send_msg+0x5c>)
  40301c:	4798      	blx	r3

     // Append checksum
     checksum = calculate_checksum( packet_out , (uint16_t) (packet_out[msg_h_payload_len] + MSG_LENGHT_HEADER - 2));
  40301e:	7961      	ldrb	r1, [r4, #5]
  403020:	3106      	adds	r1, #6
  403022:	4620      	mov	r0, r4
  403024:	4b0a      	ldr	r3, [pc, #40]	; (403050 <comm_send_msg+0x60>)
  403026:	4798      	blx	r3
	 packet_out[MSG_LENGHT_HEADER - 2 + payload_len] = ( checksum      & 0xFF );
  403028:	4425      	add	r5, r4
  40302a:	71a8      	strb	r0, [r5, #6]
	 packet_out[MSG_LENGHT_HEADER - 1 + payload_len] = ( (checksum>>8) & 0xFF );
  40302c:	0a00      	lsrs	r0, r0, #8
  40302e:	71e8      	strb	r0, [r5, #7]

     // Send packet via UART
	 uart_send_packet( uart_ptr , packet_out , MSG_LENGHT_HEADER + payload_len );
  403030:	f107 0208 	add.w	r2, r7, #8
  403034:	4621      	mov	r1, r4
  403036:	4640      	mov	r0, r8
  403038:	4b06      	ldr	r3, [pc, #24]	; (403054 <comm_send_msg+0x64>)
  40303a:	4798      	blx	r3
	
	 // clear flag of packet out busy
	 packet_out_busy = 0;
  40303c:	2300      	movs	r3, #0
  40303e:	7033      	strb	r3, [r6, #0]
  403040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403044:	20000dec 	.word	0x20000dec
  403048:	20001ef0 	.word	0x20001ef0
  40304c:	00403129 	.word	0x00403129
  403050:	00403201 	.word	0x00403201
  403054:	00402f45 	.word	0x00402f45

00403058 <comm_bypass_msg>:
/// @brief Send request when a received message must be bypassed to other device (VFP to FPGA or FPGA to VFP)
/// @details This functions is called when a well-formed message is received and it must be transmitted to other device.
///
/// @param[in] uart_ptr Pointer to destination UART
/// @param[in] msp_ptr Pointer to incoming message
void comm_bypass_msg( Uart *uart_ptr , msg_t * msg_ptr ) {
  403058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40305a:	4607      	mov	r7, r0
  40305c:	460c      	mov	r4, r1

	uint8_t payload_len;

	 // set flag of packet out busy
	 packet_out_busy = 1;
  40305e:	4d09      	ldr	r5, [pc, #36]	; (403084 <comm_bypass_msg+0x2c>)
  403060:	2301      	movs	r3, #1
  403062:	702b      	strb	r3, [r5, #0]

	 // save packet
	 copy_content( msg_ptr->packet_in , &packet_out[0] , msg_ptr->rx_counter );
  403064:	4e08      	ldr	r6, [pc, #32]	; (403088 <comm_bypass_msg+0x30>)
  403066:	790a      	ldrb	r2, [r1, #4]
  403068:	4631      	mov	r1, r6
  40306a:	f104 000c 	add.w	r0, r4, #12
  40306e:	4b07      	ldr	r3, [pc, #28]	; (40308c <comm_bypass_msg+0x34>)
  403070:	4798      	blx	r3
	 payload_len = msg_ptr->rx_counter;
     
	 // Send packet via UART
     uart_send_packet( uart_ptr , packet_out , payload_len );
  403072:	7922      	ldrb	r2, [r4, #4]
  403074:	4631      	mov	r1, r6
  403076:	4638      	mov	r0, r7
  403078:	4b05      	ldr	r3, [pc, #20]	; (403090 <comm_bypass_msg+0x38>)
  40307a:	4798      	blx	r3
     
     // clear flag of packet out busy
     packet_out_busy = 0;
  40307c:	2300      	movs	r3, #0
  40307e:	702b      	strb	r3, [r5, #0]
  403080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403082:	bf00      	nop
  403084:	20000dec 	.word	0x20000dec
  403088:	20001ef0 	.word	0x20001ef0
  40308c:	00403129 	.word	0x00403129
  403090:	00402f45 	.word	0x00402f45

00403094 <comm_counters_update>:

}

/// @brief Update counters
void comm_counters_update(void) {
  403094:	b508      	push	{r3, lr}

	// Decrease the pending communication counter to repeat a TX if response is not received.
	if (comm_TX_counter>0)
  403096:	4b12      	ldr	r3, [pc, #72]	; (4030e0 <comm_counters_update+0x4c>)
  403098:	881b      	ldrh	r3, [r3, #0]
  40309a:	b113      	cbz	r3, 4030a2 <comm_counters_update+0xe>
		comm_TX_counter--;
  40309c:	3b01      	subs	r3, #1
  40309e:	4a10      	ldr	r2, [pc, #64]	; (4030e0 <comm_counters_update+0x4c>)
  4030a0:	8013      	strh	r3, [r2, #0]
	else
		comm_TX_counter = 0;
		
	// Increase DSP communication flag counter
	comm_DSP_counter++;
  4030a2:	4a10      	ldr	r2, [pc, #64]	; (4030e4 <comm_counters_update+0x50>)
  4030a4:	8813      	ldrh	r3, [r2, #0]
  4030a6:	3301      	adds	r3, #1
  4030a8:	b29b      	uxth	r3, r3
  4030aa:	8013      	strh	r3, [r2, #0]
		
	// if DSP communication flag counter reach 1 second, update ARM communication flags
	// to force the request in background
	if (comm_DSP_counter<5000) {
  4030ac:	f241 3287 	movw	r2, #4999	; 0x1387
  4030b0:	4293      	cmp	r3, r2
  4030b2:	d90d      	bls.n	4030d0 <comm_counters_update+0x3c>
		led_red_on();
	}
	else if (comm_DSP_counter<10000) {
  4030b4:	f242 720f 	movw	r2, #9999	; 0x270f
  4030b8:	4293      	cmp	r3, r2
  4030ba:	d90d      	bls.n	4030d8 <comm_counters_update+0x44>
		led_red_off();
	}
	else {
		comm_DSP_counter = 0;
  4030bc:	2200      	movs	r2, #0
  4030be:	4b09      	ldr	r3, [pc, #36]	; (4030e4 <comm_counters_update+0x50>)
  4030c0:	801a      	strh	r2, [r3, #0]
		comm_flags |= SETTINGS_COMM_FLAG_REQUEST_MASK;
  4030c2:	4a09      	ldr	r2, [pc, #36]	; (4030e8 <comm_counters_update+0x54>)
  4030c4:	8813      	ldrh	r3, [r2, #0]
  4030c6:	b29b      	uxth	r3, r3
  4030c8:	f043 0302 	orr.w	r3, r3, #2
  4030cc:	8013      	strh	r3, [r2, #0]
  4030ce:	bd08      	pop	{r3, pc}
		led_red_on();
  4030d0:	200f      	movs	r0, #15
  4030d2:	4b06      	ldr	r3, [pc, #24]	; (4030ec <comm_counters_update+0x58>)
  4030d4:	4798      	blx	r3
  4030d6:	bd08      	pop	{r3, pc}
		led_red_off();
  4030d8:	200f      	movs	r0, #15
  4030da:	4b05      	ldr	r3, [pc, #20]	; (4030f0 <comm_counters_update+0x5c>)
  4030dc:	4798      	blx	r3
  4030de:	bd08      	pop	{r3, pc}
  4030e0:	20001f78 	.word	0x20001f78
  4030e4:	20001eec 	.word	0x20001eec
  4030e8:	20001e54 	.word	0x20001e54
  4030ec:	0040498b 	.word	0x0040498b
  4030f0:	004049a5 	.word	0x004049a5

004030f4 <comm_TX_counter_clear>:
}

/// @brief Clear pending communication counter
void comm_TX_counter_clear(void) {

	comm_TX_counter = 0;
  4030f4:	2200      	movs	r2, #0
  4030f6:	4b01      	ldr	r3, [pc, #4]	; (4030fc <comm_TX_counter_clear+0x8>)
  4030f8:	801a      	strh	r2, [r3, #0]
  4030fa:	4770      	bx	lr
  4030fc:	20001f78 	.word	0x20001f78

00403100 <comm_preprocess_uart_DSP_RX>:
	comm_TX_counter = 5000;

}


void comm_preprocess_uart_DSP_RX(void) {
  403100:	b508      	push	{r3, lr}
	comm_preprocess_RX_msg( &UART_DSP_msg );
  403102:	4802      	ldr	r0, [pc, #8]	; (40310c <comm_preprocess_uart_DSP_RX+0xc>)
  403104:	4b02      	ldr	r3, [pc, #8]	; (403110 <comm_preprocess_uart_DSP_RX+0x10>)
  403106:	4798      	blx	r3
  403108:	bd08      	pop	{r3, pc}
  40310a:	bf00      	nop
  40310c:	20001f7c 	.word	0x20001f7c
  403110:	00402e3d 	.word	0x00402e3d

00403114 <comm_preprocess_uart_RPI_RX>:
}

void comm_preprocess_uart_RPI_RX(void) {
  403114:	b508      	push	{r3, lr}
	comm_preprocess_RX_msg( &UART_RPI_msg );
  403116:	4802      	ldr	r0, [pc, #8]	; (403120 <comm_preprocess_uart_RPI_RX+0xc>)
  403118:	4b02      	ldr	r3, [pc, #8]	; (403124 <comm_preprocess_uart_RPI_RX+0x10>)
  40311a:	4798      	blx	r3
  40311c:	bd08      	pop	{r3, pc}
  40311e:	bf00      	nop
  403120:	20001e58 	.word	0x20001e58
  403124:	00402e3d 	.word	0x00402e3d

00403128 <copy_content>:

void copy_content(uint8_t *source, uint8_t *target, uint16_t length)
{
    uint16_t i = 0;

    for (i = 0; i < length; i++)
  403128:	b162      	cbz	r2, 403144 <copy_content+0x1c>
{
  40312a:	b410      	push	{r4}
  40312c:	1e43      	subs	r3, r0, #1
  40312e:	3901      	subs	r1, #1
  403130:	1e54      	subs	r4, r2, #1
  403132:	fa10 f084 	uxtah	r0, r0, r4
        target[i] = source[i];
  403136:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  40313a:	f801 2f01 	strb.w	r2, [r1, #1]!
    for (i = 0; i < length; i++)
  40313e:	4283      	cmp	r3, r0
  403140:	d1f9      	bne.n	403136 <copy_content+0xe>
}
  403142:	bc10      	pop	{r4}
  403144:	4770      	bx	lr
	...

00403148 <compare_content>:

// length is in bytes, return flag: mismatch
uint16_t compare_content(volatile uint8_t *in1, uint8_t *in2, uint16_t length)
{
  403148:	b470      	push	{r4, r5, r6}
    static uint16_t i = 0;

    for (i = 0; i < length; i++) {
  40314a:	2400      	movs	r4, #0
  40314c:	4b10      	ldr	r3, [pc, #64]	; (403190 <compare_content+0x48>)
  40314e:	801c      	strh	r4, [r3, #0]
  403150:	4616      	mov	r6, r2
  403152:	b1c2      	cbz	r2, 403186 <compare_content+0x3e>
        if (in1[i] != in2[i]) {
  403154:	7803      	ldrb	r3, [r0, #0]
  403156:	b2db      	uxtb	r3, r3
  403158:	780a      	ldrb	r2, [r1, #0]
  40315a:	429a      	cmp	r2, r3
  40315c:	d115      	bne.n	40318a <compare_content+0x42>
  40315e:	2301      	movs	r3, #1
    for (i = 0; i < length; i++) {
  403160:	b29c      	uxth	r4, r3
  403162:	42a6      	cmp	r6, r4
  403164:	d90a      	bls.n	40317c <compare_content+0x34>
        if (in1[i] != in2[i]) {
  403166:	5cc2      	ldrb	r2, [r0, r3]
  403168:	b2d2      	uxtb	r2, r2
  40316a:	3301      	adds	r3, #1
  40316c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  403170:	4295      	cmp	r5, r2
  403172:	d0f5      	beq.n	403160 <compare_content+0x18>
  403174:	4b06      	ldr	r3, [pc, #24]	; (403190 <compare_content+0x48>)
  403176:	801c      	strh	r4, [r3, #0]
            // if content unmatched
            return 1;
  403178:	2001      	movs	r0, #1
  40317a:	e002      	b.n	403182 <compare_content+0x3a>
  40317c:	4b04      	ldr	r3, [pc, #16]	; (403190 <compare_content+0x48>)
  40317e:	801c      	strh	r4, [r3, #0]
        }
    }
    // if content is matched
    return 0;
  403180:	2000      	movs	r0, #0
}
  403182:	bc70      	pop	{r4, r5, r6}
  403184:	4770      	bx	lr
    return 0;
  403186:	4610      	mov	r0, r2
  403188:	e7fb      	b.n	403182 <compare_content+0x3a>
            return 1;
  40318a:	2001      	movs	r0, #1
  40318c:	e7f9      	b.n	403182 <compare_content+0x3a>
  40318e:	bf00      	nop
  403190:	20000dee 	.word	0x20000dee

00403194 <calculate_checksum_ptr>:

// returns 16-bit checksum. If done for a packet with checksum appended, should return 0
// length is in bytes!
// be careful this function is not reentrant
void calculate_checksum_ptr(uint8_t input[], uint32_t length, uint16_t *result)
{
  403194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    static uint8_t data = 0;
    static uint8_t result_bit = 0;
    static uint8_t data_bit = 0;

    // for every byte
    for (i = 0; i < length; i++) {
  403198:	2400      	movs	r4, #0
  40319a:	4b16      	ldr	r3, [pc, #88]	; (4031f4 <calculate_checksum_ptr+0x60>)
  40319c:	601c      	str	r4, [r3, #0]
  40319e:	b331      	cbz	r1, 4031ee <calculate_checksum_ptr+0x5a>
  4031a0:	468c      	mov	ip, r1
  4031a2:	4607      	mov	r7, r0
  4031a4:	eb00 0e01 	add.w	lr, r0, r1
        data = input[i];
  4031a8:	f04f 0808 	mov.w	r8, #8
 
            data_bit = data & 0x1;        // get LSbit
            data = data >> 1;            // shift down
 
            if (result_bit != data_bit) {
                *result = *result ^ CRCPoly;
  4031ac:	f24a 0601 	movw	r6, #40961	; 0xa001
        data = input[i];
  4031b0:	f817 5b01 	ldrb.w	r5, [r7], #1
  4031b4:	8813      	ldrh	r3, [r2, #0]
  4031b6:	4641      	mov	r1, r8
            result_bit = *result & 0x1;    // get LSbit
  4031b8:	f003 0401 	and.w	r4, r3, #1
            data_bit = data & 0x1;        // get LSbit
  4031bc:	f005 0001 	and.w	r0, r5, #1
            if (result_bit != data_bit) {
  4031c0:	4284      	cmp	r4, r0
  4031c2:	ea4f 0555 	mov.w	r5, r5, lsr #1
  4031c6:	ea4f 0353 	mov.w	r3, r3, lsr #1
                *result = *result ^ CRCPoly;
  4031ca:	bf1c      	itt	ne
  4031cc:	4073      	eorne	r3, r6
  4031ce:	b29b      	uxthne	r3, r3
  4031d0:	3901      	subs	r1, #1
        for (j = 0; j < 8; j++) {
  4031d2:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
  4031d6:	d1ef      	bne.n	4031b8 <calculate_checksum_ptr+0x24>
  4031d8:	8013      	strh	r3, [r2, #0]
    for (i = 0; i < length; i++) {
  4031da:	4577      	cmp	r7, lr
  4031dc:	d1e8      	bne.n	4031b0 <calculate_checksum_ptr+0x1c>
  4031de:	4b06      	ldr	r3, [pc, #24]	; (4031f8 <calculate_checksum_ptr+0x64>)
  4031e0:	701d      	strb	r5, [r3, #0]
  4031e2:	2208      	movs	r2, #8
  4031e4:	4b05      	ldr	r3, [pc, #20]	; (4031fc <calculate_checksum_ptr+0x68>)
  4031e6:	701a      	strb	r2, [r3, #0]
  4031e8:	4b02      	ldr	r3, [pc, #8]	; (4031f4 <calculate_checksum_ptr+0x60>)
  4031ea:	f8c3 c000 	str.w	ip, [r3]
  4031ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4031f2:	bf00      	nop
  4031f4:	20000df0 	.word	0x20000df0
  4031f8:	20000ded 	.word	0x20000ded
  4031fc:	20000df4 	.word	0x20000df4

00403200 <calculate_checksum>:
{
  403200:	b500      	push	{lr}
  403202:	b083      	sub	sp, #12
    uint16_t checksum = 0;
  403204:	aa02      	add	r2, sp, #8
  403206:	2300      	movs	r3, #0
  403208:	f822 3d02 	strh.w	r3, [r2, #-2]!
    calculate_checksum_ptr(input, length, &checksum);
  40320c:	4b03      	ldr	r3, [pc, #12]	; (40321c <calculate_checksum+0x1c>)
  40320e:	4798      	blx	r3
}
  403210:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  403214:	b003      	add	sp, #12
  403216:	f85d fb04 	ldr.w	pc, [sp], #4
  40321a:	bf00      	nop
  40321c:	00403195 	.word	0x00403195

00403220 <calculate_string_length>:
uint8_t calculate_string_length(uint8_t * str , uint8_t length_max) {
	
	uint8_t temp_length = 0;
	
	for (;;) {
		if ( (str[temp_length] != 0) & (temp_length < length_max) )
  403220:	7803      	ldrb	r3, [r0, #0]
  403222:	b14b      	cbz	r3, 403238 <calculate_string_length+0x18>
  403224:	b141      	cbz	r1, 403238 <calculate_string_length+0x18>
  403226:	2300      	movs	r3, #0
			temp_length++;
  403228:	3301      	adds	r3, #1
  40322a:	b2db      	uxtb	r3, r3
		if ( (str[temp_length] != 0) & (temp_length < length_max) )
  40322c:	5cc2      	ldrb	r2, [r0, r3]
  40322e:	b10a      	cbz	r2, 403234 <calculate_string_length+0x14>
  403230:	4299      	cmp	r1, r3
  403232:	d8f9      	bhi.n	403228 <calculate_string_length+0x8>
		else
			return temp_length;
	}	
	
  403234:	4618      	mov	r0, r3
  403236:	4770      	bx	lr
	uint8_t temp_length = 0;
  403238:	2300      	movs	r3, #0
  40323a:	e7fb      	b.n	403234 <calculate_string_length+0x14>

0040323c <UTILS_Strlen>:
unsigned int UTILS_Strlen (const unsigned char *strPtr)
{
   unsigned int retval = 0;

   /* Loop while looking for EOS character */
   while ((*(strPtr++) != 0) && (retval < MAX_STRING_LENGTH))
  40323c:	7802      	ldrb	r2, [r0, #0]
  40323e:	b162      	cbz	r2, 40325a <UTILS_Strlen+0x1e>
{
  403240:	b410      	push	{r4}
  403242:	4601      	mov	r1, r0
  403244:	1c43      	adds	r3, r0, #1
  403246:	f200 2401 	addw	r4, r0, #513	; 0x201
  40324a:	1a58      	subs	r0, r3, r1
   while ((*(strPtr++) != 0) && (retval < MAX_STRING_LENGTH))
  40324c:	f813 2b01 	ldrb.w	r2, [r3], #1
  403250:	b10a      	cbz	r2, 403256 <UTILS_Strlen+0x1a>
  403252:	42a3      	cmp	r3, r4
  403254:	d1f9      	bne.n	40324a <UTILS_Strlen+0xe>
   {
      ++retval;
   }
   return retval;
}
  403256:	bc10      	pop	{r4}
  403258:	4770      	bx	lr
   unsigned int retval = 0;
  40325a:	2000      	movs	r0, #0
   return retval;
  40325c:	4770      	bx	lr
	...

00403260 <UTILS_Strchr>:
               chr     - what we are looking for
  Returns    : 0 if not found, else ptr to where found
  Notes      :
-----------------------------------------------------------------------------*/
char *UTILS_Strchr(char *srcPtr, char chr)
{
  403260:	b538      	push	{r3, r4, r5, lr}
   if (srcPtr == ((void *) 0))
  403262:	4604      	mov	r4, r0
  403264:	b180      	cbz	r0, 403288 <UTILS_Strchr+0x28>
  403266:	460d      	mov	r5, r1
   {
      return ((void *) 0); /* Not a valid string */
   }

   if (UTILS_Strlen((unsigned char *)srcPtr) > MAX_STRING_LENGTH)
  403268:	4b09      	ldr	r3, [pc, #36]	; (403290 <UTILS_Strchr+0x30>)
  40326a:	4798      	blx	r3
  40326c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
  403270:	d80b      	bhi.n	40328a <UTILS_Strchr+0x2a>
  403272:	4623      	mov	r3, r4
  403274:	4618      	mov	r0, r3
   {
      return ((void *) 0);
   }

    while (*srcPtr != chr)
  403276:	f813 2b01 	ldrb.w	r2, [r3], #1
  40327a:	42aa      	cmp	r2, r5
  40327c:	d003      	beq.n	403286 <UTILS_Strchr+0x26>
    {
        if (!*srcPtr++)
  40327e:	2a00      	cmp	r2, #0
  403280:	d1f8      	bne.n	403274 <UTILS_Strchr+0x14>
        {
            return ((void *) 0);
  403282:	2000      	movs	r0, #0
        }
    }
    return (char *)srcPtr;
}
  403284:	bd38      	pop	{r3, r4, r5, pc}
  403286:	bd38      	pop	{r3, r4, r5, pc}
  403288:	bd38      	pop	{r3, r4, r5, pc}
      return ((void *) 0);
  40328a:	2000      	movs	r0, #0
  40328c:	bd38      	pop	{r3, r4, r5, pc}
  40328e:	bf00      	nop
  403290:	0040323d 	.word	0x0040323d

00403294 <UTILS_Atoi>:
{
   int res = 0;           /* Initialize result               */
   int sign = 1;          /* Initialize sign as positive     */
   unsigned char i = 0;    /* Initialize index of first digit */

   if (srcPtr == ((void *) 0))
  403294:	b368      	cbz	r0, 4032f2 <UTILS_Atoi+0x5e>
{
  403296:	b570      	push	{r4, r5, r6, lr}
  403298:	4606      	mov	r6, r0
  40329a:	460d      	mov	r5, r1
   {
       return false; /* Not a valid string */
   }

   /* Must fit into a int */
   if (UTILS_Strlen((unsigned char *)srcPtr) > 0x11)
  40329c:	4b18      	ldr	r3, [pc, #96]	; (403300 <UTILS_Atoi+0x6c>)
  40329e:	4798      	blx	r3
  4032a0:	2811      	cmp	r0, #17
  4032a2:	d828      	bhi.n	4032f6 <UTILS_Atoi+0x62>
   {
      return false;
   }

   /* If number is negative, then update sign */
   if (srcPtr[0] == '-')
  4032a4:	7833      	ldrb	r3, [r6, #0]
   {
       sign = -1;
       i++;  // Also update index of first digit
  4032a6:	2b2d      	cmp	r3, #45	; 0x2d
  4032a8:	bf15      	itete	ne
  4032aa:	2400      	movne	r4, #0
  4032ac:	2401      	moveq	r4, #1
  4032ae:	2001      	movne	r0, #1
  4032b0:	f04f 30ff 	moveq.w	r0, #4294967295
   }

   /* Iterate through all digits of input string and update result */
   for (; srcPtr[i] != '\0'; ++i)
  4032b4:	5d33      	ldrb	r3, [r6, r4]
  4032b6:	b1b3      	cbz	r3, 4032e6 <UTILS_Atoi+0x52>
   {
      if ((srcPtr[i] > '9') || (srcPtr[i] < '0'))
  4032b8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
  4032bc:	b2c9      	uxtb	r1, r1
  4032be:	2909      	cmp	r1, #9
  4032c0:	d81b      	bhi.n	4032fa <UTILS_Atoi+0x66>
  4032c2:	2200      	movs	r2, #0
      {
         return false; /* not a valid digit */
      }
      res = res*10 + srcPtr[i] - '0';
  4032c4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4032c8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
  4032cc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   for (; srcPtr[i] != '\0'; ++i)
  4032d0:	3401      	adds	r4, #1
  4032d2:	b2e4      	uxtb	r4, r4
  4032d4:	5d33      	ldrb	r3, [r6, r4]
  4032d6:	b13b      	cbz	r3, 4032e8 <UTILS_Atoi+0x54>
      if ((srcPtr[i] > '9') || (srcPtr[i] < '0'))
  4032d8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
  4032dc:	b2c9      	uxtb	r1, r1
  4032de:	2909      	cmp	r1, #9
  4032e0:	d9f0      	bls.n	4032c4 <UTILS_Atoi+0x30>
         return false; /* not a valid digit */
  4032e2:	2000      	movs	r0, #0
    }

   /* Return result with sign */
   *output = sign*res;
   return true;
}
  4032e4:	bd70      	pop	{r4, r5, r6, pc}
   for (; srcPtr[i] != '\0'; ++i)
  4032e6:	2200      	movs	r2, #0
   *output = sign*res;
  4032e8:	fb02 f200 	mul.w	r2, r2, r0
  4032ec:	602a      	str	r2, [r5, #0]
   return true;
  4032ee:	2001      	movs	r0, #1
  4032f0:	bd70      	pop	{r4, r5, r6, pc}
       return false; /* Not a valid string */
  4032f2:	2000      	movs	r0, #0
  4032f4:	4770      	bx	lr
      return false;
  4032f6:	2000      	movs	r0, #0
  4032f8:	bd70      	pop	{r4, r5, r6, pc}
         return false; /* not a valid digit */
  4032fa:	2000      	movs	r0, #0
  4032fc:	bd70      	pop	{r4, r5, r6, pc}
  4032fe:	bf00      	nop
  403300:	0040323d 	.word	0x0040323d

00403304 <system_init>:
}

/**************************** GLOBAL FUNCTIONS *******************************/

///@brief System initialization.
void system_init() {
  403304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403308:	b087      	sub	sp, #28

	// general initialization
	WDT->WDT_MR = WDT_MR_WDDIS; // Disable the watchdog
  40330a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40330e:	4b7a      	ldr	r3, [pc, #488]	; (4034f8 <system_init+0x1f4>)
  403310:	605a      	str	r2, [r3, #4]
	sysclk_init();
  403312:	4b7a      	ldr	r3, [pc, #488]	; (4034fc <system_init+0x1f8>)
  403314:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  403316:	200b      	movs	r0, #11
  403318:	4b79      	ldr	r3, [pc, #484]	; (403500 <system_init+0x1fc>)
  40331a:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOA);
//	sysclk_enable_peripheral_clock(ID_PIOB);
	gpio_configure_group( PIOA , 0xFFFFFFFF , (PIO_INPUT | PIO_DEFAULT));
  40331c:	4d79      	ldr	r5, [pc, #484]	; (403504 <system_init+0x200>)
  40331e:	f04f 5220 	mov.w	r2, #671088640	; 0x28000000
  403322:	f04f 31ff 	mov.w	r1, #4294967295
  403326:	4628      	mov	r0, r5
  403328:	4e77      	ldr	r6, [pc, #476]	; (403508 <system_init+0x204>)
  40332a:	47b0      	blx	r6
	gpio_configure_group( PIOB , 0xFFFFFFFF , (PIO_INPUT | PIO_DEFAULT));
  40332c:	4c77      	ldr	r4, [pc, #476]	; (40350c <system_init+0x208>)
  40332e:	f04f 5220 	mov.w	r2, #671088640	; 0x28000000
  403332:	f04f 31ff 	mov.w	r1, #4294967295
  403336:	4620      	mov	r0, r4
  403338:	47b0      	blx	r6
	pio_pull_down( PIOA , 0xFFFFFFFF , 0 );
  40333a:	2200      	movs	r2, #0
  40333c:	f04f 31ff 	mov.w	r1, #4294967295
  403340:	4628      	mov	r0, r5
  403342:	4e73      	ldr	r6, [pc, #460]	; (403510 <system_init+0x20c>)
  403344:	47b0      	blx	r6
	pio_pull_down( PIOB , 0xFFFFFFFF , 0 );
  403346:	2200      	movs	r2, #0
  403348:	f04f 31ff 	mov.w	r1, #4294967295
  40334c:	4620      	mov	r0, r4
  40334e:	47b0      	blx	r6
	pio_pull_up( PIOA , 0xFFFFFFFF , 0 );
  403350:	2200      	movs	r2, #0
  403352:	f04f 31ff 	mov.w	r1, #4294967295
  403356:	4628      	mov	r0, r5
  403358:	4d6e      	ldr	r5, [pc, #440]	; (403514 <system_init+0x210>)
  40335a:	47a8      	blx	r5
	pio_pull_up( PIOB , 0xFFFFFFFF , 0 );
  40335c:	2200      	movs	r2, #0
  40335e:	f04f 31ff 	mov.w	r1, #4294967295
  403362:	4620      	mov	r0, r4
  403364:	47a8      	blx	r5
	pmc_switch_sclk_to_32kxtal(0);		// Select 32.768 KHz crystal as Slow CLock source. No bypass?????	
  403366:	2000      	movs	r0, #0
  403368:	4b6b      	ldr	r3, [pc, #428]	; (403518 <system_init+0x214>)
  40336a:	4798      	blx	r3
	while (pmc_osc_is_ready_32kxtal() != 1) {}
  40336c:	4c6b      	ldr	r4, [pc, #428]	; (40351c <system_init+0x218>)
  40336e:	47a0      	blx	r4
  403370:	2801      	cmp	r0, #1
  403372:	d1fc      	bne.n	40336e <system_init+0x6a>
	rtc_set_hour_mode(RTC, 0); 			// Default RTC configuration, 24-hour mode
  403374:	4c6a      	ldr	r4, [pc, #424]	; (403520 <system_init+0x21c>)
  403376:	2100      	movs	r1, #0
  403378:	4620      	mov	r0, r4
  40337a:	4b6a      	ldr	r3, [pc, #424]	; (403524 <system_init+0x220>)
  40337c:	4798      	blx	r3
	rtc_set_calibration(RTC, 1 , 124 , 1);	// 0   -> Positive correction //TODO: creo que debe ser negativo pero me duplica el error.
  40337e:	2301      	movs	r3, #1
  403380:	227c      	movs	r2, #124	; 0x7c
  403382:	4619      	mov	r1, r3
  403384:	4620      	mov	r0, r4
  403386:	4c68      	ldr	r4, [pc, #416]	; (403528 <system_init+0x224>)
  403388:	47a0      	blx	r4
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  40338a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40338e:	200f      	movs	r0, #15
  403390:	4c66      	ldr	r4, [pc, #408]	; (40352c <system_init+0x228>)
  403392:	47a0      	blx	r4
	gpio_set_pin_low(LED0_GPIO);                 // initial value
  403394:	200f      	movs	r0, #15
  403396:	4d66      	ldr	r5, [pc, #408]	; (403530 <system_init+0x22c>)
  403398:	47a8      	blx	r5
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  40339a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40339e:	2010      	movs	r0, #16
  4033a0:	47a0      	blx	r4
	gpio_set_pin_low(LED1_GPIO);                 // initial value
  4033a2:	2010      	movs	r0, #16
  4033a4:	47a8      	blx	r5
	gpio_configure_pin(TP0_GPIO, TP0_FLAGS);
  4033a6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4033aa:	2021      	movs	r0, #33	; 0x21
  4033ac:	47a0      	blx	r4
	gpio_set_pin_low(TP0_GPIO);                 // initial value
  4033ae:	2021      	movs	r0, #33	; 0x21
  4033b0:	47a8      	blx	r5
	gpio_configure_pin(TP1_GPIO, TP1_FLAGS);
  4033b2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4033b6:	2012      	movs	r0, #18
  4033b8:	47a0      	blx	r4
	gpio_set_pin_low(TP1_GPIO);                 // initial value
  4033ba:	2012      	movs	r0, #18
  4033bc:	47a8      	blx	r5
	gpio_configure_pin(TP2_GPIO, TP2_FLAGS);
  4033be:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4033c2:	2013      	movs	r0, #19
  4033c4:	47a0      	blx	r4
	gpio_set_pin_low(TP2_GPIO);                 // initial value
  4033c6:	2013      	movs	r0, #19
  4033c8:	47a8      	blx	r5
	gpio_configure_pin(TP3_GPIO, TP3_FLAGS);
  4033ca:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4033ce:	2014      	movs	r0, #20
  4033d0:	47a0      	blx	r4
	gpio_set_pin_low(TP3_GPIO);                 // initial value
  4033d2:	2014      	movs	r0, #20
  4033d4:	47a8      	blx	r5
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  4033d6:	4b57      	ldr	r3, [pc, #348]	; (403534 <system_init+0x230>)
  4033d8:	9303      	str	r3, [sp, #12]
	uart_settings.ul_baudrate = SETTINGS_COMM_ARM_BAUDRATE;
  4033da:	4b57      	ldr	r3, [pc, #348]	; (403538 <system_init+0x234>)
  4033dc:	9304      	str	r3, [sp, #16]
	uart_settings.ul_mode = US_MR_CHRL_8_BIT |  // 8 bit lenght
  4033de:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
  4033e2:	9305      	str	r3, [sp, #20]
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  4033e4:	4d47      	ldr	r5, [pc, #284]	; (403504 <system_init+0x200>)
  4033e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4033ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  4033ee:	4628      	mov	r0, r5
  4033f0:	f8df b114 	ldr.w	fp, [pc, #276]	; 403508 <system_init+0x204>
  4033f4:	47d8      	blx	fp
  4033f6:	2008      	movs	r0, #8
  4033f8:	f8df a104 	ldr.w	sl, [pc, #260]	; 403500 <system_init+0x1fc>
  4033fc:	47d0      	blx	sl
	uart_init( UART0 , &uart_settings);
  4033fe:	4e4f      	ldr	r6, [pc, #316]	; (40353c <system_init+0x238>)
  403400:	a903      	add	r1, sp, #12
  403402:	4630      	mov	r0, r6
  403404:	f8df 9168 	ldr.w	r9, [pc, #360]	; 403570 <system_init+0x26c>
  403408:	47c8      	blx	r9
	uart_enable( UART0 );
  40340a:	4630      	mov	r0, r6
  40340c:	f8df 8164 	ldr.w	r8, [pc, #356]	; 403574 <system_init+0x270>
  403410:	47c0      	blx	r8
	uart_enable_interrupt( UART0 , UART_IER_RXRDY );
  403412:	2101      	movs	r1, #1
  403414:	4630      	mov	r0, r6
  403416:	4f4a      	ldr	r7, [pc, #296]	; (403540 <system_init+0x23c>)
  403418:	47b8      	blx	r7
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  40341a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40341e:	210c      	movs	r1, #12
  403420:	483a      	ldr	r0, [pc, #232]	; (40350c <system_init+0x208>)
  403422:	47d8      	blx	fp
  403424:	2009      	movs	r0, #9
  403426:	47d0      	blx	sl
	uart_init( UART1 , &uart_settings);
  403428:	f506 7600 	add.w	r6, r6, #512	; 0x200
  40342c:	a903      	add	r1, sp, #12
  40342e:	4630      	mov	r0, r6
  403430:	47c8      	blx	r9
	uart_enable( UART1 );
  403432:	4630      	mov	r0, r6
  403434:	47c0      	blx	r8
	uart_enable_interrupt( UART1 , UART_IER_RXRDY );
  403436:	2101      	movs	r1, #1
  403438:	4630      	mov	r0, r6
  40343a:	47b8      	blx	r7
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  40343c:	f8df 9138 	ldr.w	r9, [pc, #312]	; 403578 <system_init+0x274>
  403440:	4649      	mov	r1, r9
  403442:	200b      	movs	r0, #11
  403444:	47a0      	blx	r4
	pio_set_debounce_filter(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK, 10);
  403446:	220a      	movs	r2, #10
  403448:	f44f 6100 	mov.w	r1, #2048	; 0x800
  40344c:	4628      	mov	r0, r5
  40344e:	f8df 812c 	ldr.w	r8, [pc, #300]	; 40357c <system_init+0x278>
  403452:	47c0      	blx	r8
	pio_handler_set(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_ID, PIN_PUSHBUTTON_1_MASK, PIN_PUSHBUTTON_1_ATTR, coreio_push_button_1_isr);
  403454:	4b3b      	ldr	r3, [pc, #236]	; (403544 <system_init+0x240>)
  403456:	9300      	str	r3, [sp, #0]
  403458:	2358      	movs	r3, #88	; 0x58
  40345a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40345e:	210b      	movs	r1, #11
  403460:	4628      	mov	r0, r5
  403462:	4f39      	ldr	r7, [pc, #228]	; (403548 <system_init+0x244>)
  403464:	47b8      	blx	r7
	pio_enable_interrupt(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK);
  403466:	f44f 6100 	mov.w	r1, #2048	; 0x800
  40346a:	4628      	mov	r0, r5
  40346c:	4e37      	ldr	r6, [pc, #220]	; (40354c <system_init+0x248>)
  40346e:	47b0      	blx	r6
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
  403470:	4649      	mov	r1, r9
  403472:	200c      	movs	r0, #12
  403474:	47a0      	blx	r4
	pio_set_debounce_filter(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK, 10);
  403476:	220a      	movs	r2, #10
  403478:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40347c:	4628      	mov	r0, r5
  40347e:	47c0      	blx	r8
	pio_handler_set(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_ID, PIN_PUSHBUTTON_2_MASK, PIN_PUSHBUTTON_2_ATTR, coreio_push_button_2_isr);
  403480:	4b33      	ldr	r3, [pc, #204]	; (403550 <system_init+0x24c>)
  403482:	9300      	str	r3, [sp, #0]
  403484:	2358      	movs	r3, #88	; 0x58
  403486:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40348a:	210b      	movs	r1, #11
  40348c:	4628      	mov	r0, r5
  40348e:	47b8      	blx	r7
	pio_enable_interrupt(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK);
  403490:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403494:	4628      	mov	r0, r5
  403496:	47b0      	blx	r6
	gpio_configure_pin(PIN_HSMCI_MCCDA_GPIO, PIN_HSMCI_MCCDA_FLAGS);
  403498:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40349c:	201c      	movs	r0, #28
  40349e:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCCK_GPIO, PIN_HSMCI_MCCK_FLAGS);
  4034a0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4034a4:	201d      	movs	r0, #29
  4034a6:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA0_GPIO, PIN_HSMCI_MCDA0_FLAGS);
  4034a8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4034ac:	201e      	movs	r0, #30
  4034ae:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA1_GPIO, PIN_HSMCI_MCDA1_FLAGS);
  4034b0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4034b4:	201f      	movs	r0, #31
  4034b6:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA2_GPIO, PIN_HSMCI_MCDA2_FLAGS);
  4034b8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4034bc:	201a      	movs	r0, #26
  4034be:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA3_GPIO, PIN_HSMCI_MCDA3_FLAGS);
  4034c0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4034c4:	201b      	movs	r0, #27
  4034c6:	47a0      	blx	r4
	gpio_configure_pin(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
  4034c8:	4922      	ldr	r1, [pc, #136]	; (403554 <system_init+0x250>)
  4034ca:	2019      	movs	r0, #25
  4034cc:	47a0      	blx	r4
	sd_mmc_init();
  4034ce:	4b22      	ldr	r3, [pc, #136]	; (403558 <system_init+0x254>)
  4034d0:	4798      	blx	r3
	supc_disable_monitor_reset( SUPC );
  4034d2:	4c22      	ldr	r4, [pc, #136]	; (40355c <system_init+0x258>)
  4034d4:	4620      	mov	r0, r4
  4034d6:	4b22      	ldr	r3, [pc, #136]	; (403560 <system_init+0x25c>)
  4034d8:	4798      	blx	r3
	supc_enable_monitor_interrupt( SUPC );
  4034da:	4620      	mov	r0, r4
  4034dc:	4b21      	ldr	r3, [pc, #132]	; (403564 <system_init+0x260>)
  4034de:	4798      	blx	r3
	supc_set_monitor_sampling_period( SUPC , SUPC_SMMR_SMSMPL_2048SLCK );
  4034e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4034e4:	4620      	mov	r0, r4
  4034e6:	4b20      	ldr	r3, [pc, #128]	; (403568 <system_init+0x264>)
  4034e8:	4798      	blx	r3
	supc_set_monitor_threshold( SUPC , 0x0Au  );
  4034ea:	210a      	movs	r1, #10
  4034ec:	4620      	mov	r0, r4
  4034ee:	4b1f      	ldr	r3, [pc, #124]	; (40356c <system_init+0x268>)
  4034f0:	4798      	blx	r3
	arm_uart_init();
	arm_push_button_init();
	arm_hsmci_init();
	arm_supply_monitor_init();
	 
 }
  4034f2:	b007      	add	sp, #28
  4034f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4034f8:	400e1450 	.word	0x400e1450
  4034fc:	0040426d 	.word	0x0040426d
  403500:	00404e5d 	.word	0x00404e5d
  403504:	400e0e00 	.word	0x400e0e00
  403508:	00404ae1 	.word	0x00404ae1
  40350c:	400e1000 	.word	0x400e1000
  403510:	00404941 	.word	0x00404941
  403514:	00404835 	.word	0x00404835
  403518:	00404d4d 	.word	0x00404d4d
  40351c:	00404d71 	.word	0x00404d71
  403520:	400e1460 	.word	0x400e1460
  403524:	00404f01 	.word	0x00404f01
  403528:	00405131 	.word	0x00405131
  40352c:	004049c1 	.word	0x004049c1
  403530:	004049a5 	.word	0x004049a5
  403534:	07270e00 	.word	0x07270e00
  403538:	000e4e1c 	.word	0x000e4e1c
  40353c:	400e0600 	.word	0x400e0600
  403540:	00405197 	.word	0x00405197
  403544:	00407da1 	.word	0x00407da1
  403548:	00404c21 	.word	0x00404c21
  40354c:	0040497d 	.word	0x0040497d
  403550:	00407dd5 	.word	0x00407dd5
  403554:	28000001 	.word	0x28000001
  403558:	004037e1 	.word	0x004037e1
  40355c:	400e1410 	.word	0x400e1410
  403560:	0040293b 	.word	0x0040293b
  403564:	00402945 	.word	0x00402945
  403568:	0040292b 	.word	0x0040292b
  40356c:	0040291b 	.word	0x0040291b
  403570:	0040515b 	.word	0x0040515b
  403574:	00405191 	.word	0x00405191
  403578:	28000058 	.word	0x28000058
  40357c:	0040483f 	.word	0x0040483f

00403580 <system_ready>:

///@brief Show that system is ready. 
void system_ready(void) {
  403580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403584:	2403      	movs	r4, #3
		led_green_on();
  403586:	f04f 0910 	mov.w	r9, #16
  40358a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4035c4 <system_ready+0x44>
		delay_ms(250);
  40358e:	4f0a      	ldr	r7, [pc, #40]	; (4035b8 <system_ready+0x38>)
		led_green_on();
  403590:	4648      	mov	r0, r9
  403592:	47c0      	blx	r8
		led_red_on();
  403594:	200f      	movs	r0, #15
  403596:	47c0      	blx	r8
		delay_ms(250);
  403598:	4638      	mov	r0, r7
  40359a:	4d08      	ldr	r5, [pc, #32]	; (4035bc <system_ready+0x3c>)
  40359c:	47a8      	blx	r5
		led_green_off();
  40359e:	4648      	mov	r0, r9
  4035a0:	4e07      	ldr	r6, [pc, #28]	; (4035c0 <system_ready+0x40>)
  4035a2:	47b0      	blx	r6
		led_red_off();
  4035a4:	200f      	movs	r0, #15
  4035a6:	47b0      	blx	r6
		delay_ms(250);
  4035a8:	4638      	mov	r0, r7
  4035aa:	47a8      	blx	r5
  4035ac:	1e63      	subs	r3, r4, #1
	for ( repeat=0 ; repeat<3 ; repeat++ ) {
  4035ae:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  4035b2:	d1ed      	bne.n	403590 <system_ready+0x10>

	arm_toggle_leds_3_times();

}
  4035b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4035b8:	0020b28a 	.word	0x0020b28a
  4035bc:	20000089 	.word	0x20000089
  4035c0:	004049a5 	.word	0x004049a5
  4035c4:	0040498b 	.word	0x0040498b

004035c8 <system_enable_interrupt>:

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4035c8:	4b17      	ldr	r3, [pc, #92]	; (403628 <system_enable_interrupt+0x60>)
  4035ca:	2201      	movs	r2, #1
  4035cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4035d0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4035d4:	2100      	movs	r1, #0
  4035d6:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4035da:	601a      	str	r2, [r3, #0]
  4035dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4035e0:	601a      	str	r2, [r3, #0]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4035e2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4035e6:	2130      	movs	r1, #48	; 0x30
  4035e8:	f883 130b 	strb.w	r1, [r3, #779]	; 0x30b
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4035ec:	601a      	str	r2, [r3, #0]
  4035ee:	601a      	str	r2, [r3, #0]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4035f0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4035f4:	2140      	movs	r1, #64	; 0x40
  4035f6:	f883 130b 	strb.w	r1, [r3, #779]	; 0x30b
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4035fa:	601a      	str	r2, [r3, #0]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4035fc:	f44f 7280 	mov.w	r2, #256	; 0x100
  403600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  403604:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  403608:	2110      	movs	r1, #16
  40360a:	f883 1308 	strb.w	r1, [r3, #776]	; 0x308
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40360e:	601a      	str	r2, [r3, #0]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  403610:	f44f 7200 	mov.w	r2, #512	; 0x200
  403614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  403618:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  40361c:	2120      	movs	r1, #32
  40361e:	f883 1309 	strb.w	r1, [r3, #777]	; 0x309
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403622:	601a      	str	r2, [r3, #0]
  403624:	4770      	bx	lr
  403626:	bf00      	nop
  403628:	e000e100 	.word	0xe000e100

0040362c <system_disable_interrupt>:
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40362c:	4b09      	ldr	r3, [pc, #36]	; (403654 <system_disable_interrupt+0x28>)
  40362e:	2201      	movs	r2, #1
  403630:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  403634:	f44f 6200 	mov.w	r2, #2048	; 0x800
  403638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  40363c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  403640:	f44f 7280 	mov.w	r2, #256	; 0x100
  403644:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  403648:	f44f 7200 	mov.w	r2, #512	; 0x200
  40364c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  403650:	4770      	bx	lr
  403652:	bf00      	nop
  403654:	e000e100 	.word	0xe000e100

00403658 <system_reset_ARM>:
}

///@brief Reset ARM.
void system_reset_ARM(void) {
	
	RSTC->RSTC_CR = RSTC_CR_KEY_PASSWD | RSTC_CR_PROCRST | RSTC_CR_PERRST;
  403658:	4a01      	ldr	r2, [pc, #4]	; (403660 <system_reset_ARM+0x8>)
  40365a:	4b02      	ldr	r3, [pc, #8]	; (403664 <system_reset_ARM+0xc>)
  40365c:	601a      	str	r2, [r3, #0]
  40365e:	4770      	bx	lr
  403660:	a5000005 	.word	0xa5000005
  403664:	400e1400 	.word	0x400e1400

00403668 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  403668:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  40366a:	4b07      	ldr	r3, [pc, #28]	; (403688 <sd_mmc_configure_slot+0x20>)
  40366c:	6819      	ldr	r1, [r3, #0]
  40366e:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
  403672:	3300      	adds	r3, #0
  403674:	bf18      	it	ne
  403676:	2301      	movne	r3, #1
  403678:	7c4a      	ldrb	r2, [r1, #17]
  40367a:	6809      	ldr	r1, [r1, #0]
  40367c:	4803      	ldr	r0, [pc, #12]	; (40368c <sd_mmc_configure_slot+0x24>)
  40367e:	7800      	ldrb	r0, [r0, #0]
  403680:	4c03      	ldr	r4, [pc, #12]	; (403690 <sd_mmc_configure_slot+0x28>)
  403682:	47a0      	blx	r4
  403684:	bd10      	pop	{r4, pc}
  403686:	bf00      	nop
  403688:	20000df8 	.word	0x20000df8
  40368c:	20000e01 	.word	0x20000e01
  403690:	00404445 	.word	0x00404445

00403694 <sd_mmc_select_slot>:
	if (slot >= SD_MMC_MEM_CNT) {
  403694:	b108      	cbz	r0, 40369a <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
  403696:	2004      	movs	r0, #4
  403698:	4770      	bx	lr
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
  40369a:	4b33      	ldr	r3, [pc, #204]	; (403768 <sd_mmc_select_slot+0xd4>)
  40369c:	689a      	ldr	r2, [r3, #8]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40369e:	0953      	lsrs	r3, r2, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4036a0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4036a4:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4036a8:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4036aa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  4036ac:	f002 021f 	and.w	r2, r2, #31
  4036b0:	2301      	movs	r3, #1
  4036b2:	fa03 f202 	lsl.w	r2, r3, r2
  4036b6:	420a      	tst	r2, r1
  4036b8:	d010      	beq.n	4036dc <sd_mmc_select_slot+0x48>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  4036ba:	4b2b      	ldr	r3, [pc, #172]	; (403768 <sd_mmc_select_slot+0xd4>)
  4036bc:	7b9b      	ldrb	r3, [r3, #14]
  4036be:	2b01      	cmp	r3, #1
  4036c0:	d004      	beq.n	4036cc <sd_mmc_select_slot+0x38>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  4036c2:	2204      	movs	r2, #4
  4036c4:	4b28      	ldr	r3, [pc, #160]	; (403768 <sd_mmc_select_slot+0xd4>)
  4036c6:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
  4036c8:	2002      	movs	r0, #2
  4036ca:	4770      	bx	lr
	if (sd_mmc_sam_systick_used) {
  4036cc:	4b27      	ldr	r3, [pc, #156]	; (40376c <sd_mmc_select_slot+0xd8>)
  4036ce:	781b      	ldrb	r3, [r3, #0]
  4036d0:	2b00      	cmp	r3, #0
  4036d2:	d0f6      	beq.n	4036c2 <sd_mmc_select_slot+0x2e>
		SysTick->CTRL = 0;
  4036d4:	2200      	movs	r2, #0
  4036d6:	4b26      	ldr	r3, [pc, #152]	; (403770 <sd_mmc_select_slot+0xdc>)
  4036d8:	601a      	str	r2, [r3, #0]
  4036da:	e7f2      	b.n	4036c2 <sd_mmc_select_slot+0x2e>
{
  4036dc:	b510      	push	{r4, lr}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
  4036de:	4b22      	ldr	r3, [pc, #136]	; (403768 <sd_mmc_select_slot+0xd4>)
  4036e0:	7b9b      	ldrb	r3, [r3, #14]
  4036e2:	2b04      	cmp	r3, #4
  4036e4:	d005      	beq.n	4036f2 <sd_mmc_select_slot+0x5e>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  4036e6:	2b01      	cmp	r3, #1
  4036e8:	d019      	beq.n	40371e <sd_mmc_select_slot+0x8a>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
  4036ea:	2b03      	cmp	r3, #3
  4036ec:	d12c      	bne.n	403748 <sd_mmc_select_slot+0xb4>
		return SD_MMC_ERR_UNUSABLE;
  4036ee:	2003      	movs	r0, #3
  4036f0:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
  4036f2:	2201      	movs	r2, #1
  4036f4:	4b1c      	ldr	r3, [pc, #112]	; (403768 <sd_mmc_select_slot+0xd4>)
  4036f6:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
  4036f8:	4b1d      	ldr	r3, [pc, #116]	; (403770 <sd_mmc_select_slot+0xdc>)
  4036fa:	681b      	ldr	r3, [r3, #0]
  4036fc:	b93b      	cbnz	r3, 40370e <sd_mmc_select_slot+0x7a>
		sd_mmc_sam_systick_used = true;
  4036fe:	4b1b      	ldr	r3, [pc, #108]	; (40376c <sd_mmc_select_slot+0xd8>)
  403700:	701a      	strb	r2, [r3, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
  403702:	4b1b      	ldr	r3, [pc, #108]	; (403770 <sd_mmc_select_slot+0xdc>)
  403704:	491b      	ldr	r1, [pc, #108]	; (403774 <sd_mmc_select_slot+0xe0>)
  403706:	6059      	str	r1, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
  403708:	601a      	str	r2, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
  40370a:	2002      	movs	r0, #2
  40370c:	bd10      	pop	{r4, pc}
		sd_mmc_sam_systick_used = false;
  40370e:	2200      	movs	r2, #0
  403710:	4b16      	ldr	r3, [pc, #88]	; (40376c <sd_mmc_select_slot+0xd8>)
  403712:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
  403714:	4818      	ldr	r0, [pc, #96]	; (403778 <sd_mmc_select_slot+0xe4>)
  403716:	4b19      	ldr	r3, [pc, #100]	; (40377c <sd_mmc_select_slot+0xe8>)
  403718:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
  40371a:	2002      	movs	r0, #2
  40371c:	bd10      	pop	{r4, pc}
	if (!sd_mmc_sam_systick_used) {
  40371e:	4b13      	ldr	r3, [pc, #76]	; (40376c <sd_mmc_select_slot+0xd8>)
  403720:	781b      	ldrb	r3, [r3, #0]
  403722:	b13b      	cbz	r3, 403734 <sd_mmc_select_slot+0xa0>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
  403724:	4b12      	ldr	r3, [pc, #72]	; (403770 <sd_mmc_select_slot+0xdc>)
  403726:	681b      	ldr	r3, [r3, #0]
  403728:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40372c:	d01a      	beq.n	403764 <sd_mmc_select_slot+0xd0>
		SysTick->CTRL = 0;
  40372e:	2200      	movs	r2, #0
  403730:	4b0f      	ldr	r3, [pc, #60]	; (403770 <sd_mmc_select_slot+0xdc>)
  403732:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  403734:	4b0c      	ldr	r3, [pc, #48]	; (403768 <sd_mmc_select_slot+0xd4>)
  403736:	2202      	movs	r2, #2
  403738:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  40373a:	4a11      	ldr	r2, [pc, #68]	; (403780 <sd_mmc_select_slot+0xec>)
  40373c:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  40373e:	2201      	movs	r2, #1
  403740:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
  403742:	2200      	movs	r2, #0
  403744:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_slot_sel = slot;
  403748:	2200      	movs	r2, #0
  40374a:	4b0e      	ldr	r3, [pc, #56]	; (403784 <sd_mmc_select_slot+0xf0>)
  40374c:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  40374e:	4c06      	ldr	r4, [pc, #24]	; (403768 <sd_mmc_select_slot+0xd4>)
  403750:	4b0d      	ldr	r3, [pc, #52]	; (403788 <sd_mmc_select_slot+0xf4>)
  403752:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
  403754:	4b0d      	ldr	r3, [pc, #52]	; (40378c <sd_mmc_select_slot+0xf8>)
  403756:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  403758:	7ba0      	ldrb	r0, [r4, #14]
  40375a:	2802      	cmp	r0, #2
  40375c:	bf14      	ite	ne
  40375e:	2000      	movne	r0, #0
  403760:	2001      	moveq	r0, #1
  403762:	bd10      	pop	{r4, pc}
			return SD_MMC_ERR_NO_CARD;
  403764:	2002      	movs	r0, #2
  403766:	bd10      	pop	{r4, pc}
  403768:	20000094 	.word	0x20000094
  40376c:	20000e00 	.word	0x20000e00
  403770:	e000e010 	.word	0xe000e010
  403774:	00e4e1c0 	.word	0x00e4e1c0
  403778:	0082ca25 	.word	0x0082ca25
  40377c:	20000089 	.word	0x20000089
  403780:	00061a80 	.word	0x00061a80
  403784:	20000e01 	.word	0x20000e01
  403788:	20000df8 	.word	0x20000df8
  40378c:	00403669 	.word	0x00403669

00403790 <sd_mmc_cmd9_mci>:
{
  403790:	b510      	push	{r4, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  403792:	4b09      	ldr	r3, [pc, #36]	; (4037b8 <sd_mmc_cmd9_mci+0x28>)
  403794:	681b      	ldr	r3, [r3, #0]
  403796:	8999      	ldrh	r1, [r3, #12]
  403798:	0409      	lsls	r1, r1, #16
  40379a:	f641 3009 	movw	r0, #6921	; 0x1b09
  40379e:	4b07      	ldr	r3, [pc, #28]	; (4037bc <sd_mmc_cmd9_mci+0x2c>)
  4037a0:	4798      	blx	r3
  4037a2:	4604      	mov	r4, r0
  4037a4:	b908      	cbnz	r0, 4037aa <sd_mmc_cmd9_mci+0x1a>
}
  4037a6:	4620      	mov	r0, r4
  4037a8:	bd10      	pop	{r4, pc}
	driver_get_response_128(sd_mmc_card->csd);
  4037aa:	4b03      	ldr	r3, [pc, #12]	; (4037b8 <sd_mmc_cmd9_mci+0x28>)
  4037ac:	6818      	ldr	r0, [r3, #0]
  4037ae:	3012      	adds	r0, #18
  4037b0:	4b03      	ldr	r3, [pc, #12]	; (4037c0 <sd_mmc_cmd9_mci+0x30>)
  4037b2:	4798      	blx	r3
	return true;
  4037b4:	e7f7      	b.n	4037a6 <sd_mmc_cmd9_mci+0x16>
  4037b6:	bf00      	nop
  4037b8:	20000df8 	.word	0x20000df8
  4037bc:	004044d9 	.word	0x004044d9
  4037c0:	0040450d 	.word	0x0040450d

004037c4 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  4037c4:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  4037c6:	4b04      	ldr	r3, [pc, #16]	; (4037d8 <sd_mmc_deselect_slot+0x14>)
  4037c8:	781b      	ldrb	r3, [r3, #0]
  4037ca:	b103      	cbz	r3, 4037ce <sd_mmc_deselect_slot+0xa>
  4037cc:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_slot_sel);
  4037ce:	2000      	movs	r0, #0
  4037d0:	4b02      	ldr	r3, [pc, #8]	; (4037dc <sd_mmc_deselect_slot+0x18>)
  4037d2:	4798      	blx	r3
	}
}
  4037d4:	e7fa      	b.n	4037cc <sd_mmc_deselect_slot+0x8>
  4037d6:	bf00      	nop
  4037d8:	20000e01 	.word	0x20000e01
  4037dc:	004044b5 	.word	0x004044b5

004037e0 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  4037e0:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  4037e2:	2204      	movs	r2, #4
  4037e4:	4b03      	ldr	r3, [pc, #12]	; (4037f4 <sd_mmc_init+0x14>)
  4037e6:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  4037e8:	22ff      	movs	r2, #255	; 0xff
  4037ea:	4b03      	ldr	r3, [pc, #12]	; (4037f8 <sd_mmc_init+0x18>)
  4037ec:	701a      	strb	r2, [r3, #0]
	driver_init();
  4037ee:	4b03      	ldr	r3, [pc, #12]	; (4037fc <sd_mmc_init+0x1c>)
  4037f0:	4798      	blx	r3
  4037f2:	bd08      	pop	{r3, pc}
  4037f4:	20000094 	.word	0x20000094
  4037f8:	20000e01 	.word	0x20000e01
  4037fc:	0040440d 	.word	0x0040440d

00403800 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  403800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403804:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  403806:	4b8a      	ldr	r3, [pc, #552]	; (403a30 <sd_mmc_check+0x230>)
  403808:	4798      	blx	r3
  40380a:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  40380c:	2801      	cmp	r0, #1
  40380e:	d005      	beq.n	40381c <sd_mmc_check+0x1c>
		sd_mmc_deselect_slot();
  403810:	4b88      	ldr	r3, [pc, #544]	; (403a34 <sd_mmc_check+0x234>)
  403812:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  403814:	4620      	mov	r0, r4
  403816:	b015      	add	sp, #84	; 0x54
  403818:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
  40381c:	4b86      	ldr	r3, [pc, #536]	; (403a38 <sd_mmc_check+0x238>)
  40381e:	681b      	ldr	r3, [r3, #0]
  403820:	2201      	movs	r2, #1
  403822:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  403824:	2500      	movs	r5, #0
  403826:	741d      	strb	r5, [r3, #16]
	sd_mmc_card->rca = 0;
  403828:	819d      	strh	r5, [r3, #12]
	driver_send_clock();
  40382a:	4b84      	ldr	r3, [pc, #528]	; (403a3c <sd_mmc_check+0x23c>)
  40382c:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  40382e:	4629      	mov	r1, r5
  403830:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  403834:	4b82      	ldr	r3, [pc, #520]	; (403a40 <sd_mmc_check+0x240>)
  403836:	4798      	blx	r3
  403838:	b930      	cbnz	r0, 403848 <sd_mmc_check+0x48>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  40383a:	4b7f      	ldr	r3, [pc, #508]	; (403a38 <sd_mmc_check+0x238>)
  40383c:	681b      	ldr	r3, [r3, #0]
  40383e:	2403      	movs	r4, #3
  403840:	739c      	strb	r4, [r3, #14]
	sd_mmc_deselect_slot();
  403842:	4b7c      	ldr	r3, [pc, #496]	; (403a34 <sd_mmc_check+0x234>)
  403844:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  403846:	e7e5      	b.n	403814 <sd_mmc_check+0x14>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  403848:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  40384c:	f245 5008 	movw	r0, #21768	; 0x5508
  403850:	4b7b      	ldr	r3, [pc, #492]	; (403a40 <sd_mmc_check+0x240>)
  403852:	4798      	blx	r3
  403854:	2800      	cmp	r0, #0
  403856:	f040 8090 	bne.w	40397a <sd_mmc_check+0x17a>
	*v2 = 0;
  40385a:	2200      	movs	r2, #0
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40385c:	4b76      	ldr	r3, [pc, #472]	; (403a38 <sd_mmc_check+0x238>)
  40385e:	681b      	ldr	r3, [r3, #0]
  403860:	7bdb      	ldrb	r3, [r3, #15]
  403862:	f013 0f01 	tst.w	r3, #1
  403866:	f040 82aa 	bne.w	403dbe <sd_mmc_check+0x5be>
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  40386a:	2100      	movs	r1, #0
  40386c:	f245 1003 	movw	r0, #20739	; 0x5103
  403870:	4b73      	ldr	r3, [pc, #460]	; (403a40 <sd_mmc_check+0x240>)
  403872:	4798      	blx	r3
  403874:	2800      	cmp	r0, #0
  403876:	d0e0      	beq.n	40383a <sd_mmc_check+0x3a>
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  403878:	4d6f      	ldr	r5, [pc, #444]	; (403a38 <sd_mmc_check+0x238>)
  40387a:	682e      	ldr	r6, [r5, #0]
  40387c:	4b71      	ldr	r3, [pc, #452]	; (403a44 <sd_mmc_check+0x244>)
  40387e:	4798      	blx	r3
  403880:	0c00      	lsrs	r0, r0, #16
  403882:	81b0      	strh	r0, [r6, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  403884:	682b      	ldr	r3, [r5, #0]
  403886:	7bdb      	ldrb	r3, [r3, #15]
  403888:	f013 0f01 	tst.w	r3, #1
  40388c:	d034      	beq.n	4038f8 <sd_mmc_check+0xf8>
		if (!sd_mmc_cmd9_mci()) {
  40388e:	4b6e      	ldr	r3, [pc, #440]	; (403a48 <sd_mmc_check+0x248>)
  403890:	4798      	blx	r3
  403892:	2800      	cmp	r0, #0
  403894:	d0d1      	beq.n	40383a <sd_mmc_check+0x3a>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  403896:	682b      	ldr	r3, [r5, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  403898:	7d5a      	ldrb	r2, [r3, #21]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  40389a:	f3c2 00c3 	ubfx	r0, r2, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  40389e:	f002 0207 	and.w	r2, r2, #7
	sd_mmc_card->clock = unit * mul * 1000;
  4038a2:	496a      	ldr	r1, [pc, #424]	; (403a4c <sd_mmc_check+0x24c>)
  4038a4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  4038a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4038ac:	fb02 f201 	mul.w	r2, r2, r1
  4038b0:	4967      	ldr	r1, [pc, #412]	; (403a50 <sd_mmc_check+0x250>)
  4038b2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  4038b6:	fb02 f201 	mul.w	r2, r2, r1
  4038ba:	601a      	str	r2, [r3, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  4038bc:	7c9a      	ldrb	r2, [r3, #18]
  4038be:	0992      	lsrs	r2, r2, #6
  4038c0:	f040 81b4 	bne.w	403c2c <sd_mmc_check+0x42c>
  4038c4:	7e99      	ldrb	r1, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4038c6:	7e58      	ldrb	r0, [r3, #25]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4038c8:	7e1a      	ldrb	r2, [r3, #24]
  4038ca:	0292      	lsls	r2, r2, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4038cc:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
  4038d0:	ea42 12a1 	orr.w	r2, r2, r1, asr #6
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4038d4:	7f18      	ldrb	r0, [r3, #28]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4038d6:	7ed9      	ldrb	r1, [r3, #27]
  4038d8:	0049      	lsls	r1, r1, #1
  4038da:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	}
	value &=  ((uint32_t)1 << size) - 1;
  4038de:	f3c2 020b 	ubfx	r2, r2, #0, #12
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  4038e2:	3201      	adds	r2, #1
  4038e4:	f001 0107 	and.w	r1, r1, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  4038e8:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  4038ea:	408a      	lsls	r2, r1
  4038ec:	7dd9      	ldrb	r1, [r3, #23]
  4038ee:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  4038f2:	408a      	lsls	r2, r1
				/ 1024;
  4038f4:	0a92      	lsrs	r2, r2, #10
		sd_mmc_card->capacity = blocknr *
  4038f6:	605a      	str	r2, [r3, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  4038f8:	4b4f      	ldr	r3, [pc, #316]	; (403a38 <sd_mmc_check+0x238>)
  4038fa:	681b      	ldr	r3, [r3, #0]
  4038fc:	8999      	ldrh	r1, [r3, #12]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  4038fe:	0409      	lsls	r1, r1, #16
  403900:	f243 1007 	movw	r0, #12551	; 0x3107
  403904:	4b4e      	ldr	r3, [pc, #312]	; (403a40 <sd_mmc_check+0x240>)
  403906:	4798      	blx	r3
  403908:	2800      	cmp	r0, #0
  40390a:	d096      	beq.n	40383a <sd_mmc_check+0x3a>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40390c:	4b4a      	ldr	r3, [pc, #296]	; (403a38 <sd_mmc_check+0x238>)
  40390e:	681b      	ldr	r3, [r3, #0]
  403910:	7bda      	ldrb	r2, [r3, #15]
  403912:	f012 0f01 	tst.w	r2, #1
  403916:	f000 819a 	beq.w	403c4e <sd_mmc_check+0x44e>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  40391a:	8999      	ldrh	r1, [r3, #12]
  40391c:	0409      	lsls	r1, r1, #16
  40391e:	f241 1037 	movw	r0, #4407	; 0x1137
  403922:	4b47      	ldr	r3, [pc, #284]	; (403a40 <sd_mmc_check+0x240>)
  403924:	4798      	blx	r3
  403926:	2800      	cmp	r0, #0
  403928:	d087      	beq.n	40383a <sd_mmc_check+0x3a>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  40392a:	2301      	movs	r3, #1
  40392c:	9300      	str	r3, [sp, #0]
  40392e:	2208      	movs	r2, #8
  403930:	2100      	movs	r1, #0
  403932:	4848      	ldr	r0, [pc, #288]	; (403a54 <sd_mmc_check+0x254>)
  403934:	4d48      	ldr	r5, [pc, #288]	; (403a58 <sd_mmc_check+0x258>)
  403936:	47a8      	blx	r5
  403938:	2800      	cmp	r0, #0
  40393a:	f43f af7e 	beq.w	40383a <sd_mmc_check+0x3a>
	if (!driver_start_read_blocks(scr, 1)) {
  40393e:	2101      	movs	r1, #1
  403940:	a804      	add	r0, sp, #16
  403942:	4b46      	ldr	r3, [pc, #280]	; (403a5c <sd_mmc_check+0x25c>)
  403944:	4798      	blx	r3
  403946:	2800      	cmp	r0, #0
  403948:	f43f af77 	beq.w	40383a <sd_mmc_check+0x3a>
	if (!driver_wait_end_of_read_blocks()) {
  40394c:	4b44      	ldr	r3, [pc, #272]	; (403a60 <sd_mmc_check+0x260>)
  40394e:	4798      	blx	r3
  403950:	2800      	cmp	r0, #0
  403952:	f43f af72 	beq.w	40383a <sd_mmc_check+0x3a>
	switch (SD_SCR_SD_SPEC(scr)) {
  403956:	f89d 3010 	ldrb.w	r3, [sp, #16]
  40395a:	f003 030f 	and.w	r3, r3, #15
  40395e:	2b01      	cmp	r3, #1
  403960:	f000 81bc 	beq.w	403cdc <sd_mmc_check+0x4dc>
  403964:	2b00      	cmp	r3, #0
  403966:	f000 816e 	beq.w	403c46 <sd_mmc_check+0x446>
  40396a:	2b02      	cmp	r3, #2
  40396c:	f000 81bb 	beq.w	403ce6 <sd_mmc_check+0x4e6>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  403970:	4b31      	ldr	r3, [pc, #196]	; (403a38 <sd_mmc_check+0x238>)
  403972:	681b      	ldr	r3, [r3, #0]
  403974:	2210      	movs	r2, #16
  403976:	741a      	strb	r2, [r3, #16]
  403978:	e169      	b.n	403c4e <sd_mmc_check+0x44e>
	resp = driver_get_response();
  40397a:	4b32      	ldr	r3, [pc, #200]	; (403a44 <sd_mmc_check+0x244>)
  40397c:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  40397e:	f1b0 3fff 	cmp.w	r0, #4294967295
  403982:	f000 821a 	beq.w	403dba <sd_mmc_check+0x5ba>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  403986:	f3c0 000b 	ubfx	r0, r0, #0, #12
  40398a:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  40398e:	f47f af54 	bne.w	40383a <sd_mmc_check+0x3a>
	*v2 = 1;
  403992:	2201      	movs	r2, #1
  403994:	e762      	b.n	40385c <sd_mmc_check+0x5c>
			if ((resp & OCR_CCS) != 0) {
  403996:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  40399a:	d005      	beq.n	4039a8 <sd_mmc_check+0x1a8>
				sd_mmc_card->type |= CARD_TYPE_HC;
  40399c:	4b26      	ldr	r3, [pc, #152]	; (403a38 <sd_mmc_check+0x238>)
  40399e:	681a      	ldr	r2, [r3, #0]
  4039a0:	7bd3      	ldrb	r3, [r2, #15]
  4039a2:	f043 0308 	orr.w	r3, r3, #8
  4039a6:	73d3      	strb	r3, [r2, #15]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4039a8:	4b23      	ldr	r3, [pc, #140]	; (403a38 <sd_mmc_check+0x238>)
  4039aa:	681b      	ldr	r3, [r3, #0]
  4039ac:	7bdb      	ldrb	r3, [r3, #15]
  4039ae:	f013 0f01 	tst.w	r3, #1
  4039b2:	f43f af5a 	beq.w	40386a <sd_mmc_check+0x6a>
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  4039b6:	2100      	movs	r1, #0
  4039b8:	f645 3002 	movw	r0, #23298	; 0x5b02
  4039bc:	4b20      	ldr	r3, [pc, #128]	; (403a40 <sd_mmc_check+0x240>)
  4039be:	4798      	blx	r3
  4039c0:	2800      	cmp	r0, #0
  4039c2:	f47f af52 	bne.w	40386a <sd_mmc_check+0x6a>
  4039c6:	e738      	b.n	40383a <sd_mmc_check+0x3a>
			if ((resp & OCR_ACCESS_MODE_MASK)
  4039c8:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  4039cc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  4039d0:	d027      	beq.n	403a22 <sd_mmc_check+0x222>
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  4039d2:	2100      	movs	r1, #0
  4039d4:	f645 3002 	movw	r0, #23298	; 0x5b02
  4039d8:	4b19      	ldr	r3, [pc, #100]	; (403a40 <sd_mmc_check+0x240>)
  4039da:	4798      	blx	r3
  4039dc:	2800      	cmp	r0, #0
  4039de:	f43f af2c 	beq.w	40383a <sd_mmc_check+0x3a>
	sd_mmc_card->rca = 1;
  4039e2:	4b15      	ldr	r3, [pc, #84]	; (403a38 <sd_mmc_check+0x238>)
  4039e4:	681b      	ldr	r3, [r3, #0]
  4039e6:	2201      	movs	r2, #1
  4039e8:	819a      	strh	r2, [r3, #12]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  4039ea:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4039ee:	f241 1003 	movw	r0, #4355	; 0x1103
  4039f2:	4b13      	ldr	r3, [pc, #76]	; (403a40 <sd_mmc_check+0x240>)
  4039f4:	4798      	blx	r3
  4039f6:	2800      	cmp	r0, #0
  4039f8:	f43f af1f 	beq.w	40383a <sd_mmc_check+0x3a>
	if (!sd_mmc_cmd9_mci()) {
  4039fc:	4b12      	ldr	r3, [pc, #72]	; (403a48 <sd_mmc_check+0x248>)
  4039fe:	4798      	blx	r3
  403a00:	2800      	cmp	r0, #0
  403a02:	f43f af1a 	beq.w	40383a <sd_mmc_check+0x3a>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  403a06:	4b0c      	ldr	r3, [pc, #48]	; (403a38 <sd_mmc_check+0x238>)
  403a08:	681a      	ldr	r2, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  403a0a:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
  403a0c:	f3c3 0383 	ubfx	r3, r3, #2, #4
  403a10:	3b01      	subs	r3, #1
  403a12:	2b03      	cmp	r3, #3
  403a14:	d826      	bhi.n	403a64 <sd_mmc_check+0x264>
  403a16:	e8df f013 	tbh	[pc, r3, lsl #1]
  403a1a:	00f0      	.short	0x00f0
  403a1c:	00f600f3 	.word	0x00f600f3
  403a20:	00f9      	.short	0x00f9
				sd_mmc_card->type |= CARD_TYPE_HC;
  403a22:	4b05      	ldr	r3, [pc, #20]	; (403a38 <sd_mmc_check+0x238>)
  403a24:	681a      	ldr	r2, [r3, #0]
  403a26:	7bd3      	ldrb	r3, [r2, #15]
  403a28:	f043 0308 	orr.w	r3, r3, #8
  403a2c:	73d3      	strb	r3, [r2, #15]
  403a2e:	e7d0      	b.n	4039d2 <sd_mmc_check+0x1d2>
  403a30:	00403695 	.word	0x00403695
  403a34:	004037c5 	.word	0x004037c5
  403a38:	20000df8 	.word	0x20000df8
  403a3c:	004044b7 	.word	0x004044b7
  403a40:	004044d9 	.word	0x004044d9
  403a44:	00404505 	.word	0x00404505
  403a48:	00403791 	.word	0x00403791
  403a4c:	0040edac 	.word	0x0040edac
  403a50:	0040edc8 	.word	0x0040edc8
  403a54:	00081133 	.word	0x00081133
  403a58:	00404539 	.word	0x00404539
  403a5c:	00404679 	.word	0x00404679
  403a60:	004046e1 	.word	0x004046e1
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  403a64:	2312      	movs	r3, #18
  403a66:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  403a68:	7d53      	ldrb	r3, [r2, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  403a6a:	f003 0007 	and.w	r0, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  403a6e:	49a3      	ldr	r1, [pc, #652]	; (403cfc <sd_mmc_check+0x4fc>)
  403a70:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
  403a74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  403a78:	fb01 f100 	mul.w	r1, r1, r0
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  403a7c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
  403a80:	489f      	ldr	r0, [pc, #636]	; (403d00 <sd_mmc_check+0x500>)
  403a82:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  403a86:	fb03 f301 	mul.w	r3, r3, r1
  403a8a:	6013      	str	r3, [r2, #0]
  403a8c:	7e91      	ldrb	r1, [r2, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  403a8e:	7e50      	ldrb	r0, [r2, #25]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  403a90:	7e13      	ldrb	r3, [r2, #24]
  403a92:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  403a94:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
  403a98:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  403a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  403aa0:	f640 71ff 	movw	r1, #4095	; 0xfff
  403aa4:	428b      	cmp	r3, r1
  403aa6:	d00f      	beq.n	403ac8 <sd_mmc_check+0x2c8>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  403aa8:	7f10      	ldrb	r0, [r2, #28]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  403aaa:	7ed1      	ldrb	r1, [r2, #27]
  403aac:	0049      	lsls	r1, r1, #1
  403aae:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  403ab2:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
  403ab4:	f001 0107 	and.w	r1, r1, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  403ab8:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  403aba:	408b      	lsls	r3, r1
  403abc:	7dd1      	ldrb	r1, [r2, #23]
  403abe:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  403ac2:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  403ac4:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  403ac6:	6053      	str	r3, [r2, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  403ac8:	8991      	ldrh	r1, [r2, #12]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  403aca:	0409      	lsls	r1, r1, #16
  403acc:	f243 1007 	movw	r0, #12551	; 0x3107
  403ad0:	4b8c      	ldr	r3, [pc, #560]	; (403d04 <sd_mmc_check+0x504>)
  403ad2:	4798      	blx	r3
  403ad4:	2800      	cmp	r0, #0
  403ad6:	f43f aeb0 	beq.w	40383a <sd_mmc_check+0x3a>
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  403ada:	4b8b      	ldr	r3, [pc, #556]	; (403d08 <sd_mmc_check+0x508>)
  403adc:	681b      	ldr	r3, [r3, #0]
  403ade:	7c1b      	ldrb	r3, [r3, #16]
  403ae0:	2b3f      	cmp	r3, #63	; 0x3f
  403ae2:	f240 80a0 	bls.w	403c26 <sd_mmc_check+0x426>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  403ae6:	2100      	movs	r1, #0
  403ae8:	9100      	str	r1, [sp, #0]
  403aea:	2301      	movs	r3, #1
  403aec:	f44f 7200 	mov.w	r2, #512	; 0x200
  403af0:	4886      	ldr	r0, [pc, #536]	; (403d0c <sd_mmc_check+0x50c>)
  403af2:	4d87      	ldr	r5, [pc, #540]	; (403d10 <sd_mmc_check+0x510>)
  403af4:	47a8      	blx	r5
  403af6:	2800      	cmp	r0, #0
  403af8:	f43f ae9f 	beq.w	40383a <sd_mmc_check+0x3a>
  403afc:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
  403afe:	4e85      	ldr	r6, [pc, #532]	; (403d14 <sd_mmc_check+0x514>)
  403b00:	a803      	add	r0, sp, #12
  403b02:	47b0      	blx	r6
  403b04:	2800      	cmp	r0, #0
  403b06:	f43f ae98 	beq.w	40383a <sd_mmc_check+0x3a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  403b0a:	3501      	adds	r5, #1
  403b0c:	b2ad      	uxth	r5, r5
  403b0e:	2d32      	cmp	r5, #50	; 0x32
  403b10:	d1f6      	bne.n	403b00 <sd_mmc_check+0x300>
			& MMC_CTYPE_52MHZ;
  403b12:	9e03      	ldr	r6, [sp, #12]
  403b14:	f006 0602 	and.w	r6, r6, #2
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  403b18:	4b7b      	ldr	r3, [pc, #492]	; (403d08 <sd_mmc_check+0x508>)
  403b1a:	681b      	ldr	r3, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  403b1c:	7e9a      	ldrb	r2, [r3, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  403b1e:	7e59      	ldrb	r1, [r3, #25]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  403b20:	7e1b      	ldrb	r3, [r3, #24]
  403b22:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  403b24:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  403b28:	ea43 13a2 	orr.w	r3, r3, r2, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  403b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
  403b30:	f640 72ff 	movw	r2, #4095	; 0xfff
  403b34:	4293      	cmp	r3, r2
  403b36:	d10e      	bne.n	403b56 <sd_mmc_check+0x356>
			if (!driver_read_word(&sec_count)) {
  403b38:	4f76      	ldr	r7, [pc, #472]	; (403d14 <sd_mmc_check+0x514>)
  403b3a:	a804      	add	r0, sp, #16
  403b3c:	47b8      	blx	r7
  403b3e:	2800      	cmp	r0, #0
  403b40:	f43f ae7b 	beq.w	40383a <sd_mmc_check+0x3a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  403b44:	3501      	adds	r5, #1
  403b46:	b2ad      	uxth	r5, r5
  403b48:	2d35      	cmp	r5, #53	; 0x35
  403b4a:	d9f6      	bls.n	403b3a <sd_mmc_check+0x33a>
		sd_mmc_card->capacity = sec_count / 2;
  403b4c:	4b6e      	ldr	r3, [pc, #440]	; (403d08 <sd_mmc_check+0x508>)
  403b4e:	681a      	ldr	r2, [r3, #0]
  403b50:	9b04      	ldr	r3, [sp, #16]
  403b52:	085b      	lsrs	r3, r3, #1
  403b54:	6053      	str	r3, [r2, #4]
		if (!driver_read_word(&sec_count)) {
  403b56:	4f6f      	ldr	r7, [pc, #444]	; (403d14 <sd_mmc_check+0x514>)
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  403b58:	2d7f      	cmp	r5, #127	; 0x7f
  403b5a:	d95a      	bls.n	403c12 <sd_mmc_check+0x412>
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  403b5c:	4b6e      	ldr	r3, [pc, #440]	; (403d18 <sd_mmc_check+0x518>)
  403b5e:	7818      	ldrb	r0, [r3, #0]
  403b60:	4b6e      	ldr	r3, [pc, #440]	; (403d1c <sd_mmc_check+0x51c>)
  403b62:	4798      	blx	r3
  403b64:	2803      	cmp	r0, #3
  403b66:	d91d      	bls.n	403ba4 <sd_mmc_check+0x3a4>
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  403b68:	4b6b      	ldr	r3, [pc, #428]	; (403d18 <sd_mmc_check+0x518>)
  403b6a:	7818      	ldrb	r0, [r3, #0]
  403b6c:	4b6b      	ldr	r3, [pc, #428]	; (403d1c <sd_mmc_check+0x51c>)
  403b6e:	4798      	blx	r3
  403b70:	4605      	mov	r5, r0
	switch (bus_width) {
  403b72:	2804      	cmp	r0, #4
  403b74:	d055      	beq.n	403c22 <sd_mmc_check+0x422>
		arg = MMC_CMD6_ACCESS_SET_BITS
  403b76:	4b6a      	ldr	r3, [pc, #424]	; (403d20 <sd_mmc_check+0x520>)
  403b78:	496a      	ldr	r1, [pc, #424]	; (403d24 <sd_mmc_check+0x524>)
  403b7a:	2808      	cmp	r0, #8
  403b7c:	bf18      	it	ne
  403b7e:	4619      	movne	r1, r3
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  403b80:	f243 1006 	movw	r0, #12550	; 0x3106
  403b84:	4b5f      	ldr	r3, [pc, #380]	; (403d04 <sd_mmc_check+0x504>)
  403b86:	4798      	blx	r3
  403b88:	2800      	cmp	r0, #0
  403b8a:	f43f ae56 	beq.w	40383a <sd_mmc_check+0x3a>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  403b8e:	4b66      	ldr	r3, [pc, #408]	; (403d28 <sd_mmc_check+0x528>)
  403b90:	4798      	blx	r3
  403b92:	f010 0f80 	tst.w	r0, #128	; 0x80
  403b96:	f47f ae50 	bne.w	40383a <sd_mmc_check+0x3a>
	sd_mmc_card->bus_width = bus_width;
  403b9a:	4b5b      	ldr	r3, [pc, #364]	; (403d08 <sd_mmc_check+0x508>)
  403b9c:	681b      	ldr	r3, [r3, #0]
  403b9e:	745d      	strb	r5, [r3, #17]
			sd_mmc_configure_slot();
  403ba0:	4b62      	ldr	r3, [pc, #392]	; (403d2c <sd_mmc_check+0x52c>)
  403ba2:	4798      	blx	r3
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  403ba4:	4b62      	ldr	r3, [pc, #392]	; (403d30 <sd_mmc_check+0x530>)
  403ba6:	4798      	blx	r3
  403ba8:	b1b8      	cbz	r0, 403bda <sd_mmc_check+0x3da>
  403baa:	b1b6      	cbz	r6, 403bda <sd_mmc_check+0x3da>
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  403bac:	4961      	ldr	r1, [pc, #388]	; (403d34 <sd_mmc_check+0x534>)
  403bae:	f243 1006 	movw	r0, #12550	; 0x3106
  403bb2:	4b54      	ldr	r3, [pc, #336]	; (403d04 <sd_mmc_check+0x504>)
  403bb4:	4798      	blx	r3
  403bb6:	2800      	cmp	r0, #0
  403bb8:	f43f ae3f 	beq.w	40383a <sd_mmc_check+0x3a>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  403bbc:	4b5a      	ldr	r3, [pc, #360]	; (403d28 <sd_mmc_check+0x528>)
  403bbe:	4798      	blx	r3
  403bc0:	f010 0f80 	tst.w	r0, #128	; 0x80
  403bc4:	f47f ae39 	bne.w	40383a <sd_mmc_check+0x3a>
	sd_mmc_card->high_speed = 1;
  403bc8:	4b4f      	ldr	r3, [pc, #316]	; (403d08 <sd_mmc_check+0x508>)
  403bca:	681b      	ldr	r3, [r3, #0]
  403bcc:	2201      	movs	r2, #1
  403bce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock = 52000000lu;
  403bd2:	4a59      	ldr	r2, [pc, #356]	; (403d38 <sd_mmc_check+0x538>)
  403bd4:	601a      	str	r2, [r3, #0]
			sd_mmc_configure_slot();
  403bd6:	4b55      	ldr	r3, [pc, #340]	; (403d2c <sd_mmc_check+0x52c>)
  403bd8:	4798      	blx	r3
		arg = MMC_CMD6_ACCESS_SET_BITS
  403bda:	250a      	movs	r5, #10
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  403bdc:	f44f 7800 	mov.w	r8, #512	; 0x200
  403be0:	f241 1710 	movw	r7, #4368	; 0x1110
  403be4:	4e47      	ldr	r6, [pc, #284]	; (403d04 <sd_mmc_check+0x504>)
  403be6:	4641      	mov	r1, r8
  403be8:	4638      	mov	r0, r7
  403bea:	47b0      	blx	r6
  403bec:	2800      	cmp	r0, #0
  403bee:	d16e      	bne.n	403cce <sd_mmc_check+0x4ce>
  403bf0:	3d01      	subs	r5, #1
	while (retry--) {
  403bf2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  403bf6:	d1f6      	bne.n	403be6 <sd_mmc_check+0x3e6>
  403bf8:	e61f      	b.n	40383a <sd_mmc_check+0x3a>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  403bfa:	2314      	movs	r3, #20
  403bfc:	7413      	strb	r3, [r2, #16]
  403bfe:	e733      	b.n	403a68 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  403c00:	2322      	movs	r3, #34	; 0x22
  403c02:	7413      	strb	r3, [r2, #16]
  403c04:	e730      	b.n	403a68 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
  403c06:	2330      	movs	r3, #48	; 0x30
  403c08:	7413      	strb	r3, [r2, #16]
  403c0a:	e72d      	b.n	403a68 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_4;
  403c0c:	2340      	movs	r3, #64	; 0x40
  403c0e:	7413      	strb	r3, [r2, #16]
  403c10:	e72a      	b.n	403a68 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
  403c12:	a804      	add	r0, sp, #16
  403c14:	47b8      	blx	r7
  403c16:	2800      	cmp	r0, #0
  403c18:	f43f ae0f 	beq.w	40383a <sd_mmc_check+0x3a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  403c1c:	3501      	adds	r5, #1
  403c1e:	b2ad      	uxth	r5, r5
  403c20:	e79a      	b.n	403b58 <sd_mmc_check+0x358>
		arg = MMC_CMD6_ACCESS_SET_BITS
  403c22:	4946      	ldr	r1, [pc, #280]	; (403d3c <sd_mmc_check+0x53c>)
  403c24:	e7ac      	b.n	403b80 <sd_mmc_check+0x380>
		sd_mmc_configure_slot();
  403c26:	4b41      	ldr	r3, [pc, #260]	; (403d2c <sd_mmc_check+0x52c>)
  403c28:	4798      	blx	r3
  403c2a:	e7d6      	b.n	403bda <sd_mmc_check+0x3da>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  403c2c:	7ed9      	ldrb	r1, [r3, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  403c2e:	7e98      	ldrb	r0, [r3, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  403c30:	7e5a      	ldrb	r2, [r3, #25]
  403c32:	0412      	lsls	r2, r2, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  403c34:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  403c38:	430a      	orrs	r2, r1
	value &=  ((uint32_t)1 << size) - 1;
  403c3a:	f3c2 0215 	ubfx	r2, r2, #0, #22
				* 512;
  403c3e:	3201      	adds	r2, #1
  403c40:	0252      	lsls	r2, r2, #9
		sd_mmc_card->capacity =
  403c42:	605a      	str	r2, [r3, #4]
  403c44:	e658      	b.n	4038f8 <sd_mmc_check+0xf8>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  403c46:	4b30      	ldr	r3, [pc, #192]	; (403d08 <sd_mmc_check+0x508>)
  403c48:	681b      	ldr	r3, [r3, #0]
  403c4a:	2210      	movs	r2, #16
  403c4c:	741a      	strb	r2, [r3, #16]
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  403c4e:	4b32      	ldr	r3, [pc, #200]	; (403d18 <sd_mmc_check+0x518>)
  403c50:	7818      	ldrb	r0, [r3, #0]
  403c52:	4b32      	ldr	r3, [pc, #200]	; (403d1c <sd_mmc_check+0x51c>)
  403c54:	4798      	blx	r3
  403c56:	2803      	cmp	r0, #3
  403c58:	d91c      	bls.n	403c94 <sd_mmc_check+0x494>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  403c5a:	4b2b      	ldr	r3, [pc, #172]	; (403d08 <sd_mmc_check+0x508>)
  403c5c:	681b      	ldr	r3, [r3, #0]
  403c5e:	7bda      	ldrb	r2, [r3, #15]
  403c60:	f012 0f01 	tst.w	r2, #1
  403c64:	d014      	beq.n	403c90 <sd_mmc_check+0x490>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  403c66:	8999      	ldrh	r1, [r3, #12]
  403c68:	0409      	lsls	r1, r1, #16
  403c6a:	f241 1037 	movw	r0, #4407	; 0x1137
  403c6e:	4b25      	ldr	r3, [pc, #148]	; (403d04 <sd_mmc_check+0x504>)
  403c70:	4798      	blx	r3
  403c72:	2800      	cmp	r0, #0
  403c74:	f43f ade1 	beq.w	40383a <sd_mmc_check+0x3a>
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  403c78:	2102      	movs	r1, #2
  403c7a:	f241 1006 	movw	r0, #4358	; 0x1106
  403c7e:	4b21      	ldr	r3, [pc, #132]	; (403d04 <sd_mmc_check+0x504>)
  403c80:	4798      	blx	r3
  403c82:	2800      	cmp	r0, #0
  403c84:	f43f add9 	beq.w	40383a <sd_mmc_check+0x3a>
	sd_mmc_card->bus_width = 4;
  403c88:	4b1f      	ldr	r3, [pc, #124]	; (403d08 <sd_mmc_check+0x508>)
  403c8a:	681b      	ldr	r3, [r3, #0]
  403c8c:	2204      	movs	r2, #4
  403c8e:	745a      	strb	r2, [r3, #17]
		sd_mmc_configure_slot();
  403c90:	4b26      	ldr	r3, [pc, #152]	; (403d2c <sd_mmc_check+0x52c>)
  403c92:	4798      	blx	r3
	if (driver_is_high_speed_capable()) {
  403c94:	4b26      	ldr	r3, [pc, #152]	; (403d30 <sd_mmc_check+0x530>)
  403c96:	4798      	blx	r3
  403c98:	b150      	cbz	r0, 403cb0 <sd_mmc_check+0x4b0>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  403c9a:	4b1b      	ldr	r3, [pc, #108]	; (403d08 <sd_mmc_check+0x508>)
  403c9c:	681b      	ldr	r3, [r3, #0]
  403c9e:	7bda      	ldrb	r2, [r3, #15]
  403ca0:	f012 0f01 	tst.w	r2, #1
  403ca4:	d002      	beq.n	403cac <sd_mmc_check+0x4ac>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  403ca6:	7c1b      	ldrb	r3, [r3, #16]
  403ca8:	2b10      	cmp	r3, #16
  403caa:	d84b      	bhi.n	403d44 <sd_mmc_check+0x544>
		sd_mmc_configure_slot();
  403cac:	4b1f      	ldr	r3, [pc, #124]	; (403d2c <sd_mmc_check+0x52c>)
  403cae:	4798      	blx	r3
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  403cb0:	4b15      	ldr	r3, [pc, #84]	; (403d08 <sd_mmc_check+0x508>)
  403cb2:	681b      	ldr	r3, [r3, #0]
  403cb4:	7bdb      	ldrb	r3, [r3, #15]
  403cb6:	f013 0f01 	tst.w	r3, #1
  403cba:	d008      	beq.n	403cce <sd_mmc_check+0x4ce>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  403cbc:	f44f 7100 	mov.w	r1, #512	; 0x200
  403cc0:	f241 1010 	movw	r0, #4368	; 0x1110
  403cc4:	4b0f      	ldr	r3, [pc, #60]	; (403d04 <sd_mmc_check+0x504>)
  403cc6:	4798      	blx	r3
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
  403cc8:	2800      	cmp	r0, #0
  403cca:	f43f adb6 	beq.w	40383a <sd_mmc_check+0x3a>
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  403cce:	4b0e      	ldr	r3, [pc, #56]	; (403d08 <sd_mmc_check+0x508>)
  403cd0:	681b      	ldr	r3, [r3, #0]
  403cd2:	2200      	movs	r2, #0
  403cd4:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
  403cd6:	4b1a      	ldr	r3, [pc, #104]	; (403d40 <sd_mmc_check+0x540>)
  403cd8:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
  403cda:	e59b      	b.n	403814 <sd_mmc_check+0x14>
		sd_mmc_card->version = CARD_VER_SD_1_10;
  403cdc:	4b0a      	ldr	r3, [pc, #40]	; (403d08 <sd_mmc_check+0x508>)
  403cde:	681b      	ldr	r3, [r3, #0]
  403ce0:	221a      	movs	r2, #26
  403ce2:	741a      	strb	r2, [r3, #16]
  403ce4:	e7b3      	b.n	403c4e <sd_mmc_check+0x44e>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  403ce6:	f89d 3012 	ldrb.w	r3, [sp, #18]
  403cea:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  403cec:	4b06      	ldr	r3, [pc, #24]	; (403d08 <sd_mmc_check+0x508>)
  403cee:	681b      	ldr	r3, [r3, #0]
  403cf0:	bf14      	ite	ne
  403cf2:	2230      	movne	r2, #48	; 0x30
			sd_mmc_card->version = CARD_VER_SD_2_0;
  403cf4:	2220      	moveq	r2, #32
  403cf6:	741a      	strb	r2, [r3, #16]
  403cf8:	e7a9      	b.n	403c4e <sd_mmc_check+0x44e>
  403cfa:	bf00      	nop
  403cfc:	0040edac 	.word	0x0040edac
  403d00:	0040ed6c 	.word	0x0040ed6c
  403d04:	004044d9 	.word	0x004044d9
  403d08:	20000df8 	.word	0x20000df8
  403d0c:	00081108 	.word	0x00081108
  403d10:	00404539 	.word	0x00404539
  403d14:	00404605 	.word	0x00404605
  403d18:	20000e01 	.word	0x20000e01
  403d1c:	00404435 	.word	0x00404435
  403d20:	01b70000 	.word	0x01b70000
  403d24:	01b70200 	.word	0x01b70200
  403d28:	00404505 	.word	0x00404505
  403d2c:	00403669 	.word	0x00403669
  403d30:	0040443f 	.word	0x0040443f
  403d34:	03b90100 	.word	0x03b90100
  403d38:	03197500 	.word	0x03197500
  403d3c:	01b70100 	.word	0x01b70100
  403d40:	004037c5 	.word	0x004037c5
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
  403d44:	2540      	movs	r5, #64	; 0x40
  403d46:	462a      	mov	r2, r5
  403d48:	2100      	movs	r1, #0
  403d4a:	a804      	add	r0, sp, #16
  403d4c:	4b3a      	ldr	r3, [pc, #232]	; (403e38 <sd_mmc_check+0x638>)
  403d4e:	4798      	blx	r3
	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  403d50:	2301      	movs	r3, #1
  403d52:	9300      	str	r3, [sp, #0]
  403d54:	462a      	mov	r2, r5
  403d56:	4939      	ldr	r1, [pc, #228]	; (403e3c <sd_mmc_check+0x63c>)
  403d58:	4839      	ldr	r0, [pc, #228]	; (403e40 <sd_mmc_check+0x640>)
  403d5a:	4d3a      	ldr	r5, [pc, #232]	; (403e44 <sd_mmc_check+0x644>)
  403d5c:	47a8      	blx	r5
  403d5e:	2800      	cmp	r0, #0
  403d60:	f43f ad6b 	beq.w	40383a <sd_mmc_check+0x3a>
	if (!driver_start_read_blocks(switch_status, 1)) {
  403d64:	2101      	movs	r1, #1
  403d66:	a804      	add	r0, sp, #16
  403d68:	4b37      	ldr	r3, [pc, #220]	; (403e48 <sd_mmc_check+0x648>)
  403d6a:	4798      	blx	r3
  403d6c:	2800      	cmp	r0, #0
  403d6e:	f43f ad64 	beq.w	40383a <sd_mmc_check+0x3a>
	if (!driver_wait_end_of_read_blocks()) {
  403d72:	4b36      	ldr	r3, [pc, #216]	; (403e4c <sd_mmc_check+0x64c>)
  403d74:	4798      	blx	r3
  403d76:	2800      	cmp	r0, #0
  403d78:	f43f ad5f 	beq.w	40383a <sd_mmc_check+0x3a>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  403d7c:	4b34      	ldr	r3, [pc, #208]	; (403e50 <sd_mmc_check+0x650>)
  403d7e:	4798      	blx	r3
  403d80:	f010 0f80 	tst.w	r0, #128	; 0x80
  403d84:	f47f ad59 	bne.w	40383a <sd_mmc_check+0x3a>
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  403d88:	f89d 3020 	ldrb.w	r3, [sp, #32]
  403d8c:	f003 030f 	and.w	r3, r3, #15
  403d90:	2b0f      	cmp	r3, #15
  403d92:	d08b      	beq.n	403cac <sd_mmc_check+0x4ac>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  403d94:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  403d98:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  403d9c:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
  403da0:	f47f ad4b 	bne.w	40383a <sd_mmc_check+0x3a>
	driver_send_clock();
  403da4:	4b2b      	ldr	r3, [pc, #172]	; (403e54 <sd_mmc_check+0x654>)
  403da6:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
  403da8:	4b2b      	ldr	r3, [pc, #172]	; (403e58 <sd_mmc_check+0x658>)
  403daa:	681b      	ldr	r3, [r3, #0]
  403dac:	2201      	movs	r2, #1
  403dae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
  403db2:	681a      	ldr	r2, [r3, #0]
  403db4:	0052      	lsls	r2, r2, #1
  403db6:	601a      	str	r2, [r3, #0]
  403db8:	e778      	b.n	403cac <sd_mmc_check+0x4ac>
	*v2 = 0;
  403dba:	2200      	movs	r2, #0
  403dbc:	e54e      	b.n	40385c <sd_mmc_check+0x5c>
  403dbe:	2a00      	cmp	r2, #0
  403dc0:	4f26      	ldr	r7, [pc, #152]	; (403e5c <sd_mmc_check+0x65c>)
  403dc2:	bf08      	it	eq
  403dc4:	f44f 17fc 	moveq.w	r7, #2064384	; 0x1f8000
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  403dc8:	f640 0535 	movw	r5, #2101	; 0x835
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  403dcc:	f04f 0800 	mov.w	r8, #0
  403dd0:	4e23      	ldr	r6, [pc, #140]	; (403e60 <sd_mmc_check+0x660>)
		resp = driver_get_response();
  403dd2:	f8df 907c 	ldr.w	r9, [pc, #124]	; 403e50 <sd_mmc_check+0x650>
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  403dd6:	4641      	mov	r1, r8
  403dd8:	f241 1037 	movw	r0, #4407	; 0x1137
  403ddc:	47b0      	blx	r6
  403dde:	b150      	cbz	r0, 403df6 <sd_mmc_check+0x5f6>
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  403de0:	4639      	mov	r1, r7
  403de2:	f244 5029 	movw	r0, #17705	; 0x4529
  403de6:	47b0      	blx	r6
  403de8:	b128      	cbz	r0, 403df6 <sd_mmc_check+0x5f6>
		resp = driver_get_response();
  403dea:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
  403dec:	2800      	cmp	r0, #0
  403dee:	f6ff add2 	blt.w	403996 <sd_mmc_check+0x196>
		if (retry-- == 0) {
  403df2:	3d01      	subs	r5, #1
  403df4:	d1ef      	bne.n	403dd6 <sd_mmc_check+0x5d6>
			sd_mmc_card->type = CARD_TYPE_MMC;
  403df6:	4b18      	ldr	r3, [pc, #96]	; (403e58 <sd_mmc_check+0x658>)
  403df8:	681b      	ldr	r3, [r3, #0]
  403dfa:	2202      	movs	r2, #2
  403dfc:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  403dfe:	2100      	movs	r1, #0
  403e00:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  403e04:	4b16      	ldr	r3, [pc, #88]	; (403e60 <sd_mmc_check+0x660>)
  403e06:	4798      	blx	r3
  403e08:	2800      	cmp	r0, #0
  403e0a:	f43f ad16 	beq.w	40383a <sd_mmc_check+0x3a>
  403e0e:	f241 0569 	movw	r5, #4201	; 0x1069
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  403e12:	f8df 8048 	ldr.w	r8, [pc, #72]	; 403e5c <sd_mmc_check+0x65c>
  403e16:	4f12      	ldr	r7, [pc, #72]	; (403e60 <sd_mmc_check+0x660>)
		resp = driver_get_response();
  403e18:	4e0d      	ldr	r6, [pc, #52]	; (403e50 <sd_mmc_check+0x650>)
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  403e1a:	4641      	mov	r1, r8
  403e1c:	f244 5001 	movw	r0, #17665	; 0x4501
  403e20:	47b8      	blx	r7
  403e22:	2800      	cmp	r0, #0
  403e24:	f43f ad09 	beq.w	40383a <sd_mmc_check+0x3a>
		resp = driver_get_response();
  403e28:	47b0      	blx	r6
		if (resp & OCR_POWER_UP_BUSY) {
  403e2a:	2800      	cmp	r0, #0
  403e2c:	f6ff adcc 	blt.w	4039c8 <sd_mmc_check+0x1c8>
		if (retry-- == 0) {
  403e30:	3d01      	subs	r5, #1
  403e32:	d1f2      	bne.n	403e1a <sd_mmc_check+0x61a>
  403e34:	e501      	b.n	40383a <sd_mmc_check+0x3a>
  403e36:	bf00      	nop
  403e38:	00409669 	.word	0x00409669
  403e3c:	80ffff01 	.word	0x80ffff01
  403e40:	00081106 	.word	0x00081106
  403e44:	00404539 	.word	0x00404539
  403e48:	00404679 	.word	0x00404679
  403e4c:	004046e1 	.word	0x004046e1
  403e50:	00404505 	.word	0x00404505
  403e54:	004044b7 	.word	0x004044b7
  403e58:	20000df8 	.word	0x20000df8
  403e5c:	401f8000 	.word	0x401f8000
  403e60:	004044d9 	.word	0x004044d9

00403e64 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  403e64:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  403e66:	4b05      	ldr	r3, [pc, #20]	; (403e7c <sd_mmc_get_type+0x18>)
  403e68:	4798      	blx	r3
  403e6a:	b108      	cbz	r0, 403e70 <sd_mmc_get_type+0xc>
		return CARD_TYPE_UNKNOWN;
  403e6c:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
  403e6e:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  403e70:	4b03      	ldr	r3, [pc, #12]	; (403e80 <sd_mmc_get_type+0x1c>)
  403e72:	4798      	blx	r3
	return sd_mmc_card->type;
  403e74:	4b03      	ldr	r3, [pc, #12]	; (403e84 <sd_mmc_get_type+0x20>)
  403e76:	681b      	ldr	r3, [r3, #0]
  403e78:	7bd8      	ldrb	r0, [r3, #15]
  403e7a:	bd08      	pop	{r3, pc}
  403e7c:	00403695 	.word	0x00403695
  403e80:	004037c5 	.word	0x004037c5
  403e84:	20000df8 	.word	0x20000df8

00403e88 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  403e88:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  403e8a:	4b05      	ldr	r3, [pc, #20]	; (403ea0 <sd_mmc_get_capacity+0x18>)
  403e8c:	4798      	blx	r3
  403e8e:	b108      	cbz	r0, 403e94 <sd_mmc_get_capacity+0xc>
		return 0;
  403e90:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
  403e92:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  403e94:	4b03      	ldr	r3, [pc, #12]	; (403ea4 <sd_mmc_get_capacity+0x1c>)
  403e96:	4798      	blx	r3
	return sd_mmc_card->capacity;
  403e98:	4b03      	ldr	r3, [pc, #12]	; (403ea8 <sd_mmc_get_capacity+0x20>)
  403e9a:	681b      	ldr	r3, [r3, #0]
  403e9c:	6858      	ldr	r0, [r3, #4]
  403e9e:	bd08      	pop	{r3, pc}
  403ea0:	00403695 	.word	0x00403695
  403ea4:	004037c5 	.word	0x004037c5
  403ea8:	20000df8 	.word	0x20000df8

00403eac <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
  403eac:	2000      	movs	r0, #0
  403eae:	4770      	bx	lr

00403eb0 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  403eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403eb4:	b082      	sub	sp, #8
  403eb6:	468a      	mov	sl, r1
  403eb8:	4691      	mov	r9, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  403eba:	4b26      	ldr	r3, [pc, #152]	; (403f54 <sd_mmc_init_read_blocks+0xa4>)
  403ebc:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  403ebe:	4680      	mov	r8, r0
  403ec0:	b118      	cbz	r0, 403eca <sd_mmc_init_read_blocks+0x1a>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  403ec2:	4640      	mov	r0, r8
  403ec4:	b002      	add	sp, #8
  403ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403eca:	4c23      	ldr	r4, [pc, #140]	; (403f58 <sd_mmc_init_read_blocks+0xa8>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  403ecc:	4e23      	ldr	r6, [pc, #140]	; (403f5c <sd_mmc_init_read_blocks+0xac>)
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  403ece:	4d24      	ldr	r5, [pc, #144]	; (403f60 <sd_mmc_init_read_blocks+0xb0>)
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  403ed0:	4f24      	ldr	r7, [pc, #144]	; (403f64 <sd_mmc_init_read_blocks+0xb4>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  403ed2:	6833      	ldr	r3, [r6, #0]
  403ed4:	8999      	ldrh	r1, [r3, #12]
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  403ed6:	0409      	lsls	r1, r1, #16
  403ed8:	f241 100d 	movw	r0, #4365	; 0x110d
  403edc:	47a8      	blx	r5
  403ede:	b128      	cbz	r0, 403eec <sd_mmc_init_read_blocks+0x3c>
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  403ee0:	47b8      	blx	r7
  403ee2:	f410 7f80 	tst.w	r0, #256	; 0x100
  403ee6:	d117      	bne.n	403f18 <sd_mmc_init_read_blocks+0x68>
		if (nec_timeout-- == 0) {
  403ee8:	3c01      	subs	r4, #1
  403eea:	d1f2      	bne.n	403ed2 <sd_mmc_init_read_blocks+0x22>
		sd_mmc_deselect_slot();
  403eec:	4b1e      	ldr	r3, [pc, #120]	; (403f68 <sd_mmc_init_read_blocks+0xb8>)
  403eee:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  403ef0:	f04f 0805 	mov.w	r8, #5
  403ef4:	e7e5      	b.n	403ec2 <sd_mmc_init_read_blocks+0x12>
		resp = driver_get_response();
  403ef6:	4b1b      	ldr	r3, [pc, #108]	; (403f64 <sd_mmc_init_read_blocks+0xb4>)
  403ef8:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  403efa:	4b1c      	ldr	r3, [pc, #112]	; (403f6c <sd_mmc_init_read_blocks+0xbc>)
  403efc:	4003      	ands	r3, r0
  403efe:	b933      	cbnz	r3, 403f0e <sd_mmc_init_read_blocks+0x5e>
	sd_mmc_nb_block_remaining = nb_block;
  403f00:	4b1b      	ldr	r3, [pc, #108]	; (403f70 <sd_mmc_init_read_blocks+0xc0>)
  403f02:	f8a3 9000 	strh.w	r9, [r3]
	sd_mmc_nb_block_to_tranfer = nb_block;
  403f06:	4b1b      	ldr	r3, [pc, #108]	; (403f74 <sd_mmc_init_read_blocks+0xc4>)
  403f08:	f8a3 9000 	strh.w	r9, [r3]
	return SD_MMC_OK;
  403f0c:	e7d9      	b.n	403ec2 <sd_mmc_init_read_blocks+0x12>
			sd_mmc_deselect_slot();
  403f0e:	4b16      	ldr	r3, [pc, #88]	; (403f68 <sd_mmc_init_read_blocks+0xb8>)
  403f10:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  403f12:	f04f 0805 	mov.w	r8, #5
  403f16:	e7d4      	b.n	403ec2 <sd_mmc_init_read_blocks+0x12>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
  403f18:	4b17      	ldr	r3, [pc, #92]	; (403f78 <sd_mmc_init_read_blocks+0xc8>)
  403f1a:	4818      	ldr	r0, [pc, #96]	; (403f7c <sd_mmc_init_read_blocks+0xcc>)
  403f1c:	f1b9 0f01 	cmp.w	r9, #1
  403f20:	bf98      	it	ls
  403f22:	4618      	movls	r0, r3
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  403f24:	4b0d      	ldr	r3, [pc, #52]	; (403f5c <sd_mmc_init_read_blocks+0xac>)
  403f26:	681b      	ldr	r3, [r3, #0]
  403f28:	7bdb      	ldrb	r3, [r3, #15]
  403f2a:	f013 0f08 	tst.w	r3, #8
  403f2e:	d101      	bne.n	403f34 <sd_mmc_init_read_blocks+0x84>
		arg = (start * SD_MMC_BLOCK_SIZE);
  403f30:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  403f34:	2301      	movs	r3, #1
  403f36:	9300      	str	r3, [sp, #0]
  403f38:	464b      	mov	r3, r9
  403f3a:	f44f 7200 	mov.w	r2, #512	; 0x200
  403f3e:	4651      	mov	r1, sl
  403f40:	4c0f      	ldr	r4, [pc, #60]	; (403f80 <sd_mmc_init_read_blocks+0xd0>)
  403f42:	47a0      	blx	r4
  403f44:	2800      	cmp	r0, #0
  403f46:	d1d6      	bne.n	403ef6 <sd_mmc_init_read_blocks+0x46>
		sd_mmc_deselect_slot();
  403f48:	4b07      	ldr	r3, [pc, #28]	; (403f68 <sd_mmc_init_read_blocks+0xb8>)
  403f4a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  403f4c:	f04f 0805 	mov.w	r8, #5
  403f50:	e7b7      	b.n	403ec2 <sd_mmc_init_read_blocks+0x12>
  403f52:	bf00      	nop
  403f54:	00403695 	.word	0x00403695
  403f58:	00030d41 	.word	0x00030d41
  403f5c:	20000df8 	.word	0x20000df8
  403f60:	004044d9 	.word	0x004044d9
  403f64:	00404505 	.word	0x00404505
  403f68:	004037c5 	.word	0x004037c5
  403f6c:	e4580000 	.word	0xe4580000
  403f70:	20000dfc 	.word	0x20000dfc
  403f74:	20000dfe 	.word	0x20000dfe
  403f78:	00081111 	.word	0x00081111
  403f7c:	00101112 	.word	0x00101112
  403f80:	00404539 	.word	0x00404539

00403f84 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
  403f84:	b510      	push	{r4, lr}
  403f86:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
  403f88:	4b06      	ldr	r3, [pc, #24]	; (403fa4 <sd_mmc_start_read_blocks+0x20>)
  403f8a:	4798      	blx	r3
  403f8c:	b920      	cbnz	r0, 403f98 <sd_mmc_start_read_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  403f8e:	2200      	movs	r2, #0
  403f90:	4b05      	ldr	r3, [pc, #20]	; (403fa8 <sd_mmc_start_read_blocks+0x24>)
  403f92:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  403f94:	2005      	movs	r0, #5
  403f96:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  403f98:	4a03      	ldr	r2, [pc, #12]	; (403fa8 <sd_mmc_start_read_blocks+0x24>)
  403f9a:	8813      	ldrh	r3, [r2, #0]
  403f9c:	1b1c      	subs	r4, r3, r4
  403f9e:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  403fa0:	2000      	movs	r0, #0
}
  403fa2:	bd10      	pop	{r4, pc}
  403fa4:	00404679 	.word	0x00404679
  403fa8:	20000dfc 	.word	0x20000dfc

00403fac <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
  403fac:	b510      	push	{r4, lr}
  403fae:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
  403fb0:	4b13      	ldr	r3, [pc, #76]	; (404000 <sd_mmc_wait_end_of_read_blocks+0x54>)
  403fb2:	4798      	blx	r3
  403fb4:	b908      	cbnz	r0, 403fba <sd_mmc_wait_end_of_read_blocks+0xe>
		return SD_MMC_ERR_COMM;
  403fb6:	2005      	movs	r0, #5
  403fb8:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  403fba:	b184      	cbz	r4, 403fde <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  403fbc:	2200      	movs	r2, #0
  403fbe:	4b11      	ldr	r3, [pc, #68]	; (404004 <sd_mmc_wait_end_of_read_blocks+0x58>)
  403fc0:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  403fc2:	4b11      	ldr	r3, [pc, #68]	; (404008 <sd_mmc_wait_end_of_read_blocks+0x5c>)
  403fc4:	881b      	ldrh	r3, [r3, #0]
  403fc6:	2b01      	cmp	r3, #1
  403fc8:	d00f      	beq.n	403fea <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  403fca:	2100      	movs	r1, #0
  403fcc:	f243 100c 	movw	r0, #12556	; 0x310c
  403fd0:	4b0e      	ldr	r3, [pc, #56]	; (40400c <sd_mmc_wait_end_of_read_blocks+0x60>)
  403fd2:	4798      	blx	r3
  403fd4:	b168      	cbz	r0, 403ff2 <sd_mmc_wait_end_of_read_blocks+0x46>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
  403fd6:	4b0e      	ldr	r3, [pc, #56]	; (404010 <sd_mmc_wait_end_of_read_blocks+0x64>)
  403fd8:	4798      	blx	r3
	return SD_MMC_OK;
  403fda:	2000      	movs	r0, #0
  403fdc:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  403fde:	4b09      	ldr	r3, [pc, #36]	; (404004 <sd_mmc_wait_end_of_read_blocks+0x58>)
  403fe0:	881b      	ldrh	r3, [r3, #0]
  403fe2:	2b00      	cmp	r3, #0
  403fe4:	d0ed      	beq.n	403fc2 <sd_mmc_wait_end_of_read_blocks+0x16>
		return SD_MMC_OK;
  403fe6:	2000      	movs	r0, #0
}
  403fe8:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  403fea:	4b09      	ldr	r3, [pc, #36]	; (404010 <sd_mmc_wait_end_of_read_blocks+0x64>)
  403fec:	4798      	blx	r3
		return SD_MMC_OK;
  403fee:	2000      	movs	r0, #0
  403ff0:	bd10      	pop	{r4, pc}
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
  403ff2:	2100      	movs	r1, #0
  403ff4:	f243 100c 	movw	r0, #12556	; 0x310c
  403ff8:	4b04      	ldr	r3, [pc, #16]	; (40400c <sd_mmc_wait_end_of_read_blocks+0x60>)
  403ffa:	4798      	blx	r3
  403ffc:	e7eb      	b.n	403fd6 <sd_mmc_wait_end_of_read_blocks+0x2a>
  403ffe:	bf00      	nop
  404000:	004046e1 	.word	0x004046e1
  404004:	20000dfc 	.word	0x20000dfc
  404008:	20000dfe 	.word	0x20000dfe
  40400c:	004044d9 	.word	0x004044d9
  404010:	004037c5 	.word	0x004037c5

00404014 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  404014:	b570      	push	{r4, r5, r6, lr}
  404016:	b082      	sub	sp, #8
  404018:	460e      	mov	r6, r1
  40401a:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  40401c:	4b16      	ldr	r3, [pc, #88]	; (404078 <sd_mmc_init_write_blocks+0x64>)
  40401e:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  404020:	4604      	mov	r4, r0
  404022:	b9b8      	cbnz	r0, 404054 <sd_mmc_init_write_blocks+0x40>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
  404024:	4b15      	ldr	r3, [pc, #84]	; (40407c <sd_mmc_init_write_blocks+0x68>)
  404026:	4816      	ldr	r0, [pc, #88]	; (404080 <sd_mmc_init_write_blocks+0x6c>)
  404028:	2d01      	cmp	r5, #1
  40402a:	bf98      	it	ls
  40402c:	4618      	movls	r0, r3
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  40402e:	4b15      	ldr	r3, [pc, #84]	; (404084 <sd_mmc_init_write_blocks+0x70>)
  404030:	681b      	ldr	r3, [r3, #0]
  404032:	7bdb      	ldrb	r3, [r3, #15]
  404034:	f013 0f08 	tst.w	r3, #8
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  404038:	bf08      	it	eq
  40403a:	0276      	lsleq	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  40403c:	2301      	movs	r3, #1
  40403e:	9300      	str	r3, [sp, #0]
  404040:	462b      	mov	r3, r5
  404042:	f44f 7200 	mov.w	r2, #512	; 0x200
  404046:	4631      	mov	r1, r6
  404048:	4e0f      	ldr	r6, [pc, #60]	; (404088 <sd_mmc_init_write_blocks+0x74>)
  40404a:	47b0      	blx	r6
  40404c:	b928      	cbnz	r0, 40405a <sd_mmc_init_write_blocks+0x46>
		sd_mmc_deselect_slot();
  40404e:	4b0f      	ldr	r3, [pc, #60]	; (40408c <sd_mmc_init_write_blocks+0x78>)
  404050:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  404052:	2405      	movs	r4, #5
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  404054:	4620      	mov	r0, r4
  404056:	b002      	add	sp, #8
  404058:	bd70      	pop	{r4, r5, r6, pc}
		resp = driver_get_response();
  40405a:	4b0d      	ldr	r3, [pc, #52]	; (404090 <sd_mmc_init_write_blocks+0x7c>)
  40405c:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  40405e:	4b0d      	ldr	r3, [pc, #52]	; (404094 <sd_mmc_init_write_blocks+0x80>)
  404060:	4003      	ands	r3, r0
  404062:	b923      	cbnz	r3, 40406e <sd_mmc_init_write_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
  404064:	4b0c      	ldr	r3, [pc, #48]	; (404098 <sd_mmc_init_write_blocks+0x84>)
  404066:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  404068:	4b0c      	ldr	r3, [pc, #48]	; (40409c <sd_mmc_init_write_blocks+0x88>)
  40406a:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
  40406c:	e7f2      	b.n	404054 <sd_mmc_init_write_blocks+0x40>
			sd_mmc_deselect_slot();
  40406e:	4b07      	ldr	r3, [pc, #28]	; (40408c <sd_mmc_init_write_blocks+0x78>)
  404070:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  404072:	2405      	movs	r4, #5
  404074:	e7ee      	b.n	404054 <sd_mmc_init_write_blocks+0x40>
  404076:	bf00      	nop
  404078:	00403695 	.word	0x00403695
  40407c:	00089118 	.word	0x00089118
  404080:	00109119 	.word	0x00109119
  404084:	20000df8 	.word	0x20000df8
  404088:	00404539 	.word	0x00404539
  40408c:	004037c5 	.word	0x004037c5
  404090:	00404505 	.word	0x00404505
  404094:	e4580000 	.word	0xe4580000
  404098:	20000dfc 	.word	0x20000dfc
  40409c:	20000dfe 	.word	0x20000dfe

004040a0 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  4040a0:	b510      	push	{r4, lr}
  4040a2:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
  4040a4:	4b06      	ldr	r3, [pc, #24]	; (4040c0 <sd_mmc_start_write_blocks+0x20>)
  4040a6:	4798      	blx	r3
  4040a8:	b920      	cbnz	r0, 4040b4 <sd_mmc_start_write_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  4040aa:	2200      	movs	r2, #0
  4040ac:	4b05      	ldr	r3, [pc, #20]	; (4040c4 <sd_mmc_start_write_blocks+0x24>)
  4040ae:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  4040b0:	2005      	movs	r0, #5
  4040b2:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  4040b4:	4a03      	ldr	r2, [pc, #12]	; (4040c4 <sd_mmc_start_write_blocks+0x24>)
  4040b6:	8813      	ldrh	r3, [r2, #0]
  4040b8:	1b1c      	subs	r4, r3, r4
  4040ba:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  4040bc:	2000      	movs	r0, #0
}
  4040be:	bd10      	pop	{r4, pc}
  4040c0:	00404755 	.word	0x00404755
  4040c4:	20000dfc 	.word	0x20000dfc

004040c8 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  4040c8:	b510      	push	{r4, lr}
  4040ca:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
  4040cc:	4b12      	ldr	r3, [pc, #72]	; (404118 <sd_mmc_wait_end_of_write_blocks+0x50>)
  4040ce:	4798      	blx	r3
  4040d0:	b908      	cbnz	r0, 4040d6 <sd_mmc_wait_end_of_write_blocks+0xe>
		return SD_MMC_ERR_COMM;
  4040d2:	2005      	movs	r0, #5
  4040d4:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  4040d6:	b184      	cbz	r4, 4040fa <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  4040d8:	2200      	movs	r2, #0
  4040da:	4b10      	ldr	r3, [pc, #64]	; (40411c <sd_mmc_wait_end_of_write_blocks+0x54>)
  4040dc:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  4040de:	4b10      	ldr	r3, [pc, #64]	; (404120 <sd_mmc_wait_end_of_write_blocks+0x58>)
  4040e0:	881b      	ldrh	r3, [r3, #0]
  4040e2:	2b01      	cmp	r3, #1
  4040e4:	d00f      	beq.n	404106 <sd_mmc_wait_end_of_write_blocks+0x3e>
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  4040e6:	2100      	movs	r1, #0
  4040e8:	f243 100c 	movw	r0, #12556	; 0x310c
  4040ec:	4b0d      	ldr	r3, [pc, #52]	; (404124 <sd_mmc_wait_end_of_write_blocks+0x5c>)
  4040ee:	4798      	blx	r3
  4040f0:	b968      	cbnz	r0, 40410e <sd_mmc_wait_end_of_write_blocks+0x46>
			sd_mmc_deselect_slot();
  4040f2:	4b0d      	ldr	r3, [pc, #52]	; (404128 <sd_mmc_wait_end_of_write_blocks+0x60>)
  4040f4:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  4040f6:	2005      	movs	r0, #5
  4040f8:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  4040fa:	4b08      	ldr	r3, [pc, #32]	; (40411c <sd_mmc_wait_end_of_write_blocks+0x54>)
  4040fc:	881b      	ldrh	r3, [r3, #0]
  4040fe:	2b00      	cmp	r3, #0
  404100:	d0ed      	beq.n	4040de <sd_mmc_wait_end_of_write_blocks+0x16>
		return SD_MMC_OK;
  404102:	2000      	movs	r0, #0
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
  404104:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  404106:	4b08      	ldr	r3, [pc, #32]	; (404128 <sd_mmc_wait_end_of_write_blocks+0x60>)
  404108:	4798      	blx	r3
		return SD_MMC_OK;
  40410a:	2000      	movs	r0, #0
  40410c:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
  40410e:	4b06      	ldr	r3, [pc, #24]	; (404128 <sd_mmc_wait_end_of_write_blocks+0x60>)
  404110:	4798      	blx	r3
	return SD_MMC_OK;
  404112:	2000      	movs	r0, #0
  404114:	bd10      	pop	{r4, pc}
  404116:	bf00      	nop
  404118:	004047c1 	.word	0x004047c1
  40411c:	20000dfc 	.word	0x20000dfc
  404120:	20000dfe 	.word	0x20000dfe
  404124:	004044d9 	.word	0x004044d9
  404128:	004037c5 	.word	0x004037c5

0040412c <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  40412c:	b510      	push	{r4, lr}
  40412e:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
  404130:	4b0f      	ldr	r3, [pc, #60]	; (404170 <sd_mmc_test_unit_ready+0x44>)
  404132:	4798      	blx	r3
  404134:	2801      	cmp	r0, #1
  404136:	d018      	beq.n	40416a <sd_mmc_test_unit_ready+0x3e>
  404138:	b118      	cbz	r0, 404142 <sd_mmc_test_unit_ready+0x16>
  40413a:	2802      	cmp	r0, #2
  40413c:	d010      	beq.n	404160 <sd_mmc_test_unit_ready+0x34>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
  40413e:	2001      	movs	r0, #1
  404140:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
  404142:	4b0c      	ldr	r3, [pc, #48]	; (404174 <sd_mmc_test_unit_ready+0x48>)
  404144:	5d1b      	ldrb	r3, [r3, r4]
  404146:	b10b      	cbz	r3, 40414c <sd_mmc_test_unit_ready+0x20>
			return CTRL_NO_PRESENT;
  404148:	2002      	movs	r0, #2
	}
}
  40414a:	bd10      	pop	{r4, pc}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  40414c:	4620      	mov	r0, r4
  40414e:	4b0a      	ldr	r3, [pc, #40]	; (404178 <sd_mmc_test_unit_ready+0x4c>)
  404150:	4798      	blx	r3
  404152:	f000 0003 	and.w	r0, r0, #3
		return CTRL_NO_PRESENT;
  404156:	2800      	cmp	r0, #0
  404158:	bf14      	ite	ne
  40415a:	2000      	movne	r0, #0
  40415c:	2002      	moveq	r0, #2
  40415e:	bd10      	pop	{r4, pc}
		sd_mmc_ejected[slot] = false;
  404160:	2200      	movs	r2, #0
  404162:	4b04      	ldr	r3, [pc, #16]	; (404174 <sd_mmc_test_unit_ready+0x48>)
  404164:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
  404166:	2002      	movs	r0, #2
  404168:	bd10      	pop	{r4, pc}
		return CTRL_BUSY;
  40416a:	2003      	movs	r0, #3
  40416c:	bd10      	pop	{r4, pc}
  40416e:	bf00      	nop
  404170:	00403801 	.word	0x00403801
  404174:	20000e04 	.word	0x20000e04
  404178:	00403e65 	.word	0x00403e65

0040417c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
  40417c:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(0);
  40417e:	2000      	movs	r0, #0
  404180:	4b01      	ldr	r3, [pc, #4]	; (404188 <sd_mmc_test_unit_ready_0+0xc>)
  404182:	4798      	blx	r3
}
  404184:	bd08      	pop	{r3, pc}
  404186:	bf00      	nop
  404188:	0040412d 	.word	0x0040412d

0040418c <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
  40418c:	b538      	push	{r3, r4, r5, lr}
  40418e:	4604      	mov	r4, r0
  404190:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
  404192:	4b04      	ldr	r3, [pc, #16]	; (4041a4 <sd_mmc_read_capacity+0x18>)
  404194:	4798      	blx	r3
  404196:	0040      	lsls	r0, r0, #1
  404198:	3801      	subs	r0, #1
  40419a:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
  40419c:	4620      	mov	r0, r4
  40419e:	4b02      	ldr	r3, [pc, #8]	; (4041a8 <sd_mmc_read_capacity+0x1c>)
  4041a0:	4798      	blx	r3
}
  4041a2:	bd38      	pop	{r3, r4, r5, pc}
  4041a4:	00403e89 	.word	0x00403e89
  4041a8:	0040412d 	.word	0x0040412d

004041ac <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
  4041ac:	b508      	push	{r3, lr}
	return sd_mmc_read_capacity(0, nb_sector);
  4041ae:	4601      	mov	r1, r0
  4041b0:	2000      	movs	r0, #0
  4041b2:	4b01      	ldr	r3, [pc, #4]	; (4041b8 <sd_mmc_read_capacity_0+0xc>)
  4041b4:	4798      	blx	r3
}
  4041b6:	bd08      	pop	{r3, pc}
  4041b8:	0040418d 	.word	0x0040418d

004041bc <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
  4041bc:	b508      	push	{r3, lr}
	return sd_mmc_is_write_protected(slot);
  4041be:	2000      	movs	r0, #0
  4041c0:	4b01      	ldr	r3, [pc, #4]	; (4041c8 <sd_mmc_wr_protect_0+0xc>)
  4041c2:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
  4041c4:	bd08      	pop	{r3, pc}
  4041c6:	bf00      	nop
  4041c8:	00403ead 	.word	0x00403ead

004041cc <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
  4041cc:	b510      	push	{r4, lr}
  4041ce:	4614      	mov	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
  4041d0:	2201      	movs	r2, #1
  4041d2:	4b0a      	ldr	r3, [pc, #40]	; (4041fc <sd_mmc_mem_2_ram+0x30>)
  4041d4:	4798      	blx	r3
  4041d6:	b120      	cbz	r0, 4041e2 <sd_mmc_mem_2_ram+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  4041d8:	2802      	cmp	r0, #2
  4041da:	bf0c      	ite	eq
  4041dc:	2002      	moveq	r0, #2
  4041de:	2001      	movne	r0, #1
  4041e0:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
  4041e2:	2101      	movs	r1, #1
  4041e4:	4620      	mov	r0, r4
  4041e6:	4b06      	ldr	r3, [pc, #24]	; (404200 <sd_mmc_mem_2_ram+0x34>)
  4041e8:	4798      	blx	r3
  4041ea:	b108      	cbz	r0, 4041f0 <sd_mmc_mem_2_ram+0x24>
		return CTRL_FAIL;
  4041ec:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  4041ee:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
  4041f0:	4b04      	ldr	r3, [pc, #16]	; (404204 <sd_mmc_mem_2_ram+0x38>)
  4041f2:	4798      	blx	r3
		return CTRL_NO_PRESENT;
  4041f4:	3000      	adds	r0, #0
  4041f6:	bf18      	it	ne
  4041f8:	2001      	movne	r0, #1
  4041fa:	bd10      	pop	{r4, pc}
  4041fc:	00403eb1 	.word	0x00403eb1
  404200:	00403f85 	.word	0x00403f85
  404204:	00403fad 	.word	0x00403fad

00404208 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
  404208:	b508      	push	{r3, lr}
	return sd_mmc_mem_2_ram(0, addr, ram);
  40420a:	460a      	mov	r2, r1
  40420c:	4601      	mov	r1, r0
  40420e:	2000      	movs	r0, #0
  404210:	4b01      	ldr	r3, [pc, #4]	; (404218 <sd_mmc_mem_2_ram_0+0x10>)
  404212:	4798      	blx	r3
}
  404214:	bd08      	pop	{r3, pc}
  404216:	bf00      	nop
  404218:	004041cd 	.word	0x004041cd

0040421c <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
  40421c:	b510      	push	{r4, lr}
  40421e:	4614      	mov	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
  404220:	2201      	movs	r2, #1
  404222:	4b0a      	ldr	r3, [pc, #40]	; (40424c <sd_mmc_ram_2_mem+0x30>)
  404224:	4798      	blx	r3
  404226:	b120      	cbz	r0, 404232 <sd_mmc_ram_2_mem+0x16>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  404228:	2802      	cmp	r0, #2
  40422a:	bf0c      	ite	eq
  40422c:	2002      	moveq	r0, #2
  40422e:	2001      	movne	r0, #1
  404230:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
  404232:	2101      	movs	r1, #1
  404234:	4620      	mov	r0, r4
  404236:	4b06      	ldr	r3, [pc, #24]	; (404250 <sd_mmc_ram_2_mem+0x34>)
  404238:	4798      	blx	r3
  40423a:	b108      	cbz	r0, 404240 <sd_mmc_ram_2_mem+0x24>
		return CTRL_FAIL;
  40423c:	2001      	movs	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  40423e:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
  404240:	4b04      	ldr	r3, [pc, #16]	; (404254 <sd_mmc_ram_2_mem+0x38>)
  404242:	4798      	blx	r3
		return CTRL_NO_PRESENT;
  404244:	3000      	adds	r0, #0
  404246:	bf18      	it	ne
  404248:	2001      	movne	r0, #1
  40424a:	bd10      	pop	{r4, pc}
  40424c:	00404015 	.word	0x00404015
  404250:	004040a1 	.word	0x004040a1
  404254:	004040c9 	.word	0x004040c9

00404258 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
  404258:	b508      	push	{r3, lr}
	return sd_mmc_ram_2_mem(0, addr, ram);
  40425a:	460a      	mov	r2, r1
  40425c:	4601      	mov	r1, r0
  40425e:	2000      	movs	r0, #0
  404260:	4b01      	ldr	r3, [pc, #4]	; (404268 <sd_mmc_ram_2_mem_0+0x10>)
  404262:	4798      	blx	r3
}
  404264:	bd08      	pop	{r3, pc}
  404266:	bf00      	nop
  404268:	0040421d 	.word	0x0040421d

0040426c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40426c:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40426e:	480e      	ldr	r0, [pc, #56]	; (4042a8 <sysclk_init+0x3c>)
  404270:	4b0e      	ldr	r3, [pc, #56]	; (4042ac <sysclk_init+0x40>)
  404272:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  404274:	213e      	movs	r1, #62	; 0x3e
  404276:	2000      	movs	r0, #0
  404278:	4b0d      	ldr	r3, [pc, #52]	; (4042b0 <sysclk_init+0x44>)
  40427a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40427c:	4c0d      	ldr	r4, [pc, #52]	; (4042b4 <sysclk_init+0x48>)
  40427e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  404280:	2800      	cmp	r0, #0
  404282:	d0fc      	beq.n	40427e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  404284:	4b0c      	ldr	r3, [pc, #48]	; (4042b8 <sysclk_init+0x4c>)
  404286:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  404288:	4a0c      	ldr	r2, [pc, #48]	; (4042bc <sysclk_init+0x50>)
  40428a:	4b0d      	ldr	r3, [pc, #52]	; (4042c0 <sysclk_init+0x54>)
  40428c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40428e:	4c0d      	ldr	r4, [pc, #52]	; (4042c4 <sysclk_init+0x58>)
  404290:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  404292:	2800      	cmp	r0, #0
  404294:	d0fc      	beq.n	404290 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  404296:	2010      	movs	r0, #16
  404298:	4b0b      	ldr	r3, [pc, #44]	; (4042c8 <sysclk_init+0x5c>)
  40429a:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40429c:	4b0b      	ldr	r3, [pc, #44]	; (4042cc <sysclk_init+0x60>)
  40429e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4042a0:	4801      	ldr	r0, [pc, #4]	; (4042a8 <sysclk_init+0x3c>)
  4042a2:	4b02      	ldr	r3, [pc, #8]	; (4042ac <sysclk_init+0x40>)
  4042a4:	4798      	blx	r3
  4042a6:	bd10      	pop	{r4, pc}
  4042a8:	07270e00 	.word	0x07270e00
  4042ac:	00405399 	.word	0x00405399
  4042b0:	00404da9 	.word	0x00404da9
  4042b4:	00404e2d 	.word	0x00404e2d
  4042b8:	00404e3d 	.word	0x00404e3d
  4042bc:	20133f01 	.word	0x20133f01
  4042c0:	400e0400 	.word	0x400e0400
  4042c4:	00404e4d 	.word	0x00404e4d
  4042c8:	00404ce9 	.word	0x00404ce9
  4042cc:	00405289 	.word	0x00405289

004042d0 <mem_test_unit_ready>:

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  4042d0:	b108      	cbz	r0, 4042d6 <mem_test_unit_ready+0x6>
  4042d2:	2001      	movs	r0, #1
  4042d4:	4770      	bx	lr
{
  4042d6:	b508      	push	{r3, lr}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  4042d8:	4b01      	ldr	r3, [pc, #4]	; (4042e0 <mem_test_unit_ready+0x10>)
  4042da:	4798      	blx	r3
  4042dc:	bd08      	pop	{r3, pc}
  4042de:	bf00      	nop
  4042e0:	0040417d 	.word	0x0040417d

004042e4 <mem_read_capacity>:

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  4042e4:	b108      	cbz	r0, 4042ea <mem_read_capacity+0x6>
  4042e6:	2001      	movs	r0, #1
  4042e8:	4770      	bx	lr
{
  4042ea:	b508      	push	{r3, lr}
  4042ec:	4608      	mov	r0, r1
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  4042ee:	4b01      	ldr	r3, [pc, #4]	; (4042f4 <mem_read_capacity+0x10>)
  4042f0:	4798      	blx	r3
  4042f2:	bd08      	pop	{r3, pc}
  4042f4:	004041ad 	.word	0x004041ad

004042f8 <mem_sector_size>:
#endif

  Ctrl_access_unlock();

  return sector_size;
}
  4042f8:	fab0 f080 	clz	r0, r0
  4042fc:	0940      	lsrs	r0, r0, #5
  4042fe:	4770      	bx	lr

00404300 <mem_wr_protect>:

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  404300:	b108      	cbz	r0, 404306 <mem_wr_protect+0x6>
  404302:	2001      	movs	r0, #1
  404304:	4770      	bx	lr
{
  404306:	b508      	push	{r3, lr}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  404308:	4b01      	ldr	r3, [pc, #4]	; (404310 <mem_wr_protect+0x10>)
  40430a:	4798      	blx	r3
  40430c:	bd08      	pop	{r3, pc}
  40430e:	bf00      	nop
  404310:	004041bd 	.word	0x004041bd

00404314 <memory_2_ram>:
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  404314:	b108      	cbz	r0, 40431a <memory_2_ram+0x6>
  404316:	2001      	movs	r0, #1
  404318:	4770      	bx	lr
{
  40431a:	b508      	push	{r3, lr}
  40431c:	4608      	mov	r0, r1
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
  40431e:	4611      	mov	r1, r2
  404320:	4b01      	ldr	r3, [pc, #4]	; (404328 <memory_2_ram+0x14>)
  404322:	4798      	blx	r3
  404324:	bd08      	pop	{r3, pc}
  404326:	bf00      	nop
  404328:	00404209 	.word	0x00404209

0040432c <ram_2_memory>:
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  40432c:	b108      	cbz	r0, 404332 <ram_2_memory+0x6>
  40432e:	2001      	movs	r0, #1
  404330:	4770      	bx	lr
{
  404332:	b508      	push	{r3, lr}
  404334:	4608      	mov	r0, r1
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
  404336:	4611      	mov	r1, r2
  404338:	4b01      	ldr	r3, [pc, #4]	; (404340 <ram_2_memory+0x14>)
  40433a:	4798      	blx	r3
  40433c:	bd08      	pop	{r3, pc}
  40433e:	bf00      	nop
  404340:	00404259 	.word	0x00404259

00404344 <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
  404344:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
  404346:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40434a:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  40434c:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  40434e:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  404350:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  404352:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  404354:	2680      	movs	r6, #128	; 0x80
  404356:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
  404358:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
  40435a:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  40435c:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  40435e:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
  404360:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_DMA_DMAEN
	HSMCI->HSMCI_DMA = 0;
#endif
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  404362:	2205      	movs	r2, #5
  404364:	601a      	str	r2, [r3, #0]
}
  404366:	bc70      	pop	{r4, r5, r6}
  404368:	4770      	bx	lr
	...

0040436c <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
  40436c:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  40436e:	f001 033f 	and.w	r3, r1, #63	; 0x3f
  404372:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
  404374:	f411 7f80 	tst.w	r1, #256	; 0x100
  404378:	d004      	beq.n	404384 <hsmci_send_cmd_execute+0x18>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
  40437a:	f411 6f00 	tst.w	r1, #2048	; 0x800
  40437e:	d00e      	beq.n	40439e <hsmci_send_cmd_execute+0x32>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  404380:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
  404384:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  404388:	bf18      	it	ne
  40438a:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  40438e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  404392:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
  404394:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  404396:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
  404398:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
  40439c:	e00d      	b.n	4043ba <hsmci_send_cmd_execute+0x4e>
		} else if (cmd & SDMMC_RESP_BUSY) {
  40439e:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  4043a2:	bf14      	ite	ne
  4043a4:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  4043a8:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
  4043ac:	e7ea      	b.n	404384 <hsmci_send_cmd_execute+0x18>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  4043ae:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
  4043b2:	d10c      	bne.n	4043ce <hsmci_send_cmd_execute+0x62>
						__func__, cmd, sr);
				hsmci_reset();
				return false;
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  4043b4:	f013 0f01 	tst.w	r3, #1
  4043b8:	d10d      	bne.n	4043d6 <hsmci_send_cmd_execute+0x6a>
		sr = HSMCI->HSMCI_SR;
  4043ba:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
  4043bc:	2a00      	cmp	r2, #0
  4043be:	d0f6      	beq.n	4043ae <hsmci_send_cmd_execute+0x42>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  4043c0:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
  4043c4:	d0f6      	beq.n	4043b4 <hsmci_send_cmd_execute+0x48>
				hsmci_reset();
  4043c6:	4b10      	ldr	r3, [pc, #64]	; (404408 <hsmci_send_cmd_execute+0x9c>)
  4043c8:	4798      	blx	r3
				return false;
  4043ca:	2000      	movs	r0, #0
  4043cc:	bd08      	pop	{r3, pc}
				hsmci_reset();
  4043ce:	4b0e      	ldr	r3, [pc, #56]	; (404408 <hsmci_send_cmd_execute+0x9c>)
  4043d0:	4798      	blx	r3
				return false;
  4043d2:	2000      	movs	r0, #0
  4043d4:	bd08      	pop	{r3, pc}

	if (cmd & SDMMC_RESP_BUSY) {
  4043d6:	f411 5f00 	tst.w	r1, #8192	; 0x2000
  4043da:	d103      	bne.n	4043e4 <hsmci_send_cmd_execute+0x78>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
  4043dc:	2001      	movs	r0, #1
  4043de:	bd08      	pop	{r3, pc}
	return true;
  4043e0:	2001      	movs	r0, #1
  4043e2:	bd08      	pop	{r3, pc}
		sr = HSMCI->HSMCI_SR;
  4043e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4043ea:	f04f 32ff 	mov.w	r2, #4294967295
  4043ee:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  4043f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
  4043f6:	2b20      	cmp	r3, #32
  4043f8:	d0f2      	beq.n	4043e0 <hsmci_send_cmd_execute+0x74>
		sr = HSMCI->HSMCI_SR;
  4043fa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
  4043fc:	3a01      	subs	r2, #1
  4043fe:	d1f8      	bne.n	4043f2 <hsmci_send_cmd_execute+0x86>
			hsmci_reset();
  404400:	4b01      	ldr	r3, [pc, #4]	; (404408 <hsmci_send_cmd_execute+0x9c>)
  404402:	4798      	blx	r3
			return false;
  404404:	2000      	movs	r0, #0
  404406:	bd08      	pop	{r3, pc}
  404408:	00404345 	.word	0x00404345

0040440c <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
  40440c:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(ID_HSMCI);
  40440e:	2012      	movs	r0, #18
  404410:	4b07      	ldr	r3, [pc, #28]	; (404430 <hsmci_init+0x24>)
  404412:	4798      	blx	r3
	pmc_enable_periph_clk(ID_XDMAC);
#endif
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  404414:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  404418:	2272      	movs	r2, #114	; 0x72
  40441a:	609a      	str	r2, [r3, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
  40441c:	61da      	str	r2, [r3, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  40441e:	2211      	movs	r2, #17
  404420:	655a      	str	r2, [r3, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  404422:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  404426:	605a      	str	r2, [r3, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  404428:	2205      	movs	r2, #5
  40442a:	601a      	str	r2, [r3, #0]
  40442c:	bd08      	pop	{r3, pc}
  40442e:	bf00      	nop
  404430:	00404e5d 	.word	0x00404e5d

00404434 <hsmci_get_bus_width>:
}

uint8_t hsmci_get_bus_width(uint8_t slot)
{
	switch (slot) {
  404434:	2800      	cmp	r0, #0
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
  404436:	bf0c      	ite	eq
  404438:	2004      	moveq	r0, #4
  40443a:	2000      	movne	r0, #0
  40443c:	4770      	bx	lr

0040443e <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
  40443e:	2001      	movs	r0, #1
  404440:	4770      	bx	lr
	...

00404444 <hsmci_select_device>:
void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
  404444:	b19b      	cbz	r3, 40446e <hsmci_select_device+0x2a>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  404446:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  40444a:	6d43      	ldr	r3, [r0, #84]	; 0x54
  40444c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404450:	6543      	str	r3, [r0, #84]	; 0x54
	if ((speed * 2) < mck) {
  404452:	0049      	lsls	r1, r1, #1
  404454:	4b15      	ldr	r3, [pc, #84]	; (4044ac <hsmci_select_device+0x68>)
  404456:	4299      	cmp	r1, r3
  404458:	d810      	bhi.n	40447c <hsmci_select_device+0x38>
		clkdiv = mck / (2 * speed);
  40445a:	4815      	ldr	r0, [pc, #84]	; (4044b0 <hsmci_select_device+0x6c>)
  40445c:	fbb0 f3f1 	udiv	r3, r0, r1
		rest = mck % (2 * speed);
  404460:	fb01 0113 	mls	r1, r1, r3, r0
		if (rest > 0) {
  404464:	b101      	cbz	r1, 404468 <hsmci_select_device+0x24>
			clkdiv++;
  404466:	3301      	adds	r3, #1
		if (clkdiv > 0) {
  404468:	b14b      	cbz	r3, 40447e <hsmci_select_device+0x3a>
			clkdiv -= 1;
  40446a:	3b01      	subs	r3, #1
  40446c:	e007      	b.n	40447e <hsmci_select_device+0x3a>
	} else {
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  40446e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  404472:	6d43      	ldr	r3, [r0, #84]	; 0x54
  404474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  404478:	6543      	str	r3, [r0, #84]	; 0x54
  40447a:	e7ea      	b.n	404452 <hsmci_select_device+0xe>
		clkdiv = 0;
  40447c:	2300      	movs	r3, #0
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  40447e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  404482:	6848      	ldr	r0, [r1, #4]
  404484:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  404488:	6048      	str	r0, [r1, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  40448a:	6848      	ldr	r0, [r1, #4]
  40448c:	b2db      	uxtb	r3, r3
  40448e:	4303      	orrs	r3, r0
  404490:	604b      	str	r3, [r1, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  404492:	2a04      	cmp	r2, #4
  404494:	d007      	beq.n	4044a6 <hsmci_select_device+0x62>
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  404496:	2a08      	cmp	r2, #8
  404498:	bf0c      	ite	eq
  40449a:	22c0      	moveq	r2, #192	; 0xc0
  40449c:	2200      	movne	r2, #0
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  40449e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4044a2:	60da      	str	r2, [r3, #12]
  4044a4:	4770      	bx	lr
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  4044a6:	2280      	movs	r2, #128	; 0x80
  4044a8:	e7f9      	b.n	40449e <hsmci_select_device+0x5a>
  4044aa:	bf00      	nop
  4044ac:	07270dff 	.word	0x07270dff
  4044b0:	07270e00 	.word	0x07270e00

004044b4 <hsmci_deselect_device>:
}

void hsmci_deselect_device(uint8_t slot)
{
  4044b4:	4770      	bx	lr

004044b6 <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  4044b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4044ba:	685a      	ldr	r2, [r3, #4]
  4044bc:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  4044c0:	605a      	str	r2, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  4044c2:	2200      	movs	r2, #0
  4044c4:	611a      	str	r2, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  4044c6:	f44f 6210 	mov.w	r2, #2304	; 0x900
  4044ca:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  4044cc:	461a      	mov	r2, r3
  4044ce:	6c13      	ldr	r3, [r2, #64]	; 0x40
  4044d0:	f013 0f01 	tst.w	r3, #1
  4044d4:	d0fb      	beq.n	4044ce <hsmci_send_clock+0x18>
}
  4044d6:	4770      	bx	lr

004044d8 <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  4044d8:	b510      	push	{r4, lr}
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  4044da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4044de:	685a      	ldr	r2, [r3, #4]
  4044e0:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  4044e4:	605a      	str	r2, [r3, #4]
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
#endif
#ifdef HSMCI_MR_PDCMODE
	// Disable PDC for HSMCI
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
  4044e6:	685a      	ldr	r2, [r3, #4]
  4044e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  4044ec:	605a      	str	r2, [r3, #4]
#ifdef HSMCI_DMA_DMAEN
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
#endif
#endif
	HSMCI->HSMCI_BLKR = 0;
  4044ee:	2400      	movs	r4, #0
  4044f0:	619c      	str	r4, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
  4044f2:	460a      	mov	r2, r1
  4044f4:	4601      	mov	r1, r0
  4044f6:	4620      	mov	r0, r4
  4044f8:	4b01      	ldr	r3, [pc, #4]	; (404500 <hsmci_send_cmd+0x28>)
  4044fa:	4798      	blx	r3
}
  4044fc:	bd10      	pop	{r4, pc}
  4044fe:	bf00      	nop
  404500:	0040436d 	.word	0x0040436d

00404504 <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
  404504:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  404508:	6a18      	ldr	r0, [r3, #32]
}
  40450a:	4770      	bx	lr

0040450c <hsmci_get_response_128>:

void hsmci_get_response_128(uint8_t* response)
{
  40450c:	b410      	push	{r4}
  40450e:	1d03      	adds	r3, r0, #4
  404510:	3014      	adds	r0, #20
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
  404512:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  404516:	6a22      	ldr	r2, [r4, #32]
		*response = (response_32 >> 24) & 0xFF;
  404518:	0e11      	lsrs	r1, r2, #24
  40451a:	f803 1c04 	strb.w	r1, [r3, #-4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
  40451e:	0c11      	lsrs	r1, r2, #16
  404520:	f803 1c03 	strb.w	r1, [r3, #-3]
		response++;
		*response = (response_32 >>  8) & 0xFF;
  404524:	0a11      	lsrs	r1, r2, #8
  404526:	f803 1c02 	strb.w	r1, [r3, #-2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
  40452a:	f803 2c01 	strb.w	r2, [r3, #-1]
  40452e:	3304      	adds	r3, #4
	for (uint8_t i = 0; i < 4; i++) {
  404530:	4283      	cmp	r3, r0
  404532:	d1f0      	bne.n	404516 <hsmci_get_response_128+0xa>
		response++;
	}
}
  404534:	bc10      	pop	{r4}
  404536:	4770      	bx	lr

00404538 <hsmci_adtc_start>:

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  404538:	b570      	push	{r4, r5, r6, lr}
  40453a:	f89d 4010 	ldrb.w	r4, [sp, #16]
		HSMCI->HSMCI_DMA = 0;
	}
#endif

#ifdef HSMCI_MR_PDCMODE
	if (access_block) {
  40453e:	b38c      	cbz	r4, 4045a4 <hsmci_adtc_start+0x6c>
		// Enable PDC for HSMCI
		HSMCI->HSMCI_MR |= HSMCI_MR_PDCMODE;
  404540:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  404544:	686c      	ldr	r4, [r5, #4]
  404546:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
  40454a:	606c      	str	r4, [r5, #4]
#endif
#endif
	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  40454c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  404550:	686c      	ldr	r4, [r5, #4]
  404552:	f444 54c0 	orr.w	r4, r4, #6144	; 0x1800
  404556:	606c      	str	r4, [r5, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
  404558:	f012 0f03 	tst.w	r2, #3
  40455c:	d029      	beq.n	4045b2 <hsmci_adtc_start+0x7a>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  40455e:	686c      	ldr	r4, [r5, #4]
  404560:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  404564:	606c      	str	r4, [r5, #4]
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	if (cmd & SDMMC_CMD_WRITE) {
  404566:	f400 4400 	and.w	r4, r0, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
  40456a:	2c00      	cmp	r4, #0
  40456c:	bf14      	ite	ne
  40456e:	f44f 3480 	movne.w	r4, #65536	; 0x10000
  404572:	f44f 24a0 	moveq.w	r4, #327680	; 0x50000
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  404576:	f410 3f80 	tst.w	r0, #65536	; 0x10000
  40457a:	d121      	bne.n	4045c0 <hsmci_adtc_start+0x88>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  40457c:	ea43 4502 	orr.w	r5, r3, r2, lsl #16
  404580:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  404584:	61b5      	str	r5, [r6, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
  404586:	f410 3f00 	tst.w	r0, #131072	; 0x20000
  40458a:	d12d      	bne.n	4045e8 <hsmci_adtc_start+0xb0>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
		} else if (cmd & SDMMC_CMD_STREAM) {
  40458c:	f410 2f80 	tst.w	r0, #262144	; 0x40000
  404590:	d12d      	bne.n	4045ee <hsmci_adtc_start+0xb6>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
  404592:	f410 2f00 	tst.w	r0, #524288	; 0x80000
  404596:	d11a      	bne.n	4045ce <hsmci_adtc_start+0x96>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
  404598:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  40459c:	bf18      	it	ne
  40459e:	f444 2400 	orrne.w	r4, r4, #524288	; 0x80000
  4045a2:	e014      	b.n	4045ce <hsmci_adtc_start+0x96>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
  4045a4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  4045a8:	686c      	ldr	r4, [r5, #4]
  4045aa:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
  4045ae:	606c      	str	r4, [r5, #4]
  4045b0:	e7cc      	b.n	40454c <hsmci_adtc_start+0x14>
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  4045b2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  4045b6:	686c      	ldr	r4, [r5, #4]
  4045b8:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  4045bc:	606c      	str	r4, [r5, #4]
  4045be:	e7d2      	b.n	404566 <hsmci_adtc_start+0x2e>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  4045c0:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  4045c4:	f3c2 0508 	ubfx	r5, r2, #0, #9
  4045c8:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  4045cc:	61b5      	str	r5, [r6, #24]
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  4045ce:	2600      	movs	r6, #0
  4045d0:	4d08      	ldr	r5, [pc, #32]	; (4045f4 <hsmci_adtc_start+0xbc>)
  4045d2:	602e      	str	r6, [r5, #0]
	hsmci_block_size = block_size;
  4045d4:	4d08      	ldr	r5, [pc, #32]	; (4045f8 <hsmci_adtc_start+0xc0>)
  4045d6:	802a      	strh	r2, [r5, #0]
	hsmci_nb_block = nb_block;
  4045d8:	4a08      	ldr	r2, [pc, #32]	; (4045fc <hsmci_adtc_start+0xc4>)
  4045da:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  4045dc:	460a      	mov	r2, r1
  4045de:	4601      	mov	r1, r0
  4045e0:	4620      	mov	r0, r4
  4045e2:	4b07      	ldr	r3, [pc, #28]	; (404600 <hsmci_adtc_start+0xc8>)
  4045e4:	4798      	blx	r3
}
  4045e6:	bd70      	pop	{r4, r5, r6, pc}
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  4045e8:	f444 1420 	orr.w	r4, r4, #2621440	; 0x280000
  4045ec:	e7ef      	b.n	4045ce <hsmci_adtc_start+0x96>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  4045ee:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  4045f2:	e7ec      	b.n	4045ce <hsmci_adtc_start+0x96>
  4045f4:	20000e0c 	.word	0x20000e0c
  4045f8:	20000e06 	.word	0x20000e06
  4045fc:	20000e08 	.word	0x20000e08
  404600:	0040436d 	.word	0x0040436d

00404604 <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
  404604:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  404606:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40460a:	4a16      	ldr	r2, [pc, #88]	; (404664 <hsmci_read_word+0x60>)
		sr = HSMCI->HSMCI_SR;
  40460c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40460e:	4213      	tst	r3, r2
  404610:	d11d      	bne.n	40464e <hsmci_read_word+0x4a>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  404612:	f013 0f02 	tst.w	r3, #2
  404616:	d0f9      	beq.n	40460c <hsmci_read_word+0x8>

	// Read data
	*value = HSMCI->HSMCI_RDR;
  404618:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40461e:	6003      	str	r3, [r0, #0]
	hsmci_transfert_pos += 4;
  404620:	4a11      	ldr	r2, [pc, #68]	; (404668 <hsmci_read_word+0x64>)
  404622:	6813      	ldr	r3, [r2, #0]
  404624:	3304      	adds	r3, #4
  404626:	6013      	str	r3, [r2, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  404628:	4a10      	ldr	r2, [pc, #64]	; (40466c <hsmci_read_word+0x68>)
  40462a:	8811      	ldrh	r1, [r2, #0]
  40462c:	4a10      	ldr	r2, [pc, #64]	; (404670 <hsmci_read_word+0x6c>)
  40462e:	8812      	ldrh	r2, [r2, #0]
  404630:	fb02 f201 	mul.w	r2, r2, r1
  404634:	4293      	cmp	r3, r2
  404636:	d312      	bcc.n	40465e <hsmci_read_word+0x5a>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  404638:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40463c:	4a09      	ldr	r2, [pc, #36]	; (404664 <hsmci_read_word+0x60>)
		sr = HSMCI->HSMCI_SR;
  40463e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  404640:	4213      	tst	r3, r2
  404642:	d108      	bne.n	404656 <hsmci_read_word+0x52>
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  404644:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  404648:	d0f9      	beq.n	40463e <hsmci_read_word+0x3a>
	return true;
  40464a:	2001      	movs	r0, #1
  40464c:	bd08      	pop	{r3, pc}
			hsmci_reset();
  40464e:	4b09      	ldr	r3, [pc, #36]	; (404674 <hsmci_read_word+0x70>)
  404650:	4798      	blx	r3
			return false;
  404652:	2000      	movs	r0, #0
  404654:	bd08      	pop	{r3, pc}
			hsmci_reset();
  404656:	4b07      	ldr	r3, [pc, #28]	; (404674 <hsmci_read_word+0x70>)
  404658:	4798      	blx	r3
			return false;
  40465a:	2000      	movs	r0, #0
  40465c:	bd08      	pop	{r3, pc}
		return true;
  40465e:	2001      	movs	r0, #1
}
  404660:	bd08      	pop	{r3, pc}
  404662:	bf00      	nop
  404664:	c0600000 	.word	0xc0600000
  404668:	20000e0c 	.word	0x20000e0c
  40466c:	20000e06 	.word	0x20000e06
  404670:	20000e08 	.word	0x20000e08
  404674:	00404345 	.word	0x00404345

00404678 <hsmci_start_read_blocks>:
#ifdef HSMCI_MR_PDCMODE
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
	uint32_t nb_data;

	nb_data = nb_block * hsmci_block_size;
  404678:	4b17      	ldr	r3, [pc, #92]	; (4046d8 <hsmci_start_read_blocks+0x60>)
  40467a:	881b      	ldrh	r3, [r3, #0]
  40467c:	fb03 f101 	mul.w	r1, r3, r1
	Assert(nb_data <= (((uint32_t)hsmci_block_size * hsmci_nb_block) - hsmci_transfert_pos));
	Assert(nb_data <= (PERIPH_RCR_RXCTR_Msk >> PERIPH_RCR_RXCTR_Pos));

	// Handle unaligned memory address
	if (((uint32_t)dest & 0x3) || (hsmci_block_size & 0x3)) {
  404680:	f010 0f03 	tst.w	r0, #3
  404684:	d102      	bne.n	40468c <hsmci_start_read_blocks+0x14>
  404686:	f013 0f03 	tst.w	r3, #3
  40468a:	d01e      	beq.n	4046ca <hsmci_start_read_blocks+0x52>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  40468c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  404690:	6853      	ldr	r3, [r2, #4]
  404692:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404696:	6053      	str	r3, [r2, #4]
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	// Configure PDC transfer
	HSMCI->HSMCI_RPR = (uint32_t)dest;
  404698:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40469c:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	HSMCI->HSMCI_RCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  4046a0:	685b      	ldr	r3, [r3, #4]
			nb_data : nb_data / 4;
  4046a2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  4046a6:	bf0c      	ite	eq
  4046a8:	088b      	lsreq	r3, r1, #2
  4046aa:	460b      	movne	r3, r1
	HSMCI->HSMCI_RCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  4046ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4046b0:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
	HSMCI->HSMCI_RNCR = 0;
  4046b4:	2300      	movs	r3, #0
  4046b6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	// Start transfer
	HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTEN;
  4046ba:	2001      	movs	r0, #1
  4046bc:	f8c2 0120 	str.w	r0, [r2, #288]	; 0x120
	hsmci_transfert_pos += nb_data;
  4046c0:	4a06      	ldr	r2, [pc, #24]	; (4046dc <hsmci_start_read_blocks+0x64>)
  4046c2:	6813      	ldr	r3, [r2, #0]
  4046c4:	440b      	add	r3, r1
  4046c6:	6013      	str	r3, [r2, #0]
	return true;
}
  4046c8:	4770      	bx	lr
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  4046ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4046ce:	6853      	ldr	r3, [r2, #4]
  4046d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4046d4:	6053      	str	r3, [r2, #4]
  4046d6:	e7df      	b.n	404698 <hsmci_start_read_blocks+0x20>
  4046d8:	20000e06 	.word	0x20000e06
  4046dc:	20000e0c 	.word	0x20000e0c

004046e0 <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
  4046e0:	b508      	push	{r3, lr}
	uint32_t sr;
	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  4046e2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4046e6:	4a16      	ldr	r2, [pc, #88]	; (404740 <hsmci_wait_end_of_read_blocks+0x60>)
		sr = HSMCI->HSMCI_SR;
  4046e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4046ea:	4213      	tst	r3, r2
  4046ec:	d117      	bne.n	40471e <hsmci_wait_end_of_read_blocks+0x3e>
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
			hsmci_reset();
			return false;
		}

	} while (!(sr & HSMCI_SR_RXBUFF));
  4046ee:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  4046f2:	d0f9      	beq.n	4046e8 <hsmci_wait_end_of_read_blocks+0x8>

	if (hsmci_transfert_pos < ((uint32_t)hsmci_block_size * hsmci_nb_block)) {
  4046f4:	4b13      	ldr	r3, [pc, #76]	; (404744 <hsmci_wait_end_of_read_blocks+0x64>)
  4046f6:	881a      	ldrh	r2, [r3, #0]
  4046f8:	4b13      	ldr	r3, [pc, #76]	; (404748 <hsmci_wait_end_of_read_blocks+0x68>)
  4046fa:	881b      	ldrh	r3, [r3, #0]
  4046fc:	fb03 f302 	mul.w	r3, r3, r2
  404700:	4a12      	ldr	r2, [pc, #72]	; (40474c <hsmci_wait_end_of_read_blocks+0x6c>)
  404702:	6812      	ldr	r2, [r2, #0]
  404704:	4293      	cmp	r3, r2
  404706:	d818      	bhi.n	40473a <hsmci_wait_end_of_read_blocks+0x5a>
		return true;
	}
	// It is the last transfer, then wait command completed
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  404708:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40470c:	4a0c      	ldr	r2, [pc, #48]	; (404740 <hsmci_wait_end_of_read_blocks+0x60>)
		sr = HSMCI->HSMCI_SR;
  40470e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  404710:	4213      	tst	r3, r2
  404712:	d10e      	bne.n	404732 <hsmci_wait_end_of_read_blocks+0x52>
			hsmci_debug("%s: PDC sr 0x%08x last transfer error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  404714:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  404718:	d0f9      	beq.n	40470e <hsmci_wait_end_of_read_blocks+0x2e>
	return true;
  40471a:	2001      	movs	r0, #1
  40471c:	bd08      	pop	{r3, pc}
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
  40471e:	f240 2202 	movw	r2, #514	; 0x202
  404722:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  404726:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			hsmci_reset();
  40472a:	4b09      	ldr	r3, [pc, #36]	; (404750 <hsmci_wait_end_of_read_blocks+0x70>)
  40472c:	4798      	blx	r3
			return false;
  40472e:	2000      	movs	r0, #0
  404730:	bd08      	pop	{r3, pc}
			hsmci_reset();
  404732:	4b07      	ldr	r3, [pc, #28]	; (404750 <hsmci_wait_end_of_read_blocks+0x70>)
  404734:	4798      	blx	r3
			return false;
  404736:	2000      	movs	r0, #0
  404738:	bd08      	pop	{r3, pc}
		return true;
  40473a:	2001      	movs	r0, #1
}
  40473c:	bd08      	pop	{r3, pc}
  40473e:	bf00      	nop
  404740:	c0600000 	.word	0xc0600000
  404744:	20000e06 	.word	0x20000e06
  404748:	20000e08 	.word	0x20000e08
  40474c:	20000e0c 	.word	0x20000e0c
  404750:	00404345 	.word	0x00404345

00404754 <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
	uint32_t nb_data;

	nb_data = nb_block * hsmci_block_size;
  404754:	4b18      	ldr	r3, [pc, #96]	; (4047b8 <hsmci_start_write_blocks+0x64>)
  404756:	881b      	ldrh	r3, [r3, #0]
  404758:	fb03 f101 	mul.w	r1, r3, r1
	Assert(nb_data <= (((uint32_t)hsmci_block_size * hsmci_nb_block) - hsmci_transfert_pos));
	Assert(nb_data <= (PERIPH_TCR_TXCTR_Msk >> PERIPH_TCR_TXCTR_Pos));

	// Handle unaligned memory address
	if (((uint32_t)src & 0x3) || (hsmci_block_size & 0x3)) {
  40475c:	f010 0f03 	tst.w	r0, #3
  404760:	d102      	bne.n	404768 <hsmci_start_write_blocks+0x14>
  404762:	f013 0f03 	tst.w	r3, #3
  404766:	d020      	beq.n	4047aa <hsmci_start_write_blocks+0x56>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  404768:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40476c:	6853      	ldr	r3, [r2, #4]
  40476e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404772:	6053      	str	r3, [r2, #4]
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	// Configure PDC transfer
	HSMCI->HSMCI_TPR = (uint32_t)src;
  404774:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  404778:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	HSMCI->HSMCI_TCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  40477c:	685b      	ldr	r3, [r3, #4]
			nb_data : nb_data / 4;
  40477e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  404782:	bf0c      	ite	eq
  404784:	088b      	lsreq	r3, r1, #2
  404786:	460b      	movne	r3, r1
	HSMCI->HSMCI_TCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  404788:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40478c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	HSMCI->HSMCI_TNCR = 0;
  404790:	2300      	movs	r3, #0
  404792:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
	// Start transfer
	HSMCI->HSMCI_PTCR = HSMCI_PTCR_TXTEN;
  404796:	f44f 7380 	mov.w	r3, #256	; 0x100
  40479a:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	hsmci_transfert_pos += nb_data;
  40479e:	4a07      	ldr	r2, [pc, #28]	; (4047bc <hsmci_start_write_blocks+0x68>)
  4047a0:	6813      	ldr	r3, [r2, #0]
  4047a2:	440b      	add	r3, r1
  4047a4:	6013      	str	r3, [r2, #0]
	return true;
}
  4047a6:	2001      	movs	r0, #1
  4047a8:	4770      	bx	lr
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  4047aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4047ae:	6853      	ldr	r3, [r2, #4]
  4047b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4047b4:	6053      	str	r3, [r2, #4]
  4047b6:	e7dd      	b.n	404774 <hsmci_start_write_blocks+0x20>
  4047b8:	20000e06 	.word	0x20000e06
  4047bc:	20000e0c 	.word	0x20000e0c

004047c0 <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
  4047c0:	b508      	push	{r3, lr}
	uint32_t sr;

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  4047c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr &
  4047c6:	4a16      	ldr	r2, [pc, #88]	; (404820 <hsmci_wait_end_of_write_blocks+0x60>)
		sr = HSMCI->HSMCI_SR;
  4047c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr &
  4047ca:	4213      	tst	r3, r2
  4047cc:	d117      	bne.n	4047fe <hsmci_wait_end_of_write_blocks+0x3e>
					__func__, sr);
			hsmci_reset();
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
			return false;
		}
	} while (!(sr & HSMCI_SR_TXBUFE));
  4047ce:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  4047d2:	d0f9      	beq.n	4047c8 <hsmci_wait_end_of_write_blocks+0x8>


	if (hsmci_transfert_pos < ((uint32_t)hsmci_block_size * hsmci_nb_block)) {
  4047d4:	4b13      	ldr	r3, [pc, #76]	; (404824 <hsmci_wait_end_of_write_blocks+0x64>)
  4047d6:	881a      	ldrh	r2, [r3, #0]
  4047d8:	4b13      	ldr	r3, [pc, #76]	; (404828 <hsmci_wait_end_of_write_blocks+0x68>)
  4047da:	881b      	ldrh	r3, [r3, #0]
  4047dc:	fb03 f302 	mul.w	r3, r3, r2
  4047e0:	4a12      	ldr	r2, [pc, #72]	; (40482c <hsmci_wait_end_of_write_blocks+0x6c>)
  4047e2:	6812      	ldr	r2, [r2, #0]
  4047e4:	4293      	cmp	r3, r2
  4047e6:	d818      	bhi.n	40481a <hsmci_wait_end_of_write_blocks+0x5a>
		return true;
	}
	// It is the last transfer, then wait command completed
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  4047e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4047ec:	4a0c      	ldr	r2, [pc, #48]	; (404820 <hsmci_wait_end_of_write_blocks+0x60>)
		sr = HSMCI->HSMCI_SR;
  4047ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4047f0:	4213      	tst	r3, r2
  4047f2:	d10e      	bne.n	404812 <hsmci_wait_end_of_write_blocks+0x52>
			hsmci_debug("%s: PDC sr 0x%08x last transfer error\n\r",
					__func__, sr);
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_NOTBUSY));
  4047f4:	f013 0f20 	tst.w	r3, #32
  4047f8:	d0f9      	beq.n	4047ee <hsmci_wait_end_of_write_blocks+0x2e>
	Assert(HSMCI->HSMCI_SR & HSMCI_SR_FIFOEMPTY);
	return true;
  4047fa:	2001      	movs	r0, #1
  4047fc:	bd08      	pop	{r3, pc}
			hsmci_reset();
  4047fe:	4b0c      	ldr	r3, [pc, #48]	; (404830 <hsmci_wait_end_of_write_blocks+0x70>)
  404800:	4798      	blx	r3
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
  404802:	f240 2202 	movw	r2, #514	; 0x202
  404806:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40480a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			return false;
  40480e:	2000      	movs	r0, #0
  404810:	bd08      	pop	{r3, pc}
			hsmci_reset();
  404812:	4b07      	ldr	r3, [pc, #28]	; (404830 <hsmci_wait_end_of_write_blocks+0x70>)
  404814:	4798      	blx	r3
			return false;
  404816:	2000      	movs	r0, #0
  404818:	bd08      	pop	{r3, pc}
		return true;
  40481a:	2001      	movs	r0, #1
}
  40481c:	bd08      	pop	{r3, pc}
  40481e:	bf00      	nop
  404820:	c0600000 	.word	0xc0600000
  404824:	20000e06 	.word	0x20000e06
  404828:	20000e08 	.word	0x20000e08
  40482c:	20000e0c 	.word	0x20000e0c
  404830:	00404345 	.word	0x00404345

00404834 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  404834:	b90a      	cbnz	r2, 40483a <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  404836:	6601      	str	r1, [r0, #96]	; 0x60
  404838:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  40483a:	6641      	str	r1, [r0, #100]	; 0x64
  40483c:	4770      	bx	lr

0040483e <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  40483e:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  404842:	0053      	lsls	r3, r2, #1
  404844:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  404848:	fbb2 f2f3 	udiv	r2, r2, r3
  40484c:	3a01      	subs	r2, #1
  40484e:	f3c2 020d 	ubfx	r2, r2, #0, #14
  404852:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  404856:	4770      	bx	lr

00404858 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  404858:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40485a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40485e:	d039      	beq.n	4048d4 <pio_set_peripheral+0x7c>
  404860:	d813      	bhi.n	40488a <pio_set_peripheral+0x32>
  404862:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  404866:	d025      	beq.n	4048b4 <pio_set_peripheral+0x5c>
  404868:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40486c:	d10a      	bne.n	404884 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40486e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  404870:	4313      	orrs	r3, r2
  404872:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  404874:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  404876:	6f41      	ldr	r1, [r0, #116]	; 0x74
  404878:	400b      	ands	r3, r1
  40487a:	ea23 0302 	bic.w	r3, r3, r2
  40487e:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  404880:	6042      	str	r2, [r0, #4]
  404882:	4770      	bx	lr
	switch (ul_type) {
  404884:	2900      	cmp	r1, #0
  404886:	d1fb      	bne.n	404880 <pio_set_peripheral+0x28>
  404888:	4770      	bx	lr
  40488a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40488e:	d020      	beq.n	4048d2 <pio_set_peripheral+0x7a>
  404890:	d809      	bhi.n	4048a6 <pio_set_peripheral+0x4e>
  404892:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  404896:	d1f3      	bne.n	404880 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  404898:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40489a:	4313      	orrs	r3, r2
  40489c:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40489e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4048a0:	4313      	orrs	r3, r2
  4048a2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4048a4:	e7ec      	b.n	404880 <pio_set_peripheral+0x28>
	switch (ul_type) {
  4048a6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4048aa:	d012      	beq.n	4048d2 <pio_set_peripheral+0x7a>
  4048ac:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4048b0:	d00f      	beq.n	4048d2 <pio_set_peripheral+0x7a>
  4048b2:	e7e5      	b.n	404880 <pio_set_peripheral+0x28>
{
  4048b4:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4048b6:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4048b8:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4048ba:	43d3      	mvns	r3, r2
  4048bc:	4021      	ands	r1, r4
  4048be:	461c      	mov	r4, r3
  4048c0:	4019      	ands	r1, r3
  4048c2:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4048c4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4048c6:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4048c8:	400b      	ands	r3, r1
  4048ca:	4023      	ands	r3, r4
  4048cc:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4048ce:	6042      	str	r2, [r0, #4]
}
  4048d0:	bc10      	pop	{r4}
  4048d2:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4048d4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4048d6:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4048d8:	400b      	ands	r3, r1
  4048da:	ea23 0302 	bic.w	r3, r3, r2
  4048de:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4048e0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4048e2:	4313      	orrs	r3, r2
  4048e4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4048e6:	e7cb      	b.n	404880 <pio_set_peripheral+0x28>

004048e8 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4048e8:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4048ea:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  4048ee:	bf14      	ite	ne
  4048f0:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4048f2:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4048f4:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  4048f8:	bf14      	ite	ne
  4048fa:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
  4048fc:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  4048fe:	f012 0f02 	tst.w	r2, #2
  404902:	d107      	bne.n	404914 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  404904:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  404908:	bf18      	it	ne
  40490a:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
  40490e:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  404910:	6001      	str	r1, [r0, #0]
  404912:	4770      	bx	lr
		p_pio->PIO_IFSCDR = ul_mask;
  404914:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  404918:	e7f9      	b.n	40490e <pio_set_input+0x26>

0040491a <pio_set_output>:
{
  40491a:	b410      	push	{r4}
  40491c:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  40491e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  404920:	b944      	cbnz	r4, 404934 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
  404922:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  404924:	b143      	cbz	r3, 404938 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
  404926:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  404928:	b942      	cbnz	r2, 40493c <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
  40492a:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  40492c:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  40492e:	6001      	str	r1, [r0, #0]
}
  404930:	bc10      	pop	{r4}
  404932:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  404934:	6641      	str	r1, [r0, #100]	; 0x64
  404936:	e7f5      	b.n	404924 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  404938:	6541      	str	r1, [r0, #84]	; 0x54
  40493a:	e7f5      	b.n	404928 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  40493c:	6301      	str	r1, [r0, #48]	; 0x30
  40493e:	e7f5      	b.n	40492c <pio_set_output+0x12>

00404940 <pio_pull_down>:
	if (ul_pull_down_enable) {
  404940:	b912      	cbnz	r2, 404948 <pio_pull_down+0x8>
		p_pio->PIO_PPDDR = ul_mask;
  404942:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
  404946:	4770      	bx	lr
		p_pio->PIO_PPDER = ul_mask;
  404948:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
  40494c:	4770      	bx	lr

0040494e <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  40494e:	f012 0f10 	tst.w	r2, #16
  404952:	d010      	beq.n	404976 <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
  404954:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  404958:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
  40495c:	bf14      	ite	ne
  40495e:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
  404962:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
  404966:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
  40496a:	bf14      	ite	ne
  40496c:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
  404970:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  404974:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  404976:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  40497a:	4770      	bx	lr

0040497c <pio_enable_interrupt>:
	p_pio->PIO_ISR;
  40497c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  40497e:	6401      	str	r1, [r0, #64]	; 0x40
  404980:	4770      	bx	lr

00404982 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  404982:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  404984:	4770      	bx	lr

00404986 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  404986:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  404988:	4770      	bx	lr

0040498a <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40498a:	0943      	lsrs	r3, r0, #5
  40498c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  404990:	f203 7307 	addw	r3, r3, #1799	; 0x707
  404994:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  404996:	f000 001f 	and.w	r0, r0, #31
  40499a:	2201      	movs	r2, #1
  40499c:	fa02 f000 	lsl.w	r0, r2, r0
  4049a0:	6318      	str	r0, [r3, #48]	; 0x30
  4049a2:	4770      	bx	lr

004049a4 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4049a4:	0943      	lsrs	r3, r0, #5
  4049a6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4049aa:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4049ae:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  4049b0:	f000 001f 	and.w	r0, r0, #31
  4049b4:	2201      	movs	r2, #1
  4049b6:	fa02 f000 	lsl.w	r0, r2, r0
  4049ba:	6358      	str	r0, [r3, #52]	; 0x34
  4049bc:	4770      	bx	lr
	...

004049c0 <pio_configure_pin>:
{
  4049c0:	b570      	push	{r4, r5, r6, lr}
  4049c2:	b082      	sub	sp, #8
  4049c4:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4049c6:	0943      	lsrs	r3, r0, #5
  4049c8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4049cc:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4049d0:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  4049d2:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4049d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4049da:	d053      	beq.n	404a84 <pio_configure_pin+0xc4>
  4049dc:	d80a      	bhi.n	4049f4 <pio_configure_pin+0x34>
  4049de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4049e2:	d02d      	beq.n	404a40 <pio_configure_pin+0x80>
  4049e4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4049e8:	d03b      	beq.n	404a62 <pio_configure_pin+0xa2>
  4049ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4049ee:	d015      	beq.n	404a1c <pio_configure_pin+0x5c>
		return 0;
  4049f0:	2000      	movs	r0, #0
  4049f2:	e023      	b.n	404a3c <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
  4049f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4049f8:	d055      	beq.n	404aa6 <pio_configure_pin+0xe6>
  4049fa:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4049fe:	d052      	beq.n	404aa6 <pio_configure_pin+0xe6>
  404a00:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  404a04:	d1f4      	bne.n	4049f0 <pio_configure_pin+0x30>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  404a06:	f000 011f 	and.w	r1, r0, #31
  404a0a:	2601      	movs	r6, #1
  404a0c:	462a      	mov	r2, r5
  404a0e:	fa06 f101 	lsl.w	r1, r6, r1
  404a12:	4620      	mov	r0, r4
  404a14:	4b2f      	ldr	r3, [pc, #188]	; (404ad4 <pio_configure_pin+0x114>)
  404a16:	4798      	blx	r3
	return 1;
  404a18:	4630      	mov	r0, r6
		break;
  404a1a:	e00f      	b.n	404a3c <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  404a1c:	f000 001f 	and.w	r0, r0, #31
  404a20:	2601      	movs	r6, #1
  404a22:	4086      	lsls	r6, r0
  404a24:	4632      	mov	r2, r6
  404a26:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404a2a:	4620      	mov	r0, r4
  404a2c:	4b2a      	ldr	r3, [pc, #168]	; (404ad8 <pio_configure_pin+0x118>)
  404a2e:	4798      	blx	r3
	if (ul_pull_up_enable) {
  404a30:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  404a34:	bf14      	ite	ne
  404a36:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  404a38:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  404a3a:	2001      	movs	r0, #1
}
  404a3c:	b002      	add	sp, #8
  404a3e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  404a40:	f000 001f 	and.w	r0, r0, #31
  404a44:	2601      	movs	r6, #1
  404a46:	4086      	lsls	r6, r0
  404a48:	4632      	mov	r2, r6
  404a4a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  404a4e:	4620      	mov	r0, r4
  404a50:	4b21      	ldr	r3, [pc, #132]	; (404ad8 <pio_configure_pin+0x118>)
  404a52:	4798      	blx	r3
	if (ul_pull_up_enable) {
  404a54:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  404a58:	bf14      	ite	ne
  404a5a:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  404a5c:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  404a5e:	2001      	movs	r0, #1
  404a60:	e7ec      	b.n	404a3c <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  404a62:	f000 001f 	and.w	r0, r0, #31
  404a66:	2601      	movs	r6, #1
  404a68:	4086      	lsls	r6, r0
  404a6a:	4632      	mov	r2, r6
  404a6c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  404a70:	4620      	mov	r0, r4
  404a72:	4b19      	ldr	r3, [pc, #100]	; (404ad8 <pio_configure_pin+0x118>)
  404a74:	4798      	blx	r3
	if (ul_pull_up_enable) {
  404a76:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  404a7a:	bf14      	ite	ne
  404a7c:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  404a7e:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  404a80:	2001      	movs	r0, #1
  404a82:	e7db      	b.n	404a3c <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  404a84:	f000 001f 	and.w	r0, r0, #31
  404a88:	2601      	movs	r6, #1
  404a8a:	4086      	lsls	r6, r0
  404a8c:	4632      	mov	r2, r6
  404a8e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  404a92:	4620      	mov	r0, r4
  404a94:	4b10      	ldr	r3, [pc, #64]	; (404ad8 <pio_configure_pin+0x118>)
  404a96:	4798      	blx	r3
	if (ul_pull_up_enable) {
  404a98:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  404a9c:	bf14      	ite	ne
  404a9e:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  404aa0:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  404aa2:	2001      	movs	r0, #1
  404aa4:	e7ca      	b.n	404a3c <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  404aa6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  404aaa:	f000 011f 	and.w	r1, r0, #31
  404aae:	2601      	movs	r6, #1
  404ab0:	ea05 0306 	and.w	r3, r5, r6
  404ab4:	9300      	str	r3, [sp, #0]
  404ab6:	f3c5 0380 	ubfx	r3, r5, #2, #1
  404aba:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  404abe:	bf14      	ite	ne
  404ac0:	2200      	movne	r2, #0
  404ac2:	2201      	moveq	r2, #1
  404ac4:	fa06 f101 	lsl.w	r1, r6, r1
  404ac8:	4620      	mov	r0, r4
  404aca:	4c04      	ldr	r4, [pc, #16]	; (404adc <pio_configure_pin+0x11c>)
  404acc:	47a0      	blx	r4
	return 1;
  404ace:	4630      	mov	r0, r6
		break;
  404ad0:	e7b4      	b.n	404a3c <pio_configure_pin+0x7c>
  404ad2:	bf00      	nop
  404ad4:	004048e9 	.word	0x004048e9
  404ad8:	00404859 	.word	0x00404859
  404adc:	0040491b 	.word	0x0040491b

00404ae0 <pio_configure_pin_group>:
{
  404ae0:	b570      	push	{r4, r5, r6, lr}
  404ae2:	b082      	sub	sp, #8
  404ae4:	4605      	mov	r5, r0
  404ae6:	460e      	mov	r6, r1
  404ae8:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
  404aea:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  404aee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  404af2:	d03d      	beq.n	404b70 <pio_configure_pin_group+0x90>
  404af4:	d80a      	bhi.n	404b0c <pio_configure_pin_group+0x2c>
  404af6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  404afa:	d021      	beq.n	404b40 <pio_configure_pin_group+0x60>
  404afc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  404b00:	d02a      	beq.n	404b58 <pio_configure_pin_group+0x78>
  404b02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  404b06:	d00e      	beq.n	404b26 <pio_configure_pin_group+0x46>
		return 0;
  404b08:	2000      	movs	r0, #0
  404b0a:	e017      	b.n	404b3c <pio_configure_pin_group+0x5c>
	switch (ul_flags & PIO_TYPE_Msk) {
  404b0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  404b10:	d03a      	beq.n	404b88 <pio_configure_pin_group+0xa8>
  404b12:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  404b16:	d037      	beq.n	404b88 <pio_configure_pin_group+0xa8>
  404b18:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  404b1c:	d1f4      	bne.n	404b08 <pio_configure_pin_group+0x28>
		pio_set_input(p_pio, ul_mask, ul_flags);
  404b1e:	4b23      	ldr	r3, [pc, #140]	; (404bac <pio_configure_pin_group+0xcc>)
  404b20:	4798      	blx	r3
	return 1;
  404b22:	2001      	movs	r0, #1
		break;
  404b24:	e00a      	b.n	404b3c <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  404b26:	460a      	mov	r2, r1
  404b28:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404b2c:	4b20      	ldr	r3, [pc, #128]	; (404bb0 <pio_configure_pin_group+0xd0>)
  404b2e:	4798      	blx	r3
	if (ul_pull_up_enable) {
  404b30:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  404b34:	bf14      	ite	ne
  404b36:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  404b38:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  404b3a:	2001      	movs	r0, #1
}
  404b3c:	b002      	add	sp, #8
  404b3e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  404b40:	460a      	mov	r2, r1
  404b42:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  404b46:	4b1a      	ldr	r3, [pc, #104]	; (404bb0 <pio_configure_pin_group+0xd0>)
  404b48:	4798      	blx	r3
	if (ul_pull_up_enable) {
  404b4a:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  404b4e:	bf14      	ite	ne
  404b50:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  404b52:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  404b54:	2001      	movs	r0, #1
  404b56:	e7f1      	b.n	404b3c <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  404b58:	460a      	mov	r2, r1
  404b5a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  404b5e:	4b14      	ldr	r3, [pc, #80]	; (404bb0 <pio_configure_pin_group+0xd0>)
  404b60:	4798      	blx	r3
	if (ul_pull_up_enable) {
  404b62:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  404b66:	bf14      	ite	ne
  404b68:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  404b6a:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  404b6c:	2001      	movs	r0, #1
  404b6e:	e7e5      	b.n	404b3c <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  404b70:	460a      	mov	r2, r1
  404b72:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  404b76:	4b0e      	ldr	r3, [pc, #56]	; (404bb0 <pio_configure_pin_group+0xd0>)
  404b78:	4798      	blx	r3
	if (ul_pull_up_enable) {
  404b7a:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  404b7e:	bf14      	ite	ne
  404b80:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  404b82:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  404b84:	2001      	movs	r0, #1
  404b86:	e7d9      	b.n	404b3c <pio_configure_pin_group+0x5c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  404b88:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
  404b8c:	f004 0301 	and.w	r3, r4, #1
  404b90:	9300      	str	r3, [sp, #0]
  404b92:	f3c4 0380 	ubfx	r3, r4, #2, #1
  404b96:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  404b9a:	bf14      	ite	ne
  404b9c:	2200      	movne	r2, #0
  404b9e:	2201      	moveq	r2, #1
  404ba0:	4631      	mov	r1, r6
  404ba2:	4628      	mov	r0, r5
  404ba4:	4c03      	ldr	r4, [pc, #12]	; (404bb4 <pio_configure_pin_group+0xd4>)
  404ba6:	47a0      	blx	r4
	return 1;
  404ba8:	2001      	movs	r0, #1
		break;
  404baa:	e7c7      	b.n	404b3c <pio_configure_pin_group+0x5c>
  404bac:	004048e9 	.word	0x004048e9
  404bb0:	00404859 	.word	0x00404859
  404bb4:	0040491b 	.word	0x0040491b

00404bb8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  404bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404bbc:	4681      	mov	r9, r0
  404bbe:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  404bc0:	4b12      	ldr	r3, [pc, #72]	; (404c0c <pio_handler_process+0x54>)
  404bc2:	4798      	blx	r3
  404bc4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  404bc6:	4648      	mov	r0, r9
  404bc8:	4b11      	ldr	r3, [pc, #68]	; (404c10 <pio_handler_process+0x58>)
  404bca:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  404bcc:	4005      	ands	r5, r0
  404bce:	d013      	beq.n	404bf8 <pio_handler_process+0x40>
  404bd0:	4c10      	ldr	r4, [pc, #64]	; (404c14 <pio_handler_process+0x5c>)
  404bd2:	f104 0660 	add.w	r6, r4, #96	; 0x60
  404bd6:	e003      	b.n	404be0 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  404bd8:	42b4      	cmp	r4, r6
  404bda:	d00d      	beq.n	404bf8 <pio_handler_process+0x40>
  404bdc:	3410      	adds	r4, #16
		while (status != 0) {
  404bde:	b15d      	cbz	r5, 404bf8 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  404be0:	6820      	ldr	r0, [r4, #0]
  404be2:	42b8      	cmp	r0, r7
  404be4:	d1f8      	bne.n	404bd8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  404be6:	6861      	ldr	r1, [r4, #4]
  404be8:	4229      	tst	r1, r5
  404bea:	d0f5      	beq.n	404bd8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  404bec:	68e3      	ldr	r3, [r4, #12]
  404bee:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  404bf0:	6863      	ldr	r3, [r4, #4]
  404bf2:	ea25 0503 	bic.w	r5, r5, r3
  404bf6:	e7ef      	b.n	404bd8 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  404bf8:	4b07      	ldr	r3, [pc, #28]	; (404c18 <pio_handler_process+0x60>)
  404bfa:	681b      	ldr	r3, [r3, #0]
  404bfc:	b123      	cbz	r3, 404c08 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  404bfe:	4b07      	ldr	r3, [pc, #28]	; (404c1c <pio_handler_process+0x64>)
  404c00:	681b      	ldr	r3, [r3, #0]
  404c02:	b10b      	cbz	r3, 404c08 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  404c04:	4648      	mov	r0, r9
  404c06:	4798      	blx	r3
  404c08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404c0c:	00404983 	.word	0x00404983
  404c10:	00404987 	.word	0x00404987
  404c14:	20000e10 	.word	0x20000e10
  404c18:	20002010 	.word	0x20002010
  404c1c:	20000e84 	.word	0x20000e84

00404c20 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  404c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  404c22:	4c0c      	ldr	r4, [pc, #48]	; (404c54 <pio_handler_set+0x34>)
  404c24:	6824      	ldr	r4, [r4, #0]
  404c26:	2c06      	cmp	r4, #6
  404c28:	d901      	bls.n	404c2e <pio_handler_set+0xe>
		return 1;
  404c2a:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  404c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404c2e:	4615      	mov	r5, r2
	pSource->id = ul_id;
  404c30:	4f09      	ldr	r7, [pc, #36]	; (404c58 <pio_handler_set+0x38>)
  404c32:	0126      	lsls	r6, r4, #4
  404c34:	19ba      	adds	r2, r7, r6
  404c36:	51b9      	str	r1, [r7, r6]
	pSource->mask = ul_mask;
  404c38:	6055      	str	r5, [r2, #4]
	pSource->attr = ul_attr;
  404c3a:	6093      	str	r3, [r2, #8]
	pSource->handler = p_handler;
  404c3c:	9906      	ldr	r1, [sp, #24]
  404c3e:	60d1      	str	r1, [r2, #12]
	gs_ul_nb_sources++;
  404c40:	3401      	adds	r4, #1
  404c42:	4a04      	ldr	r2, [pc, #16]	; (404c54 <pio_handler_set+0x34>)
  404c44:	6014      	str	r4, [r2, #0]
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  404c46:	461a      	mov	r2, r3
  404c48:	4629      	mov	r1, r5
  404c4a:	4b04      	ldr	r3, [pc, #16]	; (404c5c <pio_handler_set+0x3c>)
  404c4c:	4798      	blx	r3
	return 0;
  404c4e:	2000      	movs	r0, #0
  404c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404c52:	bf00      	nop
  404c54:	20000e80 	.word	0x20000e80
  404c58:	20000e10 	.word	0x20000e10
  404c5c:	0040494f 	.word	0x0040494f

00404c60 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  404c60:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  404c62:	210b      	movs	r1, #11
  404c64:	4801      	ldr	r0, [pc, #4]	; (404c6c <PIOA_Handler+0xc>)
  404c66:	4b02      	ldr	r3, [pc, #8]	; (404c70 <PIOA_Handler+0x10>)
  404c68:	4798      	blx	r3
  404c6a:	bd08      	pop	{r3, pc}
  404c6c:	400e0e00 	.word	0x400e0e00
  404c70:	00404bb9 	.word	0x00404bb9

00404c74 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  404c74:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  404c76:	210c      	movs	r1, #12
  404c78:	4801      	ldr	r0, [pc, #4]	; (404c80 <PIOB_Handler+0xc>)
  404c7a:	4b02      	ldr	r3, [pc, #8]	; (404c84 <PIOB_Handler+0x10>)
  404c7c:	4798      	blx	r3
  404c7e:	bd08      	pop	{r3, pc}
  404c80:	400e1000 	.word	0x400e1000
  404c84:	00404bb9 	.word	0x00404bb9

00404c88 <pmc_switch_mck_to_sclk>:
 */
uint32_t pmc_switch_mck_to_sclk(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  404c88:	4b16      	ldr	r3, [pc, #88]	; (404ce4 <pmc_switch_mck_to_sclk+0x5c>)
  404c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  404c8c:	f022 0203 	bic.w	r2, r2, #3
  404c90:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_SLOW_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404c92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404c94:	f013 0f08 	tst.w	r3, #8
  404c98:	d10a      	bne.n	404cb0 <pmc_switch_mck_to_sclk+0x28>
  404c9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  404c9e:	4911      	ldr	r1, [pc, #68]	; (404ce4 <pmc_switch_mck_to_sclk+0x5c>)
  404ca0:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  404ca2:	f012 0f08 	tst.w	r2, #8
  404ca6:	d103      	bne.n	404cb0 <pmc_switch_mck_to_sclk+0x28>
			--ul_timeout) {
		if (ul_timeout == 0) {
  404ca8:	3b01      	subs	r3, #1
  404caa:	d1f9      	bne.n	404ca0 <pmc_switch_mck_to_sclk+0x18>
			return 1;
  404cac:	2001      	movs	r0, #1
  404cae:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  404cb0:	4a0c      	ldr	r2, [pc, #48]	; (404ce4 <pmc_switch_mck_to_sclk+0x5c>)
  404cb2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  404cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  404cb8:	4318      	orrs	r0, r3
  404cba:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404cbc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  404cbe:	f013 0f08 	tst.w	r3, #8
  404cc2:	d10a      	bne.n	404cda <pmc_switch_mck_to_sclk+0x52>
  404cc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  404cc8:	4906      	ldr	r1, [pc, #24]	; (404ce4 <pmc_switch_mck_to_sclk+0x5c>)
  404cca:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  404ccc:	f012 0f08 	tst.w	r2, #8
  404cd0:	d105      	bne.n	404cde <pmc_switch_mck_to_sclk+0x56>
			--ul_timeout) {
		if (ul_timeout == 0) {
  404cd2:	3b01      	subs	r3, #1
  404cd4:	d1f9      	bne.n	404cca <pmc_switch_mck_to_sclk+0x42>
			return 1;
  404cd6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  404cd8:	4770      	bx	lr
	return 0;
  404cda:	2000      	movs	r0, #0
  404cdc:	4770      	bx	lr
  404cde:	2000      	movs	r0, #0
  404ce0:	4770      	bx	lr
  404ce2:	bf00      	nop
  404ce4:	400e0400 	.word	0x400e0400

00404ce8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  404ce8:	4a17      	ldr	r2, [pc, #92]	; (404d48 <pmc_switch_mck_to_pllack+0x60>)
  404cea:	6b13      	ldr	r3, [r2, #48]	; 0x30
  404cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  404cf0:	4318      	orrs	r0, r3
  404cf2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404cf4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  404cf6:	f013 0f08 	tst.w	r3, #8
  404cfa:	d10a      	bne.n	404d12 <pmc_switch_mck_to_pllack+0x2a>
  404cfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  404d00:	4911      	ldr	r1, [pc, #68]	; (404d48 <pmc_switch_mck_to_pllack+0x60>)
  404d02:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  404d04:	f012 0f08 	tst.w	r2, #8
  404d08:	d103      	bne.n	404d12 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  404d0a:	3b01      	subs	r3, #1
  404d0c:	d1f9      	bne.n	404d02 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  404d0e:	2001      	movs	r0, #1
  404d10:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  404d12:	4a0d      	ldr	r2, [pc, #52]	; (404d48 <pmc_switch_mck_to_pllack+0x60>)
  404d14:	6b13      	ldr	r3, [r2, #48]	; 0x30
  404d16:	f023 0303 	bic.w	r3, r3, #3
  404d1a:	f043 0302 	orr.w	r3, r3, #2
  404d1e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404d20:	6e93      	ldr	r3, [r2, #104]	; 0x68
  404d22:	f013 0f08 	tst.w	r3, #8
  404d26:	d10a      	bne.n	404d3e <pmc_switch_mck_to_pllack+0x56>
  404d28:	f44f 6300 	mov.w	r3, #2048	; 0x800
  404d2c:	4906      	ldr	r1, [pc, #24]	; (404d48 <pmc_switch_mck_to_pllack+0x60>)
  404d2e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  404d30:	f012 0f08 	tst.w	r2, #8
  404d34:	d105      	bne.n	404d42 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  404d36:	3b01      	subs	r3, #1
  404d38:	d1f9      	bne.n	404d2e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  404d3a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  404d3c:	4770      	bx	lr
	return 0;
  404d3e:	2000      	movs	r0, #0
  404d40:	4770      	bx	lr
  404d42:	2000      	movs	r0, #0
  404d44:	4770      	bx	lr
  404d46:	bf00      	nop
  404d48:	400e0400 	.word	0x400e0400

00404d4c <pmc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  404d4c:	2801      	cmp	r0, #1
  404d4e:	d003      	beq.n	404d58 <pmc_switch_sclk_to_32kxtal+0xc>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  404d50:	4a05      	ldr	r2, [pc, #20]	; (404d68 <pmc_switch_sclk_to_32kxtal+0x1c>)
  404d52:	4b06      	ldr	r3, [pc, #24]	; (404d6c <pmc_switch_sclk_to_32kxtal+0x20>)
  404d54:	601a      	str	r2, [r3, #0]
  404d56:	4770      	bx	lr
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  404d58:	4a04      	ldr	r2, [pc, #16]	; (404d6c <pmc_switch_sclk_to_32kxtal+0x20>)
  404d5a:	6893      	ldr	r3, [r2, #8]
  404d5c:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  404d60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  404d64:	6093      	str	r3, [r2, #8]
  404d66:	e7f3      	b.n	404d50 <pmc_switch_sclk_to_32kxtal+0x4>
  404d68:	a5000008 	.word	0xa5000008
  404d6c:	400e1410 	.word	0x400e1410

00404d70 <pmc_osc_is_ready_32kxtal>:
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  404d70:	4b05      	ldr	r3, [pc, #20]	; (404d88 <pmc_osc_is_ready_32kxtal+0x18>)
  404d72:	695b      	ldr	r3, [r3, #20]
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  404d74:	f013 0f80 	tst.w	r3, #128	; 0x80
  404d78:	bf1d      	ittte	ne
  404d7a:	4b04      	ldrne	r3, [pc, #16]	; (404d8c <pmc_osc_is_ready_32kxtal+0x1c>)
  404d7c:	6e98      	ldrne	r0, [r3, #104]	; 0x68
  404d7e:	f3c0 10c0 	ubfxne	r0, r0, #7, #1
  404d82:	2000      	moveq	r0, #0
}
  404d84:	4770      	bx	lr
  404d86:	bf00      	nop
  404d88:	400e1410 	.word	0x400e1410
  404d8c:	400e0400 	.word	0x400e0400

00404d90 <pmc_osc_disable_fastrc>:
 * \brief Disable the internal fast RC.
 */
void pmc_osc_disable_fastrc(void)
{
	/* Disable Fast RC oscillator */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  404d90:	4a04      	ldr	r2, [pc, #16]	; (404da4 <pmc_osc_disable_fastrc+0x14>)
  404d92:	6a13      	ldr	r3, [r2, #32]
					~CKGR_MOR_MOSCRCF_Msk)
				| CKGR_MOR_KEY_PASSWD;
  404d94:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  404d98:	f023 0378 	bic.w	r3, r3, #120	; 0x78
  404d9c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  404da0:	6213      	str	r3, [r2, #32]
  404da2:	4770      	bx	lr
  404da4:	400e0400 	.word	0x400e0400

00404da8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  404da8:	b9c8      	cbnz	r0, 404dde <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  404daa:	4a11      	ldr	r2, [pc, #68]	; (404df0 <pmc_switch_mainck_to_xtal+0x48>)
  404dac:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  404dae:	0209      	lsls	r1, r1, #8
  404db0:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  404db2:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  404db6:	f023 0303 	bic.w	r3, r3, #3
  404dba:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  404dbe:	f043 0301 	orr.w	r3, r3, #1
  404dc2:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  404dc4:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  404dc6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  404dc8:	f013 0f01 	tst.w	r3, #1
  404dcc:	d0fb      	beq.n	404dc6 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  404dce:	4a08      	ldr	r2, [pc, #32]	; (404df0 <pmc_switch_mainck_to_xtal+0x48>)
  404dd0:	6a13      	ldr	r3, [r2, #32]
  404dd2:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  404dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  404dda:	6213      	str	r3, [r2, #32]
  404ddc:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  404dde:	4904      	ldr	r1, [pc, #16]	; (404df0 <pmc_switch_mainck_to_xtal+0x48>)
  404de0:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  404de2:	4a04      	ldr	r2, [pc, #16]	; (404df4 <pmc_switch_mainck_to_xtal+0x4c>)
  404de4:	401a      	ands	r2, r3
  404de6:	4b04      	ldr	r3, [pc, #16]	; (404df8 <pmc_switch_mainck_to_xtal+0x50>)
  404de8:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  404dea:	620b      	str	r3, [r1, #32]
  404dec:	4770      	bx	lr
  404dee:	bf00      	nop
  404df0:	400e0400 	.word	0x400e0400
  404df4:	fec8fffc 	.word	0xfec8fffc
  404df8:	01370002 	.word	0x01370002

00404dfc <pmc_osc_disable_xtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_osc_disable_xtal(uint32_t ul_bypass)
{
	/* Disable xtal oscillator */
	if (ul_bypass) {
  404dfc:	b948      	cbnz	r0, 404e12 <pmc_osc_disable_xtal+0x16>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  404dfe:	4a0a      	ldr	r2, [pc, #40]	; (404e28 <pmc_osc_disable_xtal+0x2c>)
  404e00:	6a13      	ldr	r3, [r2, #32]
  404e02:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  404e06:	f023 0301 	bic.w	r3, r3, #1
  404e0a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  404e0e:	6213      	str	r3, [r2, #32]
  404e10:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  404e12:	4a05      	ldr	r2, [pc, #20]	; (404e28 <pmc_osc_disable_xtal+0x2c>)
  404e14:	6a13      	ldr	r3, [r2, #32]
  404e16:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  404e1a:	f023 0302 	bic.w	r3, r3, #2
  404e1e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  404e22:	6213      	str	r3, [r2, #32]
  404e24:	4770      	bx	lr
  404e26:	bf00      	nop
  404e28:	400e0400 	.word	0x400e0400

00404e2c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  404e2c:	4b02      	ldr	r3, [pc, #8]	; (404e38 <pmc_osc_is_ready_mainck+0xc>)
  404e2e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  404e30:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  404e34:	4770      	bx	lr
  404e36:	bf00      	nop
  404e38:	400e0400 	.word	0x400e0400

00404e3c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  404e3c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  404e40:	4b01      	ldr	r3, [pc, #4]	; (404e48 <pmc_disable_pllack+0xc>)
  404e42:	629a      	str	r2, [r3, #40]	; 0x28
  404e44:	4770      	bx	lr
  404e46:	bf00      	nop
  404e48:	400e0400 	.word	0x400e0400

00404e4c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  404e4c:	4b02      	ldr	r3, [pc, #8]	; (404e58 <pmc_is_locked_pllack+0xc>)
  404e4e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  404e50:	f000 0002 	and.w	r0, r0, #2
  404e54:	4770      	bx	lr
  404e56:	bf00      	nop
  404e58:	400e0400 	.word	0x400e0400

00404e5c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  404e5c:	2822      	cmp	r0, #34	; 0x22
  404e5e:	d81e      	bhi.n	404e9e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  404e60:	281f      	cmp	r0, #31
  404e62:	d80c      	bhi.n	404e7e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  404e64:	4b11      	ldr	r3, [pc, #68]	; (404eac <pmc_enable_periph_clk+0x50>)
  404e66:	699a      	ldr	r2, [r3, #24]
  404e68:	2301      	movs	r3, #1
  404e6a:	4083      	lsls	r3, r0
  404e6c:	4393      	bics	r3, r2
  404e6e:	d018      	beq.n	404ea2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  404e70:	2301      	movs	r3, #1
  404e72:	fa03 f000 	lsl.w	r0, r3, r0
  404e76:	4b0d      	ldr	r3, [pc, #52]	; (404eac <pmc_enable_periph_clk+0x50>)
  404e78:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  404e7a:	2000      	movs	r0, #0
  404e7c:	4770      	bx	lr
		ul_id -= 32;
  404e7e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  404e80:	4b0a      	ldr	r3, [pc, #40]	; (404eac <pmc_enable_periph_clk+0x50>)
  404e82:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  404e86:	2301      	movs	r3, #1
  404e88:	4083      	lsls	r3, r0
  404e8a:	4393      	bics	r3, r2
  404e8c:	d00b      	beq.n	404ea6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  404e8e:	2301      	movs	r3, #1
  404e90:	fa03 f000 	lsl.w	r0, r3, r0
  404e94:	4b05      	ldr	r3, [pc, #20]	; (404eac <pmc_enable_periph_clk+0x50>)
  404e96:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  404e9a:	2000      	movs	r0, #0
  404e9c:	4770      	bx	lr
		return 1;
  404e9e:	2001      	movs	r0, #1
  404ea0:	4770      	bx	lr
	return 0;
  404ea2:	2000      	movs	r0, #0
  404ea4:	4770      	bx	lr
  404ea6:	2000      	movs	r0, #0
}
  404ea8:	4770      	bx	lr
  404eaa:	bf00      	nop
  404eac:	400e0400 	.word	0x400e0400

00404eb0 <pmc_disable_all_periph_clk>:
/**
 * \brief Disable all peripheral clocks.
 */
void pmc_disable_all_periph_clk(void)
{
	PMC->PMC_PCDR0 = PMC_MASK_STATUS0;
  404eb0:	f06f 0203 	mvn.w	r2, #3
  404eb4:	4b08      	ldr	r3, [pc, #32]	; (404ed8 <pmc_disable_all_periph_clk+0x28>)
  404eb6:	615a      	str	r2, [r3, #20]
	while ((PMC->PMC_PCSR0 & PMC_MASK_STATUS0) != 0);
  404eb8:	461a      	mov	r2, r3
  404eba:	6993      	ldr	r3, [r2, #24]
  404ebc:	f033 0303 	bics.w	r3, r3, #3
  404ec0:	d1fb      	bne.n	404eba <pmc_disable_all_periph_clk+0xa>

#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMV71 \
		|| SAMV70 || SAME70 || SAMS70)
	PMC->PMC_PCDR1 = PMC_MASK_STATUS1;
  404ec2:	f04f 32ff 	mov.w	r2, #4294967295
  404ec6:	4b04      	ldr	r3, [pc, #16]	; (404ed8 <pmc_disable_all_periph_clk+0x28>)
  404ec8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	while ((PMC->PMC_PCSR1 & PMC_MASK_STATUS1) != 0);
  404ecc:	461a      	mov	r2, r3
  404ece:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
  404ed2:	2b00      	cmp	r3, #0
  404ed4:	d1fb      	bne.n	404ece <pmc_disable_all_periph_clk+0x1e>
#endif
}
  404ed6:	4770      	bx	lr
  404ed8:	400e0400 	.word	0x400e0400

00404edc <pmc_enable_backupmode>:
#if (SAM4C || SAM4CM || SAM4CP)
	uint32_t tmp = SUPC->SUPC_MR & ~(SUPC_MR_BUPPOREN | SUPC_MR_KEY_Msk);
	SUPC->SUPC_MR = tmp | SUPC_MR_KEY_PASSWD;
	while (SUPC->SUPC_SR & SUPC_SR_BUPPORS);
#endif
	SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
  404edc:	4a05      	ldr	r2, [pc, #20]	; (404ef4 <pmc_enable_backupmode+0x18>)
  404ede:	6913      	ldr	r3, [r2, #16]
  404ee0:	f043 0304 	orr.w	r3, r3, #4
  404ee4:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  404ee6:	4a04      	ldr	r2, [pc, #16]	; (404ef8 <pmc_enable_backupmode+0x1c>)
  404ee8:	4b04      	ldr	r3, [pc, #16]	; (404efc <pmc_enable_backupmode+0x20>)
  404eea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("wfe");
  404eec:	bf20      	wfe
  __ASM volatile ("wfi");
  404eee:	bf30      	wfi
  404ef0:	4770      	bx	lr
  404ef2:	bf00      	nop
  404ef4:	e000ed00 	.word	0xe000ed00
  404ef8:	a5000004 	.word	0xa5000004
  404efc:	400e1410 	.word	0x400e1410

00404f00 <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  404f00:	b921      	cbnz	r1, 404f0c <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  404f02:	6843      	ldr	r3, [r0, #4]
  404f04:	f023 0301 	bic.w	r3, r3, #1
  404f08:	6043      	str	r3, [r0, #4]
  404f0a:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  404f0c:	6843      	ldr	r3, [r0, #4]
  404f0e:	f043 0301 	orr.w	r3, r3, #1
  404f12:	6043      	str	r3, [r0, #4]
  404f14:	4770      	bx	lr

00404f16 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  404f16:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  404f18:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  404f1a:	6884      	ldr	r4, [r0, #8]
  404f1c:	42a5      	cmp	r5, r4
  404f1e:	d003      	beq.n	404f28 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  404f20:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  404f22:	6884      	ldr	r4, [r0, #8]
  404f24:	42ac      	cmp	r4, r5
  404f26:	d1fb      	bne.n	404f20 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  404f28:	b161      	cbz	r1, 404f44 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  404f2a:	f3c4 5001 	ubfx	r0, r4, #20, #2
  404f2e:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  404f32:	f3c4 4003 	ubfx	r0, r4, #16, #4
  404f36:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  404f3a:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  404f3e:	bf18      	it	ne
  404f40:	300c      	addne	r0, #12
  404f42:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  404f44:	b142      	cbz	r2, 404f58 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  404f46:	f3c4 3102 	ubfx	r1, r4, #12, #3
  404f4a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  404f4e:	f3c4 2003 	ubfx	r0, r4, #8, #4
  404f52:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  404f56:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  404f58:	b143      	cbz	r3, 404f6c <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  404f5a:	f3c4 1202 	ubfx	r2, r4, #4, #3
  404f5e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  404f62:	f004 040f 	and.w	r4, r4, #15
  404f66:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  404f6a:	601c      	str	r4, [r3, #0]
	}
}
  404f6c:	bc30      	pop	{r4, r5}
  404f6e:	4770      	bx	lr

00404f70 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  404f70:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  404f72:	6844      	ldr	r4, [r0, #4]
  404f74:	f014 0f01 	tst.w	r4, #1
  404f78:	d005      	beq.n	404f86 <rtc_set_time+0x16>
		if (ul_hour > 12) {
  404f7a:	290c      	cmp	r1, #12
  404f7c:	d93d      	bls.n	404ffa <rtc_set_time+0x8a>
			ul_hour -= 12;
  404f7e:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  404f80:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  404f84:	e000      	b.n	404f88 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  404f86:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  404f88:	4c1d      	ldr	r4, [pc, #116]	; (405000 <rtc_set_time+0x90>)
  404f8a:	fba4 5603 	umull	r5, r6, r4, r3
  404f8e:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  404f90:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  404f94:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  404f98:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  404f9c:	fba4 6502 	umull	r6, r5, r4, r2
  404fa0:	08ed      	lsrs	r5, r5, #3
  404fa2:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  404fa6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  404faa:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  404fae:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  404fb2:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  404fb4:	fba4 4201 	umull	r4, r2, r4, r1
  404fb8:	08d2      	lsrs	r2, r2, #3
  404fba:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  404fbe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  404fc2:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  404fc6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  404fca:	6803      	ldr	r3, [r0, #0]
  404fcc:	f043 0301 	orr.w	r3, r3, #1
  404fd0:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  404fd2:	6983      	ldr	r3, [r0, #24]
  404fd4:	f013 0f01 	tst.w	r3, #1
  404fd8:	d0fb      	beq.n	404fd2 <rtc_set_time+0x62>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  404fda:	2301      	movs	r3, #1
  404fdc:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  404fde:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  404fe0:	6803      	ldr	r3, [r0, #0]
  404fe2:	f023 0301 	bic.w	r3, r3, #1
  404fe6:	6003      	str	r3, [r0, #0]
	p_rtc->RTC_SCCR |= RTC_SCCR_SECCLR;
  404fe8:	69c3      	ldr	r3, [r0, #28]
  404fea:	f043 0304 	orr.w	r3, r3, #4
  404fee:	61c3      	str	r3, [r0, #28]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  404ff0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  404ff2:	f000 0001 	and.w	r0, r0, #1
  404ff6:	bcf0      	pop	{r4, r5, r6, r7}
  404ff8:	4770      	bx	lr
	uint32_t ul_time = 0;
  404ffa:	2700      	movs	r7, #0
  404ffc:	e7c4      	b.n	404f88 <rtc_set_time+0x18>
  404ffe:	bf00      	nop
  405000:	cccccccd 	.word	0xcccccccd

00405004 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  405004:	b4f0      	push	{r4, r5, r6, r7}
  405006:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  405008:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  40500a:	68c4      	ldr	r4, [r0, #12]
  40500c:	42a5      	cmp	r5, r4
  40500e:	d003      	beq.n	405018 <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  405010:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  405012:	68c4      	ldr	r4, [r0, #12]
  405014:	42ac      	cmp	r4, r5
  405016:	d1fb      	bne.n	405010 <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
  405018:	b199      	cbz	r1, 405042 <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40501a:	f3c4 3003 	ubfx	r0, r4, #12, #4
  40501e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  405022:	f3c4 2703 	ubfx	r7, r4, #8, #4
  405026:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40502a:	f3c4 1002 	ubfx	r0, r4, #4, #3
  40502e:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  405032:	f004 000f 	and.w	r0, r4, #15
  405036:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40503a:	2564      	movs	r5, #100	; 0x64
  40503c:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  405040:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  405042:	b142      	cbz	r2, 405056 <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  405044:	f3c4 5000 	ubfx	r0, r4, #20, #1
  405048:	0081      	lsls	r1, r0, #2
  40504a:	4408      	add	r0, r1
  40504c:	f3c4 4103 	ubfx	r1, r4, #16, #4
  405050:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  405054:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  405056:	b143      	cbz	r3, 40506a <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  405058:	f3c4 7201 	ubfx	r2, r4, #28, #2
  40505c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  405060:	f3c4 6103 	ubfx	r1, r4, #24, #4
  405064:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  405068:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  40506a:	b116      	cbz	r6, 405072 <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  40506c:	f3c4 5442 	ubfx	r4, r4, #21, #3
  405070:	6034      	str	r4, [r6, #0]
	}
}
  405072:	bcf0      	pop	{r4, r5, r6, r7}
  405074:	4770      	bx	lr
	...

00405078 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  405078:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40507a:	4d2a      	ldr	r5, [pc, #168]	; (405124 <rtc_set_date+0xac>)
  40507c:	fba5 4603 	umull	r4, r6, r5, r3
  405080:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  405082:	9c03      	ldr	r4, [sp, #12]
  405084:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  405086:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  40508a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40508e:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  405092:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  405096:	fba5 6402 	umull	r6, r4, r5, r2
  40509a:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40509c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  4050a0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4050a4:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4050a8:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  4050ac:	4b1e      	ldr	r3, [pc, #120]	; (405128 <rtc_set_date+0xb0>)
  4050ae:	fba3 4301 	umull	r4, r3, r3, r1
  4050b2:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4050b4:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  4050b8:	4b1c      	ldr	r3, [pc, #112]	; (40512c <rtc_set_date+0xb4>)
  4050ba:	fba3 4301 	umull	r4, r3, r3, r1
  4050be:	095b      	lsrs	r3, r3, #5
  4050c0:	fba5 6403 	umull	r6, r4, r5, r3
  4050c4:	08e4      	lsrs	r4, r4, #3
  4050c6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4050ca:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4050ce:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  4050d0:	fba5 4301 	umull	r4, r3, r5, r1
  4050d4:	08db      	lsrs	r3, r3, #3
  4050d6:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  4050da:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4050de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  4050e2:	fba5 1503 	umull	r1, r5, r5, r3
  4050e6:	08ed      	lsrs	r5, r5, #3
  4050e8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4050ec:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4050f0:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  4050f4:	6803      	ldr	r3, [r0, #0]
  4050f6:	f043 0302 	orr.w	r3, r3, #2
  4050fa:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  4050fc:	6983      	ldr	r3, [r0, #24]
  4050fe:	f013 0f01 	tst.w	r3, #1
  405102:	d0fb      	beq.n	4050fc <rtc_set_date+0x84>

	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  405104:	2301      	movs	r3, #1
  405106:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  405108:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  40510a:	6803      	ldr	r3, [r0, #0]
  40510c:	f023 0302 	bic.w	r3, r3, #2
  405110:	6003      	str	r3, [r0, #0]
	/* Clear SECENV in SCCR */
	p_rtc->RTC_SCCR |= RTC_SCCR_SECCLR;
  405112:	69c3      	ldr	r3, [r0, #28]
  405114:	f043 0304 	orr.w	r3, r3, #4
  405118:	61c3      	str	r3, [r0, #28]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  40511a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  40511c:	f000 0002 	and.w	r0, r0, #2
  405120:	bc70      	pop	{r4, r5, r6}
  405122:	4770      	bx	lr
  405124:	cccccccd 	.word	0xcccccccd
  405128:	10624dd3 	.word	0x10624dd3
  40512c:	51eb851f 	.word	0x51eb851f

00405130 <rtc_set_calibration>:
 * \param ul_correction Correction value.
 * \param ul_range_ppm Low/high range correction.
 */
void rtc_set_calibration(Rtc *p_rtc, uint32_t ul_direction_ppm,
		uint32_t ul_correction, uint32_t ul_range_ppm)
{
  405130:	b410      	push	{r4}
	uint32_t ul_temp;

	ul_temp = p_rtc->RTC_MR;
  405132:	6844      	ldr	r4, [r0, #4]

	if (ul_direction_ppm) {
  405134:	b159      	cbz	r1, 40514e <rtc_set_calibration+0x1e>
		ul_temp |= RTC_MR_NEGPPM;
  405136:	f044 0410 	orr.w	r4, r4, #16
	} else {
		ul_temp &= (~RTC_MR_NEGPPM);
	}

	ul_temp |= RTC_MR_CORRECTION(ul_correction);
  40513a:	0212      	lsls	r2, r2, #8
  40513c:	f402 42fe 	and.w	r2, r2, #32512	; 0x7f00
  405140:	4322      	orrs	r2, r4

	if (ul_range_ppm) {
  405142:	b93b      	cbnz	r3, 405154 <rtc_set_calibration+0x24>
		ul_temp |= RTC_MR_HIGHPPM;
	} else {
		ul_temp &= (~RTC_MR_HIGHPPM);
  405144:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
	}

	p_rtc->RTC_MR = ul_temp;
  405148:	6042      	str	r2, [r0, #4]
}
  40514a:	bc10      	pop	{r4}
  40514c:	4770      	bx	lr
		ul_temp &= (~RTC_MR_NEGPPM);
  40514e:	f024 0410 	bic.w	r4, r4, #16
  405152:	e7f2      	b.n	40513a <rtc_set_calibration+0xa>
		ul_temp |= RTC_MR_HIGHPPM;
  405154:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  405158:	e7f6      	b.n	405148 <rtc_set_calibration+0x18>

0040515a <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  40515a:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  40515c:	23ac      	movs	r3, #172	; 0xac
  40515e:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  405160:	680b      	ldr	r3, [r1, #0]
  405162:	684a      	ldr	r2, [r1, #4]
  405164:	fbb3 f3f2 	udiv	r3, r3, r2
  405168:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  40516a:	1e5c      	subs	r4, r3, #1
  40516c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  405170:	4294      	cmp	r4, r2
  405172:	d80b      	bhi.n	40518c <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
  405174:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  405176:	688b      	ldr	r3, [r1, #8]
  405178:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  40517a:	f240 2302 	movw	r3, #514	; 0x202
  40517e:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  405182:	2350      	movs	r3, #80	; 0x50
  405184:	6003      	str	r3, [r0, #0]

	return 0;
  405186:	2000      	movs	r0, #0
}
  405188:	bc10      	pop	{r4}
  40518a:	4770      	bx	lr
		return 1;
  40518c:	2001      	movs	r0, #1
  40518e:	e7fb      	b.n	405188 <uart_init+0x2e>

00405190 <uart_enable>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable(Uart *p_uart)
{
	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  405190:	2350      	movs	r3, #80	; 0x50
  405192:	6003      	str	r3, [r0, #0]
  405194:	4770      	bx	lr

00405196 <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
  405196:	6081      	str	r1, [r0, #8]
  405198:	4770      	bx	lr

0040519a <uart_get_status>:
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
	return p_uart->UART_SR;
  40519a:	6940      	ldr	r0, [r0, #20]
}
  40519c:	4770      	bx	lr

0040519e <uart_reset_status>:
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_reset_status(Uart *p_uart)
{
	p_uart->UART_CR = UART_CR_RSTSTA;
  40519e:	f44f 7380 	mov.w	r3, #256	; 0x100
  4051a2:	6003      	str	r3, [r0, #0]
  4051a4:	4770      	bx	lr

004051a6 <uart_is_tx_empty>:
 * \retval 1 Transmitter is empty.
 * \retval 0 Transmitter is not empty.
 */
uint32_t uart_is_tx_empty(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_TXEMPTY) > 0;
  4051a6:	6940      	ldr	r0, [r0, #20]
}
  4051a8:	f3c0 2040 	ubfx	r0, r0, #9, #1
  4051ac:	4770      	bx	lr

004051ae <uart_is_rx_ready>:
 * \retval 1 One data has been received.
 * \retval 0 No data has been received.
 */
uint32_t uart_is_rx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_RXRDY) > 0;
  4051ae:	6940      	ldr	r0, [r0, #20]
}
  4051b0:	f000 0001 	and.w	r0, r0, #1
  4051b4:	4770      	bx	lr

004051b6 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4051b6:	6943      	ldr	r3, [r0, #20]
  4051b8:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4051bc:	bf1a      	itte	ne
  4051be:	61c1      	strne	r1, [r0, #28]
	return 0;
  4051c0:	2000      	movne	r0, #0
		return 1;
  4051c2:	2001      	moveq	r0, #1
}
  4051c4:	4770      	bx	lr

004051c6 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4051c6:	6943      	ldr	r3, [r0, #20]
  4051c8:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4051cc:	bf1d      	ittte	ne
  4051ce:	6983      	ldrne	r3, [r0, #24]
  4051d0:	700b      	strbne	r3, [r1, #0]
	return 0;
  4051d2:	2000      	movne	r0, #0
		return 1;
  4051d4:	2001      	moveq	r0, #1
}
  4051d6:	4770      	bx	lr

004051d8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4051d8:	e7fe      	b.n	4051d8 <Dummy_Handler>
	...

004051dc <Reset_Handler>:
{
  4051dc:	b508      	push	{r3, lr}
	if (pSrc > pDest) {
  4051de:	4b21      	ldr	r3, [pc, #132]	; (405264 <Reset_Handler+0x88>)
  4051e0:	4a21      	ldr	r2, [pc, #132]	; (405268 <Reset_Handler+0x8c>)
  4051e2:	429a      	cmp	r2, r3
  4051e4:	d928      	bls.n	405238 <Reset_Handler+0x5c>
		for (; pDest < &_erelocate;) {
  4051e6:	4b21      	ldr	r3, [pc, #132]	; (40526c <Reset_Handler+0x90>)
  4051e8:	4a1e      	ldr	r2, [pc, #120]	; (405264 <Reset_Handler+0x88>)
  4051ea:	429a      	cmp	r2, r3
  4051ec:	d20c      	bcs.n	405208 <Reset_Handler+0x2c>
  4051ee:	3b01      	subs	r3, #1
  4051f0:	1a9b      	subs	r3, r3, r2
  4051f2:	f023 0303 	bic.w	r3, r3, #3
  4051f6:	3304      	adds	r3, #4
  4051f8:	4413      	add	r3, r2
  4051fa:	491b      	ldr	r1, [pc, #108]	; (405268 <Reset_Handler+0x8c>)
			*pDest++ = *pSrc++;
  4051fc:	f851 0b04 	ldr.w	r0, [r1], #4
  405200:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  405204:	429a      	cmp	r2, r3
  405206:	d1f9      	bne.n	4051fc <Reset_Handler+0x20>
  __ASM volatile ("nop");
  405208:	bf00      	nop
	for (pDest = &_szero; pDest < &_ezero;) {
  40520a:	4b19      	ldr	r3, [pc, #100]	; (405270 <Reset_Handler+0x94>)
  40520c:	4a19      	ldr	r2, [pc, #100]	; (405274 <Reset_Handler+0x98>)
  40520e:	429a      	cmp	r2, r3
  405210:	d20a      	bcs.n	405228 <Reset_Handler+0x4c>
  405212:	3b01      	subs	r3, #1
  405214:	1a9b      	subs	r3, r3, r2
  405216:	f023 0303 	bic.w	r3, r3, #3
  40521a:	3304      	adds	r3, #4
  40521c:	4413      	add	r3, r2
		*pDest++ = 0;
  40521e:	2100      	movs	r1, #0
  405220:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  405224:	429a      	cmp	r2, r3
  405226:	d1fb      	bne.n	405220 <Reset_Handler+0x44>
	SCB->VTOR = ((uint32_t) pSrc);
  405228:	4b13      	ldr	r3, [pc, #76]	; (405278 <Reset_Handler+0x9c>)
  40522a:	4a14      	ldr	r2, [pc, #80]	; (40527c <Reset_Handler+0xa0>)
  40522c:	609a      	str	r2, [r3, #8]
	__libc_init_array();
  40522e:	4b14      	ldr	r3, [pc, #80]	; (405280 <Reset_Handler+0xa4>)
  405230:	4798      	blx	r3
	main();
  405232:	4b14      	ldr	r3, [pc, #80]	; (405284 <Reset_Handler+0xa8>)
  405234:	4798      	blx	r3
  405236:	e7fe      	b.n	405236 <Reset_Handler+0x5a>
	} else if (pSrc < pDest) {
  405238:	4b0a      	ldr	r3, [pc, #40]	; (405264 <Reset_Handler+0x88>)
  40523a:	4a0b      	ldr	r2, [pc, #44]	; (405268 <Reset_Handler+0x8c>)
  40523c:	429a      	cmp	r2, r3
  40523e:	d2e3      	bcs.n	405208 <Reset_Handler+0x2c>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  405240:	4b0a      	ldr	r3, [pc, #40]	; (40526c <Reset_Handler+0x90>)
  405242:	4808      	ldr	r0, [pc, #32]	; (405264 <Reset_Handler+0x88>)
  405244:	1a18      	subs	r0, r3, r0
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  405246:	4611      	mov	r1, r2
  405248:	3a04      	subs	r2, #4
  40524a:	4402      	add	r2, r0
		for (;nb_bytes;nb_bytes -= 4) {
  40524c:	2800      	cmp	r0, #0
  40524e:	d0db      	beq.n	405208 <Reset_Handler+0x2c>
  405250:	f1c1 0104 	rsb	r1, r1, #4
			*pDest-- = *pSrc--;
  405254:	f852 0904 	ldr.w	r0, [r2], #-4
  405258:	f843 0d04 	str.w	r0, [r3, #-4]!
		for (;nb_bytes;nb_bytes -= 4) {
  40525c:	42ca      	cmn	r2, r1
  40525e:	d1f9      	bne.n	405254 <Reset_Handler+0x78>
  405260:	e7d2      	b.n	405208 <Reset_Handler+0x2c>
  405262:	bf00      	nop
  405264:	20000000 	.word	0x20000000
  405268:	0040f66c 	.word	0x0040f66c
  40526c:	20000a70 	.word	0x20000a70
  405270:	2000203c 	.word	0x2000203c
  405274:	20000a70 	.word	0x20000a70
  405278:	e000ed00 	.word	0xe000ed00
  40527c:	00400000 	.word	0x00400000
  405280:	00409485 	.word	0x00409485
  405284:	00407d15 	.word	0x00407d15

00405288 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  405288:	4b3c      	ldr	r3, [pc, #240]	; (40537c <SystemCoreClockUpdate+0xf4>)
  40528a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40528c:	f003 0303 	and.w	r3, r3, #3
  405290:	2b03      	cmp	r3, #3
  405292:	d80e      	bhi.n	4052b2 <SystemCoreClockUpdate+0x2a>
  405294:	e8df f003 	tbb	[pc, r3]
  405298:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  40529c:	4b38      	ldr	r3, [pc, #224]	; (405380 <SystemCoreClockUpdate+0xf8>)
  40529e:	695b      	ldr	r3, [r3, #20]
  4052a0:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4052a4:	bf14      	ite	ne
  4052a6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4052aa:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4052ae:	4b35      	ldr	r3, [pc, #212]	; (405384 <SystemCoreClockUpdate+0xfc>)
  4052b0:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4052b2:	4b32      	ldr	r3, [pc, #200]	; (40537c <SystemCoreClockUpdate+0xf4>)
  4052b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4052b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4052ba:	2b70      	cmp	r3, #112	; 0x70
  4052bc:	d055      	beq.n	40536a <SystemCoreClockUpdate+0xe2>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4052be:	4b2f      	ldr	r3, [pc, #188]	; (40537c <SystemCoreClockUpdate+0xf4>)
  4052c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		SystemCoreClock >>=
  4052c2:	4930      	ldr	r1, [pc, #192]	; (405384 <SystemCoreClockUpdate+0xfc>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4052c4:	f3c2 1202 	ubfx	r2, r2, #4, #3
		SystemCoreClock >>=
  4052c8:	680b      	ldr	r3, [r1, #0]
  4052ca:	40d3      	lsrs	r3, r2
  4052cc:	600b      	str	r3, [r1, #0]
  4052ce:	4770      	bx	lr
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4052d0:	4b2a      	ldr	r3, [pc, #168]	; (40537c <SystemCoreClockUpdate+0xf4>)
  4052d2:	6a1b      	ldr	r3, [r3, #32]
  4052d4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4052d8:	d003      	beq.n	4052e2 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4052da:	4a2b      	ldr	r2, [pc, #172]	; (405388 <SystemCoreClockUpdate+0x100>)
  4052dc:	4b29      	ldr	r3, [pc, #164]	; (405384 <SystemCoreClockUpdate+0xfc>)
  4052de:	601a      	str	r2, [r3, #0]
  4052e0:	e7e7      	b.n	4052b2 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4052e2:	4a2a      	ldr	r2, [pc, #168]	; (40538c <SystemCoreClockUpdate+0x104>)
  4052e4:	4b27      	ldr	r3, [pc, #156]	; (405384 <SystemCoreClockUpdate+0xfc>)
  4052e6:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4052e8:	4b24      	ldr	r3, [pc, #144]	; (40537c <SystemCoreClockUpdate+0xf4>)
  4052ea:	6a1b      	ldr	r3, [r3, #32]
  4052ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4052f0:	2b10      	cmp	r3, #16
  4052f2:	d005      	beq.n	405300 <SystemCoreClockUpdate+0x78>
  4052f4:	2b20      	cmp	r3, #32
  4052f6:	d1dc      	bne.n	4052b2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4052f8:	4a23      	ldr	r2, [pc, #140]	; (405388 <SystemCoreClockUpdate+0x100>)
  4052fa:	4b22      	ldr	r3, [pc, #136]	; (405384 <SystemCoreClockUpdate+0xfc>)
  4052fc:	601a      	str	r2, [r3, #0]
			break;
  4052fe:	e7d8      	b.n	4052b2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  405300:	4a23      	ldr	r2, [pc, #140]	; (405390 <SystemCoreClockUpdate+0x108>)
  405302:	4b20      	ldr	r3, [pc, #128]	; (405384 <SystemCoreClockUpdate+0xfc>)
  405304:	601a      	str	r2, [r3, #0]
			break;
  405306:	e7d4      	b.n	4052b2 <SystemCoreClockUpdate+0x2a>
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  405308:	4b1c      	ldr	r3, [pc, #112]	; (40537c <SystemCoreClockUpdate+0xf4>)
  40530a:	6a1b      	ldr	r3, [r3, #32]
  40530c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  405310:	d018      	beq.n	405344 <SystemCoreClockUpdate+0xbc>
				SystemCoreClock = CHIP_FREQ_XTAL;
  405312:	4a1d      	ldr	r2, [pc, #116]	; (405388 <SystemCoreClockUpdate+0x100>)
  405314:	4b1b      	ldr	r3, [pc, #108]	; (405384 <SystemCoreClockUpdate+0xfc>)
  405316:	601a      	str	r2, [r3, #0]
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  405318:	4b18      	ldr	r3, [pc, #96]	; (40537c <SystemCoreClockUpdate+0xf4>)
  40531a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40531c:	f003 0303 	and.w	r3, r3, #3
  405320:	2b02      	cmp	r3, #2
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  405322:	4a16      	ldr	r2, [pc, #88]	; (40537c <SystemCoreClockUpdate+0xf4>)
  405324:	bf07      	ittee	eq
  405326:	6a91      	ldreq	r1, [r2, #40]	; 0x28
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  405328:	6a92      	ldreq	r2, [r2, #40]	; 0x28
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40532a:	6ad1      	ldrne	r1, [r2, #44]	; 0x2c
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40532c:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  40532e:	4815      	ldr	r0, [pc, #84]	; (405384 <SystemCoreClockUpdate+0xfc>)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  405330:	f3c1 410a 	ubfx	r1, r1, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  405334:	6803      	ldr	r3, [r0, #0]
  405336:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_DIVB_Pos));
  40533a:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40533c:	fbb3 f3f2 	udiv	r3, r3, r2
  405340:	6003      	str	r3, [r0, #0]
  405342:	e7b6      	b.n	4052b2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  405344:	4a11      	ldr	r2, [pc, #68]	; (40538c <SystemCoreClockUpdate+0x104>)
  405346:	4b0f      	ldr	r3, [pc, #60]	; (405384 <SystemCoreClockUpdate+0xfc>)
  405348:	601a      	str	r2, [r3, #0]
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40534a:	4b0c      	ldr	r3, [pc, #48]	; (40537c <SystemCoreClockUpdate+0xf4>)
  40534c:	6a1b      	ldr	r3, [r3, #32]
  40534e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405352:	2b10      	cmp	r3, #16
  405354:	d005      	beq.n	405362 <SystemCoreClockUpdate+0xda>
  405356:	2b20      	cmp	r3, #32
  405358:	d1de      	bne.n	405318 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40535a:	4a0b      	ldr	r2, [pc, #44]	; (405388 <SystemCoreClockUpdate+0x100>)
  40535c:	4b09      	ldr	r3, [pc, #36]	; (405384 <SystemCoreClockUpdate+0xfc>)
  40535e:	601a      	str	r2, [r3, #0]
					break;
  405360:	e7da      	b.n	405318 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  405362:	4a0b      	ldr	r2, [pc, #44]	; (405390 <SystemCoreClockUpdate+0x108>)
  405364:	4b07      	ldr	r3, [pc, #28]	; (405384 <SystemCoreClockUpdate+0xfc>)
  405366:	601a      	str	r2, [r3, #0]
					break;
  405368:	e7d6      	b.n	405318 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  40536a:	4a06      	ldr	r2, [pc, #24]	; (405384 <SystemCoreClockUpdate+0xfc>)
  40536c:	6813      	ldr	r3, [r2, #0]
  40536e:	4909      	ldr	r1, [pc, #36]	; (405394 <SystemCoreClockUpdate+0x10c>)
  405370:	fba1 1303 	umull	r1, r3, r1, r3
  405374:	085b      	lsrs	r3, r3, #1
  405376:	6013      	str	r3, [r2, #0]
  405378:	4770      	bx	lr
  40537a:	bf00      	nop
  40537c:	400e0400 	.word	0x400e0400
  405380:	400e1410 	.word	0x400e1410
  405384:	200000bc 	.word	0x200000bc
  405388:	00b71b00 	.word	0x00b71b00
  40538c:	003d0900 	.word	0x003d0900
  405390:	007a1200 	.word	0x007a1200
  405394:	aaaaaaab 	.word	0xaaaaaaab

00405398 <system_init_flash>:
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  405398:	4b12      	ldr	r3, [pc, #72]	; (4053e4 <system_init_flash+0x4c>)
  40539a:	4298      	cmp	r0, r3
  40539c:	d911      	bls.n	4053c2 <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  40539e:	4b12      	ldr	r3, [pc, #72]	; (4053e8 <system_init_flash+0x50>)
  4053a0:	4298      	cmp	r0, r3
  4053a2:	d913      	bls.n	4053cc <system_init_flash+0x34>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  4053a4:	4b11      	ldr	r3, [pc, #68]	; (4053ec <system_init_flash+0x54>)
  4053a6:	4298      	cmp	r0, r3
  4053a8:	d914      	bls.n	4053d4 <system_init_flash+0x3c>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4053aa:	4b11      	ldr	r3, [pc, #68]	; (4053f0 <system_init_flash+0x58>)
  4053ac:	4298      	cmp	r0, r3
  4053ae:	d915      	bls.n	4053dc <system_init_flash+0x44>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4053b0:	4b10      	ldr	r3, [pc, #64]	; (4053f4 <system_init_flash+0x5c>)
  4053b2:	4298      	cmp	r0, r3
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4053b4:	bf94      	ite	ls
  4053b6:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4053ba:	4a0f      	ldrhi	r2, [pc, #60]	; (4053f8 <system_init_flash+0x60>)
  4053bc:	4b0f      	ldr	r3, [pc, #60]	; (4053fc <system_init_flash+0x64>)
  4053be:	601a      	str	r2, [r3, #0]
  4053c0:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4053c2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4053c6:	4b0d      	ldr	r3, [pc, #52]	; (4053fc <system_init_flash+0x64>)
  4053c8:	601a      	str	r2, [r3, #0]
  4053ca:	4770      	bx	lr
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4053cc:	4a0c      	ldr	r2, [pc, #48]	; (405400 <system_init_flash+0x68>)
  4053ce:	4b0b      	ldr	r3, [pc, #44]	; (4053fc <system_init_flash+0x64>)
  4053d0:	601a      	str	r2, [r3, #0]
  4053d2:	4770      	bx	lr
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4053d4:	4a0b      	ldr	r2, [pc, #44]	; (405404 <system_init_flash+0x6c>)
  4053d6:	4b09      	ldr	r3, [pc, #36]	; (4053fc <system_init_flash+0x64>)
  4053d8:	601a      	str	r2, [r3, #0]
  4053da:	4770      	bx	lr
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4053dc:	4a0a      	ldr	r2, [pc, #40]	; (405408 <system_init_flash+0x70>)
  4053de:	4b07      	ldr	r3, [pc, #28]	; (4053fc <system_init_flash+0x64>)
  4053e0:	601a      	str	r2, [r3, #0]
  4053e2:	4770      	bx	lr
  4053e4:	01312cff 	.word	0x01312cff
  4053e8:	026259ff 	.word	0x026259ff
  4053ec:	039386ff 	.word	0x039386ff
  4053f0:	04c4b3ff 	.word	0x04c4b3ff
  4053f4:	05f5e0ff 	.word	0x05f5e0ff
  4053f8:	04000500 	.word	0x04000500
  4053fc:	400e0a00 	.word	0x400e0a00
  405400:	04000100 	.word	0x04000100
  405404:	04000200 	.word	0x04000200
  405408:	04000300 	.word	0x04000300

0040540c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  40540c:	4b0a      	ldr	r3, [pc, #40]	; (405438 <_sbrk+0x2c>)
  40540e:	681b      	ldr	r3, [r3, #0]
  405410:	b153      	cbz	r3, 405428 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  405412:	4b09      	ldr	r3, [pc, #36]	; (405438 <_sbrk+0x2c>)
  405414:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  405416:	181a      	adds	r2, r3, r0
  405418:	4908      	ldr	r1, [pc, #32]	; (40543c <_sbrk+0x30>)
  40541a:	4291      	cmp	r1, r2
  40541c:	db08      	blt.n	405430 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  40541e:	4610      	mov	r0, r2
  405420:	4a05      	ldr	r2, [pc, #20]	; (405438 <_sbrk+0x2c>)
  405422:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  405424:	4618      	mov	r0, r3
  405426:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  405428:	4a05      	ldr	r2, [pc, #20]	; (405440 <_sbrk+0x34>)
  40542a:	4b03      	ldr	r3, [pc, #12]	; (405438 <_sbrk+0x2c>)
  40542c:	601a      	str	r2, [r3, #0]
  40542e:	e7f0      	b.n	405412 <_sbrk+0x6>
		return (caddr_t) -1;	
  405430:	f04f 30ff 	mov.w	r0, #4294967295
}
  405434:	4770      	bx	lr
  405436:	bf00      	nop
  405438:	20000e88 	.word	0x20000e88
  40543c:	2001fffc 	.word	0x2001fffc
  405440:	20005040 	.word	0x20005040

00405444 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
  405444:	b510      	push	{r4, lr}
  405446:	4604      	mov	r4, r0
	int i;
	Ctrl_status mem_status;

#if (SAM3S || SAM3U || SAM3N || SAM3XA || SAM4S)
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
  405448:	2100      	movs	r1, #0
  40544a:	480f      	ldr	r0, [pc, #60]	; (405488 <disk_initialize+0x44>)
  40544c:	4b0f      	ldr	r3, [pc, #60]	; (40548c <disk_initialize+0x48>)
  40544e:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
  405450:	2c01      	cmp	r4, #1
  405452:	d901      	bls.n	405458 <disk_initialize+0x14>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
  405454:	2001      	movs	r0, #1
  405456:	bd10      	pop	{r4, pc}
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
		mem_status = mem_test_unit_ready(drv);
  405458:	4620      	mov	r0, r4
  40545a:	4b0d      	ldr	r3, [pc, #52]	; (405490 <disk_initialize+0x4c>)
  40545c:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  40545e:	2803      	cmp	r0, #3
  405460:	d106      	bne.n	405470 <disk_initialize+0x2c>
		mem_status = mem_test_unit_ready(drv);
  405462:	4620      	mov	r0, r4
  405464:	4b0a      	ldr	r3, [pc, #40]	; (405490 <disk_initialize+0x4c>)
  405466:	4798      	blx	r3
		if (CTRL_BUSY != mem_status) {
  405468:	2803      	cmp	r0, #3
  40546a:	d101      	bne.n	405470 <disk_initialize+0x2c>
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
		return STA_NOINIT;
  40546c:	2001      	movs	r0, #1
  40546e:	bd10      	pop	{r4, pc}
	if (mem_status != CTRL_GOOD) {
  405470:	b938      	cbnz	r0, 405482 <disk_initialize+0x3e>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
  405472:	4620      	mov	r0, r4
  405474:	4b07      	ldr	r3, [pc, #28]	; (405494 <disk_initialize+0x50>)
  405476:	4798      	blx	r3
  405478:	2800      	cmp	r0, #0
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
  40547a:	bf14      	ite	ne
  40547c:	2004      	movne	r0, #4
  40547e:	2000      	moveq	r0, #0
  405480:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
  405482:	2001      	movs	r0, #1
}
  405484:	bd10      	pop	{r4, pc}
  405486:	bf00      	nop
  405488:	400e1460 	.word	0x400e1460
  40548c:	00404f01 	.word	0x00404f01
  405490:	004042d1 	.word	0x004042d1
  405494:	00404301 	.word	0x00404301

00405498 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
  405498:	b508      	push	{r3, lr}
	switch (mem_test_unit_ready(drv)) {
  40549a:	4b05      	ldr	r3, [pc, #20]	; (4054b0 <disk_status+0x18>)
  40549c:	4798      	blx	r3
  40549e:	b120      	cbz	r0, 4054aa <disk_status+0x12>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
  4054a0:	2802      	cmp	r0, #2
  4054a2:	bf0c      	ite	eq
  4054a4:	2003      	moveq	r0, #3
  4054a6:	2001      	movne	r0, #1
  4054a8:	bd08      	pop	{r3, pc}
		return 0;
  4054aa:	2000      	movs	r0, #0
	}
}
  4054ac:	bd08      	pop	{r3, pc}
  4054ae:	bf00      	nop
  4054b0:	004042d1 	.word	0x004042d1

004054b4 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
  4054b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4054b8:	b083      	sub	sp, #12
  4054ba:	4680      	mov	r8, r0
  4054bc:	460d      	mov	r5, r1
  4054be:	4614      	mov	r4, r2
  4054c0:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  4054c2:	4b15      	ldr	r3, [pc, #84]	; (405518 <disk_read+0x64>)
  4054c4:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  4054c6:	b918      	cbnz	r0, 4054d0 <disk_read+0x1c>
		return RES_ERROR;
  4054c8:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  4054ca:	b003      	add	sp, #12
  4054cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4054d0:	4606      	mov	r6, r0
	mem_read_capacity(drv, &ul_last_sector_num);
  4054d2:	a901      	add	r1, sp, #4
  4054d4:	4640      	mov	r0, r8
  4054d6:	4b11      	ldr	r3, [pc, #68]	; (40551c <disk_read+0x68>)
  4054d8:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  4054da:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
  4054dc:	fb06 4207 	mla	r2, r6, r7, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  4054e0:	9b01      	ldr	r3, [sp, #4]
  4054e2:	fb03 6306 	mla	r3, r3, r6, r6
	if ((sector + count * uc_sector_size) >
  4054e6:	429a      	cmp	r2, r3
  4054e8:	d901      	bls.n	4054ee <disk_read+0x3a>
		return RES_PARERR;
  4054ea:	2004      	movs	r0, #4
  4054ec:	e7ed      	b.n	4054ca <disk_read+0x16>
	for (i = 0; i < count; i++) {
  4054ee:	46ba      	mov	sl, r7
  4054f0:	b177      	cbz	r7, 405510 <disk_read+0x5c>
  4054f2:	0276      	lsls	r6, r6, #9
  4054f4:	2700      	movs	r7, #0
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  4054f6:	f8df b028 	ldr.w	fp, [pc, #40]	; 405520 <disk_read+0x6c>
  4054fa:	462a      	mov	r2, r5
  4054fc:	4621      	mov	r1, r4
  4054fe:	4640      	mov	r0, r8
  405500:	47d8      	blx	fp
  405502:	b938      	cbnz	r0, 405514 <disk_read+0x60>
	for (i = 0; i < count; i++) {
  405504:	3701      	adds	r7, #1
  405506:	444c      	add	r4, r9
  405508:	4435      	add	r5, r6
  40550a:	4557      	cmp	r7, sl
  40550c:	d1f5      	bne.n	4054fa <disk_read+0x46>
  40550e:	e7dc      	b.n	4054ca <disk_read+0x16>
	return RES_OK;
  405510:	2000      	movs	r0, #0
  405512:	e7da      	b.n	4054ca <disk_read+0x16>
			return RES_ERROR;
  405514:	2001      	movs	r0, #1
  405516:	e7d8      	b.n	4054ca <disk_read+0x16>
  405518:	004042f9 	.word	0x004042f9
  40551c:	004042e5 	.word	0x004042e5
  405520:	00404315 	.word	0x00404315

00405524 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
  405524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405528:	b083      	sub	sp, #12
  40552a:	4680      	mov	r8, r0
  40552c:	460d      	mov	r5, r1
  40552e:	4614      	mov	r4, r2
  405530:	461f      	mov	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  405532:	4b15      	ldr	r3, [pc, #84]	; (405588 <disk_write+0x64>)
  405534:	4798      	blx	r3
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  405536:	b918      	cbnz	r0, 405540 <disk_write+0x1c>
		return RES_ERROR;
  405538:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  40553a:	b003      	add	sp, #12
  40553c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405540:	4606      	mov	r6, r0
	mem_read_capacity(drv, &ul_last_sector_num);
  405542:	a901      	add	r1, sp, #4
  405544:	4640      	mov	r0, r8
  405546:	4b11      	ldr	r3, [pc, #68]	; (40558c <disk_write+0x68>)
  405548:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
  40554a:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
  40554c:	fb06 4207 	mla	r2, r6, r7, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
  405550:	9b01      	ldr	r3, [sp, #4]
  405552:	fb03 6306 	mla	r3, r3, r6, r6
	if ((sector + count * uc_sector_size) >
  405556:	429a      	cmp	r2, r3
  405558:	d901      	bls.n	40555e <disk_write+0x3a>
		return RES_PARERR;
  40555a:	2004      	movs	r0, #4
  40555c:	e7ed      	b.n	40553a <disk_write+0x16>
	for (i = 0; i < count; i++) {
  40555e:	46ba      	mov	sl, r7
  405560:	b177      	cbz	r7, 405580 <disk_write+0x5c>
  405562:	0276      	lsls	r6, r6, #9
  405564:	2700      	movs	r7, #0
		if (ram_2_memory(drv, sector + uc_sector_size * i,
  405566:	f8df b028 	ldr.w	fp, [pc, #40]	; 405590 <disk_write+0x6c>
  40556a:	462a      	mov	r2, r5
  40556c:	4621      	mov	r1, r4
  40556e:	4640      	mov	r0, r8
  405570:	47d8      	blx	fp
  405572:	b938      	cbnz	r0, 405584 <disk_write+0x60>
	for (i = 0; i < count; i++) {
  405574:	3701      	adds	r7, #1
  405576:	444c      	add	r4, r9
  405578:	4435      	add	r5, r6
  40557a:	4557      	cmp	r7, sl
  40557c:	d1f5      	bne.n	40556a <disk_write+0x46>
  40557e:	e7dc      	b.n	40553a <disk_write+0x16>
	return RES_OK;
  405580:	2000      	movs	r0, #0
  405582:	e7da      	b.n	40553a <disk_write+0x16>
			return RES_ERROR;
  405584:	2001      	movs	r0, #1
  405586:	e7d8      	b.n	40553a <disk_write+0x16>
  405588:	004042f9 	.word	0x004042f9
  40558c:	004042e5 	.word	0x004042e5
  405590:	0040432d 	.word	0x0040432d

00405594 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
  405594:	b510      	push	{r4, lr}
  405596:	b082      	sub	sp, #8
  405598:	4614      	mov	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
  40559a:	2903      	cmp	r1, #3
  40559c:	d827      	bhi.n	4055ee <disk_ioctl+0x5a>
  40559e:	e8df f001 	tbb	[pc, r1]
  4055a2:	071f      	.short	0x071f
  4055a4:	020f      	.short	0x020f
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
  4055a6:	2301      	movs	r3, #1
  4055a8:	6013      	str	r3, [r2, #0]
		res = RES_OK;
  4055aa:	2000      	movs	r0, #0
	default:
		res = RES_PARERR;
	}

	return res;
}
  4055ac:	b002      	add	sp, #8
  4055ae:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
  4055b0:	a901      	add	r1, sp, #4
  4055b2:	4b11      	ldr	r3, [pc, #68]	; (4055f8 <disk_ioctl+0x64>)
  4055b4:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
  4055b6:	9b01      	ldr	r3, [sp, #4]
  4055b8:	3301      	adds	r3, #1
  4055ba:	6023      	str	r3, [r4, #0]
		res = RES_OK;
  4055bc:	2000      	movs	r0, #0
	break;
  4055be:	e7f5      	b.n	4055ac <disk_ioctl+0x18>
		uint8_t uc_sector_size = mem_sector_size(drv);
  4055c0:	4b0e      	ldr	r3, [pc, #56]	; (4055fc <disk_ioctl+0x68>)
  4055c2:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
  4055c4:	2808      	cmp	r0, #8
  4055c6:	d814      	bhi.n	4055f2 <disk_ioctl+0x5e>
  4055c8:	f44f 738b 	mov.w	r3, #278	; 0x116
  4055cc:	fa23 f000 	lsr.w	r0, r3, r0
  4055d0:	f010 0f01 	tst.w	r0, #1
  4055d4:	d101      	bne.n	4055da <disk_ioctl+0x46>
			return RES_ERROR;
  4055d6:	2001      	movs	r0, #1
  4055d8:	e7e8      	b.n	4055ac <disk_ioctl+0x18>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
  4055da:	2000      	movs	r0, #0
  4055dc:	7020      	strb	r0, [r4, #0]
	break;
  4055de:	e7e5      	b.n	4055ac <disk_ioctl+0x18>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
  4055e0:	4b07      	ldr	r3, [pc, #28]	; (405600 <disk_ioctl+0x6c>)
  4055e2:	4798      	blx	r3
  4055e4:	2800      	cmp	r0, #0
			res = RES_NOTRDY;
  4055e6:	bf0c      	ite	eq
  4055e8:	2000      	moveq	r0, #0
  4055ea:	2003      	movne	r0, #3
  4055ec:	e7de      	b.n	4055ac <disk_ioctl+0x18>
		res = RES_PARERR;
  4055ee:	2004      	movs	r0, #4
  4055f0:	e7dc      	b.n	4055ac <disk_ioctl+0x18>
			return RES_ERROR;
  4055f2:	2001      	movs	r0, #1
  4055f4:	e7da      	b.n	4055ac <disk_ioctl+0x18>
  4055f6:	bf00      	nop
  4055f8:	004042e5 	.word	0x004042e5
  4055fc:	004042f9 	.word	0x004042f9
  405600:	004042d1 	.word	0x004042d1

00405604 <get_fattime>:
 * bit4:0    Second (0..59)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
  405604:	b530      	push	{r4, r5, lr}
  405606:	b08b      	sub	sp, #44	; 0x2c
	uint32_t ul_time;
	uint32_t ul_hour, ul_minute, ul_second;
	uint32_t ul_year, ul_month, ul_day, ul_week;

	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
  405608:	4c11      	ldr	r4, [pc, #68]	; (405650 <get_fattime+0x4c>)
  40560a:	ab07      	add	r3, sp, #28
  40560c:	aa08      	add	r2, sp, #32
  40560e:	a909      	add	r1, sp, #36	; 0x24
  405610:	4620      	mov	r0, r4
  405612:	4d10      	ldr	r5, [pc, #64]	; (405654 <get_fattime+0x50>)
  405614:	47a8      	blx	r5
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);
  405616:	ab03      	add	r3, sp, #12
  405618:	9300      	str	r3, [sp, #0]
  40561a:	ab04      	add	r3, sp, #16
  40561c:	aa05      	add	r2, sp, #20
  40561e:	a906      	add	r1, sp, #24
  405620:	4620      	mov	r0, r4
  405622:	4c0d      	ldr	r4, [pc, #52]	; (405658 <get_fattime+0x54>)
  405624:	47a0      	blx	r4

	ul_time = ((ul_year - 1980) << 25)
			| (ul_month << 21)
			| (ul_day << 16)
  405626:	9b04      	ldr	r3, [sp, #16]
  405628:	041b      	lsls	r3, r3, #16
	ul_time = ((ul_year - 1980) << 25)
  40562a:	9805      	ldr	r0, [sp, #20]
  40562c:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
  405630:	9807      	ldr	r0, [sp, #28]
  405632:	4303      	orrs	r3, r0
  405634:	9809      	ldr	r0, [sp, #36]	; 0x24
  405636:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
  40563a:	9808      	ldr	r0, [sp, #32]
  40563c:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
  405640:	9806      	ldr	r0, [sp, #24]
  405642:	f2a0 70bc 	subw	r0, r0, #1980	; 0x7bc
			| (ul_hour << 11)
			| (ul_minute << 5)
			| (ul_second << 0);

	return ul_time;
}
  405646:	ea43 6040 	orr.w	r0, r3, r0, lsl #25
  40564a:	b00b      	add	sp, #44	; 0x2c
  40564c:	bd30      	pop	{r4, r5, pc}
  40564e:	bf00      	nop
  405650:	400e1460 	.word	0x400e1460
  405654:	00404f17 	.word	0x00404f17
  405658:	00405005 	.word	0x00405005

0040565c <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  40565c:	b13a      	cbz	r2, 40566e <mem_cpy+0x12>
  40565e:	3801      	subs	r0, #1
  405660:	188a      	adds	r2, r1, r2
		*d++ = *s++;
  405662:	f811 3b01 	ldrb.w	r3, [r1], #1
  405666:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (cnt--)
  40566a:	4291      	cmp	r1, r2
  40566c:	d1f9      	bne.n	405662 <mem_cpy+0x6>
  40566e:	4770      	bx	lr

00405670 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
  405670:	b122      	cbz	r2, 40567c <mem_set+0xc>
  405672:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
  405674:	f800 1b01 	strb.w	r1, [r0], #1
	while (cnt--)
  405678:	4282      	cmp	r2, r0
  40567a:	d1fb      	bne.n	405674 <mem_set+0x4>
  40567c:	4770      	bx	lr

0040567e <clust2sect>:
static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
  40567e:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  405680:	69c3      	ldr	r3, [r0, #28]
  405682:	3b02      	subs	r3, #2
  405684:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
  405686:	bf3d      	ittte	cc
  405688:	7883      	ldrbcc	r3, [r0, #2]
  40568a:	6ac0      	ldrcc	r0, [r0, #44]	; 0x2c
  40568c:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  405690:	2000      	movcs	r0, #0
}
  405692:	4770      	bx	lr

00405694 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
  405694:	4602      	mov	r2, r0
  405696:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
  40569a:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
  40569c:	01c3      	lsls	r3, r0, #7
  40569e:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  4056a2:	f812 0b01 	ldrb.w	r0, [r2], #1
  4056a6:	fa50 f383 	uxtab	r3, r0, r3
  4056aa:	b2d8      	uxtb	r0, r3
  4056ac:	428a      	cmp	r2, r1
  4056ae:	d1f5      	bne.n	40569c <sum_sfn+0x8>
	return sum;
}
  4056b0:	4770      	bx	lr
	...

004056b4 <validate>:
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
  4056b4:	b198      	cbz	r0, 4056de <validate+0x2a>
{
  4056b6:	b508      	push	{r3, lr}
	if (!fs || !fs->fs_type || fs->id != id)
  4056b8:	7802      	ldrb	r2, [r0, #0]
  4056ba:	b90a      	cbnz	r2, 4056c0 <validate+0xc>
		return FR_INVALID_OBJECT;
  4056bc:	2009      	movs	r0, #9
  4056be:	bd08      	pop	{r3, pc}
	if (!fs || !fs->fs_type || fs->id != id)
  4056c0:	88c2      	ldrh	r2, [r0, #6]
  4056c2:	428a      	cmp	r2, r1
  4056c4:	d001      	beq.n	4056ca <validate+0x16>
		return FR_INVALID_OBJECT;
  4056c6:	2009      	movs	r0, #9

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
  4056c8:	bd08      	pop	{r3, pc}
	if (disk_status(fs->drv) & STA_NOINIT)
  4056ca:	7840      	ldrb	r0, [r0, #1]
  4056cc:	4b05      	ldr	r3, [pc, #20]	; (4056e4 <validate+0x30>)
  4056ce:	4798      	blx	r3
  4056d0:	f000 0001 	and.w	r0, r0, #1
	return FR_OK;
  4056d4:	2800      	cmp	r0, #0
  4056d6:	bf14      	ite	ne
  4056d8:	2003      	movne	r0, #3
  4056da:	2000      	moveq	r0, #0
  4056dc:	bd08      	pop	{r3, pc}
		return FR_INVALID_OBJECT;
  4056de:	2009      	movs	r0, #9
  4056e0:	4770      	bx	lr
  4056e2:	bf00      	nop
  4056e4:	00405499 	.word	0x00405499

004056e8 <check_fs>:
{
  4056e8:	b538      	push	{r3, r4, r5, lr}
  4056ea:	4604      	mov	r4, r0
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
  4056ec:	2301      	movs	r3, #1
  4056ee:	460a      	mov	r2, r1
  4056f0:	f100 0134 	add.w	r1, r0, #52	; 0x34
  4056f4:	7840      	ldrb	r0, [r0, #1]
  4056f6:	4d1d      	ldr	r5, [pc, #116]	; (40576c <check_fs+0x84>)
  4056f8:	47a8      	blx	r5
  4056fa:	b108      	cbz	r0, 405700 <check_fs+0x18>
		return 3;
  4056fc:	2003      	movs	r0, #3
  4056fe:	bd38      	pop	{r3, r4, r5, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
  405700:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
  405704:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
  405708:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40570c:	b21b      	sxth	r3, r3
  40570e:	4a18      	ldr	r2, [pc, #96]	; (405770 <check_fs+0x88>)
  405710:	4293      	cmp	r3, r2
  405712:	d001      	beq.n	405718 <check_fs+0x30>
		return 2;
  405714:	2002      	movs	r0, #2
  405716:	bd38      	pop	{r3, r4, r5, pc}
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
  405718:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
  40571c:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
  405720:	041b      	lsls	r3, r3, #16
  405722:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  405726:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
  40572a:	4313      	orrs	r3, r2
  40572c:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
  405730:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  405734:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  405738:	4a0e      	ldr	r2, [pc, #56]	; (405774 <check_fs+0x8c>)
  40573a:	4293      	cmp	r3, r2
  40573c:	d013      	beq.n	405766 <check_fs+0x7e>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
  40573e:	f894 3089 	ldrb.w	r3, [r4, #137]	; 0x89
  405742:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
  405746:	0400      	lsls	r0, r0, #16
  405748:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
  40574c:	f894 3086 	ldrb.w	r3, [r4, #134]	; 0x86
  405750:	4318      	orrs	r0, r3
  405752:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
  405756:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  40575a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
  40575e:	1a80      	subs	r0, r0, r2
  405760:	bf18      	it	ne
  405762:	2001      	movne	r0, #1
  405764:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
  405766:	2000      	movs	r0, #0
}
  405768:	bd38      	pop	{r3, r4, r5, pc}
  40576a:	bf00      	nop
  40576c:	004054b5 	.word	0x004054b5
  405770:	ffffaa55 	.word	0xffffaa55
  405774:	00544146 	.word	0x00544146

00405778 <chk_mounted>:
{
  405778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const TCHAR *p = *path;
  40577a:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
  40577c:	781c      	ldrb	r4, [r3, #0]
  40577e:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
  405780:	2c09      	cmp	r4, #9
  405782:	d802      	bhi.n	40578a <chk_mounted+0x12>
  405784:	785d      	ldrb	r5, [r3, #1]
  405786:	2d3a      	cmp	r5, #58	; 0x3a
  405788:	d005      	beq.n	405796 <chk_mounted+0x1e>
		vol = CurrVol;					/* Use current drive */
  40578a:	4bb3      	ldr	r3, [pc, #716]	; (405a58 <chk_mounted+0x2e0>)
  40578c:	781c      	ldrb	r4, [r3, #0]
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
  40578e:	2c07      	cmp	r4, #7
  405790:	d904      	bls.n	40579c <chk_mounted+0x24>
		return FR_INVALID_DRIVE;
  405792:	200b      	movs	r0, #11
  405794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p += 2; *path = p;				/* Return pointer to the path name */
  405796:	3302      	adds	r3, #2
  405798:	6003      	str	r3, [r0, #0]
  40579a:	e7f8      	b.n	40578e <chk_mounted+0x16>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
  40579c:	4baf      	ldr	r3, [pc, #700]	; (405a5c <chk_mounted+0x2e4>)
  40579e:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
  4057a2:	600d      	str	r5, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  4057a4:	2d00      	cmp	r5, #0
  4057a6:	f000 813e 	beq.w	405a26 <chk_mounted+0x2ae>
  4057aa:	4616      	mov	r6, r2
	if (fs->fs_type) {					/* If the logical drive has been mounted */
  4057ac:	782b      	ldrb	r3, [r5, #0]
  4057ae:	b17b      	cbz	r3, 4057d0 <chk_mounted+0x58>
		stat = disk_status(fs->drv);
  4057b0:	7868      	ldrb	r0, [r5, #1]
  4057b2:	4bab      	ldr	r3, [pc, #684]	; (405a60 <chk_mounted+0x2e8>)
  4057b4:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
  4057b6:	f010 0f01 	tst.w	r0, #1
  4057ba:	d109      	bne.n	4057d0 <chk_mounted+0x58>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
  4057bc:	2e00      	cmp	r6, #0
  4057be:	f000 8134 	beq.w	405a2a <chk_mounted+0x2b2>
  4057c2:	f000 0004 	and.w	r0, r0, #4
				return FR_WRITE_PROTECTED;
  4057c6:	2800      	cmp	r0, #0
  4057c8:	bf0c      	ite	eq
  4057ca:	2000      	moveq	r0, #0
  4057cc:	200a      	movne	r0, #10
  4057ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
  4057d0:	2300      	movs	r3, #0
  4057d2:	702b      	strb	r3, [r5, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
  4057d4:	b2e0      	uxtb	r0, r4
  4057d6:	7068      	strb	r0, [r5, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
  4057d8:	4ba2      	ldr	r3, [pc, #648]	; (405a64 <chk_mounted+0x2ec>)
  4057da:	4798      	blx	r3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
  4057dc:	f010 0f01 	tst.w	r0, #1
  4057e0:	d001      	beq.n	4057e6 <chk_mounted+0x6e>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
  4057e2:	2003      	movs	r0, #3
  4057e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
  4057e6:	b126      	cbz	r6, 4057f2 <chk_mounted+0x7a>
  4057e8:	f010 0f04 	tst.w	r0, #4
  4057ec:	d001      	beq.n	4057f2 <chk_mounted+0x7a>
		return FR_WRITE_PROTECTED;
  4057ee:	200a      	movs	r0, #10
  4057f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  4057f2:	2100      	movs	r1, #0
  4057f4:	4628      	mov	r0, r5
  4057f6:	4b9c      	ldr	r3, [pc, #624]	; (405a68 <chk_mounted+0x2f0>)
  4057f8:	4798      	blx	r3
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
  4057fa:	2801      	cmp	r0, #1
  4057fc:	d006      	beq.n	40580c <chk_mounted+0x94>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  4057fe:	2400      	movs	r4, #0
	if (fmt == 3) return FR_DISK_ERR;
  405800:	2803      	cmp	r0, #3
  405802:	f000 8114 	beq.w	405a2e <chk_mounted+0x2b6>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  405806:	b1c8      	cbz	r0, 40583c <chk_mounted+0xc4>
  405808:	200d      	movs	r0, #13
  40580a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tbl[4]) {						/* Is the partition existing? */
  40580c:	f895 31f6 	ldrb.w	r3, [r5, #502]	; 0x1f6
  405810:	b90b      	cbnz	r3, 405816 <chk_mounted+0x9e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  405812:	200d      	movs	r0, #13
  405814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
  405816:	f895 31fd 	ldrb.w	r3, [r5, #509]	; 0x1fd
  40581a:	f895 41fc 	ldrb.w	r4, [r5, #508]	; 0x1fc
  40581e:	0424      	lsls	r4, r4, #16
  405820:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
  405824:	f895 31fa 	ldrb.w	r3, [r5, #506]	; 0x1fa
  405828:	431c      	orrs	r4, r3
  40582a:	f895 31fb 	ldrb.w	r3, [r5, #507]	; 0x1fb
  40582e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
			fmt = check_fs(fs, bsect);		/* Check the partition */
  405832:	4621      	mov	r1, r4
  405834:	4628      	mov	r0, r5
  405836:	4b8c      	ldr	r3, [pc, #560]	; (405a68 <chk_mounted+0x2f0>)
  405838:	4798      	blx	r3
  40583a:	e7e1      	b.n	405800 <chk_mounted+0x88>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
  40583c:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
  405840:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
  405844:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  405848:	b21b      	sxth	r3, r3
  40584a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40584e:	d001      	beq.n	405854 <chk_mounted+0xdc>
		return FR_NO_FILESYSTEM;
  405850:	200d      	movs	r0, #13
  405852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
  405854:	f895 304b 	ldrb.w	r3, [r5, #75]	; 0x4b
  405858:	f895 204a 	ldrb.w	r2, [r5, #74]	; 0x4a
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
  40585c:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
  405860:	d10d      	bne.n	40587e <chk_mounted+0x106>
  405862:	f895 305b 	ldrb.w	r3, [r5, #91]	; 0x5b
  405866:	f895 205a 	ldrb.w	r2, [r5, #90]	; 0x5a
  40586a:	0412      	lsls	r2, r2, #16
  40586c:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
  405870:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
  405874:	431a      	orrs	r2, r3
  405876:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
  40587a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	fs->fsize = fasize;
  40587e:	622a      	str	r2, [r5, #32]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
  405880:	f895 e044 	ldrb.w	lr, [r5, #68]	; 0x44
  405884:	f885 e003 	strb.w	lr, [r5, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
  405888:	f10e 33ff 	add.w	r3, lr, #4294967295
  40588c:	b2db      	uxtb	r3, r3
  40588e:	2b01      	cmp	r3, #1
  405890:	d901      	bls.n	405896 <chk_mounted+0x11e>
  405892:	200d      	movs	r0, #13
  405894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
  405896:	f895 6041 	ldrb.w	r6, [r5, #65]	; 0x41
  40589a:	70ae      	strb	r6, [r5, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  40589c:	2e00      	cmp	r6, #0
  40589e:	f000 80c8 	beq.w	405a32 <chk_mounted+0x2ba>
  4058a2:	1e73      	subs	r3, r6, #1
  4058a4:	4233      	tst	r3, r6
  4058a6:	d001      	beq.n	4058ac <chk_mounted+0x134>
  4058a8:	200d      	movs	r0, #13
  4058aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
  4058ac:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
  4058b0:	f895 1045 	ldrb.w	r1, [r5, #69]	; 0x45
  4058b4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
  4058b8:	8129      	strh	r1, [r5, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  4058ba:	f011 0f0f 	tst.w	r1, #15
  4058be:	f040 80ba 	bne.w	405a36 <chk_mounted+0x2be>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
  4058c2:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
  4058c6:	f895 3047 	ldrb.w	r3, [r5, #71]	; 0x47
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
  4058ca:	ea53 2300 	orrs.w	r3, r3, r0, lsl #8
  4058ce:	d10d      	bne.n	4058ec <chk_mounted+0x174>
  4058d0:	f895 0057 	ldrb.w	r0, [r5, #87]	; 0x57
  4058d4:	f895 3056 	ldrb.w	r3, [r5, #86]	; 0x56
  4058d8:	041b      	lsls	r3, r3, #16
  4058da:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  4058de:	f895 0054 	ldrb.w	r0, [r5, #84]	; 0x54
  4058e2:	4303      	orrs	r3, r0
  4058e4:	f895 0055 	ldrb.w	r0, [r5, #85]	; 0x55
  4058e8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
  4058ec:	f895 0043 	ldrb.w	r0, [r5, #67]	; 0x43
  4058f0:	f895 7042 	ldrb.w	r7, [r5, #66]	; 0x42
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  4058f4:	ea57 2700 	orrs.w	r7, r7, r0, lsl #8
  4058f8:	f000 809f 	beq.w	405a3a <chk_mounted+0x2c2>
	fasize *= b;										/* Number of sectors for FAT area */
  4058fc:	fb02 fe0e 	mul.w	lr, r2, lr
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
  405900:	eb07 1011 	add.w	r0, r7, r1, lsr #4
  405904:	4470      	add	r0, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  405906:	4283      	cmp	r3, r0
  405908:	f0c0 8099 	bcc.w	405a3e <chk_mounted+0x2c6>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
  40590c:	1a1b      	subs	r3, r3, r0
  40590e:	fbb3 f3f6 	udiv	r3, r3, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  405912:	2b00      	cmp	r3, #0
  405914:	f000 8095 	beq.w	405a42 <chk_mounted+0x2ca>
	fmt = FS_FAT12;
  405918:	f640 76f5 	movw	r6, #4085	; 0xff5
  40591c:	42b3      	cmp	r3, r6
  40591e:	bf8c      	ite	hi
  405920:	2602      	movhi	r6, #2
  405922:	2601      	movls	r6, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  405924:	f64f 7cf5 	movw	ip, #65525	; 0xfff5
  405928:	4563      	cmp	r3, ip
  40592a:	f200 80a7 	bhi.w	405a7c <chk_mounted+0x304>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  40592e:	3302      	adds	r3, #2
  405930:	61eb      	str	r3, [r5, #28]
	fs->database = bsect + sysect;						/* Data start sector */
  405932:	4420      	add	r0, r4
  405934:	62e8      	str	r0, [r5, #44]	; 0x2c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  405936:	443c      	add	r4, r7
  405938:	626c      	str	r4, [r5, #36]	; 0x24
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  40593a:	2900      	cmp	r1, #0
  40593c:	f000 8089 	beq.w	405a52 <chk_mounted+0x2da>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
  405940:	4474      	add	r4, lr
  405942:	62ac      	str	r4, [r5, #40]	; 0x28
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  405944:	2e02      	cmp	r6, #2
  405946:	bf0f      	iteee	eq
  405948:	005b      	lsleq	r3, r3, #1
  40594a:	eb03 0143 	addne.w	r1, r3, r3, lsl #1
  40594e:	f003 0301 	andne.w	r3, r3, #1
  405952:	eb03 0351 	addne.w	r3, r3, r1, lsr #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  405956:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  40595a:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  40595e:	d376      	bcc.n	405a4e <chk_mounted+0x2d6>
	fs->free_clust = 0xFFFFFFFF;
  405960:	f04f 33ff 	mov.w	r3, #4294967295
  405964:	612b      	str	r3, [r5, #16]
	fs->last_clust = 0;
  405966:	2300      	movs	r3, #0
  405968:	60eb      	str	r3, [r5, #12]
  40596a:	e04a      	b.n	405a02 <chk_mounted+0x28a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  40596c:	f895 2233 	ldrb.w	r2, [r5, #563]	; 0x233
  405970:	f895 3232 	ldrb.w	r3, [r5, #562]	; 0x232
  405974:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  405978:	b21b      	sxth	r3, r3
  40597a:	4a3c      	ldr	r2, [pc, #240]	; (405a6c <chk_mounted+0x2f4>)
  40597c:	4293      	cmp	r3, r2
  40597e:	d14c      	bne.n	405a1a <chk_mounted+0x2a2>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  405980:	f895 2037 	ldrb.w	r2, [r5, #55]	; 0x37
  405984:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
  405988:	041b      	lsls	r3, r3, #16
  40598a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  40598e:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
  405992:	4313      	orrs	r3, r2
  405994:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
  405998:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  40599c:	4a34      	ldr	r2, [pc, #208]	; (405a70 <chk_mounted+0x2f8>)
  40599e:	4293      	cmp	r3, r2
  4059a0:	d13d      	bne.n	405a1e <chk_mounted+0x2a6>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
  4059a2:	f895 221b 	ldrb.w	r2, [r5, #539]	; 0x21b
  4059a6:	f895 321a 	ldrb.w	r3, [r5, #538]	; 0x21a
  4059aa:	041b      	lsls	r3, r3, #16
  4059ac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  4059b0:	f895 2218 	ldrb.w	r2, [r5, #536]	; 0x218
  4059b4:	4313      	orrs	r3, r2
  4059b6:	f895 2219 	ldrb.w	r2, [r5, #537]	; 0x219
  4059ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  4059be:	4a2d      	ldr	r2, [pc, #180]	; (405a74 <chk_mounted+0x2fc>)
  4059c0:	4293      	cmp	r3, r2
  4059c2:	d12e      	bne.n	405a22 <chk_mounted+0x2aa>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  4059c4:	f895 2223 	ldrb.w	r2, [r5, #547]	; 0x223
  4059c8:	f895 3222 	ldrb.w	r3, [r5, #546]	; 0x222
  4059cc:	041b      	lsls	r3, r3, #16
  4059ce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  4059d2:	f895 2220 	ldrb.w	r2, [r5, #544]	; 0x220
  4059d6:	4313      	orrs	r3, r2
  4059d8:	f895 2221 	ldrb.w	r2, [r5, #545]	; 0x221
  4059dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4059e0:	60eb      	str	r3, [r5, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  4059e2:	f895 221f 	ldrb.w	r2, [r5, #543]	; 0x21f
  4059e6:	f895 321e 	ldrb.w	r3, [r5, #542]	; 0x21e
  4059ea:	041b      	lsls	r3, r3, #16
  4059ec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  4059f0:	f895 221c 	ldrb.w	r2, [r5, #540]	; 0x21c
  4059f4:	4313      	orrs	r3, r2
  4059f6:	f895 221d 	ldrb.w	r2, [r5, #541]	; 0x21d
  4059fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4059fe:	612b      	str	r3, [r5, #16]
  405a00:	2603      	movs	r6, #3
	fs->fs_type = fmt;		/* FAT sub-type */
  405a02:	702e      	strb	r6, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
  405a04:	4a1c      	ldr	r2, [pc, #112]	; (405a78 <chk_mounted+0x300>)
  405a06:	8813      	ldrh	r3, [r2, #0]
  405a08:	3301      	adds	r3, #1
  405a0a:	b29b      	uxth	r3, r3
  405a0c:	8013      	strh	r3, [r2, #0]
  405a0e:	80eb      	strh	r3, [r5, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
  405a10:	2000      	movs	r0, #0
  405a12:	6328      	str	r0, [r5, #48]	; 0x30
	fs->wflag = 0;
  405a14:	7128      	strb	r0, [r5, #4]
	fs->cdir = 0;			/* Current directory (root dir) */
  405a16:	61a8      	str	r0, [r5, #24]
	return FR_OK;
  405a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405a1a:	2603      	movs	r6, #3
  405a1c:	e7f1      	b.n	405a02 <chk_mounted+0x28a>
  405a1e:	2603      	movs	r6, #3
  405a20:	e7ef      	b.n	405a02 <chk_mounted+0x28a>
  405a22:	2603      	movs	r6, #3
  405a24:	e7ed      	b.n	405a02 <chk_mounted+0x28a>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  405a26:	200c      	movs	r0, #12
  405a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return FR_OK;				/* The file system object is valid */
  405a2a:	2000      	movs	r0, #0
  405a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fmt == 3) return FR_DISK_ERR;
  405a2e:	2001      	movs	r0, #1
  405a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  405a32:	200d      	movs	r0, #13
  405a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  405a36:	200d      	movs	r0, #13
  405a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  405a3a:	200d      	movs	r0, #13
  405a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  405a3e:	200d      	movs	r0, #13
  405a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  405a42:	200d      	movs	r0, #13
  405a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_NO_FILESYSTEM;
  405a46:	200d      	movs	r0, #13
  405a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  405a4a:	200d      	movs	r0, #13
  405a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_NO_FILESYSTEM;
  405a4e:	200d      	movs	r0, #13
  405a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  405a52:	200d      	movs	r0, #13
  405a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405a56:	bf00      	nop
  405a58:	20000e8c 	.word	0x20000e8c
  405a5c:	20000e90 	.word	0x20000e90
  405a60:	00405499 	.word	0x00405499
  405a64:	00405445 	.word	0x00405445
  405a68:	004056e9 	.word	0x004056e9
  405a6c:	ffffaa55 	.word	0xffffaa55
  405a70:	41615252 	.word	0x41615252
  405a74:	61417272 	.word	0x61417272
  405a78:	20000eb0 	.word	0x20000eb0
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  405a7c:	3302      	adds	r3, #2
  405a7e:	61eb      	str	r3, [r5, #28]
	fs->database = bsect + sysect;						/* Data start sector */
  405a80:	4420      	add	r0, r4
  405a82:	62e8      	str	r0, [r5, #44]	; 0x2c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  405a84:	4427      	add	r7, r4
  405a86:	626f      	str	r7, [r5, #36]	; 0x24
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  405a88:	2900      	cmp	r1, #0
  405a8a:	d1de      	bne.n	405a4a <chk_mounted+0x2d2>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
  405a8c:	f895 0063 	ldrb.w	r0, [r5, #99]	; 0x63
  405a90:	f895 1062 	ldrb.w	r1, [r5, #98]	; 0x62
  405a94:	0409      	lsls	r1, r1, #16
  405a96:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
  405a9a:	f895 0060 	ldrb.w	r0, [r5, #96]	; 0x60
  405a9e:	4301      	orrs	r1, r0
  405aa0:	f895 0061 	ldrb.w	r0, [r5, #97]	; 0x61
  405aa4:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  405aa8:	62a9      	str	r1, [r5, #40]	; 0x28
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
  405aaa:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  405aac:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  405ab0:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  405ab4:	d3c7      	bcc.n	405a46 <chk_mounted+0x2ce>
	fs->free_clust = 0xFFFFFFFF;
  405ab6:	f04f 33ff 	mov.w	r3, #4294967295
  405aba:	612b      	str	r3, [r5, #16]
	fs->last_clust = 0;
  405abc:	2300      	movs	r3, #0
  405abe:	60eb      	str	r3, [r5, #12]
	 	fs->fsi_flag = 0;
  405ac0:	716b      	strb	r3, [r5, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
  405ac2:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
  405ac6:	f895 2064 	ldrb.w	r2, [r5, #100]	; 0x64
  405aca:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  405ace:	4422      	add	r2, r4
  405ad0:	616a      	str	r2, [r5, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  405ad2:	2301      	movs	r3, #1
  405ad4:	f105 0134 	add.w	r1, r5, #52	; 0x34
  405ad8:	7868      	ldrb	r0, [r5, #1]
  405ada:	4c03      	ldr	r4, [pc, #12]	; (405ae8 <chk_mounted+0x370>)
  405adc:	47a0      	blx	r4
  405ade:	2800      	cmp	r0, #0
  405ae0:	f43f af44 	beq.w	40596c <chk_mounted+0x1f4>
  405ae4:	2603      	movs	r6, #3
  405ae6:	e78c      	b.n	405a02 <chk_mounted+0x28a>
  405ae8:	004054b5 	.word	0x004054b5

00405aec <get_fileinfo>:
{
  405aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	p = fno->fname;
  405af0:	f101 0209 	add.w	r2, r1, #9
	if (dj->sect) {
  405af4:	6903      	ldr	r3, [r0, #16]
  405af6:	2b00      	cmp	r3, #0
  405af8:	d05e      	beq.n	405bb8 <get_fileinfo+0xcc>
		dir = dj->dir;
  405afa:	6944      	ldr	r4, [r0, #20]
		nt = dir[DIR_NTres];		/* NT flag */
  405afc:	f894 e00c 	ldrb.w	lr, [r4, #12]
			c = dir[i];
  405b00:	7823      	ldrb	r3, [r4, #0]
			if (c == ' ') break;
  405b02:	2b20      	cmp	r3, #32
  405b04:	d01d      	beq.n	405b42 <get_fileinfo+0x56>
  405b06:	4625      	mov	r5, r4
  405b08:	f101 0711 	add.w	r7, r1, #17
			if (c == NDDE) c = (TCHAR)DDE;
  405b0c:	f04f 08e5 	mov.w	r8, #229	; 0xe5
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
  405b10:	f00e 0c08 	and.w	ip, lr, #8
  405b14:	e008      	b.n	405b28 <get_fileinfo+0x3c>
			if (c == NDDE) c = (TCHAR)DDE;
  405b16:	4643      	mov	r3, r8
			*p++ = c;
  405b18:	f802 3b01 	strb.w	r3, [r2], #1
		for (i = 0; i < 8; i++) {	/* Copy name body */
  405b1c:	42ba      	cmp	r2, r7
  405b1e:	d010      	beq.n	405b42 <get_fileinfo+0x56>
			c = dir[i];
  405b20:	f815 3f01 	ldrb.w	r3, [r5, #1]!
			if (c == ' ') break;
  405b24:	2b20      	cmp	r3, #32
  405b26:	d00c      	beq.n	405b42 <get_fileinfo+0x56>
			if (c == NDDE) c = (TCHAR)DDE;
  405b28:	2b05      	cmp	r3, #5
  405b2a:	d0f4      	beq.n	405b16 <get_fileinfo+0x2a>
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
  405b2c:	f1bc 0f00 	cmp.w	ip, #0
  405b30:	d0f2      	beq.n	405b18 <get_fileinfo+0x2c>
  405b32:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
  405b36:	b2f6      	uxtb	r6, r6
  405b38:	2e19      	cmp	r6, #25
  405b3a:	d8ed      	bhi.n	405b18 <get_fileinfo+0x2c>
  405b3c:	3320      	adds	r3, #32
  405b3e:	b2db      	uxtb	r3, r3
  405b40:	e7ea      	b.n	405b18 <get_fileinfo+0x2c>
		if (dir[8] != ' ') {		/* Copy name extension */
  405b42:	7a23      	ldrb	r3, [r4, #8]
  405b44:	2b20      	cmp	r3, #32
  405b46:	d020      	beq.n	405b8a <get_fileinfo+0x9e>
			*p++ = '.';
  405b48:	1c55      	adds	r5, r2, #1
  405b4a:	232e      	movs	r3, #46	; 0x2e
  405b4c:	7013      	strb	r3, [r2, #0]
				c = dir[i];
  405b4e:	7a23      	ldrb	r3, [r4, #8]
				if (c == ' ') break;
  405b50:	2b20      	cmp	r3, #32
  405b52:	d019      	beq.n	405b88 <get_fileinfo+0x9c>
  405b54:	f104 0708 	add.w	r7, r4, #8
  405b58:	f102 0c04 	add.w	ip, r2, #4
  405b5c:	462a      	mov	r2, r5
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
  405b5e:	f00e 0510 	and.w	r5, lr, #16
  405b62:	e007      	b.n	405b74 <get_fileinfo+0x88>
				*p++ = c;
  405b64:	f802 3b01 	strb.w	r3, [r2], #1
			for (i = 8; i < 11; i++) {
  405b68:	4562      	cmp	r2, ip
  405b6a:	d00e      	beq.n	405b8a <get_fileinfo+0x9e>
				c = dir[i];
  405b6c:	f817 3f01 	ldrb.w	r3, [r7, #1]!
				if (c == ' ') break;
  405b70:	2b20      	cmp	r3, #32
  405b72:	d00a      	beq.n	405b8a <get_fileinfo+0x9e>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
  405b74:	2d00      	cmp	r5, #0
  405b76:	d0f5      	beq.n	405b64 <get_fileinfo+0x78>
  405b78:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
  405b7c:	b2f6      	uxtb	r6, r6
  405b7e:	2e19      	cmp	r6, #25
  405b80:	bf9c      	itt	ls
  405b82:	3320      	addls	r3, #32
  405b84:	b2db      	uxtbls	r3, r3
  405b86:	e7ed      	b.n	405b64 <get_fileinfo+0x78>
			*p++ = '.';
  405b88:	462a      	mov	r2, r5
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
  405b8a:	7ae3      	ldrb	r3, [r4, #11]
  405b8c:	720b      	strb	r3, [r1, #8]
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
  405b8e:	7fe5      	ldrb	r5, [r4, #31]
  405b90:	7fa3      	ldrb	r3, [r4, #30]
  405b92:	041b      	lsls	r3, r3, #16
  405b94:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  405b98:	7f25      	ldrb	r5, [r4, #28]
  405b9a:	432b      	orrs	r3, r5
  405b9c:	7f65      	ldrb	r5, [r4, #29]
  405b9e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  405ba2:	600b      	str	r3, [r1, #0]
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
  405ba4:	7e65      	ldrb	r5, [r4, #25]
  405ba6:	7e23      	ldrb	r3, [r4, #24]
  405ba8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  405bac:	808b      	strh	r3, [r1, #4]
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
  405bae:	7de5      	ldrb	r5, [r4, #23]
  405bb0:	7da3      	ldrb	r3, [r4, #22]
  405bb2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  405bb6:	80cb      	strh	r3, [r1, #6]
	*p = 0;		/* Terminate SFN str by a \0 */
  405bb8:	2300      	movs	r3, #0
  405bba:	7013      	strb	r3, [r2, #0]
	if (fno->lfname && fno->lfsize) {
  405bbc:	698f      	ldr	r7, [r1, #24]
  405bbe:	b32f      	cbz	r7, 405c0c <get_fileinfo+0x120>
  405bc0:	69cb      	ldr	r3, [r1, #28]
  405bc2:	b31b      	cbz	r3, 405c0c <get_fileinfo+0x120>
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
  405bc4:	6903      	ldr	r3, [r0, #16]
  405bc6:	b1f3      	cbz	r3, 405c06 <get_fileinfo+0x11a>
  405bc8:	8c02      	ldrh	r2, [r0, #32]
  405bca:	f64f 73ff 	movw	r3, #65535	; 0xffff
  405bce:	429a      	cmp	r2, r3
  405bd0:	d01e      	beq.n	405c10 <get_fileinfo+0x124>
			lfn = dj->lfn;
  405bd2:	f8d0 801c 	ldr.w	r8, [r0, #28]
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
  405bd6:	f8b8 0000 	ldrh.w	r0, [r8]
  405bda:	b1d8      	cbz	r0, 405c14 <get_fileinfo+0x128>
  405bdc:	460d      	mov	r5, r1
  405bde:	1e7e      	subs	r6, r7, #1
  405be0:	2400      	movs	r4, #0
				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
  405be2:	46a2      	mov	sl, r4
  405be4:	f8df 9038 	ldr.w	r9, [pc, #56]	; 405c20 <get_fileinfo+0x134>
  405be8:	4651      	mov	r1, sl
  405bea:	47c8      	blx	r9
				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
  405bec:	b1a0      	cbz	r0, 405c18 <get_fileinfo+0x12c>
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
  405bee:	69eb      	ldr	r3, [r5, #28]
  405bf0:	3b01      	subs	r3, #1
  405bf2:	42a3      	cmp	r3, r4
  405bf4:	d912      	bls.n	405c1c <get_fileinfo+0x130>
				tp[i++] = (TCHAR)w;
  405bf6:	3401      	adds	r4, #1
  405bf8:	f806 0f01 	strb.w	r0, [r6, #1]!
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
  405bfc:	f838 0014 	ldrh.w	r0, [r8, r4, lsl #1]
  405c00:	2800      	cmp	r0, #0
  405c02:	d1f1      	bne.n	405be8 <get_fileinfo+0xfc>
  405c04:	e000      	b.n	405c08 <get_fileinfo+0x11c>
		i = 0;
  405c06:	2400      	movs	r4, #0
		tp[i] = 0;	/* Terminate the LFN str by a \0 */
  405c08:	2300      	movs	r3, #0
  405c0a:	553b      	strb	r3, [r7, r4]
  405c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		i = 0;
  405c10:	2400      	movs	r4, #0
  405c12:	e7f9      	b.n	405c08 <get_fileinfo+0x11c>
  405c14:	2400      	movs	r4, #0
  405c16:	e7f7      	b.n	405c08 <get_fileinfo+0x11c>
				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
  405c18:	2400      	movs	r4, #0
  405c1a:	e7f5      	b.n	405c08 <get_fileinfo+0x11c>
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
  405c1c:	2400      	movs	r4, #0
  405c1e:	e7f3      	b.n	405c08 <get_fileinfo+0x11c>
  405c20:	00407ca9 	.word	0x00407ca9

00405c24 <move_window>:
{
  405c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wsect = fs->winsect;
  405c28:	6b07      	ldr	r7, [r0, #48]	; 0x30
	if (wsect != sector) {	/* Changed current window */
  405c2a:	428f      	cmp	r7, r1
  405c2c:	d035      	beq.n	405c9a <move_window+0x76>
  405c2e:	460e      	mov	r6, r1
  405c30:	4604      	mov	r4, r0
		if (fs->wflag) {	/* Write back dirty window if needed */
  405c32:	7903      	ldrb	r3, [r0, #4]
  405c34:	b91b      	cbnz	r3, 405c3e <move_window+0x1a>
		if (sector) {
  405c36:	bb2e      	cbnz	r6, 405c84 <move_window+0x60>
	return FR_OK;
  405c38:	2000      	movs	r0, #0
  405c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
  405c3e:	f100 0834 	add.w	r8, r0, #52	; 0x34
  405c42:	2301      	movs	r3, #1
  405c44:	463a      	mov	r2, r7
  405c46:	4641      	mov	r1, r8
  405c48:	7840      	ldrb	r0, [r0, #1]
  405c4a:	4d18      	ldr	r5, [pc, #96]	; (405cac <move_window+0x88>)
  405c4c:	47a8      	blx	r5
  405c4e:	bb38      	cbnz	r0, 405ca0 <move_window+0x7c>
			fs->wflag = 0;
  405c50:	2300      	movs	r3, #0
  405c52:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
  405c54:	6a63      	ldr	r3, [r4, #36]	; 0x24
  405c56:	6a22      	ldr	r2, [r4, #32]
  405c58:	4413      	add	r3, r2
  405c5a:	429f      	cmp	r7, r3
  405c5c:	d2eb      	bcs.n	405c36 <move_window+0x12>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  405c5e:	78e5      	ldrb	r5, [r4, #3]
  405c60:	2d01      	cmp	r5, #1
  405c62:	d9e8      	bls.n	405c36 <move_window+0x12>
					disk_write(fs->drv, fs->win, wsect, 1);
  405c64:	f04f 0a01 	mov.w	sl, #1
  405c68:	f8df 9040 	ldr.w	r9, [pc, #64]	; 405cac <move_window+0x88>
					wsect += fs->fsize;
  405c6c:	6a23      	ldr	r3, [r4, #32]
  405c6e:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
  405c70:	4653      	mov	r3, sl
  405c72:	463a      	mov	r2, r7
  405c74:	4641      	mov	r1, r8
  405c76:	7860      	ldrb	r0, [r4, #1]
  405c78:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  405c7a:	3d01      	subs	r5, #1
  405c7c:	b2ed      	uxtb	r5, r5
  405c7e:	2d01      	cmp	r5, #1
  405c80:	d1f4      	bne.n	405c6c <move_window+0x48>
  405c82:	e7d8      	b.n	405c36 <move_window+0x12>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
  405c84:	2301      	movs	r3, #1
  405c86:	4632      	mov	r2, r6
  405c88:	f104 0134 	add.w	r1, r4, #52	; 0x34
  405c8c:	7860      	ldrb	r0, [r4, #1]
  405c8e:	4d08      	ldr	r5, [pc, #32]	; (405cb0 <move_window+0x8c>)
  405c90:	47a8      	blx	r5
  405c92:	b940      	cbnz	r0, 405ca6 <move_window+0x82>
			fs->winsect = sector;
  405c94:	6326      	str	r6, [r4, #48]	; 0x30
  405c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return FR_OK;
  405c9a:	2000      	movs	r0, #0
  405c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
  405ca0:	2001      	movs	r0, #1
  405ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return FR_DISK_ERR;
  405ca6:	2001      	movs	r0, #1
}
  405ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405cac:	00405525 	.word	0x00405525
  405cb0:	004054b5 	.word	0x004054b5

00405cb4 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  405cb4:	2901      	cmp	r1, #1
  405cb6:	d96a      	bls.n	405d8e <get_fat+0xda>
{
  405cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  405cba:	69c3      	ldr	r3, [r0, #28]
  405cbc:	4299      	cmp	r1, r3
  405cbe:	d268      	bcs.n	405d92 <get_fat+0xde>
  405cc0:	460c      	mov	r4, r1
  405cc2:	4606      	mov	r6, r0
	switch (fs->fs_type) {
  405cc4:	7803      	ldrb	r3, [r0, #0]
  405cc6:	2b02      	cmp	r3, #2
  405cc8:	d02f      	beq.n	405d2a <get_fat+0x76>
  405cca:	2b03      	cmp	r3, #3
  405ccc:	d041      	beq.n	405d52 <get_fat+0x9e>
  405cce:	2b01      	cmp	r3, #1
  405cd0:	d002      	beq.n	405cd8 <get_fat+0x24>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  405cd2:	f04f 30ff 	mov.w	r0, #4294967295
  405cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bc = (UINT)clst; bc += bc / 2;
  405cd8:	eb01 0751 	add.w	r7, r1, r1, lsr #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  405cdc:	6a41      	ldr	r1, [r0, #36]	; 0x24
  405cde:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  405ce2:	4b2d      	ldr	r3, [pc, #180]	; (405d98 <get_fat+0xe4>)
  405ce4:	4798      	blx	r3
  405ce6:	b110      	cbz	r0, 405cee <get_fat+0x3a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  405ce8:	f04f 30ff 	mov.w	r0, #4294967295
  405cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc = fs->win[bc % SS(fs)]; bc++;
  405cee:	f3c7 0308 	ubfx	r3, r7, #0, #9
  405cf2:	4433      	add	r3, r6
  405cf4:	f893 5034 	ldrb.w	r5, [r3, #52]	; 0x34
  405cf8:	3701      	adds	r7, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  405cfa:	6a71      	ldr	r1, [r6, #36]	; 0x24
  405cfc:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  405d00:	4630      	mov	r0, r6
  405d02:	4b25      	ldr	r3, [pc, #148]	; (405d98 <get_fat+0xe4>)
  405d04:	4798      	blx	r3
  405d06:	b110      	cbz	r0, 405d0e <get_fat+0x5a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  405d08:	f04f 30ff 	mov.w	r0, #4294967295
  405d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc |= fs->win[bc % SS(fs)] << 8;
  405d0e:	f3c7 0708 	ubfx	r7, r7, #0, #9
  405d12:	19f0      	adds	r0, r6, r7
  405d14:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
  405d18:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  405d1c:	f014 0f01 	tst.w	r4, #1
  405d20:	bf14      	ite	ne
  405d22:	0900      	lsrne	r0, r0, #4
  405d24:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
  405d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  405d2a:	6a41      	ldr	r1, [r0, #36]	; 0x24
  405d2c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  405d30:	4b19      	ldr	r3, [pc, #100]	; (405d98 <get_fat+0xe4>)
  405d32:	4798      	blx	r3
  405d34:	b110      	cbz	r0, 405d3c <get_fat+0x88>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  405d36:	f04f 30ff 	mov.w	r0, #4294967295
  405d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = &fs->win[clst * 2 % SS(fs)];
  405d3c:	0060      	lsls	r0, r4, #1
  405d3e:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
		return LD_WORD(p);
  405d42:	4430      	add	r0, r6
  405d44:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
  405d48:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
  405d4c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  405d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  405d52:	6a41      	ldr	r1, [r0, #36]	; 0x24
  405d54:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  405d58:	4b0f      	ldr	r3, [pc, #60]	; (405d98 <get_fat+0xe4>)
  405d5a:	4798      	blx	r3
  405d5c:	b110      	cbz	r0, 405d64 <get_fat+0xb0>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  405d5e:	f04f 30ff 	mov.w	r0, #4294967295
}
  405d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = &fs->win[clst * 4 % SS(fs)];
  405d64:	00a0      	lsls	r0, r4, #2
  405d66:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
  405d6a:	f100 0234 	add.w	r2, r0, #52	; 0x34
  405d6e:	4432      	add	r2, r6
		return LD_DWORD(p) & 0x0FFFFFFF;
  405d70:	78d1      	ldrb	r1, [r2, #3]
  405d72:	7893      	ldrb	r3, [r2, #2]
  405d74:	041b      	lsls	r3, r3, #16
  405d76:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  405d7a:	4430      	add	r0, r6
  405d7c:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
  405d80:	4318      	orrs	r0, r3
  405d82:	7853      	ldrb	r3, [r2, #1]
  405d84:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  405d88:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  405d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  405d8e:	2001      	movs	r0, #1
  405d90:	4770      	bx	lr
  405d92:	2001      	movs	r0, #1
  405d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405d96:	bf00      	nop
  405d98:	00405c25 	.word	0x00405c25

00405d9c <dir_sdi>:
{
  405d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405d9e:	4605      	mov	r5, r0
  405da0:	460c      	mov	r4, r1
	dj->index = idx;
  405da2:	80c1      	strh	r1, [r0, #6]
	clst = dj->sclust;
  405da4:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
  405da6:	2901      	cmp	r1, #1
  405da8:	d03d      	beq.n	405e26 <dir_sdi+0x8a>
  405daa:	6803      	ldr	r3, [r0, #0]
  405dac:	69da      	ldr	r2, [r3, #28]
  405dae:	4291      	cmp	r1, r2
  405db0:	d301      	bcc.n	405db6 <dir_sdi+0x1a>
		return FR_INT_ERR;
  405db2:	2002      	movs	r0, #2
  405db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
  405db6:	b961      	cbnz	r1, 405dd2 <dir_sdi+0x36>
  405db8:	781a      	ldrb	r2, [r3, #0]
  405dba:	2a03      	cmp	r2, #3
  405dbc:	d006      	beq.n	405dcc <dir_sdi+0x30>
		dj->clust = clst;
  405dbe:	2200      	movs	r2, #0
  405dc0:	60ea      	str	r2, [r5, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
  405dc2:	891a      	ldrh	r2, [r3, #8]
  405dc4:	42a2      	cmp	r2, r4
  405dc6:	d821      	bhi.n	405e0c <dir_sdi+0x70>
			return FR_INT_ERR;
  405dc8:	2002      	movs	r0, #2
  405dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		clst = dj->fs->dirbase;
  405dcc:	6a99      	ldr	r1, [r3, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
  405dce:	2900      	cmp	r1, #0
  405dd0:	d0f5      	beq.n	405dbe <dir_sdi+0x22>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
  405dd2:	789e      	ldrb	r6, [r3, #2]
  405dd4:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
  405dd6:	42b4      	cmp	r4, r6
  405dd8:	d310      	bcc.n	405dfc <dir_sdi+0x60>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
  405dda:	4f17      	ldr	r7, [pc, #92]	; (405e38 <dir_sdi+0x9c>)
  405ddc:	6828      	ldr	r0, [r5, #0]
  405dde:	47b8      	blx	r7
  405de0:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  405de2:	f1b0 3fff 	cmp.w	r0, #4294967295
  405de6:	d020      	beq.n	405e2a <dir_sdi+0x8e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
  405de8:	2801      	cmp	r0, #1
  405dea:	d920      	bls.n	405e2e <dir_sdi+0x92>
  405dec:	682b      	ldr	r3, [r5, #0]
  405dee:	69db      	ldr	r3, [r3, #28]
  405df0:	4298      	cmp	r0, r3
  405df2:	d21e      	bcs.n	405e32 <dir_sdi+0x96>
			idx -= ic;
  405df4:	1ba4      	subs	r4, r4, r6
  405df6:	b2a4      	uxth	r4, r4
		while (idx >= ic) {	/* Follow cluster chain */
  405df8:	42a6      	cmp	r6, r4
  405dfa:	d9ef      	bls.n	405ddc <dir_sdi+0x40>
		dj->clust = clst;
  405dfc:	60e9      	str	r1, [r5, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  405dfe:	6828      	ldr	r0, [r5, #0]
  405e00:	4b0e      	ldr	r3, [pc, #56]	; (405e3c <dir_sdi+0xa0>)
  405e02:	4798      	blx	r3
  405e04:	eb00 1014 	add.w	r0, r0, r4, lsr #4
  405e08:	6128      	str	r0, [r5, #16]
  405e0a:	e003      	b.n	405e14 <dir_sdi+0x78>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  405e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  405e0e:	eb03 1314 	add.w	r3, r3, r4, lsr #4
  405e12:	612b      	str	r3, [r5, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
  405e14:	682b      	ldr	r3, [r5, #0]
  405e16:	3334      	adds	r3, #52	; 0x34
  405e18:	f004 040f 	and.w	r4, r4, #15
  405e1c:	eb03 1444 	add.w	r4, r3, r4, lsl #5
  405e20:	616c      	str	r4, [r5, #20]
	return FR_OK;	/* Seek succeeded */
  405e22:	2000      	movs	r0, #0
  405e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FR_INT_ERR;
  405e26:	2002      	movs	r0, #2
  405e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  405e2a:	2001      	movs	r0, #1
  405e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return FR_INT_ERR;
  405e2e:	2002      	movs	r0, #2
  405e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405e32:	2002      	movs	r0, #2
}
  405e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405e36:	bf00      	nop
  405e38:	00405cb5 	.word	0x00405cb5
  405e3c:	0040567f 	.word	0x0040567f

00405e40 <put_fat>:
{
  405e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  405e44:	2901      	cmp	r1, #1
  405e46:	f240 808f 	bls.w	405f68 <put_fat+0x128>
  405e4a:	69c3      	ldr	r3, [r0, #28]
  405e4c:	4299      	cmp	r1, r3
  405e4e:	d301      	bcc.n	405e54 <put_fat+0x14>
		res = FR_INT_ERR;
  405e50:	2702      	movs	r7, #2
	return res;
  405e52:	e08a      	b.n	405f6a <put_fat+0x12a>
  405e54:	4615      	mov	r5, r2
  405e56:	460c      	mov	r4, r1
  405e58:	4606      	mov	r6, r0
		switch (fs->fs_type) {
  405e5a:	7803      	ldrb	r3, [r0, #0]
  405e5c:	2b02      	cmp	r3, #2
  405e5e:	d04e      	beq.n	405efe <put_fat+0xbe>
  405e60:	2b03      	cmp	r3, #3
  405e62:	d05f      	beq.n	405f24 <put_fat+0xe4>
  405e64:	2b01      	cmp	r3, #1
  405e66:	d003      	beq.n	405e70 <put_fat+0x30>
			res = FR_INT_ERR;
  405e68:	2702      	movs	r7, #2
		fs->wflag = 1;
  405e6a:	2301      	movs	r3, #1
  405e6c:	7133      	strb	r3, [r6, #4]
  405e6e:	e07c      	b.n	405f6a <put_fat+0x12a>
			bc = clst; bc += bc / 2;
  405e70:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  405e74:	6a41      	ldr	r1, [r0, #36]	; 0x24
  405e76:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  405e7a:	4b3d      	ldr	r3, [pc, #244]	; (405f70 <put_fat+0x130>)
  405e7c:	4798      	blx	r3
			if (res != FR_OK) break;
  405e7e:	4607      	mov	r7, r0
  405e80:	2800      	cmp	r0, #0
  405e82:	d1f2      	bne.n	405e6a <put_fat+0x2a>
			p = &fs->win[bc % SS(fs)];
  405e84:	f3c8 0308 	ubfx	r3, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  405e88:	f014 0f01 	tst.w	r4, #1
  405e8c:	d01c      	beq.n	405ec8 <put_fat+0x88>
  405e8e:	4433      	add	r3, r6
  405e90:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
  405e94:	f002 020f 	and.w	r2, r2, #15
  405e98:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  405e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			bc++;
  405ea0:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  405ea4:	2301      	movs	r3, #1
  405ea6:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  405ea8:	6a71      	ldr	r1, [r6, #36]	; 0x24
  405eaa:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  405eae:	4630      	mov	r0, r6
  405eb0:	4b2f      	ldr	r3, [pc, #188]	; (405f70 <put_fat+0x130>)
  405eb2:	4798      	blx	r3
			if (res != FR_OK) break;
  405eb4:	2800      	cmp	r0, #0
  405eb6:	d153      	bne.n	405f60 <put_fat+0x120>
			p = &fs->win[bc % SS(fs)];
  405eb8:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  405ebc:	f3c5 1207 	ubfx	r2, r5, #4, #8
  405ec0:	44b0      	add	r8, r6
  405ec2:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
			break;
  405ec6:	e7d0      	b.n	405e6a <put_fat+0x2a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  405ec8:	4433      	add	r3, r6
  405eca:	f883 5034 	strb.w	r5, [r3, #52]	; 0x34
			bc++;
  405ece:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
  405ed2:	2301      	movs	r3, #1
  405ed4:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  405ed6:	6a71      	ldr	r1, [r6, #36]	; 0x24
  405ed8:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  405edc:	4630      	mov	r0, r6
  405ede:	4b24      	ldr	r3, [pc, #144]	; (405f70 <put_fat+0x130>)
  405ee0:	4798      	blx	r3
			if (res != FR_OK) break;
  405ee2:	2800      	cmp	r0, #0
  405ee4:	d13e      	bne.n	405f64 <put_fat+0x124>
			p = &fs->win[bc % SS(fs)];
  405ee6:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  405eea:	eb06 0308 	add.w	r3, r6, r8
  405eee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
  405ef2:	f023 030f 	bic.w	r3, r3, #15
  405ef6:	f3c5 2203 	ubfx	r2, r5, #8, #4
  405efa:	431a      	orrs	r2, r3
  405efc:	e7e0      	b.n	405ec0 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
  405efe:	6a41      	ldr	r1, [r0, #36]	; 0x24
  405f00:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  405f04:	4b1a      	ldr	r3, [pc, #104]	; (405f70 <put_fat+0x130>)
  405f06:	4798      	blx	r3
			if (res != FR_OK) break;
  405f08:	4607      	mov	r7, r0
  405f0a:	2800      	cmp	r0, #0
  405f0c:	d1ad      	bne.n	405e6a <put_fat+0x2a>
			p = &fs->win[clst * 2 % SS(fs)];
  405f0e:	0063      	lsls	r3, r4, #1
  405f10:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
  405f14:	4433      	add	r3, r6
  405f16:	f883 5034 	strb.w	r5, [r3, #52]	; 0x34
  405f1a:	f3c5 2207 	ubfx	r2, r5, #8, #8
  405f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
			break;
  405f22:	e7a2      	b.n	405e6a <put_fat+0x2a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
  405f24:	6a41      	ldr	r1, [r0, #36]	; 0x24
  405f26:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  405f2a:	4b11      	ldr	r3, [pc, #68]	; (405f70 <put_fat+0x130>)
  405f2c:	4798      	blx	r3
			if (res != FR_OK) break;
  405f2e:	4607      	mov	r7, r0
  405f30:	2800      	cmp	r0, #0
  405f32:	d19a      	bne.n	405e6a <put_fat+0x2a>
			p = &fs->win[clst * 4 % SS(fs)];
  405f34:	00a1      	lsls	r1, r4, #2
  405f36:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
  405f3a:	f101 0334 	add.w	r3, r1, #52	; 0x34
  405f3e:	4433      	add	r3, r6
			val |= LD_DWORD(p) & 0xF0000000;
  405f40:	78da      	ldrb	r2, [r3, #3]
  405f42:	0612      	lsls	r2, r2, #24
  405f44:	4431      	add	r1, r6
  405f46:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
  405f4a:	432a      	orrs	r2, r5
			ST_DWORD(p, val);
  405f4c:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34
  405f50:	f3c2 2107 	ubfx	r1, r2, #8, #8
  405f54:	7059      	strb	r1, [r3, #1]
  405f56:	0c11      	lsrs	r1, r2, #16
  405f58:	7099      	strb	r1, [r3, #2]
  405f5a:	0e12      	lsrs	r2, r2, #24
  405f5c:	70da      	strb	r2, [r3, #3]
			break;
  405f5e:	e784      	b.n	405e6a <put_fat+0x2a>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  405f60:	4607      	mov	r7, r0
  405f62:	e782      	b.n	405e6a <put_fat+0x2a>
  405f64:	4607      	mov	r7, r0
  405f66:	e780      	b.n	405e6a <put_fat+0x2a>
		res = FR_INT_ERR;
  405f68:	2702      	movs	r7, #2
}
  405f6a:	4638      	mov	r0, r7
  405f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405f70:	00405c25 	.word	0x00405c25

00405f74 <create_chain>:
{
  405f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405f78:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
  405f7a:	4688      	mov	r8, r1
  405f7c:	b941      	cbnz	r1, 405f90 <create_chain+0x1c>
		scl = fs->last_clust;			/* Get suggested start point */
  405f7e:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
  405f80:	b186      	cbz	r6, 405fa4 <create_chain+0x30>
  405f82:	69c3      	ldr	r3, [r0, #28]
  405f84:	429e      	cmp	r6, r3
  405f86:	bf28      	it	cs
  405f88:	2601      	movcs	r6, #1
	ncl = scl;				/* Start cluster */
  405f8a:	4634      	mov	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  405f8c:	4f27      	ldr	r7, [pc, #156]	; (40602c <create_chain+0xb8>)
  405f8e:	e017      	b.n	405fc0 <create_chain+0x4c>
		cs = get_fat(fs, clst);			/* Check the cluster status */
  405f90:	4b26      	ldr	r3, [pc, #152]	; (40602c <create_chain+0xb8>)
  405f92:	4798      	blx	r3
  405f94:	4603      	mov	r3, r0
		if (cs < 2) return 1;			/* It is an invalid cluster */
  405f96:	2801      	cmp	r0, #1
  405f98:	d93e      	bls.n	406018 <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
  405f9a:	69ea      	ldr	r2, [r5, #28]
  405f9c:	4290      	cmp	r0, r2
  405f9e:	d340      	bcc.n	406022 <create_chain+0xae>
		scl = clst;
  405fa0:	4646      	mov	r6, r8
  405fa2:	e7f2      	b.n	405f8a <create_chain+0x16>
		if (!scl || scl >= fs->n_fatent) scl = 1;
  405fa4:	2601      	movs	r6, #1
  405fa6:	e7f0      	b.n	405f8a <create_chain+0x16>
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  405fa8:	4621      	mov	r1, r4
  405faa:	4628      	mov	r0, r5
  405fac:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
  405fae:	4603      	mov	r3, r0
  405fb0:	b170      	cbz	r0, 405fd0 <create_chain+0x5c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
  405fb2:	f1b0 3fff 	cmp.w	r0, #4294967295
  405fb6:	d034      	beq.n	406022 <create_chain+0xae>
  405fb8:	2801      	cmp	r0, #1
  405fba:	d032      	beq.n	406022 <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
  405fbc:	42b4      	cmp	r4, r6
  405fbe:	d02f      	beq.n	406020 <create_chain+0xac>
		ncl++;							/* Next cluster */
  405fc0:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
  405fc2:	69eb      	ldr	r3, [r5, #28]
  405fc4:	429c      	cmp	r4, r3
  405fc6:	d3ef      	bcc.n	405fa8 <create_chain+0x34>
			if (ncl > scl) return 0;	/* No free cluster */
  405fc8:	2e01      	cmp	r6, #1
  405fca:	d927      	bls.n	40601c <create_chain+0xa8>
			ncl = 2;
  405fcc:	2402      	movs	r4, #2
  405fce:	e7eb      	b.n	405fa8 <create_chain+0x34>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
  405fd0:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
  405fd4:	4621      	mov	r1, r4
  405fd6:	4628      	mov	r0, r5
  405fd8:	4b15      	ldr	r3, [pc, #84]	; (406030 <create_chain+0xbc>)
  405fda:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
  405fdc:	4603      	mov	r3, r0
  405fde:	b9a8      	cbnz	r0, 40600c <create_chain+0x98>
  405fe0:	f1b8 0f00 	cmp.w	r8, #0
  405fe4:	d10a      	bne.n	405ffc <create_chain+0x88>
		fs->last_clust = ncl;			/* Update FSINFO */
  405fe6:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
  405fe8:	692b      	ldr	r3, [r5, #16]
  405fea:	f1b3 3fff 	cmp.w	r3, #4294967295
  405fee:	d01b      	beq.n	406028 <create_chain+0xb4>
			fs->free_clust--;
  405ff0:	3b01      	subs	r3, #1
  405ff2:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
  405ff4:	2301      	movs	r3, #1
  405ff6:	716b      	strb	r3, [r5, #5]
  405ff8:	4623      	mov	r3, r4
  405ffa:	e012      	b.n	406022 <create_chain+0xae>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
  405ffc:	4622      	mov	r2, r4
  405ffe:	4641      	mov	r1, r8
  406000:	4628      	mov	r0, r5
  406002:	4b0b      	ldr	r3, [pc, #44]	; (406030 <create_chain+0xbc>)
  406004:	4798      	blx	r3
	if (res == FR_OK) {
  406006:	4603      	mov	r3, r0
  406008:	2800      	cmp	r0, #0
  40600a:	d0ec      	beq.n	405fe6 <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  40600c:	2b01      	cmp	r3, #1
  40600e:	bf0c      	ite	eq
  406010:	f04f 33ff 	moveq.w	r3, #4294967295
  406014:	2301      	movne	r3, #1
  406016:	e004      	b.n	406022 <create_chain+0xae>
		if (cs < 2) return 1;			/* It is an invalid cluster */
  406018:	2301      	movs	r3, #1
  40601a:	e002      	b.n	406022 <create_chain+0xae>
			if (ncl > scl) return 0;	/* No free cluster */
  40601c:	2300      	movs	r3, #0
  40601e:	e000      	b.n	406022 <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
  406020:	2300      	movs	r3, #0
}
  406022:	4618      	mov	r0, r3
  406024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406028:	4623      	mov	r3, r4
  40602a:	e7fa      	b.n	406022 <create_chain+0xae>
  40602c:	00405cb5 	.word	0x00405cb5
  406030:	00405e41 	.word	0x00405e41

00406034 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  406034:	2901      	cmp	r1, #1
  406036:	d92e      	bls.n	406096 <remove_chain+0x62>
{
  406038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40603c:	4604      	mov	r4, r0
  40603e:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  406040:	69c3      	ldr	r3, [r0, #28]
  406042:	4299      	cmp	r1, r3
  406044:	d303      	bcc.n	40604e <remove_chain+0x1a>
		res = FR_INT_ERR;
  406046:	2202      	movs	r2, #2
}
  406048:	4610      	mov	r0, r2
  40604a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
  40604e:	4f16      	ldr	r7, [pc, #88]	; (4060a8 <remove_chain+0x74>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  406050:	f04f 0900 	mov.w	r9, #0
  406054:	f8df 8054 	ldr.w	r8, [pc, #84]	; 4060ac <remove_chain+0x78>
  406058:	e003      	b.n	406062 <remove_chain+0x2e>
  40605a:	462e      	mov	r6, r5
		while (clst < fs->n_fatent) {			/* Not a last link? */
  40605c:	69e3      	ldr	r3, [r4, #28]
  40605e:	42ab      	cmp	r3, r5
  406060:	d9f2      	bls.n	406048 <remove_chain+0x14>
			nxt = get_fat(fs, clst);			/* Get cluster status */
  406062:	4631      	mov	r1, r6
  406064:	4620      	mov	r0, r4
  406066:	47b8      	blx	r7
			if (nxt == 0) break;				/* Empty cluster? */
  406068:	4605      	mov	r5, r0
  40606a:	b1b8      	cbz	r0, 40609c <remove_chain+0x68>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  40606c:	2801      	cmp	r0, #1
  40606e:	d017      	beq.n	4060a0 <remove_chain+0x6c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  406070:	f1b0 3fff 	cmp.w	r0, #4294967295
  406074:	d016      	beq.n	4060a4 <remove_chain+0x70>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  406076:	464a      	mov	r2, r9
  406078:	4631      	mov	r1, r6
  40607a:	4620      	mov	r0, r4
  40607c:	47c0      	blx	r8
			if (res != FR_OK) break;
  40607e:	4602      	mov	r2, r0
  406080:	2800      	cmp	r0, #0
  406082:	d1e1      	bne.n	406048 <remove_chain+0x14>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
  406084:	6923      	ldr	r3, [r4, #16]
  406086:	f1b3 3fff 	cmp.w	r3, #4294967295
  40608a:	d0e6      	beq.n	40605a <remove_chain+0x26>
				fs->free_clust++;
  40608c:	3301      	adds	r3, #1
  40608e:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
  406090:	2301      	movs	r3, #1
  406092:	7163      	strb	r3, [r4, #5]
  406094:	e7e1      	b.n	40605a <remove_chain+0x26>
		res = FR_INT_ERR;
  406096:	2202      	movs	r2, #2
}
  406098:	4610      	mov	r0, r2
  40609a:	4770      	bx	lr
  40609c:	2200      	movs	r2, #0
  40609e:	e7d3      	b.n	406048 <remove_chain+0x14>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  4060a0:	2202      	movs	r2, #2
  4060a2:	e7d1      	b.n	406048 <remove_chain+0x14>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  4060a4:	2201      	movs	r2, #1
  4060a6:	e7cf      	b.n	406048 <remove_chain+0x14>
  4060a8:	00405cb5 	.word	0x00405cb5
  4060ac:	00405e41 	.word	0x00405e41

004060b0 <dir_next>:
{
  4060b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = dj->index + 1;
  4060b4:	88c4      	ldrh	r4, [r0, #6]
  4060b6:	3401      	adds	r4, #1
  4060b8:	b2a4      	uxth	r4, r4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  4060ba:	b914      	cbnz	r4, 4060c2 <dir_next+0x12>
		return FR_NO_FILE;
  4060bc:	2004      	movs	r0, #4
  4060be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  4060c2:	6903      	ldr	r3, [r0, #16]
  4060c4:	b913      	cbnz	r3, 4060cc <dir_next+0x1c>
		return FR_NO_FILE;
  4060c6:	2004      	movs	r0, #4
  4060c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4060cc:	460e      	mov	r6, r1
  4060ce:	4605      	mov	r5, r0
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
  4060d0:	f014 070f 	ands.w	r7, r4, #15
  4060d4:	d110      	bne.n	4060f8 <dir_next+0x48>
		dj->sect++;					/* Next sector */
  4060d6:	3301      	adds	r3, #1
  4060d8:	6103      	str	r3, [r0, #16]
		if (dj->clust == 0) {	/* Static table */
  4060da:	68c1      	ldr	r1, [r0, #12]
  4060dc:	b931      	cbnz	r1, 4060ec <dir_next+0x3c>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
  4060de:	6803      	ldr	r3, [r0, #0]
  4060e0:	891b      	ldrh	r3, [r3, #8]
  4060e2:	42a3      	cmp	r3, r4
  4060e4:	d808      	bhi.n	4060f8 <dir_next+0x48>
				return FR_NO_FILE;
  4060e6:	2004      	movs	r0, #4
  4060e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
  4060ec:	6800      	ldr	r0, [r0, #0]
  4060ee:	7883      	ldrb	r3, [r0, #2]
  4060f0:	3b01      	subs	r3, #1
  4060f2:	ea13 1314 	ands.w	r3, r3, r4, lsr #4
  4060f6:	d008      	beq.n	40610a <dir_next+0x5a>
	dj->index = i;
  4060f8:	80ec      	strh	r4, [r5, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
  4060fa:	682b      	ldr	r3, [r5, #0]
  4060fc:	3334      	adds	r3, #52	; 0x34
  4060fe:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  406102:	616b      	str	r3, [r5, #20]
	return FR_OK;
  406104:	2000      	movs	r0, #0
  406106:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
  40610a:	4b32      	ldr	r3, [pc, #200]	; (4061d4 <dir_next+0x124>)
  40610c:	4798      	blx	r3
  40610e:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
  406110:	2801      	cmp	r0, #1
  406112:	d94d      	bls.n	4061b0 <dir_next+0x100>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  406114:	f1b0 3fff 	cmp.w	r0, #4294967295
  406118:	d04d      	beq.n	4061b6 <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
  40611a:	6828      	ldr	r0, [r5, #0]
  40611c:	69c3      	ldr	r3, [r0, #28]
  40611e:	4598      	cmp	r8, r3
  406120:	d33e      	bcc.n	4061a0 <dir_next+0xf0>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
  406122:	b916      	cbnz	r6, 40612a <dir_next+0x7a>
  406124:	2004      	movs	r0, #4
  406126:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
  40612a:	68e9      	ldr	r1, [r5, #12]
  40612c:	4b2a      	ldr	r3, [pc, #168]	; (4061d8 <dir_next+0x128>)
  40612e:	4798      	blx	r3
					if (clst == 0) return FR_DENIED;			/* No free cluster */
  406130:	4680      	mov	r8, r0
  406132:	b910      	cbnz	r0, 40613a <dir_next+0x8a>
  406134:	2007      	movs	r0, #7
  406136:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  40613a:	2801      	cmp	r0, #1
  40613c:	d03e      	beq.n	4061bc <dir_next+0x10c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  40613e:	f1b0 3fff 	cmp.w	r0, #4294967295
  406142:	d03e      	beq.n	4061c2 <dir_next+0x112>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  406144:	2100      	movs	r1, #0
  406146:	6828      	ldr	r0, [r5, #0]
  406148:	4b24      	ldr	r3, [pc, #144]	; (4061dc <dir_next+0x12c>)
  40614a:	4798      	blx	r3
  40614c:	2800      	cmp	r0, #0
  40614e:	d13b      	bne.n	4061c8 <dir_next+0x118>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
  406150:	6828      	ldr	r0, [r5, #0]
  406152:	f44f 7200 	mov.w	r2, #512	; 0x200
  406156:	2100      	movs	r1, #0
  406158:	3034      	adds	r0, #52	; 0x34
  40615a:	4b21      	ldr	r3, [pc, #132]	; (4061e0 <dir_next+0x130>)
  40615c:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
  40615e:	682e      	ldr	r6, [r5, #0]
  406160:	4641      	mov	r1, r8
  406162:	4630      	mov	r0, r6
  406164:	4b1f      	ldr	r3, [pc, #124]	; (4061e4 <dir_next+0x134>)
  406166:	4798      	blx	r3
  406168:	6330      	str	r0, [r6, #48]	; 0x30
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  40616a:	2600      	movs	r6, #0
						dj->fs->wflag = 1;
  40616c:	f04f 0b01 	mov.w	fp, #1
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  406170:	46b2      	mov	sl, r6
  406172:	f8df 9068 	ldr.w	r9, [pc, #104]	; 4061dc <dir_next+0x12c>
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  406176:	682b      	ldr	r3, [r5, #0]
  406178:	7899      	ldrb	r1, [r3, #2]
  40617a:	b2f2      	uxtb	r2, r6
  40617c:	4291      	cmp	r1, r2
  40617e:	d90b      	bls.n	406198 <dir_next+0xe8>
						dj->fs->wflag = 1;
  406180:	f883 b004 	strb.w	fp, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  406184:	4651      	mov	r1, sl
  406186:	6828      	ldr	r0, [r5, #0]
  406188:	47c8      	blx	r9
  40618a:	3601      	adds	r6, #1
  40618c:	b9f8      	cbnz	r0, 4061ce <dir_next+0x11e>
						dj->fs->winsect++;
  40618e:	682a      	ldr	r2, [r5, #0]
  406190:	6b13      	ldr	r3, [r2, #48]	; 0x30
  406192:	3301      	adds	r3, #1
  406194:	6313      	str	r3, [r2, #48]	; 0x30
  406196:	e7ee      	b.n	406176 <dir_next+0xc6>
					dj->fs->winsect -= c;						/* Rewind window address */
  406198:	4616      	mov	r6, r2
  40619a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40619c:	1b96      	subs	r6, r2, r6
  40619e:	631e      	str	r6, [r3, #48]	; 0x30
				dj->clust = clst;				/* Initialize data for new cluster */
  4061a0:	f8c5 800c 	str.w	r8, [r5, #12]
				dj->sect = clust2sect(dj->fs, clst);
  4061a4:	4641      	mov	r1, r8
  4061a6:	6828      	ldr	r0, [r5, #0]
  4061a8:	4b0e      	ldr	r3, [pc, #56]	; (4061e4 <dir_next+0x134>)
  4061aa:	4798      	blx	r3
  4061ac:	6128      	str	r0, [r5, #16]
  4061ae:	e7a3      	b.n	4060f8 <dir_next+0x48>
				if (clst <= 1) return FR_INT_ERR;
  4061b0:	2002      	movs	r0, #2
  4061b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  4061b6:	2001      	movs	r0, #1
  4061b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 1) return FR_INT_ERR;
  4061bc:	2002      	movs	r0, #2
  4061be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  4061c2:	2001      	movs	r0, #1
  4061c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  4061c8:	2001      	movs	r0, #1
  4061ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  4061ce:	2001      	movs	r0, #1
}
  4061d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4061d4:	00405cb5 	.word	0x00405cb5
  4061d8:	00405f75 	.word	0x00405f75
  4061dc:	00405c25 	.word	0x00405c25
  4061e0:	00405671 	.word	0x00405671
  4061e4:	0040567f 	.word	0x0040567f

004061e8 <dir_find>:
{
  4061e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4061ec:	b085      	sub	sp, #20
  4061ee:	4605      	mov	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
  4061f0:	2100      	movs	r1, #0
  4061f2:	4b62      	ldr	r3, [pc, #392]	; (40637c <dir_find+0x194>)
  4061f4:	4798      	blx	r3
	if (res != FR_OK) return res;
  4061f6:	4680      	mov	r8, r0
  4061f8:	bb08      	cbnz	r0, 40623e <dir_find+0x56>
  4061fa:	f04f 0bff 	mov.w	fp, #255	; 0xff
  4061fe:	46d9      	mov	r9, fp
		res = move_window(dj->fs, dj->sect);
  406200:	4f5f      	ldr	r7, [pc, #380]	; (406380 <dir_find+0x198>)
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  406202:	46da      	mov	sl, fp
  406204:	e095      	b.n	406332 <dir_find+0x14a>
			if (a == AM_LFN) {			/* An LFN entry is found */
  406206:	2a0f      	cmp	r2, #15
  406208:	d01d      	beq.n	406246 <dir_find+0x5e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
  40620a:	f1b9 0f00 	cmp.w	r9, #0
  40620e:	d104      	bne.n	40621a <dir_find+0x32>
  406210:	4620      	mov	r0, r4
  406212:	4b5c      	ldr	r3, [pc, #368]	; (406384 <dir_find+0x19c>)
  406214:	4798      	blx	r3
  406216:	4582      	cmp	sl, r0
  406218:	d011      	beq.n	40623e <dir_find+0x56>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  40621a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40621e:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
  406220:	69ab      	ldr	r3, [r5, #24]
  406222:	7ada      	ldrb	r2, [r3, #11]
  406224:	f012 0f01 	tst.w	r2, #1
  406228:	d17a      	bne.n	406320 <dir_find+0x138>
  40622a:	f104 000b 	add.w	r0, r4, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
  40622e:	f814 1b01 	ldrb.w	r1, [r4], #1
  406232:	f813 2b01 	ldrb.w	r2, [r3], #1
  406236:	4291      	cmp	r1, r2
  406238:	d16c      	bne.n	406314 <dir_find+0x12c>
  40623a:	42a0      	cmp	r0, r4
  40623c:	d1f7      	bne.n	40622e <dir_find+0x46>
}
  40623e:	4640      	mov	r0, r8
  406240:	b005      	add	sp, #20
  406242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (dj->lfn) {
  406246:	f8d5 801c 	ldr.w	r8, [r5, #28]
  40624a:	f1b8 0f00 	cmp.w	r8, #0
  40624e:	d069      	beq.n	406324 <dir_find+0x13c>
					if (c & LLE) {		/* Is it start of LFN sequence? */
  406250:	f016 0f40 	tst.w	r6, #64	; 0x40
  406254:	d00c      	beq.n	406270 <dir_find+0x88>
						sum = dir[LDIR_Chksum];
  406256:	f894 a00d 	ldrb.w	sl, [r4, #13]
						c &= ~LLE; ord = c;	/* LFN start order */
  40625a:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						dj->lfn_idx = dj->index;
  40625e:	88eb      	ldrh	r3, [r5, #6]
  406260:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  406262:	f894 b00d 	ldrb.w	fp, [r4, #13]
  406266:	45d3      	cmp	fp, sl
  406268:	d008      	beq.n	40627c <dir_find+0x94>
  40626a:	f04f 09ff 	mov.w	r9, #255	; 0xff
  40626e:	e059      	b.n	406324 <dir_find+0x13c>
  406270:	45b1      	cmp	r9, r6
  406272:	bf18      	it	ne
  406274:	f04f 09ff 	movne.w	r9, #255	; 0xff
  406278:	d154      	bne.n	406324 <dir_find+0x13c>
  40627a:	e7f2      	b.n	406262 <dir_find+0x7a>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
  40627c:	f894 a000 	ldrb.w	sl, [r4]
  406280:	f02a 0a40 	bic.w	sl, sl, #64	; 0x40
  406284:	f10a 3aff 	add.w	sl, sl, #4294967295
  406288:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
  40628c:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  406290:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 406390 <dir_find+0x1a8>
  406294:	f109 0a0d 	add.w	sl, r9, #13
	s = 0; wc = 1;
  406298:	2001      	movs	r0, #1
			if (uc != 0xFFFF) return 0;	/* Check filler */
  40629a:	9603      	str	r6, [sp, #12]
  40629c:	f8cd b004 	str.w	fp, [sp, #4]
  4062a0:	461e      	mov	r6, r3
  4062a2:	9502      	str	r5, [sp, #8]
  4062a4:	e00f      	b.n	4062c6 <dir_find+0xde>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  4062a6:	4618      	mov	r0, r3
  4062a8:	4b37      	ldr	r3, [pc, #220]	; (406388 <dir_find+0x1a0>)
  4062aa:	4798      	blx	r3
  4062ac:	4683      	mov	fp, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  4062ae:	2efe      	cmp	r6, #254	; 0xfe
  4062b0:	d85b      	bhi.n	40636a <dir_find+0x182>
  4062b2:	1c75      	adds	r5, r6, #1
  4062b4:	f838 0016 	ldrh.w	r0, [r8, r6, lsl #1]
  4062b8:	4b33      	ldr	r3, [pc, #204]	; (406388 <dir_find+0x1a0>)
  4062ba:	4798      	blx	r3
  4062bc:	4583      	cmp	fp, r0
  4062be:	d158      	bne.n	406372 <dir_find+0x18a>
  4062c0:	462e      	mov	r6, r5
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
  4062c2:	45d1      	cmp	r9, sl
  4062c4:	d013      	beq.n	4062ee <dir_find+0x106>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  4062c6:	f819 2b01 	ldrb.w	r2, [r9], #1
  4062ca:	18a3      	adds	r3, r4, r2
  4062cc:	7859      	ldrb	r1, [r3, #1]
  4062ce:	5ca3      	ldrb	r3, [r4, r2]
  4062d0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
		if (wc) {	/* Last char has not been processed */
  4062d4:	2800      	cmp	r0, #0
  4062d6:	d1e6      	bne.n	4062a6 <dir_find+0xbe>
			if (uc != 0xFFFF) return 0;	/* Check filler */
  4062d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4062dc:	4293      	cmp	r3, r2
  4062de:	d0f0      	beq.n	4062c2 <dir_find+0xda>
  4062e0:	f8dd b004 	ldr.w	fp, [sp, #4]
  4062e4:	9d02      	ldr	r5, [sp, #8]
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  4062e6:	46da      	mov	sl, fp
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  4062e8:	f04f 09ff 	mov.w	r9, #255	; 0xff
  4062ec:	e01a      	b.n	406324 <dir_find+0x13c>
  4062ee:	f8dd b004 	ldr.w	fp, [sp, #4]
  4062f2:	4632      	mov	r2, r6
  4062f4:	9e03      	ldr	r6, [sp, #12]
  4062f6:	9d02      	ldr	r5, [sp, #8]
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
  4062f8:	7823      	ldrb	r3, [r4, #0]
  4062fa:	f013 0f40 	tst.w	r3, #64	; 0x40
  4062fe:	d004      	beq.n	40630a <dir_find+0x122>
  406300:	b118      	cbz	r0, 40630a <dir_find+0x122>
  406302:	f838 3012 	ldrh.w	r3, [r8, r2, lsl #1]
  406306:	2b00      	cmp	r3, #0
  406308:	d1ed      	bne.n	4062e6 <dir_find+0xfe>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  40630a:	3e01      	subs	r6, #1
  40630c:	fa5f f986 	uxtb.w	r9, r6
  406310:	46da      	mov	sl, fp
  406312:	e007      	b.n	406324 <dir_find+0x13c>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  406314:	f04f 09ff 	mov.w	r9, #255	; 0xff
  406318:	e004      	b.n	406324 <dir_find+0x13c>
			ord = 0xFF;
  40631a:	f04f 09ff 	mov.w	r9, #255	; 0xff
  40631e:	e001      	b.n	406324 <dir_find+0x13c>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  406320:	f04f 09ff 	mov.w	r9, #255	; 0xff
		res = dir_next(dj, 0);		/* Next entry */
  406324:	2100      	movs	r1, #0
  406326:	4628      	mov	r0, r5
  406328:	4b18      	ldr	r3, [pc, #96]	; (40638c <dir_find+0x1a4>)
  40632a:	4798      	blx	r3
	} while (res == FR_OK);
  40632c:	4680      	mov	r8, r0
  40632e:	2800      	cmp	r0, #0
  406330:	d185      	bne.n	40623e <dir_find+0x56>
		res = move_window(dj->fs, dj->sect);
  406332:	6929      	ldr	r1, [r5, #16]
  406334:	6828      	ldr	r0, [r5, #0]
  406336:	47b8      	blx	r7
		if (res != FR_OK) break;
  406338:	4680      	mov	r8, r0
  40633a:	2800      	cmp	r0, #0
  40633c:	f47f af7f 	bne.w	40623e <dir_find+0x56>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
  406340:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
  406342:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  406344:	b176      	cbz	r6, 406364 <dir_find+0x17c>
		a = dir[DIR_Attr] & AM_MASK;
  406346:	7ae3      	ldrb	r3, [r4, #11]
  406348:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  40634c:	2ee5      	cmp	r6, #229	; 0xe5
  40634e:	d0e4      	beq.n	40631a <dir_find+0x132>
  406350:	f013 0f08 	tst.w	r3, #8
  406354:	f43f af57 	beq.w	406206 <dir_find+0x1e>
  406358:	2a0f      	cmp	r2, #15
  40635a:	f43f af74 	beq.w	406246 <dir_find+0x5e>
			ord = 0xFF;
  40635e:	f04f 09ff 	mov.w	r9, #255	; 0xff
  406362:	e7df      	b.n	406324 <dir_find+0x13c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  406364:	f04f 0804 	mov.w	r8, #4
  406368:	e769      	b.n	40623e <dir_find+0x56>
  40636a:	f8dd b004 	ldr.w	fp, [sp, #4]
  40636e:	9d02      	ldr	r5, [sp, #8]
  406370:	e7b9      	b.n	4062e6 <dir_find+0xfe>
  406372:	f8dd b004 	ldr.w	fp, [sp, #4]
  406376:	9d02      	ldr	r5, [sp, #8]
  406378:	e7b5      	b.n	4062e6 <dir_find+0xfe>
  40637a:	bf00      	nop
  40637c:	00405d9d 	.word	0x00405d9d
  406380:	00405c25 	.word	0x00405c25
  406384:	00405695 	.word	0x00405695
  406388:	00407ce9 	.word	0x00407ce9
  40638c:	004060b1 	.word	0x004060b1
  406390:	0040ee08 	.word	0x0040ee08

00406394 <dir_register>:
{
  406394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406398:	b089      	sub	sp, #36	; 0x24
  40639a:	4604      	mov	r4, r0
	fn = dj->fn; lfn = dj->lfn;
  40639c:	6985      	ldr	r5, [r0, #24]
  40639e:	f8d0 901c 	ldr.w	r9, [r0, #28]
	mem_cpy(sn, fn, 12);
  4063a2:	220c      	movs	r2, #12
  4063a4:	4629      	mov	r1, r5
  4063a6:	a805      	add	r0, sp, #20
  4063a8:	4bac      	ldr	r3, [pc, #688]	; (40665c <dir_register+0x2c8>)
  4063aa:	4798      	blx	r3
	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
  4063ac:	f89d 301f 	ldrb.w	r3, [sp, #31]
  4063b0:	f013 0f20 	tst.w	r3, #32
  4063b4:	d004      	beq.n	4063c0 <dir_register+0x2c>
		return FR_INVALID_NAME;
  4063b6:	2606      	movs	r6, #6
}
  4063b8:	4630      	mov	r0, r6
  4063ba:	b009      	add	sp, #36	; 0x24
  4063bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
  4063c0:	f013 0f01 	tst.w	r3, #1
  4063c4:	d075      	beq.n	4064b2 <dir_register+0x11e>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
  4063c6:	2300      	movs	r3, #0
  4063c8:	72eb      	strb	r3, [r5, #11]
  4063ca:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
  4063cc:	220b      	movs	r2, #11
  4063ce:	a905      	add	r1, sp, #20
  4063d0:	4628      	mov	r0, r5
  4063d2:	4ba2      	ldr	r3, [pc, #648]	; (40665c <dir_register+0x2c8>)
  4063d4:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
  4063d6:	2701      	movs	r7, #1
  4063d8:	463b      	mov	r3, r7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  4063da:	f04f 0820 	mov.w	r8, #32
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  4063de:	f8df a29c 	ldr.w	sl, [pc, #668]	; 40667c <dir_register+0x2e8>
	mem_cpy(dst, src, 11);
  4063e2:	f8df b278 	ldr.w	fp, [pc, #632]	; 40665c <dir_register+0x2c8>
  4063e6:	e032      	b.n	40644e <dir_register+0xba>
		for (n = 1; n < 100; n++) {
  4063e8:	463b      	mov	r3, r7
  4063ea:	e030      	b.n	40644e <dir_register+0xba>
	for (j = 0; j < i && dst[j] != ' '; j++) {
  4063ec:	4613      	mov	r3, r2
  4063ee:	e002      	b.n	4063f6 <dir_register+0x62>
  4063f0:	2300      	movs	r3, #0
  4063f2:	e000      	b.n	4063f6 <dir_register+0x62>
  4063f4:	4613      	mov	r3, r2
  4063f6:	442b      	add	r3, r5
  4063f8:	e005      	b.n	406406 <dir_register+0x72>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  4063fa:	4641      	mov	r1, r8
  4063fc:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
  406400:	1b59      	subs	r1, r3, r5
  406402:	2907      	cmp	r1, #7
  406404:	d807      	bhi.n	406416 <dir_register+0x82>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  406406:	2a07      	cmp	r2, #7
  406408:	d8f7      	bhi.n	4063fa <dir_register+0x66>
  40640a:	a908      	add	r1, sp, #32
  40640c:	4411      	add	r1, r2
  40640e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
  406412:	3201      	adds	r2, #1
  406414:	e7f2      	b.n	4063fc <dir_register+0x68>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  406416:	4620      	mov	r0, r4
  406418:	47d0      	blx	sl
			if (res != FR_OK) break;
  40641a:	4606      	mov	r6, r0
  40641c:	2800      	cmp	r0, #0
  40641e:	d13e      	bne.n	40649e <dir_register+0x10a>
		for (n = 1; n < 100; n++) {
  406420:	3701      	adds	r7, #1
  406422:	b2bf      	uxth	r7, r7
  406424:	2f64      	cmp	r7, #100	; 0x64
  406426:	d038      	beq.n	40649a <dir_register+0x106>
	mem_cpy(dst, src, 11);
  406428:	220b      	movs	r2, #11
  40642a:	a905      	add	r1, sp, #20
  40642c:	4628      	mov	r0, r5
  40642e:	47d8      	blx	fp
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
  406430:	2f05      	cmp	r7, #5
  406432:	d9d9      	bls.n	4063e8 <dir_register+0x54>
  406434:	463b      	mov	r3, r7
  406436:	4649      	mov	r1, r9
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
  406438:	03da      	lsls	r2, r3, #15
  40643a:	ea42 0353 	orr.w	r3, r2, r3, lsr #1
  40643e:	f831 2b02 	ldrh.w	r2, [r1], #2
  406442:	fa12 f383 	uxtah	r3, r2, r3
  406446:	b29b      	uxth	r3, r3
  406448:	880a      	ldrh	r2, [r1, #0]
  40644a:	2a00      	cmp	r2, #0
  40644c:	d1f4      	bne.n	406438 <dir_register+0xa4>
  40644e:	f10d 0613 	add.w	r6, sp, #19
		for (n = 1; n < 100; n++) {
  406452:	2207      	movs	r2, #7
		c = (seq % 16) + '0';
  406454:	f003 000f 	and.w	r0, r3, #15
  406458:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
  40645c:	2939      	cmp	r1, #57	; 0x39
  40645e:	bf88      	it	hi
  406460:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
  406464:	3a01      	subs	r2, #1
  406466:	f806 1901 	strb.w	r1, [r6], #-1
		seq /= 16;
  40646a:	f3c3 130f 	ubfx	r3, r3, #4, #16
	} while (seq);
  40646e:	2b00      	cmp	r3, #0
  406470:	d1f0      	bne.n	406454 <dir_register+0xc0>
	ns[i] = '~';
  406472:	217e      	movs	r1, #126	; 0x7e
  406474:	ab08      	add	r3, sp, #32
  406476:	4413      	add	r3, r2
  406478:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
  40647c:	2a00      	cmp	r2, #0
  40647e:	d0b5      	beq.n	4063ec <dir_register+0x58>
  406480:	782b      	ldrb	r3, [r5, #0]
  406482:	2b20      	cmp	r3, #32
  406484:	d0b4      	beq.n	4063f0 <dir_register+0x5c>
  406486:	4629      	mov	r1, r5
  406488:	2300      	movs	r3, #0
  40648a:	3301      	adds	r3, #1
  40648c:	429a      	cmp	r2, r3
  40648e:	d0b1      	beq.n	4063f4 <dir_register+0x60>
  406490:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  406494:	2820      	cmp	r0, #32
  406496:	d1f8      	bne.n	40648a <dir_register+0xf6>
  406498:	e7ad      	b.n	4063f6 <dir_register+0x62>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  40649a:	2607      	movs	r6, #7
  40649c:	e78c      	b.n	4063b8 <dir_register+0x24>
  40649e:	2f64      	cmp	r7, #100	; 0x64
  4064a0:	f000 80a0 	beq.w	4065e4 <dir_register+0x250>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
  4064a4:	2804      	cmp	r0, #4
  4064a6:	d187      	bne.n	4063b8 <dir_register+0x24>
		fn[NS] = sn[NS]; dj->lfn = lfn;
  4064a8:	f89d 301f 	ldrb.w	r3, [sp, #31]
  4064ac:	72eb      	strb	r3, [r5, #11]
  4064ae:	f8c4 901c 	str.w	r9, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
  4064b2:	f89d 301f 	ldrb.w	r3, [sp, #31]
  4064b6:	f013 0f02 	tst.w	r3, #2
  4064ba:	d014      	beq.n	4064e6 <dir_register+0x152>
		for (ne = 0; lfn[ne]; ne++) ;
  4064bc:	f8b9 3000 	ldrh.w	r3, [r9]
  4064c0:	b17b      	cbz	r3, 4064e2 <dir_register+0x14e>
  4064c2:	2300      	movs	r3, #0
  4064c4:	3301      	adds	r3, #1
  4064c6:	b29b      	uxth	r3, r3
  4064c8:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
  4064cc:	2a00      	cmp	r2, #0
  4064ce:	d1f9      	bne.n	4064c4 <dir_register+0x130>
		ne = (ne + 25) / 13;
  4064d0:	3319      	adds	r3, #25
  4064d2:	4f63      	ldr	r7, [pc, #396]	; (406660 <dir_register+0x2cc>)
  4064d4:	fb87 2703 	smull	r2, r7, r7, r3
  4064d8:	17db      	asrs	r3, r3, #31
  4064da:	ebc3 07a7 	rsb	r7, r3, r7, asr #2
  4064de:	b2bf      	uxth	r7, r7
  4064e0:	e002      	b.n	4064e8 <dir_register+0x154>
		for (ne = 0; lfn[ne]; ne++) ;
  4064e2:	2300      	movs	r3, #0
  4064e4:	e7f4      	b.n	4064d0 <dir_register+0x13c>
		ne = 1;
  4064e6:	2701      	movs	r7, #1
	res = dir_sdi(dj, 0);
  4064e8:	2100      	movs	r1, #0
  4064ea:	4620      	mov	r0, r4
  4064ec:	4b5d      	ldr	r3, [pc, #372]	; (406664 <dir_register+0x2d0>)
  4064ee:	4798      	blx	r3
	if (res != FR_OK) return res;
  4064f0:	4606      	mov	r6, r0
  4064f2:	2800      	cmp	r0, #0
  4064f4:	f47f af60 	bne.w	4063b8 <dir_register+0x24>
  4064f8:	f04f 0a00 	mov.w	sl, #0
  4064fc:	4655      	mov	r5, sl
		res = move_window(dj->fs, dj->sect);
  4064fe:	f8df 8170 	ldr.w	r8, [pc, #368]	; 406670 <dir_register+0x2dc>
			n = 0;					/* Not a blank entry. Restart to search */
  406502:	46d3      	mov	fp, sl
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  406504:	f8df 9164 	ldr.w	r9, [pc, #356]	; 40666c <dir_register+0x2d8>
  406508:	e00b      	b.n	406522 <dir_register+0x18e>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
  40650a:	1c6b      	adds	r3, r5, #1
  40650c:	b29b      	uxth	r3, r3
  40650e:	429f      	cmp	r7, r3
  406510:	d06a      	beq.n	4065e8 <dir_register+0x254>
  406512:	461d      	mov	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  406514:	2101      	movs	r1, #1
  406516:	4620      	mov	r0, r4
  406518:	47c8      	blx	r9
	} while (res == FR_OK);
  40651a:	4606      	mov	r6, r0
  40651c:	2800      	cmp	r0, #0
  40651e:	f47f af4b 	bne.w	4063b8 <dir_register+0x24>
		res = move_window(dj->fs, dj->sect);
  406522:	6921      	ldr	r1, [r4, #16]
  406524:	6820      	ldr	r0, [r4, #0]
  406526:	47c0      	blx	r8
		if (res != FR_OK) break;
  406528:	4606      	mov	r6, r0
  40652a:	2800      	cmp	r0, #0
  40652c:	f47f af44 	bne.w	4063b8 <dir_register+0x24>
		c = *dj->dir;				/* Check the entry status */
  406530:	6963      	ldr	r3, [r4, #20]
  406532:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
  406534:	2be5      	cmp	r3, #229	; 0xe5
  406536:	d000      	beq.n	40653a <dir_register+0x1a6>
  406538:	b923      	cbnz	r3, 406544 <dir_register+0x1b0>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
  40653a:	2d00      	cmp	r5, #0
  40653c:	d1e5      	bne.n	40650a <dir_register+0x176>
  40653e:	f8b4 a006 	ldrh.w	sl, [r4, #6]
  406542:	e7e2      	b.n	40650a <dir_register+0x176>
			n = 0;					/* Not a blank entry. Restart to search */
  406544:	465d      	mov	r5, fp
  406546:	e7e5      	b.n	406514 <dir_register+0x180>
		res = dir_sdi(dj, is);
  406548:	4651      	mov	r1, sl
  40654a:	4620      	mov	r0, r4
  40654c:	4b45      	ldr	r3, [pc, #276]	; (406664 <dir_register+0x2d0>)
  40654e:	4798      	blx	r3
		if (res == FR_OK) {
  406550:	4606      	mov	r6, r0
  406552:	2800      	cmp	r0, #0
  406554:	f47f af30 	bne.w	4063b8 <dir_register+0x24>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
  406558:	69a0      	ldr	r0, [r4, #24]
  40655a:	4b43      	ldr	r3, [pc, #268]	; (406668 <dir_register+0x2d4>)
  40655c:	4798      	blx	r3
  40655e:	9000      	str	r0, [sp, #0]
	dir[LDIR_Type] = 0;
  406560:	2700      	movs	r7, #0
	s = wc = 0;
  406562:	9701      	str	r7, [sp, #4]
  406564:	e01a      	b.n	40659c <dir_register+0x208>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  406566:	4671      	mov	r1, lr
  406568:	e063      	b.n	406632 <dir_register+0x29e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
  40656a:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40656e:	4293      	cmp	r3, r2
  406570:	d002      	beq.n	406578 <dir_register+0x1e4>
  406572:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
  406576:	b90b      	cbnz	r3, 40657c <dir_register+0x1e8>
  406578:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
  40657c:	f880 b000 	strb.w	fp, [r0]
				dj->fs->wflag = 1;
  406580:	6823      	ldr	r3, [r4, #0]
  406582:	2201      	movs	r2, #1
  406584:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
  406586:	4639      	mov	r1, r7
  406588:	4620      	mov	r0, r4
  40658a:	4b38      	ldr	r3, [pc, #224]	; (40666c <dir_register+0x2d8>)
  40658c:	4798      	blx	r3
			} while (res == FR_OK && --ne);
  40658e:	4606      	mov	r6, r0
  406590:	2800      	cmp	r0, #0
  406592:	f47f af11 	bne.w	4063b8 <dir_register+0x24>
  406596:	3d01      	subs	r5, #1
  406598:	b2ad      	uxth	r5, r5
  40659a:	b33d      	cbz	r5, 4065ec <dir_register+0x258>
				res = move_window(dj->fs, dj->sect);
  40659c:	6921      	ldr	r1, [r4, #16]
  40659e:	6820      	ldr	r0, [r4, #0]
  4065a0:	4b33      	ldr	r3, [pc, #204]	; (406670 <dir_register+0x2dc>)
  4065a2:	4798      	blx	r3
				if (res != FR_OK) break;
  4065a4:	4606      	mov	r6, r0
  4065a6:	2800      	cmp	r0, #0
  4065a8:	f47f af06 	bne.w	4063b8 <dir_register+0x24>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
  4065ac:	f8d4 901c 	ldr.w	r9, [r4, #28]
  4065b0:	6960      	ldr	r0, [r4, #20]
  4065b2:	fa5f fb85 	uxtb.w	fp, r5
	dir[LDIR_Chksum] = sum;			/* Set check sum */
  4065b6:	f89d 3000 	ldrb.w	r3, [sp]
  4065ba:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
  4065bc:	230f      	movs	r3, #15
  4065be:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
  4065c0:	7307      	strb	r7, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
  4065c2:	7687      	strb	r7, [r0, #26]
  4065c4:	76c7      	strb	r7, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
  4065c6:	f10b 31ff 	add.w	r1, fp, #4294967295
  4065ca:	eb01 0341 	add.w	r3, r1, r1, lsl #1
  4065ce:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  4065d2:	4a28      	ldr	r2, [pc, #160]	; (406674 <dir_register+0x2e0>)
  4065d4:	f102 080d 	add.w	r8, r2, #13
	s = wc = 0;
  4065d8:	9b01      	ldr	r3, [sp, #4]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  4065da:	f64f 76ff 	movw	r6, #65535	; 0xffff
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  4065de:	f04f 0aff 	mov.w	sl, #255	; 0xff
  4065e2:	e029      	b.n	406638 <dir_register+0x2a4>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  4065e4:	2607      	movs	r6, #7
  4065e6:	e6e7      	b.n	4063b8 <dir_register+0x24>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
  4065e8:	2b01      	cmp	r3, #1
  4065ea:	d8ad      	bhi.n	406548 <dir_register+0x1b4>
		res = move_window(dj->fs, dj->sect);
  4065ec:	6921      	ldr	r1, [r4, #16]
  4065ee:	6820      	ldr	r0, [r4, #0]
  4065f0:	4b1f      	ldr	r3, [pc, #124]	; (406670 <dir_register+0x2dc>)
  4065f2:	4798      	blx	r3
		if (res == FR_OK) {
  4065f4:	4606      	mov	r6, r0
  4065f6:	2800      	cmp	r0, #0
  4065f8:	f47f aede 	bne.w	4063b8 <dir_register+0x24>
			dir = dj->dir;
  4065fc:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
  4065fe:	2220      	movs	r2, #32
  406600:	2100      	movs	r1, #0
  406602:	4628      	mov	r0, r5
  406604:	4b1c      	ldr	r3, [pc, #112]	; (406678 <dir_register+0x2e4>)
  406606:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
  406608:	220b      	movs	r2, #11
  40660a:	69a1      	ldr	r1, [r4, #24]
  40660c:	4628      	mov	r0, r5
  40660e:	4b13      	ldr	r3, [pc, #76]	; (40665c <dir_register+0x2c8>)
  406610:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
  406612:	69a3      	ldr	r3, [r4, #24]
  406614:	7adb      	ldrb	r3, [r3, #11]
  406616:	f003 0318 	and.w	r3, r3, #24
  40661a:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
  40661c:	6823      	ldr	r3, [r4, #0]
  40661e:	2201      	movs	r2, #1
  406620:	711a      	strb	r2, [r3, #4]
  406622:	e6c9      	b.n	4063b8 <dir_register+0x24>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  406624:	f892 e000 	ldrb.w	lr, [r2]
  406628:	f800 a00e 	strb.w	sl, [r0, lr]
  40662c:	4486      	add	lr, r0
  40662e:	f88e a001 	strb.w	sl, [lr, #1]
  406632:	3201      	adds	r2, #1
	} while (++s < 13);
  406634:	4542      	cmp	r2, r8
  406636:	d098      	beq.n	40656a <dir_register+0x1d6>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  406638:	42b3      	cmp	r3, r6
  40663a:	d0f3      	beq.n	406624 <dir_register+0x290>
  40663c:	f101 0e01 	add.w	lr, r1, #1
  406640:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  406644:	7811      	ldrb	r1, [r2, #0]
  406646:	5443      	strb	r3, [r0, r1]
  406648:	4401      	add	r1, r0
  40664a:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  40664e:	f881 c001 	strb.w	ip, [r1, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  406652:	2b00      	cmp	r3, #0
  406654:	d187      	bne.n	406566 <dir_register+0x1d2>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  406656:	4671      	mov	r1, lr
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  406658:	4633      	mov	r3, r6
  40665a:	e7ea      	b.n	406632 <dir_register+0x29e>
  40665c:	0040565d 	.word	0x0040565d
  406660:	4ec4ec4f 	.word	0x4ec4ec4f
  406664:	00405d9d 	.word	0x00405d9d
  406668:	00405695 	.word	0x00405695
  40666c:	004060b1 	.word	0x004060b1
  406670:	00405c25 	.word	0x00405c25
  406674:	0040ee08 	.word	0x0040ee08
  406678:	00405671 	.word	0x00405671
  40667c:	004061e9 	.word	0x004061e9

00406680 <dir_read>:
{
  406680:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406684:	4604      	mov	r4, r0
	BYTE a, ord = 0xFF, sum = 0xFF;
  406686:	f04f 09ff 	mov.w	r9, #255	; 0xff
  40668a:	464e      	mov	r6, r9
	res = FR_NO_FILE;
  40668c:	2504      	movs	r5, #4
		res = move_window(dj->fs, dj->sect);
  40668e:	4f40      	ldr	r7, [pc, #256]	; (406790 <dir_read+0x110>)
			if (uc != 0xFFFF) return 0;		/* Check filler */
  406690:	f64f 78ff 	movw	r8, #65535	; 0xffff
	while (dj->sect) {
  406694:	e01b      	b.n	4066ce <dir_read+0x4e>
			if (a == AM_LFN) {			/* An LFN entry is found */
  406696:	290f      	cmp	r1, #15
  406698:	d164      	bne.n	406764 <dir_read+0xe4>
				if (c & LLE) {			/* Is it start of LFN sequence? */
  40669a:	f013 0f40 	tst.w	r3, #64	; 0x40
  40669e:	d00b      	beq.n	4066b8 <dir_read+0x38>
					sum = dir[LDIR_Chksum];
  4066a0:	f890 900d 	ldrb.w	r9, [r0, #13]
					c &= ~LLE; ord = c;
  4066a4:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
					dj->lfn_idx = dj->index;
  4066a8:	88e2      	ldrh	r2, [r4, #6]
  4066aa:	8422      	strh	r2, [r4, #32]
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  4066ac:	f890 e00d 	ldrb.w	lr, [r0, #13]
  4066b0:	45ce      	cmp	lr, r9
  4066b2:	d024      	beq.n	4066fe <dir_read+0x7e>
  4066b4:	26ff      	movs	r6, #255	; 0xff
  4066b6:	e003      	b.n	4066c0 <dir_read+0x40>
  4066b8:	429e      	cmp	r6, r3
  4066ba:	bf18      	it	ne
  4066bc:	26ff      	movne	r6, #255	; 0xff
  4066be:	d0f5      	beq.n	4066ac <dir_read+0x2c>
		res = dir_next(dj, 0);				/* Next entry */
  4066c0:	2100      	movs	r1, #0
  4066c2:	4620      	mov	r0, r4
  4066c4:	4b33      	ldr	r3, [pc, #204]	; (406794 <dir_read+0x114>)
  4066c6:	4798      	blx	r3
		if (res != FR_OK) break;
  4066c8:	4605      	mov	r5, r0
  4066ca:	2800      	cmp	r0, #0
  4066cc:	d15b      	bne.n	406786 <dir_read+0x106>
	while (dj->sect) {
  4066ce:	6921      	ldr	r1, [r4, #16]
  4066d0:	2900      	cmp	r1, #0
  4066d2:	d052      	beq.n	40677a <dir_read+0xfa>
		res = move_window(dj->fs, dj->sect);
  4066d4:	6820      	ldr	r0, [r4, #0]
  4066d6:	47b8      	blx	r7
		if (res != FR_OK) break;
  4066d8:	4605      	mov	r5, r0
  4066da:	2800      	cmp	r0, #0
  4066dc:	d153      	bne.n	406786 <dir_read+0x106>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
  4066de:	6960      	ldr	r0, [r4, #20]
		c = dir[DIR_Name];
  4066e0:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  4066e2:	2b00      	cmp	r3, #0
  4066e4:	d04e      	beq.n	406784 <dir_read+0x104>
		a = dir[DIR_Attr] & AM_MASK;
  4066e6:	7ac2      	ldrb	r2, [r0, #11]
  4066e8:	f002 013f 	and.w	r1, r2, #63	; 0x3f
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  4066ec:	2be5      	cmp	r3, #229	; 0xe5
  4066ee:	d042      	beq.n	406776 <dir_read+0xf6>
  4066f0:	f012 0f08 	tst.w	r2, #8
  4066f4:	d0cf      	beq.n	406696 <dir_read+0x16>
  4066f6:	290f      	cmp	r1, #15
  4066f8:	d0cf      	beq.n	40669a <dir_read+0x1a>
			ord = 0xFF;
  4066fa:	26ff      	movs	r6, #255	; 0xff
  4066fc:	e7e0      	b.n	4066c0 <dir_read+0x40>
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  4066fe:	f8d4 a01c 	ldr.w	sl, [r4, #28]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
  406702:	7806      	ldrb	r6, [r0, #0]
  406704:	f006 063f 	and.w	r6, r6, #63	; 0x3f
  406708:	3e01      	subs	r6, #1
  40670a:	eb06 0246 	add.w	r2, r6, r6, lsl #1
  40670e:	eb06 0682 	add.w	r6, r6, r2, lsl #2
  406712:	4921      	ldr	r1, [pc, #132]	; (406798 <dir_read+0x118>)
  406714:	f101 090d 	add.w	r9, r1, #13
	s = 0; wc = 1;
  406718:	f04f 0c01 	mov.w	ip, #1
  40671c:	e003      	b.n	406726 <dir_read+0xa6>
			if (uc != 0xFFFF) return 0;		/* Check filler */
  40671e:	4542      	cmp	r2, r8
  406720:	d12d      	bne.n	40677e <dir_read+0xfe>
	} while (++s < 13);						/* Read all character in the entry */
  406722:	4589      	cmp	r9, r1
  406724:	d011      	beq.n	40674a <dir_read+0xca>
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
  406726:	f811 5b01 	ldrb.w	r5, [r1], #1
  40672a:	1942      	adds	r2, r0, r5
  40672c:	f892 b001 	ldrb.w	fp, [r2, #1]
  406730:	5d42      	ldrb	r2, [r0, r5]
  406732:	ea42 220b 	orr.w	r2, r2, fp, lsl #8
		if (wc) {	/* Last char has not been processed */
  406736:	f1bc 0f00 	cmp.w	ip, #0
  40673a:	d0f0      	beq.n	40671e <dir_read+0x9e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
  40673c:	2efe      	cmp	r6, #254	; 0xfe
  40673e:	d81e      	bhi.n	40677e <dir_read+0xfe>
			lfnbuf[i++] = wc = uc;			/* Store it */
  406740:	f82a 2016 	strh.w	r2, [sl, r6, lsl #1]
  406744:	4694      	mov	ip, r2
  406746:	3601      	adds	r6, #1
  406748:	e7eb      	b.n	406722 <dir_read+0xa2>
	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
  40674a:	7802      	ldrb	r2, [r0, #0]
  40674c:	f012 0f40 	tst.w	r2, #64	; 0x40
  406750:	d004      	beq.n	40675c <dir_read+0xdc>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
  406752:	2efe      	cmp	r6, #254	; 0xfe
  406754:	d813      	bhi.n	40677e <dir_read+0xfe>
		lfnbuf[i] = 0;
  406756:	2200      	movs	r2, #0
  406758:	f82a 2016 	strh.w	r2, [sl, r6, lsl #1]
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  40675c:	3b01      	subs	r3, #1
  40675e:	b2de      	uxtb	r6, r3
  406760:	46f1      	mov	r9, lr
  406762:	e7ad      	b.n	4066c0 <dir_read+0x40>
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
  406764:	b91e      	cbnz	r6, 40676e <dir_read+0xee>
  406766:	4b0d      	ldr	r3, [pc, #52]	; (40679c <dir_read+0x11c>)
  406768:	4798      	blx	r3
  40676a:	4581      	cmp	r9, r0
  40676c:	d00d      	beq.n	40678a <dir_read+0x10a>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
  40676e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  406772:	8423      	strh	r3, [r4, #32]
  406774:	e009      	b.n	40678a <dir_read+0x10a>
			ord = 0xFF;
  406776:	26ff      	movs	r6, #255	; 0xff
  406778:	e7a2      	b.n	4066c0 <dir_read+0x40>
	if (res != FR_OK) dj->sect = 0;
  40677a:	b135      	cbz	r5, 40678a <dir_read+0x10a>
  40677c:	e003      	b.n	406786 <dir_read+0x106>
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  40677e:	46f1      	mov	r9, lr
  406780:	26ff      	movs	r6, #255	; 0xff
  406782:	e79d      	b.n	4066c0 <dir_read+0x40>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  406784:	2504      	movs	r5, #4
	if (res != FR_OK) dj->sect = 0;
  406786:	2300      	movs	r3, #0
  406788:	6123      	str	r3, [r4, #16]
}
  40678a:	4628      	mov	r0, r5
  40678c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406790:	00405c25 	.word	0x00405c25
  406794:	004060b1 	.word	0x004060b1
  406798:	0040ee08 	.word	0x0040ee08
  40679c:	00405695 	.word	0x00405695

004067a0 <dir_remove>:
{
  4067a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4067a4:	4604      	mov	r4, r0
	i = dj->index;	/* SFN index */
  4067a6:	88c5      	ldrh	r5, [r0, #6]
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
  4067a8:	8c01      	ldrh	r1, [r0, #32]
  4067aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4067ae:	4299      	cmp	r1, r3
  4067b0:	bf08      	it	eq
  4067b2:	4629      	moveq	r1, r5
  4067b4:	4b10      	ldr	r3, [pc, #64]	; (4067f8 <dir_remove+0x58>)
  4067b6:	4798      	blx	r3
	if (res == FR_OK) {
  4067b8:	4603      	mov	r3, r0
  4067ba:	b9c8      	cbnz	r0, 4067f0 <dir_remove+0x50>
			res = move_window(dj->fs, dj->sect);
  4067bc:	4e0f      	ldr	r6, [pc, #60]	; (4067fc <dir_remove+0x5c>)
			*dj->dir = DDE;			/* Mark the entry "deleted" */
  4067be:	27e5      	movs	r7, #229	; 0xe5
			res = dir_next(dj, 0);		/* Next entry */
  4067c0:	f8df 803c 	ldr.w	r8, [pc, #60]	; 406800 <dir_remove+0x60>
			res = move_window(dj->fs, dj->sect);
  4067c4:	6921      	ldr	r1, [r4, #16]
  4067c6:	6820      	ldr	r0, [r4, #0]
  4067c8:	47b0      	blx	r6
			if (res != FR_OK) break;
  4067ca:	4603      	mov	r3, r0
  4067cc:	b968      	cbnz	r0, 4067ea <dir_remove+0x4a>
			*dj->dir = DDE;			/* Mark the entry "deleted" */
  4067ce:	6962      	ldr	r2, [r4, #20]
  4067d0:	7017      	strb	r7, [r2, #0]
			dj->fs->wflag = 1;
  4067d2:	6822      	ldr	r2, [r4, #0]
  4067d4:	2101      	movs	r1, #1
  4067d6:	7111      	strb	r1, [r2, #4]
			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
  4067d8:	88e2      	ldrh	r2, [r4, #6]
  4067da:	42aa      	cmp	r2, r5
  4067dc:	d208      	bcs.n	4067f0 <dir_remove+0x50>
			res = dir_next(dj, 0);		/* Next entry */
  4067de:	2100      	movs	r1, #0
  4067e0:	4620      	mov	r0, r4
  4067e2:	47c0      	blx	r8
		} while (res == FR_OK);
  4067e4:	4603      	mov	r3, r0
  4067e6:	2800      	cmp	r0, #0
  4067e8:	d0ec      	beq.n	4067c4 <dir_remove+0x24>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
  4067ea:	2b04      	cmp	r3, #4
  4067ec:	bf08      	it	eq
  4067ee:	2302      	moveq	r3, #2
}
  4067f0:	4618      	mov	r0, r3
  4067f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4067f6:	bf00      	nop
  4067f8:	00405d9d 	.word	0x00405d9d
  4067fc:	00405c25 	.word	0x00405c25
  406800:	004060b1 	.word	0x004060b1

00406804 <sync>:
{
  406804:	b570      	push	{r4, r5, r6, lr}
  406806:	4604      	mov	r4, r0
	res = move_window(fs, 0);
  406808:	2100      	movs	r1, #0
  40680a:	4b2d      	ldr	r3, [pc, #180]	; (4068c0 <sync+0xbc>)
  40680c:	4798      	blx	r3
	if (res == FR_OK) {
  40680e:	4603      	mov	r3, r0
  406810:	b950      	cbnz	r0, 406828 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  406812:	7823      	ldrb	r3, [r4, #0]
  406814:	2b03      	cmp	r3, #3
  406816:	d009      	beq.n	40682c <sync+0x28>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
  406818:	2200      	movs	r2, #0
  40681a:	4611      	mov	r1, r2
  40681c:	7860      	ldrb	r0, [r4, #1]
  40681e:	4b29      	ldr	r3, [pc, #164]	; (4068c4 <sync+0xc0>)
  406820:	4798      	blx	r3
	res = move_window(fs, 0);
  406822:	1c03      	adds	r3, r0, #0
  406824:	bf18      	it	ne
  406826:	2301      	movne	r3, #1
}
  406828:	4618      	mov	r0, r3
  40682a:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  40682c:	7963      	ldrb	r3, [r4, #5]
  40682e:	2b00      	cmp	r3, #0
  406830:	d0f2      	beq.n	406818 <sync+0x14>
			fs->winsect = 0;
  406832:	2600      	movs	r6, #0
  406834:	6326      	str	r6, [r4, #48]	; 0x30
			mem_set(fs->win, 0, 512);
  406836:	f104 0534 	add.w	r5, r4, #52	; 0x34
  40683a:	f44f 7200 	mov.w	r2, #512	; 0x200
  40683e:	4631      	mov	r1, r6
  406840:	4628      	mov	r0, r5
  406842:	4b21      	ldr	r3, [pc, #132]	; (4068c8 <sync+0xc4>)
  406844:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
  406846:	2355      	movs	r3, #85	; 0x55
  406848:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
  40684c:	23aa      	movs	r3, #170	; 0xaa
  40684e:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
  406852:	2352      	movs	r3, #82	; 0x52
  406854:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  406858:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  40685c:	2361      	movs	r3, #97	; 0x61
  40685e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  406862:	2241      	movs	r2, #65	; 0x41
  406864:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
  406868:	2172      	movs	r1, #114	; 0x72
  40686a:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
  40686e:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
  406872:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
  406876:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
  40687a:	6923      	ldr	r3, [r4, #16]
  40687c:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
  406880:	f3c3 2207 	ubfx	r2, r3, #8, #8
  406884:	f884 221d 	strb.w	r2, [r4, #541]	; 0x21d
  406888:	0c1a      	lsrs	r2, r3, #16
  40688a:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
  40688e:	0e1b      	lsrs	r3, r3, #24
  406890:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
  406894:	68e3      	ldr	r3, [r4, #12]
  406896:	f884 3220 	strb.w	r3, [r4, #544]	; 0x220
  40689a:	f3c3 2207 	ubfx	r2, r3, #8, #8
  40689e:	f884 2221 	strb.w	r2, [r4, #545]	; 0x221
  4068a2:	0c1a      	lsrs	r2, r3, #16
  4068a4:	f884 2222 	strb.w	r2, [r4, #546]	; 0x222
  4068a8:	0e1b      	lsrs	r3, r3, #24
  4068aa:	f884 3223 	strb.w	r3, [r4, #547]	; 0x223
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
  4068ae:	2301      	movs	r3, #1
  4068b0:	6962      	ldr	r2, [r4, #20]
  4068b2:	4629      	mov	r1, r5
  4068b4:	7860      	ldrb	r0, [r4, #1]
  4068b6:	4d05      	ldr	r5, [pc, #20]	; (4068cc <sync+0xc8>)
  4068b8:	47a8      	blx	r5
			fs->fsi_flag = 0;
  4068ba:	7166      	strb	r6, [r4, #5]
  4068bc:	e7ac      	b.n	406818 <sync+0x14>
  4068be:	bf00      	nop
  4068c0:	00405c25 	.word	0x00405c25
  4068c4:	00405595 	.word	0x00405595
  4068c8:	00405671 	.word	0x00405671
  4068cc:	00405525 	.word	0x00405525

004068d0 <follow_path>:
{
  4068d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4068d4:	b083      	sub	sp, #12
  4068d6:	4682      	mov	sl, r0
  4068d8:	4688      	mov	r8, r1
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
  4068da:	780b      	ldrb	r3, [r1, #0]
  4068dc:	2b2f      	cmp	r3, #47	; 0x2f
  4068de:	d00b      	beq.n	4068f8 <follow_path+0x28>
  4068e0:	2b5c      	cmp	r3, #92	; 0x5c
  4068e2:	d009      	beq.n	4068f8 <follow_path+0x28>
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
  4068e4:	6803      	ldr	r3, [r0, #0]
  4068e6:	699b      	ldr	r3, [r3, #24]
  4068e8:	6083      	str	r3, [r0, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
  4068ea:	f898 3000 	ldrb.w	r3, [r8]
  4068ee:	2b1f      	cmp	r3, #31
  4068f0:	d908      	bls.n	406904 <follow_path+0x34>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  4068f2:	f8df 9334 	ldr.w	r9, [pc, #820]	; 406c28 <follow_path+0x358>
  4068f6:	e00f      	b.n	406918 <follow_path+0x48>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
  4068f8:	f108 0801 	add.w	r8, r8, #1
  4068fc:	2300      	movs	r3, #0
  4068fe:	f8ca 3008 	str.w	r3, [sl, #8]
  406902:	e7f2      	b.n	4068ea <follow_path+0x1a>
		res = dir_sdi(dj, 0);
  406904:	2100      	movs	r1, #0
  406906:	4650      	mov	r0, sl
  406908:	4bc1      	ldr	r3, [pc, #772]	; (406c10 <follow_path+0x340>)
  40690a:	4798      	blx	r3
  40690c:	4603      	mov	r3, r0
		dj->dir = 0;
  40690e:	2200      	movs	r2, #0
  406910:	f8ca 2014 	str.w	r2, [sl, #20]
  406914:	e071      	b.n	4069fa <follow_path+0x12a>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
  406916:	4698      	mov	r8, r3
  406918:	4646      	mov	r6, r8
  40691a:	4643      	mov	r3, r8
  40691c:	f813 0b01 	ldrb.w	r0, [r3], #1
  406920:	282f      	cmp	r0, #47	; 0x2f
  406922:	d0f8      	beq.n	406916 <follow_path+0x46>
  406924:	285c      	cmp	r0, #92	; 0x5c
  406926:	bf08      	it	eq
  406928:	4698      	moveq	r8, r3
  40692a:	d0f5      	beq.n	406918 <follow_path+0x48>
	lfn = dj->lfn;
  40692c:	f8da b01c 	ldr.w	fp, [sl, #28]
		w = p[si++];					/* Get a character */
  406930:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  406932:	281f      	cmp	r0, #31
  406934:	f240 8155 	bls.w	406be2 <follow_path+0x312>
  406938:	282f      	cmp	r0, #47	; 0x2f
  40693a:	f000 8158 	beq.w	406bee <follow_path+0x31e>
  40693e:	285c      	cmp	r0, #92	; 0x5c
  406940:	f000 8174 	beq.w	406c2c <follow_path+0x35c>
  406944:	f1ab 0502 	sub.w	r5, fp, #2
  406948:	2401      	movs	r4, #1
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  40694a:	4627      	mov	r7, r4
  40694c:	e013      	b.n	406976 <follow_path+0xa6>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  40694e:	2b00      	cmp	r3, #0
  406950:	d152      	bne.n	4069f8 <follow_path+0x128>
		lfn[di++] = w;					/* Store the Unicode char */
  406952:	f825 2f02 	strh.w	r2, [r5, #2]!
		w = p[si++];					/* Get a character */
  406956:	1c63      	adds	r3, r4, #1
  406958:	f818 0f01 	ldrb.w	r0, [r8, #1]!
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  40695c:	281f      	cmp	r0, #31
  40695e:	f240 8142 	bls.w	406be6 <follow_path+0x316>
  406962:	282f      	cmp	r0, #47	; 0x2f
  406964:	f000 8145 	beq.w	406bf2 <follow_path+0x322>
  406968:	285c      	cmp	r0, #92	; 0x5c
  40696a:	f000 8142 	beq.w	406bf2 <follow_path+0x322>
		if (di >= _MAX_LFN)				/* Reject too long name */
  40696e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  406972:	d041      	beq.n	4069f8 <follow_path+0x128>
		w = p[si++];					/* Get a character */
  406974:	461c      	mov	r4, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  406976:	4639      	mov	r1, r7
  406978:	47c8      	blx	r9
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
  40697a:	4602      	mov	r2, r0
  40697c:	2800      	cmp	r0, #0
  40697e:	d03b      	beq.n	4069f8 <follow_path+0x128>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  406980:	287f      	cmp	r0, #127	; 0x7f
  406982:	d8e6      	bhi.n	406952 <follow_path+0x82>
	while (*str && *str != chr) str++;
  406984:	2822      	cmp	r0, #34	; 0x22
  406986:	f000 8112 	beq.w	406bae <follow_path+0x2de>
  40698a:	232a      	movs	r3, #42	; 0x2a
  40698c:	49a1      	ldr	r1, [pc, #644]	; (406c14 <follow_path+0x344>)
  40698e:	b298      	uxth	r0, r3
  406990:	4290      	cmp	r0, r2
  406992:	d0dc      	beq.n	40694e <follow_path+0x7e>
  406994:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  406998:	2b00      	cmp	r3, #0
  40699a:	d1f8      	bne.n	40698e <follow_path+0xbe>
  40699c:	e7d9      	b.n	406952 <follow_path+0x82>
	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
  40699e:	f8bb 3000 	ldrh.w	r3, [fp]
  4069a2:	2b2e      	cmp	r3, #46	; 0x2e
  4069a4:	f040 8130 	bne.w	406c08 <follow_path+0x338>
		lfn[di] = 0;
  4069a8:	2300      	movs	r3, #0
  4069aa:	f82b 3014 	strh.w	r3, [fp, r4, lsl #1]
			dj->fn[i] = (i < di) ? '.' : ' ';
  4069ae:	f8da 2018 	ldr.w	r2, [sl, #24]
  4069b2:	42a3      	cmp	r3, r4
  4069b4:	bf34      	ite	cc
  4069b6:	212e      	movcc	r1, #46	; 0x2e
  4069b8:	2120      	movcs	r1, #32
  4069ba:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < 11; i++)
  4069bc:	3301      	adds	r3, #1
  4069be:	2b0b      	cmp	r3, #11
  4069c0:	d1f5      	bne.n	4069ae <follow_path+0xde>
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
  4069c2:	f8da 3018 	ldr.w	r3, [sl, #24]
  4069c6:	f045 0520 	orr.w	r5, r5, #32
  4069ca:	72dd      	strb	r5, [r3, #11]
  4069cc:	e09a      	b.n	406b04 <follow_path+0x234>
		(di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
  4069ce:	f8bb 3002 	ldrh.w	r3, [fp, #2]
  4069d2:	2b2e      	cmp	r3, #46	; 0x2e
  4069d4:	f040 8118 	bne.w	406c08 <follow_path+0x338>
  4069d8:	f8bb 3000 	ldrh.w	r3, [fp]
  4069dc:	2b2e      	cmp	r3, #46	; 0x2e
  4069de:	f040 8113 	bne.w	406c08 <follow_path+0x338>
  4069e2:	e7e1      	b.n	4069a8 <follow_path+0xd8>
	while (di) {						/* Strip trailing spaces and dots */
  4069e4:	3c01      	subs	r4, #1
  4069e6:	f000 80e2 	beq.w	406bae <follow_path+0x2de>
		w = lfn[di-1];
  4069ea:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
  4069ee:	2b20      	cmp	r3, #32
  4069f0:	d0f8      	beq.n	4069e4 <follow_path+0x114>
  4069f2:	2b2e      	cmp	r3, #46	; 0x2e
  4069f4:	d0f6      	beq.n	4069e4 <follow_path+0x114>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
  4069f6:	b924      	cbnz	r4, 406a02 <follow_path+0x132>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  4069f8:	2306      	movs	r3, #6
}
  4069fa:	4618      	mov	r0, r3
  4069fc:	b003      	add	sp, #12
  4069fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
  406a02:	0066      	lsls	r6, r4, #1
  406a04:	2700      	movs	r7, #0
  406a06:	f82b 7014 	strh.w	r7, [fp, r4, lsl #1]
	mem_set(dj->fn, ' ', 11);
  406a0a:	220b      	movs	r2, #11
  406a0c:	2120      	movs	r1, #32
  406a0e:	f8da 0018 	ldr.w	r0, [sl, #24]
  406a12:	4b81      	ldr	r3, [pc, #516]	; (406c18 <follow_path+0x348>)
  406a14:	4798      	blx	r3
  406a16:	f1ab 0102 	sub.w	r1, fp, #2
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  406a1a:	463b      	mov	r3, r7
  406a1c:	e000      	b.n	406a20 <follow_path+0x150>
  406a1e:	3301      	adds	r3, #1
  406a20:	f831 2f02 	ldrh.w	r2, [r1, #2]!
  406a24:	2a20      	cmp	r2, #32
  406a26:	d0fa      	beq.n	406a1e <follow_path+0x14e>
  406a28:	2a2e      	cmp	r2, #46	; 0x2e
  406a2a:	d0f8      	beq.n	406a1e <follow_path+0x14e>
	if (si) cf |= NS_LOSS | NS_LFN;
  406a2c:	b10b      	cbz	r3, 406a32 <follow_path+0x162>
  406a2e:	f045 0503 	orr.w	r5, r5, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
  406a32:	3e02      	subs	r6, #2
  406a34:	eb0b 0206 	add.w	r2, fp, r6
  406a38:	f83b 1006 	ldrh.w	r1, [fp, r6]
  406a3c:	292e      	cmp	r1, #46	; 0x2e
  406a3e:	d005      	beq.n	406a4c <follow_path+0x17c>
  406a40:	3c01      	subs	r4, #1
  406a42:	d003      	beq.n	406a4c <follow_path+0x17c>
  406a44:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
  406a48:	292e      	cmp	r1, #46	; 0x2e
  406a4a:	d1f9      	bne.n	406a40 <follow_path+0x170>
		dj->fn[i++] = (BYTE)w;
  406a4c:	2208      	movs	r2, #8
  406a4e:	9200      	str	r2, [sp, #0]
  406a50:	2200      	movs	r2, #0
  406a52:	9201      	str	r2, [sp, #4]
  406a54:	4617      	mov	r7, r2
  406a56:	e005      	b.n	406a64 <follow_path+0x194>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  406a58:	42a6      	cmp	r6, r4
  406a5a:	f000 80ea 	beq.w	406c32 <follow_path+0x362>
			cf |= NS_LOSS | NS_LFN; continue;
  406a5e:	f045 0503 	orr.w	r5, r5, #3
		w = lfn[si++];					/* Get an LFN char */
  406a62:	4633      	mov	r3, r6
  406a64:	1c5e      	adds	r6, r3, #1
  406a66:	f83b 0013 	ldrh.w	r0, [fp, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
  406a6a:	b348      	cbz	r0, 406ac0 <follow_path+0x1f0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  406a6c:	2820      	cmp	r0, #32
  406a6e:	d0f6      	beq.n	406a5e <follow_path+0x18e>
  406a70:	282e      	cmp	r0, #46	; 0x2e
  406a72:	d0f1      	beq.n	406a58 <follow_path+0x188>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
  406a74:	9b01      	ldr	r3, [sp, #4]
  406a76:	9a00      	ldr	r2, [sp, #0]
  406a78:	4293      	cmp	r3, r2
  406a7a:	d217      	bcs.n	406aac <follow_path+0x1dc>
  406a7c:	42a6      	cmp	r6, r4
  406a7e:	f000 80d8 	beq.w	406c32 <follow_path+0x362>
		if (w >= 0x80) {				/* Non ASCII char */
  406a82:	287f      	cmp	r0, #127	; 0x7f
  406a84:	d86a      	bhi.n	406b5c <follow_path+0x28c>
	while (*str && *str != chr) str++;
  406a86:	282b      	cmp	r0, #43	; 0x2b
  406a88:	d075      	beq.n	406b76 <follow_path+0x2a6>
  406a8a:	232c      	movs	r3, #44	; 0x2c
  406a8c:	4a63      	ldr	r2, [pc, #396]	; (406c1c <follow_path+0x34c>)
  406a8e:	b299      	uxth	r1, r3
  406a90:	4281      	cmp	r1, r0
  406a92:	d07c      	beq.n	406b8e <follow_path+0x2be>
  406a94:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  406a98:	2b00      	cmp	r3, #0
  406a9a:	d1f8      	bne.n	406a8e <follow_path+0x1be>
				if (IsUpper(w)) {		/* ASCII large capital */
  406a9c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
  406aa0:	b29b      	uxth	r3, r3
  406aa2:	2b19      	cmp	r3, #25
  406aa4:	d876      	bhi.n	406b94 <follow_path+0x2c4>
					b |= 2;
  406aa6:	f047 0702 	orr.w	r7, r7, #2
  406aaa:	e067      	b.n	406b7c <follow_path+0x2ac>
			if (ni == 11) {				/* Long extension */
  406aac:	9b00      	ldr	r3, [sp, #0]
  406aae:	2b0b      	cmp	r3, #11
  406ab0:	d048      	beq.n	406b44 <follow_path+0x274>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
  406ab2:	42a6      	cmp	r6, r4
  406ab4:	f000 80c0 	beq.w	406c38 <follow_path+0x368>
  406ab8:	f045 0503 	orr.w	r5, r5, #3
			if (si > di) break;			/* No extension */
  406abc:	f240 80bc 	bls.w	406c38 <follow_path+0x368>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  406ac0:	f8da 3018 	ldr.w	r3, [sl, #24]
  406ac4:	781a      	ldrb	r2, [r3, #0]
  406ac6:	2ae5      	cmp	r2, #229	; 0xe5
  406ac8:	d045      	beq.n	406b56 <follow_path+0x286>
	if (ni == 8) b <<= 2;
  406aca:	9b00      	ldr	r3, [sp, #0]
  406acc:	2b08      	cmp	r3, #8
  406ace:	bf04      	itt	eq
  406ad0:	00bf      	lsleq	r7, r7, #2
  406ad2:	b2ff      	uxtbeq	r7, r7
  406ad4:	f007 030c 	and.w	r3, r7, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
  406ad8:	2b0c      	cmp	r3, #12
  406ada:	d065      	beq.n	406ba8 <follow_path+0x2d8>
  406adc:	f007 0203 	and.w	r2, r7, #3
  406ae0:	2a03      	cmp	r2, #3
  406ae2:	d061      	beq.n	406ba8 <follow_path+0x2d8>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
  406ae4:	f015 0f02 	tst.w	r5, #2
  406ae8:	d109      	bne.n	406afe <follow_path+0x22e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
  406aea:	f007 0703 	and.w	r7, r7, #3
  406aee:	2f01      	cmp	r7, #1
  406af0:	bf08      	it	eq
  406af2:	f045 0510 	orreq.w	r5, r5, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
  406af6:	2b04      	cmp	r3, #4
  406af8:	bf08      	it	eq
  406afa:	f045 0508 	orreq.w	r5, r5, #8
	dj->fn[NS] = cf;	/* SFN is created */
  406afe:	f8da 3018 	ldr.w	r3, [sl, #24]
  406b02:	72dd      	strb	r5, [r3, #11]
			res = dir_find(dj);				/* Find it */
  406b04:	4650      	mov	r0, sl
  406b06:	4b46      	ldr	r3, [pc, #280]	; (406c20 <follow_path+0x350>)
  406b08:	4798      	blx	r3
			ns = *(dj->fn+NS);
  406b0a:	f8da 3018 	ldr.w	r3, [sl, #24]
  406b0e:	7ada      	ldrb	r2, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
  406b10:	4603      	mov	r3, r0
  406b12:	2800      	cmp	r0, #0
  406b14:	d14d      	bne.n	406bb2 <follow_path+0x2e2>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
  406b16:	f012 0f04 	tst.w	r2, #4
  406b1a:	f47f af6e 	bne.w	4069fa <follow_path+0x12a>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
  406b1e:	f8da 3014 	ldr.w	r3, [sl, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
  406b22:	7ada      	ldrb	r2, [r3, #11]
  406b24:	f012 0f10 	tst.w	r2, #16
  406b28:	d059      	beq.n	406bde <follow_path+0x30e>
			dj->sclust = LD_CLUST(dir);
  406b2a:	7d59      	ldrb	r1, [r3, #21]
  406b2c:	7d1a      	ldrb	r2, [r3, #20]
  406b2e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  406b32:	7ed9      	ldrb	r1, [r3, #27]
  406b34:	7e9b      	ldrb	r3, [r3, #26]
  406b36:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  406b3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  406b3e:	f8ca 3008 	str.w	r3, [sl, #8]
  406b42:	e6e9      	b.n	406918 <follow_path+0x48>
				cf |= NS_LOSS | NS_LFN; break;
  406b44:	f045 0503 	orr.w	r5, r5, #3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  406b48:	f8da 3018 	ldr.w	r3, [sl, #24]
  406b4c:	781a      	ldrb	r2, [r3, #0]
  406b4e:	2ae5      	cmp	r2, #229	; 0xe5
  406b50:	d1c0      	bne.n	406ad4 <follow_path+0x204>
  406b52:	220b      	movs	r2, #11
  406b54:	9200      	str	r2, [sp, #0]
  406b56:	2205      	movs	r2, #5
  406b58:	701a      	strb	r2, [r3, #0]
  406b5a:	e7b6      	b.n	406aca <follow_path+0x1fa>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
  406b5c:	2100      	movs	r1, #0
  406b5e:	47c8      	blx	r9
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
  406b60:	4603      	mov	r3, r0
  406b62:	2800      	cmp	r0, #0
  406b64:	d070      	beq.n	406c48 <follow_path+0x378>
  406b66:	4a2f      	ldr	r2, [pc, #188]	; (406c24 <follow_path+0x354>)
  406b68:	4413      	add	r3, r2
  406b6a:	f813 0c80 	ldrb.w	r0, [r3, #-128]
			cf |= NS_LFN;				/* Force create LFN entry */
  406b6e:	f045 0502 	orr.w	r5, r5, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  406b72:	2800      	cmp	r0, #0
  406b74:	d187      	bne.n	406a86 <follow_path+0x1b6>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
  406b76:	f045 0503 	orr.w	r5, r5, #3
  406b7a:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
  406b7c:	f8da 3018 	ldr.w	r3, [sl, #24]
  406b80:	9901      	ldr	r1, [sp, #4]
  406b82:	460a      	mov	r2, r1
  406b84:	5458      	strb	r0, [r3, r1]
		w = lfn[si++];					/* Get an LFN char */
  406b86:	4633      	mov	r3, r6
		dj->fn[i++] = (BYTE)w;
  406b88:	3201      	adds	r2, #1
  406b8a:	9201      	str	r2, [sp, #4]
  406b8c:	e76a      	b.n	406a64 <follow_path+0x194>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  406b8e:	2b00      	cmp	r3, #0
  406b90:	d1f1      	bne.n	406b76 <follow_path+0x2a6>
  406b92:	e783      	b.n	406a9c <follow_path+0x1cc>
					if (IsLower(w)) {	/* ASCII small capital */
  406b94:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
  406b98:	b29b      	uxth	r3, r3
  406b9a:	2b19      	cmp	r3, #25
  406b9c:	d8ee      	bhi.n	406b7c <follow_path+0x2ac>
						b |= 1; w -= 0x20;
  406b9e:	f047 0701 	orr.w	r7, r7, #1
  406ba2:	3820      	subs	r0, #32
  406ba4:	b280      	uxth	r0, r0
  406ba6:	e7e9      	b.n	406b7c <follow_path+0x2ac>
		cf |= NS_LFN;
  406ba8:	f045 0502 	orr.w	r5, r5, #2
  406bac:	e79a      	b.n	406ae4 <follow_path+0x214>
  406bae:	2306      	movs	r3, #6
  406bb0:	e723      	b.n	4069fa <follow_path+0x12a>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
  406bb2:	2b04      	cmp	r3, #4
  406bb4:	f47f af21 	bne.w	4069fa <follow_path+0x12a>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
  406bb8:	f012 0f20 	tst.w	r2, #32
  406bbc:	d009      	beq.n	406bd2 <follow_path+0x302>
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
  406bbe:	2300      	movs	r3, #0
  406bc0:	f8ca 3008 	str.w	r3, [sl, #8]
  406bc4:	f8ca 3014 	str.w	r3, [sl, #20]
					if (!(ns & NS_LAST)) continue;
  406bc8:	f012 0f04 	tst.w	r2, #4
  406bcc:	f43f aea4 	beq.w	406918 <follow_path+0x48>
  406bd0:	e713      	b.n	4069fa <follow_path+0x12a>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  406bd2:	f002 0204 	and.w	r2, r2, #4
  406bd6:	2a00      	cmp	r2, #0
  406bd8:	bf08      	it	eq
  406bda:	2305      	moveq	r3, #5
  406bdc:	e70d      	b.n	4069fa <follow_path+0x12a>
				res = FR_NO_PATH; break;
  406bde:	2305      	movs	r3, #5
  406be0:	e70b      	b.n	4069fa <follow_path+0x12a>
		w = p[si++];					/* Get a character */
  406be2:	2301      	movs	r3, #1
	si = di = 0;
  406be4:	2400      	movs	r4, #0
	*path = &p[si];						/* Return pointer to the next segment */
  406be6:	eb06 0803 	add.w	r8, r6, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  406bea:	2504      	movs	r5, #4
  406bec:	e004      	b.n	406bf8 <follow_path+0x328>
		w = p[si++];					/* Get a character */
  406bee:	2301      	movs	r3, #1
	si = di = 0;
  406bf0:	2400      	movs	r4, #0
	*path = &p[si];						/* Return pointer to the next segment */
  406bf2:	eb06 0803 	add.w	r8, r6, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  406bf6:	2500      	movs	r5, #0
	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
  406bf8:	2c01      	cmp	r4, #1
  406bfa:	f43f aed0 	beq.w	40699e <follow_path+0xce>
  406bfe:	2c02      	cmp	r4, #2
  406c00:	f43f aee5 	beq.w	4069ce <follow_path+0xfe>
	while (di) {						/* Strip trailing spaces and dots */
  406c04:	2c00      	cmp	r4, #0
  406c06:	d0d2      	beq.n	406bae <follow_path+0x2de>
  406c08:	eb0b 0244 	add.w	r2, fp, r4, lsl #1
  406c0c:	e6ed      	b.n	4069ea <follow_path+0x11a>
  406c0e:	bf00      	nop
  406c10:	00405d9d 	.word	0x00405d9d
  406c14:	0040ee99 	.word	0x0040ee99
  406c18:	00405671 	.word	0x00405671
  406c1c:	0040eea5 	.word	0x0040eea5
  406c20:	004061e9 	.word	0x004061e9
  406c24:	0040ee18 	.word	0x0040ee18
  406c28:	00407ca9 	.word	0x00407ca9
		w = p[si++];					/* Get a character */
  406c2c:	2301      	movs	r3, #1
	si = di = 0;
  406c2e:	2400      	movs	r4, #0
  406c30:	e7df      	b.n	406bf2 <follow_path+0x322>
			if (ni == 11) {				/* Long extension */
  406c32:	9b00      	ldr	r3, [sp, #0]
  406c34:	2b0b      	cmp	r3, #11
  406c36:	d085      	beq.n	406b44 <follow_path+0x274>
			b <<= 2; continue;
  406c38:	00bf      	lsls	r7, r7, #2
  406c3a:	b2ff      	uxtb	r7, r7
  406c3c:	4623      	mov	r3, r4
			si = di; i = 8; ni = 11;	/* Enter extension section */
  406c3e:	220b      	movs	r2, #11
  406c40:	9200      	str	r2, [sp, #0]
  406c42:	2208      	movs	r2, #8
  406c44:	9201      	str	r2, [sp, #4]
  406c46:	e70d      	b.n	406a64 <follow_path+0x194>
			cf |= NS_LFN;				/* Force create LFN entry */
  406c48:	f045 0502 	orr.w	r5, r5, #2
  406c4c:	e793      	b.n	406b76 <follow_path+0x2a6>
  406c4e:	bf00      	nop

00406c50 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
  406c50:	2807      	cmp	r0, #7
  406c52:	d901      	bls.n	406c58 <f_mount+0x8>
		return FR_INVALID_DRIVE;
  406c54:	200b      	movs	r0, #11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
  406c56:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
  406c58:	4b06      	ldr	r3, [pc, #24]	; (406c74 <f_mount+0x24>)
  406c5a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	if (rfs) {
  406c5e:	b10b      	cbz	r3, 406c64 <f_mount+0x14>
		rfs->fs_type = 0;		/* Clear old fs object */
  406c60:	2200      	movs	r2, #0
  406c62:	701a      	strb	r2, [r3, #0]
	if (fs) {
  406c64:	b109      	cbz	r1, 406c6a <f_mount+0x1a>
		fs->fs_type = 0;		/* Clear new fs object */
  406c66:	2300      	movs	r3, #0
  406c68:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
  406c6a:	4b02      	ldr	r3, [pc, #8]	; (406c74 <f_mount+0x24>)
  406c6c:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return FR_OK;
  406c70:	2000      	movs	r0, #0
  406c72:	4770      	bx	lr
  406c74:	20000e90 	.word	0x20000e90

00406c78 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
  406c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406c7c:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
  406c80:	4605      	mov	r5, r0
  406c82:	9101      	str	r1, [sp, #4]
  406c84:	4616      	mov	r6, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
  406c86:	2300      	movs	r3, #0
  406c88:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
  406c8a:	f002 071f 	and.w	r7, r2, #31
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
  406c8e:	f002 021e 	and.w	r2, r2, #30
  406c92:	a985      	add	r1, sp, #532	; 0x214
  406c94:	a801      	add	r0, sp, #4
  406c96:	4b58      	ldr	r3, [pc, #352]	; (406df8 <f_open+0x180>)
  406c98:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
  406c9a:	ab82      	add	r3, sp, #520	; 0x208
  406c9c:	938b      	str	r3, [sp, #556]	; 0x22c
  406c9e:	ab02      	add	r3, sp, #8
  406ca0:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
  406ca2:	b140      	cbz	r0, 406cb6 <f_open+0x3e>
  406ca4:	4603      	mov	r3, r0
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
  406ca6:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  406ca8:	f016 0f1c 	tst.w	r6, #28
  406cac:	d117      	bne.n	406cde <f_open+0x66>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
  406cae:	2b00      	cmp	r3, #0
  406cb0:	f040 8092 	bne.w	406dd8 <f_open+0x160>
  406cb4:	e00d      	b.n	406cd2 <f_open+0x5a>
		res = follow_path(&dj, path);	/* Follow the file path */
  406cb6:	9901      	ldr	r1, [sp, #4]
  406cb8:	a885      	add	r0, sp, #532	; 0x214
  406cba:	4b50      	ldr	r3, [pc, #320]	; (406dfc <f_open+0x184>)
  406cbc:	4798      	blx	r3
	dir = dj.dir;
  406cbe:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
  406cc0:	4603      	mov	r3, r0
  406cc2:	2800      	cmp	r0, #0
  406cc4:	d1f0      	bne.n	406ca8 <f_open+0x30>
		if (!dir)	/* Current dir itself */
  406cc6:	2c00      	cmp	r4, #0
  406cc8:	f000 808b 	beq.w	406de2 <f_open+0x16a>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  406ccc:	f016 0f1c 	tst.w	r6, #28
  406cd0:	d116      	bne.n	406d00 <f_open+0x88>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
  406cd2:	7ae3      	ldrb	r3, [r4, #11]
  406cd4:	f013 0f10 	tst.w	r3, #16
  406cd8:	d04f      	beq.n	406d7a <f_open+0x102>
				res = FR_NO_FILE;
  406cda:	2304      	movs	r3, #4
  406cdc:	e07c      	b.n	406dd8 <f_open+0x160>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
  406cde:	2b04      	cmp	r3, #4
  406ce0:	d005      	beq.n	406cee <f_open+0x76>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  406ce2:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  406ce6:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
  406ce8:	2b00      	cmp	r3, #0
  406cea:	d057      	beq.n	406d9c <f_open+0x124>
  406cec:	e074      	b.n	406dd8 <f_open+0x160>
				res = dir_register(&dj);
  406cee:	a885      	add	r0, sp, #532	; 0x214
  406cf0:	4b43      	ldr	r3, [pc, #268]	; (406e00 <f_open+0x188>)
  406cf2:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  406cf4:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  406cf8:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  406cfa:	4603      	mov	r3, r0
  406cfc:	b138      	cbz	r0, 406d0e <f_open+0x96>
  406cfe:	e06b      	b.n	406dd8 <f_open+0x160>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
  406d00:	7ae3      	ldrb	r3, [r4, #11]
  406d02:	f013 0f11 	tst.w	r3, #17
  406d06:	d173      	bne.n	406df0 <f_open+0x178>
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
  406d08:	f016 0f04 	tst.w	r6, #4
  406d0c:	d172      	bne.n	406df4 <f_open+0x17c>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  406d0e:	f017 0f08 	tst.w	r7, #8
  406d12:	d03f      	beq.n	406d94 <f_open+0x11c>
			dw = get_fattime();					/* Created time */
  406d14:	4b3b      	ldr	r3, [pc, #236]	; (406e04 <f_open+0x18c>)
  406d16:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
  406d18:	73a0      	strb	r0, [r4, #14]
  406d1a:	f3c0 2307 	ubfx	r3, r0, #8, #8
  406d1e:	73e3      	strb	r3, [r4, #15]
  406d20:	0c03      	lsrs	r3, r0, #16
  406d22:	7423      	strb	r3, [r4, #16]
  406d24:	0e00      	lsrs	r0, r0, #24
  406d26:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
  406d28:	2300      	movs	r3, #0
  406d2a:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
  406d2c:	7723      	strb	r3, [r4, #28]
  406d2e:	7763      	strb	r3, [r4, #29]
  406d30:	77a3      	strb	r3, [r4, #30]
  406d32:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
  406d34:	7d62      	ldrb	r2, [r4, #21]
  406d36:	7d26      	ldrb	r6, [r4, #20]
  406d38:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
  406d3c:	7ee1      	ldrb	r1, [r4, #27]
  406d3e:	7ea2      	ldrb	r2, [r4, #26]
  406d40:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
			ST_CLUST(dir, 0);					/* cluster = 0 */
  406d44:	76a3      	strb	r3, [r4, #26]
  406d46:	76e3      	strb	r3, [r4, #27]
  406d48:	7523      	strb	r3, [r4, #20]
  406d4a:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
  406d4c:	9885      	ldr	r0, [sp, #532]	; 0x214
  406d4e:	2301      	movs	r3, #1
  406d50:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
  406d52:	ea52 4606 	orrs.w	r6, r2, r6, lsl #16
  406d56:	d01b      	beq.n	406d90 <f_open+0x118>
				dw = dj.fs->winsect;
  406d58:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
				res = remove_chain(dj.fs, cl);
  406d5c:	4631      	mov	r1, r6
  406d5e:	4b2a      	ldr	r3, [pc, #168]	; (406e08 <f_open+0x190>)
  406d60:	4798      	blx	r3
				if (res == FR_OK) {
  406d62:	4603      	mov	r3, r0
  406d64:	2800      	cmp	r0, #0
  406d66:	d137      	bne.n	406dd8 <f_open+0x160>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
  406d68:	9885      	ldr	r0, [sp, #532]	; 0x214
  406d6a:	3e01      	subs	r6, #1
  406d6c:	60c6      	str	r6, [r0, #12]
					res = move_window(dj.fs, dw);
  406d6e:	4641      	mov	r1, r8
  406d70:	4b26      	ldr	r3, [pc, #152]	; (406e0c <f_open+0x194>)
  406d72:	4798      	blx	r3
	if (res == FR_OK) {
  406d74:	4603      	mov	r3, r0
  406d76:	b158      	cbz	r0, 406d90 <f_open+0x118>
  406d78:	e02e      	b.n	406dd8 <f_open+0x160>
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
  406d7a:	f016 0f02 	tst.w	r6, #2
  406d7e:	d004      	beq.n	406d8a <f_open+0x112>
  406d80:	f013 0f01 	tst.w	r3, #1
  406d84:	d001      	beq.n	406d8a <f_open+0x112>
					res = FR_DENIED;
  406d86:	2307      	movs	r3, #7
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
	}

	LEAVE_FF(dj.fs, res);
  406d88:	e026      	b.n	406dd8 <f_open+0x160>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
  406d8a:	f016 0f08 	tst.w	r6, #8
  406d8e:	d001      	beq.n	406d94 <f_open+0x11c>
			mode |= FA__WRITTEN;
  406d90:	f047 0720 	orr.w	r7, r7, #32
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
  406d94:	9b85      	ldr	r3, [sp, #532]	; 0x214
  406d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  406d98:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
  406d9a:	622c      	str	r4, [r5, #32]
		fp->flag = mode;					/* File access mode */
  406d9c:	71af      	strb	r7, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
  406d9e:	7d62      	ldrb	r2, [r4, #21]
  406da0:	7d23      	ldrb	r3, [r4, #20]
  406da2:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  406da6:	7ee1      	ldrb	r1, [r4, #27]
  406da8:	7ea3      	ldrb	r3, [r4, #26]
  406daa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  406dae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  406db2:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
  406db4:	7fe2      	ldrb	r2, [r4, #31]
  406db6:	7fa3      	ldrb	r3, [r4, #30]
  406db8:	041b      	lsls	r3, r3, #16
  406dba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  406dbe:	7f22      	ldrb	r2, [r4, #28]
  406dc0:	4313      	orrs	r3, r2
  406dc2:	7f62      	ldrb	r2, [r4, #29]
  406dc4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  406dc8:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
  406dca:	2300      	movs	r3, #0
  406dcc:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
  406dce:	61ab      	str	r3, [r5, #24]
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
  406dd0:	9a85      	ldr	r2, [sp, #532]	; 0x214
  406dd2:	602a      	str	r2, [r5, #0]
  406dd4:	88d2      	ldrh	r2, [r2, #6]
  406dd6:	80aa      	strh	r2, [r5, #4]
}
  406dd8:	4618      	mov	r0, r3
  406dda:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
  406dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  406de2:	f016 0f1c 	tst.w	r6, #28
  406de6:	d101      	bne.n	406dec <f_open+0x174>
			res = FR_INVALID_NAME;
  406de8:	2306      	movs	r3, #6
  406dea:	e77d      	b.n	406ce8 <f_open+0x70>
  406dec:	2306      	movs	r3, #6
  406dee:	e778      	b.n	406ce2 <f_open+0x6a>
				res = FR_DENIED;
  406df0:	2307      	movs	r3, #7
  406df2:	e7f1      	b.n	406dd8 <f_open+0x160>
					res = FR_EXIST;
  406df4:	2308      	movs	r3, #8
  406df6:	e7ef      	b.n	406dd8 <f_open+0x160>
  406df8:	00405779 	.word	0x00405779
  406dfc:	004068d1 	.word	0x004068d1
  406e00:	00406395 	.word	0x00406395
  406e04:	00405605 	.word	0x00405605
  406e08:	00406035 	.word	0x00406035
  406e0c:	00405c25 	.word	0x00405c25

00406e10 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
  406e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406e14:	b083      	sub	sp, #12
  406e16:	4604      	mov	r4, r0
  406e18:	4689      	mov	r9, r1
  406e1a:	4615      	mov	r5, r2
  406e1c:	4698      	mov	r8, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
  406e1e:	2300      	movs	r3, #0
  406e20:	f8c8 3000 	str.w	r3, [r8]

	res = validate(fp->fs, fp->id);				/* Check validity */
  406e24:	8881      	ldrh	r1, [r0, #4]
  406e26:	6800      	ldr	r0, [r0, #0]
  406e28:	4b58      	ldr	r3, [pc, #352]	; (406f8c <f_read+0x17c>)
  406e2a:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  406e2c:	9001      	str	r0, [sp, #4]
  406e2e:	2800      	cmp	r0, #0
  406e30:	f040 80a8 	bne.w	406f84 <f_read+0x174>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
  406e34:	79a3      	ldrb	r3, [r4, #6]
  406e36:	f013 0f80 	tst.w	r3, #128	; 0x80
  406e3a:	f040 80a1 	bne.w	406f80 <f_read+0x170>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
  406e3e:	f013 0f01 	tst.w	r3, #1
  406e42:	d102      	bne.n	406e4a <f_read+0x3a>
		LEAVE_FF(fp->fs, FR_DENIED);
  406e44:	2307      	movs	r3, #7
  406e46:	9301      	str	r3, [sp, #4]
  406e48:	e09c      	b.n	406f84 <f_read+0x174>
	remain = fp->fsize - fp->fptr;
  406e4a:	68e6      	ldr	r6, [r4, #12]
  406e4c:	68a3      	ldr	r3, [r4, #8]
  406e4e:	1af6      	subs	r6, r6, r3
  406e50:	42ae      	cmp	r6, r5
  406e52:	bf28      	it	cs
  406e54:	462e      	movcs	r6, r5
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
  406e56:	2e00      	cmp	r6, #0
  406e58:	d14c      	bne.n	406ef4 <f_read+0xe4>
  406e5a:	e093      	b.n	406f84 <f_read+0x174>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
  406e5c:	6961      	ldr	r1, [r4, #20]
  406e5e:	4b4c      	ldr	r3, [pc, #304]	; (406f90 <f_read+0x180>)
  406e60:	4798      	blx	r3
  406e62:	e057      	b.n	406f14 <f_read+0x104>
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
  406e64:	79a3      	ldrb	r3, [r4, #6]
  406e66:	f063 037f 	orn	r3, r3, #127	; 0x7f
  406e6a:	71a3      	strb	r3, [r4, #6]
  406e6c:	2302      	movs	r3, #2
  406e6e:	9301      	str	r3, [sp, #4]
  406e70:	e088      	b.n	406f84 <f_read+0x174>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  406e72:	79a3      	ldrb	r3, [r4, #6]
  406e74:	f063 037f 	orn	r3, r3, #127	; 0x7f
  406e78:	71a3      	strb	r3, [r4, #6]
  406e7a:	2301      	movs	r3, #1
  406e7c:	9301      	str	r3, [sp, #4]
  406e7e:	e081      	b.n	406f84 <f_read+0x174>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  406e80:	79a3      	ldrb	r3, [r4, #6]
  406e82:	f063 037f 	orn	r3, r3, #127	; 0x7f
  406e86:	71a3      	strb	r3, [r4, #6]
  406e88:	2302      	movs	r3, #2
  406e8a:	9301      	str	r3, [sp, #4]
  406e8c:	e07a      	b.n	406f84 <f_read+0x174>
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
			if (cc) {							/* Read maximum contiguous sectors directly */
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
					cc = fp->fs->csize - csect;
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
  406e8e:	79a3      	ldrb	r3, [r4, #6]
  406e90:	f063 037f 	orn	r3, r3, #127	; 0x7f
  406e94:	71a3      	strb	r3, [r4, #6]
  406e96:	2301      	movs	r3, #1
  406e98:	9301      	str	r3, [sp, #4]
  406e9a:	e073      	b.n	406f84 <f_read+0x174>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
  406e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
  406ea0:	3134      	adds	r1, #52	; 0x34
  406ea2:	eb09 2040 	add.w	r0, r9, r0, lsl #9
  406ea6:	4b3b      	ldr	r3, [pc, #236]	; (406f94 <f_read+0x184>)
  406ea8:	4798      	blx	r3
  406eaa:	e05f      	b.n	406f6c <f_read+0x15c>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
  406eac:	61a5      	str	r5, [r4, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
  406eae:	68a5      	ldr	r5, [r4, #8]
  406eb0:	f3c5 0508 	ubfx	r5, r5, #0, #9
  406eb4:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
  406eb8:	42b5      	cmp	r5, r6
  406eba:	bf28      	it	cs
  406ebc:	4635      	movcs	r5, r6
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
  406ebe:	69a1      	ldr	r1, [r4, #24]
  406ec0:	6820      	ldr	r0, [r4, #0]
  406ec2:	4b35      	ldr	r3, [pc, #212]	; (406f98 <f_read+0x188>)
  406ec4:	4798      	blx	r3
  406ec6:	2800      	cmp	r0, #0
  406ec8:	d153      	bne.n	406f72 <f_read+0x162>
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
  406eca:	68a1      	ldr	r1, [r4, #8]
  406ecc:	f3c1 0108 	ubfx	r1, r1, #0, #9
  406ed0:	3134      	adds	r1, #52	; 0x34
  406ed2:	6823      	ldr	r3, [r4, #0]
  406ed4:	462a      	mov	r2, r5
  406ed6:	4419      	add	r1, r3
  406ed8:	4648      	mov	r0, r9
  406eda:	4b2e      	ldr	r3, [pc, #184]	; (406f94 <f_read+0x184>)
  406edc:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
  406ede:	44a9      	add	r9, r5
  406ee0:	68a3      	ldr	r3, [r4, #8]
  406ee2:	442b      	add	r3, r5
  406ee4:	60a3      	str	r3, [r4, #8]
  406ee6:	f8d8 3000 	ldr.w	r3, [r8]
  406eea:	442b      	add	r3, r5
  406eec:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btr;								/* Repeat until all data read */
  406ef0:	1b76      	subs	r6, r6, r5
  406ef2:	d047      	beq.n	406f84 <f_read+0x174>
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
  406ef4:	68a2      	ldr	r2, [r4, #8]
  406ef6:	f3c2 0308 	ubfx	r3, r2, #0, #9
  406efa:	2b00      	cmp	r3, #0
  406efc:	d1d7      	bne.n	406eae <f_read+0x9e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
  406efe:	6820      	ldr	r0, [r4, #0]
  406f00:	7883      	ldrb	r3, [r0, #2]
  406f02:	3b01      	subs	r3, #1
  406f04:	ea03 2352 	and.w	r3, r3, r2, lsr #9
			if (!csect) {						/* On the cluster boundary? */
  406f08:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
  406f0c:	d108      	bne.n	406f20 <f_read+0x110>
				if (fp->fptr == 0) {			/* On the top of the file? */
  406f0e:	2a00      	cmp	r2, #0
  406f10:	d1a4      	bne.n	406e5c <f_read+0x4c>
					clst = fp->sclust;			/* Follow from the origin */
  406f12:	6920      	ldr	r0, [r4, #16]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
  406f14:	2801      	cmp	r0, #1
  406f16:	d9a5      	bls.n	406e64 <f_read+0x54>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  406f18:	f1b0 3fff 	cmp.w	r0, #4294967295
  406f1c:	d0a9      	beq.n	406e72 <f_read+0x62>
				fp->clust = clst;				/* Update current cluster */
  406f1e:	6160      	str	r0, [r4, #20]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
  406f20:	f8d4 a000 	ldr.w	sl, [r4]
  406f24:	6961      	ldr	r1, [r4, #20]
  406f26:	4650      	mov	r0, sl
  406f28:	4b1c      	ldr	r3, [pc, #112]	; (406f9c <f_read+0x18c>)
  406f2a:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  406f2c:	4605      	mov	r5, r0
  406f2e:	2800      	cmp	r0, #0
  406f30:	d0a6      	beq.n	406e80 <f_read+0x70>
			sect += csect;
  406f32:	443d      	add	r5, r7
			if (cc) {							/* Read maximum contiguous sectors directly */
  406f34:	ea5f 2b56 	movs.w	fp, r6, lsr #9
  406f38:	d0b8      	beq.n	406eac <f_read+0x9c>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
  406f3a:	f89a 3002 	ldrb.w	r3, [sl, #2]
  406f3e:	eb07 020b 	add.w	r2, r7, fp
  406f42:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
  406f44:	bf88      	it	hi
  406f46:	eba3 0b07 	subhi.w	fp, r3, r7
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
  406f4a:	fa5f f38b 	uxtb.w	r3, fp
  406f4e:	462a      	mov	r2, r5
  406f50:	4649      	mov	r1, r9
  406f52:	f89a 0001 	ldrb.w	r0, [sl, #1]
  406f56:	4f12      	ldr	r7, [pc, #72]	; (406fa0 <f_read+0x190>)
  406f58:	47b8      	blx	r7
  406f5a:	2800      	cmp	r0, #0
  406f5c:	d197      	bne.n	406e8e <f_read+0x7e>
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
  406f5e:	6821      	ldr	r1, [r4, #0]
  406f60:	790b      	ldrb	r3, [r1, #4]
  406f62:	b11b      	cbz	r3, 406f6c <f_read+0x15c>
  406f64:	6b08      	ldr	r0, [r1, #48]	; 0x30
  406f66:	1b40      	subs	r0, r0, r5
  406f68:	4583      	cmp	fp, r0
  406f6a:	d897      	bhi.n	406e9c <f_read+0x8c>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
  406f6c:	ea4f 254b 	mov.w	r5, fp, lsl #9
				continue;
  406f70:	e7b5      	b.n	406ede <f_read+0xce>
			ABORT(fp->fs, FR_DISK_ERR);
  406f72:	79a3      	ldrb	r3, [r4, #6]
  406f74:	f063 037f 	orn	r3, r3, #127	; 0x7f
  406f78:	71a3      	strb	r3, [r4, #6]
  406f7a:	2301      	movs	r3, #1
  406f7c:	9301      	str	r3, [sp, #4]
  406f7e:	e001      	b.n	406f84 <f_read+0x174>
		LEAVE_FF(fp->fs, FR_INT_ERR);
  406f80:	2302      	movs	r3, #2
  406f82:	9301      	str	r3, [sp, #4]
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
  406f84:	9801      	ldr	r0, [sp, #4]
  406f86:	b003      	add	sp, #12
  406f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406f8c:	004056b5 	.word	0x004056b5
  406f90:	00405cb5 	.word	0x00405cb5
  406f94:	0040565d 	.word	0x0040565d
  406f98:	00405c25 	.word	0x00405c25
  406f9c:	0040567f 	.word	0x0040567f
  406fa0:	004054b5 	.word	0x004054b5

00406fa4 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
  406fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406fa8:	b083      	sub	sp, #12
  406faa:	4604      	mov	r4, r0
  406fac:	4689      	mov	r9, r1
  406fae:	4616      	mov	r6, r2
  406fb0:	4698      	mov	r8, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
  406fb2:	2300      	movs	r3, #0
  406fb4:	f8c8 3000 	str.w	r3, [r8]

	res = validate(fp->fs, fp->id);			/* Check validity */
  406fb8:	8881      	ldrh	r1, [r0, #4]
  406fba:	6800      	ldr	r0, [r0, #0]
  406fbc:	4b75      	ldr	r3, [pc, #468]	; (407194 <f_write+0x1f0>)
  406fbe:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  406fc0:	9001      	str	r0, [sp, #4]
  406fc2:	2800      	cmp	r0, #0
  406fc4:	f040 80e2 	bne.w	40718c <f_write+0x1e8>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
  406fc8:	79a3      	ldrb	r3, [r4, #6]
  406fca:	f013 0f80 	tst.w	r3, #128	; 0x80
  406fce:	f040 80db 	bne.w	407188 <f_write+0x1e4>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
  406fd2:	f013 0f02 	tst.w	r3, #2
  406fd6:	d102      	bne.n	406fde <f_write+0x3a>
		LEAVE_FF(fp->fs, FR_DENIED);
  406fd8:	2307      	movs	r3, #7
  406fda:	9301      	str	r3, [sp, #4]
  406fdc:	e0d6      	b.n	40718c <f_write+0x1e8>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
  406fde:	68e3      	ldr	r3, [r4, #12]
  406fe0:	42f3      	cmn	r3, r6
  406fe2:	d20e      	bcs.n	407002 <f_write+0x5e>

	for ( ;  btw;							/* Repeat until all data written */
  406fe4:	2e00      	cmp	r6, #0
  406fe6:	d174      	bne.n	4070d2 <f_write+0x12e>
  406fe8:	e00b      	b.n	407002 <f_write+0x5e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
			if (!csect) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {		/* On the top of the file? */
					clst = fp->sclust;		/* Follow from the origin */
					if (clst == 0)			/* When no cluster is allocated, */
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
  406fea:	2100      	movs	r1, #0
  406fec:	4b6a      	ldr	r3, [pc, #424]	; (407198 <f_write+0x1f4>)
  406fee:	4798      	blx	r3
  406ff0:	4603      	mov	r3, r0
  406ff2:	6120      	str	r0, [r4, #16]
  406ff4:	e003      	b.n	406ffe <f_write+0x5a>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
  406ff6:	6961      	ldr	r1, [r4, #20]
  406ff8:	4b67      	ldr	r3, [pc, #412]	; (407198 <f_write+0x1f4>)
  406ffa:	4798      	blx	r3
  406ffc:	4603      	mov	r3, r0
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
  406ffe:	2b00      	cmp	r3, #0
  407000:	d17a      	bne.n	4070f8 <f_write+0x154>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
  407002:	68a3      	ldr	r3, [r4, #8]
  407004:	68e2      	ldr	r2, [r4, #12]
  407006:	4293      	cmp	r3, r2
  407008:	bf88      	it	hi
  40700a:	60e3      	strhi	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
  40700c:	79a3      	ldrb	r3, [r4, #6]
  40700e:	f043 0320 	orr.w	r3, r3, #32
  407012:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
  407014:	e0ba      	b.n	40718c <f_write+0x1e8>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  407016:	79a3      	ldrb	r3, [r4, #6]
  407018:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40701c:	71a3      	strb	r3, [r4, #6]
  40701e:	2302      	movs	r3, #2
  407020:	9301      	str	r3, [sp, #4]
  407022:	e0b3      	b.n	40718c <f_write+0x1e8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  407024:	79a3      	ldrb	r3, [r4, #6]
  407026:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40702a:	71a3      	strb	r3, [r4, #6]
  40702c:	2301      	movs	r3, #1
  40702e:	9301      	str	r3, [sp, #4]
  407030:	e0ac      	b.n	40718c <f_write+0x1e8>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
  407032:	2100      	movs	r1, #0
  407034:	4b59      	ldr	r3, [pc, #356]	; (40719c <f_write+0x1f8>)
  407036:	4798      	blx	r3
  407038:	2800      	cmp	r0, #0
  40703a:	d068      	beq.n	40710e <f_write+0x16a>
				ABORT(fp->fs, FR_DISK_ERR);
  40703c:	79a3      	ldrb	r3, [r4, #6]
  40703e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  407042:	71a3      	strb	r3, [r4, #6]
  407044:	2301      	movs	r3, #1
  407046:	9301      	str	r3, [sp, #4]
  407048:	e0a0      	b.n	40718c <f_write+0x1e8>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  40704a:	79a3      	ldrb	r3, [r4, #6]
  40704c:	f063 037f 	orn	r3, r3, #127	; 0x7f
  407050:	71a3      	strb	r3, [r4, #6]
  407052:	2302      	movs	r3, #2
  407054:	9301      	str	r3, [sp, #4]
  407056:	e099      	b.n	40718c <f_write+0x1e8>
					ABORT(fp->fs, FR_DISK_ERR);
  407058:	79a3      	ldrb	r3, [r4, #6]
  40705a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40705e:	71a3      	strb	r3, [r4, #6]
  407060:	2301      	movs	r3, #1
  407062:	9301      	str	r3, [sp, #4]
  407064:	e092      	b.n	40718c <f_write+0x1e8>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
  407066:	f44f 7200 	mov.w	r2, #512	; 0x200
  40706a:	eb09 2141 	add.w	r1, r9, r1, lsl #9
  40706e:	3034      	adds	r0, #52	; 0x34
  407070:	4b4b      	ldr	r3, [pc, #300]	; (4071a0 <f_write+0x1fc>)
  407072:	4798      	blx	r3
					fp->fs->wflag = 0;
  407074:	6823      	ldr	r3, [r4, #0]
  407076:	2200      	movs	r2, #0
  407078:	711a      	strb	r2, [r3, #4]
  40707a:	e06c      	b.n	407156 <f_write+0x1b2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
  40707c:	68a2      	ldr	r2, [r4, #8]
  40707e:	68e3      	ldr	r3, [r4, #12]
  407080:	429a      	cmp	r2, r3
  407082:	d26b      	bcs.n	40715c <f_write+0x1b8>
			fp->dsect = sect;
  407084:	61a5      	str	r5, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
  407086:	68a5      	ldr	r5, [r4, #8]
  407088:	f3c5 0508 	ubfx	r5, r5, #0, #9
  40708c:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
  407090:	42b5      	cmp	r5, r6
  407092:	bf28      	it	cs
  407094:	4635      	movcs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
  407096:	69a1      	ldr	r1, [r4, #24]
  407098:	6820      	ldr	r0, [r4, #0]
  40709a:	4b40      	ldr	r3, [pc, #256]	; (40719c <f_write+0x1f8>)
  40709c:	4798      	blx	r3
  40709e:	2800      	cmp	r0, #0
  4070a0:	d16b      	bne.n	40717a <f_write+0x1d6>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
  4070a2:	68a0      	ldr	r0, [r4, #8]
  4070a4:	f3c0 0008 	ubfx	r0, r0, #0, #9
  4070a8:	3034      	adds	r0, #52	; 0x34
  4070aa:	6823      	ldr	r3, [r4, #0]
  4070ac:	462a      	mov	r2, r5
  4070ae:	4649      	mov	r1, r9
  4070b0:	4418      	add	r0, r3
  4070b2:	4b3b      	ldr	r3, [pc, #236]	; (4071a0 <f_write+0x1fc>)
  4070b4:	4798      	blx	r3
		fp->fs->wflag = 1;
  4070b6:	6823      	ldr	r3, [r4, #0]
  4070b8:	2201      	movs	r2, #1
  4070ba:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
  4070bc:	44a9      	add	r9, r5
  4070be:	68a3      	ldr	r3, [r4, #8]
  4070c0:	442b      	add	r3, r5
  4070c2:	60a3      	str	r3, [r4, #8]
  4070c4:	f8d8 3000 	ldr.w	r3, [r8]
  4070c8:	442b      	add	r3, r5
  4070ca:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btw;							/* Repeat until all data written */
  4070ce:	1b76      	subs	r6, r6, r5
  4070d0:	d097      	beq.n	407002 <f_write+0x5e>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
  4070d2:	68a2      	ldr	r2, [r4, #8]
  4070d4:	f3c2 0308 	ubfx	r3, r2, #0, #9
  4070d8:	2b00      	cmp	r3, #0
  4070da:	d1d4      	bne.n	407086 <f_write+0xe2>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
  4070dc:	6820      	ldr	r0, [r4, #0]
  4070de:	7883      	ldrb	r3, [r0, #2]
  4070e0:	3b01      	subs	r3, #1
  4070e2:	ea03 2352 	and.w	r3, r3, r2, lsr #9
			if (!csect) {					/* On the cluster boundary? */
  4070e6:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
  4070ea:	d10b      	bne.n	407104 <f_write+0x160>
				if (fp->fptr == 0) {		/* On the top of the file? */
  4070ec:	2a00      	cmp	r2, #0
  4070ee:	d182      	bne.n	406ff6 <f_write+0x52>
					clst = fp->sclust;		/* Follow from the origin */
  4070f0:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
  4070f2:	2b00      	cmp	r3, #0
  4070f4:	f43f af79 	beq.w	406fea <f_write+0x46>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  4070f8:	2b01      	cmp	r3, #1
  4070fa:	d08c      	beq.n	407016 <f_write+0x72>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  4070fc:	f1b3 3fff 	cmp.w	r3, #4294967295
  407100:	d090      	beq.n	407024 <f_write+0x80>
				fp->clust = clst;			/* Update current cluster */
  407102:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
  407104:	6820      	ldr	r0, [r4, #0]
  407106:	6b02      	ldr	r2, [r0, #48]	; 0x30
  407108:	69a3      	ldr	r3, [r4, #24]
  40710a:	429a      	cmp	r2, r3
  40710c:	d091      	beq.n	407032 <f_write+0x8e>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
  40710e:	f8d4 a000 	ldr.w	sl, [r4]
  407112:	6961      	ldr	r1, [r4, #20]
  407114:	4650      	mov	r0, sl
  407116:	4b23      	ldr	r3, [pc, #140]	; (4071a4 <f_write+0x200>)
  407118:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  40711a:	4605      	mov	r5, r0
  40711c:	2800      	cmp	r0, #0
  40711e:	d094      	beq.n	40704a <f_write+0xa6>
			sect += csect;
  407120:	443d      	add	r5, r7
			if (cc) {						/* Write maximum contiguous sectors directly */
  407122:	ea5f 2b56 	movs.w	fp, r6, lsr #9
  407126:	d0a9      	beq.n	40707c <f_write+0xd8>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
  407128:	f89a 3002 	ldrb.w	r3, [sl, #2]
  40712c:	eb07 020b 	add.w	r2, r7, fp
  407130:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
  407132:	bf88      	it	hi
  407134:	eba3 0b07 	subhi.w	fp, r3, r7
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
  407138:	fa5f f38b 	uxtb.w	r3, fp
  40713c:	462a      	mov	r2, r5
  40713e:	4649      	mov	r1, r9
  407140:	f89a 0001 	ldrb.w	r0, [sl, #1]
  407144:	4f18      	ldr	r7, [pc, #96]	; (4071a8 <f_write+0x204>)
  407146:	47b8      	blx	r7
  407148:	2800      	cmp	r0, #0
  40714a:	d185      	bne.n	407058 <f_write+0xb4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
  40714c:	6820      	ldr	r0, [r4, #0]
  40714e:	6b01      	ldr	r1, [r0, #48]	; 0x30
  407150:	1b49      	subs	r1, r1, r5
  407152:	458b      	cmp	fp, r1
  407154:	d887      	bhi.n	407066 <f_write+0xc2>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
  407156:	ea4f 254b 	mov.w	r5, fp, lsl #9
				continue;
  40715a:	e7af      	b.n	4070bc <f_write+0x118>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
  40715c:	2100      	movs	r1, #0
  40715e:	4650      	mov	r0, sl
  407160:	4b0e      	ldr	r3, [pc, #56]	; (40719c <f_write+0x1f8>)
  407162:	4798      	blx	r3
  407164:	b910      	cbnz	r0, 40716c <f_write+0x1c8>
				fp->fs->winsect = sect;
  407166:	6823      	ldr	r3, [r4, #0]
  407168:	631d      	str	r5, [r3, #48]	; 0x30
  40716a:	e78b      	b.n	407084 <f_write+0xe0>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
  40716c:	79a3      	ldrb	r3, [r4, #6]
  40716e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  407172:	71a3      	strb	r3, [r4, #6]
  407174:	2301      	movs	r3, #1
  407176:	9301      	str	r3, [sp, #4]
  407178:	e008      	b.n	40718c <f_write+0x1e8>
			ABORT(fp->fs, FR_DISK_ERR);
  40717a:	79a3      	ldrb	r3, [r4, #6]
  40717c:	f063 037f 	orn	r3, r3, #127	; 0x7f
  407180:	71a3      	strb	r3, [r4, #6]
  407182:	2301      	movs	r3, #1
  407184:	9301      	str	r3, [sp, #4]
  407186:	e001      	b.n	40718c <f_write+0x1e8>
		LEAVE_FF(fp->fs, FR_INT_ERR);
  407188:	2302      	movs	r3, #2
  40718a:	9301      	str	r3, [sp, #4]
}
  40718c:	9801      	ldr	r0, [sp, #4]
  40718e:	b003      	add	sp, #12
  407190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407194:	004056b5 	.word	0x004056b5
  407198:	00405f75 	.word	0x00405f75
  40719c:	00405c25 	.word	0x00405c25
  4071a0:	0040565d 	.word	0x0040565d
  4071a4:	0040567f 	.word	0x0040567f
  4071a8:	00405525 	.word	0x00405525

004071ac <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
  4071ac:	b538      	push	{r3, r4, r5, lr}
  4071ae:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
  4071b0:	8881      	ldrh	r1, [r0, #4]
  4071b2:	6800      	ldr	r0, [r0, #0]
  4071b4:	4b1f      	ldr	r3, [pc, #124]	; (407234 <f_sync+0x88>)
  4071b6:	4798      	blx	r3
	if (res == FR_OK) {
  4071b8:	4603      	mov	r3, r0
  4071ba:	b918      	cbnz	r0, 4071c4 <f_sync+0x18>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
  4071bc:	79a2      	ldrb	r2, [r4, #6]
  4071be:	f012 0f20 	tst.w	r2, #32
  4071c2:	d101      	bne.n	4071c8 <f_sync+0x1c>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
  4071c4:	4618      	mov	r0, r3
  4071c6:	bd38      	pop	{r3, r4, r5, pc}
			res = move_window(fp->fs, fp->dir_sect);
  4071c8:	69e1      	ldr	r1, [r4, #28]
  4071ca:	6820      	ldr	r0, [r4, #0]
  4071cc:	4b1a      	ldr	r3, [pc, #104]	; (407238 <f_sync+0x8c>)
  4071ce:	4798      	blx	r3
			if (res == FR_OK) {
  4071d0:	4603      	mov	r3, r0
  4071d2:	2800      	cmp	r0, #0
  4071d4:	d1f6      	bne.n	4071c4 <f_sync+0x18>
				dir = fp->dir_ptr;
  4071d6:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
  4071d8:	7aeb      	ldrb	r3, [r5, #11]
  4071da:	f043 0320 	orr.w	r3, r3, #32
  4071de:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
  4071e0:	68e3      	ldr	r3, [r4, #12]
  4071e2:	772b      	strb	r3, [r5, #28]
  4071e4:	89a3      	ldrh	r3, [r4, #12]
  4071e6:	0a1b      	lsrs	r3, r3, #8
  4071e8:	776b      	strb	r3, [r5, #29]
  4071ea:	89e3      	ldrh	r3, [r4, #14]
  4071ec:	77ab      	strb	r3, [r5, #30]
  4071ee:	7be3      	ldrb	r3, [r4, #15]
  4071f0:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
  4071f2:	6923      	ldr	r3, [r4, #16]
  4071f4:	76ab      	strb	r3, [r5, #26]
  4071f6:	8a23      	ldrh	r3, [r4, #16]
  4071f8:	0a1b      	lsrs	r3, r3, #8
  4071fa:	76eb      	strb	r3, [r5, #27]
  4071fc:	8a63      	ldrh	r3, [r4, #18]
  4071fe:	752b      	strb	r3, [r5, #20]
  407200:	8a63      	ldrh	r3, [r4, #18]
  407202:	0a1b      	lsrs	r3, r3, #8
  407204:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
  407206:	4b0d      	ldr	r3, [pc, #52]	; (40723c <f_sync+0x90>)
  407208:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
  40720a:	75a8      	strb	r0, [r5, #22]
  40720c:	f3c0 2307 	ubfx	r3, r0, #8, #8
  407210:	75eb      	strb	r3, [r5, #23]
  407212:	0c03      	lsrs	r3, r0, #16
  407214:	762b      	strb	r3, [r5, #24]
  407216:	0e00      	lsrs	r0, r0, #24
  407218:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
  40721a:	79a3      	ldrb	r3, [r4, #6]
  40721c:	f023 0320 	bic.w	r3, r3, #32
  407220:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
  407222:	6823      	ldr	r3, [r4, #0]
  407224:	2201      	movs	r2, #1
  407226:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
  407228:	6820      	ldr	r0, [r4, #0]
  40722a:	4b05      	ldr	r3, [pc, #20]	; (407240 <f_sync+0x94>)
  40722c:	4798      	blx	r3
  40722e:	4603      	mov	r3, r0
  407230:	e7c8      	b.n	4071c4 <f_sync+0x18>
  407232:	bf00      	nop
  407234:	004056b5 	.word	0x004056b5
  407238:	00405c25 	.word	0x00405c25
  40723c:	00405605 	.word	0x00405605
  407240:	00406805 	.word	0x00406805

00407244 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
  407244:	b510      	push	{r4, lr}
  407246:	4604      	mov	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
  407248:	4b03      	ldr	r3, [pc, #12]	; (407258 <f_close+0x14>)
  40724a:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
  40724c:	4603      	mov	r3, r0
  40724e:	b908      	cbnz	r0, 407254 <f_close+0x10>
  407250:	2200      	movs	r2, #0
  407252:	6022      	str	r2, [r4, #0]
	return res;
#endif
}
  407254:	4618      	mov	r0, r3
  407256:	bd10      	pop	{r4, pc}
  407258:	004071ad 	.word	0x004071ad

0040725c <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
  40725c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407260:	4604      	mov	r4, r0
  407262:	460d      	mov	r5, r1
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
  407264:	8881      	ldrh	r1, [r0, #4]
  407266:	6800      	ldr	r0, [r0, #0]
  407268:	4b4f      	ldr	r3, [pc, #316]	; (4073a8 <f_lseek+0x14c>)
  40726a:	4798      	blx	r3
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  40726c:	4607      	mov	r7, r0
  40726e:	2800      	cmp	r0, #0
  407270:	f040 8096 	bne.w	4073a0 <f_lseek+0x144>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
  407274:	79a3      	ldrb	r3, [r4, #6]
  407276:	f013 0f80 	tst.w	r3, #128	; 0x80
  40727a:	f040 8090 	bne.w	40739e <f_lseek+0x142>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
  40727e:	68e2      	ldr	r2, [r4, #12]
  407280:	42aa      	cmp	r2, r5
  407282:	d204      	bcs.n	40728e <f_lseek+0x32>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
  407284:	f003 0302 	and.w	r3, r3, #2
#endif
			) ofs = fp->fsize;
  407288:	2b00      	cmp	r3, #0
  40728a:	bf08      	it	eq
  40728c:	4615      	moveq	r5, r2

		ifptr = fp->fptr;
  40728e:	68a3      	ldr	r3, [r4, #8]
		fp->fptr = nsect = 0;
  407290:	2200      	movs	r2, #0
  407292:	60a2      	str	r2, [r4, #8]
		if (ofs) {
  407294:	2d00      	cmp	r5, #0
  407296:	f000 8083 	beq.w	4073a0 <f_lseek+0x144>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
  40729a:	6820      	ldr	r0, [r4, #0]
  40729c:	7886      	ldrb	r6, [r0, #2]
  40729e:	0276      	lsls	r6, r6, #9
			if (ifptr > 0 &&
  4072a0:	b16b      	cbz	r3, 4072be <f_lseek+0x62>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
  4072a2:	3b01      	subs	r3, #1
  4072a4:	1e6a      	subs	r2, r5, #1
  4072a6:	fbb2 f2f6 	udiv	r2, r2, r6
  4072aa:	fbb3 f1f6 	udiv	r1, r3, r6
			if (ifptr > 0 &&
  4072ae:	428a      	cmp	r2, r1
  4072b0:	d305      	bcc.n	4072be <f_lseek+0x62>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
  4072b2:	4272      	negs	r2, r6
  4072b4:	4013      	ands	r3, r2
  4072b6:	60a3      	str	r3, [r4, #8]
				ofs -= fp->fptr;
  4072b8:	1aed      	subs	r5, r5, r3
				clst = fp->clust;
  4072ba:	6961      	ldr	r1, [r4, #20]
  4072bc:	e002      	b.n	4072c4 <f_lseek+0x68>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
  4072be:	6921      	ldr	r1, [r4, #16]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
  4072c0:	b149      	cbz	r1, 4072d6 <f_lseek+0x7a>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					fp->sclust = clst;
				}
#endif
				fp->clust = clst;
  4072c2:	6161      	str	r1, [r4, #20]
			}
			if (clst != 0) {
  4072c4:	2900      	cmp	r1, #0
  4072c6:	d059      	beq.n	40737c <f_lseek+0x120>
				while (ofs > bcs) {						/* Cluster following loop */
  4072c8:	42b5      	cmp	r5, r6
  4072ca:	d937      	bls.n	40733c <f_lseek+0xe0>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
  4072cc:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 4073ac <f_lseek+0x150>
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
  4072d0:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 4073b4 <f_lseek+0x158>
  4072d4:	e028      	b.n	407328 <f_lseek+0xcc>
					clst = create_chain(fp->fs, 0);
  4072d6:	4b35      	ldr	r3, [pc, #212]	; (4073ac <f_lseek+0x150>)
  4072d8:	4798      	blx	r3
  4072da:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  4072dc:	2801      	cmp	r0, #1
  4072de:	d004      	beq.n	4072ea <f_lseek+0x8e>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  4072e0:	f1b0 3fff 	cmp.w	r0, #4294967295
  4072e4:	d007      	beq.n	4072f6 <f_lseek+0x9a>
					fp->sclust = clst;
  4072e6:	6120      	str	r0, [r4, #16]
  4072e8:	e7eb      	b.n	4072c2 <f_lseek+0x66>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  4072ea:	79a3      	ldrb	r3, [r4, #6]
  4072ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4072f0:	71a3      	strb	r3, [r4, #6]
  4072f2:	2702      	movs	r7, #2
  4072f4:	e054      	b.n	4073a0 <f_lseek+0x144>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  4072f6:	79a3      	ldrb	r3, [r4, #6]
  4072f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4072fc:	71a3      	strb	r3, [r4, #6]
  4072fe:	2701      	movs	r7, #1
  407300:	e04e      	b.n	4073a0 <f_lseek+0x144>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
  407302:	6820      	ldr	r0, [r4, #0]
  407304:	47c0      	blx	r8
  407306:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  407308:	f1b1 3fff 	cmp.w	r1, #4294967295
  40730c:	d026      	beq.n	40735c <f_lseek+0x100>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
  40730e:	2901      	cmp	r1, #1
  407310:	d92a      	bls.n	407368 <f_lseek+0x10c>
  407312:	6823      	ldr	r3, [r4, #0]
  407314:	69db      	ldr	r3, [r3, #28]
  407316:	4299      	cmp	r1, r3
  407318:	d226      	bcs.n	407368 <f_lseek+0x10c>
					fp->clust = clst;
  40731a:	6161      	str	r1, [r4, #20]
					fp->fptr += bcs;
  40731c:	68a3      	ldr	r3, [r4, #8]
  40731e:	4433      	add	r3, r6
  407320:	60a3      	str	r3, [r4, #8]
					ofs -= bcs;
  407322:	1bad      	subs	r5, r5, r6
				while (ofs > bcs) {						/* Cluster following loop */
  407324:	42ae      	cmp	r6, r5
  407326:	d209      	bcs.n	40733c <f_lseek+0xe0>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
  407328:	79a3      	ldrb	r3, [r4, #6]
  40732a:	f013 0f02 	tst.w	r3, #2
  40732e:	d0e8      	beq.n	407302 <f_lseek+0xa6>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
  407330:	6820      	ldr	r0, [r4, #0]
  407332:	47c8      	blx	r9
						if (clst == 0) {				/* When disk gets full, clip file size */
  407334:	4601      	mov	r1, r0
  407336:	2800      	cmp	r0, #0
  407338:	d1e6      	bne.n	407308 <f_lseek+0xac>
							ofs = bcs; break;
  40733a:	4635      	mov	r5, r6
				}
				fp->fptr += ofs;
  40733c:	68a3      	ldr	r3, [r4, #8]
  40733e:	442b      	add	r3, r5
  407340:	60a3      	str	r3, [r4, #8]
				if (ofs % SS(fp->fs)) {
  407342:	f3c5 0308 	ubfx	r3, r5, #0, #9
  407346:	b1c3      	cbz	r3, 40737a <f_lseek+0x11e>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
  407348:	6820      	ldr	r0, [r4, #0]
  40734a:	4b19      	ldr	r3, [pc, #100]	; (4073b0 <f_lseek+0x154>)
  40734c:	4798      	blx	r3
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
  40734e:	b988      	cbnz	r0, 407374 <f_lseek+0x118>
  407350:	79a3      	ldrb	r3, [r4, #6]
  407352:	f063 037f 	orn	r3, r3, #127	; 0x7f
  407356:	71a3      	strb	r3, [r4, #6]
  407358:	2702      	movs	r7, #2
  40735a:	e021      	b.n	4073a0 <f_lseek+0x144>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  40735c:	79a3      	ldrb	r3, [r4, #6]
  40735e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  407362:	71a3      	strb	r3, [r4, #6]
  407364:	2701      	movs	r7, #1
  407366:	e01b      	b.n	4073a0 <f_lseek+0x144>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
  407368:	79a3      	ldrb	r3, [r4, #6]
  40736a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40736e:	71a3      	strb	r3, [r4, #6]
  407370:	2702      	movs	r7, #2
  407372:	e015      	b.n	4073a0 <f_lseek+0x144>
					nsect += ofs / SS(fp->fs);
  407374:	eb00 2155 	add.w	r1, r0, r5, lsr #9
  407378:	e000      	b.n	40737c <f_lseek+0x120>
		fp->fptr = nsect = 0;
  40737a:	2100      	movs	r1, #0
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
  40737c:	68a3      	ldr	r3, [r4, #8]
  40737e:	f3c3 0208 	ubfx	r2, r3, #0, #9
  407382:	b11a      	cbz	r2, 40738c <f_lseek+0x130>
  407384:	69a2      	ldr	r2, [r4, #24]
  407386:	4291      	cmp	r1, r2
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
  407388:	bf18      	it	ne
  40738a:	61a1      	strne	r1, [r4, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
  40738c:	68e2      	ldr	r2, [r4, #12]
  40738e:	4293      	cmp	r3, r2
  407390:	d906      	bls.n	4073a0 <f_lseek+0x144>
			fp->fsize = fp->fptr;
  407392:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA__WRITTEN;
  407394:	79a3      	ldrb	r3, [r4, #6]
  407396:	f043 0320 	orr.w	r3, r3, #32
  40739a:	71a3      	strb	r3, [r4, #6]
  40739c:	e000      	b.n	4073a0 <f_lseek+0x144>
		LEAVE_FF(fp->fs, FR_INT_ERR);
  40739e:	2702      	movs	r7, #2
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
  4073a0:	4638      	mov	r0, r7
  4073a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4073a6:	bf00      	nop
  4073a8:	004056b5 	.word	0x004056b5
  4073ac:	00405f75 	.word	0x00405f75
  4073b0:	0040567f 	.word	0x0040567f
  4073b4:	00405cb5 	.word	0x00405cb5

004073b8 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
  4073b8:	b510      	push	{r4, lr}
  4073ba:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
  4073be:	4604      	mov	r4, r0
  4073c0:	9101      	str	r1, [sp, #4]
	FRESULT res;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj->fs, 0);
  4073c2:	2200      	movs	r2, #0
  4073c4:	4601      	mov	r1, r0
  4073c6:	a801      	add	r0, sp, #4
  4073c8:	4b18      	ldr	r3, [pc, #96]	; (40742c <f_opendir+0x74>)
  4073ca:	4798      	blx	r3
	if (res == FR_OK) {
  4073cc:	4603      	mov	r3, r0
  4073ce:	b118      	cbz	r0, 4073d8 <f_opendir+0x20>
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj->fs, res);
}
  4073d0:	4618      	mov	r0, r3
  4073d2:	f50d 7d06 	add.w	sp, sp, #536	; 0x218
  4073d6:	bd10      	pop	{r4, pc}
		INIT_BUF(*dj);
  4073d8:	ab83      	add	r3, sp, #524	; 0x20c
  4073da:	61a3      	str	r3, [r4, #24]
  4073dc:	ab03      	add	r3, sp, #12
  4073de:	61e3      	str	r3, [r4, #28]
		res = follow_path(dj, path);			/* Follow the path to the directory */
  4073e0:	9901      	ldr	r1, [sp, #4]
  4073e2:	4620      	mov	r0, r4
  4073e4:	4b12      	ldr	r3, [pc, #72]	; (407430 <f_opendir+0x78>)
  4073e6:	4798      	blx	r3
		if (res == FR_OK) {						/* Follow completed */
  4073e8:	4603      	mov	r3, r0
  4073ea:	b9c0      	cbnz	r0, 40741e <f_opendir+0x66>
			if (dj->dir) {						/* It is not the root dir */
  4073ec:	6963      	ldr	r3, [r4, #20]
  4073ee:	b173      	cbz	r3, 40740e <f_opendir+0x56>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
  4073f0:	7ada      	ldrb	r2, [r3, #11]
  4073f2:	f012 0f10 	tst.w	r2, #16
  4073f6:	d016      	beq.n	407426 <f_opendir+0x6e>
					dj->sclust = LD_CLUST(dj->dir);
  4073f8:	7d59      	ldrb	r1, [r3, #21]
  4073fa:	7d1a      	ldrb	r2, [r3, #20]
  4073fc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  407400:	7ed9      	ldrb	r1, [r3, #27]
  407402:	7e9b      	ldrb	r3, [r3, #26]
  407404:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  407408:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40740c:	60a3      	str	r3, [r4, #8]
				dj->id = dj->fs->id;
  40740e:	6823      	ldr	r3, [r4, #0]
  407410:	88db      	ldrh	r3, [r3, #6]
  407412:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dj, 0);			/* Rewind dir */
  407414:	2100      	movs	r1, #0
  407416:	4620      	mov	r0, r4
  407418:	4b06      	ldr	r3, [pc, #24]	; (407434 <f_opendir+0x7c>)
  40741a:	4798      	blx	r3
  40741c:	4603      	mov	r3, r0
		if (res == FR_NO_FILE) res = FR_NO_PATH;
  40741e:	2b04      	cmp	r3, #4
  407420:	bf08      	it	eq
  407422:	2305      	moveq	r3, #5
  407424:	e7d4      	b.n	4073d0 <f_opendir+0x18>
					res = FR_NO_PATH;
  407426:	2305      	movs	r3, #5
	LEAVE_FF(dj->fs, res);
  407428:	e7d2      	b.n	4073d0 <f_opendir+0x18>
  40742a:	bf00      	nop
  40742c:	00405779 	.word	0x00405779
  407430:	004068d1 	.word	0x004068d1
  407434:	00405d9d 	.word	0x00405d9d

00407438 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
  407438:	b570      	push	{r4, r5, r6, lr}
  40743a:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
  40743e:	4604      	mov	r4, r0
  407440:	460e      	mov	r6, r1
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
  407442:	8881      	ldrh	r1, [r0, #4]
  407444:	6800      	ldr	r0, [r0, #0]
  407446:	4b15      	ldr	r3, [pc, #84]	; (40749c <f_readdir+0x64>)
  407448:	4798      	blx	r3
	if (res == FR_OK) {
  40744a:	4605      	mov	r5, r0
  40744c:	b958      	cbnz	r0, 407466 <f_readdir+0x2e>
		if (!fno) {
  40744e:	b176      	cbz	r6, 40746e <f_readdir+0x36>
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
		} else {
			INIT_BUF(*dj);
  407450:	ab81      	add	r3, sp, #516	; 0x204
  407452:	61a3      	str	r3, [r4, #24]
  407454:	ab01      	add	r3, sp, #4
  407456:	61e3      	str	r3, [r4, #28]
			res = dir_read(dj);				/* Read an directory item */
  407458:	4620      	mov	r0, r4
  40745a:	4b11      	ldr	r3, [pc, #68]	; (4074a0 <f_readdir+0x68>)
  40745c:	4798      	blx	r3
			if (res == FR_NO_FILE) {		/* Reached end of dir */
  40745e:	2804      	cmp	r0, #4
  407460:	d00b      	beq.n	40747a <f_readdir+0x42>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
  407462:	b160      	cbz	r0, 40747e <f_readdir+0x46>
			res = dir_read(dj);				/* Read an directory item */
  407464:	4605      	mov	r5, r0
			FREE_BUF();
		}
	}

	LEAVE_FF(dj->fs, res);
}
  407466:	4628      	mov	r0, r5
  407468:	f50d 7d04 	add.w	sp, sp, #528	; 0x210
  40746c:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
  40746e:	2100      	movs	r1, #0
  407470:	4620      	mov	r0, r4
  407472:	4b0c      	ldr	r3, [pc, #48]	; (4074a4 <f_readdir+0x6c>)
  407474:	4798      	blx	r3
  407476:	4605      	mov	r5, r0
  407478:	e7f5      	b.n	407466 <f_readdir+0x2e>
				dj->sect = 0;
  40747a:	2300      	movs	r3, #0
  40747c:	6123      	str	r3, [r4, #16]
				get_fileinfo(dj, fno);		/* Get the object information */
  40747e:	4631      	mov	r1, r6
  407480:	4620      	mov	r0, r4
  407482:	4b09      	ldr	r3, [pc, #36]	; (4074a8 <f_readdir+0x70>)
  407484:	4798      	blx	r3
				res = dir_next(dj, 0);		/* Increment index for next */
  407486:	2100      	movs	r1, #0
  407488:	4620      	mov	r0, r4
  40748a:	4b08      	ldr	r3, [pc, #32]	; (4074ac <f_readdir+0x74>)
  40748c:	4798      	blx	r3
				if (res == FR_NO_FILE) {
  40748e:	2804      	cmp	r0, #4
  407490:	d001      	beq.n	407496 <f_readdir+0x5e>
				res = dir_next(dj, 0);		/* Increment index for next */
  407492:	4605      	mov	r5, r0
  407494:	e7e7      	b.n	407466 <f_readdir+0x2e>
					dj->sect = 0;
  407496:	2300      	movs	r3, #0
  407498:	6123      	str	r3, [r4, #16]
  40749a:	e7e4      	b.n	407466 <f_readdir+0x2e>
  40749c:	004056b5 	.word	0x004056b5
  4074a0:	00406681 	.word	0x00406681
  4074a4:	00405d9d 	.word	0x00405d9d
  4074a8:	00405aed 	.word	0x00405aed
  4074ac:	004060b1 	.word	0x004060b1

004074b0 <f_stat>:

FRESULT f_stat (
	const TCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
  4074b0:	b530      	push	{r4, r5, lr}
  4074b2:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
  4074b6:	9001      	str	r0, [sp, #4]
  4074b8:	460d      	mov	r5, r1
	FRESULT res;
	DIR dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
  4074ba:	2200      	movs	r2, #0
  4074bc:	a985      	add	r1, sp, #532	; 0x214
  4074be:	a801      	add	r0, sp, #4
  4074c0:	4b0d      	ldr	r3, [pc, #52]	; (4074f8 <f_stat+0x48>)
  4074c2:	4798      	blx	r3
	if (res == FR_OK) {
  4074c4:	4604      	mov	r4, r0
  4074c6:	b118      	cbz	r0, 4074d0 <f_stat+0x20>
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
  4074c8:	4620      	mov	r0, r4
  4074ca:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
  4074ce:	bd30      	pop	{r4, r5, pc}
		INIT_BUF(dj);
  4074d0:	ab82      	add	r3, sp, #520	; 0x208
  4074d2:	938b      	str	r3, [sp, #556]	; 0x22c
  4074d4:	ab02      	add	r3, sp, #8
  4074d6:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
  4074d8:	9901      	ldr	r1, [sp, #4]
  4074da:	a885      	add	r0, sp, #532	; 0x214
  4074dc:	4b07      	ldr	r3, [pc, #28]	; (4074fc <f_stat+0x4c>)
  4074de:	4798      	blx	r3
		if (res == FR_OK) {				/* Follow completed */
  4074e0:	4604      	mov	r4, r0
  4074e2:	2800      	cmp	r0, #0
  4074e4:	d1f0      	bne.n	4074c8 <f_stat+0x18>
			if (dj.dir)		/* Found an object */
  4074e6:	9b8a      	ldr	r3, [sp, #552]	; 0x228
  4074e8:	b123      	cbz	r3, 4074f4 <f_stat+0x44>
				get_fileinfo(&dj, fno);
  4074ea:	4629      	mov	r1, r5
  4074ec:	a885      	add	r0, sp, #532	; 0x214
  4074ee:	4b04      	ldr	r3, [pc, #16]	; (407500 <f_stat+0x50>)
  4074f0:	4798      	blx	r3
  4074f2:	e7e9      	b.n	4074c8 <f_stat+0x18>
				res = FR_INVALID_NAME;
  4074f4:	2406      	movs	r4, #6
  4074f6:	e7e7      	b.n	4074c8 <f_stat+0x18>
  4074f8:	00405779 	.word	0x00405779
  4074fc:	004068d1 	.word	0x004068d1
  407500:	00405aed 	.word	0x00405aed

00407504 <f_getfree>:
FRESULT f_getfree (
	const TCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
  407504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407508:	b083      	sub	sp, #12
  40750a:	ab02      	add	r3, sp, #8
  40750c:	f843 0d04 	str.w	r0, [r3, #-4]!
  407510:	468a      	mov	sl, r1
  407512:	4615      	mov	r5, r2
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = chk_mounted(&path, fatfs, 0);
  407514:	2200      	movs	r2, #0
  407516:	4629      	mov	r1, r5
  407518:	4618      	mov	r0, r3
  40751a:	4b39      	ldr	r3, [pc, #228]	; (407600 <f_getfree+0xfc>)
  40751c:	4798      	blx	r3
	if (res == FR_OK) {
  40751e:	4680      	mov	r8, r0
  407520:	2800      	cmp	r0, #0
  407522:	d15d      	bne.n	4075e0 <f_getfree+0xdc>
		/* If free_clust is valid, return it without full cluster scan */
		if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
  407524:	682b      	ldr	r3, [r5, #0]
  407526:	691a      	ldr	r2, [r3, #16]
  407528:	69dc      	ldr	r4, [r3, #28]
  40752a:	1ea1      	subs	r1, r4, #2
  40752c:	428a      	cmp	r2, r1
  40752e:	d909      	bls.n	407544 <f_getfree+0x40>
			*nclst = (*fatfs)->free_clust;
		} else {
			/* Get number of free clusters */
			fat = (*fatfs)->fs_type;
  407530:	781f      	ldrb	r7, [r3, #0]
			n = 0;
			if (fat == FS_FAT12) {
  407532:	2f01      	cmp	r7, #1
  407534:	d009      	beq.n	40754a <f_getfree+0x46>
					if (stat == 1) { res = FR_INT_ERR; break; }
					if (stat == 0) n++;
				} while (++clst < (*fatfs)->n_fatent);
			} else {
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
  407536:	6a59      	ldr	r1, [r3, #36]	; 0x24
				i = 0; p = 0;
  407538:	2200      	movs	r2, #0
  40753a:	4610      	mov	r0, r2
			n = 0;
  40753c:	4616      	mov	r6, r2
				do {
					if (!i) {
						res = move_window(*fatfs, sect++);
  40753e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 407608 <f_getfree+0x104>
  407542:	e02f      	b.n	4075a4 <f_getfree+0xa0>
			*nclst = (*fatfs)->free_clust;
  407544:	f8ca 2000 	str.w	r2, [sl]
  407548:	e04a      	b.n	4075e0 <f_getfree+0xdc>
  40754a:	2402      	movs	r4, #2
  40754c:	2600      	movs	r6, #0
					stat = get_fat(*fatfs, clst);
  40754e:	4f2d      	ldr	r7, [pc, #180]	; (407604 <f_getfree+0x100>)
  407550:	e004      	b.n	40755c <f_getfree+0x58>
				} while (++clst < (*fatfs)->n_fatent);
  407552:	3401      	adds	r4, #1
  407554:	682b      	ldr	r3, [r5, #0]
  407556:	69db      	ldr	r3, [r3, #28]
  407558:	429c      	cmp	r4, r3
  40755a:	d24b      	bcs.n	4075f4 <f_getfree+0xf0>
					stat = get_fat(*fatfs, clst);
  40755c:	4621      	mov	r1, r4
  40755e:	6828      	ldr	r0, [r5, #0]
  407560:	47b8      	blx	r7
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
  407562:	f1b0 3fff 	cmp.w	r0, #4294967295
  407566:	d043      	beq.n	4075f0 <f_getfree+0xec>
					if (stat == 1) { res = FR_INT_ERR; break; }
  407568:	2801      	cmp	r0, #1
  40756a:	d046      	beq.n	4075fa <f_getfree+0xf6>
					if (stat == 0) n++;
  40756c:	2800      	cmp	r0, #0
  40756e:	d1f0      	bne.n	407552 <f_getfree+0x4e>
  407570:	3601      	adds	r6, #1
  407572:	e7ee      	b.n	407552 <f_getfree+0x4e>
						if (res != FR_OK) break;
						p = (*fatfs)->win;
						i = SS(*fatfs);
					}
					if (fat == FS_FAT16) {
  407574:	2f02      	cmp	r7, #2
  407576:	d022      	beq.n	4075be <f_getfree+0xba>
						if (LD_WORD(p) == 0) n++;
						p += 2; i -= 2;
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
  407578:	f892 e003 	ldrb.w	lr, [r2, #3]
  40757c:	7893      	ldrb	r3, [r2, #2]
  40757e:	041b      	lsls	r3, r3, #16
  407580:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
  407584:	f892 e000 	ldrb.w	lr, [r2]
  407588:	ea43 030e 	orr.w	r3, r3, lr
  40758c:	f892 e001 	ldrb.w	lr, [r2, #1]
  407590:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
  407594:	f033 4370 	bics.w	r3, r3, #4026531840	; 0xf0000000
  407598:	bf08      	it	eq
  40759a:	3601      	addeq	r6, #1
						p += 4; i -= 4;
  40759c:	3204      	adds	r2, #4
  40759e:	3804      	subs	r0, #4
					}
				} while (--clst);
  4075a0:	3c01      	subs	r4, #1
  4075a2:	d017      	beq.n	4075d4 <f_getfree+0xd0>
					if (!i) {
  4075a4:	2800      	cmp	r0, #0
  4075a6:	d1e5      	bne.n	407574 <f_getfree+0x70>
						res = move_window(*fatfs, sect++);
  4075a8:	f101 0b01 	add.w	fp, r1, #1
  4075ac:	6828      	ldr	r0, [r5, #0]
  4075ae:	47c8      	blx	r9
						if (res != FR_OK) break;
  4075b0:	b978      	cbnz	r0, 4075d2 <f_getfree+0xce>
						p = (*fatfs)->win;
  4075b2:	682a      	ldr	r2, [r5, #0]
  4075b4:	3234      	adds	r2, #52	; 0x34
						res = move_window(*fatfs, sect++);
  4075b6:	4659      	mov	r1, fp
						i = SS(*fatfs);
  4075b8:	f44f 7000 	mov.w	r0, #512	; 0x200
  4075bc:	e7da      	b.n	407574 <f_getfree+0x70>
						if (LD_WORD(p) == 0) n++;
  4075be:	f892 e001 	ldrb.w	lr, [r2, #1]
  4075c2:	7813      	ldrb	r3, [r2, #0]
  4075c4:	ea53 230e 	orrs.w	r3, r3, lr, lsl #8
  4075c8:	bf08      	it	eq
  4075ca:	3601      	addeq	r6, #1
						p += 2; i -= 2;
  4075cc:	3202      	adds	r2, #2
  4075ce:	3802      	subs	r0, #2
  4075d0:	e7e6      	b.n	4075a0 <f_getfree+0x9c>
						res = move_window(*fatfs, sect++);
  4075d2:	4680      	mov	r8, r0
			}
			(*fatfs)->free_clust = n;
  4075d4:	682b      	ldr	r3, [r5, #0]
  4075d6:	611e      	str	r6, [r3, #16]
			if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
  4075d8:	2f03      	cmp	r7, #3
  4075da:	d005      	beq.n	4075e8 <f_getfree+0xe4>
			*nclst = n;
  4075dc:	f8ca 6000 	str.w	r6, [sl]
		}
	}
	LEAVE_FF(*fatfs, res);
}
  4075e0:	4640      	mov	r0, r8
  4075e2:	b003      	add	sp, #12
  4075e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
  4075e8:	682b      	ldr	r3, [r5, #0]
  4075ea:	2201      	movs	r2, #1
  4075ec:	715a      	strb	r2, [r3, #5]
  4075ee:	e7f5      	b.n	4075dc <f_getfree+0xd8>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
  4075f0:	f04f 0801 	mov.w	r8, #1
			(*fatfs)->free_clust = n;
  4075f4:	682b      	ldr	r3, [r5, #0]
  4075f6:	611e      	str	r6, [r3, #16]
  4075f8:	e7f0      	b.n	4075dc <f_getfree+0xd8>
					if (stat == 1) { res = FR_INT_ERR; break; }
  4075fa:	f04f 0802 	mov.w	r8, #2
  4075fe:	e7f9      	b.n	4075f4 <f_getfree+0xf0>
  407600:	00405779 	.word	0x00405779
  407604:	00405cb5 	.word	0x00405cb5
  407608:	00405c25 	.word	0x00405c25

0040760c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
  40760c:	b510      	push	{r4, lr}
  40760e:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
  407612:	9001      	str	r0, [sp, #4]
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
  407614:	2201      	movs	r2, #1
  407616:	a98f      	add	r1, sp, #572	; 0x23c
  407618:	a801      	add	r0, sp, #4
  40761a:	4b34      	ldr	r3, [pc, #208]	; (4076ec <f_unlink+0xe0>)
  40761c:	4798      	blx	r3
	if (res == FR_OK) {
  40761e:	4603      	mov	r3, r0
  407620:	b118      	cbz	r0, 40762a <f_unlink+0x1e>
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
}
  407622:	4618      	mov	r0, r3
  407624:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
  407628:	bd10      	pop	{r4, pc}
		INIT_BUF(dj);
  40762a:	ab83      	add	r3, sp, #524	; 0x20c
  40762c:	9395      	str	r3, [sp, #596]	; 0x254
  40762e:	ab03      	add	r3, sp, #12
  407630:	9396      	str	r3, [sp, #600]	; 0x258
		res = follow_path(&dj, path);		/* Follow the file path */
  407632:	9901      	ldr	r1, [sp, #4]
  407634:	a88f      	add	r0, sp, #572	; 0x23c
  407636:	4b2e      	ldr	r3, [pc, #184]	; (4076f0 <f_unlink+0xe4>)
  407638:	4798      	blx	r3
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
  40763a:	4603      	mov	r3, r0
  40763c:	2800      	cmp	r0, #0
  40763e:	d1f0      	bne.n	407622 <f_unlink+0x16>
  407640:	9b95      	ldr	r3, [sp, #596]	; 0x254
  407642:	7adb      	ldrb	r3, [r3, #11]
  407644:	f013 0f20 	tst.w	r3, #32
  407648:	d143      	bne.n	4076d2 <f_unlink+0xc6>
			dir = dj.dir;
  40764a:	9b94      	ldr	r3, [sp, #592]	; 0x250
			if (!dir) {
  40764c:	2b00      	cmp	r3, #0
  40764e:	d046      	beq.n	4076de <f_unlink+0xd2>
				if (dir[DIR_Attr] & AM_RDO)
  407650:	7ada      	ldrb	r2, [r3, #11]
  407652:	f012 0f01 	tst.w	r2, #1
  407656:	d140      	bne.n	4076da <f_unlink+0xce>
			dclst = LD_CLUST(dir);
  407658:	7d5a      	ldrb	r2, [r3, #21]
  40765a:	7d1c      	ldrb	r4, [r3, #20]
  40765c:	ea44 2202 	orr.w	r2, r4, r2, lsl #8
  407660:	7ed9      	ldrb	r1, [r3, #27]
  407662:	7e9c      	ldrb	r4, [r3, #26]
  407664:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
  407668:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
  40766c:	7adb      	ldrb	r3, [r3, #11]
  40766e:	f013 0f10 	tst.w	r3, #16
  407672:	d10b      	bne.n	40768c <f_unlink+0x80>
				res = dir_remove(&dj);		/* Remove the directory entry */
  407674:	a88f      	add	r0, sp, #572	; 0x23c
  407676:	4b1f      	ldr	r3, [pc, #124]	; (4076f4 <f_unlink+0xe8>)
  407678:	4798      	blx	r3
				if (res == FR_OK) {
  40767a:	4603      	mov	r3, r0
  40767c:	2800      	cmp	r0, #0
  40767e:	d1d0      	bne.n	407622 <f_unlink+0x16>
					if (dclst)				/* Remove the cluster chain if exist */
  407680:	b9fc      	cbnz	r4, 4076c2 <f_unlink+0xb6>
					if (res == FR_OK) res = sync(dj.fs);
  407682:	988f      	ldr	r0, [sp, #572]	; 0x23c
  407684:	4b1c      	ldr	r3, [pc, #112]	; (4076f8 <f_unlink+0xec>)
  407686:	4798      	blx	r3
  407688:	4603      	mov	r3, r0
  40768a:	e7ca      	b.n	407622 <f_unlink+0x16>
				if (dclst < 2) {
  40768c:	2c01      	cmp	r4, #1
  40768e:	d922      	bls.n	4076d6 <f_unlink+0xca>
					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
  407690:	2224      	movs	r2, #36	; 0x24
  407692:	a98f      	add	r1, sp, #572	; 0x23c
  407694:	a886      	add	r0, sp, #536	; 0x218
  407696:	4b19      	ldr	r3, [pc, #100]	; (4076fc <f_unlink+0xf0>)
  407698:	4798      	blx	r3
					sdj.sclust = dclst;
  40769a:	9488      	str	r4, [sp, #544]	; 0x220
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
  40769c:	2102      	movs	r1, #2
  40769e:	a886      	add	r0, sp, #536	; 0x218
  4076a0:	4b17      	ldr	r3, [pc, #92]	; (407700 <f_unlink+0xf4>)
  4076a2:	4798      	blx	r3
					if (res == FR_OK) {
  4076a4:	4603      	mov	r3, r0
  4076a6:	2800      	cmp	r0, #0
  4076a8:	d1bb      	bne.n	407622 <f_unlink+0x16>
						res = dir_read(&sdj);
  4076aa:	a886      	add	r0, sp, #536	; 0x218
  4076ac:	4b15      	ldr	r3, [pc, #84]	; (407704 <f_unlink+0xf8>)
  4076ae:	4798      	blx	r3
						if (res == FR_OK			/* Not empty dir */
  4076b0:	4603      	mov	r3, r0
  4076b2:	b1b0      	cbz	r0, 4076e2 <f_unlink+0xd6>
						|| dclst == sdj.fs->cdir	/* Current dir */
  4076b4:	9a86      	ldr	r2, [sp, #536]	; 0x218
  4076b6:	6992      	ldr	r2, [r2, #24]
  4076b8:	4294      	cmp	r4, r2
  4076ba:	d014      	beq.n	4076e6 <f_unlink+0xda>
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
  4076bc:	2804      	cmp	r0, #4
  4076be:	d0d9      	beq.n	407674 <f_unlink+0x68>
  4076c0:	e7af      	b.n	407622 <f_unlink+0x16>
						res = remove_chain(dj.fs, dclst);
  4076c2:	4621      	mov	r1, r4
  4076c4:	988f      	ldr	r0, [sp, #572]	; 0x23c
  4076c6:	4b10      	ldr	r3, [pc, #64]	; (407708 <f_unlink+0xfc>)
  4076c8:	4798      	blx	r3
					if (res == FR_OK) res = sync(dj.fs);
  4076ca:	4603      	mov	r3, r0
  4076cc:	2800      	cmp	r0, #0
  4076ce:	d1a8      	bne.n	407622 <f_unlink+0x16>
  4076d0:	e7d7      	b.n	407682 <f_unlink+0x76>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
  4076d2:	2306      	movs	r3, #6
  4076d4:	e7a5      	b.n	407622 <f_unlink+0x16>
					res = FR_INT_ERR;
  4076d6:	2302      	movs	r3, #2
  4076d8:	e7a3      	b.n	407622 <f_unlink+0x16>
					res = FR_DENIED;		/* Cannot remove R/O object */
  4076da:	2307      	movs	r3, #7
  4076dc:	e7a1      	b.n	407622 <f_unlink+0x16>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
  4076de:	2306      	movs	r3, #6
  4076e0:	e79f      	b.n	407622 <f_unlink+0x16>
						) res = FR_DENIED;
  4076e2:	2307      	movs	r3, #7
  4076e4:	e79d      	b.n	407622 <f_unlink+0x16>
  4076e6:	2307      	movs	r3, #7
	LEAVE_FF(dj.fs, res);
  4076e8:	e79b      	b.n	407622 <f_unlink+0x16>
  4076ea:	bf00      	nop
  4076ec:	00405779 	.word	0x00405779
  4076f0:	004068d1 	.word	0x004068d1
  4076f4:	004067a1 	.word	0x004067a1
  4076f8:	00406805 	.word	0x00406805
  4076fc:	0040565d 	.word	0x0040565d
  407700:	00405d9d 	.word	0x00405d9d
  407704:	00406681 	.word	0x00406681
  407708:	00406035 	.word	0x00406035

0040770c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR *path		/* Pointer to the directory path */
)
{
  40770c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407710:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
  407714:	9001      	str	r0, [sp, #4]
	FRESULT res;
	DIR dj;
	BYTE *dir, n;
	DWORD dsc, dcl, pcl, tim = get_fattime();
  407716:	4b6e      	ldr	r3, [pc, #440]	; (4078d0 <f_mkdir+0x1c4>)
  407718:	4798      	blx	r3
  40771a:	4605      	mov	r5, r0
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
  40771c:	2201      	movs	r2, #1
  40771e:	a985      	add	r1, sp, #532	; 0x214
  407720:	a801      	add	r0, sp, #4
  407722:	4b6c      	ldr	r3, [pc, #432]	; (4078d4 <f_mkdir+0x1c8>)
  407724:	4798      	blx	r3
	if (res == FR_OK) {
  407726:	4604      	mov	r4, r0
  407728:	b120      	cbz	r0, 407734 <f_mkdir+0x28>
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
  40772a:	4620      	mov	r0, r4
  40772c:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
  407730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		INIT_BUF(dj);
  407734:	ab82      	add	r3, sp, #520	; 0x208
  407736:	938b      	str	r3, [sp, #556]	; 0x22c
  407738:	ab02      	add	r3, sp, #8
  40773a:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);			/* Follow the file path */
  40773c:	9901      	ldr	r1, [sp, #4]
  40773e:	a885      	add	r0, sp, #532	; 0x214
  407740:	4b65      	ldr	r3, [pc, #404]	; (4078d8 <f_mkdir+0x1cc>)
  407742:	4798      	blx	r3
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
  407744:	4603      	mov	r3, r0
  407746:	2800      	cmp	r0, #0
  407748:	f000 80bc 	beq.w	4078c4 <f_mkdir+0x1b8>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
  40774c:	2804      	cmp	r0, #4
  40774e:	f040 80bc 	bne.w	4078ca <f_mkdir+0x1be>
  407752:	9b8b      	ldr	r3, [sp, #556]	; 0x22c
  407754:	7adb      	ldrb	r3, [r3, #11]
  407756:	f013 0f20 	tst.w	r3, #32
  40775a:	f040 80b5 	bne.w	4078c8 <f_mkdir+0x1bc>
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
  40775e:	2100      	movs	r1, #0
  407760:	9885      	ldr	r0, [sp, #532]	; 0x214
  407762:	4b5e      	ldr	r3, [pc, #376]	; (4078dc <f_mkdir+0x1d0>)
  407764:	4798      	blx	r3
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
  407766:	4607      	mov	r7, r0
  407768:	b150      	cbz	r0, 407780 <f_mkdir+0x74>
			if (dcl == 1) res = FR_INT_ERR;
  40776a:	2801      	cmp	r0, #1
  40776c:	d101      	bne.n	407772 <f_mkdir+0x66>
  40776e:	2402      	movs	r4, #2
  407770:	e007      	b.n	407782 <f_mkdir+0x76>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
  407772:	f1b0 3fff 	cmp.w	r0, #4294967295
  407776:	bf08      	it	eq
  407778:	2401      	moveq	r4, #1
  40777a:	f000 8081 	beq.w	407880 <f_mkdir+0x174>
  40777e:	e000      	b.n	407782 <f_mkdir+0x76>
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
  407780:	2407      	movs	r4, #7
			if (res == FR_OK)					/* Flush FAT */
  407782:	b124      	cbz	r4, 40778e <f_mkdir+0x82>
				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
  407784:	4639      	mov	r1, r7
  407786:	9885      	ldr	r0, [sp, #532]	; 0x214
  407788:	4b55      	ldr	r3, [pc, #340]	; (4078e0 <f_mkdir+0x1d4>)
  40778a:	4798      	blx	r3
  40778c:	e7cd      	b.n	40772a <f_mkdir+0x1e>
				res = move_window(dj.fs, 0);
  40778e:	2100      	movs	r1, #0
  407790:	9885      	ldr	r0, [sp, #532]	; 0x214
  407792:	4b54      	ldr	r3, [pc, #336]	; (4078e4 <f_mkdir+0x1d8>)
  407794:	4798      	blx	r3
			if (res == FR_OK) {					/* Initialize the new directory table */
  407796:	4604      	mov	r4, r0
  407798:	2800      	cmp	r0, #0
  40779a:	d1f3      	bne.n	407784 <f_mkdir+0x78>
				dsc = clust2sect(dj.fs, dcl);
  40779c:	9e85      	ldr	r6, [sp, #532]	; 0x214
  40779e:	4639      	mov	r1, r7
  4077a0:	4630      	mov	r0, r6
  4077a2:	4b51      	ldr	r3, [pc, #324]	; (4078e8 <f_mkdir+0x1dc>)
  4077a4:	4798      	blx	r3
  4077a6:	4604      	mov	r4, r0
				dir = dj.fs->win;
  4077a8:	f106 0334 	add.w	r3, r6, #52	; 0x34
  4077ac:	9300      	str	r3, [sp, #0]
				mem_set(dir, 0, SS(dj.fs));
  4077ae:	f44f 7200 	mov.w	r2, #512	; 0x200
  4077b2:	2100      	movs	r1, #0
  4077b4:	4699      	mov	r9, r3
  4077b6:	4618      	mov	r0, r3
  4077b8:	f8df 813c 	ldr.w	r8, [pc, #316]	; 4078f8 <f_mkdir+0x1ec>
  4077bc:	47c0      	blx	r8
				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
  4077be:	220b      	movs	r2, #11
  4077c0:	2120      	movs	r1, #32
  4077c2:	4648      	mov	r0, r9
  4077c4:	47c0      	blx	r8
				dir[DIR_Name] = '.';
  4077c6:	f04f 082e 	mov.w	r8, #46	; 0x2e
  4077ca:	f886 8034 	strb.w	r8, [r6, #52]	; 0x34
				dir[DIR_Attr] = AM_DIR;
  4077ce:	2310      	movs	r3, #16
  4077d0:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f
				ST_DWORD(dir+DIR_WrtTime, tim);
  4077d4:	f886 504a 	strb.w	r5, [r6, #74]	; 0x4a
  4077d8:	f3c5 2307 	ubfx	r3, r5, #8, #8
  4077dc:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
  4077e0:	0c2b      	lsrs	r3, r5, #16
  4077e2:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
  4077e6:	0e2b      	lsrs	r3, r5, #24
  4077e8:	f886 304d 	strb.w	r3, [r6, #77]	; 0x4d
				ST_CLUST(dir, dcl);
  4077ec:	f886 704e 	strb.w	r7, [r6, #78]	; 0x4e
  4077f0:	f3c7 2307 	ubfx	r3, r7, #8, #8
  4077f4:	f886 304f 	strb.w	r3, [r6, #79]	; 0x4f
  4077f8:	0c3b      	lsrs	r3, r7, #16
  4077fa:	f886 3048 	strb.w	r3, [r6, #72]	; 0x48
  4077fe:	0a1b      	lsrs	r3, r3, #8
  407800:	f886 3049 	strb.w	r3, [r6, #73]	; 0x49
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
  407804:	2220      	movs	r2, #32
  407806:	4649      	mov	r1, r9
  407808:	f106 0054 	add.w	r0, r6, #84	; 0x54
  40780c:	4b37      	ldr	r3, [pc, #220]	; (4078ec <f_mkdir+0x1e0>)
  40780e:	4798      	blx	r3
				dir[33] = '.'; pcl = dj.sclust;
  407810:	f886 8055 	strb.w	r8, [r6, #85]	; 0x55
  407814:	9b87      	ldr	r3, [sp, #540]	; 0x21c
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
  407816:	9a85      	ldr	r2, [sp, #532]	; 0x214
  407818:	7811      	ldrb	r1, [r2, #0]
  40781a:	2903      	cmp	r1, #3
  40781c:	d04d      	beq.n	4078ba <f_mkdir+0x1ae>
				ST_CLUST(dir+SZ_DIR, pcl);
  40781e:	f886 306e 	strb.w	r3, [r6, #110]	; 0x6e
  407822:	f3c3 2107 	ubfx	r1, r3, #8, #8
  407826:	f886 106f 	strb.w	r1, [r6, #111]	; 0x6f
  40782a:	0c1b      	lsrs	r3, r3, #16
  40782c:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
  407830:	0a1b      	lsrs	r3, r3, #8
  407832:	f886 3069 	strb.w	r3, [r6, #105]	; 0x69
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
  407836:	7893      	ldrb	r3, [r2, #2]
  407838:	b1f3      	cbz	r3, 407878 <f_mkdir+0x16c>
  40783a:	f103 38ff 	add.w	r8, r3, #4294967295
  40783e:	fa5f f888 	uxtb.w	r8, r8
  407842:	f108 0801 	add.w	r8, r8, #1
  407846:	44a0      	add	r8, r4
					dj.fs->wflag = 1;
  407848:	f04f 0a01 	mov.w	sl, #1
					res = move_window(dj.fs, 0);
  40784c:	f8df 9094 	ldr.w	r9, [pc, #148]	; 4078e4 <f_mkdir+0x1d8>
					mem_set(dir, 0, SS(dj.fs));
  407850:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 4078f8 <f_mkdir+0x1ec>
					dj.fs->winsect = dsc++;
  407854:	9885      	ldr	r0, [sp, #532]	; 0x214
  407856:	1c66      	adds	r6, r4, #1
  407858:	6304      	str	r4, [r0, #48]	; 0x30
					dj.fs->wflag = 1;
  40785a:	f880 a004 	strb.w	sl, [r0, #4]
					res = move_window(dj.fs, 0);
  40785e:	2100      	movs	r1, #0
  407860:	47c8      	blx	r9
					if (res != FR_OK) break;
  407862:	4604      	mov	r4, r0
  407864:	2800      	cmp	r0, #0
  407866:	d18d      	bne.n	407784 <f_mkdir+0x78>
					mem_set(dir, 0, SS(dj.fs));
  407868:	f44f 7200 	mov.w	r2, #512	; 0x200
  40786c:	2100      	movs	r1, #0
  40786e:	9800      	ldr	r0, [sp, #0]
  407870:	47d8      	blx	fp
					dj.fs->winsect = dsc++;
  407872:	4634      	mov	r4, r6
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
  407874:	4546      	cmp	r6, r8
  407876:	d1ed      	bne.n	407854 <f_mkdir+0x148>
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
  407878:	a885      	add	r0, sp, #532	; 0x214
  40787a:	4b1d      	ldr	r3, [pc, #116]	; (4078f0 <f_mkdir+0x1e4>)
  40787c:	4798      	blx	r3
  40787e:	4604      	mov	r4, r0
			if (res != FR_OK) {
  407880:	2c00      	cmp	r4, #0
  407882:	f47f af7f 	bne.w	407784 <f_mkdir+0x78>
				dir = dj.dir;
  407886:	9b8a      	ldr	r3, [sp, #552]	; 0x228
				dir[DIR_Attr] = AM_DIR;				/* Attribute */
  407888:	2210      	movs	r2, #16
  40788a:	72da      	strb	r2, [r3, #11]
				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
  40788c:	759d      	strb	r5, [r3, #22]
  40788e:	f3c5 2207 	ubfx	r2, r5, #8, #8
  407892:	75da      	strb	r2, [r3, #23]
  407894:	0c2a      	lsrs	r2, r5, #16
  407896:	761a      	strb	r2, [r3, #24]
  407898:	0e2d      	lsrs	r5, r5, #24
  40789a:	765d      	strb	r5, [r3, #25]
				ST_CLUST(dir, dcl);					/* Table start cluster */
  40789c:	769f      	strb	r7, [r3, #26]
  40789e:	f3c7 2207 	ubfx	r2, r7, #8, #8
  4078a2:	76da      	strb	r2, [r3, #27]
  4078a4:	0c3f      	lsrs	r7, r7, #16
  4078a6:	751f      	strb	r7, [r3, #20]
  4078a8:	0a3f      	lsrs	r7, r7, #8
  4078aa:	755f      	strb	r7, [r3, #21]
				dj.fs->wflag = 1;
  4078ac:	9885      	ldr	r0, [sp, #532]	; 0x214
  4078ae:	2301      	movs	r3, #1
  4078b0:	7103      	strb	r3, [r0, #4]
				res = sync(dj.fs);
  4078b2:	4b10      	ldr	r3, [pc, #64]	; (4078f4 <f_mkdir+0x1e8>)
  4078b4:	4798      	blx	r3
  4078b6:	4604      	mov	r4, r0
  4078b8:	e737      	b.n	40772a <f_mkdir+0x1e>
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
  4078ba:	6a91      	ldr	r1, [r2, #40]	; 0x28
					pcl = 0;
  4078bc:	428b      	cmp	r3, r1
  4078be:	bf08      	it	eq
  4078c0:	2300      	moveq	r3, #0
  4078c2:	e7ac      	b.n	40781e <f_mkdir+0x112>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
  4078c4:	2408      	movs	r4, #8
  4078c6:	e730      	b.n	40772a <f_mkdir+0x1e>
			res = FR_INVALID_NAME;
  4078c8:	2306      	movs	r3, #6
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
  4078ca:	461c      	mov	r4, r3
	LEAVE_FF(dj.fs, res);
  4078cc:	e72d      	b.n	40772a <f_mkdir+0x1e>
  4078ce:	bf00      	nop
  4078d0:	00405605 	.word	0x00405605
  4078d4:	00405779 	.word	0x00405779
  4078d8:	004068d1 	.word	0x004068d1
  4078dc:	00405f75 	.word	0x00405f75
  4078e0:	00406035 	.word	0x00406035
  4078e4:	00405c25 	.word	0x00405c25
  4078e8:	0040567f 	.word	0x0040567f
  4078ec:	0040565d 	.word	0x0040565d
  4078f0:	00406395 	.word	0x00406395
  4078f4:	00406805 	.word	0x00406805
  4078f8:	00405671 	.word	0x00405671

004078fc <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fil		/* Pointer to the file object */
)
{
  4078fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  407900:	b083      	sub	sp, #12
  407902:	4681      	mov	r9, r0
  407904:	4690      	mov	r8, r2
	int n = 0;
	TCHAR c, *p = buff;
  407906:	4605      	mov	r5, r0
	int n = 0;
  407908:	2400      	movs	r4, #0
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {			/* Read bytes until buffer gets filled */
  40790a:	1e4e      	subs	r6, r1, #1
		f_read(fil, s, 1, &rc);
  40790c:	4f0d      	ldr	r7, [pc, #52]	; (407944 <f_gets+0x48>)
	while (n < len - 1) {			/* Read bytes until buffer gets filled */
  40790e:	42b4      	cmp	r4, r6
  407910:	da0e      	bge.n	407930 <f_gets+0x34>
		f_read(fil, s, 1, &rc);
  407912:	466b      	mov	r3, sp
  407914:	2201      	movs	r2, #1
  407916:	a901      	add	r1, sp, #4
  407918:	4640      	mov	r0, r8
  40791a:	47b8      	blx	r7
		if (rc != 1) break;			/* Break on EOF or error */
  40791c:	9b00      	ldr	r3, [sp, #0]
  40791e:	2b01      	cmp	r3, #1
  407920:	d106      	bne.n	407930 <f_gets+0x34>
		c = s[0];
  407922:	f89d 3004 	ldrb.w	r3, [sp, #4]
		}
#endif
#if _USE_STRFUNC >= 2
		if (c == '\r') continue;	/* Strip '\r' */
#endif
		*p++ = c;
  407926:	f805 3b01 	strb.w	r3, [r5], #1
		n++;
  40792a:	3401      	adds	r4, #1
		if (c == '\n') break;		/* Break on EOL */
  40792c:	2b0a      	cmp	r3, #10
  40792e:	d1ee      	bne.n	40790e <f_gets+0x12>
	}
	*p = 0;
  407930:	2300      	movs	r3, #0
  407932:	702b      	strb	r3, [r5, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
  407934:	429c      	cmp	r4, r3
}
  407936:	bf14      	ite	ne
  407938:	4648      	movne	r0, r9
  40793a:	4618      	moveq	r0, r3
  40793c:	b003      	add	sp, #12
  40793e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  407942:	bf00      	nop
  407944:	00406e11 	.word	0x00406e11

00407948 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
  407948:	b510      	push	{r4, lr}
  40794a:	b082      	sub	sp, #8
  40794c:	460c      	mov	r4, r1
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
  40794e:	f88d 0000 	strb.w	r0, [sp]
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
  407952:	ab01      	add	r3, sp, #4
  407954:	2201      	movs	r2, #1
  407956:	4669      	mov	r1, sp
  407958:	4620      	mov	r0, r4
  40795a:	4c05      	ldr	r4, [pc, #20]	; (407970 <f_putc+0x28>)
  40795c:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
  40795e:	9b01      	ldr	r3, [sp, #4]
  407960:	2b01      	cmp	r3, #1
}
  407962:	bf0c      	ite	eq
  407964:	2001      	moveq	r0, #1
  407966:	f04f 30ff 	movne.w	r0, #4294967295
  40796a:	b002      	add	sp, #8
  40796c:	bd10      	pop	{r4, pc}
  40796e:	bf00      	nop
  407970:	00406fa5 	.word	0x00406fa5

00407974 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
  407974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int n;


	for (n = 0; *str; str++, n++) {
  407976:	7803      	ldrb	r3, [r0, #0]
  407978:	b17b      	cbz	r3, 40799a <f_puts+0x26>
  40797a:	460e      	mov	r6, r1
  40797c:	4605      	mov	r5, r0
  40797e:	1c44      	adds	r4, r0, #1
		if (f_putc(*str, fil) == EOF) return EOF;
  407980:	4f07      	ldr	r7, [pc, #28]	; (4079a0 <f_puts+0x2c>)
  407982:	4631      	mov	r1, r6
  407984:	4618      	mov	r0, r3
  407986:	47b8      	blx	r7
  407988:	f1b0 3fff 	cmp.w	r0, #4294967295
  40798c:	d006      	beq.n	40799c <f_puts+0x28>
  40798e:	1b60      	subs	r0, r4, r5
	for (n = 0; *str; str++, n++) {
  407990:	f814 3b01 	ldrb.w	r3, [r4], #1
  407994:	2b00      	cmp	r3, #0
  407996:	d1f4      	bne.n	407982 <f_puts+0xe>
  407998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40799a:	2000      	movs	r0, #0
	}
	return n;
}
  40799c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40799e:	bf00      	nop
  4079a0:	00407949 	.word	0x00407949

004079a4 <f_printf>:
int f_printf (
	FIL* fil,			/* Pointer to the file object */
	const TCHAR* str,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
  4079a4:	b40e      	push	{r1, r2, r3}
  4079a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4079aa:	b088      	sub	sp, #32
  4079ac:	9001      	str	r0, [sp, #4]
  4079ae:	ab11      	add	r3, sp, #68	; 0x44
  4079b0:	f853 7b04 	ldr.w	r7, [r3], #4
	ULONG v;
	TCHAR c, d, s[16], *p;
	int res, chc, cc;


	va_start(arp, str);
  4079b4:	9307      	str	r3, [sp, #28]

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
  4079b6:	7838      	ldrb	r0, [r7, #0]
		if (c == 0) break;			/* End of string */
  4079b8:	2800      	cmp	r0, #0
  4079ba:	f000 814e 	beq.w	407c5a <f_printf+0x2b6>
  4079be:	1c7c      	adds	r4, r7, #1
  4079c0:	2500      	movs	r5, #0
  4079c2:	462e      	mov	r6, r5
		} while (v && i < sizeof(s) / sizeof(s[0]));
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		res = 0;
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
		do res += (cc = f_putc(s[--i], fil)); while(i);
  4079c4:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 407ca4 <f_printf+0x300>
  4079c8:	e11c      	b.n	407c04 <f_printf+0x260>
		c = *str++;
  4079ca:	7878      	ldrb	r0, [r7, #1]
		if (c == '0') {				/* Flag: '0' padding */
  4079cc:	2830      	cmp	r0, #48	; 0x30
  4079ce:	d043      	beq.n	407a58 <f_printf+0xb4>
			if (c == '-') {			/* Flag: left justified */
  4079d0:	282d      	cmp	r0, #45	; 0x2d
  4079d2:	d046      	beq.n	407a62 <f_printf+0xbe>
		c = *str++;
  4079d4:	3702      	adds	r7, #2
		w = f = 0;
  4079d6:	f04f 0e00 	mov.w	lr, #0
		while (IsDigit(c)) {		/* Precision */
  4079da:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  4079de:	b2db      	uxtb	r3, r3
  4079e0:	2b09      	cmp	r3, #9
  4079e2:	d843      	bhi.n	407a6c <f_printf+0xc8>
  4079e4:	2400      	movs	r4, #0
			w = w * 10 + c - '0';
  4079e6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4079ea:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4079ee:	3c30      	subs	r4, #48	; 0x30
			c = *str++;
  4079f0:	f817 0b01 	ldrb.w	r0, [r7], #1
		while (IsDigit(c)) {		/* Precision */
  4079f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  4079f8:	b2db      	uxtb	r3, r3
  4079fa:	2b09      	cmp	r3, #9
  4079fc:	d9f3      	bls.n	4079e6 <f_printf+0x42>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
  4079fe:	f000 03df 	and.w	r3, r0, #223	; 0xdf
  407a02:	2b4c      	cmp	r3, #76	; 0x4c
  407a04:	d034      	beq.n	407a70 <f_printf+0xcc>
		if (!c) break;
  407a06:	2800      	cmp	r0, #0
  407a08:	f000 8110 	beq.w	407c2c <f_printf+0x288>
		if (IsLower(d)) d -= 0x20;
  407a0c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
  407a10:	b2db      	uxtb	r3, r3
  407a12:	2b19      	cmp	r3, #25
  407a14:	bf9a      	itte	ls
  407a16:	f1a0 0320 	subls.w	r3, r0, #32
  407a1a:	b2db      	uxtbls	r3, r3
		d = c;
  407a1c:	4603      	movhi	r3, r0
		switch (d) {				/* Type is... */
  407a1e:	f1a3 0242 	sub.w	r2, r3, #66	; 0x42
  407a22:	2a16      	cmp	r2, #22
  407a24:	d87d      	bhi.n	407b22 <f_printf+0x17e>
  407a26:	e8df f012 	tbh	[pc, r2, lsl #1]
  407a2a:	0120      	.short	0x0120
  407a2c:	00800074 	.word	0x00800074
  407a30:	007c007c 	.word	0x007c007c
  407a34:	007c007c 	.word	0x007c007c
  407a38:	007c007c 	.word	0x007c007c
  407a3c:	007c007c 	.word	0x007c007c
  407a40:	007c007c 	.word	0x007c007c
  407a44:	007c0136 	.word	0x007c0136
  407a48:	007c007c 	.word	0x007c007c
  407a4c:	007c0028 	.word	0x007c0028
  407a50:	007c0080 	.word	0x007c0080
  407a54:	0106007c 	.word	0x0106007c
			f = 1; c = *str++;
  407a58:	78b8      	ldrb	r0, [r7, #2]
  407a5a:	3703      	adds	r7, #3
  407a5c:	f04f 0e01 	mov.w	lr, #1
  407a60:	e7bb      	b.n	4079da <f_printf+0x36>
				f = 2; c = *str++;
  407a62:	78b8      	ldrb	r0, [r7, #2]
  407a64:	3703      	adds	r7, #3
  407a66:	f04f 0e02 	mov.w	lr, #2
  407a6a:	e7b6      	b.n	4079da <f_printf+0x36>
		while (IsDigit(c)) {		/* Precision */
  407a6c:	2400      	movs	r4, #0
  407a6e:	e7c6      	b.n	4079fe <f_printf+0x5a>
			f |= 4; c = *str++;
  407a70:	f04e 0e04 	orr.w	lr, lr, #4
  407a74:	7838      	ldrb	r0, [r7, #0]
  407a76:	3701      	adds	r7, #1
  407a78:	e7c5      	b.n	407a06 <f_printf+0x62>
			p = va_arg(arp, TCHAR*);
  407a7a:	9b07      	ldr	r3, [sp, #28]
  407a7c:	1d1a      	adds	r2, r3, #4
  407a7e:	9207      	str	r2, [sp, #28]
  407a80:	f8d3 b000 	ldr.w	fp, [r3]
			for (j = 0; p[j]; j++) ;
  407a84:	f89b 3000 	ldrb.w	r3, [fp]
  407a88:	b1eb      	cbz	r3, 407ac6 <f_printf+0x122>
  407a8a:	465b      	mov	r3, fp
  407a8c:	f04f 0900 	mov.w	r9, #0
  407a90:	f109 0901 	add.w	r9, r9, #1
  407a94:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  407a98:	2a00      	cmp	r2, #0
  407a9a:	d1f9      	bne.n	407a90 <f_printf+0xec>
			if (!(f & 2)) {
  407a9c:	f01e 0f02 	tst.w	lr, #2
  407aa0:	d114      	bne.n	407acc <f_printf+0x128>
				while (j++ < w) chc += (cc = f_putc(' ', fil));
  407aa2:	f109 0a01 	add.w	sl, r9, #1
  407aa6:	45a1      	cmp	r9, r4
  407aa8:	d230      	bcs.n	407b0c <f_printf+0x168>
  407aaa:	f104 0901 	add.w	r9, r4, #1
  407aae:	2500      	movs	r5, #0
  407ab0:	9901      	ldr	r1, [sp, #4]
  407ab2:	2020      	movs	r0, #32
  407ab4:	47c0      	blx	r8
  407ab6:	4405      	add	r5, r0
  407ab8:	f10a 0a01 	add.w	sl, sl, #1
  407abc:	45ca      	cmp	sl, r9
  407abe:	d1f7      	bne.n	407ab0 <f_printf+0x10c>
  407ac0:	f104 0901 	add.w	r9, r4, #1
  407ac4:	e003      	b.n	407ace <f_printf+0x12a>
			for (j = 0; p[j]; j++) ;
  407ac6:	f04f 0900 	mov.w	r9, #0
  407aca:	e7e7      	b.n	407a9c <f_printf+0xf8>
			chc = 0;
  407acc:	2500      	movs	r5, #0
			chc += (cc = f_puts(p, fil));
  407ace:	9901      	ldr	r1, [sp, #4]
  407ad0:	4658      	mov	r0, fp
  407ad2:	4b73      	ldr	r3, [pc, #460]	; (407ca0 <f_printf+0x2fc>)
  407ad4:	4798      	blx	r3
  407ad6:	4405      	add	r5, r0
			while (j++ < w) chc += (cc = f_putc(' ', fil));
  407ad8:	f109 0a01 	add.w	sl, r9, #1
  407adc:	45a1      	cmp	r9, r4
  407ade:	d20a      	bcs.n	407af6 <f_printf+0x152>
  407ae0:	3401      	adds	r4, #1
  407ae2:	f04f 0920 	mov.w	r9, #32
  407ae6:	9901      	ldr	r1, [sp, #4]
  407ae8:	4648      	mov	r0, r9
  407aea:	47c0      	blx	r8
  407aec:	4405      	add	r5, r0
  407aee:	f10a 0a01 	add.w	sl, sl, #1
  407af2:	45a2      	cmp	sl, r4
  407af4:	d1f7      	bne.n	407ae6 <f_printf+0x142>
			if (cc != EOF) cc = chc;
  407af6:	f1b0 3fff 	cmp.w	r0, #4294967295
  407afa:	d17a      	bne.n	407bf2 <f_printf+0x24e>
  407afc:	f04f 36ff 	mov.w	r6, #4294967295
		if (cc != EOF) cc = res;
	}

	va_end(arp);
	return (cc == EOF) ? cc : res;
}
  407b00:	4630      	mov	r0, r6
  407b02:	b008      	add	sp, #32
  407b04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407b08:	b003      	add	sp, #12
  407b0a:	4770      	bx	lr
				while (j++ < w) chc += (cc = f_putc(' ', fil));
  407b0c:	46d1      	mov	r9, sl
  407b0e:	2500      	movs	r5, #0
  407b10:	e7dd      	b.n	407ace <f_printf+0x12a>
			cc = f_putc((TCHAR)va_arg(arp, int), fil); continue;
  407b12:	9b07      	ldr	r3, [sp, #28]
  407b14:	1d1a      	adds	r2, r3, #4
  407b16:	9207      	str	r2, [sp, #28]
  407b18:	9901      	ldr	r1, [sp, #4]
  407b1a:	7818      	ldrb	r0, [r3, #0]
  407b1c:	47c0      	blx	r8
  407b1e:	4605      	mov	r5, r0
  407b20:	e067      	b.n	407bf2 <f_printf+0x24e>
			cc = f_putc(c, fil); continue;
  407b22:	9901      	ldr	r1, [sp, #4]
  407b24:	47c0      	blx	r8
  407b26:	4605      	mov	r5, r0
  407b28:	e063      	b.n	407bf2 <f_printf+0x24e>
		v = (f & 4) ? (ULONG)va_arg(arp, long) : ((d == 'D') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int));
  407b2a:	f01e 0f04 	tst.w	lr, #4
  407b2e:	d101      	bne.n	407b34 <f_printf+0x190>
			r = 10; break;
  407b30:	250a      	movs	r5, #10
  407b32:	e09e      	b.n	407c72 <f_printf+0x2ce>
  407b34:	250a      	movs	r5, #10
		v = (f & 4) ? (ULONG)va_arg(arp, long) : ((d == 'D') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int));
  407b36:	9a07      	ldr	r2, [sp, #28]
  407b38:	1d11      	adds	r1, r2, #4
  407b3a:	9107      	str	r1, [sp, #28]
  407b3c:	6812      	ldr	r2, [r2, #0]
		if (d == 'D' && (v & 0x80000000)) {
  407b3e:	2b44      	cmp	r3, #68	; 0x44
  407b40:	f000 809d 	beq.w	407c7e <f_printf+0x2da>
  407b44:	e07f      	b.n	407c46 <f_printf+0x2a2>
			r = 16; break;
  407b46:	2510      	movs	r5, #16
  407b48:	e7f5      	b.n	407b36 <f_printf+0x192>
			s[i++] = d + '0';
  407b4a:	464e      	mov	r6, r9
			d = (TCHAR)(v % r); v /= r;
  407b4c:	fbb2 f1f5 	udiv	r1, r2, r5
  407b50:	fb05 2311 	mls	r3, r5, r1, r2
  407b54:	b2db      	uxtb	r3, r3
  407b56:	460a      	mov	r2, r1
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
  407b58:	2b09      	cmp	r3, #9
  407b5a:	bf84      	itt	hi
  407b5c:	4463      	addhi	r3, ip
  407b5e:	b2db      	uxtbhi	r3, r3
			s[i++] = d + '0';
  407b60:	f106 0901 	add.w	r9, r6, #1
  407b64:	3330      	adds	r3, #48	; 0x30
  407b66:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (v && i < sizeof(s) / sizeof(s[0]));
  407b6a:	b111      	cbz	r1, 407b72 <f_printf+0x1ce>
  407b6c:	f1b9 0f10 	cmp.w	r9, #16
  407b70:	d1eb      	bne.n	407b4a <f_printf+0x1a6>
		if (f & 8) s[i++] = '-';
  407b72:	f01e 0f08 	tst.w	lr, #8
  407b76:	d006      	beq.n	407b86 <f_printf+0x1e2>
  407b78:	ab08      	add	r3, sp, #32
  407b7a:	4499      	add	r9, r3
  407b7c:	232d      	movs	r3, #45	; 0x2d
  407b7e:	f809 3c14 	strb.w	r3, [r9, #-20]
  407b82:	f106 0902 	add.w	r9, r6, #2
		j = i; d = (f & 1) ? '0' : ' ';
  407b86:	f00e 0301 	and.w	r3, lr, #1
  407b8a:	2b00      	cmp	r3, #0
  407b8c:	bf14      	ite	ne
  407b8e:	f04f 0a30 	movne.w	sl, #48	; 0x30
  407b92:	f04f 0a20 	moveq.w	sl, #32
		while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
  407b96:	f01e 0f02 	tst.w	lr, #2
  407b9a:	d140      	bne.n	407c1e <f_printf+0x27a>
  407b9c:	f109 0501 	add.w	r5, r9, #1
  407ba0:	45a1      	cmp	r9, r4
  407ba2:	d23f      	bcs.n	407c24 <f_printf+0x280>
  407ba4:	f104 0b01 	add.w	fp, r4, #1
  407ba8:	2600      	movs	r6, #0
  407baa:	9901      	ldr	r1, [sp, #4]
  407bac:	4650      	mov	r0, sl
  407bae:	47c0      	blx	r8
  407bb0:	4406      	add	r6, r0
  407bb2:	3501      	adds	r5, #1
  407bb4:	455d      	cmp	r5, fp
  407bb6:	d1f8      	bne.n	407baa <f_printf+0x206>
  407bb8:	1c65      	adds	r5, r4, #1
  407bba:	ab03      	add	r3, sp, #12
  407bbc:	4499      	add	r9, r3
		do res += (cc = f_putc(s[--i], fil)); while(i);
  407bbe:	469a      	mov	sl, r3
  407bc0:	9901      	ldr	r1, [sp, #4]
  407bc2:	f819 0d01 	ldrb.w	r0, [r9, #-1]!
  407bc6:	47c0      	blx	r8
  407bc8:	4406      	add	r6, r0
  407bca:	45d1      	cmp	r9, sl
  407bcc:	d1f8      	bne.n	407bc0 <f_printf+0x21c>
		while (j++ < w) res += (cc = f_putc(' ', fil));
  407bce:	f105 0901 	add.w	r9, r5, #1
  407bd2:	42a5      	cmp	r5, r4
  407bd4:	d209      	bcs.n	407bea <f_printf+0x246>
  407bd6:	3401      	adds	r4, #1
  407bd8:	2520      	movs	r5, #32
  407bda:	9901      	ldr	r1, [sp, #4]
  407bdc:	4628      	mov	r0, r5
  407bde:	47c0      	blx	r8
  407be0:	4406      	add	r6, r0
  407be2:	f109 0901 	add.w	r9, r9, #1
  407be6:	45a1      	cmp	r9, r4
  407be8:	d1f7      	bne.n	407bda <f_printf+0x236>
		if (cc != EOF) cc = res;
  407bea:	f1b0 3fff 	cmp.w	r0, #4294967295
  407bee:	d085      	beq.n	407afc <f_printf+0x158>
  407bf0:	4635      	mov	r5, r6
	for (cc = res = 0; cc != EOF; res += cc) {
  407bf2:	442e      	add	r6, r5
  407bf4:	f1b5 3fff 	cmp.w	r5, #4294967295
  407bf8:	d016      	beq.n	407c28 <f_printf+0x284>
		c = *str++;
  407bfa:	1c7c      	adds	r4, r7, #1
  407bfc:	7838      	ldrb	r0, [r7, #0]
		if (c == 0) break;			/* End of string */
  407bfe:	2800      	cmp	r0, #0
  407c00:	f43f af7e 	beq.w	407b00 <f_printf+0x15c>
		if (c != '%') {				/* Non escape character */
  407c04:	2825      	cmp	r0, #37	; 0x25
  407c06:	f43f aee0 	beq.w	4079ca <f_printf+0x26>
			cc = f_putc(c, fil);
  407c0a:	9901      	ldr	r1, [sp, #4]
  407c0c:	47c0      	blx	r8
			if (cc != EOF) cc = 1;
  407c0e:	f1b0 3fff 	cmp.w	r0, #4294967295
  407c12:	f43f af73 	beq.w	407afc <f_printf+0x158>
	for (cc = res = 0; cc != EOF; res += cc) {
  407c16:	3601      	adds	r6, #1
  407c18:	4627      	mov	r7, r4
			if (cc != EOF) cc = 1;
  407c1a:	2501      	movs	r5, #1
  407c1c:	e7ed      	b.n	407bfa <f_printf+0x256>
		j = i; d = (f & 1) ? '0' : ' ';
  407c1e:	464d      	mov	r5, r9
		res = 0;
  407c20:	2600      	movs	r6, #0
  407c22:	e7ca      	b.n	407bba <f_printf+0x216>
  407c24:	2600      	movs	r6, #0
  407c26:	e7c8      	b.n	407bba <f_printf+0x216>
  407c28:	462e      	mov	r6, r5
  407c2a:	e769      	b.n	407b00 <f_printf+0x15c>
  407c2c:	f1b5 3fff 	cmp.w	r5, #4294967295
  407c30:	bf08      	it	eq
  407c32:	462e      	moveq	r6, r5
  407c34:	e764      	b.n	407b00 <f_printf+0x15c>
		v = (f & 4) ? (ULONG)va_arg(arp, long) : ((d == 'D') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int));
  407c36:	f01e 0f04 	tst.w	lr, #4
  407c3a:	d184      	bne.n	407b46 <f_printf+0x1a2>
			r = 16; break;
  407c3c:	2510      	movs	r5, #16
		v = (f & 4) ? (ULONG)va_arg(arp, long) : ((d == 'D') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int));
  407c3e:	9b07      	ldr	r3, [sp, #28]
  407c40:	1d1a      	adds	r2, r3, #4
  407c42:	9207      	str	r2, [sp, #28]
  407c44:	681a      	ldr	r2, [r3, #0]
  407c46:	2878      	cmp	r0, #120	; 0x78
  407c48:	bf0c      	ite	eq
  407c4a:	f04f 0c27 	moveq.w	ip, #39	; 0x27
  407c4e:	f04f 0c07 	movne.w	ip, #7
  407c52:	f10d 000b 	add.w	r0, sp, #11
		i = 0;
  407c56:	2600      	movs	r6, #0
  407c58:	e778      	b.n	407b4c <f_printf+0x1a8>
	for (cc = res = 0; cc != EOF; res += cc) {
  407c5a:	2600      	movs	r6, #0
  407c5c:	e750      	b.n	407b00 <f_printf+0x15c>
		v = (f & 4) ? (ULONG)va_arg(arp, long) : ((d == 'D') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int));
  407c5e:	9b07      	ldr	r3, [sp, #28]
  407c60:	1d1a      	adds	r2, r3, #4
  407c62:	9207      	str	r2, [sp, #28]
  407c64:	681a      	ldr	r2, [r3, #0]
			r = 2; break;
  407c66:	2502      	movs	r5, #2
  407c68:	e7ed      	b.n	407c46 <f_printf+0x2a2>
		v = (f & 4) ? (ULONG)va_arg(arp, long) : ((d == 'D') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int));
  407c6a:	f01e 0f04 	tst.w	lr, #4
  407c6e:	d1f6      	bne.n	407c5e <f_printf+0x2ba>
			r = 2; break;
  407c70:	2502      	movs	r5, #2
		v = (f & 4) ? (ULONG)va_arg(arp, long) : ((d == 'D') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int));
  407c72:	2b44      	cmp	r3, #68	; 0x44
  407c74:	d1e3      	bne.n	407c3e <f_printf+0x29a>
  407c76:	9b07      	ldr	r3, [sp, #28]
  407c78:	1d1a      	adds	r2, r3, #4
  407c7a:	9207      	str	r2, [sp, #28]
  407c7c:	681a      	ldr	r2, [r3, #0]
		if (d == 'D' && (v & 0x80000000)) {
  407c7e:	2a00      	cmp	r2, #0
			v = 0 - v;
  407c80:	bfbc      	itt	lt
  407c82:	4252      	neglt	r2, r2
			f |= 8;
  407c84:	f04e 0e08 	orrlt.w	lr, lr, #8
  407c88:	e7dd      	b.n	407c46 <f_printf+0x2a2>
		v = (f & 4) ? (ULONG)va_arg(arp, long) : ((d == 'D') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int));
  407c8a:	9b07      	ldr	r3, [sp, #28]
  407c8c:	1d1a      	adds	r2, r3, #4
  407c8e:	9207      	str	r2, [sp, #28]
  407c90:	681a      	ldr	r2, [r3, #0]
			r = 8; break;
  407c92:	2508      	movs	r5, #8
  407c94:	e7d7      	b.n	407c46 <f_printf+0x2a2>
		v = (f & 4) ? (ULONG)va_arg(arp, long) : ((d == 'D') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int));
  407c96:	f01e 0f04 	tst.w	lr, #4
  407c9a:	d1f6      	bne.n	407c8a <f_printf+0x2e6>
			r = 8; break;
  407c9c:	2508      	movs	r5, #8
  407c9e:	e7ce      	b.n	407c3e <f_printf+0x29a>
  407ca0:	00407975 	.word	0x00407975
  407ca4:	00407949 	.word	0x00407949

00407ca8 <ff_convert>:
  407ca8:	287f      	cmp	r0, #127	; 0x7f
  407caa:	d91a      	bls.n	407ce2 <ff_convert+0x3a>
  407cac:	b911      	cbnz	r1, 407cb4 <ff_convert+0xc>
  407cae:	28c7      	cmp	r0, #199	; 0xc7
  407cb0:	d107      	bne.n	407cc2 <ff_convert+0x1a>
  407cb2:	e011      	b.n	407cd8 <ff_convert+0x30>
  407cb4:	28ff      	cmp	r0, #255	; 0xff
  407cb6:	d813      	bhi.n	407ce0 <ff_convert+0x38>
  407cb8:	3880      	subs	r0, #128	; 0x80
  407cba:	4b0a      	ldr	r3, [pc, #40]	; (407ce4 <ff_convert+0x3c>)
  407cbc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
  407cc0:	4770      	bx	lr
  407cc2:	4a08      	ldr	r2, [pc, #32]	; (407ce4 <ff_convert+0x3c>)
  407cc4:	2301      	movs	r3, #1
  407cc6:	f832 1f02 	ldrh.w	r1, [r2, #2]!
  407cca:	4281      	cmp	r1, r0
  407ccc:	d005      	beq.n	407cda <ff_convert+0x32>
  407cce:	3301      	adds	r3, #1
  407cd0:	b29b      	uxth	r3, r3
  407cd2:	2b80      	cmp	r3, #128	; 0x80
  407cd4:	d1f7      	bne.n	407cc6 <ff_convert+0x1e>
  407cd6:	e000      	b.n	407cda <ff_convert+0x32>
  407cd8:	2300      	movs	r3, #0
  407cda:	3380      	adds	r3, #128	; 0x80
  407cdc:	b2d8      	uxtb	r0, r3
  407cde:	4770      	bx	lr
  407ce0:	2000      	movs	r0, #0
  407ce2:	4770      	bx	lr
  407ce4:	0040f08c 	.word	0x0040f08c

00407ce8 <ff_wtoupper>:
  407ce8:	2861      	cmp	r0, #97	; 0x61
  407cea:	d009      	beq.n	407d00 <ff_wtoupper+0x18>
  407cec:	4907      	ldr	r1, [pc, #28]	; (407d0c <ff_wtoupper+0x24>)
  407cee:	2200      	movs	r2, #0
  407cf0:	3201      	adds	r2, #1
  407cf2:	f831 3f02 	ldrh.w	r3, [r1, #2]!
  407cf6:	b13b      	cbz	r3, 407d08 <ff_wtoupper+0x20>
  407cf8:	4283      	cmp	r3, r0
  407cfa:	d1f9      	bne.n	407cf0 <ff_wtoupper+0x8>
  407cfc:	b90b      	cbnz	r3, 407d02 <ff_wtoupper+0x1a>
  407cfe:	4770      	bx	lr
  407d00:	2200      	movs	r2, #0
  407d02:	4b03      	ldr	r3, [pc, #12]	; (407d10 <ff_wtoupper+0x28>)
  407d04:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
  407d08:	4770      	bx	lr
  407d0a:	bf00      	nop
  407d0c:	0040eeac 	.word	0x0040eeac
  407d10:	0040f18c 	.word	0x0040f18c

00407d14 <main>:
/*************************** GLOBAL FUNCTIONS ********************************/

///@brief 	Main function.
///@details Application entry point.
int main(void)
{
  407d14:	b508      	push	{r3, lr}
	
	// Initialization
	system_init();
  407d16:	4b14      	ldr	r3, [pc, #80]	; (407d68 <main+0x54>)
  407d18:	4798      	blx	r3
	bootloader_init();
  407d1a:	4b14      	ldr	r3, [pc, #80]	; (407d6c <main+0x58>)
  407d1c:	4798      	blx	r3
	unit_config_and_calibration_init();
  407d1e:	4b14      	ldr	r3, [pc, #80]	; (407d70 <main+0x5c>)
  407d20:	4798      	blx	r3
	comm_init();
  407d22:	4b14      	ldr	r3, [pc, #80]	; (407d74 <main+0x60>)
  407d24:	4798      	blx	r3
	
	// system ready
	system_ready();
  407d26:	4b14      	ldr	r3, [pc, #80]	; (407d78 <main+0x64>)
  407d28:	4798      	blx	r3
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  407d2a:	4b14      	ldr	r3, [pc, #80]	; (407d7c <main+0x68>)
  407d2c:	f642 62df 	movw	r2, #11999	; 0x2edf
  407d30:	605a      	str	r2, [r3, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  407d32:	21f0      	movs	r1, #240	; 0xf0
  407d34:	4a12      	ldr	r2, [pc, #72]	; (407d80 <main+0x6c>)
  407d36:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  407d3a:	2200      	movs	r2, #0
  407d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  407d3e:	2207      	movs	r2, #7
  407d40:	601a      	str	r2, [r3, #0]
	SysTick_Config( sysclk_get_cpu_hz()/SETTINGS_ARM_TIMER_FREQ_HZ ); // set clock timer and enable interrupt
	system_enable_interrupt();
  407d42:	4b10      	ldr	r3, [pc, #64]	; (407d84 <main+0x70>)
  407d44:	4798      	blx	r3
	
	while(1) {
	
		sdcard_background();
  407d46:	4e10      	ldr	r6, [pc, #64]	; (407d88 <main+0x74>)
		delay_ms(500);
  407d48:	4d10      	ldr	r5, [pc, #64]	; (407d8c <main+0x78>)
  407d4a:	4c11      	ldr	r4, [pc, #68]	; (407d90 <main+0x7c>)
		sdcard_background();
  407d4c:	47b0      	blx	r6
		delay_ms(500);
  407d4e:	4628      	mov	r0, r5
  407d50:	47a0      	blx	r4
		gpio_set_pin_high(LED0_GPIO);
  407d52:	200f      	movs	r0, #15
  407d54:	4b0f      	ldr	r3, [pc, #60]	; (407d94 <main+0x80>)
  407d56:	4798      	blx	r3
		delay_ms(500);
  407d58:	4628      	mov	r0, r5
  407d5a:	47a0      	blx	r4
		gpio_set_pin_low(LED0_GPIO);
  407d5c:	200f      	movs	r0, #15
  407d5e:	4b0e      	ldr	r3, [pc, #56]	; (407d98 <main+0x84>)
  407d60:	4798      	blx	r3
		comm_background();
  407d62:	4b0e      	ldr	r3, [pc, #56]	; (407d9c <main+0x88>)
  407d64:	4798      	blx	r3
  407d66:	e7f1      	b.n	407d4c <main+0x38>
  407d68:	00403305 	.word	0x00403305
  407d6c:	00400e5d 	.word	0x00400e5d
  407d70:	0040284d 	.word	0x0040284d
  407d74:	00402f7d 	.word	0x00402f7d
  407d78:	00403581 	.word	0x00403581
  407d7c:	e000e010 	.word	0xe000e010
  407d80:	e000ed00 	.word	0xe000ed00
  407d84:	004035c9 	.word	0x004035c9
  407d88:	004024a9 	.word	0x004024a9
  407d8c:	00416513 	.word	0x00416513
  407d90:	20000089 	.word	0x20000089
  407d94:	0040498b 	.word	0x0040498b
  407d98:	004049a5 	.word	0x004049a5
  407d9c:	00402fd5 	.word	0x00402fd5

00407da0 <coreio_push_button_1_isr>:
///@brief Push Button Interrupt Service Routine.
///@details Enable/Disable the detection of SD-Card. Set this flag force
///         detection in background and clear this flag force a idle state
void coreio_push_button_1_isr(uint32_t id, uint32_t mask) {
	
	if ((PIN_PUSHBUTTON_1_ID == id) && (PIN_PUSHBUTTON_1_MASK == mask)) {
  407da0:	280b      	cmp	r0, #11
  407da2:	d000      	beq.n	407da6 <coreio_push_button_1_isr+0x6>
  407da4:	4770      	bx	lr
  407da6:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  407daa:	d1fb      	bne.n	407da4 <coreio_push_button_1_isr+0x4>
		if (sdcard_flags_status & SDCARD_FLAGS_STATUS_ENABLE_SDCARD )
  407dac:	4b08      	ldr	r3, [pc, #32]	; (407dd0 <coreio_push_button_1_isr+0x30>)
  407dae:	781b      	ldrb	r3, [r3, #0]
  407db0:	f013 0f01 	tst.w	r3, #1
  407db4:	d105      	bne.n	407dc2 <coreio_push_button_1_isr+0x22>
			sdcard_flags_status &= ~SDCARD_FLAGS_STATUS_ENABLE_SDCARD;
		else
			sdcard_flags_status |= SDCARD_FLAGS_STATUS_ENABLE_SDCARD;
  407db6:	4a06      	ldr	r2, [pc, #24]	; (407dd0 <coreio_push_button_1_isr+0x30>)
  407db8:	7813      	ldrb	r3, [r2, #0]
  407dba:	f043 0301 	orr.w	r3, r3, #1
  407dbe:	7013      	strb	r3, [r2, #0]
	}
}
  407dc0:	e7f0      	b.n	407da4 <coreio_push_button_1_isr+0x4>
			sdcard_flags_status &= ~SDCARD_FLAGS_STATUS_ENABLE_SDCARD;
  407dc2:	4a03      	ldr	r2, [pc, #12]	; (407dd0 <coreio_push_button_1_isr+0x30>)
  407dc4:	7813      	ldrb	r3, [r2, #0]
  407dc6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  407dca:	7013      	strb	r3, [r2, #0]
  407dcc:	4770      	bx	lr
  407dce:	bf00      	nop
  407dd0:	20001cc8 	.word	0x20001cc8

00407dd4 <coreio_push_button_2_isr>:
///@details Enable/Disable the detection of SD-Card. Set this flag force
///         detection in background and clear this flag force a idle state
///@note Other action can be assigned in a following revision
void coreio_push_button_2_isr(uint32_t id, uint32_t mask) {
	
	if ((PIN_PUSHBUTTON_2_ID == id) && (PIN_PUSHBUTTON_2_MASK == mask)) {
  407dd4:	280b      	cmp	r0, #11
  407dd6:	d000      	beq.n	407dda <coreio_push_button_2_isr+0x6>
  407dd8:	4770      	bx	lr
  407dda:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
  407dde:	d1fb      	bne.n	407dd8 <coreio_push_button_2_isr+0x4>
				
		if (sdcard_flags_status & SDCARD_FLAGS_STATUS_ENABLE_SDCARD )
  407de0:	4b08      	ldr	r3, [pc, #32]	; (407e04 <coreio_push_button_2_isr+0x30>)
  407de2:	781b      	ldrb	r3, [r3, #0]
  407de4:	f013 0f01 	tst.w	r3, #1
  407de8:	d105      	bne.n	407df6 <coreio_push_button_2_isr+0x22>
			sdcard_flags_status &= ~SDCARD_FLAGS_STATUS_ENABLE_SDCARD;
		else
			sdcard_flags_status |= SDCARD_FLAGS_STATUS_ENABLE_SDCARD;
  407dea:	4a06      	ldr	r2, [pc, #24]	; (407e04 <coreio_push_button_2_isr+0x30>)
  407dec:	7813      	ldrb	r3, [r2, #0]
  407dee:	f043 0301 	orr.w	r3, r3, #1
  407df2:	7013      	strb	r3, [r2, #0]
	}
}
  407df4:	e7f0      	b.n	407dd8 <coreio_push_button_2_isr+0x4>
			sdcard_flags_status &= ~SDCARD_FLAGS_STATUS_ENABLE_SDCARD;
  407df6:	4a03      	ldr	r2, [pc, #12]	; (407e04 <coreio_push_button_2_isr+0x30>)
  407df8:	7813      	ldrb	r3, [r2, #0]
  407dfa:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  407dfe:	7013      	strb	r3, [r2, #0]
  407e00:	4770      	bx	lr
  407e02:	bf00      	nop
  407e04:	20001cc8 	.word	0x20001cc8

00407e08 <SysTick_Handler>:

///@brief Handler for System Tick interrupt.
///@details Process System Tick Event. Update counters.
void SysTick_Handler(void) {
  407e08:	b508      	push	{r3, lr}
	
	comm_counters_update();
  407e0a:	4b01      	ldr	r3, [pc, #4]	; (407e10 <SysTick_Handler+0x8>)
  407e0c:	4798      	blx	r3
  407e0e:	bd08      	pop	{r3, pc}
  407e10:	00403095 	.word	0x00403095

00407e14 <UART0_Handler>:
	
}

///@brief Handler for UART 0.
void UART0_Handler(void) {
  407e14:	b508      	push	{r3, lr}
	comm_preprocess_uart_DSP_RX();
  407e16:	4b01      	ldr	r3, [pc, #4]	; (407e1c <UART0_Handler+0x8>)
  407e18:	4798      	blx	r3
  407e1a:	bd08      	pop	{r3, pc}
  407e1c:	00403101 	.word	0x00403101

00407e20 <UART1_Handler>:
}

///@brief Handler for UART 1.
void UART1_Handler(void) {
  407e20:	b508      	push	{r3, lr}
	comm_preprocess_uart_RPI_RX();
  407e22:	4b01      	ldr	r3, [pc, #4]	; (407e28 <UART1_Handler+0x8>)
  407e24:	4798      	blx	r3
  407e26:	bd08      	pop	{r3, pc}
  407e28:	00403115 	.word	0x00403115

00407e2c <SUPC_Handler>:

///@brief Interrupt Handler for Supply monitor (SUPC)
///@details It is executed when a supply monitor detection occurs.
///         Go to backup model.
void SUPC_Handler(void)
{
  407e2c:	b508      	push	{r3, lr}

	uint32_t supc_sr_value = 0;
	
	supc_sr_value = SUPC->SUPC_SR;
  407e2e:	4b05      	ldr	r3, [pc, #20]	; (407e44 <SUPC_Handler+0x18>)
  407e30:	695b      	ldr	r3, [r3, #20]
	
	if (supc_sr_value & SUPC_SR_SMS)
  407e32:	f013 0f20 	tst.w	r3, #32
  407e36:	d100      	bne.n	407e3a <SUPC_Handler+0xe>
  407e38:	bd08      	pop	{r3, pc}
	{
 		
 		// Disable clocks and correctly configure I/Os to reduce power consumption.
 		backup_mode_prepare();
  407e3a:	4b03      	ldr	r3, [pc, #12]	; (407e48 <SUPC_Handler+0x1c>)
  407e3c:	4798      	blx	r3
		
 		// Enter in back up mode till power is over threshold again
 		enter_backup_mode();
  407e3e:	4b03      	ldr	r3, [pc, #12]	; (407e4c <SUPC_Handler+0x20>)
  407e40:	4798      	blx	r3
	}
}
  407e42:	e7f9      	b.n	407e38 <SUPC_Handler+0xc>
  407e44:	400e1410 	.word	0x400e1410
  407e48:	00402699 	.word	0x00402699
  407e4c:	00402739 	.word	0x00402739

00407e50 <atan2>:
  407e50:	f000 b85e 	b.w	407f10 <__ieee754_atan2>

00407e54 <sqrt>:
  407e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407e58:	b08b      	sub	sp, #44	; 0x2c
  407e5a:	4604      	mov	r4, r0
  407e5c:	460d      	mov	r5, r1
  407e5e:	f000 f941 	bl	4080e4 <__ieee754_sqrt>
  407e62:	4b29      	ldr	r3, [pc, #164]	; (407f08 <sqrt+0xb4>)
  407e64:	f993 a000 	ldrsb.w	sl, [r3]
  407e68:	f1ba 3fff 	cmp.w	sl, #4294967295
  407e6c:	4606      	mov	r6, r0
  407e6e:	460f      	mov	r7, r1
  407e70:	d012      	beq.n	407e98 <sqrt+0x44>
  407e72:	4622      	mov	r2, r4
  407e74:	462b      	mov	r3, r5
  407e76:	4620      	mov	r0, r4
  407e78:	4629      	mov	r1, r5
  407e7a:	f000 ffeb 	bl	408e54 <__aeabi_dcmpun>
  407e7e:	4683      	mov	fp, r0
  407e80:	b950      	cbnz	r0, 407e98 <sqrt+0x44>
  407e82:	f04f 0800 	mov.w	r8, #0
  407e86:	f04f 0900 	mov.w	r9, #0
  407e8a:	4642      	mov	r2, r8
  407e8c:	464b      	mov	r3, r9
  407e8e:	4620      	mov	r0, r4
  407e90:	4629      	mov	r1, r5
  407e92:	f000 ffb7 	bl	408e04 <__aeabi_dcmplt>
  407e96:	b920      	cbnz	r0, 407ea2 <sqrt+0x4e>
  407e98:	4630      	mov	r0, r6
  407e9a:	4639      	mov	r1, r7
  407e9c:	b00b      	add	sp, #44	; 0x2c
  407e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407ea2:	4b1a      	ldr	r3, [pc, #104]	; (407f0c <sqrt+0xb8>)
  407ea4:	f8cd b020 	str.w	fp, [sp, #32]
  407ea8:	2201      	movs	r2, #1
  407eaa:	e9cd 4504 	strd	r4, r5, [sp, #16]
  407eae:	e9cd 4502 	strd	r4, r5, [sp, #8]
  407eb2:	e88d 000c 	stmia.w	sp, {r2, r3}
  407eb6:	f1ba 0f00 	cmp.w	sl, #0
  407eba:	d017      	beq.n	407eec <sqrt+0x98>
  407ebc:	4642      	mov	r2, r8
  407ebe:	464b      	mov	r3, r9
  407ec0:	4640      	mov	r0, r8
  407ec2:	4649      	mov	r1, r9
  407ec4:	f000 fe56 	bl	408b74 <__aeabi_ddiv>
  407ec8:	f1ba 0f02 	cmp.w	sl, #2
  407ecc:	e9cd 0106 	strd	r0, r1, [sp, #24]
  407ed0:	d10e      	bne.n	407ef0 <sqrt+0x9c>
  407ed2:	f001 fad1 	bl	409478 <__errno>
  407ed6:	2321      	movs	r3, #33	; 0x21
  407ed8:	6003      	str	r3, [r0, #0]
  407eda:	9b08      	ldr	r3, [sp, #32]
  407edc:	b973      	cbnz	r3, 407efc <sqrt+0xa8>
  407ede:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
  407ee2:	4630      	mov	r0, r6
  407ee4:	4639      	mov	r1, r7
  407ee6:	b00b      	add	sp, #44	; 0x2c
  407ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407eec:	e9cd 8906 	strd	r8, r9, [sp, #24]
  407ef0:	4668      	mov	r0, sp
  407ef2:	f000 fb5b 	bl	4085ac <matherr>
  407ef6:	2800      	cmp	r0, #0
  407ef8:	d1ef      	bne.n	407eda <sqrt+0x86>
  407efa:	e7ea      	b.n	407ed2 <sqrt+0x7e>
  407efc:	f001 fabc 	bl	409478 <__errno>
  407f00:	9b08      	ldr	r3, [sp, #32]
  407f02:	6003      	str	r3, [r0, #0]
  407f04:	e7eb      	b.n	407ede <sqrt+0x8a>
  407f06:	bf00      	nop
  407f08:	200000c0 	.word	0x200000c0
  407f0c:	0040f36c 	.word	0x0040f36c

00407f10 <__ieee754_atan2>:
  407f10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407f14:	4254      	negs	r4, r2
  407f16:	4314      	orrs	r4, r2
  407f18:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
  407f1c:	4e70      	ldr	r6, [pc, #448]	; (4080e0 <__ieee754_atan2+0x1d0>)
  407f1e:	ea49 74d4 	orr.w	r4, r9, r4, lsr #31
  407f22:	42b4      	cmp	r4, r6
  407f24:	4686      	mov	lr, r0
  407f26:	460f      	mov	r7, r1
  407f28:	d840      	bhi.n	407fac <__ieee754_atan2+0x9c>
  407f2a:	4244      	negs	r4, r0
  407f2c:	4304      	orrs	r4, r0
  407f2e:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
  407f32:	ea4b 74d4 	orr.w	r4, fp, r4, lsr #31
  407f36:	42b4      	cmp	r4, r6
  407f38:	468a      	mov	sl, r1
  407f3a:	d837      	bhi.n	407fac <__ieee754_atan2+0x9c>
  407f3c:	f103 4440 	add.w	r4, r3, #3221225472	; 0xc0000000
  407f40:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
  407f44:	4314      	orrs	r4, r2
  407f46:	d04a      	beq.n	407fde <__ieee754_atan2+0xce>
  407f48:	179c      	asrs	r4, r3, #30
  407f4a:	f004 0402 	and.w	r4, r4, #2
  407f4e:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
  407f52:	ea50 010b 	orrs.w	r1, r0, fp
  407f56:	d031      	beq.n	407fbc <__ieee754_atan2+0xac>
  407f58:	ea52 0109 	orrs.w	r1, r2, r9
  407f5c:	d037      	beq.n	407fce <__ieee754_atan2+0xbe>
  407f5e:	45b1      	cmp	r9, r6
  407f60:	d052      	beq.n	408008 <__ieee754_atan2+0xf8>
  407f62:	45b3      	cmp	fp, r6
  407f64:	d033      	beq.n	407fce <__ieee754_atan2+0xbe>
  407f66:	ebab 0909 	sub.w	r9, fp, r9
  407f6a:	ea4f 5929 	mov.w	r9, r9, asr #20
  407f6e:	f1b9 0f3c 	cmp.w	r9, #60	; 0x3c
  407f72:	dc3b      	bgt.n	407fec <__ieee754_atan2+0xdc>
  407f74:	2b00      	cmp	r3, #0
  407f76:	db66      	blt.n	408046 <__ieee754_atan2+0x136>
  407f78:	4670      	mov	r0, lr
  407f7a:	4639      	mov	r1, r7
  407f7c:	f000 fdfa 	bl	408b74 <__aeabi_ddiv>
  407f80:	f000 fb10 	bl	4085a4 <fabs>
  407f84:	f000 f96c 	bl	408260 <atan>
  407f88:	2c01      	cmp	r4, #1
  407f8a:	d058      	beq.n	40803e <__ieee754_atan2+0x12e>
  407f8c:	2c02      	cmp	r4, #2
  407f8e:	d048      	beq.n	408022 <__ieee754_atan2+0x112>
  407f90:	2c00      	cmp	r4, #0
  407f92:	d05e      	beq.n	408052 <__ieee754_atan2+0x142>
  407f94:	a340      	add	r3, pc, #256	; (adr r3, 408098 <__ieee754_atan2+0x188>)
  407f96:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f9a:	f000 fb0d 	bl	4085b8 <__aeabi_dsub>
  407f9e:	a340      	add	r3, pc, #256	; (adr r3, 4080a0 <__ieee754_atan2+0x190>)
  407fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
  407fa4:	f000 fb08 	bl	4085b8 <__aeabi_dsub>
  407fa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407fac:	4610      	mov	r0, r2
  407fae:	4619      	mov	r1, r3
  407fb0:	4672      	mov	r2, lr
  407fb2:	463b      	mov	r3, r7
  407fb4:	f000 fb02 	bl	4085bc <__adddf3>
  407fb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407fbc:	2c02      	cmp	r4, #2
  407fbe:	d019      	beq.n	407ff4 <__ieee754_atan2+0xe4>
  407fc0:	2c03      	cmp	r4, #3
  407fc2:	d110      	bne.n	407fe6 <__ieee754_atan2+0xd6>
  407fc4:	a138      	add	r1, pc, #224	; (adr r1, 4080a8 <__ieee754_atan2+0x198>)
  407fc6:	e9d1 0100 	ldrd	r0, r1, [r1]
  407fca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407fce:	f1ba 0f00 	cmp.w	sl, #0
  407fd2:	db14      	blt.n	407ffe <__ieee754_atan2+0xee>
  407fd4:	a136      	add	r1, pc, #216	; (adr r1, 4080b0 <__ieee754_atan2+0x1a0>)
  407fd6:	e9d1 0100 	ldrd	r0, r1, [r1]
  407fda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407fde:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407fe2:	f000 b93d 	b.w	408260 <atan>
  407fe6:	4639      	mov	r1, r7
  407fe8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407fec:	a130      	add	r1, pc, #192	; (adr r1, 4080b0 <__ieee754_atan2+0x1a0>)
  407fee:	e9d1 0100 	ldrd	r0, r1, [r1]
  407ff2:	e7c9      	b.n	407f88 <__ieee754_atan2+0x78>
  407ff4:	a12a      	add	r1, pc, #168	; (adr r1, 4080a0 <__ieee754_atan2+0x190>)
  407ff6:	e9d1 0100 	ldrd	r0, r1, [r1]
  407ffa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407ffe:	a12e      	add	r1, pc, #184	; (adr r1, 4080b8 <__ieee754_atan2+0x1a8>)
  408000:	e9d1 0100 	ldrd	r0, r1, [r1]
  408004:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408008:	45cb      	cmp	fp, r9
  40800a:	d024      	beq.n	408056 <__ieee754_atan2+0x146>
  40800c:	2c02      	cmp	r4, #2
  40800e:	d0f1      	beq.n	407ff4 <__ieee754_atan2+0xe4>
  408010:	2c03      	cmp	r4, #3
  408012:	d0d7      	beq.n	407fc4 <__ieee754_atan2+0xb4>
  408014:	2c01      	cmp	r4, #1
  408016:	f04f 0000 	mov.w	r0, #0
  40801a:	d027      	beq.n	40806c <__ieee754_atan2+0x15c>
  40801c:	2100      	movs	r1, #0
  40801e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408022:	a31d      	add	r3, pc, #116	; (adr r3, 408098 <__ieee754_atan2+0x188>)
  408024:	e9d3 2300 	ldrd	r2, r3, [r3]
  408028:	f000 fac6 	bl	4085b8 <__aeabi_dsub>
  40802c:	4602      	mov	r2, r0
  40802e:	460b      	mov	r3, r1
  408030:	a11b      	add	r1, pc, #108	; (adr r1, 4080a0 <__ieee754_atan2+0x190>)
  408032:	e9d1 0100 	ldrd	r0, r1, [r1]
  408036:	f000 fabf 	bl	4085b8 <__aeabi_dsub>
  40803a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40803e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  408042:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408046:	f119 0f3c 	cmn.w	r9, #60	; 0x3c
  40804a:	da95      	bge.n	407f78 <__ieee754_atan2+0x68>
  40804c:	2000      	movs	r0, #0
  40804e:	2100      	movs	r1, #0
  408050:	e79a      	b.n	407f88 <__ieee754_atan2+0x78>
  408052:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408056:	2c02      	cmp	r4, #2
  408058:	d016      	beq.n	408088 <__ieee754_atan2+0x178>
  40805a:	2c03      	cmp	r4, #3
  40805c:	d00f      	beq.n	40807e <__ieee754_atan2+0x16e>
  40805e:	2c01      	cmp	r4, #1
  408060:	d008      	beq.n	408074 <__ieee754_atan2+0x164>
  408062:	a117      	add	r1, pc, #92	; (adr r1, 4080c0 <__ieee754_atan2+0x1b0>)
  408064:	e9d1 0100 	ldrd	r0, r1, [r1]
  408068:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40806c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  408070:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408074:	a114      	add	r1, pc, #80	; (adr r1, 4080c8 <__ieee754_atan2+0x1b8>)
  408076:	e9d1 0100 	ldrd	r0, r1, [r1]
  40807a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40807e:	a114      	add	r1, pc, #80	; (adr r1, 4080d0 <__ieee754_atan2+0x1c0>)
  408080:	e9d1 0100 	ldrd	r0, r1, [r1]
  408084:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408088:	a113      	add	r1, pc, #76	; (adr r1, 4080d8 <__ieee754_atan2+0x1c8>)
  40808a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40808e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408092:	bf00      	nop
  408094:	f3af 8000 	nop.w
  408098:	33145c07 	.word	0x33145c07
  40809c:	3ca1a626 	.word	0x3ca1a626
  4080a0:	54442d18 	.word	0x54442d18
  4080a4:	400921fb 	.word	0x400921fb
  4080a8:	54442d18 	.word	0x54442d18
  4080ac:	c00921fb 	.word	0xc00921fb
  4080b0:	54442d18 	.word	0x54442d18
  4080b4:	3ff921fb 	.word	0x3ff921fb
  4080b8:	54442d18 	.word	0x54442d18
  4080bc:	bff921fb 	.word	0xbff921fb
  4080c0:	54442d18 	.word	0x54442d18
  4080c4:	3fe921fb 	.word	0x3fe921fb
  4080c8:	54442d18 	.word	0x54442d18
  4080cc:	bfe921fb 	.word	0xbfe921fb
  4080d0:	7f3321d2 	.word	0x7f3321d2
  4080d4:	c002d97c 	.word	0xc002d97c
  4080d8:	7f3321d2 	.word	0x7f3321d2
  4080dc:	4002d97c 	.word	0x4002d97c
  4080e0:	7ff00000 	.word	0x7ff00000

004080e4 <__ieee754_sqrt>:
  4080e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4080e8:	4f5b      	ldr	r7, [pc, #364]	; (408258 <__ieee754_sqrt+0x174>)
  4080ea:	438f      	bics	r7, r1
  4080ec:	4605      	mov	r5, r0
  4080ee:	460c      	mov	r4, r1
  4080f0:	f000 8092 	beq.w	408218 <__ieee754_sqrt+0x134>
  4080f4:	2900      	cmp	r1, #0
  4080f6:	460b      	mov	r3, r1
  4080f8:	4602      	mov	r2, r0
  4080fa:	dd6f      	ble.n	4081dc <__ieee754_sqrt+0xf8>
  4080fc:	150f      	asrs	r7, r1, #20
  4080fe:	d07b      	beq.n	4081f8 <__ieee754_sqrt+0x114>
  408100:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  408104:	f3c3 0313 	ubfx	r3, r3, #0, #20
  408108:	07f8      	lsls	r0, r7, #31
  40810a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40810e:	d45c      	bmi.n	4081ca <__ieee754_sqrt+0xe6>
  408110:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  408114:	2600      	movs	r6, #0
  408116:	440b      	add	r3, r1
  408118:	107f      	asrs	r7, r7, #1
  40811a:	0052      	lsls	r2, r2, #1
  40811c:	46b6      	mov	lr, r6
  40811e:	2016      	movs	r0, #22
  408120:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  408124:	eb0e 0401 	add.w	r4, lr, r1
  408128:	429c      	cmp	r4, r3
  40812a:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  40812e:	ea4f 0242 	mov.w	r2, r2, lsl #1
  408132:	dc03      	bgt.n	40813c <__ieee754_sqrt+0x58>
  408134:	1b1b      	subs	r3, r3, r4
  408136:	eb04 0e01 	add.w	lr, r4, r1
  40813a:	440e      	add	r6, r1
  40813c:	3801      	subs	r0, #1
  40813e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  408142:	ea4f 0151 	mov.w	r1, r1, lsr #1
  408146:	d1ed      	bne.n	408124 <__ieee754_sqrt+0x40>
  408148:	4684      	mov	ip, r0
  40814a:	2420      	movs	r4, #32
  40814c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  408150:	e009      	b.n	408166 <__ieee754_sqrt+0x82>
  408152:	d020      	beq.n	408196 <__ieee754_sqrt+0xb2>
  408154:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  408158:	3c01      	subs	r4, #1
  40815a:	ea4f 0151 	mov.w	r1, r1, lsr #1
  40815e:	442b      	add	r3, r5
  408160:	ea4f 0242 	mov.w	r2, r2, lsl #1
  408164:	d020      	beq.n	4081a8 <__ieee754_sqrt+0xc4>
  408166:	4573      	cmp	r3, lr
  408168:	eb01 050c 	add.w	r5, r1, ip
  40816c:	ddf1      	ble.n	408152 <__ieee754_sqrt+0x6e>
  40816e:	2d00      	cmp	r5, #0
  408170:	eb05 0c01 	add.w	ip, r5, r1
  408174:	db09      	blt.n	40818a <__ieee754_sqrt+0xa6>
  408176:	46f0      	mov	r8, lr
  408178:	4295      	cmp	r5, r2
  40817a:	eba3 030e 	sub.w	r3, r3, lr
  40817e:	d900      	bls.n	408182 <__ieee754_sqrt+0x9e>
  408180:	3b01      	subs	r3, #1
  408182:	1b52      	subs	r2, r2, r5
  408184:	4408      	add	r0, r1
  408186:	46c6      	mov	lr, r8
  408188:	e7e4      	b.n	408154 <__ieee754_sqrt+0x70>
  40818a:	f1bc 0f00 	cmp.w	ip, #0
  40818e:	dbf2      	blt.n	408176 <__ieee754_sqrt+0x92>
  408190:	f10e 0801 	add.w	r8, lr, #1
  408194:	e7f0      	b.n	408178 <__ieee754_sqrt+0x94>
  408196:	4295      	cmp	r5, r2
  408198:	d8dc      	bhi.n	408154 <__ieee754_sqrt+0x70>
  40819a:	2d00      	cmp	r5, #0
  40819c:	eb05 0c01 	add.w	ip, r5, r1
  4081a0:	db44      	blt.n	40822c <__ieee754_sqrt+0x148>
  4081a2:	4698      	mov	r8, r3
  4081a4:	2300      	movs	r3, #0
  4081a6:	e7ec      	b.n	408182 <__ieee754_sqrt+0x9e>
  4081a8:	4313      	orrs	r3, r2
  4081aa:	d113      	bne.n	4081d4 <__ieee754_sqrt+0xf0>
  4081ac:	0840      	lsrs	r0, r0, #1
  4081ae:	1073      	asrs	r3, r6, #1
  4081b0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  4081b4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4081b8:	07f2      	lsls	r2, r6, #31
  4081ba:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  4081be:	bf48      	it	mi
  4081c0:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  4081c4:	4649      	mov	r1, r9
  4081c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4081ca:	005b      	lsls	r3, r3, #1
  4081cc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  4081d0:	0052      	lsls	r2, r2, #1
  4081d2:	e79d      	b.n	408110 <__ieee754_sqrt+0x2c>
  4081d4:	1c41      	adds	r1, r0, #1
  4081d6:	d02d      	beq.n	408234 <__ieee754_sqrt+0x150>
  4081d8:	3001      	adds	r0, #1
  4081da:	e7e7      	b.n	4081ac <__ieee754_sqrt+0xc8>
  4081dc:	4606      	mov	r6, r0
  4081de:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  4081e2:	433e      	orrs	r6, r7
  4081e4:	d0ef      	beq.n	4081c6 <__ieee754_sqrt+0xe2>
  4081e6:	bb69      	cbnz	r1, 408244 <__ieee754_sqrt+0x160>
  4081e8:	460f      	mov	r7, r1
  4081ea:	0ad3      	lsrs	r3, r2, #11
  4081ec:	3f15      	subs	r7, #21
  4081ee:	0552      	lsls	r2, r2, #21
  4081f0:	2b00      	cmp	r3, #0
  4081f2:	d0fa      	beq.n	4081ea <__ieee754_sqrt+0x106>
  4081f4:	02de      	lsls	r6, r3, #11
  4081f6:	d420      	bmi.n	40823a <__ieee754_sqrt+0x156>
  4081f8:	2400      	movs	r4, #0
  4081fa:	e000      	b.n	4081fe <__ieee754_sqrt+0x11a>
  4081fc:	4604      	mov	r4, r0
  4081fe:	005b      	lsls	r3, r3, #1
  408200:	02dd      	lsls	r5, r3, #11
  408202:	f104 0001 	add.w	r0, r4, #1
  408206:	d5f9      	bpl.n	4081fc <__ieee754_sqrt+0x118>
  408208:	f1c0 0120 	rsb	r1, r0, #32
  40820c:	fa22 f101 	lsr.w	r1, r2, r1
  408210:	430b      	orrs	r3, r1
  408212:	1b3f      	subs	r7, r7, r4
  408214:	4082      	lsls	r2, r0
  408216:	e773      	b.n	408100 <__ieee754_sqrt+0x1c>
  408218:	4602      	mov	r2, r0
  40821a:	460b      	mov	r3, r1
  40821c:	f000 fb80 	bl	408920 <__aeabi_dmul>
  408220:	462a      	mov	r2, r5
  408222:	4623      	mov	r3, r4
  408224:	f000 f9ca 	bl	4085bc <__adddf3>
  408228:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40822c:	f1bc 0f00 	cmp.w	ip, #0
  408230:	daae      	bge.n	408190 <__ieee754_sqrt+0xac>
  408232:	e7b6      	b.n	4081a2 <__ieee754_sqrt+0xbe>
  408234:	3601      	adds	r6, #1
  408236:	4620      	mov	r0, r4
  408238:	e7b9      	b.n	4081ae <__ieee754_sqrt+0xca>
  40823a:	2000      	movs	r0, #0
  40823c:	2120      	movs	r1, #32
  40823e:	f04f 34ff 	mov.w	r4, #4294967295
  408242:	e7e3      	b.n	40820c <__ieee754_sqrt+0x128>
  408244:	4602      	mov	r2, r0
  408246:	460b      	mov	r3, r1
  408248:	f000 f9b6 	bl	4085b8 <__aeabi_dsub>
  40824c:	4602      	mov	r2, r0
  40824e:	460b      	mov	r3, r1
  408250:	f000 fc90 	bl	408b74 <__aeabi_ddiv>
  408254:	e7b7      	b.n	4081c6 <__ieee754_sqrt+0xe2>
  408256:	bf00      	nop
  408258:	7ff00000 	.word	0x7ff00000
  40825c:	00000000 	.word	0x00000000

00408260 <atan>:
  408260:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408264:	4bc2      	ldr	r3, [pc, #776]	; (408570 <atan+0x310>)
  408266:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  40826a:	429e      	cmp	r6, r3
  40826c:	460d      	mov	r5, r1
  40826e:	468a      	mov	sl, r1
  408270:	4604      	mov	r4, r0
  408272:	dd10      	ble.n	408296 <atan+0x36>
  408274:	4bbf      	ldr	r3, [pc, #764]	; (408574 <atan+0x314>)
  408276:	429e      	cmp	r6, r3
  408278:	f300 80b5 	bgt.w	4083e6 <atan+0x186>
  40827c:	f000 80b0 	beq.w	4083e0 <atan+0x180>
  408280:	4bbd      	ldr	r3, [pc, #756]	; (408578 <atan+0x318>)
  408282:	49be      	ldr	r1, [pc, #760]	; (40857c <atan+0x31c>)
  408284:	4cbe      	ldr	r4, [pc, #760]	; (408580 <atan+0x320>)
  408286:	f1ba 0f00 	cmp.w	sl, #0
  40828a:	bfd8      	it	le
  40828c:	460b      	movle	r3, r1
  40828e:	4620      	mov	r0, r4
  408290:	4619      	mov	r1, r3
  408292:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408296:	4bbb      	ldr	r3, [pc, #748]	; (408584 <atan+0x324>)
  408298:	429e      	cmp	r6, r3
  40829a:	f300 80c1 	bgt.w	408420 <atan+0x1c0>
  40829e:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
  4082a2:	429e      	cmp	r6, r3
  4082a4:	f340 80ab 	ble.w	4083fe <atan+0x19e>
  4082a8:	f04f 3bff 	mov.w	fp, #4294967295
  4082ac:	4622      	mov	r2, r4
  4082ae:	462b      	mov	r3, r5
  4082b0:	4620      	mov	r0, r4
  4082b2:	4629      	mov	r1, r5
  4082b4:	f000 fb34 	bl	408920 <__aeabi_dmul>
  4082b8:	4602      	mov	r2, r0
  4082ba:	460b      	mov	r3, r1
  4082bc:	4680      	mov	r8, r0
  4082be:	4689      	mov	r9, r1
  4082c0:	f000 fb2e 	bl	408920 <__aeabi_dmul>
  4082c4:	a392      	add	r3, pc, #584	; (adr r3, 408510 <atan+0x2b0>)
  4082c6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4082ca:	4606      	mov	r6, r0
  4082cc:	460f      	mov	r7, r1
  4082ce:	f000 fb27 	bl	408920 <__aeabi_dmul>
  4082d2:	a391      	add	r3, pc, #580	; (adr r3, 408518 <atan+0x2b8>)
  4082d4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4082d8:	f000 f970 	bl	4085bc <__adddf3>
  4082dc:	4632      	mov	r2, r6
  4082de:	463b      	mov	r3, r7
  4082e0:	f000 fb1e 	bl	408920 <__aeabi_dmul>
  4082e4:	a38e      	add	r3, pc, #568	; (adr r3, 408520 <atan+0x2c0>)
  4082e6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4082ea:	f000 f967 	bl	4085bc <__adddf3>
  4082ee:	4632      	mov	r2, r6
  4082f0:	463b      	mov	r3, r7
  4082f2:	f000 fb15 	bl	408920 <__aeabi_dmul>
  4082f6:	a38c      	add	r3, pc, #560	; (adr r3, 408528 <atan+0x2c8>)
  4082f8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4082fc:	f000 f95e 	bl	4085bc <__adddf3>
  408300:	4632      	mov	r2, r6
  408302:	463b      	mov	r3, r7
  408304:	f000 fb0c 	bl	408920 <__aeabi_dmul>
  408308:	a389      	add	r3, pc, #548	; (adr r3, 408530 <atan+0x2d0>)
  40830a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40830e:	f000 f955 	bl	4085bc <__adddf3>
  408312:	4632      	mov	r2, r6
  408314:	463b      	mov	r3, r7
  408316:	f000 fb03 	bl	408920 <__aeabi_dmul>
  40831a:	a387      	add	r3, pc, #540	; (adr r3, 408538 <atan+0x2d8>)
  40831c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408320:	f000 f94c 	bl	4085bc <__adddf3>
  408324:	4642      	mov	r2, r8
  408326:	464b      	mov	r3, r9
  408328:	f000 fafa 	bl	408920 <__aeabi_dmul>
  40832c:	a384      	add	r3, pc, #528	; (adr r3, 408540 <atan+0x2e0>)
  40832e:	e9d3 2300 	ldrd	r2, r3, [r3]
  408332:	4680      	mov	r8, r0
  408334:	4689      	mov	r9, r1
  408336:	4630      	mov	r0, r6
  408338:	4639      	mov	r1, r7
  40833a:	f000 faf1 	bl	408920 <__aeabi_dmul>
  40833e:	a382      	add	r3, pc, #520	; (adr r3, 408548 <atan+0x2e8>)
  408340:	e9d3 2300 	ldrd	r2, r3, [r3]
  408344:	f000 f938 	bl	4085b8 <__aeabi_dsub>
  408348:	4632      	mov	r2, r6
  40834a:	463b      	mov	r3, r7
  40834c:	f000 fae8 	bl	408920 <__aeabi_dmul>
  408350:	a37f      	add	r3, pc, #508	; (adr r3, 408550 <atan+0x2f0>)
  408352:	e9d3 2300 	ldrd	r2, r3, [r3]
  408356:	f000 f92f 	bl	4085b8 <__aeabi_dsub>
  40835a:	4632      	mov	r2, r6
  40835c:	463b      	mov	r3, r7
  40835e:	f000 fadf 	bl	408920 <__aeabi_dmul>
  408362:	a37d      	add	r3, pc, #500	; (adr r3, 408558 <atan+0x2f8>)
  408364:	e9d3 2300 	ldrd	r2, r3, [r3]
  408368:	f000 f926 	bl	4085b8 <__aeabi_dsub>
  40836c:	4632      	mov	r2, r6
  40836e:	463b      	mov	r3, r7
  408370:	f000 fad6 	bl	408920 <__aeabi_dmul>
  408374:	a37a      	add	r3, pc, #488	; (adr r3, 408560 <atan+0x300>)
  408376:	e9d3 2300 	ldrd	r2, r3, [r3]
  40837a:	f000 f91d 	bl	4085b8 <__aeabi_dsub>
  40837e:	4632      	mov	r2, r6
  408380:	463b      	mov	r3, r7
  408382:	f000 facd 	bl	408920 <__aeabi_dmul>
  408386:	f1bb 3fff 	cmp.w	fp, #4294967295
  40838a:	4602      	mov	r2, r0
  40838c:	460b      	mov	r3, r1
  40838e:	d06e      	beq.n	40846e <atan+0x20e>
  408390:	4640      	mov	r0, r8
  408392:	4649      	mov	r1, r9
  408394:	f000 f912 	bl	4085bc <__adddf3>
  408398:	4622      	mov	r2, r4
  40839a:	462b      	mov	r3, r5
  40839c:	f000 fac0 	bl	408920 <__aeabi_dmul>
  4083a0:	4e79      	ldr	r6, [pc, #484]	; (408588 <atan+0x328>)
  4083a2:	4b7a      	ldr	r3, [pc, #488]	; (40858c <atan+0x32c>)
  4083a4:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
  4083a8:	445e      	add	r6, fp
  4083aa:	449b      	add	fp, r3
  4083ac:	e9db 2300 	ldrd	r2, r3, [fp]
  4083b0:	f000 f902 	bl	4085b8 <__aeabi_dsub>
  4083b4:	4622      	mov	r2, r4
  4083b6:	462b      	mov	r3, r5
  4083b8:	f000 f8fe 	bl	4085b8 <__aeabi_dsub>
  4083bc:	460b      	mov	r3, r1
  4083be:	4602      	mov	r2, r0
  4083c0:	e9d6 0100 	ldrd	r0, r1, [r6]
  4083c4:	f000 f8f8 	bl	4085b8 <__aeabi_dsub>
  4083c8:	f1ba 0f00 	cmp.w	sl, #0
  4083cc:	4604      	mov	r4, r0
  4083ce:	460b      	mov	r3, r1
  4083d0:	f6bf af5d 	bge.w	40828e <atan+0x2e>
  4083d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  4083d8:	4620      	mov	r0, r4
  4083da:	4619      	mov	r1, r3
  4083dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4083e0:	2800      	cmp	r0, #0
  4083e2:	f43f af4d 	beq.w	408280 <atan+0x20>
  4083e6:	4622      	mov	r2, r4
  4083e8:	462b      	mov	r3, r5
  4083ea:	4620      	mov	r0, r4
  4083ec:	4629      	mov	r1, r5
  4083ee:	f000 f8e5 	bl	4085bc <__adddf3>
  4083f2:	4604      	mov	r4, r0
  4083f4:	460b      	mov	r3, r1
  4083f6:	4620      	mov	r0, r4
  4083f8:	4619      	mov	r1, r3
  4083fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4083fe:	a35a      	add	r3, pc, #360	; (adr r3, 408568 <atan+0x308>)
  408400:	e9d3 2300 	ldrd	r2, r3, [r3]
  408404:	f000 f8da 	bl	4085bc <__adddf3>
  408408:	2200      	movs	r2, #0
  40840a:	4b61      	ldr	r3, [pc, #388]	; (408590 <atan+0x330>)
  40840c:	f000 fd18 	bl	408e40 <__aeabi_dcmpgt>
  408410:	2800      	cmp	r0, #0
  408412:	f43f af49 	beq.w	4082a8 <atan+0x48>
  408416:	462b      	mov	r3, r5
  408418:	4620      	mov	r0, r4
  40841a:	4619      	mov	r1, r3
  40841c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408420:	f000 f8c0 	bl	4085a4 <fabs>
  408424:	4b5b      	ldr	r3, [pc, #364]	; (408594 <atan+0x334>)
  408426:	429e      	cmp	r6, r3
  408428:	4604      	mov	r4, r0
  40842a:	460d      	mov	r5, r1
  40842c:	dc30      	bgt.n	408490 <atan+0x230>
  40842e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
  408432:	429e      	cmp	r6, r3
  408434:	dc55      	bgt.n	4084e2 <atan+0x282>
  408436:	4602      	mov	r2, r0
  408438:	460b      	mov	r3, r1
  40843a:	f000 f8bf 	bl	4085bc <__adddf3>
  40843e:	2200      	movs	r2, #0
  408440:	4b53      	ldr	r3, [pc, #332]	; (408590 <atan+0x330>)
  408442:	f000 f8b9 	bl	4085b8 <__aeabi_dsub>
  408446:	2200      	movs	r2, #0
  408448:	4606      	mov	r6, r0
  40844a:	460f      	mov	r7, r1
  40844c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  408450:	4620      	mov	r0, r4
  408452:	4629      	mov	r1, r5
  408454:	f000 f8b2 	bl	4085bc <__adddf3>
  408458:	4602      	mov	r2, r0
  40845a:	460b      	mov	r3, r1
  40845c:	4630      	mov	r0, r6
  40845e:	4639      	mov	r1, r7
  408460:	f000 fb88 	bl	408b74 <__aeabi_ddiv>
  408464:	f04f 0b00 	mov.w	fp, #0
  408468:	4604      	mov	r4, r0
  40846a:	460d      	mov	r5, r1
  40846c:	e71e      	b.n	4082ac <atan+0x4c>
  40846e:	4640      	mov	r0, r8
  408470:	4649      	mov	r1, r9
  408472:	f000 f8a3 	bl	4085bc <__adddf3>
  408476:	4622      	mov	r2, r4
  408478:	462b      	mov	r3, r5
  40847a:	f000 fa51 	bl	408920 <__aeabi_dmul>
  40847e:	460b      	mov	r3, r1
  408480:	4602      	mov	r2, r0
  408482:	4629      	mov	r1, r5
  408484:	4620      	mov	r0, r4
  408486:	f000 f897 	bl	4085b8 <__aeabi_dsub>
  40848a:	4604      	mov	r4, r0
  40848c:	460b      	mov	r3, r1
  40848e:	e6fe      	b.n	40828e <atan+0x2e>
  408490:	4b41      	ldr	r3, [pc, #260]	; (408598 <atan+0x338>)
  408492:	429e      	cmp	r6, r3
  408494:	dc1a      	bgt.n	4084cc <atan+0x26c>
  408496:	2200      	movs	r2, #0
  408498:	4b40      	ldr	r3, [pc, #256]	; (40859c <atan+0x33c>)
  40849a:	f000 f88d 	bl	4085b8 <__aeabi_dsub>
  40849e:	2200      	movs	r2, #0
  4084a0:	4606      	mov	r6, r0
  4084a2:	460f      	mov	r7, r1
  4084a4:	4b3d      	ldr	r3, [pc, #244]	; (40859c <atan+0x33c>)
  4084a6:	4620      	mov	r0, r4
  4084a8:	4629      	mov	r1, r5
  4084aa:	f000 fa39 	bl	408920 <__aeabi_dmul>
  4084ae:	2200      	movs	r2, #0
  4084b0:	4b37      	ldr	r3, [pc, #220]	; (408590 <atan+0x330>)
  4084b2:	f000 f883 	bl	4085bc <__adddf3>
  4084b6:	4602      	mov	r2, r0
  4084b8:	460b      	mov	r3, r1
  4084ba:	4630      	mov	r0, r6
  4084bc:	4639      	mov	r1, r7
  4084be:	f000 fb59 	bl	408b74 <__aeabi_ddiv>
  4084c2:	f04f 0b02 	mov.w	fp, #2
  4084c6:	4604      	mov	r4, r0
  4084c8:	460d      	mov	r5, r1
  4084ca:	e6ef      	b.n	4082ac <atan+0x4c>
  4084cc:	4602      	mov	r2, r0
  4084ce:	460b      	mov	r3, r1
  4084d0:	2000      	movs	r0, #0
  4084d2:	4933      	ldr	r1, [pc, #204]	; (4085a0 <atan+0x340>)
  4084d4:	f000 fb4e 	bl	408b74 <__aeabi_ddiv>
  4084d8:	f04f 0b03 	mov.w	fp, #3
  4084dc:	4604      	mov	r4, r0
  4084de:	460d      	mov	r5, r1
  4084e0:	e6e4      	b.n	4082ac <atan+0x4c>
  4084e2:	2200      	movs	r2, #0
  4084e4:	4b2a      	ldr	r3, [pc, #168]	; (408590 <atan+0x330>)
  4084e6:	f000 f867 	bl	4085b8 <__aeabi_dsub>
  4084ea:	2200      	movs	r2, #0
  4084ec:	4606      	mov	r6, r0
  4084ee:	460f      	mov	r7, r1
  4084f0:	4b27      	ldr	r3, [pc, #156]	; (408590 <atan+0x330>)
  4084f2:	4620      	mov	r0, r4
  4084f4:	4629      	mov	r1, r5
  4084f6:	f000 f861 	bl	4085bc <__adddf3>
  4084fa:	4602      	mov	r2, r0
  4084fc:	460b      	mov	r3, r1
  4084fe:	4630      	mov	r0, r6
  408500:	4639      	mov	r1, r7
  408502:	f000 fb37 	bl	408b74 <__aeabi_ddiv>
  408506:	f04f 0b01 	mov.w	fp, #1
  40850a:	4604      	mov	r4, r0
  40850c:	460d      	mov	r5, r1
  40850e:	e6cd      	b.n	4082ac <atan+0x4c>
  408510:	e322da11 	.word	0xe322da11
  408514:	3f90ad3a 	.word	0x3f90ad3a
  408518:	24760deb 	.word	0x24760deb
  40851c:	3fa97b4b 	.word	0x3fa97b4b
  408520:	a0d03d51 	.word	0xa0d03d51
  408524:	3fb10d66 	.word	0x3fb10d66
  408528:	c54c206e 	.word	0xc54c206e
  40852c:	3fb745cd 	.word	0x3fb745cd
  408530:	920083ff 	.word	0x920083ff
  408534:	3fc24924 	.word	0x3fc24924
  408538:	5555550d 	.word	0x5555550d
  40853c:	3fd55555 	.word	0x3fd55555
  408540:	2c6a6c2f 	.word	0x2c6a6c2f
  408544:	bfa2b444 	.word	0xbfa2b444
  408548:	52defd9a 	.word	0x52defd9a
  40854c:	3fadde2d 	.word	0x3fadde2d
  408550:	af749a6d 	.word	0xaf749a6d
  408554:	3fb3b0f2 	.word	0x3fb3b0f2
  408558:	fe231671 	.word	0xfe231671
  40855c:	3fbc71c6 	.word	0x3fbc71c6
  408560:	9998ebc4 	.word	0x9998ebc4
  408564:	3fc99999 	.word	0x3fc99999
  408568:	8800759c 	.word	0x8800759c
  40856c:	7e37e43c 	.word	0x7e37e43c
  408570:	440fffff 	.word	0x440fffff
  408574:	7ff00000 	.word	0x7ff00000
  408578:	3ff921fb 	.word	0x3ff921fb
  40857c:	bff921fb 	.word	0xbff921fb
  408580:	54442d18 	.word	0x54442d18
  408584:	3fdbffff 	.word	0x3fdbffff
  408588:	0040f378 	.word	0x0040f378
  40858c:	0040f398 	.word	0x0040f398
  408590:	3ff00000 	.word	0x3ff00000
  408594:	3ff2ffff 	.word	0x3ff2ffff
  408598:	40037fff 	.word	0x40037fff
  40859c:	3ff80000 	.word	0x3ff80000
  4085a0:	bff00000 	.word	0xbff00000

004085a4 <fabs>:
  4085a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4085a8:	4770      	bx	lr
  4085aa:	bf00      	nop

004085ac <matherr>:
  4085ac:	2000      	movs	r0, #0
  4085ae:	4770      	bx	lr

004085b0 <__aeabi_drsub>:
  4085b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4085b4:	e002      	b.n	4085bc <__adddf3>
  4085b6:	bf00      	nop

004085b8 <__aeabi_dsub>:
  4085b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004085bc <__adddf3>:
  4085bc:	b530      	push	{r4, r5, lr}
  4085be:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4085c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4085c6:	ea94 0f05 	teq	r4, r5
  4085ca:	bf08      	it	eq
  4085cc:	ea90 0f02 	teqeq	r0, r2
  4085d0:	bf1f      	itttt	ne
  4085d2:	ea54 0c00 	orrsne.w	ip, r4, r0
  4085d6:	ea55 0c02 	orrsne.w	ip, r5, r2
  4085da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4085de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4085e2:	f000 80e2 	beq.w	4087aa <__adddf3+0x1ee>
  4085e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4085ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4085ee:	bfb8      	it	lt
  4085f0:	426d      	neglt	r5, r5
  4085f2:	dd0c      	ble.n	40860e <__adddf3+0x52>
  4085f4:	442c      	add	r4, r5
  4085f6:	ea80 0202 	eor.w	r2, r0, r2
  4085fa:	ea81 0303 	eor.w	r3, r1, r3
  4085fe:	ea82 0000 	eor.w	r0, r2, r0
  408602:	ea83 0101 	eor.w	r1, r3, r1
  408606:	ea80 0202 	eor.w	r2, r0, r2
  40860a:	ea81 0303 	eor.w	r3, r1, r3
  40860e:	2d36      	cmp	r5, #54	; 0x36
  408610:	bf88      	it	hi
  408612:	bd30      	pophi	{r4, r5, pc}
  408614:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  408618:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40861c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  408620:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  408624:	d002      	beq.n	40862c <__adddf3+0x70>
  408626:	4240      	negs	r0, r0
  408628:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40862c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  408630:	ea4f 3303 	mov.w	r3, r3, lsl #12
  408634:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  408638:	d002      	beq.n	408640 <__adddf3+0x84>
  40863a:	4252      	negs	r2, r2
  40863c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  408640:	ea94 0f05 	teq	r4, r5
  408644:	f000 80a7 	beq.w	408796 <__adddf3+0x1da>
  408648:	f1a4 0401 	sub.w	r4, r4, #1
  40864c:	f1d5 0e20 	rsbs	lr, r5, #32
  408650:	db0d      	blt.n	40866e <__adddf3+0xb2>
  408652:	fa02 fc0e 	lsl.w	ip, r2, lr
  408656:	fa22 f205 	lsr.w	r2, r2, r5
  40865a:	1880      	adds	r0, r0, r2
  40865c:	f141 0100 	adc.w	r1, r1, #0
  408660:	fa03 f20e 	lsl.w	r2, r3, lr
  408664:	1880      	adds	r0, r0, r2
  408666:	fa43 f305 	asr.w	r3, r3, r5
  40866a:	4159      	adcs	r1, r3
  40866c:	e00e      	b.n	40868c <__adddf3+0xd0>
  40866e:	f1a5 0520 	sub.w	r5, r5, #32
  408672:	f10e 0e20 	add.w	lr, lr, #32
  408676:	2a01      	cmp	r2, #1
  408678:	fa03 fc0e 	lsl.w	ip, r3, lr
  40867c:	bf28      	it	cs
  40867e:	f04c 0c02 	orrcs.w	ip, ip, #2
  408682:	fa43 f305 	asr.w	r3, r3, r5
  408686:	18c0      	adds	r0, r0, r3
  408688:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40868c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408690:	d507      	bpl.n	4086a2 <__adddf3+0xe6>
  408692:	f04f 0e00 	mov.w	lr, #0
  408696:	f1dc 0c00 	rsbs	ip, ip, #0
  40869a:	eb7e 0000 	sbcs.w	r0, lr, r0
  40869e:	eb6e 0101 	sbc.w	r1, lr, r1
  4086a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4086a6:	d31b      	bcc.n	4086e0 <__adddf3+0x124>
  4086a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4086ac:	d30c      	bcc.n	4086c8 <__adddf3+0x10c>
  4086ae:	0849      	lsrs	r1, r1, #1
  4086b0:	ea5f 0030 	movs.w	r0, r0, rrx
  4086b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4086b8:	f104 0401 	add.w	r4, r4, #1
  4086bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4086c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4086c4:	f080 809a 	bcs.w	4087fc <__adddf3+0x240>
  4086c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4086cc:	bf08      	it	eq
  4086ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4086d2:	f150 0000 	adcs.w	r0, r0, #0
  4086d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4086da:	ea41 0105 	orr.w	r1, r1, r5
  4086de:	bd30      	pop	{r4, r5, pc}
  4086e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4086e4:	4140      	adcs	r0, r0
  4086e6:	eb41 0101 	adc.w	r1, r1, r1
  4086ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4086ee:	f1a4 0401 	sub.w	r4, r4, #1
  4086f2:	d1e9      	bne.n	4086c8 <__adddf3+0x10c>
  4086f4:	f091 0f00 	teq	r1, #0
  4086f8:	bf04      	itt	eq
  4086fa:	4601      	moveq	r1, r0
  4086fc:	2000      	moveq	r0, #0
  4086fe:	fab1 f381 	clz	r3, r1
  408702:	bf08      	it	eq
  408704:	3320      	addeq	r3, #32
  408706:	f1a3 030b 	sub.w	r3, r3, #11
  40870a:	f1b3 0220 	subs.w	r2, r3, #32
  40870e:	da0c      	bge.n	40872a <__adddf3+0x16e>
  408710:	320c      	adds	r2, #12
  408712:	dd08      	ble.n	408726 <__adddf3+0x16a>
  408714:	f102 0c14 	add.w	ip, r2, #20
  408718:	f1c2 020c 	rsb	r2, r2, #12
  40871c:	fa01 f00c 	lsl.w	r0, r1, ip
  408720:	fa21 f102 	lsr.w	r1, r1, r2
  408724:	e00c      	b.n	408740 <__adddf3+0x184>
  408726:	f102 0214 	add.w	r2, r2, #20
  40872a:	bfd8      	it	le
  40872c:	f1c2 0c20 	rsble	ip, r2, #32
  408730:	fa01 f102 	lsl.w	r1, r1, r2
  408734:	fa20 fc0c 	lsr.w	ip, r0, ip
  408738:	bfdc      	itt	le
  40873a:	ea41 010c 	orrle.w	r1, r1, ip
  40873e:	4090      	lslle	r0, r2
  408740:	1ae4      	subs	r4, r4, r3
  408742:	bfa2      	ittt	ge
  408744:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  408748:	4329      	orrge	r1, r5
  40874a:	bd30      	popge	{r4, r5, pc}
  40874c:	ea6f 0404 	mvn.w	r4, r4
  408750:	3c1f      	subs	r4, #31
  408752:	da1c      	bge.n	40878e <__adddf3+0x1d2>
  408754:	340c      	adds	r4, #12
  408756:	dc0e      	bgt.n	408776 <__adddf3+0x1ba>
  408758:	f104 0414 	add.w	r4, r4, #20
  40875c:	f1c4 0220 	rsb	r2, r4, #32
  408760:	fa20 f004 	lsr.w	r0, r0, r4
  408764:	fa01 f302 	lsl.w	r3, r1, r2
  408768:	ea40 0003 	orr.w	r0, r0, r3
  40876c:	fa21 f304 	lsr.w	r3, r1, r4
  408770:	ea45 0103 	orr.w	r1, r5, r3
  408774:	bd30      	pop	{r4, r5, pc}
  408776:	f1c4 040c 	rsb	r4, r4, #12
  40877a:	f1c4 0220 	rsb	r2, r4, #32
  40877e:	fa20 f002 	lsr.w	r0, r0, r2
  408782:	fa01 f304 	lsl.w	r3, r1, r4
  408786:	ea40 0003 	orr.w	r0, r0, r3
  40878a:	4629      	mov	r1, r5
  40878c:	bd30      	pop	{r4, r5, pc}
  40878e:	fa21 f004 	lsr.w	r0, r1, r4
  408792:	4629      	mov	r1, r5
  408794:	bd30      	pop	{r4, r5, pc}
  408796:	f094 0f00 	teq	r4, #0
  40879a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40879e:	bf06      	itte	eq
  4087a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4087a4:	3401      	addeq	r4, #1
  4087a6:	3d01      	subne	r5, #1
  4087a8:	e74e      	b.n	408648 <__adddf3+0x8c>
  4087aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4087ae:	bf18      	it	ne
  4087b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4087b4:	d029      	beq.n	40880a <__adddf3+0x24e>
  4087b6:	ea94 0f05 	teq	r4, r5
  4087ba:	bf08      	it	eq
  4087bc:	ea90 0f02 	teqeq	r0, r2
  4087c0:	d005      	beq.n	4087ce <__adddf3+0x212>
  4087c2:	ea54 0c00 	orrs.w	ip, r4, r0
  4087c6:	bf04      	itt	eq
  4087c8:	4619      	moveq	r1, r3
  4087ca:	4610      	moveq	r0, r2
  4087cc:	bd30      	pop	{r4, r5, pc}
  4087ce:	ea91 0f03 	teq	r1, r3
  4087d2:	bf1e      	ittt	ne
  4087d4:	2100      	movne	r1, #0
  4087d6:	2000      	movne	r0, #0
  4087d8:	bd30      	popne	{r4, r5, pc}
  4087da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4087de:	d105      	bne.n	4087ec <__adddf3+0x230>
  4087e0:	0040      	lsls	r0, r0, #1
  4087e2:	4149      	adcs	r1, r1
  4087e4:	bf28      	it	cs
  4087e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4087ea:	bd30      	pop	{r4, r5, pc}
  4087ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4087f0:	bf3c      	itt	cc
  4087f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4087f6:	bd30      	popcc	{r4, r5, pc}
  4087f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4087fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  408800:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  408804:	f04f 0000 	mov.w	r0, #0
  408808:	bd30      	pop	{r4, r5, pc}
  40880a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40880e:	bf1a      	itte	ne
  408810:	4619      	movne	r1, r3
  408812:	4610      	movne	r0, r2
  408814:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  408818:	bf1c      	itt	ne
  40881a:	460b      	movne	r3, r1
  40881c:	4602      	movne	r2, r0
  40881e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  408822:	bf06      	itte	eq
  408824:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  408828:	ea91 0f03 	teqeq	r1, r3
  40882c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  408830:	bd30      	pop	{r4, r5, pc}
  408832:	bf00      	nop

00408834 <__aeabi_ui2d>:
  408834:	f090 0f00 	teq	r0, #0
  408838:	bf04      	itt	eq
  40883a:	2100      	moveq	r1, #0
  40883c:	4770      	bxeq	lr
  40883e:	b530      	push	{r4, r5, lr}
  408840:	f44f 6480 	mov.w	r4, #1024	; 0x400
  408844:	f104 0432 	add.w	r4, r4, #50	; 0x32
  408848:	f04f 0500 	mov.w	r5, #0
  40884c:	f04f 0100 	mov.w	r1, #0
  408850:	e750      	b.n	4086f4 <__adddf3+0x138>
  408852:	bf00      	nop

00408854 <__aeabi_i2d>:
  408854:	f090 0f00 	teq	r0, #0
  408858:	bf04      	itt	eq
  40885a:	2100      	moveq	r1, #0
  40885c:	4770      	bxeq	lr
  40885e:	b530      	push	{r4, r5, lr}
  408860:	f44f 6480 	mov.w	r4, #1024	; 0x400
  408864:	f104 0432 	add.w	r4, r4, #50	; 0x32
  408868:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40886c:	bf48      	it	mi
  40886e:	4240      	negmi	r0, r0
  408870:	f04f 0100 	mov.w	r1, #0
  408874:	e73e      	b.n	4086f4 <__adddf3+0x138>
  408876:	bf00      	nop

00408878 <__aeabi_f2d>:
  408878:	0042      	lsls	r2, r0, #1
  40887a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40887e:	ea4f 0131 	mov.w	r1, r1, rrx
  408882:	ea4f 7002 	mov.w	r0, r2, lsl #28
  408886:	bf1f      	itttt	ne
  408888:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40888c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  408890:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  408894:	4770      	bxne	lr
  408896:	f092 0f00 	teq	r2, #0
  40889a:	bf14      	ite	ne
  40889c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4088a0:	4770      	bxeq	lr
  4088a2:	b530      	push	{r4, r5, lr}
  4088a4:	f44f 7460 	mov.w	r4, #896	; 0x380
  4088a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4088ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4088b0:	e720      	b.n	4086f4 <__adddf3+0x138>
  4088b2:	bf00      	nop

004088b4 <__aeabi_ul2d>:
  4088b4:	ea50 0201 	orrs.w	r2, r0, r1
  4088b8:	bf08      	it	eq
  4088ba:	4770      	bxeq	lr
  4088bc:	b530      	push	{r4, r5, lr}
  4088be:	f04f 0500 	mov.w	r5, #0
  4088c2:	e00a      	b.n	4088da <__aeabi_l2d+0x16>

004088c4 <__aeabi_l2d>:
  4088c4:	ea50 0201 	orrs.w	r2, r0, r1
  4088c8:	bf08      	it	eq
  4088ca:	4770      	bxeq	lr
  4088cc:	b530      	push	{r4, r5, lr}
  4088ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4088d2:	d502      	bpl.n	4088da <__aeabi_l2d+0x16>
  4088d4:	4240      	negs	r0, r0
  4088d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4088da:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4088de:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4088e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4088e6:	f43f aedc 	beq.w	4086a2 <__adddf3+0xe6>
  4088ea:	f04f 0203 	mov.w	r2, #3
  4088ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4088f2:	bf18      	it	ne
  4088f4:	3203      	addne	r2, #3
  4088f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4088fa:	bf18      	it	ne
  4088fc:	3203      	addne	r2, #3
  4088fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  408902:	f1c2 0320 	rsb	r3, r2, #32
  408906:	fa00 fc03 	lsl.w	ip, r0, r3
  40890a:	fa20 f002 	lsr.w	r0, r0, r2
  40890e:	fa01 fe03 	lsl.w	lr, r1, r3
  408912:	ea40 000e 	orr.w	r0, r0, lr
  408916:	fa21 f102 	lsr.w	r1, r1, r2
  40891a:	4414      	add	r4, r2
  40891c:	e6c1      	b.n	4086a2 <__adddf3+0xe6>
  40891e:	bf00      	nop

00408920 <__aeabi_dmul>:
  408920:	b570      	push	{r4, r5, r6, lr}
  408922:	f04f 0cff 	mov.w	ip, #255	; 0xff
  408926:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40892a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40892e:	bf1d      	ittte	ne
  408930:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  408934:	ea94 0f0c 	teqne	r4, ip
  408938:	ea95 0f0c 	teqne	r5, ip
  40893c:	f000 f8de 	bleq	408afc <__aeabi_dmul+0x1dc>
  408940:	442c      	add	r4, r5
  408942:	ea81 0603 	eor.w	r6, r1, r3
  408946:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40894a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40894e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  408952:	bf18      	it	ne
  408954:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  408958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40895c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  408960:	d038      	beq.n	4089d4 <__aeabi_dmul+0xb4>
  408962:	fba0 ce02 	umull	ip, lr, r0, r2
  408966:	f04f 0500 	mov.w	r5, #0
  40896a:	fbe1 e502 	umlal	lr, r5, r1, r2
  40896e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  408972:	fbe0 e503 	umlal	lr, r5, r0, r3
  408976:	f04f 0600 	mov.w	r6, #0
  40897a:	fbe1 5603 	umlal	r5, r6, r1, r3
  40897e:	f09c 0f00 	teq	ip, #0
  408982:	bf18      	it	ne
  408984:	f04e 0e01 	orrne.w	lr, lr, #1
  408988:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40898c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  408990:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  408994:	d204      	bcs.n	4089a0 <__aeabi_dmul+0x80>
  408996:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40899a:	416d      	adcs	r5, r5
  40899c:	eb46 0606 	adc.w	r6, r6, r6
  4089a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4089a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4089a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4089ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4089b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4089b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4089b8:	bf88      	it	hi
  4089ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4089be:	d81e      	bhi.n	4089fe <__aeabi_dmul+0xde>
  4089c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4089c4:	bf08      	it	eq
  4089c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4089ca:	f150 0000 	adcs.w	r0, r0, #0
  4089ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4089d2:	bd70      	pop	{r4, r5, r6, pc}
  4089d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4089d8:	ea46 0101 	orr.w	r1, r6, r1
  4089dc:	ea40 0002 	orr.w	r0, r0, r2
  4089e0:	ea81 0103 	eor.w	r1, r1, r3
  4089e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4089e8:	bfc2      	ittt	gt
  4089ea:	ebd4 050c 	rsbsgt	r5, r4, ip
  4089ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4089f2:	bd70      	popgt	{r4, r5, r6, pc}
  4089f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4089f8:	f04f 0e00 	mov.w	lr, #0
  4089fc:	3c01      	subs	r4, #1
  4089fe:	f300 80ab 	bgt.w	408b58 <__aeabi_dmul+0x238>
  408a02:	f114 0f36 	cmn.w	r4, #54	; 0x36
  408a06:	bfde      	ittt	le
  408a08:	2000      	movle	r0, #0
  408a0a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  408a0e:	bd70      	pople	{r4, r5, r6, pc}
  408a10:	f1c4 0400 	rsb	r4, r4, #0
  408a14:	3c20      	subs	r4, #32
  408a16:	da35      	bge.n	408a84 <__aeabi_dmul+0x164>
  408a18:	340c      	adds	r4, #12
  408a1a:	dc1b      	bgt.n	408a54 <__aeabi_dmul+0x134>
  408a1c:	f104 0414 	add.w	r4, r4, #20
  408a20:	f1c4 0520 	rsb	r5, r4, #32
  408a24:	fa00 f305 	lsl.w	r3, r0, r5
  408a28:	fa20 f004 	lsr.w	r0, r0, r4
  408a2c:	fa01 f205 	lsl.w	r2, r1, r5
  408a30:	ea40 0002 	orr.w	r0, r0, r2
  408a34:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  408a38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  408a3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  408a40:	fa21 f604 	lsr.w	r6, r1, r4
  408a44:	eb42 0106 	adc.w	r1, r2, r6
  408a48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408a4c:	bf08      	it	eq
  408a4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408a52:	bd70      	pop	{r4, r5, r6, pc}
  408a54:	f1c4 040c 	rsb	r4, r4, #12
  408a58:	f1c4 0520 	rsb	r5, r4, #32
  408a5c:	fa00 f304 	lsl.w	r3, r0, r4
  408a60:	fa20 f005 	lsr.w	r0, r0, r5
  408a64:	fa01 f204 	lsl.w	r2, r1, r4
  408a68:	ea40 0002 	orr.w	r0, r0, r2
  408a6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408a70:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  408a74:	f141 0100 	adc.w	r1, r1, #0
  408a78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408a7c:	bf08      	it	eq
  408a7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408a82:	bd70      	pop	{r4, r5, r6, pc}
  408a84:	f1c4 0520 	rsb	r5, r4, #32
  408a88:	fa00 f205 	lsl.w	r2, r0, r5
  408a8c:	ea4e 0e02 	orr.w	lr, lr, r2
  408a90:	fa20 f304 	lsr.w	r3, r0, r4
  408a94:	fa01 f205 	lsl.w	r2, r1, r5
  408a98:	ea43 0302 	orr.w	r3, r3, r2
  408a9c:	fa21 f004 	lsr.w	r0, r1, r4
  408aa0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408aa4:	fa21 f204 	lsr.w	r2, r1, r4
  408aa8:	ea20 0002 	bic.w	r0, r0, r2
  408aac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  408ab0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408ab4:	bf08      	it	eq
  408ab6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408aba:	bd70      	pop	{r4, r5, r6, pc}
  408abc:	f094 0f00 	teq	r4, #0
  408ac0:	d10f      	bne.n	408ae2 <__aeabi_dmul+0x1c2>
  408ac2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  408ac6:	0040      	lsls	r0, r0, #1
  408ac8:	eb41 0101 	adc.w	r1, r1, r1
  408acc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408ad0:	bf08      	it	eq
  408ad2:	3c01      	subeq	r4, #1
  408ad4:	d0f7      	beq.n	408ac6 <__aeabi_dmul+0x1a6>
  408ad6:	ea41 0106 	orr.w	r1, r1, r6
  408ada:	f095 0f00 	teq	r5, #0
  408ade:	bf18      	it	ne
  408ae0:	4770      	bxne	lr
  408ae2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  408ae6:	0052      	lsls	r2, r2, #1
  408ae8:	eb43 0303 	adc.w	r3, r3, r3
  408aec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  408af0:	bf08      	it	eq
  408af2:	3d01      	subeq	r5, #1
  408af4:	d0f7      	beq.n	408ae6 <__aeabi_dmul+0x1c6>
  408af6:	ea43 0306 	orr.w	r3, r3, r6
  408afa:	4770      	bx	lr
  408afc:	ea94 0f0c 	teq	r4, ip
  408b00:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408b04:	bf18      	it	ne
  408b06:	ea95 0f0c 	teqne	r5, ip
  408b0a:	d00c      	beq.n	408b26 <__aeabi_dmul+0x206>
  408b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408b10:	bf18      	it	ne
  408b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408b16:	d1d1      	bne.n	408abc <__aeabi_dmul+0x19c>
  408b18:	ea81 0103 	eor.w	r1, r1, r3
  408b1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408b20:	f04f 0000 	mov.w	r0, #0
  408b24:	bd70      	pop	{r4, r5, r6, pc}
  408b26:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408b2a:	bf06      	itte	eq
  408b2c:	4610      	moveq	r0, r2
  408b2e:	4619      	moveq	r1, r3
  408b30:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408b34:	d019      	beq.n	408b6a <__aeabi_dmul+0x24a>
  408b36:	ea94 0f0c 	teq	r4, ip
  408b3a:	d102      	bne.n	408b42 <__aeabi_dmul+0x222>
  408b3c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  408b40:	d113      	bne.n	408b6a <__aeabi_dmul+0x24a>
  408b42:	ea95 0f0c 	teq	r5, ip
  408b46:	d105      	bne.n	408b54 <__aeabi_dmul+0x234>
  408b48:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  408b4c:	bf1c      	itt	ne
  408b4e:	4610      	movne	r0, r2
  408b50:	4619      	movne	r1, r3
  408b52:	d10a      	bne.n	408b6a <__aeabi_dmul+0x24a>
  408b54:	ea81 0103 	eor.w	r1, r1, r3
  408b58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408b5c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  408b60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  408b64:	f04f 0000 	mov.w	r0, #0
  408b68:	bd70      	pop	{r4, r5, r6, pc}
  408b6a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  408b6e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  408b72:	bd70      	pop	{r4, r5, r6, pc}

00408b74 <__aeabi_ddiv>:
  408b74:	b570      	push	{r4, r5, r6, lr}
  408b76:	f04f 0cff 	mov.w	ip, #255	; 0xff
  408b7a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  408b7e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  408b82:	bf1d      	ittte	ne
  408b84:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  408b88:	ea94 0f0c 	teqne	r4, ip
  408b8c:	ea95 0f0c 	teqne	r5, ip
  408b90:	f000 f8a7 	bleq	408ce2 <__aeabi_ddiv+0x16e>
  408b94:	eba4 0405 	sub.w	r4, r4, r5
  408b98:	ea81 0e03 	eor.w	lr, r1, r3
  408b9c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408ba0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  408ba4:	f000 8088 	beq.w	408cb8 <__aeabi_ddiv+0x144>
  408ba8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  408bac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  408bb0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  408bb4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  408bb8:	ea4f 2202 	mov.w	r2, r2, lsl #8
  408bbc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  408bc0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  408bc4:	ea4f 2600 	mov.w	r6, r0, lsl #8
  408bc8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  408bcc:	429d      	cmp	r5, r3
  408bce:	bf08      	it	eq
  408bd0:	4296      	cmpeq	r6, r2
  408bd2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  408bd6:	f504 7440 	add.w	r4, r4, #768	; 0x300
  408bda:	d202      	bcs.n	408be2 <__aeabi_ddiv+0x6e>
  408bdc:	085b      	lsrs	r3, r3, #1
  408bde:	ea4f 0232 	mov.w	r2, r2, rrx
  408be2:	1ab6      	subs	r6, r6, r2
  408be4:	eb65 0503 	sbc.w	r5, r5, r3
  408be8:	085b      	lsrs	r3, r3, #1
  408bea:	ea4f 0232 	mov.w	r2, r2, rrx
  408bee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  408bf2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  408bf6:	ebb6 0e02 	subs.w	lr, r6, r2
  408bfa:	eb75 0e03 	sbcs.w	lr, r5, r3
  408bfe:	bf22      	ittt	cs
  408c00:	1ab6      	subcs	r6, r6, r2
  408c02:	4675      	movcs	r5, lr
  408c04:	ea40 000c 	orrcs.w	r0, r0, ip
  408c08:	085b      	lsrs	r3, r3, #1
  408c0a:	ea4f 0232 	mov.w	r2, r2, rrx
  408c0e:	ebb6 0e02 	subs.w	lr, r6, r2
  408c12:	eb75 0e03 	sbcs.w	lr, r5, r3
  408c16:	bf22      	ittt	cs
  408c18:	1ab6      	subcs	r6, r6, r2
  408c1a:	4675      	movcs	r5, lr
  408c1c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  408c20:	085b      	lsrs	r3, r3, #1
  408c22:	ea4f 0232 	mov.w	r2, r2, rrx
  408c26:	ebb6 0e02 	subs.w	lr, r6, r2
  408c2a:	eb75 0e03 	sbcs.w	lr, r5, r3
  408c2e:	bf22      	ittt	cs
  408c30:	1ab6      	subcs	r6, r6, r2
  408c32:	4675      	movcs	r5, lr
  408c34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  408c38:	085b      	lsrs	r3, r3, #1
  408c3a:	ea4f 0232 	mov.w	r2, r2, rrx
  408c3e:	ebb6 0e02 	subs.w	lr, r6, r2
  408c42:	eb75 0e03 	sbcs.w	lr, r5, r3
  408c46:	bf22      	ittt	cs
  408c48:	1ab6      	subcs	r6, r6, r2
  408c4a:	4675      	movcs	r5, lr
  408c4c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  408c50:	ea55 0e06 	orrs.w	lr, r5, r6
  408c54:	d018      	beq.n	408c88 <__aeabi_ddiv+0x114>
  408c56:	ea4f 1505 	mov.w	r5, r5, lsl #4
  408c5a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  408c5e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  408c62:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  408c66:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  408c6a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  408c6e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  408c72:	d1c0      	bne.n	408bf6 <__aeabi_ddiv+0x82>
  408c74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408c78:	d10b      	bne.n	408c92 <__aeabi_ddiv+0x11e>
  408c7a:	ea41 0100 	orr.w	r1, r1, r0
  408c7e:	f04f 0000 	mov.w	r0, #0
  408c82:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  408c86:	e7b6      	b.n	408bf6 <__aeabi_ddiv+0x82>
  408c88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408c8c:	bf04      	itt	eq
  408c8e:	4301      	orreq	r1, r0
  408c90:	2000      	moveq	r0, #0
  408c92:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  408c96:	bf88      	it	hi
  408c98:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408c9c:	f63f aeaf 	bhi.w	4089fe <__aeabi_dmul+0xde>
  408ca0:	ebb5 0c03 	subs.w	ip, r5, r3
  408ca4:	bf04      	itt	eq
  408ca6:	ebb6 0c02 	subseq.w	ip, r6, r2
  408caa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  408cae:	f150 0000 	adcs.w	r0, r0, #0
  408cb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408cb6:	bd70      	pop	{r4, r5, r6, pc}
  408cb8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  408cbc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  408cc0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  408cc4:	bfc2      	ittt	gt
  408cc6:	ebd4 050c 	rsbsgt	r5, r4, ip
  408cca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  408cce:	bd70      	popgt	{r4, r5, r6, pc}
  408cd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408cd4:	f04f 0e00 	mov.w	lr, #0
  408cd8:	3c01      	subs	r4, #1
  408cda:	e690      	b.n	4089fe <__aeabi_dmul+0xde>
  408cdc:	ea45 0e06 	orr.w	lr, r5, r6
  408ce0:	e68d      	b.n	4089fe <__aeabi_dmul+0xde>
  408ce2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408ce6:	ea94 0f0c 	teq	r4, ip
  408cea:	bf08      	it	eq
  408cec:	ea95 0f0c 	teqeq	r5, ip
  408cf0:	f43f af3b 	beq.w	408b6a <__aeabi_dmul+0x24a>
  408cf4:	ea94 0f0c 	teq	r4, ip
  408cf8:	d10a      	bne.n	408d10 <__aeabi_ddiv+0x19c>
  408cfa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  408cfe:	f47f af34 	bne.w	408b6a <__aeabi_dmul+0x24a>
  408d02:	ea95 0f0c 	teq	r5, ip
  408d06:	f47f af25 	bne.w	408b54 <__aeabi_dmul+0x234>
  408d0a:	4610      	mov	r0, r2
  408d0c:	4619      	mov	r1, r3
  408d0e:	e72c      	b.n	408b6a <__aeabi_dmul+0x24a>
  408d10:	ea95 0f0c 	teq	r5, ip
  408d14:	d106      	bne.n	408d24 <__aeabi_ddiv+0x1b0>
  408d16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408d1a:	f43f aefd 	beq.w	408b18 <__aeabi_dmul+0x1f8>
  408d1e:	4610      	mov	r0, r2
  408d20:	4619      	mov	r1, r3
  408d22:	e722      	b.n	408b6a <__aeabi_dmul+0x24a>
  408d24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408d28:	bf18      	it	ne
  408d2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408d2e:	f47f aec5 	bne.w	408abc <__aeabi_dmul+0x19c>
  408d32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  408d36:	f47f af0d 	bne.w	408b54 <__aeabi_dmul+0x234>
  408d3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  408d3e:	f47f aeeb 	bne.w	408b18 <__aeabi_dmul+0x1f8>
  408d42:	e712      	b.n	408b6a <__aeabi_dmul+0x24a>

00408d44 <__gedf2>:
  408d44:	f04f 3cff 	mov.w	ip, #4294967295
  408d48:	e006      	b.n	408d58 <__cmpdf2+0x4>
  408d4a:	bf00      	nop

00408d4c <__ledf2>:
  408d4c:	f04f 0c01 	mov.w	ip, #1
  408d50:	e002      	b.n	408d58 <__cmpdf2+0x4>
  408d52:	bf00      	nop

00408d54 <__cmpdf2>:
  408d54:	f04f 0c01 	mov.w	ip, #1
  408d58:	f84d cd04 	str.w	ip, [sp, #-4]!
  408d5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408d60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408d64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408d68:	bf18      	it	ne
  408d6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  408d6e:	d01b      	beq.n	408da8 <__cmpdf2+0x54>
  408d70:	b001      	add	sp, #4
  408d72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  408d76:	bf0c      	ite	eq
  408d78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  408d7c:	ea91 0f03 	teqne	r1, r3
  408d80:	bf02      	ittt	eq
  408d82:	ea90 0f02 	teqeq	r0, r2
  408d86:	2000      	moveq	r0, #0
  408d88:	4770      	bxeq	lr
  408d8a:	f110 0f00 	cmn.w	r0, #0
  408d8e:	ea91 0f03 	teq	r1, r3
  408d92:	bf58      	it	pl
  408d94:	4299      	cmppl	r1, r3
  408d96:	bf08      	it	eq
  408d98:	4290      	cmpeq	r0, r2
  408d9a:	bf2c      	ite	cs
  408d9c:	17d8      	asrcs	r0, r3, #31
  408d9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  408da2:	f040 0001 	orr.w	r0, r0, #1
  408da6:	4770      	bx	lr
  408da8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408dac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408db0:	d102      	bne.n	408db8 <__cmpdf2+0x64>
  408db2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408db6:	d107      	bne.n	408dc8 <__cmpdf2+0x74>
  408db8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408dbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408dc0:	d1d6      	bne.n	408d70 <__cmpdf2+0x1c>
  408dc2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408dc6:	d0d3      	beq.n	408d70 <__cmpdf2+0x1c>
  408dc8:	f85d 0b04 	ldr.w	r0, [sp], #4
  408dcc:	4770      	bx	lr
  408dce:	bf00      	nop

00408dd0 <__aeabi_cdrcmple>:
  408dd0:	4684      	mov	ip, r0
  408dd2:	4610      	mov	r0, r2
  408dd4:	4662      	mov	r2, ip
  408dd6:	468c      	mov	ip, r1
  408dd8:	4619      	mov	r1, r3
  408dda:	4663      	mov	r3, ip
  408ddc:	e000      	b.n	408de0 <__aeabi_cdcmpeq>
  408dde:	bf00      	nop

00408de0 <__aeabi_cdcmpeq>:
  408de0:	b501      	push	{r0, lr}
  408de2:	f7ff ffb7 	bl	408d54 <__cmpdf2>
  408de6:	2800      	cmp	r0, #0
  408de8:	bf48      	it	mi
  408dea:	f110 0f00 	cmnmi.w	r0, #0
  408dee:	bd01      	pop	{r0, pc}

00408df0 <__aeabi_dcmpeq>:
  408df0:	f84d ed08 	str.w	lr, [sp, #-8]!
  408df4:	f7ff fff4 	bl	408de0 <__aeabi_cdcmpeq>
  408df8:	bf0c      	ite	eq
  408dfa:	2001      	moveq	r0, #1
  408dfc:	2000      	movne	r0, #0
  408dfe:	f85d fb08 	ldr.w	pc, [sp], #8
  408e02:	bf00      	nop

00408e04 <__aeabi_dcmplt>:
  408e04:	f84d ed08 	str.w	lr, [sp, #-8]!
  408e08:	f7ff ffea 	bl	408de0 <__aeabi_cdcmpeq>
  408e0c:	bf34      	ite	cc
  408e0e:	2001      	movcc	r0, #1
  408e10:	2000      	movcs	r0, #0
  408e12:	f85d fb08 	ldr.w	pc, [sp], #8
  408e16:	bf00      	nop

00408e18 <__aeabi_dcmple>:
  408e18:	f84d ed08 	str.w	lr, [sp, #-8]!
  408e1c:	f7ff ffe0 	bl	408de0 <__aeabi_cdcmpeq>
  408e20:	bf94      	ite	ls
  408e22:	2001      	movls	r0, #1
  408e24:	2000      	movhi	r0, #0
  408e26:	f85d fb08 	ldr.w	pc, [sp], #8
  408e2a:	bf00      	nop

00408e2c <__aeabi_dcmpge>:
  408e2c:	f84d ed08 	str.w	lr, [sp, #-8]!
  408e30:	f7ff ffce 	bl	408dd0 <__aeabi_cdrcmple>
  408e34:	bf94      	ite	ls
  408e36:	2001      	movls	r0, #1
  408e38:	2000      	movhi	r0, #0
  408e3a:	f85d fb08 	ldr.w	pc, [sp], #8
  408e3e:	bf00      	nop

00408e40 <__aeabi_dcmpgt>:
  408e40:	f84d ed08 	str.w	lr, [sp, #-8]!
  408e44:	f7ff ffc4 	bl	408dd0 <__aeabi_cdrcmple>
  408e48:	bf34      	ite	cc
  408e4a:	2001      	movcc	r0, #1
  408e4c:	2000      	movcs	r0, #0
  408e4e:	f85d fb08 	ldr.w	pc, [sp], #8
  408e52:	bf00      	nop

00408e54 <__aeabi_dcmpun>:
  408e54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408e58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408e5c:	d102      	bne.n	408e64 <__aeabi_dcmpun+0x10>
  408e5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  408e62:	d10a      	bne.n	408e7a <__aeabi_dcmpun+0x26>
  408e64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408e68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408e6c:	d102      	bne.n	408e74 <__aeabi_dcmpun+0x20>
  408e6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408e72:	d102      	bne.n	408e7a <__aeabi_dcmpun+0x26>
  408e74:	f04f 0000 	mov.w	r0, #0
  408e78:	4770      	bx	lr
  408e7a:	f04f 0001 	mov.w	r0, #1
  408e7e:	4770      	bx	lr

00408e80 <__aeabi_d2iz>:
  408e80:	ea4f 0241 	mov.w	r2, r1, lsl #1
  408e84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  408e88:	d215      	bcs.n	408eb6 <__aeabi_d2iz+0x36>
  408e8a:	d511      	bpl.n	408eb0 <__aeabi_d2iz+0x30>
  408e8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  408e90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  408e94:	d912      	bls.n	408ebc <__aeabi_d2iz+0x3c>
  408e96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  408e9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  408e9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  408ea2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  408ea6:	fa23 f002 	lsr.w	r0, r3, r2
  408eaa:	bf18      	it	ne
  408eac:	4240      	negne	r0, r0
  408eae:	4770      	bx	lr
  408eb0:	f04f 0000 	mov.w	r0, #0
  408eb4:	4770      	bx	lr
  408eb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  408eba:	d105      	bne.n	408ec8 <__aeabi_d2iz+0x48>
  408ebc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  408ec0:	bf08      	it	eq
  408ec2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  408ec6:	4770      	bx	lr
  408ec8:	f04f 0000 	mov.w	r0, #0
  408ecc:	4770      	bx	lr
  408ece:	bf00      	nop

00408ed0 <__aeabi_d2f>:
  408ed0:	ea4f 0241 	mov.w	r2, r1, lsl #1
  408ed4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  408ed8:	bf24      	itt	cs
  408eda:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  408ede:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  408ee2:	d90d      	bls.n	408f00 <__aeabi_d2f+0x30>
  408ee4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  408ee8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  408eec:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  408ef0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  408ef4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  408ef8:	bf08      	it	eq
  408efa:	f020 0001 	biceq.w	r0, r0, #1
  408efe:	4770      	bx	lr
  408f00:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  408f04:	d121      	bne.n	408f4a <__aeabi_d2f+0x7a>
  408f06:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  408f0a:	bfbc      	itt	lt
  408f0c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  408f10:	4770      	bxlt	lr
  408f12:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408f16:	ea4f 5252 	mov.w	r2, r2, lsr #21
  408f1a:	f1c2 0218 	rsb	r2, r2, #24
  408f1e:	f1c2 0c20 	rsb	ip, r2, #32
  408f22:	fa10 f30c 	lsls.w	r3, r0, ip
  408f26:	fa20 f002 	lsr.w	r0, r0, r2
  408f2a:	bf18      	it	ne
  408f2c:	f040 0001 	orrne.w	r0, r0, #1
  408f30:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  408f34:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  408f38:	fa03 fc0c 	lsl.w	ip, r3, ip
  408f3c:	ea40 000c 	orr.w	r0, r0, ip
  408f40:	fa23 f302 	lsr.w	r3, r3, r2
  408f44:	ea4f 0343 	mov.w	r3, r3, lsl #1
  408f48:	e7cc      	b.n	408ee4 <__aeabi_d2f+0x14>
  408f4a:	ea7f 5362 	mvns.w	r3, r2, asr #21
  408f4e:	d107      	bne.n	408f60 <__aeabi_d2f+0x90>
  408f50:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  408f54:	bf1e      	ittt	ne
  408f56:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  408f5a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  408f5e:	4770      	bxne	lr
  408f60:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  408f64:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  408f68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  408f6c:	4770      	bx	lr
  408f6e:	bf00      	nop

00408f70 <__aeabi_frsub>:
  408f70:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  408f74:	e002      	b.n	408f7c <__addsf3>
  408f76:	bf00      	nop

00408f78 <__aeabi_fsub>:
  408f78:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00408f7c <__addsf3>:
  408f7c:	0042      	lsls	r2, r0, #1
  408f7e:	bf1f      	itttt	ne
  408f80:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  408f84:	ea92 0f03 	teqne	r2, r3
  408f88:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  408f8c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  408f90:	d06a      	beq.n	409068 <__addsf3+0xec>
  408f92:	ea4f 6212 	mov.w	r2, r2, lsr #24
  408f96:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  408f9a:	bfc1      	itttt	gt
  408f9c:	18d2      	addgt	r2, r2, r3
  408f9e:	4041      	eorgt	r1, r0
  408fa0:	4048      	eorgt	r0, r1
  408fa2:	4041      	eorgt	r1, r0
  408fa4:	bfb8      	it	lt
  408fa6:	425b      	neglt	r3, r3
  408fa8:	2b19      	cmp	r3, #25
  408faa:	bf88      	it	hi
  408fac:	4770      	bxhi	lr
  408fae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  408fb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  408fb6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  408fba:	bf18      	it	ne
  408fbc:	4240      	negne	r0, r0
  408fbe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  408fc2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  408fc6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  408fca:	bf18      	it	ne
  408fcc:	4249      	negne	r1, r1
  408fce:	ea92 0f03 	teq	r2, r3
  408fd2:	d03f      	beq.n	409054 <__addsf3+0xd8>
  408fd4:	f1a2 0201 	sub.w	r2, r2, #1
  408fd8:	fa41 fc03 	asr.w	ip, r1, r3
  408fdc:	eb10 000c 	adds.w	r0, r0, ip
  408fe0:	f1c3 0320 	rsb	r3, r3, #32
  408fe4:	fa01 f103 	lsl.w	r1, r1, r3
  408fe8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  408fec:	d502      	bpl.n	408ff4 <__addsf3+0x78>
  408fee:	4249      	negs	r1, r1
  408ff0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  408ff4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  408ff8:	d313      	bcc.n	409022 <__addsf3+0xa6>
  408ffa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  408ffe:	d306      	bcc.n	40900e <__addsf3+0x92>
  409000:	0840      	lsrs	r0, r0, #1
  409002:	ea4f 0131 	mov.w	r1, r1, rrx
  409006:	f102 0201 	add.w	r2, r2, #1
  40900a:	2afe      	cmp	r2, #254	; 0xfe
  40900c:	d251      	bcs.n	4090b2 <__addsf3+0x136>
  40900e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  409012:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  409016:	bf08      	it	eq
  409018:	f020 0001 	biceq.w	r0, r0, #1
  40901c:	ea40 0003 	orr.w	r0, r0, r3
  409020:	4770      	bx	lr
  409022:	0049      	lsls	r1, r1, #1
  409024:	eb40 0000 	adc.w	r0, r0, r0
  409028:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  40902c:	f1a2 0201 	sub.w	r2, r2, #1
  409030:	d1ed      	bne.n	40900e <__addsf3+0x92>
  409032:	fab0 fc80 	clz	ip, r0
  409036:	f1ac 0c08 	sub.w	ip, ip, #8
  40903a:	ebb2 020c 	subs.w	r2, r2, ip
  40903e:	fa00 f00c 	lsl.w	r0, r0, ip
  409042:	bfaa      	itet	ge
  409044:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  409048:	4252      	neglt	r2, r2
  40904a:	4318      	orrge	r0, r3
  40904c:	bfbc      	itt	lt
  40904e:	40d0      	lsrlt	r0, r2
  409050:	4318      	orrlt	r0, r3
  409052:	4770      	bx	lr
  409054:	f092 0f00 	teq	r2, #0
  409058:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  40905c:	bf06      	itte	eq
  40905e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  409062:	3201      	addeq	r2, #1
  409064:	3b01      	subne	r3, #1
  409066:	e7b5      	b.n	408fd4 <__addsf3+0x58>
  409068:	ea4f 0341 	mov.w	r3, r1, lsl #1
  40906c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  409070:	bf18      	it	ne
  409072:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  409076:	d021      	beq.n	4090bc <__addsf3+0x140>
  409078:	ea92 0f03 	teq	r2, r3
  40907c:	d004      	beq.n	409088 <__addsf3+0x10c>
  40907e:	f092 0f00 	teq	r2, #0
  409082:	bf08      	it	eq
  409084:	4608      	moveq	r0, r1
  409086:	4770      	bx	lr
  409088:	ea90 0f01 	teq	r0, r1
  40908c:	bf1c      	itt	ne
  40908e:	2000      	movne	r0, #0
  409090:	4770      	bxne	lr
  409092:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  409096:	d104      	bne.n	4090a2 <__addsf3+0x126>
  409098:	0040      	lsls	r0, r0, #1
  40909a:	bf28      	it	cs
  40909c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  4090a0:	4770      	bx	lr
  4090a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  4090a6:	bf3c      	itt	cc
  4090a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  4090ac:	4770      	bxcc	lr
  4090ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  4090b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  4090b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4090ba:	4770      	bx	lr
  4090bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
  4090c0:	bf16      	itet	ne
  4090c2:	4608      	movne	r0, r1
  4090c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  4090c8:	4601      	movne	r1, r0
  4090ca:	0242      	lsls	r2, r0, #9
  4090cc:	bf06      	itte	eq
  4090ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  4090d2:	ea90 0f01 	teqeq	r0, r1
  4090d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  4090da:	4770      	bx	lr

004090dc <__aeabi_ui2f>:
  4090dc:	f04f 0300 	mov.w	r3, #0
  4090e0:	e004      	b.n	4090ec <__aeabi_i2f+0x8>
  4090e2:	bf00      	nop

004090e4 <__aeabi_i2f>:
  4090e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  4090e8:	bf48      	it	mi
  4090ea:	4240      	negmi	r0, r0
  4090ec:	ea5f 0c00 	movs.w	ip, r0
  4090f0:	bf08      	it	eq
  4090f2:	4770      	bxeq	lr
  4090f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  4090f8:	4601      	mov	r1, r0
  4090fa:	f04f 0000 	mov.w	r0, #0
  4090fe:	e01c      	b.n	40913a <__aeabi_l2f+0x2a>

00409100 <__aeabi_ul2f>:
  409100:	ea50 0201 	orrs.w	r2, r0, r1
  409104:	bf08      	it	eq
  409106:	4770      	bxeq	lr
  409108:	f04f 0300 	mov.w	r3, #0
  40910c:	e00a      	b.n	409124 <__aeabi_l2f+0x14>
  40910e:	bf00      	nop

00409110 <__aeabi_l2f>:
  409110:	ea50 0201 	orrs.w	r2, r0, r1
  409114:	bf08      	it	eq
  409116:	4770      	bxeq	lr
  409118:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  40911c:	d502      	bpl.n	409124 <__aeabi_l2f+0x14>
  40911e:	4240      	negs	r0, r0
  409120:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  409124:	ea5f 0c01 	movs.w	ip, r1
  409128:	bf02      	ittt	eq
  40912a:	4684      	moveq	ip, r0
  40912c:	4601      	moveq	r1, r0
  40912e:	2000      	moveq	r0, #0
  409130:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  409134:	bf08      	it	eq
  409136:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  40913a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  40913e:	fabc f28c 	clz	r2, ip
  409142:	3a08      	subs	r2, #8
  409144:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  409148:	db10      	blt.n	40916c <__aeabi_l2f+0x5c>
  40914a:	fa01 fc02 	lsl.w	ip, r1, r2
  40914e:	4463      	add	r3, ip
  409150:	fa00 fc02 	lsl.w	ip, r0, r2
  409154:	f1c2 0220 	rsb	r2, r2, #32
  409158:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40915c:	fa20 f202 	lsr.w	r2, r0, r2
  409160:	eb43 0002 	adc.w	r0, r3, r2
  409164:	bf08      	it	eq
  409166:	f020 0001 	biceq.w	r0, r0, #1
  40916a:	4770      	bx	lr
  40916c:	f102 0220 	add.w	r2, r2, #32
  409170:	fa01 fc02 	lsl.w	ip, r1, r2
  409174:	f1c2 0220 	rsb	r2, r2, #32
  409178:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  40917c:	fa21 f202 	lsr.w	r2, r1, r2
  409180:	eb43 0002 	adc.w	r0, r3, r2
  409184:	bf08      	it	eq
  409186:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  40918a:	4770      	bx	lr

0040918c <__aeabi_fmul>:
  40918c:	f04f 0cff 	mov.w	ip, #255	; 0xff
  409190:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  409194:	bf1e      	ittt	ne
  409196:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  40919a:	ea92 0f0c 	teqne	r2, ip
  40919e:	ea93 0f0c 	teqne	r3, ip
  4091a2:	d06f      	beq.n	409284 <__aeabi_fmul+0xf8>
  4091a4:	441a      	add	r2, r3
  4091a6:	ea80 0c01 	eor.w	ip, r0, r1
  4091aa:	0240      	lsls	r0, r0, #9
  4091ac:	bf18      	it	ne
  4091ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  4091b2:	d01e      	beq.n	4091f2 <__aeabi_fmul+0x66>
  4091b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  4091b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  4091bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  4091c0:	fba0 3101 	umull	r3, r1, r0, r1
  4091c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  4091c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  4091cc:	bf3e      	ittt	cc
  4091ce:	0049      	lslcc	r1, r1, #1
  4091d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  4091d4:	005b      	lslcc	r3, r3, #1
  4091d6:	ea40 0001 	orr.w	r0, r0, r1
  4091da:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  4091de:	2afd      	cmp	r2, #253	; 0xfd
  4091e0:	d81d      	bhi.n	40921e <__aeabi_fmul+0x92>
  4091e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  4091e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  4091ea:	bf08      	it	eq
  4091ec:	f020 0001 	biceq.w	r0, r0, #1
  4091f0:	4770      	bx	lr
  4091f2:	f090 0f00 	teq	r0, #0
  4091f6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  4091fa:	bf08      	it	eq
  4091fc:	0249      	lsleq	r1, r1, #9
  4091fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  409202:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  409206:	3a7f      	subs	r2, #127	; 0x7f
  409208:	bfc2      	ittt	gt
  40920a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  40920e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  409212:	4770      	bxgt	lr
  409214:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  409218:	f04f 0300 	mov.w	r3, #0
  40921c:	3a01      	subs	r2, #1
  40921e:	dc5d      	bgt.n	4092dc <__aeabi_fmul+0x150>
  409220:	f112 0f19 	cmn.w	r2, #25
  409224:	bfdc      	itt	le
  409226:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  40922a:	4770      	bxle	lr
  40922c:	f1c2 0200 	rsb	r2, r2, #0
  409230:	0041      	lsls	r1, r0, #1
  409232:	fa21 f102 	lsr.w	r1, r1, r2
  409236:	f1c2 0220 	rsb	r2, r2, #32
  40923a:	fa00 fc02 	lsl.w	ip, r0, r2
  40923e:	ea5f 0031 	movs.w	r0, r1, rrx
  409242:	f140 0000 	adc.w	r0, r0, #0
  409246:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  40924a:	bf08      	it	eq
  40924c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  409250:	4770      	bx	lr
  409252:	f092 0f00 	teq	r2, #0
  409256:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  40925a:	bf02      	ittt	eq
  40925c:	0040      	lsleq	r0, r0, #1
  40925e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  409262:	3a01      	subeq	r2, #1
  409264:	d0f9      	beq.n	40925a <__aeabi_fmul+0xce>
  409266:	ea40 000c 	orr.w	r0, r0, ip
  40926a:	f093 0f00 	teq	r3, #0
  40926e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  409272:	bf02      	ittt	eq
  409274:	0049      	lsleq	r1, r1, #1
  409276:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  40927a:	3b01      	subeq	r3, #1
  40927c:	d0f9      	beq.n	409272 <__aeabi_fmul+0xe6>
  40927e:	ea41 010c 	orr.w	r1, r1, ip
  409282:	e78f      	b.n	4091a4 <__aeabi_fmul+0x18>
  409284:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  409288:	ea92 0f0c 	teq	r2, ip
  40928c:	bf18      	it	ne
  40928e:	ea93 0f0c 	teqne	r3, ip
  409292:	d00a      	beq.n	4092aa <__aeabi_fmul+0x11e>
  409294:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  409298:	bf18      	it	ne
  40929a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  40929e:	d1d8      	bne.n	409252 <__aeabi_fmul+0xc6>
  4092a0:	ea80 0001 	eor.w	r0, r0, r1
  4092a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  4092a8:	4770      	bx	lr
  4092aa:	f090 0f00 	teq	r0, #0
  4092ae:	bf17      	itett	ne
  4092b0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  4092b4:	4608      	moveq	r0, r1
  4092b6:	f091 0f00 	teqne	r1, #0
  4092ba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  4092be:	d014      	beq.n	4092ea <__aeabi_fmul+0x15e>
  4092c0:	ea92 0f0c 	teq	r2, ip
  4092c4:	d101      	bne.n	4092ca <__aeabi_fmul+0x13e>
  4092c6:	0242      	lsls	r2, r0, #9
  4092c8:	d10f      	bne.n	4092ea <__aeabi_fmul+0x15e>
  4092ca:	ea93 0f0c 	teq	r3, ip
  4092ce:	d103      	bne.n	4092d8 <__aeabi_fmul+0x14c>
  4092d0:	024b      	lsls	r3, r1, #9
  4092d2:	bf18      	it	ne
  4092d4:	4608      	movne	r0, r1
  4092d6:	d108      	bne.n	4092ea <__aeabi_fmul+0x15e>
  4092d8:	ea80 0001 	eor.w	r0, r0, r1
  4092dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  4092e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4092e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4092e8:	4770      	bx	lr
  4092ea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4092ee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  4092f2:	4770      	bx	lr

004092f4 <__aeabi_fdiv>:
  4092f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4092f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  4092fc:	bf1e      	ittt	ne
  4092fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  409302:	ea92 0f0c 	teqne	r2, ip
  409306:	ea93 0f0c 	teqne	r3, ip
  40930a:	d069      	beq.n	4093e0 <__aeabi_fdiv+0xec>
  40930c:	eba2 0203 	sub.w	r2, r2, r3
  409310:	ea80 0c01 	eor.w	ip, r0, r1
  409314:	0249      	lsls	r1, r1, #9
  409316:	ea4f 2040 	mov.w	r0, r0, lsl #9
  40931a:	d037      	beq.n	40938c <__aeabi_fdiv+0x98>
  40931c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  409320:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  409324:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  409328:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  40932c:	428b      	cmp	r3, r1
  40932e:	bf38      	it	cc
  409330:	005b      	lslcc	r3, r3, #1
  409332:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  409336:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  40933a:	428b      	cmp	r3, r1
  40933c:	bf24      	itt	cs
  40933e:	1a5b      	subcs	r3, r3, r1
  409340:	ea40 000c 	orrcs.w	r0, r0, ip
  409344:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  409348:	bf24      	itt	cs
  40934a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  40934e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  409352:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  409356:	bf24      	itt	cs
  409358:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  40935c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  409360:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  409364:	bf24      	itt	cs
  409366:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  40936a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40936e:	011b      	lsls	r3, r3, #4
  409370:	bf18      	it	ne
  409372:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  409376:	d1e0      	bne.n	40933a <__aeabi_fdiv+0x46>
  409378:	2afd      	cmp	r2, #253	; 0xfd
  40937a:	f63f af50 	bhi.w	40921e <__aeabi_fmul+0x92>
  40937e:	428b      	cmp	r3, r1
  409380:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  409384:	bf08      	it	eq
  409386:	f020 0001 	biceq.w	r0, r0, #1
  40938a:	4770      	bx	lr
  40938c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  409390:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  409394:	327f      	adds	r2, #127	; 0x7f
  409396:	bfc2      	ittt	gt
  409398:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  40939c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  4093a0:	4770      	bxgt	lr
  4093a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4093a6:	f04f 0300 	mov.w	r3, #0
  4093aa:	3a01      	subs	r2, #1
  4093ac:	e737      	b.n	40921e <__aeabi_fmul+0x92>
  4093ae:	f092 0f00 	teq	r2, #0
  4093b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  4093b6:	bf02      	ittt	eq
  4093b8:	0040      	lsleq	r0, r0, #1
  4093ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  4093be:	3a01      	subeq	r2, #1
  4093c0:	d0f9      	beq.n	4093b6 <__aeabi_fdiv+0xc2>
  4093c2:	ea40 000c 	orr.w	r0, r0, ip
  4093c6:	f093 0f00 	teq	r3, #0
  4093ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4093ce:	bf02      	ittt	eq
  4093d0:	0049      	lsleq	r1, r1, #1
  4093d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  4093d6:	3b01      	subeq	r3, #1
  4093d8:	d0f9      	beq.n	4093ce <__aeabi_fdiv+0xda>
  4093da:	ea41 010c 	orr.w	r1, r1, ip
  4093de:	e795      	b.n	40930c <__aeabi_fdiv+0x18>
  4093e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  4093e4:	ea92 0f0c 	teq	r2, ip
  4093e8:	d108      	bne.n	4093fc <__aeabi_fdiv+0x108>
  4093ea:	0242      	lsls	r2, r0, #9
  4093ec:	f47f af7d 	bne.w	4092ea <__aeabi_fmul+0x15e>
  4093f0:	ea93 0f0c 	teq	r3, ip
  4093f4:	f47f af70 	bne.w	4092d8 <__aeabi_fmul+0x14c>
  4093f8:	4608      	mov	r0, r1
  4093fa:	e776      	b.n	4092ea <__aeabi_fmul+0x15e>
  4093fc:	ea93 0f0c 	teq	r3, ip
  409400:	d104      	bne.n	40940c <__aeabi_fdiv+0x118>
  409402:	024b      	lsls	r3, r1, #9
  409404:	f43f af4c 	beq.w	4092a0 <__aeabi_fmul+0x114>
  409408:	4608      	mov	r0, r1
  40940a:	e76e      	b.n	4092ea <__aeabi_fmul+0x15e>
  40940c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  409410:	bf18      	it	ne
  409412:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  409416:	d1ca      	bne.n	4093ae <__aeabi_fdiv+0xba>
  409418:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  40941c:	f47f af5c 	bne.w	4092d8 <__aeabi_fmul+0x14c>
  409420:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  409424:	f47f af3c 	bne.w	4092a0 <__aeabi_fmul+0x114>
  409428:	e75f      	b.n	4092ea <__aeabi_fmul+0x15e>
  40942a:	bf00      	nop

0040942c <__aeabi_f2iz>:
  40942c:	ea4f 0240 	mov.w	r2, r0, lsl #1
  409430:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  409434:	d30f      	bcc.n	409456 <__aeabi_f2iz+0x2a>
  409436:	f04f 039e 	mov.w	r3, #158	; 0x9e
  40943a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  40943e:	d90d      	bls.n	40945c <__aeabi_f2iz+0x30>
  409440:	ea4f 2300 	mov.w	r3, r0, lsl #8
  409444:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  409448:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  40944c:	fa23 f002 	lsr.w	r0, r3, r2
  409450:	bf18      	it	ne
  409452:	4240      	negne	r0, r0
  409454:	4770      	bx	lr
  409456:	f04f 0000 	mov.w	r0, #0
  40945a:	4770      	bx	lr
  40945c:	f112 0f61 	cmn.w	r2, #97	; 0x61
  409460:	d101      	bne.n	409466 <__aeabi_f2iz+0x3a>
  409462:	0242      	lsls	r2, r0, #9
  409464:	d105      	bne.n	409472 <__aeabi_f2iz+0x46>
  409466:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  40946a:	bf08      	it	eq
  40946c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  409470:	4770      	bx	lr
  409472:	f04f 0000 	mov.w	r0, #0
  409476:	4770      	bx	lr

00409478 <__errno>:
  409478:	4b01      	ldr	r3, [pc, #4]	; (409480 <__errno+0x8>)
  40947a:	6818      	ldr	r0, [r3, #0]
  40947c:	4770      	bx	lr
  40947e:	bf00      	nop
  409480:	200000c4 	.word	0x200000c4

00409484 <__libc_init_array>:
  409484:	b570      	push	{r4, r5, r6, lr}
  409486:	4e0f      	ldr	r6, [pc, #60]	; (4094c4 <__libc_init_array+0x40>)
  409488:	4d0f      	ldr	r5, [pc, #60]	; (4094c8 <__libc_init_array+0x44>)
  40948a:	1b76      	subs	r6, r6, r5
  40948c:	10b6      	asrs	r6, r6, #2
  40948e:	bf18      	it	ne
  409490:	2400      	movne	r4, #0
  409492:	d005      	beq.n	4094a0 <__libc_init_array+0x1c>
  409494:	3401      	adds	r4, #1
  409496:	f855 3b04 	ldr.w	r3, [r5], #4
  40949a:	4798      	blx	r3
  40949c:	42a6      	cmp	r6, r4
  40949e:	d1f9      	bne.n	409494 <__libc_init_array+0x10>
  4094a0:	4e0a      	ldr	r6, [pc, #40]	; (4094cc <__libc_init_array+0x48>)
  4094a2:	4d0b      	ldr	r5, [pc, #44]	; (4094d0 <__libc_init_array+0x4c>)
  4094a4:	1b76      	subs	r6, r6, r5
  4094a6:	f006 f8cb 	bl	40f640 <_init>
  4094aa:	10b6      	asrs	r6, r6, #2
  4094ac:	bf18      	it	ne
  4094ae:	2400      	movne	r4, #0
  4094b0:	d006      	beq.n	4094c0 <__libc_init_array+0x3c>
  4094b2:	3401      	adds	r4, #1
  4094b4:	f855 3b04 	ldr.w	r3, [r5], #4
  4094b8:	4798      	blx	r3
  4094ba:	42a6      	cmp	r6, r4
  4094bc:	d1f9      	bne.n	4094b2 <__libc_init_array+0x2e>
  4094be:	bd70      	pop	{r4, r5, r6, pc}
  4094c0:	bd70      	pop	{r4, r5, r6, pc}
  4094c2:	bf00      	nop
  4094c4:	0040f64c 	.word	0x0040f64c
  4094c8:	0040f64c 	.word	0x0040f64c
  4094cc:	0040f654 	.word	0x0040f654
  4094d0:	0040f64c 	.word	0x0040f64c

004094d4 <memcmp>:
  4094d4:	2a03      	cmp	r2, #3
  4094d6:	b470      	push	{r4, r5, r6}
  4094d8:	d922      	bls.n	409520 <memcmp+0x4c>
  4094da:	ea40 0301 	orr.w	r3, r0, r1
  4094de:	079b      	lsls	r3, r3, #30
  4094e0:	d011      	beq.n	409506 <memcmp+0x32>
  4094e2:	7803      	ldrb	r3, [r0, #0]
  4094e4:	780c      	ldrb	r4, [r1, #0]
  4094e6:	42a3      	cmp	r3, r4
  4094e8:	d11d      	bne.n	409526 <memcmp+0x52>
  4094ea:	440a      	add	r2, r1
  4094ec:	3101      	adds	r1, #1
  4094ee:	e005      	b.n	4094fc <memcmp+0x28>
  4094f0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4094f4:	f811 4b01 	ldrb.w	r4, [r1], #1
  4094f8:	42a3      	cmp	r3, r4
  4094fa:	d114      	bne.n	409526 <memcmp+0x52>
  4094fc:	4291      	cmp	r1, r2
  4094fe:	d1f7      	bne.n	4094f0 <memcmp+0x1c>
  409500:	2000      	movs	r0, #0
  409502:	bc70      	pop	{r4, r5, r6}
  409504:	4770      	bx	lr
  409506:	680d      	ldr	r5, [r1, #0]
  409508:	6806      	ldr	r6, [r0, #0]
  40950a:	42ae      	cmp	r6, r5
  40950c:	460c      	mov	r4, r1
  40950e:	4603      	mov	r3, r0
  409510:	f101 0104 	add.w	r1, r1, #4
  409514:	f100 0004 	add.w	r0, r0, #4
  409518:	d108      	bne.n	40952c <memcmp+0x58>
  40951a:	3a04      	subs	r2, #4
  40951c:	2a03      	cmp	r2, #3
  40951e:	d8f2      	bhi.n	409506 <memcmp+0x32>
  409520:	2a00      	cmp	r2, #0
  409522:	d1de      	bne.n	4094e2 <memcmp+0xe>
  409524:	e7ec      	b.n	409500 <memcmp+0x2c>
  409526:	1b18      	subs	r0, r3, r4
  409528:	bc70      	pop	{r4, r5, r6}
  40952a:	4770      	bx	lr
  40952c:	4621      	mov	r1, r4
  40952e:	4618      	mov	r0, r3
  409530:	e7d7      	b.n	4094e2 <memcmp+0xe>
  409532:	bf00      	nop

00409534 <memcpy>:
  409534:	4684      	mov	ip, r0
  409536:	ea41 0300 	orr.w	r3, r1, r0
  40953a:	f013 0303 	ands.w	r3, r3, #3
  40953e:	d16d      	bne.n	40961c <memcpy+0xe8>
  409540:	3a40      	subs	r2, #64	; 0x40
  409542:	d341      	bcc.n	4095c8 <memcpy+0x94>
  409544:	f851 3b04 	ldr.w	r3, [r1], #4
  409548:	f840 3b04 	str.w	r3, [r0], #4
  40954c:	f851 3b04 	ldr.w	r3, [r1], #4
  409550:	f840 3b04 	str.w	r3, [r0], #4
  409554:	f851 3b04 	ldr.w	r3, [r1], #4
  409558:	f840 3b04 	str.w	r3, [r0], #4
  40955c:	f851 3b04 	ldr.w	r3, [r1], #4
  409560:	f840 3b04 	str.w	r3, [r0], #4
  409564:	f851 3b04 	ldr.w	r3, [r1], #4
  409568:	f840 3b04 	str.w	r3, [r0], #4
  40956c:	f851 3b04 	ldr.w	r3, [r1], #4
  409570:	f840 3b04 	str.w	r3, [r0], #4
  409574:	f851 3b04 	ldr.w	r3, [r1], #4
  409578:	f840 3b04 	str.w	r3, [r0], #4
  40957c:	f851 3b04 	ldr.w	r3, [r1], #4
  409580:	f840 3b04 	str.w	r3, [r0], #4
  409584:	f851 3b04 	ldr.w	r3, [r1], #4
  409588:	f840 3b04 	str.w	r3, [r0], #4
  40958c:	f851 3b04 	ldr.w	r3, [r1], #4
  409590:	f840 3b04 	str.w	r3, [r0], #4
  409594:	f851 3b04 	ldr.w	r3, [r1], #4
  409598:	f840 3b04 	str.w	r3, [r0], #4
  40959c:	f851 3b04 	ldr.w	r3, [r1], #4
  4095a0:	f840 3b04 	str.w	r3, [r0], #4
  4095a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4095a8:	f840 3b04 	str.w	r3, [r0], #4
  4095ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4095b0:	f840 3b04 	str.w	r3, [r0], #4
  4095b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4095b8:	f840 3b04 	str.w	r3, [r0], #4
  4095bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4095c0:	f840 3b04 	str.w	r3, [r0], #4
  4095c4:	3a40      	subs	r2, #64	; 0x40
  4095c6:	d2bd      	bcs.n	409544 <memcpy+0x10>
  4095c8:	3230      	adds	r2, #48	; 0x30
  4095ca:	d311      	bcc.n	4095f0 <memcpy+0xbc>
  4095cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4095d0:	f840 3b04 	str.w	r3, [r0], #4
  4095d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4095d8:	f840 3b04 	str.w	r3, [r0], #4
  4095dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4095e0:	f840 3b04 	str.w	r3, [r0], #4
  4095e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4095e8:	f840 3b04 	str.w	r3, [r0], #4
  4095ec:	3a10      	subs	r2, #16
  4095ee:	d2ed      	bcs.n	4095cc <memcpy+0x98>
  4095f0:	320c      	adds	r2, #12
  4095f2:	d305      	bcc.n	409600 <memcpy+0xcc>
  4095f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4095f8:	f840 3b04 	str.w	r3, [r0], #4
  4095fc:	3a04      	subs	r2, #4
  4095fe:	d2f9      	bcs.n	4095f4 <memcpy+0xc0>
  409600:	3204      	adds	r2, #4
  409602:	d008      	beq.n	409616 <memcpy+0xe2>
  409604:	07d2      	lsls	r2, r2, #31
  409606:	bf1c      	itt	ne
  409608:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40960c:	f800 3b01 	strbne.w	r3, [r0], #1
  409610:	d301      	bcc.n	409616 <memcpy+0xe2>
  409612:	880b      	ldrh	r3, [r1, #0]
  409614:	8003      	strh	r3, [r0, #0]
  409616:	4660      	mov	r0, ip
  409618:	4770      	bx	lr
  40961a:	bf00      	nop
  40961c:	2a08      	cmp	r2, #8
  40961e:	d313      	bcc.n	409648 <memcpy+0x114>
  409620:	078b      	lsls	r3, r1, #30
  409622:	d08d      	beq.n	409540 <memcpy+0xc>
  409624:	f010 0303 	ands.w	r3, r0, #3
  409628:	d08a      	beq.n	409540 <memcpy+0xc>
  40962a:	f1c3 0304 	rsb	r3, r3, #4
  40962e:	1ad2      	subs	r2, r2, r3
  409630:	07db      	lsls	r3, r3, #31
  409632:	bf1c      	itt	ne
  409634:	f811 3b01 	ldrbne.w	r3, [r1], #1
  409638:	f800 3b01 	strbne.w	r3, [r0], #1
  40963c:	d380      	bcc.n	409540 <memcpy+0xc>
  40963e:	f831 3b02 	ldrh.w	r3, [r1], #2
  409642:	f820 3b02 	strh.w	r3, [r0], #2
  409646:	e77b      	b.n	409540 <memcpy+0xc>
  409648:	3a04      	subs	r2, #4
  40964a:	d3d9      	bcc.n	409600 <memcpy+0xcc>
  40964c:	3a01      	subs	r2, #1
  40964e:	f811 3b01 	ldrb.w	r3, [r1], #1
  409652:	f800 3b01 	strb.w	r3, [r0], #1
  409656:	d2f9      	bcs.n	40964c <memcpy+0x118>
  409658:	780b      	ldrb	r3, [r1, #0]
  40965a:	7003      	strb	r3, [r0, #0]
  40965c:	784b      	ldrb	r3, [r1, #1]
  40965e:	7043      	strb	r3, [r0, #1]
  409660:	788b      	ldrb	r3, [r1, #2]
  409662:	7083      	strb	r3, [r0, #2]
  409664:	4660      	mov	r0, ip
  409666:	4770      	bx	lr

00409668 <memset>:
  409668:	b470      	push	{r4, r5, r6}
  40966a:	0786      	lsls	r6, r0, #30
  40966c:	d046      	beq.n	4096fc <memset+0x94>
  40966e:	1e54      	subs	r4, r2, #1
  409670:	2a00      	cmp	r2, #0
  409672:	d041      	beq.n	4096f8 <memset+0x90>
  409674:	b2ca      	uxtb	r2, r1
  409676:	4603      	mov	r3, r0
  409678:	e002      	b.n	409680 <memset+0x18>
  40967a:	f114 34ff 	adds.w	r4, r4, #4294967295
  40967e:	d33b      	bcc.n	4096f8 <memset+0x90>
  409680:	f803 2b01 	strb.w	r2, [r3], #1
  409684:	079d      	lsls	r5, r3, #30
  409686:	d1f8      	bne.n	40967a <memset+0x12>
  409688:	2c03      	cmp	r4, #3
  40968a:	d92e      	bls.n	4096ea <memset+0x82>
  40968c:	b2cd      	uxtb	r5, r1
  40968e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  409692:	2c0f      	cmp	r4, #15
  409694:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  409698:	d919      	bls.n	4096ce <memset+0x66>
  40969a:	f103 0210 	add.w	r2, r3, #16
  40969e:	4626      	mov	r6, r4
  4096a0:	3e10      	subs	r6, #16
  4096a2:	2e0f      	cmp	r6, #15
  4096a4:	f842 5c10 	str.w	r5, [r2, #-16]
  4096a8:	f842 5c0c 	str.w	r5, [r2, #-12]
  4096ac:	f842 5c08 	str.w	r5, [r2, #-8]
  4096b0:	f842 5c04 	str.w	r5, [r2, #-4]
  4096b4:	f102 0210 	add.w	r2, r2, #16
  4096b8:	d8f2      	bhi.n	4096a0 <memset+0x38>
  4096ba:	f1a4 0210 	sub.w	r2, r4, #16
  4096be:	f022 020f 	bic.w	r2, r2, #15
  4096c2:	f004 040f 	and.w	r4, r4, #15
  4096c6:	3210      	adds	r2, #16
  4096c8:	2c03      	cmp	r4, #3
  4096ca:	4413      	add	r3, r2
  4096cc:	d90d      	bls.n	4096ea <memset+0x82>
  4096ce:	461e      	mov	r6, r3
  4096d0:	4622      	mov	r2, r4
  4096d2:	3a04      	subs	r2, #4
  4096d4:	2a03      	cmp	r2, #3
  4096d6:	f846 5b04 	str.w	r5, [r6], #4
  4096da:	d8fa      	bhi.n	4096d2 <memset+0x6a>
  4096dc:	1f22      	subs	r2, r4, #4
  4096de:	f022 0203 	bic.w	r2, r2, #3
  4096e2:	3204      	adds	r2, #4
  4096e4:	4413      	add	r3, r2
  4096e6:	f004 0403 	and.w	r4, r4, #3
  4096ea:	b12c      	cbz	r4, 4096f8 <memset+0x90>
  4096ec:	b2c9      	uxtb	r1, r1
  4096ee:	441c      	add	r4, r3
  4096f0:	f803 1b01 	strb.w	r1, [r3], #1
  4096f4:	429c      	cmp	r4, r3
  4096f6:	d1fb      	bne.n	4096f0 <memset+0x88>
  4096f8:	bc70      	pop	{r4, r5, r6}
  4096fa:	4770      	bx	lr
  4096fc:	4614      	mov	r4, r2
  4096fe:	4603      	mov	r3, r0
  409700:	e7c2      	b.n	409688 <memset+0x20>
  409702:	bf00      	nop

00409704 <sprintf>:
  409704:	b40e      	push	{r1, r2, r3}
  409706:	b5f0      	push	{r4, r5, r6, r7, lr}
  409708:	b09c      	sub	sp, #112	; 0x70
  40970a:	ab21      	add	r3, sp, #132	; 0x84
  40970c:	490f      	ldr	r1, [pc, #60]	; (40974c <sprintf+0x48>)
  40970e:	f853 2b04 	ldr.w	r2, [r3], #4
  409712:	9301      	str	r3, [sp, #4]
  409714:	4605      	mov	r5, r0
  409716:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40971a:	6808      	ldr	r0, [r1, #0]
  40971c:	9502      	str	r5, [sp, #8]
  40971e:	f44f 7702 	mov.w	r7, #520	; 0x208
  409722:	f64f 76ff 	movw	r6, #65535	; 0xffff
  409726:	a902      	add	r1, sp, #8
  409728:	9506      	str	r5, [sp, #24]
  40972a:	f8ad 7014 	strh.w	r7, [sp, #20]
  40972e:	9404      	str	r4, [sp, #16]
  409730:	9407      	str	r4, [sp, #28]
  409732:	f8ad 6016 	strh.w	r6, [sp, #22]
  409736:	f000 f80b 	bl	409750 <_svfprintf_r>
  40973a:	9b02      	ldr	r3, [sp, #8]
  40973c:	2200      	movs	r2, #0
  40973e:	701a      	strb	r2, [r3, #0]
  409740:	b01c      	add	sp, #112	; 0x70
  409742:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  409746:	b003      	add	sp, #12
  409748:	4770      	bx	lr
  40974a:	bf00      	nop
  40974c:	200000c4 	.word	0x200000c4

00409750 <_svfprintf_r>:
  409750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409754:	b0c3      	sub	sp, #268	; 0x10c
  409756:	460c      	mov	r4, r1
  409758:	910b      	str	r1, [sp, #44]	; 0x2c
  40975a:	4692      	mov	sl, r2
  40975c:	930f      	str	r3, [sp, #60]	; 0x3c
  40975e:	900c      	str	r0, [sp, #48]	; 0x30
  409760:	f002 fb44 	bl	40bdec <_localeconv_r>
  409764:	6803      	ldr	r3, [r0, #0]
  409766:	931a      	str	r3, [sp, #104]	; 0x68
  409768:	4618      	mov	r0, r3
  40976a:	f003 fba9 	bl	40cec0 <strlen>
  40976e:	89a3      	ldrh	r3, [r4, #12]
  409770:	9019      	str	r0, [sp, #100]	; 0x64
  409772:	0619      	lsls	r1, r3, #24
  409774:	d503      	bpl.n	40977e <_svfprintf_r+0x2e>
  409776:	6923      	ldr	r3, [r4, #16]
  409778:	2b00      	cmp	r3, #0
  40977a:	f001 8003 	beq.w	40a784 <_svfprintf_r+0x1034>
  40977e:	2300      	movs	r3, #0
  409780:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  409784:	9313      	str	r3, [sp, #76]	; 0x4c
  409786:	9315      	str	r3, [sp, #84]	; 0x54
  409788:	9314      	str	r3, [sp, #80]	; 0x50
  40978a:	9327      	str	r3, [sp, #156]	; 0x9c
  40978c:	9326      	str	r3, [sp, #152]	; 0x98
  40978e:	9318      	str	r3, [sp, #96]	; 0x60
  409790:	931b      	str	r3, [sp, #108]	; 0x6c
  409792:	9309      	str	r3, [sp, #36]	; 0x24
  409794:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  409798:	46c8      	mov	r8, r9
  40979a:	9316      	str	r3, [sp, #88]	; 0x58
  40979c:	9317      	str	r3, [sp, #92]	; 0x5c
  40979e:	f89a 3000 	ldrb.w	r3, [sl]
  4097a2:	4654      	mov	r4, sl
  4097a4:	b1e3      	cbz	r3, 4097e0 <_svfprintf_r+0x90>
  4097a6:	2b25      	cmp	r3, #37	; 0x25
  4097a8:	d102      	bne.n	4097b0 <_svfprintf_r+0x60>
  4097aa:	e019      	b.n	4097e0 <_svfprintf_r+0x90>
  4097ac:	2b25      	cmp	r3, #37	; 0x25
  4097ae:	d003      	beq.n	4097b8 <_svfprintf_r+0x68>
  4097b0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4097b4:	2b00      	cmp	r3, #0
  4097b6:	d1f9      	bne.n	4097ac <_svfprintf_r+0x5c>
  4097b8:	eba4 050a 	sub.w	r5, r4, sl
  4097bc:	b185      	cbz	r5, 4097e0 <_svfprintf_r+0x90>
  4097be:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4097c0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4097c2:	f8c8 a000 	str.w	sl, [r8]
  4097c6:	3301      	adds	r3, #1
  4097c8:	442a      	add	r2, r5
  4097ca:	2b07      	cmp	r3, #7
  4097cc:	f8c8 5004 	str.w	r5, [r8, #4]
  4097d0:	9227      	str	r2, [sp, #156]	; 0x9c
  4097d2:	9326      	str	r3, [sp, #152]	; 0x98
  4097d4:	dc7f      	bgt.n	4098d6 <_svfprintf_r+0x186>
  4097d6:	f108 0808 	add.w	r8, r8, #8
  4097da:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4097dc:	442b      	add	r3, r5
  4097de:	9309      	str	r3, [sp, #36]	; 0x24
  4097e0:	7823      	ldrb	r3, [r4, #0]
  4097e2:	2b00      	cmp	r3, #0
  4097e4:	d07f      	beq.n	4098e6 <_svfprintf_r+0x196>
  4097e6:	2300      	movs	r3, #0
  4097e8:	461a      	mov	r2, r3
  4097ea:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4097ee:	4619      	mov	r1, r3
  4097f0:	930d      	str	r3, [sp, #52]	; 0x34
  4097f2:	469b      	mov	fp, r3
  4097f4:	f04f 30ff 	mov.w	r0, #4294967295
  4097f8:	7863      	ldrb	r3, [r4, #1]
  4097fa:	900a      	str	r0, [sp, #40]	; 0x28
  4097fc:	f104 0a01 	add.w	sl, r4, #1
  409800:	f10a 0a01 	add.w	sl, sl, #1
  409804:	f1a3 0020 	sub.w	r0, r3, #32
  409808:	2858      	cmp	r0, #88	; 0x58
  40980a:	f200 83c1 	bhi.w	409f90 <_svfprintf_r+0x840>
  40980e:	e8df f010 	tbh	[pc, r0, lsl #1]
  409812:	0238      	.short	0x0238
  409814:	03bf03bf 	.word	0x03bf03bf
  409818:	03bf0240 	.word	0x03bf0240
  40981c:	03bf03bf 	.word	0x03bf03bf
  409820:	03bf03bf 	.word	0x03bf03bf
  409824:	024503bf 	.word	0x024503bf
  409828:	03bf0203 	.word	0x03bf0203
  40982c:	026b005d 	.word	0x026b005d
  409830:	028603bf 	.word	0x028603bf
  409834:	039d039d 	.word	0x039d039d
  409838:	039d039d 	.word	0x039d039d
  40983c:	039d039d 	.word	0x039d039d
  409840:	039d039d 	.word	0x039d039d
  409844:	03bf039d 	.word	0x03bf039d
  409848:	03bf03bf 	.word	0x03bf03bf
  40984c:	03bf03bf 	.word	0x03bf03bf
  409850:	03bf03bf 	.word	0x03bf03bf
  409854:	03bf03bf 	.word	0x03bf03bf
  409858:	033703bf 	.word	0x033703bf
  40985c:	03bf0357 	.word	0x03bf0357
  409860:	03bf0357 	.word	0x03bf0357
  409864:	03bf03bf 	.word	0x03bf03bf
  409868:	039803bf 	.word	0x039803bf
  40986c:	03bf03bf 	.word	0x03bf03bf
  409870:	03bf03ad 	.word	0x03bf03ad
  409874:	03bf03bf 	.word	0x03bf03bf
  409878:	03bf03bf 	.word	0x03bf03bf
  40987c:	03bf0259 	.word	0x03bf0259
  409880:	031e03bf 	.word	0x031e03bf
  409884:	03bf03bf 	.word	0x03bf03bf
  409888:	03bf03bf 	.word	0x03bf03bf
  40988c:	03bf03bf 	.word	0x03bf03bf
  409890:	03bf03bf 	.word	0x03bf03bf
  409894:	03bf03bf 	.word	0x03bf03bf
  409898:	02db02c6 	.word	0x02db02c6
  40989c:	03570357 	.word	0x03570357
  4098a0:	028b0357 	.word	0x028b0357
  4098a4:	03bf02db 	.word	0x03bf02db
  4098a8:	029003bf 	.word	0x029003bf
  4098ac:	029d03bf 	.word	0x029d03bf
  4098b0:	02b401cc 	.word	0x02b401cc
  4098b4:	03bf0208 	.word	0x03bf0208
  4098b8:	03bf01e1 	.word	0x03bf01e1
  4098bc:	03bf007e 	.word	0x03bf007e
  4098c0:	020d03bf 	.word	0x020d03bf
  4098c4:	980d      	ldr	r0, [sp, #52]	; 0x34
  4098c6:	930f      	str	r3, [sp, #60]	; 0x3c
  4098c8:	4240      	negs	r0, r0
  4098ca:	900d      	str	r0, [sp, #52]	; 0x34
  4098cc:	f04b 0b04 	orr.w	fp, fp, #4
  4098d0:	f89a 3000 	ldrb.w	r3, [sl]
  4098d4:	e794      	b.n	409800 <_svfprintf_r+0xb0>
  4098d6:	aa25      	add	r2, sp, #148	; 0x94
  4098d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4098da:	980c      	ldr	r0, [sp, #48]	; 0x30
  4098dc:	f003 fb5e 	bl	40cf9c <__ssprint_r>
  4098e0:	b940      	cbnz	r0, 4098f4 <_svfprintf_r+0x1a4>
  4098e2:	46c8      	mov	r8, r9
  4098e4:	e779      	b.n	4097da <_svfprintf_r+0x8a>
  4098e6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4098e8:	b123      	cbz	r3, 4098f4 <_svfprintf_r+0x1a4>
  4098ea:	980c      	ldr	r0, [sp, #48]	; 0x30
  4098ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4098ee:	aa25      	add	r2, sp, #148	; 0x94
  4098f0:	f003 fb54 	bl	40cf9c <__ssprint_r>
  4098f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4098f6:	899b      	ldrh	r3, [r3, #12]
  4098f8:	f013 0f40 	tst.w	r3, #64	; 0x40
  4098fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4098fe:	bf18      	it	ne
  409900:	f04f 33ff 	movne.w	r3, #4294967295
  409904:	9309      	str	r3, [sp, #36]	; 0x24
  409906:	9809      	ldr	r0, [sp, #36]	; 0x24
  409908:	b043      	add	sp, #268	; 0x10c
  40990a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40990e:	f01b 0f20 	tst.w	fp, #32
  409912:	9311      	str	r3, [sp, #68]	; 0x44
  409914:	f040 81dd 	bne.w	409cd2 <_svfprintf_r+0x582>
  409918:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40991a:	f01b 0f10 	tst.w	fp, #16
  40991e:	4613      	mov	r3, r2
  409920:	f040 856e 	bne.w	40a400 <_svfprintf_r+0xcb0>
  409924:	f01b 0f40 	tst.w	fp, #64	; 0x40
  409928:	f000 856a 	beq.w	40a400 <_svfprintf_r+0xcb0>
  40992c:	8814      	ldrh	r4, [r2, #0]
  40992e:	3204      	adds	r2, #4
  409930:	2500      	movs	r5, #0
  409932:	2301      	movs	r3, #1
  409934:	920f      	str	r2, [sp, #60]	; 0x3c
  409936:	2700      	movs	r7, #0
  409938:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40993c:	990a      	ldr	r1, [sp, #40]	; 0x28
  40993e:	1c4a      	adds	r2, r1, #1
  409940:	f000 8265 	beq.w	409e0e <_svfprintf_r+0x6be>
  409944:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  409948:	9207      	str	r2, [sp, #28]
  40994a:	ea54 0205 	orrs.w	r2, r4, r5
  40994e:	f040 8264 	bne.w	409e1a <_svfprintf_r+0x6ca>
  409952:	2900      	cmp	r1, #0
  409954:	f040 843c 	bne.w	40a1d0 <_svfprintf_r+0xa80>
  409958:	2b00      	cmp	r3, #0
  40995a:	f040 84d7 	bne.w	40a30c <_svfprintf_r+0xbbc>
  40995e:	f01b 0301 	ands.w	r3, fp, #1
  409962:	930e      	str	r3, [sp, #56]	; 0x38
  409964:	f000 8604 	beq.w	40a570 <_svfprintf_r+0xe20>
  409968:	ae42      	add	r6, sp, #264	; 0x108
  40996a:	2330      	movs	r3, #48	; 0x30
  40996c:	f806 3d41 	strb.w	r3, [r6, #-65]!
  409970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409972:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  409974:	4293      	cmp	r3, r2
  409976:	bfb8      	it	lt
  409978:	4613      	movlt	r3, r2
  40997a:	9308      	str	r3, [sp, #32]
  40997c:	2300      	movs	r3, #0
  40997e:	9312      	str	r3, [sp, #72]	; 0x48
  409980:	b117      	cbz	r7, 409988 <_svfprintf_r+0x238>
  409982:	9b08      	ldr	r3, [sp, #32]
  409984:	3301      	adds	r3, #1
  409986:	9308      	str	r3, [sp, #32]
  409988:	9b07      	ldr	r3, [sp, #28]
  40998a:	f013 0302 	ands.w	r3, r3, #2
  40998e:	9310      	str	r3, [sp, #64]	; 0x40
  409990:	d002      	beq.n	409998 <_svfprintf_r+0x248>
  409992:	9b08      	ldr	r3, [sp, #32]
  409994:	3302      	adds	r3, #2
  409996:	9308      	str	r3, [sp, #32]
  409998:	9b07      	ldr	r3, [sp, #28]
  40999a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  40999e:	f040 830e 	bne.w	409fbe <_svfprintf_r+0x86e>
  4099a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4099a4:	9a08      	ldr	r2, [sp, #32]
  4099a6:	eba3 0b02 	sub.w	fp, r3, r2
  4099aa:	f1bb 0f00 	cmp.w	fp, #0
  4099ae:	f340 8306 	ble.w	409fbe <_svfprintf_r+0x86e>
  4099b2:	f1bb 0f10 	cmp.w	fp, #16
  4099b6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4099b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4099ba:	dd29      	ble.n	409a10 <_svfprintf_r+0x2c0>
  4099bc:	4643      	mov	r3, r8
  4099be:	4621      	mov	r1, r4
  4099c0:	46a8      	mov	r8, r5
  4099c2:	2710      	movs	r7, #16
  4099c4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4099c6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4099c8:	e006      	b.n	4099d8 <_svfprintf_r+0x288>
  4099ca:	f1ab 0b10 	sub.w	fp, fp, #16
  4099ce:	f1bb 0f10 	cmp.w	fp, #16
  4099d2:	f103 0308 	add.w	r3, r3, #8
  4099d6:	dd18      	ble.n	409a0a <_svfprintf_r+0x2ba>
  4099d8:	3201      	adds	r2, #1
  4099da:	48b7      	ldr	r0, [pc, #732]	; (409cb8 <_svfprintf_r+0x568>)
  4099dc:	9226      	str	r2, [sp, #152]	; 0x98
  4099de:	3110      	adds	r1, #16
  4099e0:	2a07      	cmp	r2, #7
  4099e2:	9127      	str	r1, [sp, #156]	; 0x9c
  4099e4:	e883 0081 	stmia.w	r3, {r0, r7}
  4099e8:	ddef      	ble.n	4099ca <_svfprintf_r+0x27a>
  4099ea:	aa25      	add	r2, sp, #148	; 0x94
  4099ec:	4629      	mov	r1, r5
  4099ee:	4620      	mov	r0, r4
  4099f0:	f003 fad4 	bl	40cf9c <__ssprint_r>
  4099f4:	2800      	cmp	r0, #0
  4099f6:	f47f af7d 	bne.w	4098f4 <_svfprintf_r+0x1a4>
  4099fa:	f1ab 0b10 	sub.w	fp, fp, #16
  4099fe:	f1bb 0f10 	cmp.w	fp, #16
  409a02:	9927      	ldr	r1, [sp, #156]	; 0x9c
  409a04:	9a26      	ldr	r2, [sp, #152]	; 0x98
  409a06:	464b      	mov	r3, r9
  409a08:	dce6      	bgt.n	4099d8 <_svfprintf_r+0x288>
  409a0a:	4645      	mov	r5, r8
  409a0c:	460c      	mov	r4, r1
  409a0e:	4698      	mov	r8, r3
  409a10:	3201      	adds	r2, #1
  409a12:	4ba9      	ldr	r3, [pc, #676]	; (409cb8 <_svfprintf_r+0x568>)
  409a14:	9226      	str	r2, [sp, #152]	; 0x98
  409a16:	445c      	add	r4, fp
  409a18:	2a07      	cmp	r2, #7
  409a1a:	9427      	str	r4, [sp, #156]	; 0x9c
  409a1c:	e888 0808 	stmia.w	r8, {r3, fp}
  409a20:	f300 8498 	bgt.w	40a354 <_svfprintf_r+0xc04>
  409a24:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  409a28:	f108 0808 	add.w	r8, r8, #8
  409a2c:	b177      	cbz	r7, 409a4c <_svfprintf_r+0x2fc>
  409a2e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  409a30:	3301      	adds	r3, #1
  409a32:	3401      	adds	r4, #1
  409a34:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  409a38:	2201      	movs	r2, #1
  409a3a:	2b07      	cmp	r3, #7
  409a3c:	9427      	str	r4, [sp, #156]	; 0x9c
  409a3e:	9326      	str	r3, [sp, #152]	; 0x98
  409a40:	e888 0006 	stmia.w	r8, {r1, r2}
  409a44:	f300 83db 	bgt.w	40a1fe <_svfprintf_r+0xaae>
  409a48:	f108 0808 	add.w	r8, r8, #8
  409a4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  409a4e:	b16b      	cbz	r3, 409a6c <_svfprintf_r+0x31c>
  409a50:	9b26      	ldr	r3, [sp, #152]	; 0x98
  409a52:	3301      	adds	r3, #1
  409a54:	3402      	adds	r4, #2
  409a56:	a91e      	add	r1, sp, #120	; 0x78
  409a58:	2202      	movs	r2, #2
  409a5a:	2b07      	cmp	r3, #7
  409a5c:	9427      	str	r4, [sp, #156]	; 0x9c
  409a5e:	9326      	str	r3, [sp, #152]	; 0x98
  409a60:	e888 0006 	stmia.w	r8, {r1, r2}
  409a64:	f300 83d6 	bgt.w	40a214 <_svfprintf_r+0xac4>
  409a68:	f108 0808 	add.w	r8, r8, #8
  409a6c:	2d80      	cmp	r5, #128	; 0x80
  409a6e:	f000 8315 	beq.w	40a09c <_svfprintf_r+0x94c>
  409a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409a74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  409a76:	1a9f      	subs	r7, r3, r2
  409a78:	2f00      	cmp	r7, #0
  409a7a:	dd36      	ble.n	409aea <_svfprintf_r+0x39a>
  409a7c:	2f10      	cmp	r7, #16
  409a7e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  409a80:	4d8e      	ldr	r5, [pc, #568]	; (409cbc <_svfprintf_r+0x56c>)
  409a82:	dd27      	ble.n	409ad4 <_svfprintf_r+0x384>
  409a84:	4642      	mov	r2, r8
  409a86:	4621      	mov	r1, r4
  409a88:	46b0      	mov	r8, r6
  409a8a:	f04f 0b10 	mov.w	fp, #16
  409a8e:	462e      	mov	r6, r5
  409a90:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  409a92:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  409a94:	e004      	b.n	409aa0 <_svfprintf_r+0x350>
  409a96:	3f10      	subs	r7, #16
  409a98:	2f10      	cmp	r7, #16
  409a9a:	f102 0208 	add.w	r2, r2, #8
  409a9e:	dd15      	ble.n	409acc <_svfprintf_r+0x37c>
  409aa0:	3301      	adds	r3, #1
  409aa2:	3110      	adds	r1, #16
  409aa4:	2b07      	cmp	r3, #7
  409aa6:	9127      	str	r1, [sp, #156]	; 0x9c
  409aa8:	9326      	str	r3, [sp, #152]	; 0x98
  409aaa:	e882 0840 	stmia.w	r2, {r6, fp}
  409aae:	ddf2      	ble.n	409a96 <_svfprintf_r+0x346>
  409ab0:	aa25      	add	r2, sp, #148	; 0x94
  409ab2:	4629      	mov	r1, r5
  409ab4:	4620      	mov	r0, r4
  409ab6:	f003 fa71 	bl	40cf9c <__ssprint_r>
  409aba:	2800      	cmp	r0, #0
  409abc:	f47f af1a 	bne.w	4098f4 <_svfprintf_r+0x1a4>
  409ac0:	3f10      	subs	r7, #16
  409ac2:	2f10      	cmp	r7, #16
  409ac4:	9927      	ldr	r1, [sp, #156]	; 0x9c
  409ac6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  409ac8:	464a      	mov	r2, r9
  409aca:	dce9      	bgt.n	409aa0 <_svfprintf_r+0x350>
  409acc:	4635      	mov	r5, r6
  409ace:	460c      	mov	r4, r1
  409ad0:	4646      	mov	r6, r8
  409ad2:	4690      	mov	r8, r2
  409ad4:	3301      	adds	r3, #1
  409ad6:	443c      	add	r4, r7
  409ad8:	2b07      	cmp	r3, #7
  409ada:	9427      	str	r4, [sp, #156]	; 0x9c
  409adc:	9326      	str	r3, [sp, #152]	; 0x98
  409ade:	e888 00a0 	stmia.w	r8, {r5, r7}
  409ae2:	f300 8381 	bgt.w	40a1e8 <_svfprintf_r+0xa98>
  409ae6:	f108 0808 	add.w	r8, r8, #8
  409aea:	9b07      	ldr	r3, [sp, #28]
  409aec:	05df      	lsls	r7, r3, #23
  409aee:	f100 8268 	bmi.w	409fc2 <_svfprintf_r+0x872>
  409af2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  409af4:	990e      	ldr	r1, [sp, #56]	; 0x38
  409af6:	f8c8 6000 	str.w	r6, [r8]
  409afa:	3301      	adds	r3, #1
  409afc:	440c      	add	r4, r1
  409afe:	2b07      	cmp	r3, #7
  409b00:	9427      	str	r4, [sp, #156]	; 0x9c
  409b02:	f8c8 1004 	str.w	r1, [r8, #4]
  409b06:	9326      	str	r3, [sp, #152]	; 0x98
  409b08:	f300 834d 	bgt.w	40a1a6 <_svfprintf_r+0xa56>
  409b0c:	f108 0808 	add.w	r8, r8, #8
  409b10:	9b07      	ldr	r3, [sp, #28]
  409b12:	075b      	lsls	r3, r3, #29
  409b14:	d53a      	bpl.n	409b8c <_svfprintf_r+0x43c>
  409b16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  409b18:	9a08      	ldr	r2, [sp, #32]
  409b1a:	1a9d      	subs	r5, r3, r2
  409b1c:	2d00      	cmp	r5, #0
  409b1e:	dd35      	ble.n	409b8c <_svfprintf_r+0x43c>
  409b20:	2d10      	cmp	r5, #16
  409b22:	9b26      	ldr	r3, [sp, #152]	; 0x98
  409b24:	dd20      	ble.n	409b68 <_svfprintf_r+0x418>
  409b26:	2610      	movs	r6, #16
  409b28:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  409b2a:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  409b2e:	e004      	b.n	409b3a <_svfprintf_r+0x3ea>
  409b30:	3d10      	subs	r5, #16
  409b32:	2d10      	cmp	r5, #16
  409b34:	f108 0808 	add.w	r8, r8, #8
  409b38:	dd16      	ble.n	409b68 <_svfprintf_r+0x418>
  409b3a:	3301      	adds	r3, #1
  409b3c:	4a5e      	ldr	r2, [pc, #376]	; (409cb8 <_svfprintf_r+0x568>)
  409b3e:	9326      	str	r3, [sp, #152]	; 0x98
  409b40:	3410      	adds	r4, #16
  409b42:	2b07      	cmp	r3, #7
  409b44:	9427      	str	r4, [sp, #156]	; 0x9c
  409b46:	e888 0044 	stmia.w	r8, {r2, r6}
  409b4a:	ddf1      	ble.n	409b30 <_svfprintf_r+0x3e0>
  409b4c:	aa25      	add	r2, sp, #148	; 0x94
  409b4e:	4659      	mov	r1, fp
  409b50:	4638      	mov	r0, r7
  409b52:	f003 fa23 	bl	40cf9c <__ssprint_r>
  409b56:	2800      	cmp	r0, #0
  409b58:	f47f aecc 	bne.w	4098f4 <_svfprintf_r+0x1a4>
  409b5c:	3d10      	subs	r5, #16
  409b5e:	2d10      	cmp	r5, #16
  409b60:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  409b62:	9b26      	ldr	r3, [sp, #152]	; 0x98
  409b64:	46c8      	mov	r8, r9
  409b66:	dce8      	bgt.n	409b3a <_svfprintf_r+0x3ea>
  409b68:	3301      	adds	r3, #1
  409b6a:	4a53      	ldr	r2, [pc, #332]	; (409cb8 <_svfprintf_r+0x568>)
  409b6c:	9326      	str	r3, [sp, #152]	; 0x98
  409b6e:	442c      	add	r4, r5
  409b70:	2b07      	cmp	r3, #7
  409b72:	9427      	str	r4, [sp, #156]	; 0x9c
  409b74:	e888 0024 	stmia.w	r8, {r2, r5}
  409b78:	dd08      	ble.n	409b8c <_svfprintf_r+0x43c>
  409b7a:	aa25      	add	r2, sp, #148	; 0x94
  409b7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  409b7e:	980c      	ldr	r0, [sp, #48]	; 0x30
  409b80:	f003 fa0c 	bl	40cf9c <__ssprint_r>
  409b84:	2800      	cmp	r0, #0
  409b86:	f47f aeb5 	bne.w	4098f4 <_svfprintf_r+0x1a4>
  409b8a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  409b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409b8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  409b90:	9908      	ldr	r1, [sp, #32]
  409b92:	428a      	cmp	r2, r1
  409b94:	bfac      	ite	ge
  409b96:	189b      	addge	r3, r3, r2
  409b98:	185b      	addlt	r3, r3, r1
  409b9a:	9309      	str	r3, [sp, #36]	; 0x24
  409b9c:	2c00      	cmp	r4, #0
  409b9e:	f040 830d 	bne.w	40a1bc <_svfprintf_r+0xa6c>
  409ba2:	2300      	movs	r3, #0
  409ba4:	9326      	str	r3, [sp, #152]	; 0x98
  409ba6:	46c8      	mov	r8, r9
  409ba8:	e5f9      	b.n	40979e <_svfprintf_r+0x4e>
  409baa:	9311      	str	r3, [sp, #68]	; 0x44
  409bac:	f01b 0320 	ands.w	r3, fp, #32
  409bb0:	f040 81e3 	bne.w	409f7a <_svfprintf_r+0x82a>
  409bb4:	f01b 0210 	ands.w	r2, fp, #16
  409bb8:	f040 842e 	bne.w	40a418 <_svfprintf_r+0xcc8>
  409bbc:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  409bc0:	f000 842a 	beq.w	40a418 <_svfprintf_r+0xcc8>
  409bc4:	990f      	ldr	r1, [sp, #60]	; 0x3c
  409bc6:	4613      	mov	r3, r2
  409bc8:	460a      	mov	r2, r1
  409bca:	3204      	adds	r2, #4
  409bcc:	880c      	ldrh	r4, [r1, #0]
  409bce:	920f      	str	r2, [sp, #60]	; 0x3c
  409bd0:	2500      	movs	r5, #0
  409bd2:	e6b0      	b.n	409936 <_svfprintf_r+0x1e6>
  409bd4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409bd6:	9311      	str	r3, [sp, #68]	; 0x44
  409bd8:	6816      	ldr	r6, [r2, #0]
  409bda:	2400      	movs	r4, #0
  409bdc:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  409be0:	1d15      	adds	r5, r2, #4
  409be2:	2e00      	cmp	r6, #0
  409be4:	f000 86a7 	beq.w	40a936 <_svfprintf_r+0x11e6>
  409be8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  409bea:	1c53      	adds	r3, r2, #1
  409bec:	f000 8609 	beq.w	40a802 <_svfprintf_r+0x10b2>
  409bf0:	4621      	mov	r1, r4
  409bf2:	4630      	mov	r0, r6
  409bf4:	f002 fbd4 	bl	40c3a0 <memchr>
  409bf8:	2800      	cmp	r0, #0
  409bfa:	f000 86e1 	beq.w	40a9c0 <_svfprintf_r+0x1270>
  409bfe:	1b83      	subs	r3, r0, r6
  409c00:	930e      	str	r3, [sp, #56]	; 0x38
  409c02:	940a      	str	r4, [sp, #40]	; 0x28
  409c04:	950f      	str	r5, [sp, #60]	; 0x3c
  409c06:	f8cd b01c 	str.w	fp, [sp, #28]
  409c0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  409c0e:	9308      	str	r3, [sp, #32]
  409c10:	9412      	str	r4, [sp, #72]	; 0x48
  409c12:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  409c16:	e6b3      	b.n	409980 <_svfprintf_r+0x230>
  409c18:	f89a 3000 	ldrb.w	r3, [sl]
  409c1c:	2201      	movs	r2, #1
  409c1e:	212b      	movs	r1, #43	; 0x2b
  409c20:	e5ee      	b.n	409800 <_svfprintf_r+0xb0>
  409c22:	f04b 0b20 	orr.w	fp, fp, #32
  409c26:	f89a 3000 	ldrb.w	r3, [sl]
  409c2a:	e5e9      	b.n	409800 <_svfprintf_r+0xb0>
  409c2c:	9311      	str	r3, [sp, #68]	; 0x44
  409c2e:	2a00      	cmp	r2, #0
  409c30:	f040 8795 	bne.w	40ab5e <_svfprintf_r+0x140e>
  409c34:	4b22      	ldr	r3, [pc, #136]	; (409cc0 <_svfprintf_r+0x570>)
  409c36:	9318      	str	r3, [sp, #96]	; 0x60
  409c38:	f01b 0f20 	tst.w	fp, #32
  409c3c:	f040 8111 	bne.w	409e62 <_svfprintf_r+0x712>
  409c40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409c42:	f01b 0f10 	tst.w	fp, #16
  409c46:	4613      	mov	r3, r2
  409c48:	f040 83e1 	bne.w	40a40e <_svfprintf_r+0xcbe>
  409c4c:	f01b 0f40 	tst.w	fp, #64	; 0x40
  409c50:	f000 83dd 	beq.w	40a40e <_svfprintf_r+0xcbe>
  409c54:	3304      	adds	r3, #4
  409c56:	8814      	ldrh	r4, [r2, #0]
  409c58:	930f      	str	r3, [sp, #60]	; 0x3c
  409c5a:	2500      	movs	r5, #0
  409c5c:	f01b 0f01 	tst.w	fp, #1
  409c60:	f000 810c 	beq.w	409e7c <_svfprintf_r+0x72c>
  409c64:	ea54 0305 	orrs.w	r3, r4, r5
  409c68:	f000 8108 	beq.w	409e7c <_svfprintf_r+0x72c>
  409c6c:	2330      	movs	r3, #48	; 0x30
  409c6e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  409c72:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  409c76:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  409c7a:	f04b 0b02 	orr.w	fp, fp, #2
  409c7e:	2302      	movs	r3, #2
  409c80:	e659      	b.n	409936 <_svfprintf_r+0x1e6>
  409c82:	f89a 3000 	ldrb.w	r3, [sl]
  409c86:	2900      	cmp	r1, #0
  409c88:	f47f adba 	bne.w	409800 <_svfprintf_r+0xb0>
  409c8c:	2201      	movs	r2, #1
  409c8e:	2120      	movs	r1, #32
  409c90:	e5b6      	b.n	409800 <_svfprintf_r+0xb0>
  409c92:	f04b 0b01 	orr.w	fp, fp, #1
  409c96:	f89a 3000 	ldrb.w	r3, [sl]
  409c9a:	e5b1      	b.n	409800 <_svfprintf_r+0xb0>
  409c9c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  409c9e:	6823      	ldr	r3, [r4, #0]
  409ca0:	930d      	str	r3, [sp, #52]	; 0x34
  409ca2:	4618      	mov	r0, r3
  409ca4:	2800      	cmp	r0, #0
  409ca6:	4623      	mov	r3, r4
  409ca8:	f103 0304 	add.w	r3, r3, #4
  409cac:	f6ff ae0a 	blt.w	4098c4 <_svfprintf_r+0x174>
  409cb0:	930f      	str	r3, [sp, #60]	; 0x3c
  409cb2:	f89a 3000 	ldrb.w	r3, [sl]
  409cb6:	e5a3      	b.n	409800 <_svfprintf_r+0xb0>
  409cb8:	0040f400 	.word	0x0040f400
  409cbc:	0040f410 	.word	0x0040f410
  409cc0:	0040f3e0 	.word	0x0040f3e0
  409cc4:	f04b 0b10 	orr.w	fp, fp, #16
  409cc8:	f01b 0f20 	tst.w	fp, #32
  409ccc:	9311      	str	r3, [sp, #68]	; 0x44
  409cce:	f43f ae23 	beq.w	409918 <_svfprintf_r+0x1c8>
  409cd2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  409cd4:	3507      	adds	r5, #7
  409cd6:	f025 0307 	bic.w	r3, r5, #7
  409cda:	f103 0208 	add.w	r2, r3, #8
  409cde:	e9d3 4500 	ldrd	r4, r5, [r3]
  409ce2:	920f      	str	r2, [sp, #60]	; 0x3c
  409ce4:	2301      	movs	r3, #1
  409ce6:	e626      	b.n	409936 <_svfprintf_r+0x1e6>
  409ce8:	f89a 3000 	ldrb.w	r3, [sl]
  409cec:	2b2a      	cmp	r3, #42	; 0x2a
  409cee:	f10a 0401 	add.w	r4, sl, #1
  409cf2:	f000 8727 	beq.w	40ab44 <_svfprintf_r+0x13f4>
  409cf6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  409cfa:	2809      	cmp	r0, #9
  409cfc:	46a2      	mov	sl, r4
  409cfe:	f200 86ad 	bhi.w	40aa5c <_svfprintf_r+0x130c>
  409d02:	2300      	movs	r3, #0
  409d04:	461c      	mov	r4, r3
  409d06:	f81a 3b01 	ldrb.w	r3, [sl], #1
  409d0a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  409d0e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  409d12:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  409d16:	2809      	cmp	r0, #9
  409d18:	d9f5      	bls.n	409d06 <_svfprintf_r+0x5b6>
  409d1a:	940a      	str	r4, [sp, #40]	; 0x28
  409d1c:	e572      	b.n	409804 <_svfprintf_r+0xb4>
  409d1e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  409d22:	f89a 3000 	ldrb.w	r3, [sl]
  409d26:	e56b      	b.n	409800 <_svfprintf_r+0xb0>
  409d28:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  409d2c:	f89a 3000 	ldrb.w	r3, [sl]
  409d30:	e566      	b.n	409800 <_svfprintf_r+0xb0>
  409d32:	f89a 3000 	ldrb.w	r3, [sl]
  409d36:	2b6c      	cmp	r3, #108	; 0x6c
  409d38:	bf03      	ittte	eq
  409d3a:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  409d3e:	f04b 0b20 	orreq.w	fp, fp, #32
  409d42:	f10a 0a01 	addeq.w	sl, sl, #1
  409d46:	f04b 0b10 	orrne.w	fp, fp, #16
  409d4a:	e559      	b.n	409800 <_svfprintf_r+0xb0>
  409d4c:	2a00      	cmp	r2, #0
  409d4e:	f040 8711 	bne.w	40ab74 <_svfprintf_r+0x1424>
  409d52:	f01b 0f20 	tst.w	fp, #32
  409d56:	f040 84f9 	bne.w	40a74c <_svfprintf_r+0xffc>
  409d5a:	f01b 0f10 	tst.w	fp, #16
  409d5e:	f040 84ac 	bne.w	40a6ba <_svfprintf_r+0xf6a>
  409d62:	f01b 0f40 	tst.w	fp, #64	; 0x40
  409d66:	f000 84a8 	beq.w	40a6ba <_svfprintf_r+0xf6a>
  409d6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  409d6c:	6813      	ldr	r3, [r2, #0]
  409d6e:	3204      	adds	r2, #4
  409d70:	920f      	str	r2, [sp, #60]	; 0x3c
  409d72:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  409d76:	801a      	strh	r2, [r3, #0]
  409d78:	e511      	b.n	40979e <_svfprintf_r+0x4e>
  409d7a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  409d7c:	4bb3      	ldr	r3, [pc, #716]	; (40a04c <_svfprintf_r+0x8fc>)
  409d7e:	680c      	ldr	r4, [r1, #0]
  409d80:	9318      	str	r3, [sp, #96]	; 0x60
  409d82:	2230      	movs	r2, #48	; 0x30
  409d84:	2378      	movs	r3, #120	; 0x78
  409d86:	3104      	adds	r1, #4
  409d88:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  409d8c:	9311      	str	r3, [sp, #68]	; 0x44
  409d8e:	f04b 0b02 	orr.w	fp, fp, #2
  409d92:	910f      	str	r1, [sp, #60]	; 0x3c
  409d94:	2500      	movs	r5, #0
  409d96:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  409d9a:	2302      	movs	r3, #2
  409d9c:	e5cb      	b.n	409936 <_svfprintf_r+0x1e6>
  409d9e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  409da0:	9311      	str	r3, [sp, #68]	; 0x44
  409da2:	680a      	ldr	r2, [r1, #0]
  409da4:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  409da8:	2300      	movs	r3, #0
  409daa:	460a      	mov	r2, r1
  409dac:	461f      	mov	r7, r3
  409dae:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  409db2:	3204      	adds	r2, #4
  409db4:	2301      	movs	r3, #1
  409db6:	9308      	str	r3, [sp, #32]
  409db8:	f8cd b01c 	str.w	fp, [sp, #28]
  409dbc:	970a      	str	r7, [sp, #40]	; 0x28
  409dbe:	9712      	str	r7, [sp, #72]	; 0x48
  409dc0:	920f      	str	r2, [sp, #60]	; 0x3c
  409dc2:	930e      	str	r3, [sp, #56]	; 0x38
  409dc4:	ae28      	add	r6, sp, #160	; 0xa0
  409dc6:	e5df      	b.n	409988 <_svfprintf_r+0x238>
  409dc8:	9311      	str	r3, [sp, #68]	; 0x44
  409dca:	2a00      	cmp	r2, #0
  409dcc:	f040 86ea 	bne.w	40aba4 <_svfprintf_r+0x1454>
  409dd0:	f01b 0f20 	tst.w	fp, #32
  409dd4:	d15d      	bne.n	409e92 <_svfprintf_r+0x742>
  409dd6:	f01b 0f10 	tst.w	fp, #16
  409dda:	f040 8308 	bne.w	40a3ee <_svfprintf_r+0xc9e>
  409dde:	f01b 0f40 	tst.w	fp, #64	; 0x40
  409de2:	f000 8304 	beq.w	40a3ee <_svfprintf_r+0xc9e>
  409de6:	990f      	ldr	r1, [sp, #60]	; 0x3c
  409de8:	f9b1 4000 	ldrsh.w	r4, [r1]
  409dec:	3104      	adds	r1, #4
  409dee:	17e5      	asrs	r5, r4, #31
  409df0:	4622      	mov	r2, r4
  409df2:	462b      	mov	r3, r5
  409df4:	910f      	str	r1, [sp, #60]	; 0x3c
  409df6:	2a00      	cmp	r2, #0
  409df8:	f173 0300 	sbcs.w	r3, r3, #0
  409dfc:	db58      	blt.n	409eb0 <_svfprintf_r+0x760>
  409dfe:	990a      	ldr	r1, [sp, #40]	; 0x28
  409e00:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  409e04:	1c4a      	adds	r2, r1, #1
  409e06:	f04f 0301 	mov.w	r3, #1
  409e0a:	f47f ad9b 	bne.w	409944 <_svfprintf_r+0x1f4>
  409e0e:	ea54 0205 	orrs.w	r2, r4, r5
  409e12:	f000 81df 	beq.w	40a1d4 <_svfprintf_r+0xa84>
  409e16:	f8cd b01c 	str.w	fp, [sp, #28]
  409e1a:	2b01      	cmp	r3, #1
  409e1c:	f000 827b 	beq.w	40a316 <_svfprintf_r+0xbc6>
  409e20:	2b02      	cmp	r3, #2
  409e22:	f040 8206 	bne.w	40a232 <_svfprintf_r+0xae2>
  409e26:	9818      	ldr	r0, [sp, #96]	; 0x60
  409e28:	464e      	mov	r6, r9
  409e2a:	0923      	lsrs	r3, r4, #4
  409e2c:	f004 010f 	and.w	r1, r4, #15
  409e30:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  409e34:	092a      	lsrs	r2, r5, #4
  409e36:	461c      	mov	r4, r3
  409e38:	4615      	mov	r5, r2
  409e3a:	5c43      	ldrb	r3, [r0, r1]
  409e3c:	f806 3d01 	strb.w	r3, [r6, #-1]!
  409e40:	ea54 0305 	orrs.w	r3, r4, r5
  409e44:	d1f1      	bne.n	409e2a <_svfprintf_r+0x6da>
  409e46:	eba9 0306 	sub.w	r3, r9, r6
  409e4a:	930e      	str	r3, [sp, #56]	; 0x38
  409e4c:	e590      	b.n	409970 <_svfprintf_r+0x220>
  409e4e:	9311      	str	r3, [sp, #68]	; 0x44
  409e50:	2a00      	cmp	r2, #0
  409e52:	f040 86a3 	bne.w	40ab9c <_svfprintf_r+0x144c>
  409e56:	4b7e      	ldr	r3, [pc, #504]	; (40a050 <_svfprintf_r+0x900>)
  409e58:	9318      	str	r3, [sp, #96]	; 0x60
  409e5a:	f01b 0f20 	tst.w	fp, #32
  409e5e:	f43f aeef 	beq.w	409c40 <_svfprintf_r+0x4f0>
  409e62:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  409e64:	3507      	adds	r5, #7
  409e66:	f025 0307 	bic.w	r3, r5, #7
  409e6a:	f103 0208 	add.w	r2, r3, #8
  409e6e:	f01b 0f01 	tst.w	fp, #1
  409e72:	920f      	str	r2, [sp, #60]	; 0x3c
  409e74:	e9d3 4500 	ldrd	r4, r5, [r3]
  409e78:	f47f aef4 	bne.w	409c64 <_svfprintf_r+0x514>
  409e7c:	2302      	movs	r3, #2
  409e7e:	e55a      	b.n	409936 <_svfprintf_r+0x1e6>
  409e80:	9311      	str	r3, [sp, #68]	; 0x44
  409e82:	2a00      	cmp	r2, #0
  409e84:	f040 8686 	bne.w	40ab94 <_svfprintf_r+0x1444>
  409e88:	f04b 0b10 	orr.w	fp, fp, #16
  409e8c:	f01b 0f20 	tst.w	fp, #32
  409e90:	d0a1      	beq.n	409dd6 <_svfprintf_r+0x686>
  409e92:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  409e94:	3507      	adds	r5, #7
  409e96:	f025 0507 	bic.w	r5, r5, #7
  409e9a:	e9d5 2300 	ldrd	r2, r3, [r5]
  409e9e:	2a00      	cmp	r2, #0
  409ea0:	f105 0108 	add.w	r1, r5, #8
  409ea4:	461d      	mov	r5, r3
  409ea6:	f173 0300 	sbcs.w	r3, r3, #0
  409eaa:	910f      	str	r1, [sp, #60]	; 0x3c
  409eac:	4614      	mov	r4, r2
  409eae:	daa6      	bge.n	409dfe <_svfprintf_r+0x6ae>
  409eb0:	272d      	movs	r7, #45	; 0x2d
  409eb2:	4264      	negs	r4, r4
  409eb4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  409eb8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  409ebc:	2301      	movs	r3, #1
  409ebe:	e53d      	b.n	40993c <_svfprintf_r+0x1ec>
  409ec0:	9311      	str	r3, [sp, #68]	; 0x44
  409ec2:	2a00      	cmp	r2, #0
  409ec4:	f040 8662 	bne.w	40ab8c <_svfprintf_r+0x143c>
  409ec8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  409eca:	3507      	adds	r5, #7
  409ecc:	f025 0307 	bic.w	r3, r5, #7
  409ed0:	f103 0208 	add.w	r2, r3, #8
  409ed4:	920f      	str	r2, [sp, #60]	; 0x3c
  409ed6:	681a      	ldr	r2, [r3, #0]
  409ed8:	9215      	str	r2, [sp, #84]	; 0x54
  409eda:	685b      	ldr	r3, [r3, #4]
  409edc:	9314      	str	r3, [sp, #80]	; 0x50
  409ede:	9b14      	ldr	r3, [sp, #80]	; 0x50
  409ee0:	9d15      	ldr	r5, [sp, #84]	; 0x54
  409ee2:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  409ee6:	4628      	mov	r0, r5
  409ee8:	4621      	mov	r1, r4
  409eea:	f04f 32ff 	mov.w	r2, #4294967295
  409eee:	4b59      	ldr	r3, [pc, #356]	; (40a054 <_svfprintf_r+0x904>)
  409ef0:	f7fe ffb0 	bl	408e54 <__aeabi_dcmpun>
  409ef4:	2800      	cmp	r0, #0
  409ef6:	f040 834a 	bne.w	40a58e <_svfprintf_r+0xe3e>
  409efa:	4628      	mov	r0, r5
  409efc:	4621      	mov	r1, r4
  409efe:	f04f 32ff 	mov.w	r2, #4294967295
  409f02:	4b54      	ldr	r3, [pc, #336]	; (40a054 <_svfprintf_r+0x904>)
  409f04:	f7fe ff88 	bl	408e18 <__aeabi_dcmple>
  409f08:	2800      	cmp	r0, #0
  409f0a:	f040 8340 	bne.w	40a58e <_svfprintf_r+0xe3e>
  409f0e:	a815      	add	r0, sp, #84	; 0x54
  409f10:	c80d      	ldmia	r0, {r0, r2, r3}
  409f12:	9914      	ldr	r1, [sp, #80]	; 0x50
  409f14:	f7fe ff76 	bl	408e04 <__aeabi_dcmplt>
  409f18:	2800      	cmp	r0, #0
  409f1a:	f040 8530 	bne.w	40a97e <_svfprintf_r+0x122e>
  409f1e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  409f22:	4e4d      	ldr	r6, [pc, #308]	; (40a058 <_svfprintf_r+0x908>)
  409f24:	4b4d      	ldr	r3, [pc, #308]	; (40a05c <_svfprintf_r+0x90c>)
  409f26:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  409f2a:	9007      	str	r0, [sp, #28]
  409f2c:	9811      	ldr	r0, [sp, #68]	; 0x44
  409f2e:	2203      	movs	r2, #3
  409f30:	2100      	movs	r1, #0
  409f32:	9208      	str	r2, [sp, #32]
  409f34:	910a      	str	r1, [sp, #40]	; 0x28
  409f36:	2847      	cmp	r0, #71	; 0x47
  409f38:	bfd8      	it	le
  409f3a:	461e      	movle	r6, r3
  409f3c:	920e      	str	r2, [sp, #56]	; 0x38
  409f3e:	9112      	str	r1, [sp, #72]	; 0x48
  409f40:	e51e      	b.n	409980 <_svfprintf_r+0x230>
  409f42:	f04b 0b08 	orr.w	fp, fp, #8
  409f46:	f89a 3000 	ldrb.w	r3, [sl]
  409f4a:	e459      	b.n	409800 <_svfprintf_r+0xb0>
  409f4c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  409f50:	2300      	movs	r3, #0
  409f52:	461c      	mov	r4, r3
  409f54:	f81a 3b01 	ldrb.w	r3, [sl], #1
  409f58:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  409f5c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  409f60:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  409f64:	2809      	cmp	r0, #9
  409f66:	d9f5      	bls.n	409f54 <_svfprintf_r+0x804>
  409f68:	940d      	str	r4, [sp, #52]	; 0x34
  409f6a:	e44b      	b.n	409804 <_svfprintf_r+0xb4>
  409f6c:	f04b 0b10 	orr.w	fp, fp, #16
  409f70:	9311      	str	r3, [sp, #68]	; 0x44
  409f72:	f01b 0320 	ands.w	r3, fp, #32
  409f76:	f43f ae1d 	beq.w	409bb4 <_svfprintf_r+0x464>
  409f7a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  409f7c:	3507      	adds	r5, #7
  409f7e:	f025 0307 	bic.w	r3, r5, #7
  409f82:	f103 0208 	add.w	r2, r3, #8
  409f86:	e9d3 4500 	ldrd	r4, r5, [r3]
  409f8a:	920f      	str	r2, [sp, #60]	; 0x3c
  409f8c:	2300      	movs	r3, #0
  409f8e:	e4d2      	b.n	409936 <_svfprintf_r+0x1e6>
  409f90:	9311      	str	r3, [sp, #68]	; 0x44
  409f92:	2a00      	cmp	r2, #0
  409f94:	f040 85e7 	bne.w	40ab66 <_svfprintf_r+0x1416>
  409f98:	9a11      	ldr	r2, [sp, #68]	; 0x44
  409f9a:	2a00      	cmp	r2, #0
  409f9c:	f43f aca3 	beq.w	4098e6 <_svfprintf_r+0x196>
  409fa0:	2300      	movs	r3, #0
  409fa2:	2101      	movs	r1, #1
  409fa4:	461f      	mov	r7, r3
  409fa6:	9108      	str	r1, [sp, #32]
  409fa8:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  409fac:	f8cd b01c 	str.w	fp, [sp, #28]
  409fb0:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  409fb4:	930a      	str	r3, [sp, #40]	; 0x28
  409fb6:	9312      	str	r3, [sp, #72]	; 0x48
  409fb8:	910e      	str	r1, [sp, #56]	; 0x38
  409fba:	ae28      	add	r6, sp, #160	; 0xa0
  409fbc:	e4e4      	b.n	409988 <_svfprintf_r+0x238>
  409fbe:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  409fc0:	e534      	b.n	409a2c <_svfprintf_r+0x2dc>
  409fc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  409fc4:	2b65      	cmp	r3, #101	; 0x65
  409fc6:	f340 80a7 	ble.w	40a118 <_svfprintf_r+0x9c8>
  409fca:	a815      	add	r0, sp, #84	; 0x54
  409fcc:	c80d      	ldmia	r0, {r0, r2, r3}
  409fce:	9914      	ldr	r1, [sp, #80]	; 0x50
  409fd0:	f7fe ff0e 	bl	408df0 <__aeabi_dcmpeq>
  409fd4:	2800      	cmp	r0, #0
  409fd6:	f000 8150 	beq.w	40a27a <_svfprintf_r+0xb2a>
  409fda:	9b26      	ldr	r3, [sp, #152]	; 0x98
  409fdc:	4a20      	ldr	r2, [pc, #128]	; (40a060 <_svfprintf_r+0x910>)
  409fde:	f8c8 2000 	str.w	r2, [r8]
  409fe2:	3301      	adds	r3, #1
  409fe4:	3401      	adds	r4, #1
  409fe6:	2201      	movs	r2, #1
  409fe8:	2b07      	cmp	r3, #7
  409fea:	9427      	str	r4, [sp, #156]	; 0x9c
  409fec:	9326      	str	r3, [sp, #152]	; 0x98
  409fee:	f8c8 2004 	str.w	r2, [r8, #4]
  409ff2:	f300 836a 	bgt.w	40a6ca <_svfprintf_r+0xf7a>
  409ff6:	f108 0808 	add.w	r8, r8, #8
  409ffa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  409ffc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  409ffe:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40a000:	4293      	cmp	r3, r2
  40a002:	db03      	blt.n	40a00c <_svfprintf_r+0x8bc>
  40a004:	9b07      	ldr	r3, [sp, #28]
  40a006:	07dd      	lsls	r5, r3, #31
  40a008:	f57f ad82 	bpl.w	409b10 <_svfprintf_r+0x3c0>
  40a00c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40a00e:	9919      	ldr	r1, [sp, #100]	; 0x64
  40a010:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40a012:	f8c8 2000 	str.w	r2, [r8]
  40a016:	3301      	adds	r3, #1
  40a018:	440c      	add	r4, r1
  40a01a:	2b07      	cmp	r3, #7
  40a01c:	f8c8 1004 	str.w	r1, [r8, #4]
  40a020:	9427      	str	r4, [sp, #156]	; 0x9c
  40a022:	9326      	str	r3, [sp, #152]	; 0x98
  40a024:	f300 839e 	bgt.w	40a764 <_svfprintf_r+0x1014>
  40a028:	f108 0808 	add.w	r8, r8, #8
  40a02c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40a02e:	1e5e      	subs	r6, r3, #1
  40a030:	2e00      	cmp	r6, #0
  40a032:	f77f ad6d 	ble.w	409b10 <_svfprintf_r+0x3c0>
  40a036:	2e10      	cmp	r6, #16
  40a038:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40a03a:	4d0a      	ldr	r5, [pc, #40]	; (40a064 <_svfprintf_r+0x914>)
  40a03c:	f340 81f5 	ble.w	40a42a <_svfprintf_r+0xcda>
  40a040:	4622      	mov	r2, r4
  40a042:	2710      	movs	r7, #16
  40a044:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40a048:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40a04a:	e013      	b.n	40a074 <_svfprintf_r+0x924>
  40a04c:	0040f3e0 	.word	0x0040f3e0
  40a050:	0040f3cc 	.word	0x0040f3cc
  40a054:	7fefffff 	.word	0x7fefffff
  40a058:	0040f3c0 	.word	0x0040f3c0
  40a05c:	0040f3bc 	.word	0x0040f3bc
  40a060:	0040f3fc 	.word	0x0040f3fc
  40a064:	0040f410 	.word	0x0040f410
  40a068:	f108 0808 	add.w	r8, r8, #8
  40a06c:	3e10      	subs	r6, #16
  40a06e:	2e10      	cmp	r6, #16
  40a070:	f340 81da 	ble.w	40a428 <_svfprintf_r+0xcd8>
  40a074:	3301      	adds	r3, #1
  40a076:	3210      	adds	r2, #16
  40a078:	2b07      	cmp	r3, #7
  40a07a:	9227      	str	r2, [sp, #156]	; 0x9c
  40a07c:	9326      	str	r3, [sp, #152]	; 0x98
  40a07e:	e888 00a0 	stmia.w	r8, {r5, r7}
  40a082:	ddf1      	ble.n	40a068 <_svfprintf_r+0x918>
  40a084:	aa25      	add	r2, sp, #148	; 0x94
  40a086:	4621      	mov	r1, r4
  40a088:	4658      	mov	r0, fp
  40a08a:	f002 ff87 	bl	40cf9c <__ssprint_r>
  40a08e:	2800      	cmp	r0, #0
  40a090:	f47f ac30 	bne.w	4098f4 <_svfprintf_r+0x1a4>
  40a094:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40a096:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40a098:	46c8      	mov	r8, r9
  40a09a:	e7e7      	b.n	40a06c <_svfprintf_r+0x91c>
  40a09c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40a09e:	9a08      	ldr	r2, [sp, #32]
  40a0a0:	1a9f      	subs	r7, r3, r2
  40a0a2:	2f00      	cmp	r7, #0
  40a0a4:	f77f ace5 	ble.w	409a72 <_svfprintf_r+0x322>
  40a0a8:	2f10      	cmp	r7, #16
  40a0aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40a0ac:	4db6      	ldr	r5, [pc, #728]	; (40a388 <_svfprintf_r+0xc38>)
  40a0ae:	dd27      	ble.n	40a100 <_svfprintf_r+0x9b0>
  40a0b0:	4642      	mov	r2, r8
  40a0b2:	4621      	mov	r1, r4
  40a0b4:	46b0      	mov	r8, r6
  40a0b6:	f04f 0b10 	mov.w	fp, #16
  40a0ba:	462e      	mov	r6, r5
  40a0bc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40a0be:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40a0c0:	e004      	b.n	40a0cc <_svfprintf_r+0x97c>
  40a0c2:	3f10      	subs	r7, #16
  40a0c4:	2f10      	cmp	r7, #16
  40a0c6:	f102 0208 	add.w	r2, r2, #8
  40a0ca:	dd15      	ble.n	40a0f8 <_svfprintf_r+0x9a8>
  40a0cc:	3301      	adds	r3, #1
  40a0ce:	3110      	adds	r1, #16
  40a0d0:	2b07      	cmp	r3, #7
  40a0d2:	9127      	str	r1, [sp, #156]	; 0x9c
  40a0d4:	9326      	str	r3, [sp, #152]	; 0x98
  40a0d6:	e882 0840 	stmia.w	r2, {r6, fp}
  40a0da:	ddf2      	ble.n	40a0c2 <_svfprintf_r+0x972>
  40a0dc:	aa25      	add	r2, sp, #148	; 0x94
  40a0de:	4629      	mov	r1, r5
  40a0e0:	4620      	mov	r0, r4
  40a0e2:	f002 ff5b 	bl	40cf9c <__ssprint_r>
  40a0e6:	2800      	cmp	r0, #0
  40a0e8:	f47f ac04 	bne.w	4098f4 <_svfprintf_r+0x1a4>
  40a0ec:	3f10      	subs	r7, #16
  40a0ee:	2f10      	cmp	r7, #16
  40a0f0:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40a0f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40a0f4:	464a      	mov	r2, r9
  40a0f6:	dce9      	bgt.n	40a0cc <_svfprintf_r+0x97c>
  40a0f8:	4635      	mov	r5, r6
  40a0fa:	460c      	mov	r4, r1
  40a0fc:	4646      	mov	r6, r8
  40a0fe:	4690      	mov	r8, r2
  40a100:	3301      	adds	r3, #1
  40a102:	443c      	add	r4, r7
  40a104:	2b07      	cmp	r3, #7
  40a106:	9427      	str	r4, [sp, #156]	; 0x9c
  40a108:	9326      	str	r3, [sp, #152]	; 0x98
  40a10a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40a10e:	f300 8232 	bgt.w	40a576 <_svfprintf_r+0xe26>
  40a112:	f108 0808 	add.w	r8, r8, #8
  40a116:	e4ac      	b.n	409a72 <_svfprintf_r+0x322>
  40a118:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40a11a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40a11c:	2b01      	cmp	r3, #1
  40a11e:	f340 81fe 	ble.w	40a51e <_svfprintf_r+0xdce>
  40a122:	3701      	adds	r7, #1
  40a124:	3401      	adds	r4, #1
  40a126:	2301      	movs	r3, #1
  40a128:	2f07      	cmp	r7, #7
  40a12a:	9427      	str	r4, [sp, #156]	; 0x9c
  40a12c:	9726      	str	r7, [sp, #152]	; 0x98
  40a12e:	f8c8 6000 	str.w	r6, [r8]
  40a132:	f8c8 3004 	str.w	r3, [r8, #4]
  40a136:	f300 8203 	bgt.w	40a540 <_svfprintf_r+0xdf0>
  40a13a:	f108 0808 	add.w	r8, r8, #8
  40a13e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40a140:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40a142:	f8c8 3000 	str.w	r3, [r8]
  40a146:	3701      	adds	r7, #1
  40a148:	4414      	add	r4, r2
  40a14a:	2f07      	cmp	r7, #7
  40a14c:	9427      	str	r4, [sp, #156]	; 0x9c
  40a14e:	9726      	str	r7, [sp, #152]	; 0x98
  40a150:	f8c8 2004 	str.w	r2, [r8, #4]
  40a154:	f300 8200 	bgt.w	40a558 <_svfprintf_r+0xe08>
  40a158:	f108 0808 	add.w	r8, r8, #8
  40a15c:	a815      	add	r0, sp, #84	; 0x54
  40a15e:	c80d      	ldmia	r0, {r0, r2, r3}
  40a160:	9914      	ldr	r1, [sp, #80]	; 0x50
  40a162:	f7fe fe45 	bl	408df0 <__aeabi_dcmpeq>
  40a166:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40a168:	2800      	cmp	r0, #0
  40a16a:	f040 8101 	bne.w	40a370 <_svfprintf_r+0xc20>
  40a16e:	3b01      	subs	r3, #1
  40a170:	3701      	adds	r7, #1
  40a172:	3601      	adds	r6, #1
  40a174:	441c      	add	r4, r3
  40a176:	2f07      	cmp	r7, #7
  40a178:	9726      	str	r7, [sp, #152]	; 0x98
  40a17a:	9427      	str	r4, [sp, #156]	; 0x9c
  40a17c:	f8c8 6000 	str.w	r6, [r8]
  40a180:	f8c8 3004 	str.w	r3, [r8, #4]
  40a184:	f300 8127 	bgt.w	40a3d6 <_svfprintf_r+0xc86>
  40a188:	f108 0808 	add.w	r8, r8, #8
  40a18c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40a18e:	f8c8 2004 	str.w	r2, [r8, #4]
  40a192:	3701      	adds	r7, #1
  40a194:	4414      	add	r4, r2
  40a196:	ab21      	add	r3, sp, #132	; 0x84
  40a198:	2f07      	cmp	r7, #7
  40a19a:	9427      	str	r4, [sp, #156]	; 0x9c
  40a19c:	9726      	str	r7, [sp, #152]	; 0x98
  40a19e:	f8c8 3000 	str.w	r3, [r8]
  40a1a2:	f77f acb3 	ble.w	409b0c <_svfprintf_r+0x3bc>
  40a1a6:	aa25      	add	r2, sp, #148	; 0x94
  40a1a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40a1aa:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a1ac:	f002 fef6 	bl	40cf9c <__ssprint_r>
  40a1b0:	2800      	cmp	r0, #0
  40a1b2:	f47f ab9f 	bne.w	4098f4 <_svfprintf_r+0x1a4>
  40a1b6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40a1b8:	46c8      	mov	r8, r9
  40a1ba:	e4a9      	b.n	409b10 <_svfprintf_r+0x3c0>
  40a1bc:	aa25      	add	r2, sp, #148	; 0x94
  40a1be:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40a1c0:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a1c2:	f002 feeb 	bl	40cf9c <__ssprint_r>
  40a1c6:	2800      	cmp	r0, #0
  40a1c8:	f43f aceb 	beq.w	409ba2 <_svfprintf_r+0x452>
  40a1cc:	f7ff bb92 	b.w	4098f4 <_svfprintf_r+0x1a4>
  40a1d0:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40a1d4:	2b01      	cmp	r3, #1
  40a1d6:	f000 8134 	beq.w	40a442 <_svfprintf_r+0xcf2>
  40a1da:	2b02      	cmp	r3, #2
  40a1dc:	d125      	bne.n	40a22a <_svfprintf_r+0xada>
  40a1de:	f8cd b01c 	str.w	fp, [sp, #28]
  40a1e2:	2400      	movs	r4, #0
  40a1e4:	2500      	movs	r5, #0
  40a1e6:	e61e      	b.n	409e26 <_svfprintf_r+0x6d6>
  40a1e8:	aa25      	add	r2, sp, #148	; 0x94
  40a1ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40a1ec:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a1ee:	f002 fed5 	bl	40cf9c <__ssprint_r>
  40a1f2:	2800      	cmp	r0, #0
  40a1f4:	f47f ab7e 	bne.w	4098f4 <_svfprintf_r+0x1a4>
  40a1f8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40a1fa:	46c8      	mov	r8, r9
  40a1fc:	e475      	b.n	409aea <_svfprintf_r+0x39a>
  40a1fe:	aa25      	add	r2, sp, #148	; 0x94
  40a200:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40a202:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a204:	f002 feca 	bl	40cf9c <__ssprint_r>
  40a208:	2800      	cmp	r0, #0
  40a20a:	f47f ab73 	bne.w	4098f4 <_svfprintf_r+0x1a4>
  40a20e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40a210:	46c8      	mov	r8, r9
  40a212:	e41b      	b.n	409a4c <_svfprintf_r+0x2fc>
  40a214:	aa25      	add	r2, sp, #148	; 0x94
  40a216:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40a218:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a21a:	f002 febf 	bl	40cf9c <__ssprint_r>
  40a21e:	2800      	cmp	r0, #0
  40a220:	f47f ab68 	bne.w	4098f4 <_svfprintf_r+0x1a4>
  40a224:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40a226:	46c8      	mov	r8, r9
  40a228:	e420      	b.n	409a6c <_svfprintf_r+0x31c>
  40a22a:	f8cd b01c 	str.w	fp, [sp, #28]
  40a22e:	2400      	movs	r4, #0
  40a230:	2500      	movs	r5, #0
  40a232:	4649      	mov	r1, r9
  40a234:	e000      	b.n	40a238 <_svfprintf_r+0xae8>
  40a236:	4631      	mov	r1, r6
  40a238:	08e2      	lsrs	r2, r4, #3
  40a23a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40a23e:	08e8      	lsrs	r0, r5, #3
  40a240:	f004 0307 	and.w	r3, r4, #7
  40a244:	4605      	mov	r5, r0
  40a246:	4614      	mov	r4, r2
  40a248:	3330      	adds	r3, #48	; 0x30
  40a24a:	ea54 0205 	orrs.w	r2, r4, r5
  40a24e:	f801 3c01 	strb.w	r3, [r1, #-1]
  40a252:	f101 36ff 	add.w	r6, r1, #4294967295
  40a256:	d1ee      	bne.n	40a236 <_svfprintf_r+0xae6>
  40a258:	9a07      	ldr	r2, [sp, #28]
  40a25a:	07d2      	lsls	r2, r2, #31
  40a25c:	f57f adf3 	bpl.w	409e46 <_svfprintf_r+0x6f6>
  40a260:	2b30      	cmp	r3, #48	; 0x30
  40a262:	f43f adf0 	beq.w	409e46 <_svfprintf_r+0x6f6>
  40a266:	3902      	subs	r1, #2
  40a268:	2330      	movs	r3, #48	; 0x30
  40a26a:	f806 3c01 	strb.w	r3, [r6, #-1]
  40a26e:	eba9 0301 	sub.w	r3, r9, r1
  40a272:	930e      	str	r3, [sp, #56]	; 0x38
  40a274:	460e      	mov	r6, r1
  40a276:	f7ff bb7b 	b.w	409970 <_svfprintf_r+0x220>
  40a27a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40a27c:	2900      	cmp	r1, #0
  40a27e:	f340 822e 	ble.w	40a6de <_svfprintf_r+0xf8e>
  40a282:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40a284:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40a286:	4293      	cmp	r3, r2
  40a288:	bfa8      	it	ge
  40a28a:	4613      	movge	r3, r2
  40a28c:	2b00      	cmp	r3, #0
  40a28e:	461f      	mov	r7, r3
  40a290:	dd0d      	ble.n	40a2ae <_svfprintf_r+0xb5e>
  40a292:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40a294:	f8c8 6000 	str.w	r6, [r8]
  40a298:	3301      	adds	r3, #1
  40a29a:	443c      	add	r4, r7
  40a29c:	2b07      	cmp	r3, #7
  40a29e:	9427      	str	r4, [sp, #156]	; 0x9c
  40a2a0:	f8c8 7004 	str.w	r7, [r8, #4]
  40a2a4:	9326      	str	r3, [sp, #152]	; 0x98
  40a2a6:	f300 831f 	bgt.w	40a8e8 <_svfprintf_r+0x1198>
  40a2aa:	f108 0808 	add.w	r8, r8, #8
  40a2ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40a2b0:	2f00      	cmp	r7, #0
  40a2b2:	bfa8      	it	ge
  40a2b4:	1bdb      	subge	r3, r3, r7
  40a2b6:	2b00      	cmp	r3, #0
  40a2b8:	461f      	mov	r7, r3
  40a2ba:	f340 80d6 	ble.w	40a46a <_svfprintf_r+0xd1a>
  40a2be:	2f10      	cmp	r7, #16
  40a2c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40a2c2:	4d31      	ldr	r5, [pc, #196]	; (40a388 <_svfprintf_r+0xc38>)
  40a2c4:	f340 81ed 	ble.w	40a6a2 <_svfprintf_r+0xf52>
  40a2c8:	4642      	mov	r2, r8
  40a2ca:	4621      	mov	r1, r4
  40a2cc:	46b0      	mov	r8, r6
  40a2ce:	f04f 0b10 	mov.w	fp, #16
  40a2d2:	462e      	mov	r6, r5
  40a2d4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40a2d6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40a2d8:	e004      	b.n	40a2e4 <_svfprintf_r+0xb94>
  40a2da:	3208      	adds	r2, #8
  40a2dc:	3f10      	subs	r7, #16
  40a2de:	2f10      	cmp	r7, #16
  40a2e0:	f340 81db 	ble.w	40a69a <_svfprintf_r+0xf4a>
  40a2e4:	3301      	adds	r3, #1
  40a2e6:	3110      	adds	r1, #16
  40a2e8:	2b07      	cmp	r3, #7
  40a2ea:	9127      	str	r1, [sp, #156]	; 0x9c
  40a2ec:	9326      	str	r3, [sp, #152]	; 0x98
  40a2ee:	e882 0840 	stmia.w	r2, {r6, fp}
  40a2f2:	ddf2      	ble.n	40a2da <_svfprintf_r+0xb8a>
  40a2f4:	aa25      	add	r2, sp, #148	; 0x94
  40a2f6:	4629      	mov	r1, r5
  40a2f8:	4620      	mov	r0, r4
  40a2fa:	f002 fe4f 	bl	40cf9c <__ssprint_r>
  40a2fe:	2800      	cmp	r0, #0
  40a300:	f47f aaf8 	bne.w	4098f4 <_svfprintf_r+0x1a4>
  40a304:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40a306:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40a308:	464a      	mov	r2, r9
  40a30a:	e7e7      	b.n	40a2dc <_svfprintf_r+0xb8c>
  40a30c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a30e:	930e      	str	r3, [sp, #56]	; 0x38
  40a310:	464e      	mov	r6, r9
  40a312:	f7ff bb2d 	b.w	409970 <_svfprintf_r+0x220>
  40a316:	2d00      	cmp	r5, #0
  40a318:	bf08      	it	eq
  40a31a:	2c0a      	cmpeq	r4, #10
  40a31c:	f0c0 808f 	bcc.w	40a43e <_svfprintf_r+0xcee>
  40a320:	464e      	mov	r6, r9
  40a322:	4620      	mov	r0, r4
  40a324:	4629      	mov	r1, r5
  40a326:	220a      	movs	r2, #10
  40a328:	2300      	movs	r3, #0
  40a32a:	f002 ff55 	bl	40d1d8 <__aeabi_uldivmod>
  40a32e:	3230      	adds	r2, #48	; 0x30
  40a330:	f806 2d01 	strb.w	r2, [r6, #-1]!
  40a334:	4620      	mov	r0, r4
  40a336:	4629      	mov	r1, r5
  40a338:	2300      	movs	r3, #0
  40a33a:	220a      	movs	r2, #10
  40a33c:	f002 ff4c 	bl	40d1d8 <__aeabi_uldivmod>
  40a340:	4604      	mov	r4, r0
  40a342:	460d      	mov	r5, r1
  40a344:	ea54 0305 	orrs.w	r3, r4, r5
  40a348:	d1eb      	bne.n	40a322 <_svfprintf_r+0xbd2>
  40a34a:	eba9 0306 	sub.w	r3, r9, r6
  40a34e:	930e      	str	r3, [sp, #56]	; 0x38
  40a350:	f7ff bb0e 	b.w	409970 <_svfprintf_r+0x220>
  40a354:	aa25      	add	r2, sp, #148	; 0x94
  40a356:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40a358:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a35a:	f002 fe1f 	bl	40cf9c <__ssprint_r>
  40a35e:	2800      	cmp	r0, #0
  40a360:	f47f aac8 	bne.w	4098f4 <_svfprintf_r+0x1a4>
  40a364:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40a368:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40a36a:	46c8      	mov	r8, r9
  40a36c:	f7ff bb5e 	b.w	409a2c <_svfprintf_r+0x2dc>
  40a370:	1e5e      	subs	r6, r3, #1
  40a372:	2e00      	cmp	r6, #0
  40a374:	f77f af0a 	ble.w	40a18c <_svfprintf_r+0xa3c>
  40a378:	2e10      	cmp	r6, #16
  40a37a:	4d03      	ldr	r5, [pc, #12]	; (40a388 <_svfprintf_r+0xc38>)
  40a37c:	dd22      	ble.n	40a3c4 <_svfprintf_r+0xc74>
  40a37e:	4622      	mov	r2, r4
  40a380:	f04f 0b10 	mov.w	fp, #16
  40a384:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40a386:	e006      	b.n	40a396 <_svfprintf_r+0xc46>
  40a388:	0040f410 	.word	0x0040f410
  40a38c:	3e10      	subs	r6, #16
  40a38e:	2e10      	cmp	r6, #16
  40a390:	f108 0808 	add.w	r8, r8, #8
  40a394:	dd15      	ble.n	40a3c2 <_svfprintf_r+0xc72>
  40a396:	3701      	adds	r7, #1
  40a398:	3210      	adds	r2, #16
  40a39a:	2f07      	cmp	r7, #7
  40a39c:	9227      	str	r2, [sp, #156]	; 0x9c
  40a39e:	9726      	str	r7, [sp, #152]	; 0x98
  40a3a0:	e888 0820 	stmia.w	r8, {r5, fp}
  40a3a4:	ddf2      	ble.n	40a38c <_svfprintf_r+0xc3c>
  40a3a6:	aa25      	add	r2, sp, #148	; 0x94
  40a3a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40a3aa:	4620      	mov	r0, r4
  40a3ac:	f002 fdf6 	bl	40cf9c <__ssprint_r>
  40a3b0:	2800      	cmp	r0, #0
  40a3b2:	f47f aa9f 	bne.w	4098f4 <_svfprintf_r+0x1a4>
  40a3b6:	3e10      	subs	r6, #16
  40a3b8:	2e10      	cmp	r6, #16
  40a3ba:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40a3bc:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40a3be:	46c8      	mov	r8, r9
  40a3c0:	dce9      	bgt.n	40a396 <_svfprintf_r+0xc46>
  40a3c2:	4614      	mov	r4, r2
  40a3c4:	3701      	adds	r7, #1
  40a3c6:	4434      	add	r4, r6
  40a3c8:	2f07      	cmp	r7, #7
  40a3ca:	9427      	str	r4, [sp, #156]	; 0x9c
  40a3cc:	9726      	str	r7, [sp, #152]	; 0x98
  40a3ce:	e888 0060 	stmia.w	r8, {r5, r6}
  40a3d2:	f77f aed9 	ble.w	40a188 <_svfprintf_r+0xa38>
  40a3d6:	aa25      	add	r2, sp, #148	; 0x94
  40a3d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40a3da:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a3dc:	f002 fdde 	bl	40cf9c <__ssprint_r>
  40a3e0:	2800      	cmp	r0, #0
  40a3e2:	f47f aa87 	bne.w	4098f4 <_svfprintf_r+0x1a4>
  40a3e6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40a3e8:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40a3ea:	46c8      	mov	r8, r9
  40a3ec:	e6ce      	b.n	40a18c <_svfprintf_r+0xa3c>
  40a3ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a3f0:	6814      	ldr	r4, [r2, #0]
  40a3f2:	4613      	mov	r3, r2
  40a3f4:	3304      	adds	r3, #4
  40a3f6:	17e5      	asrs	r5, r4, #31
  40a3f8:	930f      	str	r3, [sp, #60]	; 0x3c
  40a3fa:	4622      	mov	r2, r4
  40a3fc:	462b      	mov	r3, r5
  40a3fe:	e4fa      	b.n	409df6 <_svfprintf_r+0x6a6>
  40a400:	3204      	adds	r2, #4
  40a402:	681c      	ldr	r4, [r3, #0]
  40a404:	920f      	str	r2, [sp, #60]	; 0x3c
  40a406:	2301      	movs	r3, #1
  40a408:	2500      	movs	r5, #0
  40a40a:	f7ff ba94 	b.w	409936 <_svfprintf_r+0x1e6>
  40a40e:	681c      	ldr	r4, [r3, #0]
  40a410:	3304      	adds	r3, #4
  40a412:	930f      	str	r3, [sp, #60]	; 0x3c
  40a414:	2500      	movs	r5, #0
  40a416:	e421      	b.n	409c5c <_svfprintf_r+0x50c>
  40a418:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40a41a:	460a      	mov	r2, r1
  40a41c:	3204      	adds	r2, #4
  40a41e:	680c      	ldr	r4, [r1, #0]
  40a420:	920f      	str	r2, [sp, #60]	; 0x3c
  40a422:	2500      	movs	r5, #0
  40a424:	f7ff ba87 	b.w	409936 <_svfprintf_r+0x1e6>
  40a428:	4614      	mov	r4, r2
  40a42a:	3301      	adds	r3, #1
  40a42c:	4434      	add	r4, r6
  40a42e:	2b07      	cmp	r3, #7
  40a430:	9427      	str	r4, [sp, #156]	; 0x9c
  40a432:	9326      	str	r3, [sp, #152]	; 0x98
  40a434:	e888 0060 	stmia.w	r8, {r5, r6}
  40a438:	f77f ab68 	ble.w	409b0c <_svfprintf_r+0x3bc>
  40a43c:	e6b3      	b.n	40a1a6 <_svfprintf_r+0xa56>
  40a43e:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40a442:	f8cd b01c 	str.w	fp, [sp, #28]
  40a446:	ae42      	add	r6, sp, #264	; 0x108
  40a448:	3430      	adds	r4, #48	; 0x30
  40a44a:	2301      	movs	r3, #1
  40a44c:	f806 4d41 	strb.w	r4, [r6, #-65]!
  40a450:	930e      	str	r3, [sp, #56]	; 0x38
  40a452:	f7ff ba8d 	b.w	409970 <_svfprintf_r+0x220>
  40a456:	aa25      	add	r2, sp, #148	; 0x94
  40a458:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40a45a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a45c:	f002 fd9e 	bl	40cf9c <__ssprint_r>
  40a460:	2800      	cmp	r0, #0
  40a462:	f47f aa47 	bne.w	4098f4 <_svfprintf_r+0x1a4>
  40a466:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40a468:	46c8      	mov	r8, r9
  40a46a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40a46c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40a46e:	429a      	cmp	r2, r3
  40a470:	db44      	blt.n	40a4fc <_svfprintf_r+0xdac>
  40a472:	9b07      	ldr	r3, [sp, #28]
  40a474:	07d9      	lsls	r1, r3, #31
  40a476:	d441      	bmi.n	40a4fc <_svfprintf_r+0xdac>
  40a478:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40a47a:	9812      	ldr	r0, [sp, #72]	; 0x48
  40a47c:	1a9a      	subs	r2, r3, r2
  40a47e:	1a1d      	subs	r5, r3, r0
  40a480:	4295      	cmp	r5, r2
  40a482:	bfa8      	it	ge
  40a484:	4615      	movge	r5, r2
  40a486:	2d00      	cmp	r5, #0
  40a488:	dd0e      	ble.n	40a4a8 <_svfprintf_r+0xd58>
  40a48a:	9926      	ldr	r1, [sp, #152]	; 0x98
  40a48c:	f8c8 5004 	str.w	r5, [r8, #4]
  40a490:	3101      	adds	r1, #1
  40a492:	4406      	add	r6, r0
  40a494:	442c      	add	r4, r5
  40a496:	2907      	cmp	r1, #7
  40a498:	f8c8 6000 	str.w	r6, [r8]
  40a49c:	9427      	str	r4, [sp, #156]	; 0x9c
  40a49e:	9126      	str	r1, [sp, #152]	; 0x98
  40a4a0:	f300 823b 	bgt.w	40a91a <_svfprintf_r+0x11ca>
  40a4a4:	f108 0808 	add.w	r8, r8, #8
  40a4a8:	2d00      	cmp	r5, #0
  40a4aa:	bfac      	ite	ge
  40a4ac:	1b56      	subge	r6, r2, r5
  40a4ae:	4616      	movlt	r6, r2
  40a4b0:	2e00      	cmp	r6, #0
  40a4b2:	f77f ab2d 	ble.w	409b10 <_svfprintf_r+0x3c0>
  40a4b6:	2e10      	cmp	r6, #16
  40a4b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40a4ba:	4db0      	ldr	r5, [pc, #704]	; (40a77c <_svfprintf_r+0x102c>)
  40a4bc:	ddb5      	ble.n	40a42a <_svfprintf_r+0xcda>
  40a4be:	4622      	mov	r2, r4
  40a4c0:	2710      	movs	r7, #16
  40a4c2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40a4c6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40a4c8:	e004      	b.n	40a4d4 <_svfprintf_r+0xd84>
  40a4ca:	f108 0808 	add.w	r8, r8, #8
  40a4ce:	3e10      	subs	r6, #16
  40a4d0:	2e10      	cmp	r6, #16
  40a4d2:	dda9      	ble.n	40a428 <_svfprintf_r+0xcd8>
  40a4d4:	3301      	adds	r3, #1
  40a4d6:	3210      	adds	r2, #16
  40a4d8:	2b07      	cmp	r3, #7
  40a4da:	9227      	str	r2, [sp, #156]	; 0x9c
  40a4dc:	9326      	str	r3, [sp, #152]	; 0x98
  40a4de:	e888 00a0 	stmia.w	r8, {r5, r7}
  40a4e2:	ddf2      	ble.n	40a4ca <_svfprintf_r+0xd7a>
  40a4e4:	aa25      	add	r2, sp, #148	; 0x94
  40a4e6:	4621      	mov	r1, r4
  40a4e8:	4658      	mov	r0, fp
  40a4ea:	f002 fd57 	bl	40cf9c <__ssprint_r>
  40a4ee:	2800      	cmp	r0, #0
  40a4f0:	f47f aa00 	bne.w	4098f4 <_svfprintf_r+0x1a4>
  40a4f4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40a4f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40a4f8:	46c8      	mov	r8, r9
  40a4fa:	e7e8      	b.n	40a4ce <_svfprintf_r+0xd7e>
  40a4fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40a4fe:	9819      	ldr	r0, [sp, #100]	; 0x64
  40a500:	991a      	ldr	r1, [sp, #104]	; 0x68
  40a502:	f8c8 1000 	str.w	r1, [r8]
  40a506:	3301      	adds	r3, #1
  40a508:	4404      	add	r4, r0
  40a50a:	2b07      	cmp	r3, #7
  40a50c:	9427      	str	r4, [sp, #156]	; 0x9c
  40a50e:	f8c8 0004 	str.w	r0, [r8, #4]
  40a512:	9326      	str	r3, [sp, #152]	; 0x98
  40a514:	f300 81f5 	bgt.w	40a902 <_svfprintf_r+0x11b2>
  40a518:	f108 0808 	add.w	r8, r8, #8
  40a51c:	e7ac      	b.n	40a478 <_svfprintf_r+0xd28>
  40a51e:	9b07      	ldr	r3, [sp, #28]
  40a520:	07da      	lsls	r2, r3, #31
  40a522:	f53f adfe 	bmi.w	40a122 <_svfprintf_r+0x9d2>
  40a526:	3701      	adds	r7, #1
  40a528:	3401      	adds	r4, #1
  40a52a:	2301      	movs	r3, #1
  40a52c:	2f07      	cmp	r7, #7
  40a52e:	9427      	str	r4, [sp, #156]	; 0x9c
  40a530:	9726      	str	r7, [sp, #152]	; 0x98
  40a532:	f8c8 6000 	str.w	r6, [r8]
  40a536:	f8c8 3004 	str.w	r3, [r8, #4]
  40a53a:	f77f ae25 	ble.w	40a188 <_svfprintf_r+0xa38>
  40a53e:	e74a      	b.n	40a3d6 <_svfprintf_r+0xc86>
  40a540:	aa25      	add	r2, sp, #148	; 0x94
  40a542:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40a544:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a546:	f002 fd29 	bl	40cf9c <__ssprint_r>
  40a54a:	2800      	cmp	r0, #0
  40a54c:	f47f a9d2 	bne.w	4098f4 <_svfprintf_r+0x1a4>
  40a550:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40a552:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40a554:	46c8      	mov	r8, r9
  40a556:	e5f2      	b.n	40a13e <_svfprintf_r+0x9ee>
  40a558:	aa25      	add	r2, sp, #148	; 0x94
  40a55a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40a55c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a55e:	f002 fd1d 	bl	40cf9c <__ssprint_r>
  40a562:	2800      	cmp	r0, #0
  40a564:	f47f a9c6 	bne.w	4098f4 <_svfprintf_r+0x1a4>
  40a568:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40a56a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40a56c:	46c8      	mov	r8, r9
  40a56e:	e5f5      	b.n	40a15c <_svfprintf_r+0xa0c>
  40a570:	464e      	mov	r6, r9
  40a572:	f7ff b9fd 	b.w	409970 <_svfprintf_r+0x220>
  40a576:	aa25      	add	r2, sp, #148	; 0x94
  40a578:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40a57a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a57c:	f002 fd0e 	bl	40cf9c <__ssprint_r>
  40a580:	2800      	cmp	r0, #0
  40a582:	f47f a9b7 	bne.w	4098f4 <_svfprintf_r+0x1a4>
  40a586:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40a588:	46c8      	mov	r8, r9
  40a58a:	f7ff ba72 	b.w	409a72 <_svfprintf_r+0x322>
  40a58e:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40a590:	4622      	mov	r2, r4
  40a592:	4620      	mov	r0, r4
  40a594:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40a596:	4623      	mov	r3, r4
  40a598:	4621      	mov	r1, r4
  40a59a:	f7fe fc5b 	bl	408e54 <__aeabi_dcmpun>
  40a59e:	2800      	cmp	r0, #0
  40a5a0:	f040 8286 	bne.w	40aab0 <_svfprintf_r+0x1360>
  40a5a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a5a6:	3301      	adds	r3, #1
  40a5a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40a5aa:	f023 0320 	bic.w	r3, r3, #32
  40a5ae:	930e      	str	r3, [sp, #56]	; 0x38
  40a5b0:	f000 81e2 	beq.w	40a978 <_svfprintf_r+0x1228>
  40a5b4:	2b47      	cmp	r3, #71	; 0x47
  40a5b6:	f000 811e 	beq.w	40a7f6 <_svfprintf_r+0x10a6>
  40a5ba:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40a5be:	9307      	str	r3, [sp, #28]
  40a5c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40a5c2:	1e1f      	subs	r7, r3, #0
  40a5c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40a5c6:	9308      	str	r3, [sp, #32]
  40a5c8:	bfbb      	ittet	lt
  40a5ca:	463b      	movlt	r3, r7
  40a5cc:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  40a5d0:	2300      	movge	r3, #0
  40a5d2:	232d      	movlt	r3, #45	; 0x2d
  40a5d4:	9310      	str	r3, [sp, #64]	; 0x40
  40a5d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40a5d8:	2b66      	cmp	r3, #102	; 0x66
  40a5da:	f000 81bb 	beq.w	40a954 <_svfprintf_r+0x1204>
  40a5de:	2b46      	cmp	r3, #70	; 0x46
  40a5e0:	f000 80df 	beq.w	40a7a2 <_svfprintf_r+0x1052>
  40a5e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40a5e6:	9a08      	ldr	r2, [sp, #32]
  40a5e8:	2b45      	cmp	r3, #69	; 0x45
  40a5ea:	bf0c      	ite	eq
  40a5ec:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  40a5ee:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  40a5f0:	a823      	add	r0, sp, #140	; 0x8c
  40a5f2:	a920      	add	r1, sp, #128	; 0x80
  40a5f4:	bf08      	it	eq
  40a5f6:	1c5d      	addeq	r5, r3, #1
  40a5f8:	9004      	str	r0, [sp, #16]
  40a5fa:	9103      	str	r1, [sp, #12]
  40a5fc:	a81f      	add	r0, sp, #124	; 0x7c
  40a5fe:	2102      	movs	r1, #2
  40a600:	463b      	mov	r3, r7
  40a602:	9002      	str	r0, [sp, #8]
  40a604:	9501      	str	r5, [sp, #4]
  40a606:	9100      	str	r1, [sp, #0]
  40a608:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a60a:	f000 fb75 	bl	40acf8 <_dtoa_r>
  40a60e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40a610:	2b67      	cmp	r3, #103	; 0x67
  40a612:	4606      	mov	r6, r0
  40a614:	f040 81e0 	bne.w	40a9d8 <_svfprintf_r+0x1288>
  40a618:	f01b 0f01 	tst.w	fp, #1
  40a61c:	f000 8246 	beq.w	40aaac <_svfprintf_r+0x135c>
  40a620:	1974      	adds	r4, r6, r5
  40a622:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40a624:	9808      	ldr	r0, [sp, #32]
  40a626:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40a628:	4639      	mov	r1, r7
  40a62a:	f7fe fbe1 	bl	408df0 <__aeabi_dcmpeq>
  40a62e:	2800      	cmp	r0, #0
  40a630:	f040 8165 	bne.w	40a8fe <_svfprintf_r+0x11ae>
  40a634:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40a636:	42a3      	cmp	r3, r4
  40a638:	d206      	bcs.n	40a648 <_svfprintf_r+0xef8>
  40a63a:	2130      	movs	r1, #48	; 0x30
  40a63c:	1c5a      	adds	r2, r3, #1
  40a63e:	9223      	str	r2, [sp, #140]	; 0x8c
  40a640:	7019      	strb	r1, [r3, #0]
  40a642:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40a644:	429c      	cmp	r4, r3
  40a646:	d8f9      	bhi.n	40a63c <_svfprintf_r+0xeec>
  40a648:	1b9b      	subs	r3, r3, r6
  40a64a:	9313      	str	r3, [sp, #76]	; 0x4c
  40a64c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40a64e:	2b47      	cmp	r3, #71	; 0x47
  40a650:	f000 80e9 	beq.w	40a826 <_svfprintf_r+0x10d6>
  40a654:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40a656:	2b65      	cmp	r3, #101	; 0x65
  40a658:	f340 81cd 	ble.w	40a9f6 <_svfprintf_r+0x12a6>
  40a65c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40a65e:	2b66      	cmp	r3, #102	; 0x66
  40a660:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40a662:	9312      	str	r3, [sp, #72]	; 0x48
  40a664:	f000 819e 	beq.w	40a9a4 <_svfprintf_r+0x1254>
  40a668:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40a66a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40a66c:	4619      	mov	r1, r3
  40a66e:	4291      	cmp	r1, r2
  40a670:	f300 818a 	bgt.w	40a988 <_svfprintf_r+0x1238>
  40a674:	f01b 0f01 	tst.w	fp, #1
  40a678:	f040 8213 	bne.w	40aaa2 <_svfprintf_r+0x1352>
  40a67c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40a680:	9308      	str	r3, [sp, #32]
  40a682:	2367      	movs	r3, #103	; 0x67
  40a684:	920e      	str	r2, [sp, #56]	; 0x38
  40a686:	9311      	str	r3, [sp, #68]	; 0x44
  40a688:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40a68a:	2b00      	cmp	r3, #0
  40a68c:	f040 80c4 	bne.w	40a818 <_svfprintf_r+0x10c8>
  40a690:	930a      	str	r3, [sp, #40]	; 0x28
  40a692:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40a696:	f7ff b973 	b.w	409980 <_svfprintf_r+0x230>
  40a69a:	4635      	mov	r5, r6
  40a69c:	460c      	mov	r4, r1
  40a69e:	4646      	mov	r6, r8
  40a6a0:	4690      	mov	r8, r2
  40a6a2:	3301      	adds	r3, #1
  40a6a4:	443c      	add	r4, r7
  40a6a6:	2b07      	cmp	r3, #7
  40a6a8:	9427      	str	r4, [sp, #156]	; 0x9c
  40a6aa:	9326      	str	r3, [sp, #152]	; 0x98
  40a6ac:	e888 00a0 	stmia.w	r8, {r5, r7}
  40a6b0:	f73f aed1 	bgt.w	40a456 <_svfprintf_r+0xd06>
  40a6b4:	f108 0808 	add.w	r8, r8, #8
  40a6b8:	e6d7      	b.n	40a46a <_svfprintf_r+0xd1a>
  40a6ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a6bc:	6813      	ldr	r3, [r2, #0]
  40a6be:	3204      	adds	r2, #4
  40a6c0:	920f      	str	r2, [sp, #60]	; 0x3c
  40a6c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40a6c4:	601a      	str	r2, [r3, #0]
  40a6c6:	f7ff b86a 	b.w	40979e <_svfprintf_r+0x4e>
  40a6ca:	aa25      	add	r2, sp, #148	; 0x94
  40a6cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40a6ce:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a6d0:	f002 fc64 	bl	40cf9c <__ssprint_r>
  40a6d4:	2800      	cmp	r0, #0
  40a6d6:	f47f a90d 	bne.w	4098f4 <_svfprintf_r+0x1a4>
  40a6da:	46c8      	mov	r8, r9
  40a6dc:	e48d      	b.n	409ffa <_svfprintf_r+0x8aa>
  40a6de:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40a6e0:	4a27      	ldr	r2, [pc, #156]	; (40a780 <_svfprintf_r+0x1030>)
  40a6e2:	f8c8 2000 	str.w	r2, [r8]
  40a6e6:	3301      	adds	r3, #1
  40a6e8:	3401      	adds	r4, #1
  40a6ea:	2201      	movs	r2, #1
  40a6ec:	2b07      	cmp	r3, #7
  40a6ee:	9427      	str	r4, [sp, #156]	; 0x9c
  40a6f0:	9326      	str	r3, [sp, #152]	; 0x98
  40a6f2:	f8c8 2004 	str.w	r2, [r8, #4]
  40a6f6:	dc72      	bgt.n	40a7de <_svfprintf_r+0x108e>
  40a6f8:	f108 0808 	add.w	r8, r8, #8
  40a6fc:	b929      	cbnz	r1, 40a70a <_svfprintf_r+0xfba>
  40a6fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40a700:	b91b      	cbnz	r3, 40a70a <_svfprintf_r+0xfba>
  40a702:	9b07      	ldr	r3, [sp, #28]
  40a704:	07d8      	lsls	r0, r3, #31
  40a706:	f57f aa03 	bpl.w	409b10 <_svfprintf_r+0x3c0>
  40a70a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40a70c:	9819      	ldr	r0, [sp, #100]	; 0x64
  40a70e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40a710:	f8c8 2000 	str.w	r2, [r8]
  40a714:	3301      	adds	r3, #1
  40a716:	4602      	mov	r2, r0
  40a718:	4422      	add	r2, r4
  40a71a:	2b07      	cmp	r3, #7
  40a71c:	9227      	str	r2, [sp, #156]	; 0x9c
  40a71e:	f8c8 0004 	str.w	r0, [r8, #4]
  40a722:	9326      	str	r3, [sp, #152]	; 0x98
  40a724:	f300 818d 	bgt.w	40aa42 <_svfprintf_r+0x12f2>
  40a728:	f108 0808 	add.w	r8, r8, #8
  40a72c:	2900      	cmp	r1, #0
  40a72e:	f2c0 8165 	blt.w	40a9fc <_svfprintf_r+0x12ac>
  40a732:	9913      	ldr	r1, [sp, #76]	; 0x4c
  40a734:	f8c8 6000 	str.w	r6, [r8]
  40a738:	3301      	adds	r3, #1
  40a73a:	188c      	adds	r4, r1, r2
  40a73c:	2b07      	cmp	r3, #7
  40a73e:	9427      	str	r4, [sp, #156]	; 0x9c
  40a740:	9326      	str	r3, [sp, #152]	; 0x98
  40a742:	f8c8 1004 	str.w	r1, [r8, #4]
  40a746:	f77f a9e1 	ble.w	409b0c <_svfprintf_r+0x3bc>
  40a74a:	e52c      	b.n	40a1a6 <_svfprintf_r+0xa56>
  40a74c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40a74e:	9909      	ldr	r1, [sp, #36]	; 0x24
  40a750:	6813      	ldr	r3, [r2, #0]
  40a752:	17cd      	asrs	r5, r1, #31
  40a754:	4608      	mov	r0, r1
  40a756:	3204      	adds	r2, #4
  40a758:	4629      	mov	r1, r5
  40a75a:	920f      	str	r2, [sp, #60]	; 0x3c
  40a75c:	e9c3 0100 	strd	r0, r1, [r3]
  40a760:	f7ff b81d 	b.w	40979e <_svfprintf_r+0x4e>
  40a764:	aa25      	add	r2, sp, #148	; 0x94
  40a766:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40a768:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a76a:	f002 fc17 	bl	40cf9c <__ssprint_r>
  40a76e:	2800      	cmp	r0, #0
  40a770:	f47f a8c0 	bne.w	4098f4 <_svfprintf_r+0x1a4>
  40a774:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40a776:	46c8      	mov	r8, r9
  40a778:	e458      	b.n	40a02c <_svfprintf_r+0x8dc>
  40a77a:	bf00      	nop
  40a77c:	0040f410 	.word	0x0040f410
  40a780:	0040f3fc 	.word	0x0040f3fc
  40a784:	2140      	movs	r1, #64	; 0x40
  40a786:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a788:	f001 fb42 	bl	40be10 <_malloc_r>
  40a78c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40a78e:	6010      	str	r0, [r2, #0]
  40a790:	6110      	str	r0, [r2, #16]
  40a792:	2800      	cmp	r0, #0
  40a794:	f000 81f2 	beq.w	40ab7c <_svfprintf_r+0x142c>
  40a798:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40a79a:	2340      	movs	r3, #64	; 0x40
  40a79c:	6153      	str	r3, [r2, #20]
  40a79e:	f7fe bfee 	b.w	40977e <_svfprintf_r+0x2e>
  40a7a2:	a823      	add	r0, sp, #140	; 0x8c
  40a7a4:	a920      	add	r1, sp, #128	; 0x80
  40a7a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40a7a8:	9004      	str	r0, [sp, #16]
  40a7aa:	9103      	str	r1, [sp, #12]
  40a7ac:	a81f      	add	r0, sp, #124	; 0x7c
  40a7ae:	2103      	movs	r1, #3
  40a7b0:	9002      	str	r0, [sp, #8]
  40a7b2:	9a08      	ldr	r2, [sp, #32]
  40a7b4:	9401      	str	r4, [sp, #4]
  40a7b6:	463b      	mov	r3, r7
  40a7b8:	9100      	str	r1, [sp, #0]
  40a7ba:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a7bc:	f000 fa9c 	bl	40acf8 <_dtoa_r>
  40a7c0:	4625      	mov	r5, r4
  40a7c2:	4606      	mov	r6, r0
  40a7c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40a7c6:	2b46      	cmp	r3, #70	; 0x46
  40a7c8:	eb06 0405 	add.w	r4, r6, r5
  40a7cc:	f47f af29 	bne.w	40a622 <_svfprintf_r+0xed2>
  40a7d0:	7833      	ldrb	r3, [r6, #0]
  40a7d2:	2b30      	cmp	r3, #48	; 0x30
  40a7d4:	f000 8178 	beq.w	40aac8 <_svfprintf_r+0x1378>
  40a7d8:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  40a7da:	442c      	add	r4, r5
  40a7dc:	e721      	b.n	40a622 <_svfprintf_r+0xed2>
  40a7de:	aa25      	add	r2, sp, #148	; 0x94
  40a7e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40a7e2:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a7e4:	f002 fbda 	bl	40cf9c <__ssprint_r>
  40a7e8:	2800      	cmp	r0, #0
  40a7ea:	f47f a883 	bne.w	4098f4 <_svfprintf_r+0x1a4>
  40a7ee:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40a7f0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40a7f2:	46c8      	mov	r8, r9
  40a7f4:	e782      	b.n	40a6fc <_svfprintf_r+0xfac>
  40a7f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a7f8:	2b00      	cmp	r3, #0
  40a7fa:	bf08      	it	eq
  40a7fc:	2301      	moveq	r3, #1
  40a7fe:	930a      	str	r3, [sp, #40]	; 0x28
  40a800:	e6db      	b.n	40a5ba <_svfprintf_r+0xe6a>
  40a802:	4630      	mov	r0, r6
  40a804:	940a      	str	r4, [sp, #40]	; 0x28
  40a806:	f002 fb5b 	bl	40cec0 <strlen>
  40a80a:	950f      	str	r5, [sp, #60]	; 0x3c
  40a80c:	900e      	str	r0, [sp, #56]	; 0x38
  40a80e:	f8cd b01c 	str.w	fp, [sp, #28]
  40a812:	4603      	mov	r3, r0
  40a814:	f7ff b9f9 	b.w	409c0a <_svfprintf_r+0x4ba>
  40a818:	272d      	movs	r7, #45	; 0x2d
  40a81a:	2300      	movs	r3, #0
  40a81c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40a820:	930a      	str	r3, [sp, #40]	; 0x28
  40a822:	f7ff b8ae 	b.w	409982 <_svfprintf_r+0x232>
  40a826:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40a828:	9312      	str	r3, [sp, #72]	; 0x48
  40a82a:	461a      	mov	r2, r3
  40a82c:	3303      	adds	r3, #3
  40a82e:	db04      	blt.n	40a83a <_svfprintf_r+0x10ea>
  40a830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a832:	4619      	mov	r1, r3
  40a834:	4291      	cmp	r1, r2
  40a836:	f6bf af17 	bge.w	40a668 <_svfprintf_r+0xf18>
  40a83a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40a83c:	3b02      	subs	r3, #2
  40a83e:	9311      	str	r3, [sp, #68]	; 0x44
  40a840:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  40a844:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  40a848:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40a84a:	3b01      	subs	r3, #1
  40a84c:	2b00      	cmp	r3, #0
  40a84e:	931f      	str	r3, [sp, #124]	; 0x7c
  40a850:	bfbd      	ittte	lt
  40a852:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  40a854:	f1c3 0301 	rsblt	r3, r3, #1
  40a858:	222d      	movlt	r2, #45	; 0x2d
  40a85a:	222b      	movge	r2, #43	; 0x2b
  40a85c:	2b09      	cmp	r3, #9
  40a85e:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  40a862:	f340 8116 	ble.w	40aa92 <_svfprintf_r+0x1342>
  40a866:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  40a86a:	4620      	mov	r0, r4
  40a86c:	4dab      	ldr	r5, [pc, #684]	; (40ab1c <_svfprintf_r+0x13cc>)
  40a86e:	e000      	b.n	40a872 <_svfprintf_r+0x1122>
  40a870:	4610      	mov	r0, r2
  40a872:	fb85 1203 	smull	r1, r2, r5, r3
  40a876:	17d9      	asrs	r1, r3, #31
  40a878:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  40a87c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40a880:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  40a884:	3230      	adds	r2, #48	; 0x30
  40a886:	2909      	cmp	r1, #9
  40a888:	f800 2c01 	strb.w	r2, [r0, #-1]
  40a88c:	460b      	mov	r3, r1
  40a88e:	f100 32ff 	add.w	r2, r0, #4294967295
  40a892:	dced      	bgt.n	40a870 <_svfprintf_r+0x1120>
  40a894:	3330      	adds	r3, #48	; 0x30
  40a896:	3802      	subs	r0, #2
  40a898:	b2d9      	uxtb	r1, r3
  40a89a:	4284      	cmp	r4, r0
  40a89c:	f802 1c01 	strb.w	r1, [r2, #-1]
  40a8a0:	f240 8165 	bls.w	40ab6e <_svfprintf_r+0x141e>
  40a8a4:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  40a8a8:	4613      	mov	r3, r2
  40a8aa:	e001      	b.n	40a8b0 <_svfprintf_r+0x1160>
  40a8ac:	f813 1b01 	ldrb.w	r1, [r3], #1
  40a8b0:	f800 1b01 	strb.w	r1, [r0], #1
  40a8b4:	42a3      	cmp	r3, r4
  40a8b6:	d1f9      	bne.n	40a8ac <_svfprintf_r+0x115c>
  40a8b8:	3301      	adds	r3, #1
  40a8ba:	1a9b      	subs	r3, r3, r2
  40a8bc:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  40a8c0:	4413      	add	r3, r2
  40a8c2:	aa21      	add	r2, sp, #132	; 0x84
  40a8c4:	1a9b      	subs	r3, r3, r2
  40a8c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40a8c8:	931b      	str	r3, [sp, #108]	; 0x6c
  40a8ca:	2a01      	cmp	r2, #1
  40a8cc:	4413      	add	r3, r2
  40a8ce:	930e      	str	r3, [sp, #56]	; 0x38
  40a8d0:	f340 8119 	ble.w	40ab06 <_svfprintf_r+0x13b6>
  40a8d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40a8d6:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40a8d8:	4413      	add	r3, r2
  40a8da:	930e      	str	r3, [sp, #56]	; 0x38
  40a8dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40a8e0:	9308      	str	r3, [sp, #32]
  40a8e2:	2300      	movs	r3, #0
  40a8e4:	9312      	str	r3, [sp, #72]	; 0x48
  40a8e6:	e6cf      	b.n	40a688 <_svfprintf_r+0xf38>
  40a8e8:	aa25      	add	r2, sp, #148	; 0x94
  40a8ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40a8ec:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a8ee:	f002 fb55 	bl	40cf9c <__ssprint_r>
  40a8f2:	2800      	cmp	r0, #0
  40a8f4:	f47e affe 	bne.w	4098f4 <_svfprintf_r+0x1a4>
  40a8f8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40a8fa:	46c8      	mov	r8, r9
  40a8fc:	e4d7      	b.n	40a2ae <_svfprintf_r+0xb5e>
  40a8fe:	4623      	mov	r3, r4
  40a900:	e6a2      	b.n	40a648 <_svfprintf_r+0xef8>
  40a902:	aa25      	add	r2, sp, #148	; 0x94
  40a904:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40a906:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a908:	f002 fb48 	bl	40cf9c <__ssprint_r>
  40a90c:	2800      	cmp	r0, #0
  40a90e:	f47e aff1 	bne.w	4098f4 <_svfprintf_r+0x1a4>
  40a912:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40a914:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40a916:	46c8      	mov	r8, r9
  40a918:	e5ae      	b.n	40a478 <_svfprintf_r+0xd28>
  40a91a:	aa25      	add	r2, sp, #148	; 0x94
  40a91c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40a91e:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a920:	f002 fb3c 	bl	40cf9c <__ssprint_r>
  40a924:	2800      	cmp	r0, #0
  40a926:	f47e afe5 	bne.w	4098f4 <_svfprintf_r+0x1a4>
  40a92a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40a92c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40a92e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40a930:	1a9a      	subs	r2, r3, r2
  40a932:	46c8      	mov	r8, r9
  40a934:	e5b8      	b.n	40a4a8 <_svfprintf_r+0xd58>
  40a936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a938:	9612      	str	r6, [sp, #72]	; 0x48
  40a93a:	2b06      	cmp	r3, #6
  40a93c:	bf28      	it	cs
  40a93e:	2306      	movcs	r3, #6
  40a940:	960a      	str	r6, [sp, #40]	; 0x28
  40a942:	4637      	mov	r7, r6
  40a944:	9308      	str	r3, [sp, #32]
  40a946:	950f      	str	r5, [sp, #60]	; 0x3c
  40a948:	f8cd b01c 	str.w	fp, [sp, #28]
  40a94c:	930e      	str	r3, [sp, #56]	; 0x38
  40a94e:	4e74      	ldr	r6, [pc, #464]	; (40ab20 <_svfprintf_r+0x13d0>)
  40a950:	f7ff b816 	b.w	409980 <_svfprintf_r+0x230>
  40a954:	a823      	add	r0, sp, #140	; 0x8c
  40a956:	a920      	add	r1, sp, #128	; 0x80
  40a958:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40a95a:	9004      	str	r0, [sp, #16]
  40a95c:	9103      	str	r1, [sp, #12]
  40a95e:	a81f      	add	r0, sp, #124	; 0x7c
  40a960:	2103      	movs	r1, #3
  40a962:	9002      	str	r0, [sp, #8]
  40a964:	9a08      	ldr	r2, [sp, #32]
  40a966:	9501      	str	r5, [sp, #4]
  40a968:	463b      	mov	r3, r7
  40a96a:	9100      	str	r1, [sp, #0]
  40a96c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40a96e:	f000 f9c3 	bl	40acf8 <_dtoa_r>
  40a972:	4606      	mov	r6, r0
  40a974:	1944      	adds	r4, r0, r5
  40a976:	e72b      	b.n	40a7d0 <_svfprintf_r+0x1080>
  40a978:	2306      	movs	r3, #6
  40a97a:	930a      	str	r3, [sp, #40]	; 0x28
  40a97c:	e61d      	b.n	40a5ba <_svfprintf_r+0xe6a>
  40a97e:	272d      	movs	r7, #45	; 0x2d
  40a980:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40a984:	f7ff bacd 	b.w	409f22 <_svfprintf_r+0x7d2>
  40a988:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40a98a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40a98c:	4413      	add	r3, r2
  40a98e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40a990:	930e      	str	r3, [sp, #56]	; 0x38
  40a992:	2a00      	cmp	r2, #0
  40a994:	f340 80b0 	ble.w	40aaf8 <_svfprintf_r+0x13a8>
  40a998:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40a99c:	9308      	str	r3, [sp, #32]
  40a99e:	2367      	movs	r3, #103	; 0x67
  40a9a0:	9311      	str	r3, [sp, #68]	; 0x44
  40a9a2:	e671      	b.n	40a688 <_svfprintf_r+0xf38>
  40a9a4:	2b00      	cmp	r3, #0
  40a9a6:	f340 80c3 	ble.w	40ab30 <_svfprintf_r+0x13e0>
  40a9aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40a9ac:	2a00      	cmp	r2, #0
  40a9ae:	f040 8099 	bne.w	40aae4 <_svfprintf_r+0x1394>
  40a9b2:	f01b 0f01 	tst.w	fp, #1
  40a9b6:	f040 8095 	bne.w	40aae4 <_svfprintf_r+0x1394>
  40a9ba:	9308      	str	r3, [sp, #32]
  40a9bc:	930e      	str	r3, [sp, #56]	; 0x38
  40a9be:	e663      	b.n	40a688 <_svfprintf_r+0xf38>
  40a9c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40a9c2:	9308      	str	r3, [sp, #32]
  40a9c4:	930e      	str	r3, [sp, #56]	; 0x38
  40a9c6:	900a      	str	r0, [sp, #40]	; 0x28
  40a9c8:	950f      	str	r5, [sp, #60]	; 0x3c
  40a9ca:	f8cd b01c 	str.w	fp, [sp, #28]
  40a9ce:	9012      	str	r0, [sp, #72]	; 0x48
  40a9d0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40a9d4:	f7fe bfd4 	b.w	409980 <_svfprintf_r+0x230>
  40a9d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40a9da:	2b47      	cmp	r3, #71	; 0x47
  40a9dc:	f47f ae20 	bne.w	40a620 <_svfprintf_r+0xed0>
  40a9e0:	f01b 0f01 	tst.w	fp, #1
  40a9e4:	f47f aeee 	bne.w	40a7c4 <_svfprintf_r+0x1074>
  40a9e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40a9ea:	1b9b      	subs	r3, r3, r6
  40a9ec:	9313      	str	r3, [sp, #76]	; 0x4c
  40a9ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40a9f0:	2b47      	cmp	r3, #71	; 0x47
  40a9f2:	f43f af18 	beq.w	40a826 <_svfprintf_r+0x10d6>
  40a9f6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40a9f8:	9312      	str	r3, [sp, #72]	; 0x48
  40a9fa:	e721      	b.n	40a840 <_svfprintf_r+0x10f0>
  40a9fc:	424f      	negs	r7, r1
  40a9fe:	3110      	adds	r1, #16
  40aa00:	4d48      	ldr	r5, [pc, #288]	; (40ab24 <_svfprintf_r+0x13d4>)
  40aa02:	da2f      	bge.n	40aa64 <_svfprintf_r+0x1314>
  40aa04:	2410      	movs	r4, #16
  40aa06:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40aa0a:	e004      	b.n	40aa16 <_svfprintf_r+0x12c6>
  40aa0c:	f108 0808 	add.w	r8, r8, #8
  40aa10:	3f10      	subs	r7, #16
  40aa12:	2f10      	cmp	r7, #16
  40aa14:	dd26      	ble.n	40aa64 <_svfprintf_r+0x1314>
  40aa16:	3301      	adds	r3, #1
  40aa18:	3210      	adds	r2, #16
  40aa1a:	2b07      	cmp	r3, #7
  40aa1c:	9227      	str	r2, [sp, #156]	; 0x9c
  40aa1e:	9326      	str	r3, [sp, #152]	; 0x98
  40aa20:	f8c8 5000 	str.w	r5, [r8]
  40aa24:	f8c8 4004 	str.w	r4, [r8, #4]
  40aa28:	ddf0      	ble.n	40aa0c <_svfprintf_r+0x12bc>
  40aa2a:	aa25      	add	r2, sp, #148	; 0x94
  40aa2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40aa2e:	4658      	mov	r0, fp
  40aa30:	f002 fab4 	bl	40cf9c <__ssprint_r>
  40aa34:	2800      	cmp	r0, #0
  40aa36:	f47e af5d 	bne.w	4098f4 <_svfprintf_r+0x1a4>
  40aa3a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40aa3c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40aa3e:	46c8      	mov	r8, r9
  40aa40:	e7e6      	b.n	40aa10 <_svfprintf_r+0x12c0>
  40aa42:	aa25      	add	r2, sp, #148	; 0x94
  40aa44:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40aa46:	980c      	ldr	r0, [sp, #48]	; 0x30
  40aa48:	f002 faa8 	bl	40cf9c <__ssprint_r>
  40aa4c:	2800      	cmp	r0, #0
  40aa4e:	f47e af51 	bne.w	4098f4 <_svfprintf_r+0x1a4>
  40aa52:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40aa54:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40aa56:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40aa58:	46c8      	mov	r8, r9
  40aa5a:	e667      	b.n	40a72c <_svfprintf_r+0xfdc>
  40aa5c:	2000      	movs	r0, #0
  40aa5e:	900a      	str	r0, [sp, #40]	; 0x28
  40aa60:	f7fe bed0 	b.w	409804 <_svfprintf_r+0xb4>
  40aa64:	3301      	adds	r3, #1
  40aa66:	443a      	add	r2, r7
  40aa68:	2b07      	cmp	r3, #7
  40aa6a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40aa6e:	9227      	str	r2, [sp, #156]	; 0x9c
  40aa70:	9326      	str	r3, [sp, #152]	; 0x98
  40aa72:	f108 0808 	add.w	r8, r8, #8
  40aa76:	f77f ae5c 	ble.w	40a732 <_svfprintf_r+0xfe2>
  40aa7a:	aa25      	add	r2, sp, #148	; 0x94
  40aa7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40aa7e:	980c      	ldr	r0, [sp, #48]	; 0x30
  40aa80:	f002 fa8c 	bl	40cf9c <__ssprint_r>
  40aa84:	2800      	cmp	r0, #0
  40aa86:	f47e af35 	bne.w	4098f4 <_svfprintf_r+0x1a4>
  40aa8a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40aa8c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40aa8e:	46c8      	mov	r8, r9
  40aa90:	e64f      	b.n	40a732 <_svfprintf_r+0xfe2>
  40aa92:	3330      	adds	r3, #48	; 0x30
  40aa94:	2230      	movs	r2, #48	; 0x30
  40aa96:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  40aa9a:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  40aa9e:	ab22      	add	r3, sp, #136	; 0x88
  40aaa0:	e70f      	b.n	40a8c2 <_svfprintf_r+0x1172>
  40aaa2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40aaa4:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40aaa6:	4413      	add	r3, r2
  40aaa8:	930e      	str	r3, [sp, #56]	; 0x38
  40aaaa:	e775      	b.n	40a998 <_svfprintf_r+0x1248>
  40aaac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40aaae:	e5cb      	b.n	40a648 <_svfprintf_r+0xef8>
  40aab0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40aab2:	4e1d      	ldr	r6, [pc, #116]	; (40ab28 <_svfprintf_r+0x13d8>)
  40aab4:	2b00      	cmp	r3, #0
  40aab6:	bfb6      	itet	lt
  40aab8:	272d      	movlt	r7, #45	; 0x2d
  40aaba:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  40aabe:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  40aac2:	4b1a      	ldr	r3, [pc, #104]	; (40ab2c <_svfprintf_r+0x13dc>)
  40aac4:	f7ff ba2f 	b.w	409f26 <_svfprintf_r+0x7d6>
  40aac8:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40aaca:	9808      	ldr	r0, [sp, #32]
  40aacc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40aace:	4639      	mov	r1, r7
  40aad0:	f7fe f98e 	bl	408df0 <__aeabi_dcmpeq>
  40aad4:	2800      	cmp	r0, #0
  40aad6:	f47f ae7f 	bne.w	40a7d8 <_svfprintf_r+0x1088>
  40aada:	f1c5 0501 	rsb	r5, r5, #1
  40aade:	951f      	str	r5, [sp, #124]	; 0x7c
  40aae0:	442c      	add	r4, r5
  40aae2:	e59e      	b.n	40a622 <_svfprintf_r+0xed2>
  40aae4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40aae6:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40aae8:	4413      	add	r3, r2
  40aaea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40aaec:	441a      	add	r2, r3
  40aaee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40aaf2:	920e      	str	r2, [sp, #56]	; 0x38
  40aaf4:	9308      	str	r3, [sp, #32]
  40aaf6:	e5c7      	b.n	40a688 <_svfprintf_r+0xf38>
  40aaf8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40aafa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40aafc:	f1c3 0301 	rsb	r3, r3, #1
  40ab00:	441a      	add	r2, r3
  40ab02:	4613      	mov	r3, r2
  40ab04:	e7d0      	b.n	40aaa8 <_svfprintf_r+0x1358>
  40ab06:	f01b 0301 	ands.w	r3, fp, #1
  40ab0a:	9312      	str	r3, [sp, #72]	; 0x48
  40ab0c:	f47f aee2 	bne.w	40a8d4 <_svfprintf_r+0x1184>
  40ab10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40ab12:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40ab16:	9308      	str	r3, [sp, #32]
  40ab18:	e5b6      	b.n	40a688 <_svfprintf_r+0xf38>
  40ab1a:	bf00      	nop
  40ab1c:	66666667 	.word	0x66666667
  40ab20:	0040f3f4 	.word	0x0040f3f4
  40ab24:	0040f410 	.word	0x0040f410
  40ab28:	0040f3c8 	.word	0x0040f3c8
  40ab2c:	0040f3c4 	.word	0x0040f3c4
  40ab30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40ab32:	b913      	cbnz	r3, 40ab3a <_svfprintf_r+0x13ea>
  40ab34:	f01b 0f01 	tst.w	fp, #1
  40ab38:	d002      	beq.n	40ab40 <_svfprintf_r+0x13f0>
  40ab3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40ab3c:	3301      	adds	r3, #1
  40ab3e:	e7d4      	b.n	40aaea <_svfprintf_r+0x139a>
  40ab40:	2301      	movs	r3, #1
  40ab42:	e73a      	b.n	40a9ba <_svfprintf_r+0x126a>
  40ab44:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40ab46:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40ab4a:	6828      	ldr	r0, [r5, #0]
  40ab4c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  40ab50:	900a      	str	r0, [sp, #40]	; 0x28
  40ab52:	4628      	mov	r0, r5
  40ab54:	3004      	adds	r0, #4
  40ab56:	46a2      	mov	sl, r4
  40ab58:	900f      	str	r0, [sp, #60]	; 0x3c
  40ab5a:	f7fe be51 	b.w	409800 <_svfprintf_r+0xb0>
  40ab5e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40ab62:	f7ff b867 	b.w	409c34 <_svfprintf_r+0x4e4>
  40ab66:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40ab6a:	f7ff ba15 	b.w	409f98 <_svfprintf_r+0x848>
  40ab6e:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  40ab72:	e6a6      	b.n	40a8c2 <_svfprintf_r+0x1172>
  40ab74:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40ab78:	f7ff b8eb 	b.w	409d52 <_svfprintf_r+0x602>
  40ab7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40ab7e:	230c      	movs	r3, #12
  40ab80:	6013      	str	r3, [r2, #0]
  40ab82:	f04f 33ff 	mov.w	r3, #4294967295
  40ab86:	9309      	str	r3, [sp, #36]	; 0x24
  40ab88:	f7fe bebd 	b.w	409906 <_svfprintf_r+0x1b6>
  40ab8c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40ab90:	f7ff b99a 	b.w	409ec8 <_svfprintf_r+0x778>
  40ab94:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40ab98:	f7ff b976 	b.w	409e88 <_svfprintf_r+0x738>
  40ab9c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40aba0:	f7ff b959 	b.w	409e56 <_svfprintf_r+0x706>
  40aba4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40aba8:	f7ff b912 	b.w	409dd0 <_svfprintf_r+0x680>

0040abac <register_fini>:
  40abac:	4b02      	ldr	r3, [pc, #8]	; (40abb8 <register_fini+0xc>)
  40abae:	b113      	cbz	r3, 40abb6 <register_fini+0xa>
  40abb0:	4802      	ldr	r0, [pc, #8]	; (40abbc <register_fini+0x10>)
  40abb2:	f000 b805 	b.w	40abc0 <atexit>
  40abb6:	4770      	bx	lr
  40abb8:	00000000 	.word	0x00000000
  40abbc:	0040bb4d 	.word	0x0040bb4d

0040abc0 <atexit>:
  40abc0:	2300      	movs	r3, #0
  40abc2:	4601      	mov	r1, r0
  40abc4:	461a      	mov	r2, r3
  40abc6:	4618      	mov	r0, r3
  40abc8:	f002 ba74 	b.w	40d0b4 <__register_exitproc>

0040abcc <quorem>:
  40abcc:	6902      	ldr	r2, [r0, #16]
  40abce:	690b      	ldr	r3, [r1, #16]
  40abd0:	4293      	cmp	r3, r2
  40abd2:	f300 808d 	bgt.w	40acf0 <quorem+0x124>
  40abd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40abda:	f103 38ff 	add.w	r8, r3, #4294967295
  40abde:	f101 0714 	add.w	r7, r1, #20
  40abe2:	f100 0b14 	add.w	fp, r0, #20
  40abe6:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40abea:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  40abee:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40abf2:	b083      	sub	sp, #12
  40abf4:	3201      	adds	r2, #1
  40abf6:	fbb3 f9f2 	udiv	r9, r3, r2
  40abfa:	eb0b 0304 	add.w	r3, fp, r4
  40abfe:	9400      	str	r4, [sp, #0]
  40ac00:	eb07 0a04 	add.w	sl, r7, r4
  40ac04:	9301      	str	r3, [sp, #4]
  40ac06:	f1b9 0f00 	cmp.w	r9, #0
  40ac0a:	d039      	beq.n	40ac80 <quorem+0xb4>
  40ac0c:	2500      	movs	r5, #0
  40ac0e:	462e      	mov	r6, r5
  40ac10:	46bc      	mov	ip, r7
  40ac12:	46de      	mov	lr, fp
  40ac14:	f85c 4b04 	ldr.w	r4, [ip], #4
  40ac18:	f8de 3000 	ldr.w	r3, [lr]
  40ac1c:	b2a2      	uxth	r2, r4
  40ac1e:	fb09 5502 	mla	r5, r9, r2, r5
  40ac22:	0c22      	lsrs	r2, r4, #16
  40ac24:	0c2c      	lsrs	r4, r5, #16
  40ac26:	fb09 4202 	mla	r2, r9, r2, r4
  40ac2a:	b2ad      	uxth	r5, r5
  40ac2c:	1b75      	subs	r5, r6, r5
  40ac2e:	b296      	uxth	r6, r2
  40ac30:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  40ac34:	fa15 f383 	uxtah	r3, r5, r3
  40ac38:	eb06 4623 	add.w	r6, r6, r3, asr #16
  40ac3c:	b29b      	uxth	r3, r3
  40ac3e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40ac42:	45e2      	cmp	sl, ip
  40ac44:	ea4f 4512 	mov.w	r5, r2, lsr #16
  40ac48:	f84e 3b04 	str.w	r3, [lr], #4
  40ac4c:	ea4f 4626 	mov.w	r6, r6, asr #16
  40ac50:	d2e0      	bcs.n	40ac14 <quorem+0x48>
  40ac52:	9b00      	ldr	r3, [sp, #0]
  40ac54:	f85b 3003 	ldr.w	r3, [fp, r3]
  40ac58:	b993      	cbnz	r3, 40ac80 <quorem+0xb4>
  40ac5a:	9c01      	ldr	r4, [sp, #4]
  40ac5c:	1f23      	subs	r3, r4, #4
  40ac5e:	459b      	cmp	fp, r3
  40ac60:	d20c      	bcs.n	40ac7c <quorem+0xb0>
  40ac62:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40ac66:	b94b      	cbnz	r3, 40ac7c <quorem+0xb0>
  40ac68:	f1a4 0308 	sub.w	r3, r4, #8
  40ac6c:	e002      	b.n	40ac74 <quorem+0xa8>
  40ac6e:	681a      	ldr	r2, [r3, #0]
  40ac70:	3b04      	subs	r3, #4
  40ac72:	b91a      	cbnz	r2, 40ac7c <quorem+0xb0>
  40ac74:	459b      	cmp	fp, r3
  40ac76:	f108 38ff 	add.w	r8, r8, #4294967295
  40ac7a:	d3f8      	bcc.n	40ac6e <quorem+0xa2>
  40ac7c:	f8c0 8010 	str.w	r8, [r0, #16]
  40ac80:	4604      	mov	r4, r0
  40ac82:	f001 fe4b 	bl	40c91c <__mcmp>
  40ac86:	2800      	cmp	r0, #0
  40ac88:	db2e      	blt.n	40ace8 <quorem+0x11c>
  40ac8a:	f109 0901 	add.w	r9, r9, #1
  40ac8e:	465d      	mov	r5, fp
  40ac90:	2300      	movs	r3, #0
  40ac92:	f857 1b04 	ldr.w	r1, [r7], #4
  40ac96:	6828      	ldr	r0, [r5, #0]
  40ac98:	b28a      	uxth	r2, r1
  40ac9a:	1a9a      	subs	r2, r3, r2
  40ac9c:	0c0b      	lsrs	r3, r1, #16
  40ac9e:	fa12 f280 	uxtah	r2, r2, r0
  40aca2:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  40aca6:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40acaa:	b292      	uxth	r2, r2
  40acac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40acb0:	45ba      	cmp	sl, r7
  40acb2:	f845 2b04 	str.w	r2, [r5], #4
  40acb6:	ea4f 4323 	mov.w	r3, r3, asr #16
  40acba:	d2ea      	bcs.n	40ac92 <quorem+0xc6>
  40acbc:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  40acc0:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  40acc4:	b982      	cbnz	r2, 40ace8 <quorem+0x11c>
  40acc6:	1f1a      	subs	r2, r3, #4
  40acc8:	4593      	cmp	fp, r2
  40acca:	d20b      	bcs.n	40ace4 <quorem+0x118>
  40accc:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40acd0:	b942      	cbnz	r2, 40ace4 <quorem+0x118>
  40acd2:	3b08      	subs	r3, #8
  40acd4:	e002      	b.n	40acdc <quorem+0x110>
  40acd6:	681a      	ldr	r2, [r3, #0]
  40acd8:	3b04      	subs	r3, #4
  40acda:	b91a      	cbnz	r2, 40ace4 <quorem+0x118>
  40acdc:	459b      	cmp	fp, r3
  40acde:	f108 38ff 	add.w	r8, r8, #4294967295
  40ace2:	d3f8      	bcc.n	40acd6 <quorem+0x10a>
  40ace4:	f8c4 8010 	str.w	r8, [r4, #16]
  40ace8:	4648      	mov	r0, r9
  40acea:	b003      	add	sp, #12
  40acec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40acf0:	2000      	movs	r0, #0
  40acf2:	4770      	bx	lr
  40acf4:	0000      	movs	r0, r0
	...

0040acf8 <_dtoa_r>:
  40acf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40acfc:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40acfe:	b09b      	sub	sp, #108	; 0x6c
  40ad00:	4604      	mov	r4, r0
  40ad02:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  40ad04:	4692      	mov	sl, r2
  40ad06:	469b      	mov	fp, r3
  40ad08:	b141      	cbz	r1, 40ad1c <_dtoa_r+0x24>
  40ad0a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40ad0c:	604a      	str	r2, [r1, #4]
  40ad0e:	2301      	movs	r3, #1
  40ad10:	4093      	lsls	r3, r2
  40ad12:	608b      	str	r3, [r1, #8]
  40ad14:	f001 fc2a 	bl	40c56c <_Bfree>
  40ad18:	2300      	movs	r3, #0
  40ad1a:	6423      	str	r3, [r4, #64]	; 0x40
  40ad1c:	f1bb 0f00 	cmp.w	fp, #0
  40ad20:	465d      	mov	r5, fp
  40ad22:	db35      	blt.n	40ad90 <_dtoa_r+0x98>
  40ad24:	2300      	movs	r3, #0
  40ad26:	6033      	str	r3, [r6, #0]
  40ad28:	4b9d      	ldr	r3, [pc, #628]	; (40afa0 <_dtoa_r+0x2a8>)
  40ad2a:	43ab      	bics	r3, r5
  40ad2c:	d015      	beq.n	40ad5a <_dtoa_r+0x62>
  40ad2e:	4650      	mov	r0, sl
  40ad30:	4659      	mov	r1, fp
  40ad32:	2200      	movs	r2, #0
  40ad34:	2300      	movs	r3, #0
  40ad36:	f7fe f85b 	bl	408df0 <__aeabi_dcmpeq>
  40ad3a:	4680      	mov	r8, r0
  40ad3c:	2800      	cmp	r0, #0
  40ad3e:	d02d      	beq.n	40ad9c <_dtoa_r+0xa4>
  40ad40:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40ad42:	2301      	movs	r3, #1
  40ad44:	6013      	str	r3, [r2, #0]
  40ad46:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40ad48:	2b00      	cmp	r3, #0
  40ad4a:	f000 80bd 	beq.w	40aec8 <_dtoa_r+0x1d0>
  40ad4e:	4895      	ldr	r0, [pc, #596]	; (40afa4 <_dtoa_r+0x2ac>)
  40ad50:	6018      	str	r0, [r3, #0]
  40ad52:	3801      	subs	r0, #1
  40ad54:	b01b      	add	sp, #108	; 0x6c
  40ad56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ad5a:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40ad5c:	f242 730f 	movw	r3, #9999	; 0x270f
  40ad60:	6013      	str	r3, [r2, #0]
  40ad62:	f1ba 0f00 	cmp.w	sl, #0
  40ad66:	d10d      	bne.n	40ad84 <_dtoa_r+0x8c>
  40ad68:	f3c5 0513 	ubfx	r5, r5, #0, #20
  40ad6c:	b955      	cbnz	r5, 40ad84 <_dtoa_r+0x8c>
  40ad6e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40ad70:	488d      	ldr	r0, [pc, #564]	; (40afa8 <_dtoa_r+0x2b0>)
  40ad72:	2b00      	cmp	r3, #0
  40ad74:	d0ee      	beq.n	40ad54 <_dtoa_r+0x5c>
  40ad76:	f100 0308 	add.w	r3, r0, #8
  40ad7a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  40ad7c:	6013      	str	r3, [r2, #0]
  40ad7e:	b01b      	add	sp, #108	; 0x6c
  40ad80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ad84:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40ad86:	4889      	ldr	r0, [pc, #548]	; (40afac <_dtoa_r+0x2b4>)
  40ad88:	2b00      	cmp	r3, #0
  40ad8a:	d0e3      	beq.n	40ad54 <_dtoa_r+0x5c>
  40ad8c:	1cc3      	adds	r3, r0, #3
  40ad8e:	e7f4      	b.n	40ad7a <_dtoa_r+0x82>
  40ad90:	2301      	movs	r3, #1
  40ad92:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  40ad96:	6033      	str	r3, [r6, #0]
  40ad98:	46ab      	mov	fp, r5
  40ad9a:	e7c5      	b.n	40ad28 <_dtoa_r+0x30>
  40ad9c:	aa18      	add	r2, sp, #96	; 0x60
  40ad9e:	ab19      	add	r3, sp, #100	; 0x64
  40ada0:	9201      	str	r2, [sp, #4]
  40ada2:	9300      	str	r3, [sp, #0]
  40ada4:	4652      	mov	r2, sl
  40ada6:	465b      	mov	r3, fp
  40ada8:	4620      	mov	r0, r4
  40adaa:	f001 fe57 	bl	40ca5c <__d2b>
  40adae:	0d2b      	lsrs	r3, r5, #20
  40adb0:	4681      	mov	r9, r0
  40adb2:	d071      	beq.n	40ae98 <_dtoa_r+0x1a0>
  40adb4:	f3cb 0213 	ubfx	r2, fp, #0, #20
  40adb8:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  40adbc:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40adbe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  40adc2:	4650      	mov	r0, sl
  40adc4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  40adc8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40adcc:	2200      	movs	r2, #0
  40adce:	4b78      	ldr	r3, [pc, #480]	; (40afb0 <_dtoa_r+0x2b8>)
  40add0:	f7fd fbf2 	bl	4085b8 <__aeabi_dsub>
  40add4:	a36c      	add	r3, pc, #432	; (adr r3, 40af88 <_dtoa_r+0x290>)
  40add6:	e9d3 2300 	ldrd	r2, r3, [r3]
  40adda:	f7fd fda1 	bl	408920 <__aeabi_dmul>
  40adde:	a36c      	add	r3, pc, #432	; (adr r3, 40af90 <_dtoa_r+0x298>)
  40ade0:	e9d3 2300 	ldrd	r2, r3, [r3]
  40ade4:	f7fd fbea 	bl	4085bc <__adddf3>
  40ade8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40adec:	4630      	mov	r0, r6
  40adee:	f7fd fd31 	bl	408854 <__aeabi_i2d>
  40adf2:	a369      	add	r3, pc, #420	; (adr r3, 40af98 <_dtoa_r+0x2a0>)
  40adf4:	e9d3 2300 	ldrd	r2, r3, [r3]
  40adf8:	f7fd fd92 	bl	408920 <__aeabi_dmul>
  40adfc:	4602      	mov	r2, r0
  40adfe:	460b      	mov	r3, r1
  40ae00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40ae04:	f7fd fbda 	bl	4085bc <__adddf3>
  40ae08:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40ae0c:	f7fe f838 	bl	408e80 <__aeabi_d2iz>
  40ae10:	2200      	movs	r2, #0
  40ae12:	9002      	str	r0, [sp, #8]
  40ae14:	2300      	movs	r3, #0
  40ae16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40ae1a:	f7fd fff3 	bl	408e04 <__aeabi_dcmplt>
  40ae1e:	2800      	cmp	r0, #0
  40ae20:	f040 8173 	bne.w	40b10a <_dtoa_r+0x412>
  40ae24:	9d02      	ldr	r5, [sp, #8]
  40ae26:	2d16      	cmp	r5, #22
  40ae28:	f200 815d 	bhi.w	40b0e6 <_dtoa_r+0x3ee>
  40ae2c:	4b61      	ldr	r3, [pc, #388]	; (40afb4 <_dtoa_r+0x2bc>)
  40ae2e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40ae32:	e9d3 0100 	ldrd	r0, r1, [r3]
  40ae36:	4652      	mov	r2, sl
  40ae38:	465b      	mov	r3, fp
  40ae3a:	f7fe f801 	bl	408e40 <__aeabi_dcmpgt>
  40ae3e:	2800      	cmp	r0, #0
  40ae40:	f000 81c5 	beq.w	40b1ce <_dtoa_r+0x4d6>
  40ae44:	1e6b      	subs	r3, r5, #1
  40ae46:	9302      	str	r3, [sp, #8]
  40ae48:	2300      	movs	r3, #0
  40ae4a:	930e      	str	r3, [sp, #56]	; 0x38
  40ae4c:	1bbf      	subs	r7, r7, r6
  40ae4e:	1e7b      	subs	r3, r7, #1
  40ae50:	9306      	str	r3, [sp, #24]
  40ae52:	f100 8154 	bmi.w	40b0fe <_dtoa_r+0x406>
  40ae56:	2300      	movs	r3, #0
  40ae58:	9308      	str	r3, [sp, #32]
  40ae5a:	9b02      	ldr	r3, [sp, #8]
  40ae5c:	2b00      	cmp	r3, #0
  40ae5e:	f2c0 8145 	blt.w	40b0ec <_dtoa_r+0x3f4>
  40ae62:	9a06      	ldr	r2, [sp, #24]
  40ae64:	930d      	str	r3, [sp, #52]	; 0x34
  40ae66:	4611      	mov	r1, r2
  40ae68:	4419      	add	r1, r3
  40ae6a:	2300      	movs	r3, #0
  40ae6c:	9106      	str	r1, [sp, #24]
  40ae6e:	930c      	str	r3, [sp, #48]	; 0x30
  40ae70:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40ae72:	2b09      	cmp	r3, #9
  40ae74:	d82a      	bhi.n	40aecc <_dtoa_r+0x1d4>
  40ae76:	2b05      	cmp	r3, #5
  40ae78:	f340 865b 	ble.w	40bb32 <_dtoa_r+0xe3a>
  40ae7c:	3b04      	subs	r3, #4
  40ae7e:	9324      	str	r3, [sp, #144]	; 0x90
  40ae80:	2500      	movs	r5, #0
  40ae82:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40ae84:	3b02      	subs	r3, #2
  40ae86:	2b03      	cmp	r3, #3
  40ae88:	f200 8642 	bhi.w	40bb10 <_dtoa_r+0xe18>
  40ae8c:	e8df f013 	tbh	[pc, r3, lsl #1]
  40ae90:	02c903d4 	.word	0x02c903d4
  40ae94:	046103df 	.word	0x046103df
  40ae98:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40ae9a:	9e19      	ldr	r6, [sp, #100]	; 0x64
  40ae9c:	443e      	add	r6, r7
  40ae9e:	f206 4332 	addw	r3, r6, #1074	; 0x432
  40aea2:	2b20      	cmp	r3, #32
  40aea4:	f340 818e 	ble.w	40b1c4 <_dtoa_r+0x4cc>
  40aea8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40aeac:	f206 4012 	addw	r0, r6, #1042	; 0x412
  40aeb0:	409d      	lsls	r5, r3
  40aeb2:	fa2a f000 	lsr.w	r0, sl, r0
  40aeb6:	4328      	orrs	r0, r5
  40aeb8:	f7fd fcbc 	bl	408834 <__aeabi_ui2d>
  40aebc:	2301      	movs	r3, #1
  40aebe:	3e01      	subs	r6, #1
  40aec0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40aec4:	9314      	str	r3, [sp, #80]	; 0x50
  40aec6:	e781      	b.n	40adcc <_dtoa_r+0xd4>
  40aec8:	483b      	ldr	r0, [pc, #236]	; (40afb8 <_dtoa_r+0x2c0>)
  40aeca:	e743      	b.n	40ad54 <_dtoa_r+0x5c>
  40aecc:	2100      	movs	r1, #0
  40aece:	6461      	str	r1, [r4, #68]	; 0x44
  40aed0:	4620      	mov	r0, r4
  40aed2:	9125      	str	r1, [sp, #148]	; 0x94
  40aed4:	f001 fb24 	bl	40c520 <_Balloc>
  40aed8:	f04f 33ff 	mov.w	r3, #4294967295
  40aedc:	930a      	str	r3, [sp, #40]	; 0x28
  40aede:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40aee0:	930f      	str	r3, [sp, #60]	; 0x3c
  40aee2:	2301      	movs	r3, #1
  40aee4:	9004      	str	r0, [sp, #16]
  40aee6:	6420      	str	r0, [r4, #64]	; 0x40
  40aee8:	9224      	str	r2, [sp, #144]	; 0x90
  40aeea:	930b      	str	r3, [sp, #44]	; 0x2c
  40aeec:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40aeee:	2b00      	cmp	r3, #0
  40aef0:	f2c0 80d9 	blt.w	40b0a6 <_dtoa_r+0x3ae>
  40aef4:	9a02      	ldr	r2, [sp, #8]
  40aef6:	2a0e      	cmp	r2, #14
  40aef8:	f300 80d5 	bgt.w	40b0a6 <_dtoa_r+0x3ae>
  40aefc:	4b2d      	ldr	r3, [pc, #180]	; (40afb4 <_dtoa_r+0x2bc>)
  40aefe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40af02:	e9d3 2300 	ldrd	r2, r3, [r3]
  40af06:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40af0a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40af0c:	2b00      	cmp	r3, #0
  40af0e:	f2c0 83ba 	blt.w	40b686 <_dtoa_r+0x98e>
  40af12:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  40af16:	4650      	mov	r0, sl
  40af18:	462a      	mov	r2, r5
  40af1a:	4633      	mov	r3, r6
  40af1c:	4659      	mov	r1, fp
  40af1e:	f7fd fe29 	bl	408b74 <__aeabi_ddiv>
  40af22:	f7fd ffad 	bl	408e80 <__aeabi_d2iz>
  40af26:	4680      	mov	r8, r0
  40af28:	f7fd fc94 	bl	408854 <__aeabi_i2d>
  40af2c:	462a      	mov	r2, r5
  40af2e:	4633      	mov	r3, r6
  40af30:	f7fd fcf6 	bl	408920 <__aeabi_dmul>
  40af34:	460b      	mov	r3, r1
  40af36:	4602      	mov	r2, r0
  40af38:	4659      	mov	r1, fp
  40af3a:	4650      	mov	r0, sl
  40af3c:	f7fd fb3c 	bl	4085b8 <__aeabi_dsub>
  40af40:	9d04      	ldr	r5, [sp, #16]
  40af42:	f108 0330 	add.w	r3, r8, #48	; 0x30
  40af46:	702b      	strb	r3, [r5, #0]
  40af48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40af4a:	2b01      	cmp	r3, #1
  40af4c:	4606      	mov	r6, r0
  40af4e:	460f      	mov	r7, r1
  40af50:	f105 0501 	add.w	r5, r5, #1
  40af54:	d068      	beq.n	40b028 <_dtoa_r+0x330>
  40af56:	2200      	movs	r2, #0
  40af58:	4b18      	ldr	r3, [pc, #96]	; (40afbc <_dtoa_r+0x2c4>)
  40af5a:	f7fd fce1 	bl	408920 <__aeabi_dmul>
  40af5e:	2200      	movs	r2, #0
  40af60:	2300      	movs	r3, #0
  40af62:	4606      	mov	r6, r0
  40af64:	460f      	mov	r7, r1
  40af66:	f7fd ff43 	bl	408df0 <__aeabi_dcmpeq>
  40af6a:	2800      	cmp	r0, #0
  40af6c:	f040 8088 	bne.w	40b080 <_dtoa_r+0x388>
  40af70:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  40af74:	f04f 0a00 	mov.w	sl, #0
  40af78:	f8df b040 	ldr.w	fp, [pc, #64]	; 40afbc <_dtoa_r+0x2c4>
  40af7c:	940c      	str	r4, [sp, #48]	; 0x30
  40af7e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40af82:	e028      	b.n	40afd6 <_dtoa_r+0x2de>
  40af84:	f3af 8000 	nop.w
  40af88:	636f4361 	.word	0x636f4361
  40af8c:	3fd287a7 	.word	0x3fd287a7
  40af90:	8b60c8b3 	.word	0x8b60c8b3
  40af94:	3fc68a28 	.word	0x3fc68a28
  40af98:	509f79fb 	.word	0x509f79fb
  40af9c:	3fd34413 	.word	0x3fd34413
  40afa0:	7ff00000 	.word	0x7ff00000
  40afa4:	0040f3fd 	.word	0x0040f3fd
  40afa8:	0040f420 	.word	0x0040f420
  40afac:	0040f42c 	.word	0x0040f42c
  40afb0:	3ff80000 	.word	0x3ff80000
  40afb4:	0040f468 	.word	0x0040f468
  40afb8:	0040f3fc 	.word	0x0040f3fc
  40afbc:	40240000 	.word	0x40240000
  40afc0:	f7fd fcae 	bl	408920 <__aeabi_dmul>
  40afc4:	2200      	movs	r2, #0
  40afc6:	2300      	movs	r3, #0
  40afc8:	4606      	mov	r6, r0
  40afca:	460f      	mov	r7, r1
  40afcc:	f7fd ff10 	bl	408df0 <__aeabi_dcmpeq>
  40afd0:	2800      	cmp	r0, #0
  40afd2:	f040 83c1 	bne.w	40b758 <_dtoa_r+0xa60>
  40afd6:	4642      	mov	r2, r8
  40afd8:	464b      	mov	r3, r9
  40afda:	4630      	mov	r0, r6
  40afdc:	4639      	mov	r1, r7
  40afde:	f7fd fdc9 	bl	408b74 <__aeabi_ddiv>
  40afe2:	f7fd ff4d 	bl	408e80 <__aeabi_d2iz>
  40afe6:	4604      	mov	r4, r0
  40afe8:	f7fd fc34 	bl	408854 <__aeabi_i2d>
  40afec:	4642      	mov	r2, r8
  40afee:	464b      	mov	r3, r9
  40aff0:	f7fd fc96 	bl	408920 <__aeabi_dmul>
  40aff4:	4602      	mov	r2, r0
  40aff6:	460b      	mov	r3, r1
  40aff8:	4630      	mov	r0, r6
  40affa:	4639      	mov	r1, r7
  40affc:	f7fd fadc 	bl	4085b8 <__aeabi_dsub>
  40b000:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40b004:	9e04      	ldr	r6, [sp, #16]
  40b006:	f805 eb01 	strb.w	lr, [r5], #1
  40b00a:	eba5 0e06 	sub.w	lr, r5, r6
  40b00e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40b010:	45b6      	cmp	lr, r6
  40b012:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40b016:	4652      	mov	r2, sl
  40b018:	465b      	mov	r3, fp
  40b01a:	d1d1      	bne.n	40afc0 <_dtoa_r+0x2c8>
  40b01c:	46a0      	mov	r8, r4
  40b01e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40b022:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40b024:	4606      	mov	r6, r0
  40b026:	460f      	mov	r7, r1
  40b028:	4632      	mov	r2, r6
  40b02a:	463b      	mov	r3, r7
  40b02c:	4630      	mov	r0, r6
  40b02e:	4639      	mov	r1, r7
  40b030:	f7fd fac4 	bl	4085bc <__adddf3>
  40b034:	4606      	mov	r6, r0
  40b036:	460f      	mov	r7, r1
  40b038:	4602      	mov	r2, r0
  40b03a:	460b      	mov	r3, r1
  40b03c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40b040:	f7fd fee0 	bl	408e04 <__aeabi_dcmplt>
  40b044:	b948      	cbnz	r0, 40b05a <_dtoa_r+0x362>
  40b046:	4632      	mov	r2, r6
  40b048:	463b      	mov	r3, r7
  40b04a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40b04e:	f7fd fecf 	bl	408df0 <__aeabi_dcmpeq>
  40b052:	b1a8      	cbz	r0, 40b080 <_dtoa_r+0x388>
  40b054:	f018 0f01 	tst.w	r8, #1
  40b058:	d012      	beq.n	40b080 <_dtoa_r+0x388>
  40b05a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40b05e:	9a04      	ldr	r2, [sp, #16]
  40b060:	1e6b      	subs	r3, r5, #1
  40b062:	e004      	b.n	40b06e <_dtoa_r+0x376>
  40b064:	429a      	cmp	r2, r3
  40b066:	f000 8401 	beq.w	40b86c <_dtoa_r+0xb74>
  40b06a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40b06e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40b072:	f103 0501 	add.w	r5, r3, #1
  40b076:	d0f5      	beq.n	40b064 <_dtoa_r+0x36c>
  40b078:	f108 0801 	add.w	r8, r8, #1
  40b07c:	f883 8000 	strb.w	r8, [r3]
  40b080:	4649      	mov	r1, r9
  40b082:	4620      	mov	r0, r4
  40b084:	f001 fa72 	bl	40c56c <_Bfree>
  40b088:	2200      	movs	r2, #0
  40b08a:	9b02      	ldr	r3, [sp, #8]
  40b08c:	702a      	strb	r2, [r5, #0]
  40b08e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40b090:	3301      	adds	r3, #1
  40b092:	6013      	str	r3, [r2, #0]
  40b094:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40b096:	2b00      	cmp	r3, #0
  40b098:	f000 839e 	beq.w	40b7d8 <_dtoa_r+0xae0>
  40b09c:	9804      	ldr	r0, [sp, #16]
  40b09e:	601d      	str	r5, [r3, #0]
  40b0a0:	b01b      	add	sp, #108	; 0x6c
  40b0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b0a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40b0a8:	2a00      	cmp	r2, #0
  40b0aa:	d03e      	beq.n	40b12a <_dtoa_r+0x432>
  40b0ac:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40b0ae:	2a01      	cmp	r2, #1
  40b0b0:	f340 8311 	ble.w	40b6d6 <_dtoa_r+0x9de>
  40b0b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b0b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40b0b8:	1e5f      	subs	r7, r3, #1
  40b0ba:	42ba      	cmp	r2, r7
  40b0bc:	f2c0 838f 	blt.w	40b7de <_dtoa_r+0xae6>
  40b0c0:	1bd7      	subs	r7, r2, r7
  40b0c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b0c4:	2b00      	cmp	r3, #0
  40b0c6:	f2c0 848b 	blt.w	40b9e0 <_dtoa_r+0xce8>
  40b0ca:	9d08      	ldr	r5, [sp, #32]
  40b0cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b0ce:	9a08      	ldr	r2, [sp, #32]
  40b0d0:	441a      	add	r2, r3
  40b0d2:	9208      	str	r2, [sp, #32]
  40b0d4:	9a06      	ldr	r2, [sp, #24]
  40b0d6:	2101      	movs	r1, #1
  40b0d8:	441a      	add	r2, r3
  40b0da:	4620      	mov	r0, r4
  40b0dc:	9206      	str	r2, [sp, #24]
  40b0de:	f001 fadf 	bl	40c6a0 <__i2b>
  40b0e2:	4606      	mov	r6, r0
  40b0e4:	e024      	b.n	40b130 <_dtoa_r+0x438>
  40b0e6:	2301      	movs	r3, #1
  40b0e8:	930e      	str	r3, [sp, #56]	; 0x38
  40b0ea:	e6af      	b.n	40ae4c <_dtoa_r+0x154>
  40b0ec:	9a08      	ldr	r2, [sp, #32]
  40b0ee:	9b02      	ldr	r3, [sp, #8]
  40b0f0:	1ad2      	subs	r2, r2, r3
  40b0f2:	425b      	negs	r3, r3
  40b0f4:	930c      	str	r3, [sp, #48]	; 0x30
  40b0f6:	2300      	movs	r3, #0
  40b0f8:	9208      	str	r2, [sp, #32]
  40b0fa:	930d      	str	r3, [sp, #52]	; 0x34
  40b0fc:	e6b8      	b.n	40ae70 <_dtoa_r+0x178>
  40b0fe:	f1c7 0301 	rsb	r3, r7, #1
  40b102:	9308      	str	r3, [sp, #32]
  40b104:	2300      	movs	r3, #0
  40b106:	9306      	str	r3, [sp, #24]
  40b108:	e6a7      	b.n	40ae5a <_dtoa_r+0x162>
  40b10a:	9d02      	ldr	r5, [sp, #8]
  40b10c:	4628      	mov	r0, r5
  40b10e:	f7fd fba1 	bl	408854 <__aeabi_i2d>
  40b112:	4602      	mov	r2, r0
  40b114:	460b      	mov	r3, r1
  40b116:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40b11a:	f7fd fe69 	bl	408df0 <__aeabi_dcmpeq>
  40b11e:	2800      	cmp	r0, #0
  40b120:	f47f ae80 	bne.w	40ae24 <_dtoa_r+0x12c>
  40b124:	1e6b      	subs	r3, r5, #1
  40b126:	9302      	str	r3, [sp, #8]
  40b128:	e67c      	b.n	40ae24 <_dtoa_r+0x12c>
  40b12a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40b12c:	9d08      	ldr	r5, [sp, #32]
  40b12e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  40b130:	2d00      	cmp	r5, #0
  40b132:	dd0c      	ble.n	40b14e <_dtoa_r+0x456>
  40b134:	9906      	ldr	r1, [sp, #24]
  40b136:	2900      	cmp	r1, #0
  40b138:	460b      	mov	r3, r1
  40b13a:	dd08      	ble.n	40b14e <_dtoa_r+0x456>
  40b13c:	42a9      	cmp	r1, r5
  40b13e:	9a08      	ldr	r2, [sp, #32]
  40b140:	bfa8      	it	ge
  40b142:	462b      	movge	r3, r5
  40b144:	1ad2      	subs	r2, r2, r3
  40b146:	1aed      	subs	r5, r5, r3
  40b148:	1acb      	subs	r3, r1, r3
  40b14a:	9208      	str	r2, [sp, #32]
  40b14c:	9306      	str	r3, [sp, #24]
  40b14e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40b150:	b1d3      	cbz	r3, 40b188 <_dtoa_r+0x490>
  40b152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40b154:	2b00      	cmp	r3, #0
  40b156:	f000 82b7 	beq.w	40b6c8 <_dtoa_r+0x9d0>
  40b15a:	2f00      	cmp	r7, #0
  40b15c:	dd10      	ble.n	40b180 <_dtoa_r+0x488>
  40b15e:	4631      	mov	r1, r6
  40b160:	463a      	mov	r2, r7
  40b162:	4620      	mov	r0, r4
  40b164:	f001 fb38 	bl	40c7d8 <__pow5mult>
  40b168:	464a      	mov	r2, r9
  40b16a:	4601      	mov	r1, r0
  40b16c:	4606      	mov	r6, r0
  40b16e:	4620      	mov	r0, r4
  40b170:	f001 faa0 	bl	40c6b4 <__multiply>
  40b174:	4649      	mov	r1, r9
  40b176:	4680      	mov	r8, r0
  40b178:	4620      	mov	r0, r4
  40b17a:	f001 f9f7 	bl	40c56c <_Bfree>
  40b17e:	46c1      	mov	r9, r8
  40b180:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40b182:	1bda      	subs	r2, r3, r7
  40b184:	f040 82a1 	bne.w	40b6ca <_dtoa_r+0x9d2>
  40b188:	2101      	movs	r1, #1
  40b18a:	4620      	mov	r0, r4
  40b18c:	f001 fa88 	bl	40c6a0 <__i2b>
  40b190:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b192:	2b00      	cmp	r3, #0
  40b194:	4680      	mov	r8, r0
  40b196:	dd1c      	ble.n	40b1d2 <_dtoa_r+0x4da>
  40b198:	4601      	mov	r1, r0
  40b19a:	461a      	mov	r2, r3
  40b19c:	4620      	mov	r0, r4
  40b19e:	f001 fb1b 	bl	40c7d8 <__pow5mult>
  40b1a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40b1a4:	2b01      	cmp	r3, #1
  40b1a6:	4680      	mov	r8, r0
  40b1a8:	f340 8254 	ble.w	40b654 <_dtoa_r+0x95c>
  40b1ac:	2300      	movs	r3, #0
  40b1ae:	930c      	str	r3, [sp, #48]	; 0x30
  40b1b0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40b1b4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  40b1b8:	6918      	ldr	r0, [r3, #16]
  40b1ba:	f001 fa21 	bl	40c600 <__hi0bits>
  40b1be:	f1c0 0020 	rsb	r0, r0, #32
  40b1c2:	e010      	b.n	40b1e6 <_dtoa_r+0x4ee>
  40b1c4:	f1c3 0520 	rsb	r5, r3, #32
  40b1c8:	fa0a f005 	lsl.w	r0, sl, r5
  40b1cc:	e674      	b.n	40aeb8 <_dtoa_r+0x1c0>
  40b1ce:	900e      	str	r0, [sp, #56]	; 0x38
  40b1d0:	e63c      	b.n	40ae4c <_dtoa_r+0x154>
  40b1d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40b1d4:	2b01      	cmp	r3, #1
  40b1d6:	f340 8287 	ble.w	40b6e8 <_dtoa_r+0x9f0>
  40b1da:	2300      	movs	r3, #0
  40b1dc:	930c      	str	r3, [sp, #48]	; 0x30
  40b1de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b1e0:	2001      	movs	r0, #1
  40b1e2:	2b00      	cmp	r3, #0
  40b1e4:	d1e4      	bne.n	40b1b0 <_dtoa_r+0x4b8>
  40b1e6:	9a06      	ldr	r2, [sp, #24]
  40b1e8:	4410      	add	r0, r2
  40b1ea:	f010 001f 	ands.w	r0, r0, #31
  40b1ee:	f000 80a1 	beq.w	40b334 <_dtoa_r+0x63c>
  40b1f2:	f1c0 0320 	rsb	r3, r0, #32
  40b1f6:	2b04      	cmp	r3, #4
  40b1f8:	f340 849e 	ble.w	40bb38 <_dtoa_r+0xe40>
  40b1fc:	9b08      	ldr	r3, [sp, #32]
  40b1fe:	f1c0 001c 	rsb	r0, r0, #28
  40b202:	4403      	add	r3, r0
  40b204:	9308      	str	r3, [sp, #32]
  40b206:	4613      	mov	r3, r2
  40b208:	4403      	add	r3, r0
  40b20a:	4405      	add	r5, r0
  40b20c:	9306      	str	r3, [sp, #24]
  40b20e:	9b08      	ldr	r3, [sp, #32]
  40b210:	2b00      	cmp	r3, #0
  40b212:	dd05      	ble.n	40b220 <_dtoa_r+0x528>
  40b214:	4649      	mov	r1, r9
  40b216:	461a      	mov	r2, r3
  40b218:	4620      	mov	r0, r4
  40b21a:	f001 fb2d 	bl	40c878 <__lshift>
  40b21e:	4681      	mov	r9, r0
  40b220:	9b06      	ldr	r3, [sp, #24]
  40b222:	2b00      	cmp	r3, #0
  40b224:	dd05      	ble.n	40b232 <_dtoa_r+0x53a>
  40b226:	4641      	mov	r1, r8
  40b228:	461a      	mov	r2, r3
  40b22a:	4620      	mov	r0, r4
  40b22c:	f001 fb24 	bl	40c878 <__lshift>
  40b230:	4680      	mov	r8, r0
  40b232:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40b234:	2b00      	cmp	r3, #0
  40b236:	f040 8086 	bne.w	40b346 <_dtoa_r+0x64e>
  40b23a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b23c:	2b00      	cmp	r3, #0
  40b23e:	f340 8266 	ble.w	40b70e <_dtoa_r+0xa16>
  40b242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40b244:	2b00      	cmp	r3, #0
  40b246:	f000 8098 	beq.w	40b37a <_dtoa_r+0x682>
  40b24a:	2d00      	cmp	r5, #0
  40b24c:	dd05      	ble.n	40b25a <_dtoa_r+0x562>
  40b24e:	4631      	mov	r1, r6
  40b250:	462a      	mov	r2, r5
  40b252:	4620      	mov	r0, r4
  40b254:	f001 fb10 	bl	40c878 <__lshift>
  40b258:	4606      	mov	r6, r0
  40b25a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40b25c:	2b00      	cmp	r3, #0
  40b25e:	f040 8337 	bne.w	40b8d0 <_dtoa_r+0xbd8>
  40b262:	9606      	str	r6, [sp, #24]
  40b264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b266:	9a04      	ldr	r2, [sp, #16]
  40b268:	f8dd b018 	ldr.w	fp, [sp, #24]
  40b26c:	3b01      	subs	r3, #1
  40b26e:	18d3      	adds	r3, r2, r3
  40b270:	930b      	str	r3, [sp, #44]	; 0x2c
  40b272:	f00a 0301 	and.w	r3, sl, #1
  40b276:	930c      	str	r3, [sp, #48]	; 0x30
  40b278:	4617      	mov	r7, r2
  40b27a:	46c2      	mov	sl, r8
  40b27c:	4651      	mov	r1, sl
  40b27e:	4648      	mov	r0, r9
  40b280:	f7ff fca4 	bl	40abcc <quorem>
  40b284:	4631      	mov	r1, r6
  40b286:	4605      	mov	r5, r0
  40b288:	4648      	mov	r0, r9
  40b28a:	f001 fb47 	bl	40c91c <__mcmp>
  40b28e:	465a      	mov	r2, fp
  40b290:	900a      	str	r0, [sp, #40]	; 0x28
  40b292:	4651      	mov	r1, sl
  40b294:	4620      	mov	r0, r4
  40b296:	f001 fb5d 	bl	40c954 <__mdiff>
  40b29a:	68c2      	ldr	r2, [r0, #12]
  40b29c:	4680      	mov	r8, r0
  40b29e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40b2a2:	2a00      	cmp	r2, #0
  40b2a4:	f040 822b 	bne.w	40b6fe <_dtoa_r+0xa06>
  40b2a8:	4601      	mov	r1, r0
  40b2aa:	4648      	mov	r0, r9
  40b2ac:	9308      	str	r3, [sp, #32]
  40b2ae:	f001 fb35 	bl	40c91c <__mcmp>
  40b2b2:	4641      	mov	r1, r8
  40b2b4:	9006      	str	r0, [sp, #24]
  40b2b6:	4620      	mov	r0, r4
  40b2b8:	f001 f958 	bl	40c56c <_Bfree>
  40b2bc:	9a06      	ldr	r2, [sp, #24]
  40b2be:	9b08      	ldr	r3, [sp, #32]
  40b2c0:	b932      	cbnz	r2, 40b2d0 <_dtoa_r+0x5d8>
  40b2c2:	9924      	ldr	r1, [sp, #144]	; 0x90
  40b2c4:	b921      	cbnz	r1, 40b2d0 <_dtoa_r+0x5d8>
  40b2c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40b2c8:	2a00      	cmp	r2, #0
  40b2ca:	f000 83ef 	beq.w	40baac <_dtoa_r+0xdb4>
  40b2ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40b2d0:	990a      	ldr	r1, [sp, #40]	; 0x28
  40b2d2:	2900      	cmp	r1, #0
  40b2d4:	f2c0 829f 	blt.w	40b816 <_dtoa_r+0xb1e>
  40b2d8:	d105      	bne.n	40b2e6 <_dtoa_r+0x5ee>
  40b2da:	9924      	ldr	r1, [sp, #144]	; 0x90
  40b2dc:	b919      	cbnz	r1, 40b2e6 <_dtoa_r+0x5ee>
  40b2de:	990c      	ldr	r1, [sp, #48]	; 0x30
  40b2e0:	2900      	cmp	r1, #0
  40b2e2:	f000 8298 	beq.w	40b816 <_dtoa_r+0xb1e>
  40b2e6:	2a00      	cmp	r2, #0
  40b2e8:	f300 8306 	bgt.w	40b8f8 <_dtoa_r+0xc00>
  40b2ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40b2ee:	703b      	strb	r3, [r7, #0]
  40b2f0:	f107 0801 	add.w	r8, r7, #1
  40b2f4:	4297      	cmp	r7, r2
  40b2f6:	4645      	mov	r5, r8
  40b2f8:	f000 830c 	beq.w	40b914 <_dtoa_r+0xc1c>
  40b2fc:	4649      	mov	r1, r9
  40b2fe:	2300      	movs	r3, #0
  40b300:	220a      	movs	r2, #10
  40b302:	4620      	mov	r0, r4
  40b304:	f001 f93c 	bl	40c580 <__multadd>
  40b308:	455e      	cmp	r6, fp
  40b30a:	4681      	mov	r9, r0
  40b30c:	4631      	mov	r1, r6
  40b30e:	f04f 0300 	mov.w	r3, #0
  40b312:	f04f 020a 	mov.w	r2, #10
  40b316:	4620      	mov	r0, r4
  40b318:	f000 81eb 	beq.w	40b6f2 <_dtoa_r+0x9fa>
  40b31c:	f001 f930 	bl	40c580 <__multadd>
  40b320:	4659      	mov	r1, fp
  40b322:	4606      	mov	r6, r0
  40b324:	2300      	movs	r3, #0
  40b326:	220a      	movs	r2, #10
  40b328:	4620      	mov	r0, r4
  40b32a:	f001 f929 	bl	40c580 <__multadd>
  40b32e:	4647      	mov	r7, r8
  40b330:	4683      	mov	fp, r0
  40b332:	e7a3      	b.n	40b27c <_dtoa_r+0x584>
  40b334:	201c      	movs	r0, #28
  40b336:	9b08      	ldr	r3, [sp, #32]
  40b338:	4403      	add	r3, r0
  40b33a:	9308      	str	r3, [sp, #32]
  40b33c:	9b06      	ldr	r3, [sp, #24]
  40b33e:	4403      	add	r3, r0
  40b340:	4405      	add	r5, r0
  40b342:	9306      	str	r3, [sp, #24]
  40b344:	e763      	b.n	40b20e <_dtoa_r+0x516>
  40b346:	4641      	mov	r1, r8
  40b348:	4648      	mov	r0, r9
  40b34a:	f001 fae7 	bl	40c91c <__mcmp>
  40b34e:	2800      	cmp	r0, #0
  40b350:	f6bf af73 	bge.w	40b23a <_dtoa_r+0x542>
  40b354:	9f02      	ldr	r7, [sp, #8]
  40b356:	4649      	mov	r1, r9
  40b358:	2300      	movs	r3, #0
  40b35a:	220a      	movs	r2, #10
  40b35c:	4620      	mov	r0, r4
  40b35e:	3f01      	subs	r7, #1
  40b360:	9702      	str	r7, [sp, #8]
  40b362:	f001 f90d 	bl	40c580 <__multadd>
  40b366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40b368:	4681      	mov	r9, r0
  40b36a:	2b00      	cmp	r3, #0
  40b36c:	f040 83b6 	bne.w	40badc <_dtoa_r+0xde4>
  40b370:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40b372:	2b00      	cmp	r3, #0
  40b374:	f340 83bf 	ble.w	40baf6 <_dtoa_r+0xdfe>
  40b378:	930a      	str	r3, [sp, #40]	; 0x28
  40b37a:	f8dd b010 	ldr.w	fp, [sp, #16]
  40b37e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40b380:	465d      	mov	r5, fp
  40b382:	e002      	b.n	40b38a <_dtoa_r+0x692>
  40b384:	f001 f8fc 	bl	40c580 <__multadd>
  40b388:	4681      	mov	r9, r0
  40b38a:	4641      	mov	r1, r8
  40b38c:	4648      	mov	r0, r9
  40b38e:	f7ff fc1d 	bl	40abcc <quorem>
  40b392:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40b396:	f805 ab01 	strb.w	sl, [r5], #1
  40b39a:	eba5 030b 	sub.w	r3, r5, fp
  40b39e:	42bb      	cmp	r3, r7
  40b3a0:	f04f 020a 	mov.w	r2, #10
  40b3a4:	f04f 0300 	mov.w	r3, #0
  40b3a8:	4649      	mov	r1, r9
  40b3aa:	4620      	mov	r0, r4
  40b3ac:	dbea      	blt.n	40b384 <_dtoa_r+0x68c>
  40b3ae:	9b04      	ldr	r3, [sp, #16]
  40b3b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40b3b2:	2a01      	cmp	r2, #1
  40b3b4:	bfac      	ite	ge
  40b3b6:	189b      	addge	r3, r3, r2
  40b3b8:	3301      	addlt	r3, #1
  40b3ba:	461d      	mov	r5, r3
  40b3bc:	f04f 0b00 	mov.w	fp, #0
  40b3c0:	4649      	mov	r1, r9
  40b3c2:	2201      	movs	r2, #1
  40b3c4:	4620      	mov	r0, r4
  40b3c6:	f001 fa57 	bl	40c878 <__lshift>
  40b3ca:	4641      	mov	r1, r8
  40b3cc:	4681      	mov	r9, r0
  40b3ce:	f001 faa5 	bl	40c91c <__mcmp>
  40b3d2:	2800      	cmp	r0, #0
  40b3d4:	f340 823d 	ble.w	40b852 <_dtoa_r+0xb5a>
  40b3d8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40b3dc:	9904      	ldr	r1, [sp, #16]
  40b3de:	1e6b      	subs	r3, r5, #1
  40b3e0:	e004      	b.n	40b3ec <_dtoa_r+0x6f4>
  40b3e2:	428b      	cmp	r3, r1
  40b3e4:	f000 81ae 	beq.w	40b744 <_dtoa_r+0xa4c>
  40b3e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40b3ec:	2a39      	cmp	r2, #57	; 0x39
  40b3ee:	f103 0501 	add.w	r5, r3, #1
  40b3f2:	d0f6      	beq.n	40b3e2 <_dtoa_r+0x6ea>
  40b3f4:	3201      	adds	r2, #1
  40b3f6:	701a      	strb	r2, [r3, #0]
  40b3f8:	4641      	mov	r1, r8
  40b3fa:	4620      	mov	r0, r4
  40b3fc:	f001 f8b6 	bl	40c56c <_Bfree>
  40b400:	2e00      	cmp	r6, #0
  40b402:	f43f ae3d 	beq.w	40b080 <_dtoa_r+0x388>
  40b406:	f1bb 0f00 	cmp.w	fp, #0
  40b40a:	d005      	beq.n	40b418 <_dtoa_r+0x720>
  40b40c:	45b3      	cmp	fp, r6
  40b40e:	d003      	beq.n	40b418 <_dtoa_r+0x720>
  40b410:	4659      	mov	r1, fp
  40b412:	4620      	mov	r0, r4
  40b414:	f001 f8aa 	bl	40c56c <_Bfree>
  40b418:	4631      	mov	r1, r6
  40b41a:	4620      	mov	r0, r4
  40b41c:	f001 f8a6 	bl	40c56c <_Bfree>
  40b420:	e62e      	b.n	40b080 <_dtoa_r+0x388>
  40b422:	2300      	movs	r3, #0
  40b424:	930b      	str	r3, [sp, #44]	; 0x2c
  40b426:	9b02      	ldr	r3, [sp, #8]
  40b428:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40b42a:	4413      	add	r3, r2
  40b42c:	930f      	str	r3, [sp, #60]	; 0x3c
  40b42e:	3301      	adds	r3, #1
  40b430:	2b01      	cmp	r3, #1
  40b432:	461f      	mov	r7, r3
  40b434:	461e      	mov	r6, r3
  40b436:	930a      	str	r3, [sp, #40]	; 0x28
  40b438:	bfb8      	it	lt
  40b43a:	2701      	movlt	r7, #1
  40b43c:	2100      	movs	r1, #0
  40b43e:	2f17      	cmp	r7, #23
  40b440:	6461      	str	r1, [r4, #68]	; 0x44
  40b442:	d90a      	bls.n	40b45a <_dtoa_r+0x762>
  40b444:	2201      	movs	r2, #1
  40b446:	2304      	movs	r3, #4
  40b448:	005b      	lsls	r3, r3, #1
  40b44a:	f103 0014 	add.w	r0, r3, #20
  40b44e:	4287      	cmp	r7, r0
  40b450:	4611      	mov	r1, r2
  40b452:	f102 0201 	add.w	r2, r2, #1
  40b456:	d2f7      	bcs.n	40b448 <_dtoa_r+0x750>
  40b458:	6461      	str	r1, [r4, #68]	; 0x44
  40b45a:	4620      	mov	r0, r4
  40b45c:	f001 f860 	bl	40c520 <_Balloc>
  40b460:	2e0e      	cmp	r6, #14
  40b462:	9004      	str	r0, [sp, #16]
  40b464:	6420      	str	r0, [r4, #64]	; 0x40
  40b466:	f63f ad41 	bhi.w	40aeec <_dtoa_r+0x1f4>
  40b46a:	2d00      	cmp	r5, #0
  40b46c:	f43f ad3e 	beq.w	40aeec <_dtoa_r+0x1f4>
  40b470:	9902      	ldr	r1, [sp, #8]
  40b472:	2900      	cmp	r1, #0
  40b474:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  40b478:	f340 8202 	ble.w	40b880 <_dtoa_r+0xb88>
  40b47c:	4bb8      	ldr	r3, [pc, #736]	; (40b760 <_dtoa_r+0xa68>)
  40b47e:	f001 020f 	and.w	r2, r1, #15
  40b482:	110d      	asrs	r5, r1, #4
  40b484:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40b488:	06e9      	lsls	r1, r5, #27
  40b48a:	e9d3 6700 	ldrd	r6, r7, [r3]
  40b48e:	f140 81ae 	bpl.w	40b7ee <_dtoa_r+0xaf6>
  40b492:	4bb4      	ldr	r3, [pc, #720]	; (40b764 <_dtoa_r+0xa6c>)
  40b494:	4650      	mov	r0, sl
  40b496:	4659      	mov	r1, fp
  40b498:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40b49c:	f7fd fb6a 	bl	408b74 <__aeabi_ddiv>
  40b4a0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40b4a4:	f005 050f 	and.w	r5, r5, #15
  40b4a8:	f04f 0a03 	mov.w	sl, #3
  40b4ac:	b18d      	cbz	r5, 40b4d2 <_dtoa_r+0x7da>
  40b4ae:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 40b764 <_dtoa_r+0xa6c>
  40b4b2:	07ea      	lsls	r2, r5, #31
  40b4b4:	d509      	bpl.n	40b4ca <_dtoa_r+0x7d2>
  40b4b6:	4630      	mov	r0, r6
  40b4b8:	4639      	mov	r1, r7
  40b4ba:	e9d8 2300 	ldrd	r2, r3, [r8]
  40b4be:	f7fd fa2f 	bl	408920 <__aeabi_dmul>
  40b4c2:	f10a 0a01 	add.w	sl, sl, #1
  40b4c6:	4606      	mov	r6, r0
  40b4c8:	460f      	mov	r7, r1
  40b4ca:	106d      	asrs	r5, r5, #1
  40b4cc:	f108 0808 	add.w	r8, r8, #8
  40b4d0:	d1ef      	bne.n	40b4b2 <_dtoa_r+0x7ba>
  40b4d2:	463b      	mov	r3, r7
  40b4d4:	4632      	mov	r2, r6
  40b4d6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40b4da:	f7fd fb4b 	bl	408b74 <__aeabi_ddiv>
  40b4de:	4607      	mov	r7, r0
  40b4e0:	4688      	mov	r8, r1
  40b4e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40b4e4:	b143      	cbz	r3, 40b4f8 <_dtoa_r+0x800>
  40b4e6:	2200      	movs	r2, #0
  40b4e8:	4b9f      	ldr	r3, [pc, #636]	; (40b768 <_dtoa_r+0xa70>)
  40b4ea:	4638      	mov	r0, r7
  40b4ec:	4641      	mov	r1, r8
  40b4ee:	f7fd fc89 	bl	408e04 <__aeabi_dcmplt>
  40b4f2:	2800      	cmp	r0, #0
  40b4f4:	f040 8286 	bne.w	40ba04 <_dtoa_r+0xd0c>
  40b4f8:	4650      	mov	r0, sl
  40b4fa:	f7fd f9ab 	bl	408854 <__aeabi_i2d>
  40b4fe:	463a      	mov	r2, r7
  40b500:	4643      	mov	r3, r8
  40b502:	f7fd fa0d 	bl	408920 <__aeabi_dmul>
  40b506:	4b99      	ldr	r3, [pc, #612]	; (40b76c <_dtoa_r+0xa74>)
  40b508:	2200      	movs	r2, #0
  40b50a:	f7fd f857 	bl	4085bc <__adddf3>
  40b50e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b510:	4605      	mov	r5, r0
  40b512:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40b516:	2b00      	cmp	r3, #0
  40b518:	f000 813e 	beq.w	40b798 <_dtoa_r+0xaa0>
  40b51c:	9b02      	ldr	r3, [sp, #8]
  40b51e:	9315      	str	r3, [sp, #84]	; 0x54
  40b520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b522:	9312      	str	r3, [sp, #72]	; 0x48
  40b524:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40b526:	2b00      	cmp	r3, #0
  40b528:	f000 81fa 	beq.w	40b920 <_dtoa_r+0xc28>
  40b52c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40b52e:	4b8c      	ldr	r3, [pc, #560]	; (40b760 <_dtoa_r+0xa68>)
  40b530:	498f      	ldr	r1, [pc, #572]	; (40b770 <_dtoa_r+0xa78>)
  40b532:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40b536:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40b53a:	2000      	movs	r0, #0
  40b53c:	f7fd fb1a 	bl	408b74 <__aeabi_ddiv>
  40b540:	462a      	mov	r2, r5
  40b542:	4633      	mov	r3, r6
  40b544:	f7fd f838 	bl	4085b8 <__aeabi_dsub>
  40b548:	4682      	mov	sl, r0
  40b54a:	468b      	mov	fp, r1
  40b54c:	4638      	mov	r0, r7
  40b54e:	4641      	mov	r1, r8
  40b550:	f7fd fc96 	bl	408e80 <__aeabi_d2iz>
  40b554:	4605      	mov	r5, r0
  40b556:	f7fd f97d 	bl	408854 <__aeabi_i2d>
  40b55a:	4602      	mov	r2, r0
  40b55c:	460b      	mov	r3, r1
  40b55e:	4638      	mov	r0, r7
  40b560:	4641      	mov	r1, r8
  40b562:	f7fd f829 	bl	4085b8 <__aeabi_dsub>
  40b566:	3530      	adds	r5, #48	; 0x30
  40b568:	fa5f f885 	uxtb.w	r8, r5
  40b56c:	9d04      	ldr	r5, [sp, #16]
  40b56e:	4606      	mov	r6, r0
  40b570:	460f      	mov	r7, r1
  40b572:	f885 8000 	strb.w	r8, [r5]
  40b576:	4602      	mov	r2, r0
  40b578:	460b      	mov	r3, r1
  40b57a:	4650      	mov	r0, sl
  40b57c:	4659      	mov	r1, fp
  40b57e:	3501      	adds	r5, #1
  40b580:	f7fd fc5e 	bl	408e40 <__aeabi_dcmpgt>
  40b584:	2800      	cmp	r0, #0
  40b586:	d154      	bne.n	40b632 <_dtoa_r+0x93a>
  40b588:	4632      	mov	r2, r6
  40b58a:	463b      	mov	r3, r7
  40b58c:	2000      	movs	r0, #0
  40b58e:	4976      	ldr	r1, [pc, #472]	; (40b768 <_dtoa_r+0xa70>)
  40b590:	f7fd f812 	bl	4085b8 <__aeabi_dsub>
  40b594:	4602      	mov	r2, r0
  40b596:	460b      	mov	r3, r1
  40b598:	4650      	mov	r0, sl
  40b59a:	4659      	mov	r1, fp
  40b59c:	f7fd fc50 	bl	408e40 <__aeabi_dcmpgt>
  40b5a0:	2800      	cmp	r0, #0
  40b5a2:	f040 8270 	bne.w	40ba86 <_dtoa_r+0xd8e>
  40b5a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40b5a8:	2a01      	cmp	r2, #1
  40b5aa:	f000 8111 	beq.w	40b7d0 <_dtoa_r+0xad8>
  40b5ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40b5b0:	9a04      	ldr	r2, [sp, #16]
  40b5b2:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40b5b6:	4413      	add	r3, r2
  40b5b8:	4699      	mov	r9, r3
  40b5ba:	e00d      	b.n	40b5d8 <_dtoa_r+0x8e0>
  40b5bc:	2000      	movs	r0, #0
  40b5be:	496a      	ldr	r1, [pc, #424]	; (40b768 <_dtoa_r+0xa70>)
  40b5c0:	f7fc fffa 	bl	4085b8 <__aeabi_dsub>
  40b5c4:	4652      	mov	r2, sl
  40b5c6:	465b      	mov	r3, fp
  40b5c8:	f7fd fc1c 	bl	408e04 <__aeabi_dcmplt>
  40b5cc:	2800      	cmp	r0, #0
  40b5ce:	f040 8258 	bne.w	40ba82 <_dtoa_r+0xd8a>
  40b5d2:	454d      	cmp	r5, r9
  40b5d4:	f000 80fa 	beq.w	40b7cc <_dtoa_r+0xad4>
  40b5d8:	4650      	mov	r0, sl
  40b5da:	4659      	mov	r1, fp
  40b5dc:	2200      	movs	r2, #0
  40b5de:	4b65      	ldr	r3, [pc, #404]	; (40b774 <_dtoa_r+0xa7c>)
  40b5e0:	f7fd f99e 	bl	408920 <__aeabi_dmul>
  40b5e4:	2200      	movs	r2, #0
  40b5e6:	4b63      	ldr	r3, [pc, #396]	; (40b774 <_dtoa_r+0xa7c>)
  40b5e8:	4682      	mov	sl, r0
  40b5ea:	468b      	mov	fp, r1
  40b5ec:	4630      	mov	r0, r6
  40b5ee:	4639      	mov	r1, r7
  40b5f0:	f7fd f996 	bl	408920 <__aeabi_dmul>
  40b5f4:	460f      	mov	r7, r1
  40b5f6:	4606      	mov	r6, r0
  40b5f8:	f7fd fc42 	bl	408e80 <__aeabi_d2iz>
  40b5fc:	4680      	mov	r8, r0
  40b5fe:	f7fd f929 	bl	408854 <__aeabi_i2d>
  40b602:	4602      	mov	r2, r0
  40b604:	460b      	mov	r3, r1
  40b606:	4630      	mov	r0, r6
  40b608:	4639      	mov	r1, r7
  40b60a:	f7fc ffd5 	bl	4085b8 <__aeabi_dsub>
  40b60e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40b612:	fa5f f888 	uxtb.w	r8, r8
  40b616:	4652      	mov	r2, sl
  40b618:	465b      	mov	r3, fp
  40b61a:	f805 8b01 	strb.w	r8, [r5], #1
  40b61e:	4606      	mov	r6, r0
  40b620:	460f      	mov	r7, r1
  40b622:	f7fd fbef 	bl	408e04 <__aeabi_dcmplt>
  40b626:	4632      	mov	r2, r6
  40b628:	463b      	mov	r3, r7
  40b62a:	2800      	cmp	r0, #0
  40b62c:	d0c6      	beq.n	40b5bc <_dtoa_r+0x8c4>
  40b62e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40b632:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40b634:	9302      	str	r3, [sp, #8]
  40b636:	e523      	b.n	40b080 <_dtoa_r+0x388>
  40b638:	2300      	movs	r3, #0
  40b63a:	930b      	str	r3, [sp, #44]	; 0x2c
  40b63c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40b63e:	2b00      	cmp	r3, #0
  40b640:	f340 80dc 	ble.w	40b7fc <_dtoa_r+0xb04>
  40b644:	461f      	mov	r7, r3
  40b646:	461e      	mov	r6, r3
  40b648:	930f      	str	r3, [sp, #60]	; 0x3c
  40b64a:	930a      	str	r3, [sp, #40]	; 0x28
  40b64c:	e6f6      	b.n	40b43c <_dtoa_r+0x744>
  40b64e:	2301      	movs	r3, #1
  40b650:	930b      	str	r3, [sp, #44]	; 0x2c
  40b652:	e7f3      	b.n	40b63c <_dtoa_r+0x944>
  40b654:	f1ba 0f00 	cmp.w	sl, #0
  40b658:	f47f ada8 	bne.w	40b1ac <_dtoa_r+0x4b4>
  40b65c:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40b660:	2b00      	cmp	r3, #0
  40b662:	f47f adba 	bne.w	40b1da <_dtoa_r+0x4e2>
  40b666:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40b66a:	0d3f      	lsrs	r7, r7, #20
  40b66c:	053f      	lsls	r7, r7, #20
  40b66e:	2f00      	cmp	r7, #0
  40b670:	f000 820d 	beq.w	40ba8e <_dtoa_r+0xd96>
  40b674:	9b08      	ldr	r3, [sp, #32]
  40b676:	3301      	adds	r3, #1
  40b678:	9308      	str	r3, [sp, #32]
  40b67a:	9b06      	ldr	r3, [sp, #24]
  40b67c:	3301      	adds	r3, #1
  40b67e:	9306      	str	r3, [sp, #24]
  40b680:	2301      	movs	r3, #1
  40b682:	930c      	str	r3, [sp, #48]	; 0x30
  40b684:	e5ab      	b.n	40b1de <_dtoa_r+0x4e6>
  40b686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b688:	2b00      	cmp	r3, #0
  40b68a:	f73f ac42 	bgt.w	40af12 <_dtoa_r+0x21a>
  40b68e:	f040 8221 	bne.w	40bad4 <_dtoa_r+0xddc>
  40b692:	2200      	movs	r2, #0
  40b694:	4b38      	ldr	r3, [pc, #224]	; (40b778 <_dtoa_r+0xa80>)
  40b696:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40b69a:	f7fd f941 	bl	408920 <__aeabi_dmul>
  40b69e:	4652      	mov	r2, sl
  40b6a0:	465b      	mov	r3, fp
  40b6a2:	f7fd fbc3 	bl	408e2c <__aeabi_dcmpge>
  40b6a6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  40b6aa:	4646      	mov	r6, r8
  40b6ac:	2800      	cmp	r0, #0
  40b6ae:	d041      	beq.n	40b734 <_dtoa_r+0xa3c>
  40b6b0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40b6b2:	9d04      	ldr	r5, [sp, #16]
  40b6b4:	43db      	mvns	r3, r3
  40b6b6:	9302      	str	r3, [sp, #8]
  40b6b8:	4641      	mov	r1, r8
  40b6ba:	4620      	mov	r0, r4
  40b6bc:	f000 ff56 	bl	40c56c <_Bfree>
  40b6c0:	2e00      	cmp	r6, #0
  40b6c2:	f43f acdd 	beq.w	40b080 <_dtoa_r+0x388>
  40b6c6:	e6a7      	b.n	40b418 <_dtoa_r+0x720>
  40b6c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40b6ca:	4649      	mov	r1, r9
  40b6cc:	4620      	mov	r0, r4
  40b6ce:	f001 f883 	bl	40c7d8 <__pow5mult>
  40b6d2:	4681      	mov	r9, r0
  40b6d4:	e558      	b.n	40b188 <_dtoa_r+0x490>
  40b6d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40b6d8:	2a00      	cmp	r2, #0
  40b6da:	f000 8187 	beq.w	40b9ec <_dtoa_r+0xcf4>
  40b6de:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40b6e2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40b6e4:	9d08      	ldr	r5, [sp, #32]
  40b6e6:	e4f2      	b.n	40b0ce <_dtoa_r+0x3d6>
  40b6e8:	f1ba 0f00 	cmp.w	sl, #0
  40b6ec:	f47f ad75 	bne.w	40b1da <_dtoa_r+0x4e2>
  40b6f0:	e7b4      	b.n	40b65c <_dtoa_r+0x964>
  40b6f2:	f000 ff45 	bl	40c580 <__multadd>
  40b6f6:	4647      	mov	r7, r8
  40b6f8:	4606      	mov	r6, r0
  40b6fa:	4683      	mov	fp, r0
  40b6fc:	e5be      	b.n	40b27c <_dtoa_r+0x584>
  40b6fe:	4601      	mov	r1, r0
  40b700:	4620      	mov	r0, r4
  40b702:	9306      	str	r3, [sp, #24]
  40b704:	f000 ff32 	bl	40c56c <_Bfree>
  40b708:	2201      	movs	r2, #1
  40b70a:	9b06      	ldr	r3, [sp, #24]
  40b70c:	e5e0      	b.n	40b2d0 <_dtoa_r+0x5d8>
  40b70e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40b710:	2b02      	cmp	r3, #2
  40b712:	f77f ad96 	ble.w	40b242 <_dtoa_r+0x54a>
  40b716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b718:	2b00      	cmp	r3, #0
  40b71a:	d1c9      	bne.n	40b6b0 <_dtoa_r+0x9b8>
  40b71c:	4641      	mov	r1, r8
  40b71e:	2205      	movs	r2, #5
  40b720:	4620      	mov	r0, r4
  40b722:	f000 ff2d 	bl	40c580 <__multadd>
  40b726:	4601      	mov	r1, r0
  40b728:	4680      	mov	r8, r0
  40b72a:	4648      	mov	r0, r9
  40b72c:	f001 f8f6 	bl	40c91c <__mcmp>
  40b730:	2800      	cmp	r0, #0
  40b732:	ddbd      	ble.n	40b6b0 <_dtoa_r+0x9b8>
  40b734:	9a02      	ldr	r2, [sp, #8]
  40b736:	9904      	ldr	r1, [sp, #16]
  40b738:	2331      	movs	r3, #49	; 0x31
  40b73a:	3201      	adds	r2, #1
  40b73c:	9202      	str	r2, [sp, #8]
  40b73e:	700b      	strb	r3, [r1, #0]
  40b740:	1c4d      	adds	r5, r1, #1
  40b742:	e7b9      	b.n	40b6b8 <_dtoa_r+0x9c0>
  40b744:	9a02      	ldr	r2, [sp, #8]
  40b746:	3201      	adds	r2, #1
  40b748:	9202      	str	r2, [sp, #8]
  40b74a:	9a04      	ldr	r2, [sp, #16]
  40b74c:	2331      	movs	r3, #49	; 0x31
  40b74e:	7013      	strb	r3, [r2, #0]
  40b750:	e652      	b.n	40b3f8 <_dtoa_r+0x700>
  40b752:	2301      	movs	r3, #1
  40b754:	930b      	str	r3, [sp, #44]	; 0x2c
  40b756:	e666      	b.n	40b426 <_dtoa_r+0x72e>
  40b758:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40b75c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40b75e:	e48f      	b.n	40b080 <_dtoa_r+0x388>
  40b760:	0040f468 	.word	0x0040f468
  40b764:	0040f440 	.word	0x0040f440
  40b768:	3ff00000 	.word	0x3ff00000
  40b76c:	401c0000 	.word	0x401c0000
  40b770:	3fe00000 	.word	0x3fe00000
  40b774:	40240000 	.word	0x40240000
  40b778:	40140000 	.word	0x40140000
  40b77c:	4650      	mov	r0, sl
  40b77e:	f7fd f869 	bl	408854 <__aeabi_i2d>
  40b782:	463a      	mov	r2, r7
  40b784:	4643      	mov	r3, r8
  40b786:	f7fd f8cb 	bl	408920 <__aeabi_dmul>
  40b78a:	2200      	movs	r2, #0
  40b78c:	4bc1      	ldr	r3, [pc, #772]	; (40ba94 <_dtoa_r+0xd9c>)
  40b78e:	f7fc ff15 	bl	4085bc <__adddf3>
  40b792:	4605      	mov	r5, r0
  40b794:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40b798:	4641      	mov	r1, r8
  40b79a:	2200      	movs	r2, #0
  40b79c:	4bbe      	ldr	r3, [pc, #760]	; (40ba98 <_dtoa_r+0xda0>)
  40b79e:	4638      	mov	r0, r7
  40b7a0:	f7fc ff0a 	bl	4085b8 <__aeabi_dsub>
  40b7a4:	462a      	mov	r2, r5
  40b7a6:	4633      	mov	r3, r6
  40b7a8:	4682      	mov	sl, r0
  40b7aa:	468b      	mov	fp, r1
  40b7ac:	f7fd fb48 	bl	408e40 <__aeabi_dcmpgt>
  40b7b0:	4680      	mov	r8, r0
  40b7b2:	2800      	cmp	r0, #0
  40b7b4:	f040 8110 	bne.w	40b9d8 <_dtoa_r+0xce0>
  40b7b8:	462a      	mov	r2, r5
  40b7ba:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  40b7be:	4650      	mov	r0, sl
  40b7c0:	4659      	mov	r1, fp
  40b7c2:	f7fd fb1f 	bl	408e04 <__aeabi_dcmplt>
  40b7c6:	b118      	cbz	r0, 40b7d0 <_dtoa_r+0xad8>
  40b7c8:	4646      	mov	r6, r8
  40b7ca:	e771      	b.n	40b6b0 <_dtoa_r+0x9b8>
  40b7cc:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40b7d0:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40b7d4:	f7ff bb8a 	b.w	40aeec <_dtoa_r+0x1f4>
  40b7d8:	9804      	ldr	r0, [sp, #16]
  40b7da:	f7ff babb 	b.w	40ad54 <_dtoa_r+0x5c>
  40b7de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40b7e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40b7e2:	970c      	str	r7, [sp, #48]	; 0x30
  40b7e4:	1afb      	subs	r3, r7, r3
  40b7e6:	441a      	add	r2, r3
  40b7e8:	920d      	str	r2, [sp, #52]	; 0x34
  40b7ea:	2700      	movs	r7, #0
  40b7ec:	e469      	b.n	40b0c2 <_dtoa_r+0x3ca>
  40b7ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40b7f2:	f04f 0a02 	mov.w	sl, #2
  40b7f6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40b7fa:	e657      	b.n	40b4ac <_dtoa_r+0x7b4>
  40b7fc:	2100      	movs	r1, #0
  40b7fe:	2301      	movs	r3, #1
  40b800:	6461      	str	r1, [r4, #68]	; 0x44
  40b802:	4620      	mov	r0, r4
  40b804:	9325      	str	r3, [sp, #148]	; 0x94
  40b806:	f000 fe8b 	bl	40c520 <_Balloc>
  40b80a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40b80c:	9004      	str	r0, [sp, #16]
  40b80e:	6420      	str	r0, [r4, #64]	; 0x40
  40b810:	930a      	str	r3, [sp, #40]	; 0x28
  40b812:	930f      	str	r3, [sp, #60]	; 0x3c
  40b814:	e629      	b.n	40b46a <_dtoa_r+0x772>
  40b816:	2a00      	cmp	r2, #0
  40b818:	46d0      	mov	r8, sl
  40b81a:	f8cd b018 	str.w	fp, [sp, #24]
  40b81e:	469a      	mov	sl, r3
  40b820:	dd11      	ble.n	40b846 <_dtoa_r+0xb4e>
  40b822:	4649      	mov	r1, r9
  40b824:	2201      	movs	r2, #1
  40b826:	4620      	mov	r0, r4
  40b828:	f001 f826 	bl	40c878 <__lshift>
  40b82c:	4641      	mov	r1, r8
  40b82e:	4681      	mov	r9, r0
  40b830:	f001 f874 	bl	40c91c <__mcmp>
  40b834:	2800      	cmp	r0, #0
  40b836:	f340 8146 	ble.w	40bac6 <_dtoa_r+0xdce>
  40b83a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40b83e:	f000 8106 	beq.w	40ba4e <_dtoa_r+0xd56>
  40b842:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  40b846:	46b3      	mov	fp, r6
  40b848:	f887 a000 	strb.w	sl, [r7]
  40b84c:	1c7d      	adds	r5, r7, #1
  40b84e:	9e06      	ldr	r6, [sp, #24]
  40b850:	e5d2      	b.n	40b3f8 <_dtoa_r+0x700>
  40b852:	d104      	bne.n	40b85e <_dtoa_r+0xb66>
  40b854:	f01a 0f01 	tst.w	sl, #1
  40b858:	d001      	beq.n	40b85e <_dtoa_r+0xb66>
  40b85a:	e5bd      	b.n	40b3d8 <_dtoa_r+0x6e0>
  40b85c:	4615      	mov	r5, r2
  40b85e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40b862:	2b30      	cmp	r3, #48	; 0x30
  40b864:	f105 32ff 	add.w	r2, r5, #4294967295
  40b868:	d0f8      	beq.n	40b85c <_dtoa_r+0xb64>
  40b86a:	e5c5      	b.n	40b3f8 <_dtoa_r+0x700>
  40b86c:	9904      	ldr	r1, [sp, #16]
  40b86e:	2230      	movs	r2, #48	; 0x30
  40b870:	700a      	strb	r2, [r1, #0]
  40b872:	9a02      	ldr	r2, [sp, #8]
  40b874:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40b878:	3201      	adds	r2, #1
  40b87a:	9202      	str	r2, [sp, #8]
  40b87c:	f7ff bbfc 	b.w	40b078 <_dtoa_r+0x380>
  40b880:	f000 80bb 	beq.w	40b9fa <_dtoa_r+0xd02>
  40b884:	9b02      	ldr	r3, [sp, #8]
  40b886:	425d      	negs	r5, r3
  40b888:	4b84      	ldr	r3, [pc, #528]	; (40ba9c <_dtoa_r+0xda4>)
  40b88a:	f005 020f 	and.w	r2, r5, #15
  40b88e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40b892:	e9d3 2300 	ldrd	r2, r3, [r3]
  40b896:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40b89a:	f7fd f841 	bl	408920 <__aeabi_dmul>
  40b89e:	112d      	asrs	r5, r5, #4
  40b8a0:	4607      	mov	r7, r0
  40b8a2:	4688      	mov	r8, r1
  40b8a4:	f000 812c 	beq.w	40bb00 <_dtoa_r+0xe08>
  40b8a8:	4e7d      	ldr	r6, [pc, #500]	; (40baa0 <_dtoa_r+0xda8>)
  40b8aa:	f04f 0a02 	mov.w	sl, #2
  40b8ae:	07eb      	lsls	r3, r5, #31
  40b8b0:	d509      	bpl.n	40b8c6 <_dtoa_r+0xbce>
  40b8b2:	4638      	mov	r0, r7
  40b8b4:	4641      	mov	r1, r8
  40b8b6:	e9d6 2300 	ldrd	r2, r3, [r6]
  40b8ba:	f7fd f831 	bl	408920 <__aeabi_dmul>
  40b8be:	f10a 0a01 	add.w	sl, sl, #1
  40b8c2:	4607      	mov	r7, r0
  40b8c4:	4688      	mov	r8, r1
  40b8c6:	106d      	asrs	r5, r5, #1
  40b8c8:	f106 0608 	add.w	r6, r6, #8
  40b8cc:	d1ef      	bne.n	40b8ae <_dtoa_r+0xbb6>
  40b8ce:	e608      	b.n	40b4e2 <_dtoa_r+0x7ea>
  40b8d0:	6871      	ldr	r1, [r6, #4]
  40b8d2:	4620      	mov	r0, r4
  40b8d4:	f000 fe24 	bl	40c520 <_Balloc>
  40b8d8:	6933      	ldr	r3, [r6, #16]
  40b8da:	3302      	adds	r3, #2
  40b8dc:	009a      	lsls	r2, r3, #2
  40b8de:	4605      	mov	r5, r0
  40b8e0:	f106 010c 	add.w	r1, r6, #12
  40b8e4:	300c      	adds	r0, #12
  40b8e6:	f7fd fe25 	bl	409534 <memcpy>
  40b8ea:	4629      	mov	r1, r5
  40b8ec:	2201      	movs	r2, #1
  40b8ee:	4620      	mov	r0, r4
  40b8f0:	f000 ffc2 	bl	40c878 <__lshift>
  40b8f4:	9006      	str	r0, [sp, #24]
  40b8f6:	e4b5      	b.n	40b264 <_dtoa_r+0x56c>
  40b8f8:	2b39      	cmp	r3, #57	; 0x39
  40b8fa:	f8cd b018 	str.w	fp, [sp, #24]
  40b8fe:	46d0      	mov	r8, sl
  40b900:	f000 80a5 	beq.w	40ba4e <_dtoa_r+0xd56>
  40b904:	f103 0a01 	add.w	sl, r3, #1
  40b908:	46b3      	mov	fp, r6
  40b90a:	f887 a000 	strb.w	sl, [r7]
  40b90e:	1c7d      	adds	r5, r7, #1
  40b910:	9e06      	ldr	r6, [sp, #24]
  40b912:	e571      	b.n	40b3f8 <_dtoa_r+0x700>
  40b914:	465a      	mov	r2, fp
  40b916:	46d0      	mov	r8, sl
  40b918:	46b3      	mov	fp, r6
  40b91a:	469a      	mov	sl, r3
  40b91c:	4616      	mov	r6, r2
  40b91e:	e54f      	b.n	40b3c0 <_dtoa_r+0x6c8>
  40b920:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40b922:	495e      	ldr	r1, [pc, #376]	; (40ba9c <_dtoa_r+0xda4>)
  40b924:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  40b928:	462a      	mov	r2, r5
  40b92a:	4633      	mov	r3, r6
  40b92c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  40b930:	f7fc fff6 	bl	408920 <__aeabi_dmul>
  40b934:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  40b938:	4638      	mov	r0, r7
  40b93a:	4641      	mov	r1, r8
  40b93c:	f7fd faa0 	bl	408e80 <__aeabi_d2iz>
  40b940:	4605      	mov	r5, r0
  40b942:	f7fc ff87 	bl	408854 <__aeabi_i2d>
  40b946:	460b      	mov	r3, r1
  40b948:	4602      	mov	r2, r0
  40b94a:	4641      	mov	r1, r8
  40b94c:	4638      	mov	r0, r7
  40b94e:	f7fc fe33 	bl	4085b8 <__aeabi_dsub>
  40b952:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40b954:	460f      	mov	r7, r1
  40b956:	9904      	ldr	r1, [sp, #16]
  40b958:	3530      	adds	r5, #48	; 0x30
  40b95a:	2b01      	cmp	r3, #1
  40b95c:	700d      	strb	r5, [r1, #0]
  40b95e:	4606      	mov	r6, r0
  40b960:	f101 0501 	add.w	r5, r1, #1
  40b964:	d026      	beq.n	40b9b4 <_dtoa_r+0xcbc>
  40b966:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40b968:	9a04      	ldr	r2, [sp, #16]
  40b96a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 40baa8 <_dtoa_r+0xdb0>
  40b96e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40b972:	4413      	add	r3, r2
  40b974:	f04f 0a00 	mov.w	sl, #0
  40b978:	4699      	mov	r9, r3
  40b97a:	4652      	mov	r2, sl
  40b97c:	465b      	mov	r3, fp
  40b97e:	4630      	mov	r0, r6
  40b980:	4639      	mov	r1, r7
  40b982:	f7fc ffcd 	bl	408920 <__aeabi_dmul>
  40b986:	460f      	mov	r7, r1
  40b988:	4606      	mov	r6, r0
  40b98a:	f7fd fa79 	bl	408e80 <__aeabi_d2iz>
  40b98e:	4680      	mov	r8, r0
  40b990:	f7fc ff60 	bl	408854 <__aeabi_i2d>
  40b994:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40b998:	4602      	mov	r2, r0
  40b99a:	460b      	mov	r3, r1
  40b99c:	4630      	mov	r0, r6
  40b99e:	4639      	mov	r1, r7
  40b9a0:	f7fc fe0a 	bl	4085b8 <__aeabi_dsub>
  40b9a4:	f805 8b01 	strb.w	r8, [r5], #1
  40b9a8:	454d      	cmp	r5, r9
  40b9aa:	4606      	mov	r6, r0
  40b9ac:	460f      	mov	r7, r1
  40b9ae:	d1e4      	bne.n	40b97a <_dtoa_r+0xc82>
  40b9b0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40b9b4:	4b3b      	ldr	r3, [pc, #236]	; (40baa4 <_dtoa_r+0xdac>)
  40b9b6:	2200      	movs	r2, #0
  40b9b8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40b9bc:	f7fc fdfe 	bl	4085bc <__adddf3>
  40b9c0:	4632      	mov	r2, r6
  40b9c2:	463b      	mov	r3, r7
  40b9c4:	f7fd fa1e 	bl	408e04 <__aeabi_dcmplt>
  40b9c8:	2800      	cmp	r0, #0
  40b9ca:	d046      	beq.n	40ba5a <_dtoa_r+0xd62>
  40b9cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40b9ce:	9302      	str	r3, [sp, #8]
  40b9d0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40b9d4:	f7ff bb43 	b.w	40b05e <_dtoa_r+0x366>
  40b9d8:	f04f 0800 	mov.w	r8, #0
  40b9dc:	4646      	mov	r6, r8
  40b9de:	e6a9      	b.n	40b734 <_dtoa_r+0xa3c>
  40b9e0:	9b08      	ldr	r3, [sp, #32]
  40b9e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40b9e4:	1a9d      	subs	r5, r3, r2
  40b9e6:	2300      	movs	r3, #0
  40b9e8:	f7ff bb71 	b.w	40b0ce <_dtoa_r+0x3d6>
  40b9ec:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40b9ee:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40b9f0:	9d08      	ldr	r5, [sp, #32]
  40b9f2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40b9f6:	f7ff bb6a 	b.w	40b0ce <_dtoa_r+0x3d6>
  40b9fa:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  40b9fe:	f04f 0a02 	mov.w	sl, #2
  40ba02:	e56e      	b.n	40b4e2 <_dtoa_r+0x7ea>
  40ba04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40ba06:	2b00      	cmp	r3, #0
  40ba08:	f43f aeb8 	beq.w	40b77c <_dtoa_r+0xa84>
  40ba0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40ba0e:	2b00      	cmp	r3, #0
  40ba10:	f77f aede 	ble.w	40b7d0 <_dtoa_r+0xad8>
  40ba14:	2200      	movs	r2, #0
  40ba16:	4b24      	ldr	r3, [pc, #144]	; (40baa8 <_dtoa_r+0xdb0>)
  40ba18:	4638      	mov	r0, r7
  40ba1a:	4641      	mov	r1, r8
  40ba1c:	f7fc ff80 	bl	408920 <__aeabi_dmul>
  40ba20:	4607      	mov	r7, r0
  40ba22:	4688      	mov	r8, r1
  40ba24:	f10a 0001 	add.w	r0, sl, #1
  40ba28:	f7fc ff14 	bl	408854 <__aeabi_i2d>
  40ba2c:	463a      	mov	r2, r7
  40ba2e:	4643      	mov	r3, r8
  40ba30:	f7fc ff76 	bl	408920 <__aeabi_dmul>
  40ba34:	2200      	movs	r2, #0
  40ba36:	4b17      	ldr	r3, [pc, #92]	; (40ba94 <_dtoa_r+0xd9c>)
  40ba38:	f7fc fdc0 	bl	4085bc <__adddf3>
  40ba3c:	9a02      	ldr	r2, [sp, #8]
  40ba3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40ba40:	9312      	str	r3, [sp, #72]	; 0x48
  40ba42:	3a01      	subs	r2, #1
  40ba44:	4605      	mov	r5, r0
  40ba46:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40ba4a:	9215      	str	r2, [sp, #84]	; 0x54
  40ba4c:	e56a      	b.n	40b524 <_dtoa_r+0x82c>
  40ba4e:	2239      	movs	r2, #57	; 0x39
  40ba50:	46b3      	mov	fp, r6
  40ba52:	703a      	strb	r2, [r7, #0]
  40ba54:	9e06      	ldr	r6, [sp, #24]
  40ba56:	1c7d      	adds	r5, r7, #1
  40ba58:	e4c0      	b.n	40b3dc <_dtoa_r+0x6e4>
  40ba5a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40ba5e:	2000      	movs	r0, #0
  40ba60:	4910      	ldr	r1, [pc, #64]	; (40baa4 <_dtoa_r+0xdac>)
  40ba62:	f7fc fda9 	bl	4085b8 <__aeabi_dsub>
  40ba66:	4632      	mov	r2, r6
  40ba68:	463b      	mov	r3, r7
  40ba6a:	f7fd f9e9 	bl	408e40 <__aeabi_dcmpgt>
  40ba6e:	b908      	cbnz	r0, 40ba74 <_dtoa_r+0xd7c>
  40ba70:	e6ae      	b.n	40b7d0 <_dtoa_r+0xad8>
  40ba72:	4615      	mov	r5, r2
  40ba74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40ba78:	2b30      	cmp	r3, #48	; 0x30
  40ba7a:	f105 32ff 	add.w	r2, r5, #4294967295
  40ba7e:	d0f8      	beq.n	40ba72 <_dtoa_r+0xd7a>
  40ba80:	e5d7      	b.n	40b632 <_dtoa_r+0x93a>
  40ba82:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40ba86:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40ba88:	9302      	str	r3, [sp, #8]
  40ba8a:	f7ff bae8 	b.w	40b05e <_dtoa_r+0x366>
  40ba8e:	970c      	str	r7, [sp, #48]	; 0x30
  40ba90:	f7ff bba5 	b.w	40b1de <_dtoa_r+0x4e6>
  40ba94:	401c0000 	.word	0x401c0000
  40ba98:	40140000 	.word	0x40140000
  40ba9c:	0040f468 	.word	0x0040f468
  40baa0:	0040f440 	.word	0x0040f440
  40baa4:	3fe00000 	.word	0x3fe00000
  40baa8:	40240000 	.word	0x40240000
  40baac:	2b39      	cmp	r3, #57	; 0x39
  40baae:	f8cd b018 	str.w	fp, [sp, #24]
  40bab2:	46d0      	mov	r8, sl
  40bab4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40bab8:	469a      	mov	sl, r3
  40baba:	d0c8      	beq.n	40ba4e <_dtoa_r+0xd56>
  40babc:	f1bb 0f00 	cmp.w	fp, #0
  40bac0:	f73f aebf 	bgt.w	40b842 <_dtoa_r+0xb4a>
  40bac4:	e6bf      	b.n	40b846 <_dtoa_r+0xb4e>
  40bac6:	f47f aebe 	bne.w	40b846 <_dtoa_r+0xb4e>
  40baca:	f01a 0f01 	tst.w	sl, #1
  40bace:	f43f aeba 	beq.w	40b846 <_dtoa_r+0xb4e>
  40bad2:	e6b2      	b.n	40b83a <_dtoa_r+0xb42>
  40bad4:	f04f 0800 	mov.w	r8, #0
  40bad8:	4646      	mov	r6, r8
  40bada:	e5e9      	b.n	40b6b0 <_dtoa_r+0x9b8>
  40badc:	4631      	mov	r1, r6
  40bade:	2300      	movs	r3, #0
  40bae0:	220a      	movs	r2, #10
  40bae2:	4620      	mov	r0, r4
  40bae4:	f000 fd4c 	bl	40c580 <__multadd>
  40bae8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40baea:	2b00      	cmp	r3, #0
  40baec:	4606      	mov	r6, r0
  40baee:	dd0a      	ble.n	40bb06 <_dtoa_r+0xe0e>
  40baf0:	930a      	str	r3, [sp, #40]	; 0x28
  40baf2:	f7ff bbaa 	b.w	40b24a <_dtoa_r+0x552>
  40baf6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40baf8:	2b02      	cmp	r3, #2
  40bafa:	dc23      	bgt.n	40bb44 <_dtoa_r+0xe4c>
  40bafc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40bafe:	e43b      	b.n	40b378 <_dtoa_r+0x680>
  40bb00:	f04f 0a02 	mov.w	sl, #2
  40bb04:	e4ed      	b.n	40b4e2 <_dtoa_r+0x7ea>
  40bb06:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40bb08:	2b02      	cmp	r3, #2
  40bb0a:	dc1b      	bgt.n	40bb44 <_dtoa_r+0xe4c>
  40bb0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40bb0e:	e7ef      	b.n	40baf0 <_dtoa_r+0xdf8>
  40bb10:	2500      	movs	r5, #0
  40bb12:	6465      	str	r5, [r4, #68]	; 0x44
  40bb14:	4629      	mov	r1, r5
  40bb16:	4620      	mov	r0, r4
  40bb18:	f000 fd02 	bl	40c520 <_Balloc>
  40bb1c:	f04f 33ff 	mov.w	r3, #4294967295
  40bb20:	930a      	str	r3, [sp, #40]	; 0x28
  40bb22:	930f      	str	r3, [sp, #60]	; 0x3c
  40bb24:	2301      	movs	r3, #1
  40bb26:	9004      	str	r0, [sp, #16]
  40bb28:	9525      	str	r5, [sp, #148]	; 0x94
  40bb2a:	6420      	str	r0, [r4, #64]	; 0x40
  40bb2c:	930b      	str	r3, [sp, #44]	; 0x2c
  40bb2e:	f7ff b9dd 	b.w	40aeec <_dtoa_r+0x1f4>
  40bb32:	2501      	movs	r5, #1
  40bb34:	f7ff b9a5 	b.w	40ae82 <_dtoa_r+0x18a>
  40bb38:	f43f ab69 	beq.w	40b20e <_dtoa_r+0x516>
  40bb3c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  40bb40:	f7ff bbf9 	b.w	40b336 <_dtoa_r+0x63e>
  40bb44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40bb46:	930a      	str	r3, [sp, #40]	; 0x28
  40bb48:	e5e5      	b.n	40b716 <_dtoa_r+0xa1e>
  40bb4a:	bf00      	nop

0040bb4c <__libc_fini_array>:
  40bb4c:	b538      	push	{r3, r4, r5, lr}
  40bb4e:	4c0a      	ldr	r4, [pc, #40]	; (40bb78 <__libc_fini_array+0x2c>)
  40bb50:	4d0a      	ldr	r5, [pc, #40]	; (40bb7c <__libc_fini_array+0x30>)
  40bb52:	1b64      	subs	r4, r4, r5
  40bb54:	10a4      	asrs	r4, r4, #2
  40bb56:	d00a      	beq.n	40bb6e <__libc_fini_array+0x22>
  40bb58:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40bb5c:	3b01      	subs	r3, #1
  40bb5e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40bb62:	3c01      	subs	r4, #1
  40bb64:	f855 3904 	ldr.w	r3, [r5], #-4
  40bb68:	4798      	blx	r3
  40bb6a:	2c00      	cmp	r4, #0
  40bb6c:	d1f9      	bne.n	40bb62 <__libc_fini_array+0x16>
  40bb6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40bb72:	f003 bd6f 	b.w	40f654 <_fini>
  40bb76:	bf00      	nop
  40bb78:	0040f664 	.word	0x0040f664
  40bb7c:	0040f660 	.word	0x0040f660

0040bb80 <_malloc_trim_r>:
  40bb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40bb82:	4f24      	ldr	r7, [pc, #144]	; (40bc14 <_malloc_trim_r+0x94>)
  40bb84:	460c      	mov	r4, r1
  40bb86:	4606      	mov	r6, r0
  40bb88:	f000 fcbe 	bl	40c508 <__malloc_lock>
  40bb8c:	68bb      	ldr	r3, [r7, #8]
  40bb8e:	685d      	ldr	r5, [r3, #4]
  40bb90:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40bb94:	310f      	adds	r1, #15
  40bb96:	f025 0503 	bic.w	r5, r5, #3
  40bb9a:	4429      	add	r1, r5
  40bb9c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40bba0:	f021 010f 	bic.w	r1, r1, #15
  40bba4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40bba8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40bbac:	db07      	blt.n	40bbbe <_malloc_trim_r+0x3e>
  40bbae:	2100      	movs	r1, #0
  40bbb0:	4630      	mov	r0, r6
  40bbb2:	f001 f955 	bl	40ce60 <_sbrk_r>
  40bbb6:	68bb      	ldr	r3, [r7, #8]
  40bbb8:	442b      	add	r3, r5
  40bbba:	4298      	cmp	r0, r3
  40bbbc:	d004      	beq.n	40bbc8 <_malloc_trim_r+0x48>
  40bbbe:	4630      	mov	r0, r6
  40bbc0:	f000 fca8 	bl	40c514 <__malloc_unlock>
  40bbc4:	2000      	movs	r0, #0
  40bbc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40bbc8:	4261      	negs	r1, r4
  40bbca:	4630      	mov	r0, r6
  40bbcc:	f001 f948 	bl	40ce60 <_sbrk_r>
  40bbd0:	3001      	adds	r0, #1
  40bbd2:	d00d      	beq.n	40bbf0 <_malloc_trim_r+0x70>
  40bbd4:	4b10      	ldr	r3, [pc, #64]	; (40bc18 <_malloc_trim_r+0x98>)
  40bbd6:	68ba      	ldr	r2, [r7, #8]
  40bbd8:	6819      	ldr	r1, [r3, #0]
  40bbda:	1b2d      	subs	r5, r5, r4
  40bbdc:	f045 0501 	orr.w	r5, r5, #1
  40bbe0:	4630      	mov	r0, r6
  40bbe2:	1b09      	subs	r1, r1, r4
  40bbe4:	6055      	str	r5, [r2, #4]
  40bbe6:	6019      	str	r1, [r3, #0]
  40bbe8:	f000 fc94 	bl	40c514 <__malloc_unlock>
  40bbec:	2001      	movs	r0, #1
  40bbee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40bbf0:	2100      	movs	r1, #0
  40bbf2:	4630      	mov	r0, r6
  40bbf4:	f001 f934 	bl	40ce60 <_sbrk_r>
  40bbf8:	68ba      	ldr	r2, [r7, #8]
  40bbfa:	1a83      	subs	r3, r0, r2
  40bbfc:	2b0f      	cmp	r3, #15
  40bbfe:	ddde      	ble.n	40bbbe <_malloc_trim_r+0x3e>
  40bc00:	4c06      	ldr	r4, [pc, #24]	; (40bc1c <_malloc_trim_r+0x9c>)
  40bc02:	4905      	ldr	r1, [pc, #20]	; (40bc18 <_malloc_trim_r+0x98>)
  40bc04:	6824      	ldr	r4, [r4, #0]
  40bc06:	f043 0301 	orr.w	r3, r3, #1
  40bc0a:	1b00      	subs	r0, r0, r4
  40bc0c:	6053      	str	r3, [r2, #4]
  40bc0e:	6008      	str	r0, [r1, #0]
  40bc10:	e7d5      	b.n	40bbbe <_malloc_trim_r+0x3e>
  40bc12:	bf00      	nop
  40bc14:	20000660 	.word	0x20000660
  40bc18:	20000eb4 	.word	0x20000eb4
  40bc1c:	20000a68 	.word	0x20000a68

0040bc20 <_free_r>:
  40bc20:	2900      	cmp	r1, #0
  40bc22:	d044      	beq.n	40bcae <_free_r+0x8e>
  40bc24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40bc28:	460d      	mov	r5, r1
  40bc2a:	4680      	mov	r8, r0
  40bc2c:	f000 fc6c 	bl	40c508 <__malloc_lock>
  40bc30:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40bc34:	4969      	ldr	r1, [pc, #420]	; (40bddc <_free_r+0x1bc>)
  40bc36:	f027 0301 	bic.w	r3, r7, #1
  40bc3a:	f1a5 0408 	sub.w	r4, r5, #8
  40bc3e:	18e2      	adds	r2, r4, r3
  40bc40:	688e      	ldr	r6, [r1, #8]
  40bc42:	6850      	ldr	r0, [r2, #4]
  40bc44:	42b2      	cmp	r2, r6
  40bc46:	f020 0003 	bic.w	r0, r0, #3
  40bc4a:	d05e      	beq.n	40bd0a <_free_r+0xea>
  40bc4c:	07fe      	lsls	r6, r7, #31
  40bc4e:	6050      	str	r0, [r2, #4]
  40bc50:	d40b      	bmi.n	40bc6a <_free_r+0x4a>
  40bc52:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40bc56:	1be4      	subs	r4, r4, r7
  40bc58:	f101 0e08 	add.w	lr, r1, #8
  40bc5c:	68a5      	ldr	r5, [r4, #8]
  40bc5e:	4575      	cmp	r5, lr
  40bc60:	443b      	add	r3, r7
  40bc62:	d06d      	beq.n	40bd40 <_free_r+0x120>
  40bc64:	68e7      	ldr	r7, [r4, #12]
  40bc66:	60ef      	str	r7, [r5, #12]
  40bc68:	60bd      	str	r5, [r7, #8]
  40bc6a:	1815      	adds	r5, r2, r0
  40bc6c:	686d      	ldr	r5, [r5, #4]
  40bc6e:	07ed      	lsls	r5, r5, #31
  40bc70:	d53e      	bpl.n	40bcf0 <_free_r+0xd0>
  40bc72:	f043 0201 	orr.w	r2, r3, #1
  40bc76:	6062      	str	r2, [r4, #4]
  40bc78:	50e3      	str	r3, [r4, r3]
  40bc7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40bc7e:	d217      	bcs.n	40bcb0 <_free_r+0x90>
  40bc80:	08db      	lsrs	r3, r3, #3
  40bc82:	1c58      	adds	r0, r3, #1
  40bc84:	109a      	asrs	r2, r3, #2
  40bc86:	684d      	ldr	r5, [r1, #4]
  40bc88:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40bc8c:	60a7      	str	r7, [r4, #8]
  40bc8e:	2301      	movs	r3, #1
  40bc90:	4093      	lsls	r3, r2
  40bc92:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40bc96:	432b      	orrs	r3, r5
  40bc98:	3a08      	subs	r2, #8
  40bc9a:	60e2      	str	r2, [r4, #12]
  40bc9c:	604b      	str	r3, [r1, #4]
  40bc9e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40bca2:	60fc      	str	r4, [r7, #12]
  40bca4:	4640      	mov	r0, r8
  40bca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40bcaa:	f000 bc33 	b.w	40c514 <__malloc_unlock>
  40bcae:	4770      	bx	lr
  40bcb0:	0a5a      	lsrs	r2, r3, #9
  40bcb2:	2a04      	cmp	r2, #4
  40bcb4:	d852      	bhi.n	40bd5c <_free_r+0x13c>
  40bcb6:	099a      	lsrs	r2, r3, #6
  40bcb8:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40bcbc:	00ff      	lsls	r7, r7, #3
  40bcbe:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40bcc2:	19c8      	adds	r0, r1, r7
  40bcc4:	59ca      	ldr	r2, [r1, r7]
  40bcc6:	3808      	subs	r0, #8
  40bcc8:	4290      	cmp	r0, r2
  40bcca:	d04f      	beq.n	40bd6c <_free_r+0x14c>
  40bccc:	6851      	ldr	r1, [r2, #4]
  40bcce:	f021 0103 	bic.w	r1, r1, #3
  40bcd2:	428b      	cmp	r3, r1
  40bcd4:	d232      	bcs.n	40bd3c <_free_r+0x11c>
  40bcd6:	6892      	ldr	r2, [r2, #8]
  40bcd8:	4290      	cmp	r0, r2
  40bcda:	d1f7      	bne.n	40bccc <_free_r+0xac>
  40bcdc:	68c3      	ldr	r3, [r0, #12]
  40bcde:	60a0      	str	r0, [r4, #8]
  40bce0:	60e3      	str	r3, [r4, #12]
  40bce2:	609c      	str	r4, [r3, #8]
  40bce4:	60c4      	str	r4, [r0, #12]
  40bce6:	4640      	mov	r0, r8
  40bce8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40bcec:	f000 bc12 	b.w	40c514 <__malloc_unlock>
  40bcf0:	6895      	ldr	r5, [r2, #8]
  40bcf2:	4f3b      	ldr	r7, [pc, #236]	; (40bde0 <_free_r+0x1c0>)
  40bcf4:	42bd      	cmp	r5, r7
  40bcf6:	4403      	add	r3, r0
  40bcf8:	d040      	beq.n	40bd7c <_free_r+0x15c>
  40bcfa:	68d0      	ldr	r0, [r2, #12]
  40bcfc:	60e8      	str	r0, [r5, #12]
  40bcfe:	f043 0201 	orr.w	r2, r3, #1
  40bd02:	6085      	str	r5, [r0, #8]
  40bd04:	6062      	str	r2, [r4, #4]
  40bd06:	50e3      	str	r3, [r4, r3]
  40bd08:	e7b7      	b.n	40bc7a <_free_r+0x5a>
  40bd0a:	07ff      	lsls	r7, r7, #31
  40bd0c:	4403      	add	r3, r0
  40bd0e:	d407      	bmi.n	40bd20 <_free_r+0x100>
  40bd10:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40bd14:	1aa4      	subs	r4, r4, r2
  40bd16:	4413      	add	r3, r2
  40bd18:	68a0      	ldr	r0, [r4, #8]
  40bd1a:	68e2      	ldr	r2, [r4, #12]
  40bd1c:	60c2      	str	r2, [r0, #12]
  40bd1e:	6090      	str	r0, [r2, #8]
  40bd20:	4a30      	ldr	r2, [pc, #192]	; (40bde4 <_free_r+0x1c4>)
  40bd22:	6812      	ldr	r2, [r2, #0]
  40bd24:	f043 0001 	orr.w	r0, r3, #1
  40bd28:	4293      	cmp	r3, r2
  40bd2a:	6060      	str	r0, [r4, #4]
  40bd2c:	608c      	str	r4, [r1, #8]
  40bd2e:	d3b9      	bcc.n	40bca4 <_free_r+0x84>
  40bd30:	4b2d      	ldr	r3, [pc, #180]	; (40bde8 <_free_r+0x1c8>)
  40bd32:	4640      	mov	r0, r8
  40bd34:	6819      	ldr	r1, [r3, #0]
  40bd36:	f7ff ff23 	bl	40bb80 <_malloc_trim_r>
  40bd3a:	e7b3      	b.n	40bca4 <_free_r+0x84>
  40bd3c:	4610      	mov	r0, r2
  40bd3e:	e7cd      	b.n	40bcdc <_free_r+0xbc>
  40bd40:	1811      	adds	r1, r2, r0
  40bd42:	6849      	ldr	r1, [r1, #4]
  40bd44:	07c9      	lsls	r1, r1, #31
  40bd46:	d444      	bmi.n	40bdd2 <_free_r+0x1b2>
  40bd48:	6891      	ldr	r1, [r2, #8]
  40bd4a:	68d2      	ldr	r2, [r2, #12]
  40bd4c:	60ca      	str	r2, [r1, #12]
  40bd4e:	4403      	add	r3, r0
  40bd50:	f043 0001 	orr.w	r0, r3, #1
  40bd54:	6091      	str	r1, [r2, #8]
  40bd56:	6060      	str	r0, [r4, #4]
  40bd58:	50e3      	str	r3, [r4, r3]
  40bd5a:	e7a3      	b.n	40bca4 <_free_r+0x84>
  40bd5c:	2a14      	cmp	r2, #20
  40bd5e:	d816      	bhi.n	40bd8e <_free_r+0x16e>
  40bd60:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40bd64:	00ff      	lsls	r7, r7, #3
  40bd66:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40bd6a:	e7aa      	b.n	40bcc2 <_free_r+0xa2>
  40bd6c:	10aa      	asrs	r2, r5, #2
  40bd6e:	2301      	movs	r3, #1
  40bd70:	684d      	ldr	r5, [r1, #4]
  40bd72:	4093      	lsls	r3, r2
  40bd74:	432b      	orrs	r3, r5
  40bd76:	604b      	str	r3, [r1, #4]
  40bd78:	4603      	mov	r3, r0
  40bd7a:	e7b0      	b.n	40bcde <_free_r+0xbe>
  40bd7c:	f043 0201 	orr.w	r2, r3, #1
  40bd80:	614c      	str	r4, [r1, #20]
  40bd82:	610c      	str	r4, [r1, #16]
  40bd84:	60e5      	str	r5, [r4, #12]
  40bd86:	60a5      	str	r5, [r4, #8]
  40bd88:	6062      	str	r2, [r4, #4]
  40bd8a:	50e3      	str	r3, [r4, r3]
  40bd8c:	e78a      	b.n	40bca4 <_free_r+0x84>
  40bd8e:	2a54      	cmp	r2, #84	; 0x54
  40bd90:	d806      	bhi.n	40bda0 <_free_r+0x180>
  40bd92:	0b1a      	lsrs	r2, r3, #12
  40bd94:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40bd98:	00ff      	lsls	r7, r7, #3
  40bd9a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40bd9e:	e790      	b.n	40bcc2 <_free_r+0xa2>
  40bda0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40bda4:	d806      	bhi.n	40bdb4 <_free_r+0x194>
  40bda6:	0bda      	lsrs	r2, r3, #15
  40bda8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40bdac:	00ff      	lsls	r7, r7, #3
  40bdae:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40bdb2:	e786      	b.n	40bcc2 <_free_r+0xa2>
  40bdb4:	f240 5054 	movw	r0, #1364	; 0x554
  40bdb8:	4282      	cmp	r2, r0
  40bdba:	d806      	bhi.n	40bdca <_free_r+0x1aa>
  40bdbc:	0c9a      	lsrs	r2, r3, #18
  40bdbe:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40bdc2:	00ff      	lsls	r7, r7, #3
  40bdc4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40bdc8:	e77b      	b.n	40bcc2 <_free_r+0xa2>
  40bdca:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40bdce:	257e      	movs	r5, #126	; 0x7e
  40bdd0:	e777      	b.n	40bcc2 <_free_r+0xa2>
  40bdd2:	f043 0101 	orr.w	r1, r3, #1
  40bdd6:	6061      	str	r1, [r4, #4]
  40bdd8:	6013      	str	r3, [r2, #0]
  40bdda:	e763      	b.n	40bca4 <_free_r+0x84>
  40bddc:	20000660 	.word	0x20000660
  40bde0:	20000668 	.word	0x20000668
  40bde4:	20000a6c 	.word	0x20000a6c
  40bde8:	20000ee4 	.word	0x20000ee4

0040bdec <_localeconv_r>:
  40bdec:	4a04      	ldr	r2, [pc, #16]	; (40be00 <_localeconv_r+0x14>)
  40bdee:	4b05      	ldr	r3, [pc, #20]	; (40be04 <_localeconv_r+0x18>)
  40bdf0:	6812      	ldr	r2, [r2, #0]
  40bdf2:	6b50      	ldr	r0, [r2, #52]	; 0x34
  40bdf4:	2800      	cmp	r0, #0
  40bdf6:	bf08      	it	eq
  40bdf8:	4618      	moveq	r0, r3
  40bdfa:	30f0      	adds	r0, #240	; 0xf0
  40bdfc:	4770      	bx	lr
  40bdfe:	bf00      	nop
  40be00:	200000c4 	.word	0x200000c4
  40be04:	200004f4 	.word	0x200004f4

0040be08 <__retarget_lock_acquire_recursive>:
  40be08:	4770      	bx	lr
  40be0a:	bf00      	nop

0040be0c <__retarget_lock_release_recursive>:
  40be0c:	4770      	bx	lr
  40be0e:	bf00      	nop

0040be10 <_malloc_r>:
  40be10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40be14:	f101 060b 	add.w	r6, r1, #11
  40be18:	2e16      	cmp	r6, #22
  40be1a:	b083      	sub	sp, #12
  40be1c:	4605      	mov	r5, r0
  40be1e:	f240 809e 	bls.w	40bf5e <_malloc_r+0x14e>
  40be22:	f036 0607 	bics.w	r6, r6, #7
  40be26:	f100 80bd 	bmi.w	40bfa4 <_malloc_r+0x194>
  40be2a:	42b1      	cmp	r1, r6
  40be2c:	f200 80ba 	bhi.w	40bfa4 <_malloc_r+0x194>
  40be30:	f000 fb6a 	bl	40c508 <__malloc_lock>
  40be34:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40be38:	f0c0 8293 	bcc.w	40c362 <_malloc_r+0x552>
  40be3c:	0a73      	lsrs	r3, r6, #9
  40be3e:	f000 80b8 	beq.w	40bfb2 <_malloc_r+0x1a2>
  40be42:	2b04      	cmp	r3, #4
  40be44:	f200 8179 	bhi.w	40c13a <_malloc_r+0x32a>
  40be48:	09b3      	lsrs	r3, r6, #6
  40be4a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40be4e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40be52:	00c3      	lsls	r3, r0, #3
  40be54:	4fbf      	ldr	r7, [pc, #764]	; (40c154 <_malloc_r+0x344>)
  40be56:	443b      	add	r3, r7
  40be58:	f1a3 0108 	sub.w	r1, r3, #8
  40be5c:	685c      	ldr	r4, [r3, #4]
  40be5e:	42a1      	cmp	r1, r4
  40be60:	d106      	bne.n	40be70 <_malloc_r+0x60>
  40be62:	e00c      	b.n	40be7e <_malloc_r+0x6e>
  40be64:	2a00      	cmp	r2, #0
  40be66:	f280 80aa 	bge.w	40bfbe <_malloc_r+0x1ae>
  40be6a:	68e4      	ldr	r4, [r4, #12]
  40be6c:	42a1      	cmp	r1, r4
  40be6e:	d006      	beq.n	40be7e <_malloc_r+0x6e>
  40be70:	6863      	ldr	r3, [r4, #4]
  40be72:	f023 0303 	bic.w	r3, r3, #3
  40be76:	1b9a      	subs	r2, r3, r6
  40be78:	2a0f      	cmp	r2, #15
  40be7a:	ddf3      	ble.n	40be64 <_malloc_r+0x54>
  40be7c:	4670      	mov	r0, lr
  40be7e:	693c      	ldr	r4, [r7, #16]
  40be80:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40c168 <_malloc_r+0x358>
  40be84:	4574      	cmp	r4, lr
  40be86:	f000 81ab 	beq.w	40c1e0 <_malloc_r+0x3d0>
  40be8a:	6863      	ldr	r3, [r4, #4]
  40be8c:	f023 0303 	bic.w	r3, r3, #3
  40be90:	1b9a      	subs	r2, r3, r6
  40be92:	2a0f      	cmp	r2, #15
  40be94:	f300 8190 	bgt.w	40c1b8 <_malloc_r+0x3a8>
  40be98:	2a00      	cmp	r2, #0
  40be9a:	f8c7 e014 	str.w	lr, [r7, #20]
  40be9e:	f8c7 e010 	str.w	lr, [r7, #16]
  40bea2:	f280 809d 	bge.w	40bfe0 <_malloc_r+0x1d0>
  40bea6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40beaa:	f080 8161 	bcs.w	40c170 <_malloc_r+0x360>
  40beae:	08db      	lsrs	r3, r3, #3
  40beb0:	f103 0c01 	add.w	ip, r3, #1
  40beb4:	1099      	asrs	r1, r3, #2
  40beb6:	687a      	ldr	r2, [r7, #4]
  40beb8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40bebc:	f8c4 8008 	str.w	r8, [r4, #8]
  40bec0:	2301      	movs	r3, #1
  40bec2:	408b      	lsls	r3, r1
  40bec4:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40bec8:	4313      	orrs	r3, r2
  40beca:	3908      	subs	r1, #8
  40becc:	60e1      	str	r1, [r4, #12]
  40bece:	607b      	str	r3, [r7, #4]
  40bed0:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40bed4:	f8c8 400c 	str.w	r4, [r8, #12]
  40bed8:	1082      	asrs	r2, r0, #2
  40beda:	2401      	movs	r4, #1
  40bedc:	4094      	lsls	r4, r2
  40bede:	429c      	cmp	r4, r3
  40bee0:	f200 808b 	bhi.w	40bffa <_malloc_r+0x1ea>
  40bee4:	421c      	tst	r4, r3
  40bee6:	d106      	bne.n	40bef6 <_malloc_r+0xe6>
  40bee8:	f020 0003 	bic.w	r0, r0, #3
  40beec:	0064      	lsls	r4, r4, #1
  40beee:	421c      	tst	r4, r3
  40bef0:	f100 0004 	add.w	r0, r0, #4
  40bef4:	d0fa      	beq.n	40beec <_malloc_r+0xdc>
  40bef6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40befa:	46cc      	mov	ip, r9
  40befc:	4680      	mov	r8, r0
  40befe:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40bf02:	459c      	cmp	ip, r3
  40bf04:	d107      	bne.n	40bf16 <_malloc_r+0x106>
  40bf06:	e16d      	b.n	40c1e4 <_malloc_r+0x3d4>
  40bf08:	2a00      	cmp	r2, #0
  40bf0a:	f280 817b 	bge.w	40c204 <_malloc_r+0x3f4>
  40bf0e:	68db      	ldr	r3, [r3, #12]
  40bf10:	459c      	cmp	ip, r3
  40bf12:	f000 8167 	beq.w	40c1e4 <_malloc_r+0x3d4>
  40bf16:	6859      	ldr	r1, [r3, #4]
  40bf18:	f021 0103 	bic.w	r1, r1, #3
  40bf1c:	1b8a      	subs	r2, r1, r6
  40bf1e:	2a0f      	cmp	r2, #15
  40bf20:	ddf2      	ble.n	40bf08 <_malloc_r+0xf8>
  40bf22:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40bf26:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40bf2a:	9300      	str	r3, [sp, #0]
  40bf2c:	199c      	adds	r4, r3, r6
  40bf2e:	4628      	mov	r0, r5
  40bf30:	f046 0601 	orr.w	r6, r6, #1
  40bf34:	f042 0501 	orr.w	r5, r2, #1
  40bf38:	605e      	str	r6, [r3, #4]
  40bf3a:	f8c8 c00c 	str.w	ip, [r8, #12]
  40bf3e:	f8cc 8008 	str.w	r8, [ip, #8]
  40bf42:	617c      	str	r4, [r7, #20]
  40bf44:	613c      	str	r4, [r7, #16]
  40bf46:	f8c4 e00c 	str.w	lr, [r4, #12]
  40bf4a:	f8c4 e008 	str.w	lr, [r4, #8]
  40bf4e:	6065      	str	r5, [r4, #4]
  40bf50:	505a      	str	r2, [r3, r1]
  40bf52:	f000 fadf 	bl	40c514 <__malloc_unlock>
  40bf56:	9b00      	ldr	r3, [sp, #0]
  40bf58:	f103 0408 	add.w	r4, r3, #8
  40bf5c:	e01e      	b.n	40bf9c <_malloc_r+0x18c>
  40bf5e:	2910      	cmp	r1, #16
  40bf60:	d820      	bhi.n	40bfa4 <_malloc_r+0x194>
  40bf62:	f000 fad1 	bl	40c508 <__malloc_lock>
  40bf66:	2610      	movs	r6, #16
  40bf68:	2318      	movs	r3, #24
  40bf6a:	2002      	movs	r0, #2
  40bf6c:	4f79      	ldr	r7, [pc, #484]	; (40c154 <_malloc_r+0x344>)
  40bf6e:	443b      	add	r3, r7
  40bf70:	f1a3 0208 	sub.w	r2, r3, #8
  40bf74:	685c      	ldr	r4, [r3, #4]
  40bf76:	4294      	cmp	r4, r2
  40bf78:	f000 813d 	beq.w	40c1f6 <_malloc_r+0x3e6>
  40bf7c:	6863      	ldr	r3, [r4, #4]
  40bf7e:	68e1      	ldr	r1, [r4, #12]
  40bf80:	68a6      	ldr	r6, [r4, #8]
  40bf82:	f023 0303 	bic.w	r3, r3, #3
  40bf86:	4423      	add	r3, r4
  40bf88:	4628      	mov	r0, r5
  40bf8a:	685a      	ldr	r2, [r3, #4]
  40bf8c:	60f1      	str	r1, [r6, #12]
  40bf8e:	f042 0201 	orr.w	r2, r2, #1
  40bf92:	608e      	str	r6, [r1, #8]
  40bf94:	605a      	str	r2, [r3, #4]
  40bf96:	f000 fabd 	bl	40c514 <__malloc_unlock>
  40bf9a:	3408      	adds	r4, #8
  40bf9c:	4620      	mov	r0, r4
  40bf9e:	b003      	add	sp, #12
  40bfa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bfa4:	2400      	movs	r4, #0
  40bfa6:	230c      	movs	r3, #12
  40bfa8:	4620      	mov	r0, r4
  40bfaa:	602b      	str	r3, [r5, #0]
  40bfac:	b003      	add	sp, #12
  40bfae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bfb2:	2040      	movs	r0, #64	; 0x40
  40bfb4:	f44f 7300 	mov.w	r3, #512	; 0x200
  40bfb8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40bfbc:	e74a      	b.n	40be54 <_malloc_r+0x44>
  40bfbe:	4423      	add	r3, r4
  40bfc0:	68e1      	ldr	r1, [r4, #12]
  40bfc2:	685a      	ldr	r2, [r3, #4]
  40bfc4:	68a6      	ldr	r6, [r4, #8]
  40bfc6:	f042 0201 	orr.w	r2, r2, #1
  40bfca:	60f1      	str	r1, [r6, #12]
  40bfcc:	4628      	mov	r0, r5
  40bfce:	608e      	str	r6, [r1, #8]
  40bfd0:	605a      	str	r2, [r3, #4]
  40bfd2:	f000 fa9f 	bl	40c514 <__malloc_unlock>
  40bfd6:	3408      	adds	r4, #8
  40bfd8:	4620      	mov	r0, r4
  40bfda:	b003      	add	sp, #12
  40bfdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bfe0:	4423      	add	r3, r4
  40bfe2:	4628      	mov	r0, r5
  40bfe4:	685a      	ldr	r2, [r3, #4]
  40bfe6:	f042 0201 	orr.w	r2, r2, #1
  40bfea:	605a      	str	r2, [r3, #4]
  40bfec:	f000 fa92 	bl	40c514 <__malloc_unlock>
  40bff0:	3408      	adds	r4, #8
  40bff2:	4620      	mov	r0, r4
  40bff4:	b003      	add	sp, #12
  40bff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bffa:	68bc      	ldr	r4, [r7, #8]
  40bffc:	6863      	ldr	r3, [r4, #4]
  40bffe:	f023 0803 	bic.w	r8, r3, #3
  40c002:	45b0      	cmp	r8, r6
  40c004:	d304      	bcc.n	40c010 <_malloc_r+0x200>
  40c006:	eba8 0306 	sub.w	r3, r8, r6
  40c00a:	2b0f      	cmp	r3, #15
  40c00c:	f300 8085 	bgt.w	40c11a <_malloc_r+0x30a>
  40c010:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40c16c <_malloc_r+0x35c>
  40c014:	4b50      	ldr	r3, [pc, #320]	; (40c158 <_malloc_r+0x348>)
  40c016:	f8d9 2000 	ldr.w	r2, [r9]
  40c01a:	681b      	ldr	r3, [r3, #0]
  40c01c:	3201      	adds	r2, #1
  40c01e:	4433      	add	r3, r6
  40c020:	eb04 0a08 	add.w	sl, r4, r8
  40c024:	f000 8155 	beq.w	40c2d2 <_malloc_r+0x4c2>
  40c028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40c02c:	330f      	adds	r3, #15
  40c02e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40c032:	f02b 0b0f 	bic.w	fp, fp, #15
  40c036:	4659      	mov	r1, fp
  40c038:	4628      	mov	r0, r5
  40c03a:	f000 ff11 	bl	40ce60 <_sbrk_r>
  40c03e:	1c41      	adds	r1, r0, #1
  40c040:	4602      	mov	r2, r0
  40c042:	f000 80fc 	beq.w	40c23e <_malloc_r+0x42e>
  40c046:	4582      	cmp	sl, r0
  40c048:	f200 80f7 	bhi.w	40c23a <_malloc_r+0x42a>
  40c04c:	4b43      	ldr	r3, [pc, #268]	; (40c15c <_malloc_r+0x34c>)
  40c04e:	6819      	ldr	r1, [r3, #0]
  40c050:	4459      	add	r1, fp
  40c052:	6019      	str	r1, [r3, #0]
  40c054:	f000 814d 	beq.w	40c2f2 <_malloc_r+0x4e2>
  40c058:	f8d9 0000 	ldr.w	r0, [r9]
  40c05c:	3001      	adds	r0, #1
  40c05e:	bf1b      	ittet	ne
  40c060:	eba2 0a0a 	subne.w	sl, r2, sl
  40c064:	4451      	addne	r1, sl
  40c066:	f8c9 2000 	streq.w	r2, [r9]
  40c06a:	6019      	strne	r1, [r3, #0]
  40c06c:	f012 0107 	ands.w	r1, r2, #7
  40c070:	f000 8115 	beq.w	40c29e <_malloc_r+0x48e>
  40c074:	f1c1 0008 	rsb	r0, r1, #8
  40c078:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40c07c:	4402      	add	r2, r0
  40c07e:	3108      	adds	r1, #8
  40c080:	eb02 090b 	add.w	r9, r2, fp
  40c084:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40c088:	eba1 0909 	sub.w	r9, r1, r9
  40c08c:	4649      	mov	r1, r9
  40c08e:	4628      	mov	r0, r5
  40c090:	9301      	str	r3, [sp, #4]
  40c092:	9200      	str	r2, [sp, #0]
  40c094:	f000 fee4 	bl	40ce60 <_sbrk_r>
  40c098:	1c43      	adds	r3, r0, #1
  40c09a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40c09e:	f000 8143 	beq.w	40c328 <_malloc_r+0x518>
  40c0a2:	1a80      	subs	r0, r0, r2
  40c0a4:	4448      	add	r0, r9
  40c0a6:	f040 0001 	orr.w	r0, r0, #1
  40c0aa:	6819      	ldr	r1, [r3, #0]
  40c0ac:	60ba      	str	r2, [r7, #8]
  40c0ae:	4449      	add	r1, r9
  40c0b0:	42bc      	cmp	r4, r7
  40c0b2:	6050      	str	r0, [r2, #4]
  40c0b4:	6019      	str	r1, [r3, #0]
  40c0b6:	d017      	beq.n	40c0e8 <_malloc_r+0x2d8>
  40c0b8:	f1b8 0f0f 	cmp.w	r8, #15
  40c0bc:	f240 80fb 	bls.w	40c2b6 <_malloc_r+0x4a6>
  40c0c0:	6860      	ldr	r0, [r4, #4]
  40c0c2:	f1a8 020c 	sub.w	r2, r8, #12
  40c0c6:	f022 0207 	bic.w	r2, r2, #7
  40c0ca:	eb04 0e02 	add.w	lr, r4, r2
  40c0ce:	f000 0001 	and.w	r0, r0, #1
  40c0d2:	f04f 0c05 	mov.w	ip, #5
  40c0d6:	4310      	orrs	r0, r2
  40c0d8:	2a0f      	cmp	r2, #15
  40c0da:	6060      	str	r0, [r4, #4]
  40c0dc:	f8ce c004 	str.w	ip, [lr, #4]
  40c0e0:	f8ce c008 	str.w	ip, [lr, #8]
  40c0e4:	f200 8117 	bhi.w	40c316 <_malloc_r+0x506>
  40c0e8:	4b1d      	ldr	r3, [pc, #116]	; (40c160 <_malloc_r+0x350>)
  40c0ea:	68bc      	ldr	r4, [r7, #8]
  40c0ec:	681a      	ldr	r2, [r3, #0]
  40c0ee:	4291      	cmp	r1, r2
  40c0f0:	bf88      	it	hi
  40c0f2:	6019      	strhi	r1, [r3, #0]
  40c0f4:	4b1b      	ldr	r3, [pc, #108]	; (40c164 <_malloc_r+0x354>)
  40c0f6:	681a      	ldr	r2, [r3, #0]
  40c0f8:	4291      	cmp	r1, r2
  40c0fa:	6862      	ldr	r2, [r4, #4]
  40c0fc:	bf88      	it	hi
  40c0fe:	6019      	strhi	r1, [r3, #0]
  40c100:	f022 0203 	bic.w	r2, r2, #3
  40c104:	4296      	cmp	r6, r2
  40c106:	eba2 0306 	sub.w	r3, r2, r6
  40c10a:	d801      	bhi.n	40c110 <_malloc_r+0x300>
  40c10c:	2b0f      	cmp	r3, #15
  40c10e:	dc04      	bgt.n	40c11a <_malloc_r+0x30a>
  40c110:	4628      	mov	r0, r5
  40c112:	f000 f9ff 	bl	40c514 <__malloc_unlock>
  40c116:	2400      	movs	r4, #0
  40c118:	e740      	b.n	40bf9c <_malloc_r+0x18c>
  40c11a:	19a2      	adds	r2, r4, r6
  40c11c:	f043 0301 	orr.w	r3, r3, #1
  40c120:	f046 0601 	orr.w	r6, r6, #1
  40c124:	6066      	str	r6, [r4, #4]
  40c126:	4628      	mov	r0, r5
  40c128:	60ba      	str	r2, [r7, #8]
  40c12a:	6053      	str	r3, [r2, #4]
  40c12c:	f000 f9f2 	bl	40c514 <__malloc_unlock>
  40c130:	3408      	adds	r4, #8
  40c132:	4620      	mov	r0, r4
  40c134:	b003      	add	sp, #12
  40c136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c13a:	2b14      	cmp	r3, #20
  40c13c:	d971      	bls.n	40c222 <_malloc_r+0x412>
  40c13e:	2b54      	cmp	r3, #84	; 0x54
  40c140:	f200 80a3 	bhi.w	40c28a <_malloc_r+0x47a>
  40c144:	0b33      	lsrs	r3, r6, #12
  40c146:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40c14a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40c14e:	00c3      	lsls	r3, r0, #3
  40c150:	e680      	b.n	40be54 <_malloc_r+0x44>
  40c152:	bf00      	nop
  40c154:	20000660 	.word	0x20000660
  40c158:	20000ee4 	.word	0x20000ee4
  40c15c:	20000eb4 	.word	0x20000eb4
  40c160:	20000edc 	.word	0x20000edc
  40c164:	20000ee0 	.word	0x20000ee0
  40c168:	20000668 	.word	0x20000668
  40c16c:	20000a68 	.word	0x20000a68
  40c170:	0a5a      	lsrs	r2, r3, #9
  40c172:	2a04      	cmp	r2, #4
  40c174:	d95b      	bls.n	40c22e <_malloc_r+0x41e>
  40c176:	2a14      	cmp	r2, #20
  40c178:	f200 80ae 	bhi.w	40c2d8 <_malloc_r+0x4c8>
  40c17c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40c180:	00c9      	lsls	r1, r1, #3
  40c182:	325b      	adds	r2, #91	; 0x5b
  40c184:	eb07 0c01 	add.w	ip, r7, r1
  40c188:	5879      	ldr	r1, [r7, r1]
  40c18a:	f1ac 0c08 	sub.w	ip, ip, #8
  40c18e:	458c      	cmp	ip, r1
  40c190:	f000 8088 	beq.w	40c2a4 <_malloc_r+0x494>
  40c194:	684a      	ldr	r2, [r1, #4]
  40c196:	f022 0203 	bic.w	r2, r2, #3
  40c19a:	4293      	cmp	r3, r2
  40c19c:	d273      	bcs.n	40c286 <_malloc_r+0x476>
  40c19e:	6889      	ldr	r1, [r1, #8]
  40c1a0:	458c      	cmp	ip, r1
  40c1a2:	d1f7      	bne.n	40c194 <_malloc_r+0x384>
  40c1a4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40c1a8:	687b      	ldr	r3, [r7, #4]
  40c1aa:	60e2      	str	r2, [r4, #12]
  40c1ac:	f8c4 c008 	str.w	ip, [r4, #8]
  40c1b0:	6094      	str	r4, [r2, #8]
  40c1b2:	f8cc 400c 	str.w	r4, [ip, #12]
  40c1b6:	e68f      	b.n	40bed8 <_malloc_r+0xc8>
  40c1b8:	19a1      	adds	r1, r4, r6
  40c1ba:	f046 0c01 	orr.w	ip, r6, #1
  40c1be:	f042 0601 	orr.w	r6, r2, #1
  40c1c2:	f8c4 c004 	str.w	ip, [r4, #4]
  40c1c6:	4628      	mov	r0, r5
  40c1c8:	6179      	str	r1, [r7, #20]
  40c1ca:	6139      	str	r1, [r7, #16]
  40c1cc:	f8c1 e00c 	str.w	lr, [r1, #12]
  40c1d0:	f8c1 e008 	str.w	lr, [r1, #8]
  40c1d4:	604e      	str	r6, [r1, #4]
  40c1d6:	50e2      	str	r2, [r4, r3]
  40c1d8:	f000 f99c 	bl	40c514 <__malloc_unlock>
  40c1dc:	3408      	adds	r4, #8
  40c1de:	e6dd      	b.n	40bf9c <_malloc_r+0x18c>
  40c1e0:	687b      	ldr	r3, [r7, #4]
  40c1e2:	e679      	b.n	40bed8 <_malloc_r+0xc8>
  40c1e4:	f108 0801 	add.w	r8, r8, #1
  40c1e8:	f018 0f03 	tst.w	r8, #3
  40c1ec:	f10c 0c08 	add.w	ip, ip, #8
  40c1f0:	f47f ae85 	bne.w	40befe <_malloc_r+0xee>
  40c1f4:	e02d      	b.n	40c252 <_malloc_r+0x442>
  40c1f6:	68dc      	ldr	r4, [r3, #12]
  40c1f8:	42a3      	cmp	r3, r4
  40c1fa:	bf08      	it	eq
  40c1fc:	3002      	addeq	r0, #2
  40c1fe:	f43f ae3e 	beq.w	40be7e <_malloc_r+0x6e>
  40c202:	e6bb      	b.n	40bf7c <_malloc_r+0x16c>
  40c204:	4419      	add	r1, r3
  40c206:	461c      	mov	r4, r3
  40c208:	684a      	ldr	r2, [r1, #4]
  40c20a:	68db      	ldr	r3, [r3, #12]
  40c20c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40c210:	f042 0201 	orr.w	r2, r2, #1
  40c214:	604a      	str	r2, [r1, #4]
  40c216:	4628      	mov	r0, r5
  40c218:	60f3      	str	r3, [r6, #12]
  40c21a:	609e      	str	r6, [r3, #8]
  40c21c:	f000 f97a 	bl	40c514 <__malloc_unlock>
  40c220:	e6bc      	b.n	40bf9c <_malloc_r+0x18c>
  40c222:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40c226:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40c22a:	00c3      	lsls	r3, r0, #3
  40c22c:	e612      	b.n	40be54 <_malloc_r+0x44>
  40c22e:	099a      	lsrs	r2, r3, #6
  40c230:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40c234:	00c9      	lsls	r1, r1, #3
  40c236:	3238      	adds	r2, #56	; 0x38
  40c238:	e7a4      	b.n	40c184 <_malloc_r+0x374>
  40c23a:	42bc      	cmp	r4, r7
  40c23c:	d054      	beq.n	40c2e8 <_malloc_r+0x4d8>
  40c23e:	68bc      	ldr	r4, [r7, #8]
  40c240:	6862      	ldr	r2, [r4, #4]
  40c242:	f022 0203 	bic.w	r2, r2, #3
  40c246:	e75d      	b.n	40c104 <_malloc_r+0x2f4>
  40c248:	f859 3908 	ldr.w	r3, [r9], #-8
  40c24c:	4599      	cmp	r9, r3
  40c24e:	f040 8086 	bne.w	40c35e <_malloc_r+0x54e>
  40c252:	f010 0f03 	tst.w	r0, #3
  40c256:	f100 30ff 	add.w	r0, r0, #4294967295
  40c25a:	d1f5      	bne.n	40c248 <_malloc_r+0x438>
  40c25c:	687b      	ldr	r3, [r7, #4]
  40c25e:	ea23 0304 	bic.w	r3, r3, r4
  40c262:	607b      	str	r3, [r7, #4]
  40c264:	0064      	lsls	r4, r4, #1
  40c266:	429c      	cmp	r4, r3
  40c268:	f63f aec7 	bhi.w	40bffa <_malloc_r+0x1ea>
  40c26c:	2c00      	cmp	r4, #0
  40c26e:	f43f aec4 	beq.w	40bffa <_malloc_r+0x1ea>
  40c272:	421c      	tst	r4, r3
  40c274:	4640      	mov	r0, r8
  40c276:	f47f ae3e 	bne.w	40bef6 <_malloc_r+0xe6>
  40c27a:	0064      	lsls	r4, r4, #1
  40c27c:	421c      	tst	r4, r3
  40c27e:	f100 0004 	add.w	r0, r0, #4
  40c282:	d0fa      	beq.n	40c27a <_malloc_r+0x46a>
  40c284:	e637      	b.n	40bef6 <_malloc_r+0xe6>
  40c286:	468c      	mov	ip, r1
  40c288:	e78c      	b.n	40c1a4 <_malloc_r+0x394>
  40c28a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40c28e:	d815      	bhi.n	40c2bc <_malloc_r+0x4ac>
  40c290:	0bf3      	lsrs	r3, r6, #15
  40c292:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40c296:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40c29a:	00c3      	lsls	r3, r0, #3
  40c29c:	e5da      	b.n	40be54 <_malloc_r+0x44>
  40c29e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40c2a2:	e6ed      	b.n	40c080 <_malloc_r+0x270>
  40c2a4:	687b      	ldr	r3, [r7, #4]
  40c2a6:	1092      	asrs	r2, r2, #2
  40c2a8:	2101      	movs	r1, #1
  40c2aa:	fa01 f202 	lsl.w	r2, r1, r2
  40c2ae:	4313      	orrs	r3, r2
  40c2b0:	607b      	str	r3, [r7, #4]
  40c2b2:	4662      	mov	r2, ip
  40c2b4:	e779      	b.n	40c1aa <_malloc_r+0x39a>
  40c2b6:	2301      	movs	r3, #1
  40c2b8:	6053      	str	r3, [r2, #4]
  40c2ba:	e729      	b.n	40c110 <_malloc_r+0x300>
  40c2bc:	f240 5254 	movw	r2, #1364	; 0x554
  40c2c0:	4293      	cmp	r3, r2
  40c2c2:	d822      	bhi.n	40c30a <_malloc_r+0x4fa>
  40c2c4:	0cb3      	lsrs	r3, r6, #18
  40c2c6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40c2ca:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40c2ce:	00c3      	lsls	r3, r0, #3
  40c2d0:	e5c0      	b.n	40be54 <_malloc_r+0x44>
  40c2d2:	f103 0b10 	add.w	fp, r3, #16
  40c2d6:	e6ae      	b.n	40c036 <_malloc_r+0x226>
  40c2d8:	2a54      	cmp	r2, #84	; 0x54
  40c2da:	d829      	bhi.n	40c330 <_malloc_r+0x520>
  40c2dc:	0b1a      	lsrs	r2, r3, #12
  40c2de:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40c2e2:	00c9      	lsls	r1, r1, #3
  40c2e4:	326e      	adds	r2, #110	; 0x6e
  40c2e6:	e74d      	b.n	40c184 <_malloc_r+0x374>
  40c2e8:	4b20      	ldr	r3, [pc, #128]	; (40c36c <_malloc_r+0x55c>)
  40c2ea:	6819      	ldr	r1, [r3, #0]
  40c2ec:	4459      	add	r1, fp
  40c2ee:	6019      	str	r1, [r3, #0]
  40c2f0:	e6b2      	b.n	40c058 <_malloc_r+0x248>
  40c2f2:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40c2f6:	2800      	cmp	r0, #0
  40c2f8:	f47f aeae 	bne.w	40c058 <_malloc_r+0x248>
  40c2fc:	eb08 030b 	add.w	r3, r8, fp
  40c300:	68ba      	ldr	r2, [r7, #8]
  40c302:	f043 0301 	orr.w	r3, r3, #1
  40c306:	6053      	str	r3, [r2, #4]
  40c308:	e6ee      	b.n	40c0e8 <_malloc_r+0x2d8>
  40c30a:	207f      	movs	r0, #127	; 0x7f
  40c30c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40c310:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40c314:	e59e      	b.n	40be54 <_malloc_r+0x44>
  40c316:	f104 0108 	add.w	r1, r4, #8
  40c31a:	4628      	mov	r0, r5
  40c31c:	9300      	str	r3, [sp, #0]
  40c31e:	f7ff fc7f 	bl	40bc20 <_free_r>
  40c322:	9b00      	ldr	r3, [sp, #0]
  40c324:	6819      	ldr	r1, [r3, #0]
  40c326:	e6df      	b.n	40c0e8 <_malloc_r+0x2d8>
  40c328:	2001      	movs	r0, #1
  40c32a:	f04f 0900 	mov.w	r9, #0
  40c32e:	e6bc      	b.n	40c0aa <_malloc_r+0x29a>
  40c330:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40c334:	d805      	bhi.n	40c342 <_malloc_r+0x532>
  40c336:	0bda      	lsrs	r2, r3, #15
  40c338:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40c33c:	00c9      	lsls	r1, r1, #3
  40c33e:	3277      	adds	r2, #119	; 0x77
  40c340:	e720      	b.n	40c184 <_malloc_r+0x374>
  40c342:	f240 5154 	movw	r1, #1364	; 0x554
  40c346:	428a      	cmp	r2, r1
  40c348:	d805      	bhi.n	40c356 <_malloc_r+0x546>
  40c34a:	0c9a      	lsrs	r2, r3, #18
  40c34c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40c350:	00c9      	lsls	r1, r1, #3
  40c352:	327c      	adds	r2, #124	; 0x7c
  40c354:	e716      	b.n	40c184 <_malloc_r+0x374>
  40c356:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40c35a:	227e      	movs	r2, #126	; 0x7e
  40c35c:	e712      	b.n	40c184 <_malloc_r+0x374>
  40c35e:	687b      	ldr	r3, [r7, #4]
  40c360:	e780      	b.n	40c264 <_malloc_r+0x454>
  40c362:	08f0      	lsrs	r0, r6, #3
  40c364:	f106 0308 	add.w	r3, r6, #8
  40c368:	e600      	b.n	40bf6c <_malloc_r+0x15c>
  40c36a:	bf00      	nop
  40c36c:	20000eb4 	.word	0x20000eb4

0040c370 <__ascii_mbtowc>:
  40c370:	b082      	sub	sp, #8
  40c372:	b149      	cbz	r1, 40c388 <__ascii_mbtowc+0x18>
  40c374:	b15a      	cbz	r2, 40c38e <__ascii_mbtowc+0x1e>
  40c376:	b16b      	cbz	r3, 40c394 <__ascii_mbtowc+0x24>
  40c378:	7813      	ldrb	r3, [r2, #0]
  40c37a:	600b      	str	r3, [r1, #0]
  40c37c:	7812      	ldrb	r2, [r2, #0]
  40c37e:	1c10      	adds	r0, r2, #0
  40c380:	bf18      	it	ne
  40c382:	2001      	movne	r0, #1
  40c384:	b002      	add	sp, #8
  40c386:	4770      	bx	lr
  40c388:	a901      	add	r1, sp, #4
  40c38a:	2a00      	cmp	r2, #0
  40c38c:	d1f3      	bne.n	40c376 <__ascii_mbtowc+0x6>
  40c38e:	4610      	mov	r0, r2
  40c390:	b002      	add	sp, #8
  40c392:	4770      	bx	lr
  40c394:	f06f 0001 	mvn.w	r0, #1
  40c398:	e7f4      	b.n	40c384 <__ascii_mbtowc+0x14>
  40c39a:	bf00      	nop
  40c39c:	0000      	movs	r0, r0
	...

0040c3a0 <memchr>:
  40c3a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40c3a4:	2a10      	cmp	r2, #16
  40c3a6:	db2b      	blt.n	40c400 <memchr+0x60>
  40c3a8:	f010 0f07 	tst.w	r0, #7
  40c3ac:	d008      	beq.n	40c3c0 <memchr+0x20>
  40c3ae:	f810 3b01 	ldrb.w	r3, [r0], #1
  40c3b2:	3a01      	subs	r2, #1
  40c3b4:	428b      	cmp	r3, r1
  40c3b6:	d02d      	beq.n	40c414 <memchr+0x74>
  40c3b8:	f010 0f07 	tst.w	r0, #7
  40c3bc:	b342      	cbz	r2, 40c410 <memchr+0x70>
  40c3be:	d1f6      	bne.n	40c3ae <memchr+0xe>
  40c3c0:	b4f0      	push	{r4, r5, r6, r7}
  40c3c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40c3c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40c3ca:	f022 0407 	bic.w	r4, r2, #7
  40c3ce:	f07f 0700 	mvns.w	r7, #0
  40c3d2:	2300      	movs	r3, #0
  40c3d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40c3d8:	3c08      	subs	r4, #8
  40c3da:	ea85 0501 	eor.w	r5, r5, r1
  40c3de:	ea86 0601 	eor.w	r6, r6, r1
  40c3e2:	fa85 f547 	uadd8	r5, r5, r7
  40c3e6:	faa3 f587 	sel	r5, r3, r7
  40c3ea:	fa86 f647 	uadd8	r6, r6, r7
  40c3ee:	faa5 f687 	sel	r6, r5, r7
  40c3f2:	b98e      	cbnz	r6, 40c418 <memchr+0x78>
  40c3f4:	d1ee      	bne.n	40c3d4 <memchr+0x34>
  40c3f6:	bcf0      	pop	{r4, r5, r6, r7}
  40c3f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40c3fc:	f002 0207 	and.w	r2, r2, #7
  40c400:	b132      	cbz	r2, 40c410 <memchr+0x70>
  40c402:	f810 3b01 	ldrb.w	r3, [r0], #1
  40c406:	3a01      	subs	r2, #1
  40c408:	ea83 0301 	eor.w	r3, r3, r1
  40c40c:	b113      	cbz	r3, 40c414 <memchr+0x74>
  40c40e:	d1f8      	bne.n	40c402 <memchr+0x62>
  40c410:	2000      	movs	r0, #0
  40c412:	4770      	bx	lr
  40c414:	3801      	subs	r0, #1
  40c416:	4770      	bx	lr
  40c418:	2d00      	cmp	r5, #0
  40c41a:	bf06      	itte	eq
  40c41c:	4635      	moveq	r5, r6
  40c41e:	3803      	subeq	r0, #3
  40c420:	3807      	subne	r0, #7
  40c422:	f015 0f01 	tst.w	r5, #1
  40c426:	d107      	bne.n	40c438 <memchr+0x98>
  40c428:	3001      	adds	r0, #1
  40c42a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40c42e:	bf02      	ittt	eq
  40c430:	3001      	addeq	r0, #1
  40c432:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40c436:	3001      	addeq	r0, #1
  40c438:	bcf0      	pop	{r4, r5, r6, r7}
  40c43a:	3801      	subs	r0, #1
  40c43c:	4770      	bx	lr
  40c43e:	bf00      	nop

0040c440 <memmove>:
  40c440:	4288      	cmp	r0, r1
  40c442:	b5f0      	push	{r4, r5, r6, r7, lr}
  40c444:	d90d      	bls.n	40c462 <memmove+0x22>
  40c446:	188b      	adds	r3, r1, r2
  40c448:	4298      	cmp	r0, r3
  40c44a:	d20a      	bcs.n	40c462 <memmove+0x22>
  40c44c:	1884      	adds	r4, r0, r2
  40c44e:	2a00      	cmp	r2, #0
  40c450:	d051      	beq.n	40c4f6 <memmove+0xb6>
  40c452:	4622      	mov	r2, r4
  40c454:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40c458:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40c45c:	4299      	cmp	r1, r3
  40c45e:	d1f9      	bne.n	40c454 <memmove+0x14>
  40c460:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c462:	2a0f      	cmp	r2, #15
  40c464:	d948      	bls.n	40c4f8 <memmove+0xb8>
  40c466:	ea41 0300 	orr.w	r3, r1, r0
  40c46a:	079b      	lsls	r3, r3, #30
  40c46c:	d146      	bne.n	40c4fc <memmove+0xbc>
  40c46e:	f100 0410 	add.w	r4, r0, #16
  40c472:	f101 0310 	add.w	r3, r1, #16
  40c476:	4615      	mov	r5, r2
  40c478:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40c47c:	f844 6c10 	str.w	r6, [r4, #-16]
  40c480:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40c484:	f844 6c0c 	str.w	r6, [r4, #-12]
  40c488:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40c48c:	f844 6c08 	str.w	r6, [r4, #-8]
  40c490:	3d10      	subs	r5, #16
  40c492:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40c496:	f844 6c04 	str.w	r6, [r4, #-4]
  40c49a:	2d0f      	cmp	r5, #15
  40c49c:	f103 0310 	add.w	r3, r3, #16
  40c4a0:	f104 0410 	add.w	r4, r4, #16
  40c4a4:	d8e8      	bhi.n	40c478 <memmove+0x38>
  40c4a6:	f1a2 0310 	sub.w	r3, r2, #16
  40c4aa:	f023 030f 	bic.w	r3, r3, #15
  40c4ae:	f002 0e0f 	and.w	lr, r2, #15
  40c4b2:	3310      	adds	r3, #16
  40c4b4:	f1be 0f03 	cmp.w	lr, #3
  40c4b8:	4419      	add	r1, r3
  40c4ba:	4403      	add	r3, r0
  40c4bc:	d921      	bls.n	40c502 <memmove+0xc2>
  40c4be:	1f1e      	subs	r6, r3, #4
  40c4c0:	460d      	mov	r5, r1
  40c4c2:	4674      	mov	r4, lr
  40c4c4:	3c04      	subs	r4, #4
  40c4c6:	f855 7b04 	ldr.w	r7, [r5], #4
  40c4ca:	f846 7f04 	str.w	r7, [r6, #4]!
  40c4ce:	2c03      	cmp	r4, #3
  40c4d0:	d8f8      	bhi.n	40c4c4 <memmove+0x84>
  40c4d2:	f1ae 0404 	sub.w	r4, lr, #4
  40c4d6:	f024 0403 	bic.w	r4, r4, #3
  40c4da:	3404      	adds	r4, #4
  40c4dc:	4421      	add	r1, r4
  40c4de:	4423      	add	r3, r4
  40c4e0:	f002 0203 	and.w	r2, r2, #3
  40c4e4:	b162      	cbz	r2, 40c500 <memmove+0xc0>
  40c4e6:	3b01      	subs	r3, #1
  40c4e8:	440a      	add	r2, r1
  40c4ea:	f811 4b01 	ldrb.w	r4, [r1], #1
  40c4ee:	f803 4f01 	strb.w	r4, [r3, #1]!
  40c4f2:	428a      	cmp	r2, r1
  40c4f4:	d1f9      	bne.n	40c4ea <memmove+0xaa>
  40c4f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c4f8:	4603      	mov	r3, r0
  40c4fa:	e7f3      	b.n	40c4e4 <memmove+0xa4>
  40c4fc:	4603      	mov	r3, r0
  40c4fe:	e7f2      	b.n	40c4e6 <memmove+0xa6>
  40c500:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c502:	4672      	mov	r2, lr
  40c504:	e7ee      	b.n	40c4e4 <memmove+0xa4>
  40c506:	bf00      	nop

0040c508 <__malloc_lock>:
  40c508:	4801      	ldr	r0, [pc, #4]	; (40c510 <__malloc_lock+0x8>)
  40c50a:	f7ff bc7d 	b.w	40be08 <__retarget_lock_acquire_recursive>
  40c50e:	bf00      	nop
  40c510:	20002024 	.word	0x20002024

0040c514 <__malloc_unlock>:
  40c514:	4801      	ldr	r0, [pc, #4]	; (40c51c <__malloc_unlock+0x8>)
  40c516:	f7ff bc79 	b.w	40be0c <__retarget_lock_release_recursive>
  40c51a:	bf00      	nop
  40c51c:	20002024 	.word	0x20002024

0040c520 <_Balloc>:
  40c520:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40c522:	b570      	push	{r4, r5, r6, lr}
  40c524:	4605      	mov	r5, r0
  40c526:	460c      	mov	r4, r1
  40c528:	b14b      	cbz	r3, 40c53e <_Balloc+0x1e>
  40c52a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40c52e:	b180      	cbz	r0, 40c552 <_Balloc+0x32>
  40c530:	6802      	ldr	r2, [r0, #0]
  40c532:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40c536:	2300      	movs	r3, #0
  40c538:	6103      	str	r3, [r0, #16]
  40c53a:	60c3      	str	r3, [r0, #12]
  40c53c:	bd70      	pop	{r4, r5, r6, pc}
  40c53e:	2221      	movs	r2, #33	; 0x21
  40c540:	2104      	movs	r1, #4
  40c542:	f000 fe19 	bl	40d178 <_calloc_r>
  40c546:	64e8      	str	r0, [r5, #76]	; 0x4c
  40c548:	4603      	mov	r3, r0
  40c54a:	2800      	cmp	r0, #0
  40c54c:	d1ed      	bne.n	40c52a <_Balloc+0xa>
  40c54e:	2000      	movs	r0, #0
  40c550:	bd70      	pop	{r4, r5, r6, pc}
  40c552:	2101      	movs	r1, #1
  40c554:	fa01 f604 	lsl.w	r6, r1, r4
  40c558:	1d72      	adds	r2, r6, #5
  40c55a:	4628      	mov	r0, r5
  40c55c:	0092      	lsls	r2, r2, #2
  40c55e:	f000 fe0b 	bl	40d178 <_calloc_r>
  40c562:	2800      	cmp	r0, #0
  40c564:	d0f3      	beq.n	40c54e <_Balloc+0x2e>
  40c566:	6044      	str	r4, [r0, #4]
  40c568:	6086      	str	r6, [r0, #8]
  40c56a:	e7e4      	b.n	40c536 <_Balloc+0x16>

0040c56c <_Bfree>:
  40c56c:	b131      	cbz	r1, 40c57c <_Bfree+0x10>
  40c56e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40c570:	684a      	ldr	r2, [r1, #4]
  40c572:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40c576:	6008      	str	r0, [r1, #0]
  40c578:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40c57c:	4770      	bx	lr
  40c57e:	bf00      	nop

0040c580 <__multadd>:
  40c580:	b5f0      	push	{r4, r5, r6, r7, lr}
  40c582:	690c      	ldr	r4, [r1, #16]
  40c584:	b083      	sub	sp, #12
  40c586:	460d      	mov	r5, r1
  40c588:	4606      	mov	r6, r0
  40c58a:	f101 0e14 	add.w	lr, r1, #20
  40c58e:	2700      	movs	r7, #0
  40c590:	f8de 0000 	ldr.w	r0, [lr]
  40c594:	b281      	uxth	r1, r0
  40c596:	fb02 3301 	mla	r3, r2, r1, r3
  40c59a:	0c01      	lsrs	r1, r0, #16
  40c59c:	0c18      	lsrs	r0, r3, #16
  40c59e:	fb02 0101 	mla	r1, r2, r1, r0
  40c5a2:	b29b      	uxth	r3, r3
  40c5a4:	3701      	adds	r7, #1
  40c5a6:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  40c5aa:	42bc      	cmp	r4, r7
  40c5ac:	f84e 3b04 	str.w	r3, [lr], #4
  40c5b0:	ea4f 4311 	mov.w	r3, r1, lsr #16
  40c5b4:	dcec      	bgt.n	40c590 <__multadd+0x10>
  40c5b6:	b13b      	cbz	r3, 40c5c8 <__multadd+0x48>
  40c5b8:	68aa      	ldr	r2, [r5, #8]
  40c5ba:	4294      	cmp	r4, r2
  40c5bc:	da07      	bge.n	40c5ce <__multadd+0x4e>
  40c5be:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40c5c2:	3401      	adds	r4, #1
  40c5c4:	6153      	str	r3, [r2, #20]
  40c5c6:	612c      	str	r4, [r5, #16]
  40c5c8:	4628      	mov	r0, r5
  40c5ca:	b003      	add	sp, #12
  40c5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40c5ce:	6869      	ldr	r1, [r5, #4]
  40c5d0:	9301      	str	r3, [sp, #4]
  40c5d2:	3101      	adds	r1, #1
  40c5d4:	4630      	mov	r0, r6
  40c5d6:	f7ff ffa3 	bl	40c520 <_Balloc>
  40c5da:	692a      	ldr	r2, [r5, #16]
  40c5dc:	3202      	adds	r2, #2
  40c5de:	f105 010c 	add.w	r1, r5, #12
  40c5e2:	4607      	mov	r7, r0
  40c5e4:	0092      	lsls	r2, r2, #2
  40c5e6:	300c      	adds	r0, #12
  40c5e8:	f7fc ffa4 	bl	409534 <memcpy>
  40c5ec:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40c5ee:	6869      	ldr	r1, [r5, #4]
  40c5f0:	9b01      	ldr	r3, [sp, #4]
  40c5f2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40c5f6:	6028      	str	r0, [r5, #0]
  40c5f8:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40c5fc:	463d      	mov	r5, r7
  40c5fe:	e7de      	b.n	40c5be <__multadd+0x3e>

0040c600 <__hi0bits>:
  40c600:	0c02      	lsrs	r2, r0, #16
  40c602:	0412      	lsls	r2, r2, #16
  40c604:	4603      	mov	r3, r0
  40c606:	b9b2      	cbnz	r2, 40c636 <__hi0bits+0x36>
  40c608:	0403      	lsls	r3, r0, #16
  40c60a:	2010      	movs	r0, #16
  40c60c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40c610:	bf04      	itt	eq
  40c612:	021b      	lsleq	r3, r3, #8
  40c614:	3008      	addeq	r0, #8
  40c616:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  40c61a:	bf04      	itt	eq
  40c61c:	011b      	lsleq	r3, r3, #4
  40c61e:	3004      	addeq	r0, #4
  40c620:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40c624:	bf04      	itt	eq
  40c626:	009b      	lsleq	r3, r3, #2
  40c628:	3002      	addeq	r0, #2
  40c62a:	2b00      	cmp	r3, #0
  40c62c:	db02      	blt.n	40c634 <__hi0bits+0x34>
  40c62e:	005b      	lsls	r3, r3, #1
  40c630:	d403      	bmi.n	40c63a <__hi0bits+0x3a>
  40c632:	2020      	movs	r0, #32
  40c634:	4770      	bx	lr
  40c636:	2000      	movs	r0, #0
  40c638:	e7e8      	b.n	40c60c <__hi0bits+0xc>
  40c63a:	3001      	adds	r0, #1
  40c63c:	4770      	bx	lr
  40c63e:	bf00      	nop

0040c640 <__lo0bits>:
  40c640:	6803      	ldr	r3, [r0, #0]
  40c642:	f013 0207 	ands.w	r2, r3, #7
  40c646:	4601      	mov	r1, r0
  40c648:	d007      	beq.n	40c65a <__lo0bits+0x1a>
  40c64a:	07da      	lsls	r2, r3, #31
  40c64c:	d421      	bmi.n	40c692 <__lo0bits+0x52>
  40c64e:	0798      	lsls	r0, r3, #30
  40c650:	d421      	bmi.n	40c696 <__lo0bits+0x56>
  40c652:	089b      	lsrs	r3, r3, #2
  40c654:	600b      	str	r3, [r1, #0]
  40c656:	2002      	movs	r0, #2
  40c658:	4770      	bx	lr
  40c65a:	b298      	uxth	r0, r3
  40c65c:	b198      	cbz	r0, 40c686 <__lo0bits+0x46>
  40c65e:	4610      	mov	r0, r2
  40c660:	f013 0fff 	tst.w	r3, #255	; 0xff
  40c664:	bf04      	itt	eq
  40c666:	0a1b      	lsreq	r3, r3, #8
  40c668:	3008      	addeq	r0, #8
  40c66a:	071a      	lsls	r2, r3, #28
  40c66c:	bf04      	itt	eq
  40c66e:	091b      	lsreq	r3, r3, #4
  40c670:	3004      	addeq	r0, #4
  40c672:	079a      	lsls	r2, r3, #30
  40c674:	bf04      	itt	eq
  40c676:	089b      	lsreq	r3, r3, #2
  40c678:	3002      	addeq	r0, #2
  40c67a:	07da      	lsls	r2, r3, #31
  40c67c:	d407      	bmi.n	40c68e <__lo0bits+0x4e>
  40c67e:	085b      	lsrs	r3, r3, #1
  40c680:	d104      	bne.n	40c68c <__lo0bits+0x4c>
  40c682:	2020      	movs	r0, #32
  40c684:	4770      	bx	lr
  40c686:	0c1b      	lsrs	r3, r3, #16
  40c688:	2010      	movs	r0, #16
  40c68a:	e7e9      	b.n	40c660 <__lo0bits+0x20>
  40c68c:	3001      	adds	r0, #1
  40c68e:	600b      	str	r3, [r1, #0]
  40c690:	4770      	bx	lr
  40c692:	2000      	movs	r0, #0
  40c694:	4770      	bx	lr
  40c696:	085b      	lsrs	r3, r3, #1
  40c698:	600b      	str	r3, [r1, #0]
  40c69a:	2001      	movs	r0, #1
  40c69c:	4770      	bx	lr
  40c69e:	bf00      	nop

0040c6a0 <__i2b>:
  40c6a0:	b510      	push	{r4, lr}
  40c6a2:	460c      	mov	r4, r1
  40c6a4:	2101      	movs	r1, #1
  40c6a6:	f7ff ff3b 	bl	40c520 <_Balloc>
  40c6aa:	2201      	movs	r2, #1
  40c6ac:	6144      	str	r4, [r0, #20]
  40c6ae:	6102      	str	r2, [r0, #16]
  40c6b0:	bd10      	pop	{r4, pc}
  40c6b2:	bf00      	nop

0040c6b4 <__multiply>:
  40c6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c6b8:	690c      	ldr	r4, [r1, #16]
  40c6ba:	6915      	ldr	r5, [r2, #16]
  40c6bc:	42ac      	cmp	r4, r5
  40c6be:	b083      	sub	sp, #12
  40c6c0:	468b      	mov	fp, r1
  40c6c2:	4616      	mov	r6, r2
  40c6c4:	da04      	bge.n	40c6d0 <__multiply+0x1c>
  40c6c6:	4622      	mov	r2, r4
  40c6c8:	46b3      	mov	fp, r6
  40c6ca:	462c      	mov	r4, r5
  40c6cc:	460e      	mov	r6, r1
  40c6ce:	4615      	mov	r5, r2
  40c6d0:	f8db 3008 	ldr.w	r3, [fp, #8]
  40c6d4:	f8db 1004 	ldr.w	r1, [fp, #4]
  40c6d8:	eb04 0805 	add.w	r8, r4, r5
  40c6dc:	4598      	cmp	r8, r3
  40c6de:	bfc8      	it	gt
  40c6e0:	3101      	addgt	r1, #1
  40c6e2:	f7ff ff1d 	bl	40c520 <_Balloc>
  40c6e6:	f100 0914 	add.w	r9, r0, #20
  40c6ea:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40c6ee:	45d1      	cmp	r9, sl
  40c6f0:	9000      	str	r0, [sp, #0]
  40c6f2:	d205      	bcs.n	40c700 <__multiply+0x4c>
  40c6f4:	464b      	mov	r3, r9
  40c6f6:	2100      	movs	r1, #0
  40c6f8:	f843 1b04 	str.w	r1, [r3], #4
  40c6fc:	459a      	cmp	sl, r3
  40c6fe:	d8fb      	bhi.n	40c6f8 <__multiply+0x44>
  40c700:	f106 0c14 	add.w	ip, r6, #20
  40c704:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  40c708:	f10b 0b14 	add.w	fp, fp, #20
  40c70c:	459c      	cmp	ip, r3
  40c70e:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40c712:	d24c      	bcs.n	40c7ae <__multiply+0xfa>
  40c714:	f8cd a004 	str.w	sl, [sp, #4]
  40c718:	469a      	mov	sl, r3
  40c71a:	f8dc 5000 	ldr.w	r5, [ip]
  40c71e:	b2af      	uxth	r7, r5
  40c720:	b1ef      	cbz	r7, 40c75e <__multiply+0xaa>
  40c722:	2100      	movs	r1, #0
  40c724:	464d      	mov	r5, r9
  40c726:	465e      	mov	r6, fp
  40c728:	460c      	mov	r4, r1
  40c72a:	f856 2b04 	ldr.w	r2, [r6], #4
  40c72e:	6828      	ldr	r0, [r5, #0]
  40c730:	b293      	uxth	r3, r2
  40c732:	b281      	uxth	r1, r0
  40c734:	fb07 1303 	mla	r3, r7, r3, r1
  40c738:	0c12      	lsrs	r2, r2, #16
  40c73a:	0c01      	lsrs	r1, r0, #16
  40c73c:	4423      	add	r3, r4
  40c73e:	fb07 1102 	mla	r1, r7, r2, r1
  40c742:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40c746:	b29b      	uxth	r3, r3
  40c748:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40c74c:	45b6      	cmp	lr, r6
  40c74e:	f845 3b04 	str.w	r3, [r5], #4
  40c752:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40c756:	d8e8      	bhi.n	40c72a <__multiply+0x76>
  40c758:	602c      	str	r4, [r5, #0]
  40c75a:	f8dc 5000 	ldr.w	r5, [ip]
  40c75e:	0c2d      	lsrs	r5, r5, #16
  40c760:	d01d      	beq.n	40c79e <__multiply+0xea>
  40c762:	f8d9 3000 	ldr.w	r3, [r9]
  40c766:	4648      	mov	r0, r9
  40c768:	461c      	mov	r4, r3
  40c76a:	4659      	mov	r1, fp
  40c76c:	2200      	movs	r2, #0
  40c76e:	880e      	ldrh	r6, [r1, #0]
  40c770:	0c24      	lsrs	r4, r4, #16
  40c772:	fb05 4406 	mla	r4, r5, r6, r4
  40c776:	4422      	add	r2, r4
  40c778:	b29b      	uxth	r3, r3
  40c77a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40c77e:	f840 3b04 	str.w	r3, [r0], #4
  40c782:	f851 3b04 	ldr.w	r3, [r1], #4
  40c786:	6804      	ldr	r4, [r0, #0]
  40c788:	0c1b      	lsrs	r3, r3, #16
  40c78a:	b2a6      	uxth	r6, r4
  40c78c:	fb05 6303 	mla	r3, r5, r3, r6
  40c790:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40c794:	458e      	cmp	lr, r1
  40c796:	ea4f 4213 	mov.w	r2, r3, lsr #16
  40c79a:	d8e8      	bhi.n	40c76e <__multiply+0xba>
  40c79c:	6003      	str	r3, [r0, #0]
  40c79e:	f10c 0c04 	add.w	ip, ip, #4
  40c7a2:	45e2      	cmp	sl, ip
  40c7a4:	f109 0904 	add.w	r9, r9, #4
  40c7a8:	d8b7      	bhi.n	40c71a <__multiply+0x66>
  40c7aa:	f8dd a004 	ldr.w	sl, [sp, #4]
  40c7ae:	f1b8 0f00 	cmp.w	r8, #0
  40c7b2:	dd0b      	ble.n	40c7cc <__multiply+0x118>
  40c7b4:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  40c7b8:	f1aa 0a04 	sub.w	sl, sl, #4
  40c7bc:	b11b      	cbz	r3, 40c7c6 <__multiply+0x112>
  40c7be:	e005      	b.n	40c7cc <__multiply+0x118>
  40c7c0:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  40c7c4:	b913      	cbnz	r3, 40c7cc <__multiply+0x118>
  40c7c6:	f1b8 0801 	subs.w	r8, r8, #1
  40c7ca:	d1f9      	bne.n	40c7c0 <__multiply+0x10c>
  40c7cc:	9800      	ldr	r0, [sp, #0]
  40c7ce:	f8c0 8010 	str.w	r8, [r0, #16]
  40c7d2:	b003      	add	sp, #12
  40c7d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040c7d8 <__pow5mult>:
  40c7d8:	f012 0303 	ands.w	r3, r2, #3
  40c7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40c7e0:	4614      	mov	r4, r2
  40c7e2:	4607      	mov	r7, r0
  40c7e4:	d12e      	bne.n	40c844 <__pow5mult+0x6c>
  40c7e6:	460d      	mov	r5, r1
  40c7e8:	10a4      	asrs	r4, r4, #2
  40c7ea:	d01c      	beq.n	40c826 <__pow5mult+0x4e>
  40c7ec:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40c7ee:	b396      	cbz	r6, 40c856 <__pow5mult+0x7e>
  40c7f0:	07e3      	lsls	r3, r4, #31
  40c7f2:	f04f 0800 	mov.w	r8, #0
  40c7f6:	d406      	bmi.n	40c806 <__pow5mult+0x2e>
  40c7f8:	1064      	asrs	r4, r4, #1
  40c7fa:	d014      	beq.n	40c826 <__pow5mult+0x4e>
  40c7fc:	6830      	ldr	r0, [r6, #0]
  40c7fe:	b1a8      	cbz	r0, 40c82c <__pow5mult+0x54>
  40c800:	4606      	mov	r6, r0
  40c802:	07e3      	lsls	r3, r4, #31
  40c804:	d5f8      	bpl.n	40c7f8 <__pow5mult+0x20>
  40c806:	4632      	mov	r2, r6
  40c808:	4629      	mov	r1, r5
  40c80a:	4638      	mov	r0, r7
  40c80c:	f7ff ff52 	bl	40c6b4 <__multiply>
  40c810:	b1b5      	cbz	r5, 40c840 <__pow5mult+0x68>
  40c812:	686a      	ldr	r2, [r5, #4]
  40c814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40c816:	1064      	asrs	r4, r4, #1
  40c818:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40c81c:	6029      	str	r1, [r5, #0]
  40c81e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40c822:	4605      	mov	r5, r0
  40c824:	d1ea      	bne.n	40c7fc <__pow5mult+0x24>
  40c826:	4628      	mov	r0, r5
  40c828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40c82c:	4632      	mov	r2, r6
  40c82e:	4631      	mov	r1, r6
  40c830:	4638      	mov	r0, r7
  40c832:	f7ff ff3f 	bl	40c6b4 <__multiply>
  40c836:	6030      	str	r0, [r6, #0]
  40c838:	f8c0 8000 	str.w	r8, [r0]
  40c83c:	4606      	mov	r6, r0
  40c83e:	e7e0      	b.n	40c802 <__pow5mult+0x2a>
  40c840:	4605      	mov	r5, r0
  40c842:	e7d9      	b.n	40c7f8 <__pow5mult+0x20>
  40c844:	1e5a      	subs	r2, r3, #1
  40c846:	4d0b      	ldr	r5, [pc, #44]	; (40c874 <__pow5mult+0x9c>)
  40c848:	2300      	movs	r3, #0
  40c84a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40c84e:	f7ff fe97 	bl	40c580 <__multadd>
  40c852:	4605      	mov	r5, r0
  40c854:	e7c8      	b.n	40c7e8 <__pow5mult+0x10>
  40c856:	2101      	movs	r1, #1
  40c858:	4638      	mov	r0, r7
  40c85a:	f7ff fe61 	bl	40c520 <_Balloc>
  40c85e:	f240 2171 	movw	r1, #625	; 0x271
  40c862:	2201      	movs	r2, #1
  40c864:	2300      	movs	r3, #0
  40c866:	6141      	str	r1, [r0, #20]
  40c868:	6102      	str	r2, [r0, #16]
  40c86a:	4606      	mov	r6, r0
  40c86c:	64b8      	str	r0, [r7, #72]	; 0x48
  40c86e:	6003      	str	r3, [r0, #0]
  40c870:	e7be      	b.n	40c7f0 <__pow5mult+0x18>
  40c872:	bf00      	nop
  40c874:	0040f530 	.word	0x0040f530

0040c878 <__lshift>:
  40c878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40c87c:	4691      	mov	r9, r2
  40c87e:	690a      	ldr	r2, [r1, #16]
  40c880:	688b      	ldr	r3, [r1, #8]
  40c882:	ea4f 1469 	mov.w	r4, r9, asr #5
  40c886:	eb04 0802 	add.w	r8, r4, r2
  40c88a:	f108 0501 	add.w	r5, r8, #1
  40c88e:	429d      	cmp	r5, r3
  40c890:	460e      	mov	r6, r1
  40c892:	4607      	mov	r7, r0
  40c894:	6849      	ldr	r1, [r1, #4]
  40c896:	dd04      	ble.n	40c8a2 <__lshift+0x2a>
  40c898:	005b      	lsls	r3, r3, #1
  40c89a:	429d      	cmp	r5, r3
  40c89c:	f101 0101 	add.w	r1, r1, #1
  40c8a0:	dcfa      	bgt.n	40c898 <__lshift+0x20>
  40c8a2:	4638      	mov	r0, r7
  40c8a4:	f7ff fe3c 	bl	40c520 <_Balloc>
  40c8a8:	2c00      	cmp	r4, #0
  40c8aa:	f100 0314 	add.w	r3, r0, #20
  40c8ae:	dd06      	ble.n	40c8be <__lshift+0x46>
  40c8b0:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  40c8b4:	2100      	movs	r1, #0
  40c8b6:	f843 1b04 	str.w	r1, [r3], #4
  40c8ba:	429a      	cmp	r2, r3
  40c8bc:	d1fb      	bne.n	40c8b6 <__lshift+0x3e>
  40c8be:	6934      	ldr	r4, [r6, #16]
  40c8c0:	f106 0114 	add.w	r1, r6, #20
  40c8c4:	f019 091f 	ands.w	r9, r9, #31
  40c8c8:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  40c8cc:	d01d      	beq.n	40c90a <__lshift+0x92>
  40c8ce:	f1c9 0c20 	rsb	ip, r9, #32
  40c8d2:	2200      	movs	r2, #0
  40c8d4:	680c      	ldr	r4, [r1, #0]
  40c8d6:	fa04 f409 	lsl.w	r4, r4, r9
  40c8da:	4314      	orrs	r4, r2
  40c8dc:	f843 4b04 	str.w	r4, [r3], #4
  40c8e0:	f851 2b04 	ldr.w	r2, [r1], #4
  40c8e4:	458e      	cmp	lr, r1
  40c8e6:	fa22 f20c 	lsr.w	r2, r2, ip
  40c8ea:	d8f3      	bhi.n	40c8d4 <__lshift+0x5c>
  40c8ec:	601a      	str	r2, [r3, #0]
  40c8ee:	b10a      	cbz	r2, 40c8f4 <__lshift+0x7c>
  40c8f0:	f108 0502 	add.w	r5, r8, #2
  40c8f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40c8f6:	6872      	ldr	r2, [r6, #4]
  40c8f8:	3d01      	subs	r5, #1
  40c8fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40c8fe:	6105      	str	r5, [r0, #16]
  40c900:	6031      	str	r1, [r6, #0]
  40c902:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40c906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40c90a:	3b04      	subs	r3, #4
  40c90c:	f851 2b04 	ldr.w	r2, [r1], #4
  40c910:	f843 2f04 	str.w	r2, [r3, #4]!
  40c914:	458e      	cmp	lr, r1
  40c916:	d8f9      	bhi.n	40c90c <__lshift+0x94>
  40c918:	e7ec      	b.n	40c8f4 <__lshift+0x7c>
  40c91a:	bf00      	nop

0040c91c <__mcmp>:
  40c91c:	b430      	push	{r4, r5}
  40c91e:	690b      	ldr	r3, [r1, #16]
  40c920:	4605      	mov	r5, r0
  40c922:	6900      	ldr	r0, [r0, #16]
  40c924:	1ac0      	subs	r0, r0, r3
  40c926:	d10f      	bne.n	40c948 <__mcmp+0x2c>
  40c928:	009b      	lsls	r3, r3, #2
  40c92a:	3514      	adds	r5, #20
  40c92c:	3114      	adds	r1, #20
  40c92e:	4419      	add	r1, r3
  40c930:	442b      	add	r3, r5
  40c932:	e001      	b.n	40c938 <__mcmp+0x1c>
  40c934:	429d      	cmp	r5, r3
  40c936:	d207      	bcs.n	40c948 <__mcmp+0x2c>
  40c938:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40c93c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40c940:	4294      	cmp	r4, r2
  40c942:	d0f7      	beq.n	40c934 <__mcmp+0x18>
  40c944:	d302      	bcc.n	40c94c <__mcmp+0x30>
  40c946:	2001      	movs	r0, #1
  40c948:	bc30      	pop	{r4, r5}
  40c94a:	4770      	bx	lr
  40c94c:	f04f 30ff 	mov.w	r0, #4294967295
  40c950:	e7fa      	b.n	40c948 <__mcmp+0x2c>
  40c952:	bf00      	nop

0040c954 <__mdiff>:
  40c954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40c958:	690f      	ldr	r7, [r1, #16]
  40c95a:	460e      	mov	r6, r1
  40c95c:	6911      	ldr	r1, [r2, #16]
  40c95e:	1a7f      	subs	r7, r7, r1
  40c960:	2f00      	cmp	r7, #0
  40c962:	4690      	mov	r8, r2
  40c964:	d117      	bne.n	40c996 <__mdiff+0x42>
  40c966:	0089      	lsls	r1, r1, #2
  40c968:	f106 0514 	add.w	r5, r6, #20
  40c96c:	f102 0e14 	add.w	lr, r2, #20
  40c970:	186b      	adds	r3, r5, r1
  40c972:	4471      	add	r1, lr
  40c974:	e001      	b.n	40c97a <__mdiff+0x26>
  40c976:	429d      	cmp	r5, r3
  40c978:	d25c      	bcs.n	40ca34 <__mdiff+0xe0>
  40c97a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40c97e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40c982:	42a2      	cmp	r2, r4
  40c984:	d0f7      	beq.n	40c976 <__mdiff+0x22>
  40c986:	d25e      	bcs.n	40ca46 <__mdiff+0xf2>
  40c988:	4633      	mov	r3, r6
  40c98a:	462c      	mov	r4, r5
  40c98c:	4646      	mov	r6, r8
  40c98e:	4675      	mov	r5, lr
  40c990:	4698      	mov	r8, r3
  40c992:	2701      	movs	r7, #1
  40c994:	e005      	b.n	40c9a2 <__mdiff+0x4e>
  40c996:	db58      	blt.n	40ca4a <__mdiff+0xf6>
  40c998:	f106 0514 	add.w	r5, r6, #20
  40c99c:	f108 0414 	add.w	r4, r8, #20
  40c9a0:	2700      	movs	r7, #0
  40c9a2:	6871      	ldr	r1, [r6, #4]
  40c9a4:	f7ff fdbc 	bl	40c520 <_Balloc>
  40c9a8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40c9ac:	6936      	ldr	r6, [r6, #16]
  40c9ae:	60c7      	str	r7, [r0, #12]
  40c9b0:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40c9b4:	46a6      	mov	lr, r4
  40c9b6:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  40c9ba:	f100 0414 	add.w	r4, r0, #20
  40c9be:	2300      	movs	r3, #0
  40c9c0:	f85e 1b04 	ldr.w	r1, [lr], #4
  40c9c4:	f855 8b04 	ldr.w	r8, [r5], #4
  40c9c8:	b28a      	uxth	r2, r1
  40c9ca:	fa13 f388 	uxtah	r3, r3, r8
  40c9ce:	0c09      	lsrs	r1, r1, #16
  40c9d0:	1a9a      	subs	r2, r3, r2
  40c9d2:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40c9d6:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40c9da:	b292      	uxth	r2, r2
  40c9dc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40c9e0:	45f4      	cmp	ip, lr
  40c9e2:	f844 2b04 	str.w	r2, [r4], #4
  40c9e6:	ea4f 4323 	mov.w	r3, r3, asr #16
  40c9ea:	d8e9      	bhi.n	40c9c0 <__mdiff+0x6c>
  40c9ec:	42af      	cmp	r7, r5
  40c9ee:	d917      	bls.n	40ca20 <__mdiff+0xcc>
  40c9f0:	46a4      	mov	ip, r4
  40c9f2:	46ae      	mov	lr, r5
  40c9f4:	f85e 2b04 	ldr.w	r2, [lr], #4
  40c9f8:	fa13 f382 	uxtah	r3, r3, r2
  40c9fc:	1419      	asrs	r1, r3, #16
  40c9fe:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40ca02:	b29b      	uxth	r3, r3
  40ca04:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  40ca08:	4577      	cmp	r7, lr
  40ca0a:	f84c 2b04 	str.w	r2, [ip], #4
  40ca0e:	ea4f 4321 	mov.w	r3, r1, asr #16
  40ca12:	d8ef      	bhi.n	40c9f4 <__mdiff+0xa0>
  40ca14:	43ed      	mvns	r5, r5
  40ca16:	442f      	add	r7, r5
  40ca18:	f027 0703 	bic.w	r7, r7, #3
  40ca1c:	3704      	adds	r7, #4
  40ca1e:	443c      	add	r4, r7
  40ca20:	3c04      	subs	r4, #4
  40ca22:	b922      	cbnz	r2, 40ca2e <__mdiff+0xda>
  40ca24:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40ca28:	3e01      	subs	r6, #1
  40ca2a:	2b00      	cmp	r3, #0
  40ca2c:	d0fa      	beq.n	40ca24 <__mdiff+0xd0>
  40ca2e:	6106      	str	r6, [r0, #16]
  40ca30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ca34:	2100      	movs	r1, #0
  40ca36:	f7ff fd73 	bl	40c520 <_Balloc>
  40ca3a:	2201      	movs	r2, #1
  40ca3c:	2300      	movs	r3, #0
  40ca3e:	6102      	str	r2, [r0, #16]
  40ca40:	6143      	str	r3, [r0, #20]
  40ca42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ca46:	4674      	mov	r4, lr
  40ca48:	e7ab      	b.n	40c9a2 <__mdiff+0x4e>
  40ca4a:	4633      	mov	r3, r6
  40ca4c:	f106 0414 	add.w	r4, r6, #20
  40ca50:	f102 0514 	add.w	r5, r2, #20
  40ca54:	4616      	mov	r6, r2
  40ca56:	2701      	movs	r7, #1
  40ca58:	4698      	mov	r8, r3
  40ca5a:	e7a2      	b.n	40c9a2 <__mdiff+0x4e>

0040ca5c <__d2b>:
  40ca5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ca60:	b082      	sub	sp, #8
  40ca62:	2101      	movs	r1, #1
  40ca64:	461c      	mov	r4, r3
  40ca66:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40ca6a:	4615      	mov	r5, r2
  40ca6c:	9e08      	ldr	r6, [sp, #32]
  40ca6e:	f7ff fd57 	bl	40c520 <_Balloc>
  40ca72:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40ca76:	4680      	mov	r8, r0
  40ca78:	b10f      	cbz	r7, 40ca7e <__d2b+0x22>
  40ca7a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40ca7e:	9401      	str	r4, [sp, #4]
  40ca80:	b31d      	cbz	r5, 40caca <__d2b+0x6e>
  40ca82:	a802      	add	r0, sp, #8
  40ca84:	f840 5d08 	str.w	r5, [r0, #-8]!
  40ca88:	f7ff fdda 	bl	40c640 <__lo0bits>
  40ca8c:	2800      	cmp	r0, #0
  40ca8e:	d134      	bne.n	40cafa <__d2b+0x9e>
  40ca90:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40ca94:	f8c8 2014 	str.w	r2, [r8, #20]
  40ca98:	2b00      	cmp	r3, #0
  40ca9a:	bf0c      	ite	eq
  40ca9c:	2101      	moveq	r1, #1
  40ca9e:	2102      	movne	r1, #2
  40caa0:	f8c8 3018 	str.w	r3, [r8, #24]
  40caa4:	f8c8 1010 	str.w	r1, [r8, #16]
  40caa8:	b9df      	cbnz	r7, 40cae2 <__d2b+0x86>
  40caaa:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40caae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40cab2:	6030      	str	r0, [r6, #0]
  40cab4:	6918      	ldr	r0, [r3, #16]
  40cab6:	f7ff fda3 	bl	40c600 <__hi0bits>
  40caba:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40cabc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40cac0:	6018      	str	r0, [r3, #0]
  40cac2:	4640      	mov	r0, r8
  40cac4:	b002      	add	sp, #8
  40cac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40caca:	a801      	add	r0, sp, #4
  40cacc:	f7ff fdb8 	bl	40c640 <__lo0bits>
  40cad0:	9b01      	ldr	r3, [sp, #4]
  40cad2:	f8c8 3014 	str.w	r3, [r8, #20]
  40cad6:	2101      	movs	r1, #1
  40cad8:	3020      	adds	r0, #32
  40cada:	f8c8 1010 	str.w	r1, [r8, #16]
  40cade:	2f00      	cmp	r7, #0
  40cae0:	d0e3      	beq.n	40caaa <__d2b+0x4e>
  40cae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40cae4:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40cae8:	4407      	add	r7, r0
  40caea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40caee:	6037      	str	r7, [r6, #0]
  40caf0:	6018      	str	r0, [r3, #0]
  40caf2:	4640      	mov	r0, r8
  40caf4:	b002      	add	sp, #8
  40caf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40cafa:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40cafe:	f1c0 0220 	rsb	r2, r0, #32
  40cb02:	fa03 f202 	lsl.w	r2, r3, r2
  40cb06:	430a      	orrs	r2, r1
  40cb08:	40c3      	lsrs	r3, r0
  40cb0a:	9301      	str	r3, [sp, #4]
  40cb0c:	f8c8 2014 	str.w	r2, [r8, #20]
  40cb10:	e7c2      	b.n	40ca98 <__d2b+0x3c>
  40cb12:	bf00      	nop

0040cb14 <_realloc_r>:
  40cb14:	2900      	cmp	r1, #0
  40cb16:	f000 8095 	beq.w	40cc44 <_realloc_r+0x130>
  40cb1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40cb1e:	460d      	mov	r5, r1
  40cb20:	4616      	mov	r6, r2
  40cb22:	b083      	sub	sp, #12
  40cb24:	4680      	mov	r8, r0
  40cb26:	f106 070b 	add.w	r7, r6, #11
  40cb2a:	f7ff fced 	bl	40c508 <__malloc_lock>
  40cb2e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40cb32:	2f16      	cmp	r7, #22
  40cb34:	f02e 0403 	bic.w	r4, lr, #3
  40cb38:	f1a5 0908 	sub.w	r9, r5, #8
  40cb3c:	d83c      	bhi.n	40cbb8 <_realloc_r+0xa4>
  40cb3e:	2210      	movs	r2, #16
  40cb40:	4617      	mov	r7, r2
  40cb42:	42be      	cmp	r6, r7
  40cb44:	d83d      	bhi.n	40cbc2 <_realloc_r+0xae>
  40cb46:	4294      	cmp	r4, r2
  40cb48:	da43      	bge.n	40cbd2 <_realloc_r+0xbe>
  40cb4a:	4bc4      	ldr	r3, [pc, #784]	; (40ce5c <_realloc_r+0x348>)
  40cb4c:	6899      	ldr	r1, [r3, #8]
  40cb4e:	eb09 0004 	add.w	r0, r9, r4
  40cb52:	4288      	cmp	r0, r1
  40cb54:	f000 80b4 	beq.w	40ccc0 <_realloc_r+0x1ac>
  40cb58:	6843      	ldr	r3, [r0, #4]
  40cb5a:	f023 0101 	bic.w	r1, r3, #1
  40cb5e:	4401      	add	r1, r0
  40cb60:	6849      	ldr	r1, [r1, #4]
  40cb62:	07c9      	lsls	r1, r1, #31
  40cb64:	d54c      	bpl.n	40cc00 <_realloc_r+0xec>
  40cb66:	f01e 0f01 	tst.w	lr, #1
  40cb6a:	f000 809b 	beq.w	40cca4 <_realloc_r+0x190>
  40cb6e:	4631      	mov	r1, r6
  40cb70:	4640      	mov	r0, r8
  40cb72:	f7ff f94d 	bl	40be10 <_malloc_r>
  40cb76:	4606      	mov	r6, r0
  40cb78:	2800      	cmp	r0, #0
  40cb7a:	d03a      	beq.n	40cbf2 <_realloc_r+0xde>
  40cb7c:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40cb80:	f023 0301 	bic.w	r3, r3, #1
  40cb84:	444b      	add	r3, r9
  40cb86:	f1a0 0208 	sub.w	r2, r0, #8
  40cb8a:	429a      	cmp	r2, r3
  40cb8c:	f000 8121 	beq.w	40cdd2 <_realloc_r+0x2be>
  40cb90:	1f22      	subs	r2, r4, #4
  40cb92:	2a24      	cmp	r2, #36	; 0x24
  40cb94:	f200 8107 	bhi.w	40cda6 <_realloc_r+0x292>
  40cb98:	2a13      	cmp	r2, #19
  40cb9a:	f200 80db 	bhi.w	40cd54 <_realloc_r+0x240>
  40cb9e:	4603      	mov	r3, r0
  40cba0:	462a      	mov	r2, r5
  40cba2:	6811      	ldr	r1, [r2, #0]
  40cba4:	6019      	str	r1, [r3, #0]
  40cba6:	6851      	ldr	r1, [r2, #4]
  40cba8:	6059      	str	r1, [r3, #4]
  40cbaa:	6892      	ldr	r2, [r2, #8]
  40cbac:	609a      	str	r2, [r3, #8]
  40cbae:	4629      	mov	r1, r5
  40cbb0:	4640      	mov	r0, r8
  40cbb2:	f7ff f835 	bl	40bc20 <_free_r>
  40cbb6:	e01c      	b.n	40cbf2 <_realloc_r+0xde>
  40cbb8:	f027 0707 	bic.w	r7, r7, #7
  40cbbc:	2f00      	cmp	r7, #0
  40cbbe:	463a      	mov	r2, r7
  40cbc0:	dabf      	bge.n	40cb42 <_realloc_r+0x2e>
  40cbc2:	2600      	movs	r6, #0
  40cbc4:	230c      	movs	r3, #12
  40cbc6:	4630      	mov	r0, r6
  40cbc8:	f8c8 3000 	str.w	r3, [r8]
  40cbcc:	b003      	add	sp, #12
  40cbce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cbd2:	462e      	mov	r6, r5
  40cbd4:	1be3      	subs	r3, r4, r7
  40cbd6:	2b0f      	cmp	r3, #15
  40cbd8:	d81e      	bhi.n	40cc18 <_realloc_r+0x104>
  40cbda:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40cbde:	f003 0301 	and.w	r3, r3, #1
  40cbe2:	4323      	orrs	r3, r4
  40cbe4:	444c      	add	r4, r9
  40cbe6:	f8c9 3004 	str.w	r3, [r9, #4]
  40cbea:	6863      	ldr	r3, [r4, #4]
  40cbec:	f043 0301 	orr.w	r3, r3, #1
  40cbf0:	6063      	str	r3, [r4, #4]
  40cbf2:	4640      	mov	r0, r8
  40cbf4:	f7ff fc8e 	bl	40c514 <__malloc_unlock>
  40cbf8:	4630      	mov	r0, r6
  40cbfa:	b003      	add	sp, #12
  40cbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cc00:	f023 0303 	bic.w	r3, r3, #3
  40cc04:	18e1      	adds	r1, r4, r3
  40cc06:	4291      	cmp	r1, r2
  40cc08:	db1f      	blt.n	40cc4a <_realloc_r+0x136>
  40cc0a:	68c3      	ldr	r3, [r0, #12]
  40cc0c:	6882      	ldr	r2, [r0, #8]
  40cc0e:	462e      	mov	r6, r5
  40cc10:	60d3      	str	r3, [r2, #12]
  40cc12:	460c      	mov	r4, r1
  40cc14:	609a      	str	r2, [r3, #8]
  40cc16:	e7dd      	b.n	40cbd4 <_realloc_r+0xc0>
  40cc18:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40cc1c:	eb09 0107 	add.w	r1, r9, r7
  40cc20:	f002 0201 	and.w	r2, r2, #1
  40cc24:	444c      	add	r4, r9
  40cc26:	f043 0301 	orr.w	r3, r3, #1
  40cc2a:	4317      	orrs	r7, r2
  40cc2c:	f8c9 7004 	str.w	r7, [r9, #4]
  40cc30:	604b      	str	r3, [r1, #4]
  40cc32:	6863      	ldr	r3, [r4, #4]
  40cc34:	f043 0301 	orr.w	r3, r3, #1
  40cc38:	3108      	adds	r1, #8
  40cc3a:	6063      	str	r3, [r4, #4]
  40cc3c:	4640      	mov	r0, r8
  40cc3e:	f7fe ffef 	bl	40bc20 <_free_r>
  40cc42:	e7d6      	b.n	40cbf2 <_realloc_r+0xde>
  40cc44:	4611      	mov	r1, r2
  40cc46:	f7ff b8e3 	b.w	40be10 <_malloc_r>
  40cc4a:	f01e 0f01 	tst.w	lr, #1
  40cc4e:	d18e      	bne.n	40cb6e <_realloc_r+0x5a>
  40cc50:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40cc54:	eba9 0a01 	sub.w	sl, r9, r1
  40cc58:	f8da 1004 	ldr.w	r1, [sl, #4]
  40cc5c:	f021 0103 	bic.w	r1, r1, #3
  40cc60:	440b      	add	r3, r1
  40cc62:	4423      	add	r3, r4
  40cc64:	4293      	cmp	r3, r2
  40cc66:	db25      	blt.n	40ccb4 <_realloc_r+0x1a0>
  40cc68:	68c2      	ldr	r2, [r0, #12]
  40cc6a:	6881      	ldr	r1, [r0, #8]
  40cc6c:	4656      	mov	r6, sl
  40cc6e:	60ca      	str	r2, [r1, #12]
  40cc70:	6091      	str	r1, [r2, #8]
  40cc72:	f8da 100c 	ldr.w	r1, [sl, #12]
  40cc76:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40cc7a:	1f22      	subs	r2, r4, #4
  40cc7c:	2a24      	cmp	r2, #36	; 0x24
  40cc7e:	60c1      	str	r1, [r0, #12]
  40cc80:	6088      	str	r0, [r1, #8]
  40cc82:	f200 8094 	bhi.w	40cdae <_realloc_r+0x29a>
  40cc86:	2a13      	cmp	r2, #19
  40cc88:	d96f      	bls.n	40cd6a <_realloc_r+0x256>
  40cc8a:	6829      	ldr	r1, [r5, #0]
  40cc8c:	f8ca 1008 	str.w	r1, [sl, #8]
  40cc90:	6869      	ldr	r1, [r5, #4]
  40cc92:	f8ca 100c 	str.w	r1, [sl, #12]
  40cc96:	2a1b      	cmp	r2, #27
  40cc98:	f200 80a2 	bhi.w	40cde0 <_realloc_r+0x2cc>
  40cc9c:	3508      	adds	r5, #8
  40cc9e:	f10a 0210 	add.w	r2, sl, #16
  40cca2:	e063      	b.n	40cd6c <_realloc_r+0x258>
  40cca4:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40cca8:	eba9 0a03 	sub.w	sl, r9, r3
  40ccac:	f8da 1004 	ldr.w	r1, [sl, #4]
  40ccb0:	f021 0103 	bic.w	r1, r1, #3
  40ccb4:	1863      	adds	r3, r4, r1
  40ccb6:	4293      	cmp	r3, r2
  40ccb8:	f6ff af59 	blt.w	40cb6e <_realloc_r+0x5a>
  40ccbc:	4656      	mov	r6, sl
  40ccbe:	e7d8      	b.n	40cc72 <_realloc_r+0x15e>
  40ccc0:	6841      	ldr	r1, [r0, #4]
  40ccc2:	f021 0b03 	bic.w	fp, r1, #3
  40ccc6:	44a3      	add	fp, r4
  40ccc8:	f107 0010 	add.w	r0, r7, #16
  40cccc:	4583      	cmp	fp, r0
  40ccce:	da56      	bge.n	40cd7e <_realloc_r+0x26a>
  40ccd0:	f01e 0f01 	tst.w	lr, #1
  40ccd4:	f47f af4b 	bne.w	40cb6e <_realloc_r+0x5a>
  40ccd8:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40ccdc:	eba9 0a01 	sub.w	sl, r9, r1
  40cce0:	f8da 1004 	ldr.w	r1, [sl, #4]
  40cce4:	f021 0103 	bic.w	r1, r1, #3
  40cce8:	448b      	add	fp, r1
  40ccea:	4558      	cmp	r0, fp
  40ccec:	dce2      	bgt.n	40ccb4 <_realloc_r+0x1a0>
  40ccee:	4656      	mov	r6, sl
  40ccf0:	f8da 100c 	ldr.w	r1, [sl, #12]
  40ccf4:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40ccf8:	1f22      	subs	r2, r4, #4
  40ccfa:	2a24      	cmp	r2, #36	; 0x24
  40ccfc:	60c1      	str	r1, [r0, #12]
  40ccfe:	6088      	str	r0, [r1, #8]
  40cd00:	f200 808f 	bhi.w	40ce22 <_realloc_r+0x30e>
  40cd04:	2a13      	cmp	r2, #19
  40cd06:	f240 808a 	bls.w	40ce1e <_realloc_r+0x30a>
  40cd0a:	6829      	ldr	r1, [r5, #0]
  40cd0c:	f8ca 1008 	str.w	r1, [sl, #8]
  40cd10:	6869      	ldr	r1, [r5, #4]
  40cd12:	f8ca 100c 	str.w	r1, [sl, #12]
  40cd16:	2a1b      	cmp	r2, #27
  40cd18:	f200 808a 	bhi.w	40ce30 <_realloc_r+0x31c>
  40cd1c:	3508      	adds	r5, #8
  40cd1e:	f10a 0210 	add.w	r2, sl, #16
  40cd22:	6829      	ldr	r1, [r5, #0]
  40cd24:	6011      	str	r1, [r2, #0]
  40cd26:	6869      	ldr	r1, [r5, #4]
  40cd28:	6051      	str	r1, [r2, #4]
  40cd2a:	68a9      	ldr	r1, [r5, #8]
  40cd2c:	6091      	str	r1, [r2, #8]
  40cd2e:	eb0a 0107 	add.w	r1, sl, r7
  40cd32:	ebab 0207 	sub.w	r2, fp, r7
  40cd36:	f042 0201 	orr.w	r2, r2, #1
  40cd3a:	6099      	str	r1, [r3, #8]
  40cd3c:	604a      	str	r2, [r1, #4]
  40cd3e:	f8da 3004 	ldr.w	r3, [sl, #4]
  40cd42:	f003 0301 	and.w	r3, r3, #1
  40cd46:	431f      	orrs	r7, r3
  40cd48:	4640      	mov	r0, r8
  40cd4a:	f8ca 7004 	str.w	r7, [sl, #4]
  40cd4e:	f7ff fbe1 	bl	40c514 <__malloc_unlock>
  40cd52:	e751      	b.n	40cbf8 <_realloc_r+0xe4>
  40cd54:	682b      	ldr	r3, [r5, #0]
  40cd56:	6003      	str	r3, [r0, #0]
  40cd58:	686b      	ldr	r3, [r5, #4]
  40cd5a:	6043      	str	r3, [r0, #4]
  40cd5c:	2a1b      	cmp	r2, #27
  40cd5e:	d82d      	bhi.n	40cdbc <_realloc_r+0x2a8>
  40cd60:	f100 0308 	add.w	r3, r0, #8
  40cd64:	f105 0208 	add.w	r2, r5, #8
  40cd68:	e71b      	b.n	40cba2 <_realloc_r+0x8e>
  40cd6a:	4632      	mov	r2, r6
  40cd6c:	6829      	ldr	r1, [r5, #0]
  40cd6e:	6011      	str	r1, [r2, #0]
  40cd70:	6869      	ldr	r1, [r5, #4]
  40cd72:	6051      	str	r1, [r2, #4]
  40cd74:	68a9      	ldr	r1, [r5, #8]
  40cd76:	6091      	str	r1, [r2, #8]
  40cd78:	461c      	mov	r4, r3
  40cd7a:	46d1      	mov	r9, sl
  40cd7c:	e72a      	b.n	40cbd4 <_realloc_r+0xc0>
  40cd7e:	eb09 0107 	add.w	r1, r9, r7
  40cd82:	ebab 0b07 	sub.w	fp, fp, r7
  40cd86:	f04b 0201 	orr.w	r2, fp, #1
  40cd8a:	6099      	str	r1, [r3, #8]
  40cd8c:	604a      	str	r2, [r1, #4]
  40cd8e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40cd92:	f003 0301 	and.w	r3, r3, #1
  40cd96:	431f      	orrs	r7, r3
  40cd98:	4640      	mov	r0, r8
  40cd9a:	f845 7c04 	str.w	r7, [r5, #-4]
  40cd9e:	f7ff fbb9 	bl	40c514 <__malloc_unlock>
  40cda2:	462e      	mov	r6, r5
  40cda4:	e728      	b.n	40cbf8 <_realloc_r+0xe4>
  40cda6:	4629      	mov	r1, r5
  40cda8:	f7ff fb4a 	bl	40c440 <memmove>
  40cdac:	e6ff      	b.n	40cbae <_realloc_r+0x9a>
  40cdae:	4629      	mov	r1, r5
  40cdb0:	4630      	mov	r0, r6
  40cdb2:	461c      	mov	r4, r3
  40cdb4:	46d1      	mov	r9, sl
  40cdb6:	f7ff fb43 	bl	40c440 <memmove>
  40cdba:	e70b      	b.n	40cbd4 <_realloc_r+0xc0>
  40cdbc:	68ab      	ldr	r3, [r5, #8]
  40cdbe:	6083      	str	r3, [r0, #8]
  40cdc0:	68eb      	ldr	r3, [r5, #12]
  40cdc2:	60c3      	str	r3, [r0, #12]
  40cdc4:	2a24      	cmp	r2, #36	; 0x24
  40cdc6:	d017      	beq.n	40cdf8 <_realloc_r+0x2e4>
  40cdc8:	f100 0310 	add.w	r3, r0, #16
  40cdcc:	f105 0210 	add.w	r2, r5, #16
  40cdd0:	e6e7      	b.n	40cba2 <_realloc_r+0x8e>
  40cdd2:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40cdd6:	f023 0303 	bic.w	r3, r3, #3
  40cdda:	441c      	add	r4, r3
  40cddc:	462e      	mov	r6, r5
  40cdde:	e6f9      	b.n	40cbd4 <_realloc_r+0xc0>
  40cde0:	68a9      	ldr	r1, [r5, #8]
  40cde2:	f8ca 1010 	str.w	r1, [sl, #16]
  40cde6:	68e9      	ldr	r1, [r5, #12]
  40cde8:	f8ca 1014 	str.w	r1, [sl, #20]
  40cdec:	2a24      	cmp	r2, #36	; 0x24
  40cdee:	d00c      	beq.n	40ce0a <_realloc_r+0x2f6>
  40cdf0:	3510      	adds	r5, #16
  40cdf2:	f10a 0218 	add.w	r2, sl, #24
  40cdf6:	e7b9      	b.n	40cd6c <_realloc_r+0x258>
  40cdf8:	692b      	ldr	r3, [r5, #16]
  40cdfa:	6103      	str	r3, [r0, #16]
  40cdfc:	696b      	ldr	r3, [r5, #20]
  40cdfe:	6143      	str	r3, [r0, #20]
  40ce00:	f105 0218 	add.w	r2, r5, #24
  40ce04:	f100 0318 	add.w	r3, r0, #24
  40ce08:	e6cb      	b.n	40cba2 <_realloc_r+0x8e>
  40ce0a:	692a      	ldr	r2, [r5, #16]
  40ce0c:	f8ca 2018 	str.w	r2, [sl, #24]
  40ce10:	696a      	ldr	r2, [r5, #20]
  40ce12:	f8ca 201c 	str.w	r2, [sl, #28]
  40ce16:	3518      	adds	r5, #24
  40ce18:	f10a 0220 	add.w	r2, sl, #32
  40ce1c:	e7a6      	b.n	40cd6c <_realloc_r+0x258>
  40ce1e:	4632      	mov	r2, r6
  40ce20:	e77f      	b.n	40cd22 <_realloc_r+0x20e>
  40ce22:	4629      	mov	r1, r5
  40ce24:	4630      	mov	r0, r6
  40ce26:	9301      	str	r3, [sp, #4]
  40ce28:	f7ff fb0a 	bl	40c440 <memmove>
  40ce2c:	9b01      	ldr	r3, [sp, #4]
  40ce2e:	e77e      	b.n	40cd2e <_realloc_r+0x21a>
  40ce30:	68a9      	ldr	r1, [r5, #8]
  40ce32:	f8ca 1010 	str.w	r1, [sl, #16]
  40ce36:	68e9      	ldr	r1, [r5, #12]
  40ce38:	f8ca 1014 	str.w	r1, [sl, #20]
  40ce3c:	2a24      	cmp	r2, #36	; 0x24
  40ce3e:	d003      	beq.n	40ce48 <_realloc_r+0x334>
  40ce40:	3510      	adds	r5, #16
  40ce42:	f10a 0218 	add.w	r2, sl, #24
  40ce46:	e76c      	b.n	40cd22 <_realloc_r+0x20e>
  40ce48:	692a      	ldr	r2, [r5, #16]
  40ce4a:	f8ca 2018 	str.w	r2, [sl, #24]
  40ce4e:	696a      	ldr	r2, [r5, #20]
  40ce50:	f8ca 201c 	str.w	r2, [sl, #28]
  40ce54:	3518      	adds	r5, #24
  40ce56:	f10a 0220 	add.w	r2, sl, #32
  40ce5a:	e762      	b.n	40cd22 <_realloc_r+0x20e>
  40ce5c:	20000660 	.word	0x20000660

0040ce60 <_sbrk_r>:
  40ce60:	b538      	push	{r3, r4, r5, lr}
  40ce62:	4c07      	ldr	r4, [pc, #28]	; (40ce80 <_sbrk_r+0x20>)
  40ce64:	2300      	movs	r3, #0
  40ce66:	4605      	mov	r5, r0
  40ce68:	4608      	mov	r0, r1
  40ce6a:	6023      	str	r3, [r4, #0]
  40ce6c:	f7f8 face 	bl	40540c <_sbrk>
  40ce70:	1c43      	adds	r3, r0, #1
  40ce72:	d000      	beq.n	40ce76 <_sbrk_r+0x16>
  40ce74:	bd38      	pop	{r3, r4, r5, pc}
  40ce76:	6823      	ldr	r3, [r4, #0]
  40ce78:	2b00      	cmp	r3, #0
  40ce7a:	d0fb      	beq.n	40ce74 <_sbrk_r+0x14>
  40ce7c:	602b      	str	r3, [r5, #0]
  40ce7e:	bd38      	pop	{r3, r4, r5, pc}
  40ce80:	20002038 	.word	0x20002038
	...

0040cec0 <strlen>:
  40cec0:	f890 f000 	pld	[r0]
  40cec4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  40cec8:	f020 0107 	bic.w	r1, r0, #7
  40cecc:	f06f 0c00 	mvn.w	ip, #0
  40ced0:	f010 0407 	ands.w	r4, r0, #7
  40ced4:	f891 f020 	pld	[r1, #32]
  40ced8:	f040 8049 	bne.w	40cf6e <strlen+0xae>
  40cedc:	f04f 0400 	mov.w	r4, #0
  40cee0:	f06f 0007 	mvn.w	r0, #7
  40cee4:	e9d1 2300 	ldrd	r2, r3, [r1]
  40cee8:	f891 f040 	pld	[r1, #64]	; 0x40
  40ceec:	f100 0008 	add.w	r0, r0, #8
  40cef0:	fa82 f24c 	uadd8	r2, r2, ip
  40cef4:	faa4 f28c 	sel	r2, r4, ip
  40cef8:	fa83 f34c 	uadd8	r3, r3, ip
  40cefc:	faa2 f38c 	sel	r3, r2, ip
  40cf00:	bb4b      	cbnz	r3, 40cf56 <strlen+0x96>
  40cf02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  40cf06:	fa82 f24c 	uadd8	r2, r2, ip
  40cf0a:	f100 0008 	add.w	r0, r0, #8
  40cf0e:	faa4 f28c 	sel	r2, r4, ip
  40cf12:	fa83 f34c 	uadd8	r3, r3, ip
  40cf16:	faa2 f38c 	sel	r3, r2, ip
  40cf1a:	b9e3      	cbnz	r3, 40cf56 <strlen+0x96>
  40cf1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  40cf20:	fa82 f24c 	uadd8	r2, r2, ip
  40cf24:	f100 0008 	add.w	r0, r0, #8
  40cf28:	faa4 f28c 	sel	r2, r4, ip
  40cf2c:	fa83 f34c 	uadd8	r3, r3, ip
  40cf30:	faa2 f38c 	sel	r3, r2, ip
  40cf34:	b97b      	cbnz	r3, 40cf56 <strlen+0x96>
  40cf36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40cf3a:	f101 0120 	add.w	r1, r1, #32
  40cf3e:	fa82 f24c 	uadd8	r2, r2, ip
  40cf42:	f100 0008 	add.w	r0, r0, #8
  40cf46:	faa4 f28c 	sel	r2, r4, ip
  40cf4a:	fa83 f34c 	uadd8	r3, r3, ip
  40cf4e:	faa2 f38c 	sel	r3, r2, ip
  40cf52:	2b00      	cmp	r3, #0
  40cf54:	d0c6      	beq.n	40cee4 <strlen+0x24>
  40cf56:	2a00      	cmp	r2, #0
  40cf58:	bf04      	itt	eq
  40cf5a:	3004      	addeq	r0, #4
  40cf5c:	461a      	moveq	r2, r3
  40cf5e:	ba12      	rev	r2, r2
  40cf60:	fab2 f282 	clz	r2, r2
  40cf64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  40cf68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40cf6c:	4770      	bx	lr
  40cf6e:	e9d1 2300 	ldrd	r2, r3, [r1]
  40cf72:	f004 0503 	and.w	r5, r4, #3
  40cf76:	f1c4 0000 	rsb	r0, r4, #0
  40cf7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40cf7e:	f014 0f04 	tst.w	r4, #4
  40cf82:	f891 f040 	pld	[r1, #64]	; 0x40
  40cf86:	fa0c f505 	lsl.w	r5, ip, r5
  40cf8a:	ea62 0205 	orn	r2, r2, r5
  40cf8e:	bf1c      	itt	ne
  40cf90:	ea63 0305 	ornne	r3, r3, r5
  40cf94:	4662      	movne	r2, ip
  40cf96:	f04f 0400 	mov.w	r4, #0
  40cf9a:	e7a9      	b.n	40cef0 <strlen+0x30>

0040cf9c <__ssprint_r>:
  40cf9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40cfa0:	6893      	ldr	r3, [r2, #8]
  40cfa2:	b083      	sub	sp, #12
  40cfa4:	4690      	mov	r8, r2
  40cfa6:	2b00      	cmp	r3, #0
  40cfa8:	d070      	beq.n	40d08c <__ssprint_r+0xf0>
  40cfaa:	4682      	mov	sl, r0
  40cfac:	460c      	mov	r4, r1
  40cfae:	6817      	ldr	r7, [r2, #0]
  40cfb0:	688d      	ldr	r5, [r1, #8]
  40cfb2:	6808      	ldr	r0, [r1, #0]
  40cfb4:	e042      	b.n	40d03c <__ssprint_r+0xa0>
  40cfb6:	89a3      	ldrh	r3, [r4, #12]
  40cfb8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40cfbc:	d02e      	beq.n	40d01c <__ssprint_r+0x80>
  40cfbe:	6965      	ldr	r5, [r4, #20]
  40cfc0:	6921      	ldr	r1, [r4, #16]
  40cfc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  40cfc6:	eba0 0b01 	sub.w	fp, r0, r1
  40cfca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40cfce:	f10b 0001 	add.w	r0, fp, #1
  40cfd2:	106d      	asrs	r5, r5, #1
  40cfd4:	4430      	add	r0, r6
  40cfd6:	42a8      	cmp	r0, r5
  40cfd8:	462a      	mov	r2, r5
  40cfda:	bf84      	itt	hi
  40cfdc:	4605      	movhi	r5, r0
  40cfde:	462a      	movhi	r2, r5
  40cfe0:	055b      	lsls	r3, r3, #21
  40cfe2:	d538      	bpl.n	40d056 <__ssprint_r+0xba>
  40cfe4:	4611      	mov	r1, r2
  40cfe6:	4650      	mov	r0, sl
  40cfe8:	f7fe ff12 	bl	40be10 <_malloc_r>
  40cfec:	2800      	cmp	r0, #0
  40cfee:	d03c      	beq.n	40d06a <__ssprint_r+0xce>
  40cff0:	465a      	mov	r2, fp
  40cff2:	6921      	ldr	r1, [r4, #16]
  40cff4:	9001      	str	r0, [sp, #4]
  40cff6:	f7fc fa9d 	bl	409534 <memcpy>
  40cffa:	89a2      	ldrh	r2, [r4, #12]
  40cffc:	9b01      	ldr	r3, [sp, #4]
  40cffe:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40d002:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40d006:	81a2      	strh	r2, [r4, #12]
  40d008:	eba5 020b 	sub.w	r2, r5, fp
  40d00c:	eb03 000b 	add.w	r0, r3, fp
  40d010:	6165      	str	r5, [r4, #20]
  40d012:	6123      	str	r3, [r4, #16]
  40d014:	6020      	str	r0, [r4, #0]
  40d016:	60a2      	str	r2, [r4, #8]
  40d018:	4635      	mov	r5, r6
  40d01a:	46b3      	mov	fp, r6
  40d01c:	465a      	mov	r2, fp
  40d01e:	4649      	mov	r1, r9
  40d020:	f7ff fa0e 	bl	40c440 <memmove>
  40d024:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40d028:	68a2      	ldr	r2, [r4, #8]
  40d02a:	6820      	ldr	r0, [r4, #0]
  40d02c:	1b55      	subs	r5, r2, r5
  40d02e:	4458      	add	r0, fp
  40d030:	1b9e      	subs	r6, r3, r6
  40d032:	60a5      	str	r5, [r4, #8]
  40d034:	6020      	str	r0, [r4, #0]
  40d036:	f8c8 6008 	str.w	r6, [r8, #8]
  40d03a:	b33e      	cbz	r6, 40d08c <__ssprint_r+0xf0>
  40d03c:	687e      	ldr	r6, [r7, #4]
  40d03e:	463b      	mov	r3, r7
  40d040:	3708      	adds	r7, #8
  40d042:	2e00      	cmp	r6, #0
  40d044:	d0fa      	beq.n	40d03c <__ssprint_r+0xa0>
  40d046:	42ae      	cmp	r6, r5
  40d048:	f8d3 9000 	ldr.w	r9, [r3]
  40d04c:	46ab      	mov	fp, r5
  40d04e:	d2b2      	bcs.n	40cfb6 <__ssprint_r+0x1a>
  40d050:	4635      	mov	r5, r6
  40d052:	46b3      	mov	fp, r6
  40d054:	e7e2      	b.n	40d01c <__ssprint_r+0x80>
  40d056:	4650      	mov	r0, sl
  40d058:	f7ff fd5c 	bl	40cb14 <_realloc_r>
  40d05c:	4603      	mov	r3, r0
  40d05e:	2800      	cmp	r0, #0
  40d060:	d1d2      	bne.n	40d008 <__ssprint_r+0x6c>
  40d062:	6921      	ldr	r1, [r4, #16]
  40d064:	4650      	mov	r0, sl
  40d066:	f7fe fddb 	bl	40bc20 <_free_r>
  40d06a:	230c      	movs	r3, #12
  40d06c:	f8ca 3000 	str.w	r3, [sl]
  40d070:	89a3      	ldrh	r3, [r4, #12]
  40d072:	2200      	movs	r2, #0
  40d074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40d078:	f04f 30ff 	mov.w	r0, #4294967295
  40d07c:	81a3      	strh	r3, [r4, #12]
  40d07e:	f8c8 2008 	str.w	r2, [r8, #8]
  40d082:	f8c8 2004 	str.w	r2, [r8, #4]
  40d086:	b003      	add	sp, #12
  40d088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d08c:	2000      	movs	r0, #0
  40d08e:	f8c8 0004 	str.w	r0, [r8, #4]
  40d092:	b003      	add	sp, #12
  40d094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040d098 <__ascii_wctomb>:
  40d098:	b121      	cbz	r1, 40d0a4 <__ascii_wctomb+0xc>
  40d09a:	2aff      	cmp	r2, #255	; 0xff
  40d09c:	d804      	bhi.n	40d0a8 <__ascii_wctomb+0x10>
  40d09e:	700a      	strb	r2, [r1, #0]
  40d0a0:	2001      	movs	r0, #1
  40d0a2:	4770      	bx	lr
  40d0a4:	4608      	mov	r0, r1
  40d0a6:	4770      	bx	lr
  40d0a8:	238a      	movs	r3, #138	; 0x8a
  40d0aa:	6003      	str	r3, [r0, #0]
  40d0ac:	f04f 30ff 	mov.w	r0, #4294967295
  40d0b0:	4770      	bx	lr
  40d0b2:	bf00      	nop

0040d0b4 <__register_exitproc>:
  40d0b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40d0b8:	4d2c      	ldr	r5, [pc, #176]	; (40d16c <__register_exitproc+0xb8>)
  40d0ba:	4606      	mov	r6, r0
  40d0bc:	6828      	ldr	r0, [r5, #0]
  40d0be:	4698      	mov	r8, r3
  40d0c0:	460f      	mov	r7, r1
  40d0c2:	4691      	mov	r9, r2
  40d0c4:	f7fe fea0 	bl	40be08 <__retarget_lock_acquire_recursive>
  40d0c8:	4b29      	ldr	r3, [pc, #164]	; (40d170 <__register_exitproc+0xbc>)
  40d0ca:	681c      	ldr	r4, [r3, #0]
  40d0cc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40d0d0:	2b00      	cmp	r3, #0
  40d0d2:	d03e      	beq.n	40d152 <__register_exitproc+0x9e>
  40d0d4:	685a      	ldr	r2, [r3, #4]
  40d0d6:	2a1f      	cmp	r2, #31
  40d0d8:	dc1c      	bgt.n	40d114 <__register_exitproc+0x60>
  40d0da:	f102 0e01 	add.w	lr, r2, #1
  40d0de:	b176      	cbz	r6, 40d0fe <__register_exitproc+0x4a>
  40d0e0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40d0e4:	2401      	movs	r4, #1
  40d0e6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40d0ea:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40d0ee:	4094      	lsls	r4, r2
  40d0f0:	4320      	orrs	r0, r4
  40d0f2:	2e02      	cmp	r6, #2
  40d0f4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40d0f8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40d0fc:	d023      	beq.n	40d146 <__register_exitproc+0x92>
  40d0fe:	3202      	adds	r2, #2
  40d100:	f8c3 e004 	str.w	lr, [r3, #4]
  40d104:	6828      	ldr	r0, [r5, #0]
  40d106:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40d10a:	f7fe fe7f 	bl	40be0c <__retarget_lock_release_recursive>
  40d10e:	2000      	movs	r0, #0
  40d110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40d114:	4b17      	ldr	r3, [pc, #92]	; (40d174 <__register_exitproc+0xc0>)
  40d116:	b30b      	cbz	r3, 40d15c <__register_exitproc+0xa8>
  40d118:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40d11c:	f3af 8000 	nop.w
  40d120:	4603      	mov	r3, r0
  40d122:	b1d8      	cbz	r0, 40d15c <__register_exitproc+0xa8>
  40d124:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40d128:	6002      	str	r2, [r0, #0]
  40d12a:	2100      	movs	r1, #0
  40d12c:	6041      	str	r1, [r0, #4]
  40d12e:	460a      	mov	r2, r1
  40d130:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40d134:	f04f 0e01 	mov.w	lr, #1
  40d138:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40d13c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40d140:	2e00      	cmp	r6, #0
  40d142:	d0dc      	beq.n	40d0fe <__register_exitproc+0x4a>
  40d144:	e7cc      	b.n	40d0e0 <__register_exitproc+0x2c>
  40d146:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40d14a:	430c      	orrs	r4, r1
  40d14c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40d150:	e7d5      	b.n	40d0fe <__register_exitproc+0x4a>
  40d152:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40d156:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40d15a:	e7bb      	b.n	40d0d4 <__register_exitproc+0x20>
  40d15c:	6828      	ldr	r0, [r5, #0]
  40d15e:	f7fe fe55 	bl	40be0c <__retarget_lock_release_recursive>
  40d162:	f04f 30ff 	mov.w	r0, #4294967295
  40d166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40d16a:	bf00      	nop
  40d16c:	200004f0 	.word	0x200004f0
  40d170:	0040f3b8 	.word	0x0040f3b8
  40d174:	00000000 	.word	0x00000000

0040d178 <_calloc_r>:
  40d178:	b510      	push	{r4, lr}
  40d17a:	fb02 f101 	mul.w	r1, r2, r1
  40d17e:	f7fe fe47 	bl	40be10 <_malloc_r>
  40d182:	4604      	mov	r4, r0
  40d184:	b1d8      	cbz	r0, 40d1be <_calloc_r+0x46>
  40d186:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40d18a:	f022 0203 	bic.w	r2, r2, #3
  40d18e:	3a04      	subs	r2, #4
  40d190:	2a24      	cmp	r2, #36	; 0x24
  40d192:	d818      	bhi.n	40d1c6 <_calloc_r+0x4e>
  40d194:	2a13      	cmp	r2, #19
  40d196:	d914      	bls.n	40d1c2 <_calloc_r+0x4a>
  40d198:	2300      	movs	r3, #0
  40d19a:	2a1b      	cmp	r2, #27
  40d19c:	6003      	str	r3, [r0, #0]
  40d19e:	6043      	str	r3, [r0, #4]
  40d1a0:	d916      	bls.n	40d1d0 <_calloc_r+0x58>
  40d1a2:	2a24      	cmp	r2, #36	; 0x24
  40d1a4:	6083      	str	r3, [r0, #8]
  40d1a6:	60c3      	str	r3, [r0, #12]
  40d1a8:	bf11      	iteee	ne
  40d1aa:	f100 0210 	addne.w	r2, r0, #16
  40d1ae:	6103      	streq	r3, [r0, #16]
  40d1b0:	6143      	streq	r3, [r0, #20]
  40d1b2:	f100 0218 	addeq.w	r2, r0, #24
  40d1b6:	2300      	movs	r3, #0
  40d1b8:	6013      	str	r3, [r2, #0]
  40d1ba:	6053      	str	r3, [r2, #4]
  40d1bc:	6093      	str	r3, [r2, #8]
  40d1be:	4620      	mov	r0, r4
  40d1c0:	bd10      	pop	{r4, pc}
  40d1c2:	4602      	mov	r2, r0
  40d1c4:	e7f7      	b.n	40d1b6 <_calloc_r+0x3e>
  40d1c6:	2100      	movs	r1, #0
  40d1c8:	f7fc fa4e 	bl	409668 <memset>
  40d1cc:	4620      	mov	r0, r4
  40d1ce:	bd10      	pop	{r4, pc}
  40d1d0:	f100 0208 	add.w	r2, r0, #8
  40d1d4:	e7ef      	b.n	40d1b6 <_calloc_r+0x3e>
  40d1d6:	bf00      	nop

0040d1d8 <__aeabi_uldivmod>:
  40d1d8:	b953      	cbnz	r3, 40d1f0 <__aeabi_uldivmod+0x18>
  40d1da:	b94a      	cbnz	r2, 40d1f0 <__aeabi_uldivmod+0x18>
  40d1dc:	2900      	cmp	r1, #0
  40d1de:	bf08      	it	eq
  40d1e0:	2800      	cmpeq	r0, #0
  40d1e2:	bf1c      	itt	ne
  40d1e4:	f04f 31ff 	movne.w	r1, #4294967295
  40d1e8:	f04f 30ff 	movne.w	r0, #4294967295
  40d1ec:	f000 b97a 	b.w	40d4e4 <__aeabi_idiv0>
  40d1f0:	f1ad 0c08 	sub.w	ip, sp, #8
  40d1f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40d1f8:	f000 f806 	bl	40d208 <__udivmoddi4>
  40d1fc:	f8dd e004 	ldr.w	lr, [sp, #4]
  40d200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40d204:	b004      	add	sp, #16
  40d206:	4770      	bx	lr

0040d208 <__udivmoddi4>:
  40d208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40d20c:	468c      	mov	ip, r1
  40d20e:	460d      	mov	r5, r1
  40d210:	4604      	mov	r4, r0
  40d212:	9e08      	ldr	r6, [sp, #32]
  40d214:	2b00      	cmp	r3, #0
  40d216:	d151      	bne.n	40d2bc <__udivmoddi4+0xb4>
  40d218:	428a      	cmp	r2, r1
  40d21a:	4617      	mov	r7, r2
  40d21c:	d96d      	bls.n	40d2fa <__udivmoddi4+0xf2>
  40d21e:	fab2 fe82 	clz	lr, r2
  40d222:	f1be 0f00 	cmp.w	lr, #0
  40d226:	d00b      	beq.n	40d240 <__udivmoddi4+0x38>
  40d228:	f1ce 0c20 	rsb	ip, lr, #32
  40d22c:	fa01 f50e 	lsl.w	r5, r1, lr
  40d230:	fa20 fc0c 	lsr.w	ip, r0, ip
  40d234:	fa02 f70e 	lsl.w	r7, r2, lr
  40d238:	ea4c 0c05 	orr.w	ip, ip, r5
  40d23c:	fa00 f40e 	lsl.w	r4, r0, lr
  40d240:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40d244:	0c25      	lsrs	r5, r4, #16
  40d246:	fbbc f8fa 	udiv	r8, ip, sl
  40d24a:	fa1f f987 	uxth.w	r9, r7
  40d24e:	fb0a cc18 	mls	ip, sl, r8, ip
  40d252:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40d256:	fb08 f309 	mul.w	r3, r8, r9
  40d25a:	42ab      	cmp	r3, r5
  40d25c:	d90a      	bls.n	40d274 <__udivmoddi4+0x6c>
  40d25e:	19ed      	adds	r5, r5, r7
  40d260:	f108 32ff 	add.w	r2, r8, #4294967295
  40d264:	f080 8123 	bcs.w	40d4ae <__udivmoddi4+0x2a6>
  40d268:	42ab      	cmp	r3, r5
  40d26a:	f240 8120 	bls.w	40d4ae <__udivmoddi4+0x2a6>
  40d26e:	f1a8 0802 	sub.w	r8, r8, #2
  40d272:	443d      	add	r5, r7
  40d274:	1aed      	subs	r5, r5, r3
  40d276:	b2a4      	uxth	r4, r4
  40d278:	fbb5 f0fa 	udiv	r0, r5, sl
  40d27c:	fb0a 5510 	mls	r5, sl, r0, r5
  40d280:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40d284:	fb00 f909 	mul.w	r9, r0, r9
  40d288:	45a1      	cmp	r9, r4
  40d28a:	d909      	bls.n	40d2a0 <__udivmoddi4+0x98>
  40d28c:	19e4      	adds	r4, r4, r7
  40d28e:	f100 33ff 	add.w	r3, r0, #4294967295
  40d292:	f080 810a 	bcs.w	40d4aa <__udivmoddi4+0x2a2>
  40d296:	45a1      	cmp	r9, r4
  40d298:	f240 8107 	bls.w	40d4aa <__udivmoddi4+0x2a2>
  40d29c:	3802      	subs	r0, #2
  40d29e:	443c      	add	r4, r7
  40d2a0:	eba4 0409 	sub.w	r4, r4, r9
  40d2a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40d2a8:	2100      	movs	r1, #0
  40d2aa:	2e00      	cmp	r6, #0
  40d2ac:	d061      	beq.n	40d372 <__udivmoddi4+0x16a>
  40d2ae:	fa24 f40e 	lsr.w	r4, r4, lr
  40d2b2:	2300      	movs	r3, #0
  40d2b4:	6034      	str	r4, [r6, #0]
  40d2b6:	6073      	str	r3, [r6, #4]
  40d2b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d2bc:	428b      	cmp	r3, r1
  40d2be:	d907      	bls.n	40d2d0 <__udivmoddi4+0xc8>
  40d2c0:	2e00      	cmp	r6, #0
  40d2c2:	d054      	beq.n	40d36e <__udivmoddi4+0x166>
  40d2c4:	2100      	movs	r1, #0
  40d2c6:	e886 0021 	stmia.w	r6, {r0, r5}
  40d2ca:	4608      	mov	r0, r1
  40d2cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d2d0:	fab3 f183 	clz	r1, r3
  40d2d4:	2900      	cmp	r1, #0
  40d2d6:	f040 808e 	bne.w	40d3f6 <__udivmoddi4+0x1ee>
  40d2da:	42ab      	cmp	r3, r5
  40d2dc:	d302      	bcc.n	40d2e4 <__udivmoddi4+0xdc>
  40d2de:	4282      	cmp	r2, r0
  40d2e0:	f200 80fa 	bhi.w	40d4d8 <__udivmoddi4+0x2d0>
  40d2e4:	1a84      	subs	r4, r0, r2
  40d2e6:	eb65 0503 	sbc.w	r5, r5, r3
  40d2ea:	2001      	movs	r0, #1
  40d2ec:	46ac      	mov	ip, r5
  40d2ee:	2e00      	cmp	r6, #0
  40d2f0:	d03f      	beq.n	40d372 <__udivmoddi4+0x16a>
  40d2f2:	e886 1010 	stmia.w	r6, {r4, ip}
  40d2f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d2fa:	b912      	cbnz	r2, 40d302 <__udivmoddi4+0xfa>
  40d2fc:	2701      	movs	r7, #1
  40d2fe:	fbb7 f7f2 	udiv	r7, r7, r2
  40d302:	fab7 fe87 	clz	lr, r7
  40d306:	f1be 0f00 	cmp.w	lr, #0
  40d30a:	d134      	bne.n	40d376 <__udivmoddi4+0x16e>
  40d30c:	1beb      	subs	r3, r5, r7
  40d30e:	0c3a      	lsrs	r2, r7, #16
  40d310:	fa1f fc87 	uxth.w	ip, r7
  40d314:	2101      	movs	r1, #1
  40d316:	fbb3 f8f2 	udiv	r8, r3, r2
  40d31a:	0c25      	lsrs	r5, r4, #16
  40d31c:	fb02 3318 	mls	r3, r2, r8, r3
  40d320:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40d324:	fb0c f308 	mul.w	r3, ip, r8
  40d328:	42ab      	cmp	r3, r5
  40d32a:	d907      	bls.n	40d33c <__udivmoddi4+0x134>
  40d32c:	19ed      	adds	r5, r5, r7
  40d32e:	f108 30ff 	add.w	r0, r8, #4294967295
  40d332:	d202      	bcs.n	40d33a <__udivmoddi4+0x132>
  40d334:	42ab      	cmp	r3, r5
  40d336:	f200 80d1 	bhi.w	40d4dc <__udivmoddi4+0x2d4>
  40d33a:	4680      	mov	r8, r0
  40d33c:	1aed      	subs	r5, r5, r3
  40d33e:	b2a3      	uxth	r3, r4
  40d340:	fbb5 f0f2 	udiv	r0, r5, r2
  40d344:	fb02 5510 	mls	r5, r2, r0, r5
  40d348:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40d34c:	fb0c fc00 	mul.w	ip, ip, r0
  40d350:	45a4      	cmp	ip, r4
  40d352:	d907      	bls.n	40d364 <__udivmoddi4+0x15c>
  40d354:	19e4      	adds	r4, r4, r7
  40d356:	f100 33ff 	add.w	r3, r0, #4294967295
  40d35a:	d202      	bcs.n	40d362 <__udivmoddi4+0x15a>
  40d35c:	45a4      	cmp	ip, r4
  40d35e:	f200 80b8 	bhi.w	40d4d2 <__udivmoddi4+0x2ca>
  40d362:	4618      	mov	r0, r3
  40d364:	eba4 040c 	sub.w	r4, r4, ip
  40d368:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40d36c:	e79d      	b.n	40d2aa <__udivmoddi4+0xa2>
  40d36e:	4631      	mov	r1, r6
  40d370:	4630      	mov	r0, r6
  40d372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d376:	f1ce 0420 	rsb	r4, lr, #32
  40d37a:	fa05 f30e 	lsl.w	r3, r5, lr
  40d37e:	fa07 f70e 	lsl.w	r7, r7, lr
  40d382:	fa20 f804 	lsr.w	r8, r0, r4
  40d386:	0c3a      	lsrs	r2, r7, #16
  40d388:	fa25 f404 	lsr.w	r4, r5, r4
  40d38c:	ea48 0803 	orr.w	r8, r8, r3
  40d390:	fbb4 f1f2 	udiv	r1, r4, r2
  40d394:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40d398:	fb02 4411 	mls	r4, r2, r1, r4
  40d39c:	fa1f fc87 	uxth.w	ip, r7
  40d3a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40d3a4:	fb01 f30c 	mul.w	r3, r1, ip
  40d3a8:	42ab      	cmp	r3, r5
  40d3aa:	fa00 f40e 	lsl.w	r4, r0, lr
  40d3ae:	d909      	bls.n	40d3c4 <__udivmoddi4+0x1bc>
  40d3b0:	19ed      	adds	r5, r5, r7
  40d3b2:	f101 30ff 	add.w	r0, r1, #4294967295
  40d3b6:	f080 808a 	bcs.w	40d4ce <__udivmoddi4+0x2c6>
  40d3ba:	42ab      	cmp	r3, r5
  40d3bc:	f240 8087 	bls.w	40d4ce <__udivmoddi4+0x2c6>
  40d3c0:	3902      	subs	r1, #2
  40d3c2:	443d      	add	r5, r7
  40d3c4:	1aeb      	subs	r3, r5, r3
  40d3c6:	fa1f f588 	uxth.w	r5, r8
  40d3ca:	fbb3 f0f2 	udiv	r0, r3, r2
  40d3ce:	fb02 3310 	mls	r3, r2, r0, r3
  40d3d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40d3d6:	fb00 f30c 	mul.w	r3, r0, ip
  40d3da:	42ab      	cmp	r3, r5
  40d3dc:	d907      	bls.n	40d3ee <__udivmoddi4+0x1e6>
  40d3de:	19ed      	adds	r5, r5, r7
  40d3e0:	f100 38ff 	add.w	r8, r0, #4294967295
  40d3e4:	d26f      	bcs.n	40d4c6 <__udivmoddi4+0x2be>
  40d3e6:	42ab      	cmp	r3, r5
  40d3e8:	d96d      	bls.n	40d4c6 <__udivmoddi4+0x2be>
  40d3ea:	3802      	subs	r0, #2
  40d3ec:	443d      	add	r5, r7
  40d3ee:	1aeb      	subs	r3, r5, r3
  40d3f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40d3f4:	e78f      	b.n	40d316 <__udivmoddi4+0x10e>
  40d3f6:	f1c1 0720 	rsb	r7, r1, #32
  40d3fa:	fa22 f807 	lsr.w	r8, r2, r7
  40d3fe:	408b      	lsls	r3, r1
  40d400:	fa05 f401 	lsl.w	r4, r5, r1
  40d404:	ea48 0303 	orr.w	r3, r8, r3
  40d408:	fa20 fe07 	lsr.w	lr, r0, r7
  40d40c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40d410:	40fd      	lsrs	r5, r7
  40d412:	ea4e 0e04 	orr.w	lr, lr, r4
  40d416:	fbb5 f9fc 	udiv	r9, r5, ip
  40d41a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40d41e:	fb0c 5519 	mls	r5, ip, r9, r5
  40d422:	fa1f f883 	uxth.w	r8, r3
  40d426:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40d42a:	fb09 f408 	mul.w	r4, r9, r8
  40d42e:	42ac      	cmp	r4, r5
  40d430:	fa02 f201 	lsl.w	r2, r2, r1
  40d434:	fa00 fa01 	lsl.w	sl, r0, r1
  40d438:	d908      	bls.n	40d44c <__udivmoddi4+0x244>
  40d43a:	18ed      	adds	r5, r5, r3
  40d43c:	f109 30ff 	add.w	r0, r9, #4294967295
  40d440:	d243      	bcs.n	40d4ca <__udivmoddi4+0x2c2>
  40d442:	42ac      	cmp	r4, r5
  40d444:	d941      	bls.n	40d4ca <__udivmoddi4+0x2c2>
  40d446:	f1a9 0902 	sub.w	r9, r9, #2
  40d44a:	441d      	add	r5, r3
  40d44c:	1b2d      	subs	r5, r5, r4
  40d44e:	fa1f fe8e 	uxth.w	lr, lr
  40d452:	fbb5 f0fc 	udiv	r0, r5, ip
  40d456:	fb0c 5510 	mls	r5, ip, r0, r5
  40d45a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40d45e:	fb00 f808 	mul.w	r8, r0, r8
  40d462:	45a0      	cmp	r8, r4
  40d464:	d907      	bls.n	40d476 <__udivmoddi4+0x26e>
  40d466:	18e4      	adds	r4, r4, r3
  40d468:	f100 35ff 	add.w	r5, r0, #4294967295
  40d46c:	d229      	bcs.n	40d4c2 <__udivmoddi4+0x2ba>
  40d46e:	45a0      	cmp	r8, r4
  40d470:	d927      	bls.n	40d4c2 <__udivmoddi4+0x2ba>
  40d472:	3802      	subs	r0, #2
  40d474:	441c      	add	r4, r3
  40d476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40d47a:	eba4 0408 	sub.w	r4, r4, r8
  40d47e:	fba0 8902 	umull	r8, r9, r0, r2
  40d482:	454c      	cmp	r4, r9
  40d484:	46c6      	mov	lr, r8
  40d486:	464d      	mov	r5, r9
  40d488:	d315      	bcc.n	40d4b6 <__udivmoddi4+0x2ae>
  40d48a:	d012      	beq.n	40d4b2 <__udivmoddi4+0x2aa>
  40d48c:	b156      	cbz	r6, 40d4a4 <__udivmoddi4+0x29c>
  40d48e:	ebba 030e 	subs.w	r3, sl, lr
  40d492:	eb64 0405 	sbc.w	r4, r4, r5
  40d496:	fa04 f707 	lsl.w	r7, r4, r7
  40d49a:	40cb      	lsrs	r3, r1
  40d49c:	431f      	orrs	r7, r3
  40d49e:	40cc      	lsrs	r4, r1
  40d4a0:	6037      	str	r7, [r6, #0]
  40d4a2:	6074      	str	r4, [r6, #4]
  40d4a4:	2100      	movs	r1, #0
  40d4a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40d4aa:	4618      	mov	r0, r3
  40d4ac:	e6f8      	b.n	40d2a0 <__udivmoddi4+0x98>
  40d4ae:	4690      	mov	r8, r2
  40d4b0:	e6e0      	b.n	40d274 <__udivmoddi4+0x6c>
  40d4b2:	45c2      	cmp	sl, r8
  40d4b4:	d2ea      	bcs.n	40d48c <__udivmoddi4+0x284>
  40d4b6:	ebb8 0e02 	subs.w	lr, r8, r2
  40d4ba:	eb69 0503 	sbc.w	r5, r9, r3
  40d4be:	3801      	subs	r0, #1
  40d4c0:	e7e4      	b.n	40d48c <__udivmoddi4+0x284>
  40d4c2:	4628      	mov	r0, r5
  40d4c4:	e7d7      	b.n	40d476 <__udivmoddi4+0x26e>
  40d4c6:	4640      	mov	r0, r8
  40d4c8:	e791      	b.n	40d3ee <__udivmoddi4+0x1e6>
  40d4ca:	4681      	mov	r9, r0
  40d4cc:	e7be      	b.n	40d44c <__udivmoddi4+0x244>
  40d4ce:	4601      	mov	r1, r0
  40d4d0:	e778      	b.n	40d3c4 <__udivmoddi4+0x1bc>
  40d4d2:	3802      	subs	r0, #2
  40d4d4:	443c      	add	r4, r7
  40d4d6:	e745      	b.n	40d364 <__udivmoddi4+0x15c>
  40d4d8:	4608      	mov	r0, r1
  40d4da:	e708      	b.n	40d2ee <__udivmoddi4+0xe6>
  40d4dc:	f1a8 0802 	sub.w	r8, r8, #2
  40d4e0:	443d      	add	r5, r7
  40d4e2:	e72b      	b.n	40d33c <__udivmoddi4+0x134>

0040d4e4 <__aeabi_idiv0>:
  40d4e4:	4770      	bx	lr
  40d4e6:	bf00      	nop
  40d4e8:	002f3a30 	.word	0x002f3a30

0040d4ec <file_name_cal>:
  40d4ec:	61633a30 7262696c 6f697461 6e692e6e     0:calibration.in
  40d4fc:	00000069                                i...

0040d500 <file_name_conf>:
  40d500:	6f633a30 6769666e 696e692e 00000000     0:config.ini....
  40d510:	65776f50 654d2072 20726574 00003256     Power Meter V2..
  40d520:	28207325 6a6f7250 20746365 303d4449     %s (Project ID=0
  40d530:	32302578 000a2978 204d5241 76205746     x%02x)..ARM FW v
  40d540:	69737265 3d206e6f 2e642520 000a6425     ersion = %d.%d..
  40d550:	20505344 76205746 69737265 3d206e6f     DSP FW version =
  40d560:	2e642520 000a6425 61636f4c 6e6f6974      %d.%d..Location
  40d570:	6d616e20 203d2065 656e6f6e 0000000a      name = none....
  40d580:	69766544 6e206563 20656d61 6f6e203d     Device name = no
  40d590:	000a656e 65746f4e 3d20315f 6e6f6e20     ne..Note_1 = non
  40d5a0:	00000a65 65746f4e 3d20325f 6e6f6e20     e...Note_2 = non
  40d5b0:	00000a65 65776f50 6f632072 6769666e     e...Power config
  40d5c0:	74617275 206e6f69 7957203d 74532f65     uration = Wye/St
  40d5d0:	000a7261 696d6f4e 206c616e 656e694c     ar..Nominal Line
  40d5e0:	2d6f742d 656e694c 6c6f5620 65676174     -to-Line Voltage
  40d5f0:	33203d20 0a563038 00000000 696d6f4e      = 380V.....Nomi
  40d600:	206c616e 656e694c 2d6f742d 7475654e     nal Line-to-Neut
  40d610:	206c6172 746c6f56 20656761 3232203d     ral Voltage = 22
  40d620:	0a0a5630 00000000 252e6425 00643330     0V......%d.%03d.
  40d630:	2e64252c 64333025 00000000 6174530a     ,%d.%03d.....Sta
  40d640:	69207472 7865646e 25203d20 00000a64     rt index = %d...
  40d650:	706f7453 646e6920 3d207865 0a642520     Stop index = %d.
  40d660:	00000000 66667542 64207265 64697669     ....Buffer divid
  40d670:	0a0a6465 00000000 66667542 6e207265     ed......Buffer n
  40d680:	6420746f 64697669 0a0a6465 00000000     ot divided......
  40d690:	6e756f43 2c726574 565b3156 32562c5d     Counter,V1[V],V2
  40d6a0:	2c5d565b 565b3356 45562c5d 2c5d565b     [V],V3[V],VE[V],
  40d6b0:	415b3149 32492c5d 2c5d415b 415b3349     I1[A],I2[A],I3[A
  40d6c0:	4e492c5d 0a5d415b 00000000 002c6425     ],IN[A].....%d,.
  40d6d0:	252e6425 2c643230 00000000 43494c2f     %d.%02d,..../LIC
  40d6e0:	5f324d50 5f643425 64323025 3230255f     PM2_%4d_%02d_%02
  40d6f0:	76455f64 5f746e65 64323025 3230255f     d_Event_%02d_%02
  40d700:	30255f64 742e6432 00007478 6e657645     d_%02d.txt..Even
  40d710:	61772074 6f666576 000a6d72 4f203156     t waveform..V1 O
  40d720:	20726576 746c6f76 00656761 4f203256     ver voltage.V2 O
  40d730:	20726576 746c6f76 00656761 4f203356     ver voltage.V3 O
  40d740:	20726576 746c6f76 00656761 55203156     ver voltage.V1 U
  40d750:	7265646e 6c6f7620 65676174 00000000     nder voltage....
  40d760:	55203256 7265646e 6c6f7620 65676174     V2 Under voltage
  40d770:	00000000 55203356 7265646e 6c6f7620     ....V3 Under vol
  40d780:	65676174 00000000 4f203149 20726576     tage....I1 Over 
  40d790:	72727563 00746e65 4f203249 20726576     current.I2 Over 
  40d7a0:	72727563 00746e65 4f203349 20726576     current.I3 Over 
  40d7b0:	72727563 00746e65 65646e55 72662072     current.Under fr
  40d7c0:	65757165 0079636e 7265764f 65726620     equency.Over fre
  40d7d0:	6e657571 00007963 6e6b6e55 006e776f     quency..Unknown.
  40d7e0:	7275440a 6f697461 203d206e 252e6425     .Duration = %d.%
  40d7f0:	20643330 00636573 6c6f560a 65676174     03d sec..Voltage
  40d800:	78614d20 00203d20 560a5620 61746c6f      Max = . V.Volta
  40d810:	4d206567 3d206e69 00000020 430a5620     ge Min = ... V.C
  40d820:	65727275 4d20746e 3d207861 00000020     urrent Max = ...
  40d830:	000a4120 67697254 20726567 65746144      A..Trigger Date
  40d840:	25203d20 252f6434 2f643230 64323025      = %4d/%02d/%02d
  40d850:	0000000a 67697254 20726567 656d6954     ....Trigger Time
  40d860:	25203d20 3a643230 64323025 3230253a      = %02d:%02d:%02
  40d870:	00000a64 43494c2f 5f324d50 5f643425     d.../LICPM2_%4d_
  40d880:	64323025 3230255f 6f6c5f64 78742e67     %02d_%02d_log.tx
  40d890:	00000074 64323025 3230253a 30253a64     t...%02d:%02d:%0
  40d8a0:	00206432 36313025 00002062 62383025     2d .%016b ..%08b
  40d8b0:	00000a20 00643425 6e6f4d2f 255f6874      ...%4d./Month_%
  40d8c0:	00643230 7961442f 3230255f 00000064     02d./Day_%02d...
  40d8d0:	43494c2f 5f324d50 5f643425 64323025     /LICPM2_%4d_%02d
  40d8e0:	3230255f 61445f64 54796c69 646e6572     _%02d_DailyTrend
  40d8f0:	2e73335f 00747874 43494c2f 5f324d50     _3s.txt./LICPM2_
  40d900:	5f643425 64323025 3230255f 61445f64     %4d_%02d_%02d_Da
  40d910:	54796c69 646e6572 2e6d355f 00747874     ilyTrend_5m.txt.
  40d920:	6c696144 72542079 0a646e65 00000000     Daily Trend.....
  40d930:	65707954 00203d20 65732033 646e6f63     Type = .3 second
  40d940:	00000073 696d2035 6574756e 00000073     s...5 minutes...
  40d950:	7461440a 203d2065 2f643425 64323025     .Date = %4d/%02d
  40d960:	3230252f 000a0a64 5f4d5241 656d6974     /%02d...ARM_time
  40d970:	5053442c 6d69745f 6c662c65 2c736761     ,DSP_time,flags,
  40d980:	656d6974 6974755f 617a696c 6e6f6974     time_utilization
  40d990:	5f73542c 615f7375 542c6776 73755f73     ,Ts_us_avg,Ts_us
  40d9a0:	78616d5f 5f73542c 6d5f7375 662c6e69     _max,Ts_us_min,f
  40d9b0:	7a485f4c 6776615f 5f4c662c 6d5f7a48     L_Hz_avg,fL_Hz_m
  40d9c0:	662c7861 7a485f4c 6e696d5f 5f31562c     ax,fL_Hz_min,V1_
  40d9d0:	5f534d52 2c677661 525f3156 6d5f534d     RMS_avg,V1_RMS_m
  40d9e0:	562c7861 4d525f31 696d5f53 31562c6e     ax,V1_RMS_min,V1
  40d9f0:	6d5f3048 615f646f 562c6776 5f304831     H0_mod_avg,V1H0_
  40da00:	5f646f6d 2c78616d 30483156 646f6d5f     mod_max,V1H0_mod
  40da10:	6e696d5f 4831562c 6e615f30 5f656c67     _min,V1H0_angle_
  40da20:	2c677661 30483156 676e615f 6d5f656c     avg,V1H0_angle_m
  40da30:	562c7861 5f304831 6c676e61 696d5f65     ax,V1H0_angle_mi
  40da40:	31562c6e 6d5f3148 615f646f 562c6776     n,V1H1_mod_avg,V
  40da50:	5f314831 5f646f6d 2c78616d 31483156     1H1_mod_max,V1H1
  40da60:	646f6d5f 6e696d5f 4831562c 6e615f31     _mod_min,V1H1_an
  40da70:	5f656c67 2c677661 31483156 676e615f     gle_avg,V1H1_ang
  40da80:	6d5f656c 562c7861 5f314831 6c676e61     le_max,V1H1_angl
  40da90:	696d5f65 31562c6e 6d5f3348 615f646f     e_min,V1H3_mod_a
  40daa0:	562c6776 5f334831 5f646f6d 2c78616d     vg,V1H3_mod_max,
  40dab0:	33483156 646f6d5f 6e696d5f 4831562c     V1H3_mod_min,V1H
  40dac0:	6e615f33 5f656c67 2c677661 33483156     3_angle_avg,V1H3
  40dad0:	676e615f 6d5f656c 562c7861 5f334831     _angle_max,V1H3_
  40dae0:	6c676e61 696d5f65 31562c6e 6d5f3548     angle_min,V1H5_m
  40daf0:	615f646f 562c6776 5f354831 5f646f6d     od_avg,V1H5_mod_
  40db00:	2c78616d 35483156 646f6d5f 6e696d5f     max,V1H5_mod_min
  40db10:	4831562c 6e615f35 5f656c67 2c677661     ,V1H5_angle_avg,
  40db20:	35483156 676e615f 6d5f656c 562c7861     V1H5_angle_max,V
  40db30:	5f354831 6c676e61 696d5f65 31562c6e     1H5_angle_min,V1
  40db40:	6d5f3748 615f646f 562c6776 5f374831     H7_mod_avg,V1H7_
  40db50:	5f646f6d 2c78616d 37483156 646f6d5f     mod_max,V1H7_mod
  40db60:	6e696d5f 4831562c 6e615f37 5f656c67     _min,V1H7_angle_
  40db70:	2c677661 37483156 676e615f 6d5f656c     avg,V1H7_angle_m
  40db80:	562c7861 5f374831 6c676e61 696d5f65     ax,V1H7_angle_mi
  40db90:	31562c6e 4457545f 6776615f 5f31562c     n,V1_TWD_avg,V1_
  40dba0:	5f445754 2c78616d 545f3156 6d5f4457     TWD_max,V1_TWD_m
  40dbb0:	562c6e69 4d525f32 76615f53 32562c67     in,V2_RMS_avg,V2
  40dbc0:	534d525f 78616d5f 5f32562c 5f534d52     _RMS_max,V2_RMS_
  40dbd0:	2c6e696d 30483256 646f6d5f 6776615f     min,V2H0_mod_avg
  40dbe0:	4832562c 6f6d5f30 616d5f64 32562c78     ,V2H0_mod_max,V2
  40dbf0:	6d5f3048 6d5f646f 562c6e69 5f304832     H0_mod_min,V2H0_
  40dc00:	6c676e61 76615f65 32562c67 615f3048     angle_avg,V2H0_a
  40dc10:	656c676e 78616d5f 4832562c 6e615f30     ngle_max,V2H0_an
  40dc20:	5f656c67 2c6e696d 31483256 646f6d5f     gle_min,V2H1_mod
  40dc30:	6776615f 4832562c 6f6d5f31 616d5f64     _avg,V2H1_mod_ma
  40dc40:	32562c78 6d5f3148 6d5f646f 562c6e69     x,V2H1_mod_min,V
  40dc50:	5f314832 6c676e61 76615f65 32562c67     2H1_angle_avg,V2
  40dc60:	615f3148 656c676e 78616d5f 4832562c     H1_angle_max,V2H
  40dc70:	6e615f31 5f656c67 2c6e696d 33483256     1_angle_min,V2H3
  40dc80:	646f6d5f 6776615f 4832562c 6f6d5f33     _mod_avg,V2H3_mo
  40dc90:	616d5f64 32562c78 6d5f3348 6d5f646f     d_max,V2H3_mod_m
  40dca0:	562c6e69 5f334832 6c676e61 76615f65     in,V2H3_angle_av
  40dcb0:	32562c67 615f3348 656c676e 78616d5f     g,V2H3_angle_max
  40dcc0:	4832562c 6e615f33 5f656c67 2c6e696d     ,V2H3_angle_min,
  40dcd0:	35483256 646f6d5f 6776615f 4832562c     V2H5_mod_avg,V2H
  40dce0:	6f6d5f35 616d5f64 32562c78 6d5f3548     5_mod_max,V2H5_m
  40dcf0:	6d5f646f 562c6e69 5f354832 6c676e61     od_min,V2H5_angl
  40dd00:	76615f65 32562c67 615f3548 656c676e     e_avg,V2H5_angle
  40dd10:	78616d5f 4832562c 6e615f35 5f656c67     _max,V2H5_angle_
  40dd20:	2c6e696d 37483256 646f6d5f 6776615f     min,V2H7_mod_avg
  40dd30:	4832562c 6f6d5f37 616d5f64 32562c78     ,V2H7_mod_max,V2
  40dd40:	6d5f3748 6d5f646f 562c6e69 5f374832     H7_mod_min,V2H7_
  40dd50:	6c676e61 76615f65 32562c67 615f3748     angle_avg,V2H7_a
  40dd60:	656c676e 78616d5f 4832562c 6e615f37     ngle_max,V2H7_an
  40dd70:	5f656c67 2c6e696d 545f3256 615f4457     gle_min,V2_TWD_a
  40dd80:	562c6776 57545f32 616d5f44 32562c78     vg,V2_TWD_max,V2
  40dd90:	4457545f 6e696d5f 5f33562c 5f534d52     _TWD_min,V3_RMS_
  40dda0:	2c677661 525f3356 6d5f534d 562c7861     avg,V3_RMS_max,V
  40ddb0:	4d525f33 696d5f53 33562c6e 6d5f3048     3_RMS_min,V3H0_m
  40ddc0:	615f646f 562c6776 5f304833 5f646f6d     od_avg,V3H0_mod_
  40ddd0:	2c78616d 30483356 646f6d5f 6e696d5f     max,V3H0_mod_min
  40dde0:	4833562c 6e615f30 5f656c67 2c677661     ,V3H0_angle_avg,
  40ddf0:	30483356 676e615f 6d5f656c 562c7861     V3H0_angle_max,V
  40de00:	5f304833 6c676e61 696d5f65 33562c6e     3H0_angle_min,V3
  40de10:	6d5f3148 615f646f 562c6776 5f314833     H1_mod_avg,V3H1_
  40de20:	5f646f6d 2c78616d 31483356 646f6d5f     mod_max,V3H1_mod
  40de30:	6e696d5f 4833562c 6e615f31 5f656c67     _min,V3H1_angle_
  40de40:	2c677661 31483356 676e615f 6d5f656c     avg,V3H1_angle_m
  40de50:	562c7861 5f314833 6c676e61 696d5f65     ax,V3H1_angle_mi
  40de60:	33562c6e 6d5f3348 615f646f 562c6776     n,V3H3_mod_avg,V
  40de70:	5f334833 5f646f6d 2c78616d 33483356     3H3_mod_max,V3H3
  40de80:	646f6d5f 6e696d5f 4833562c 6e615f33     _mod_min,V3H3_an
  40de90:	5f656c67 2c677661 33483356 676e615f     gle_avg,V3H3_ang
  40dea0:	6d5f656c 562c7861 5f334833 6c676e61     le_max,V3H3_angl
  40deb0:	696d5f65 33562c6e 6d5f3548 615f646f     e_min,V3H5_mod_a
  40dec0:	562c6776 5f354833 5f646f6d 2c78616d     vg,V3H5_mod_max,
  40ded0:	35483356 646f6d5f 6e696d5f 4833562c     V3H5_mod_min,V3H
  40dee0:	6e615f35 5f656c67 2c677661 35483356     5_angle_avg,V3H5
  40def0:	676e615f 6d5f656c 562c7861 5f354833     _angle_max,V3H5_
  40df00:	6c676e61 696d5f65 33562c6e 6d5f3748     angle_min,V3H7_m
  40df10:	615f646f 562c6776 5f374833 5f646f6d     od_avg,V3H7_mod_
  40df20:	2c78616d 37483356 646f6d5f 6e696d5f     max,V3H7_mod_min
  40df30:	4833562c 6e615f37 5f656c67 2c677661     ,V3H7_angle_avg,
  40df40:	37483356 676e615f 6d5f656c 562c7861     V3H7_angle_max,V
  40df50:	5f374833 6c676e61 696d5f65 33562c6e     3H7_angle_min,V3
  40df60:	4457545f 6776615f 5f33562c 5f445754     _TWD_avg,V3_TWD_
  40df70:	2c78616d 545f3356 6d5f4457 562c6e69     max,V3_TWD_min,V
  40df80:	4d525f45 76615f53 45562c67 534d525f     E_RMS_avg,VE_RMS
  40df90:	78616d5f 5f45562c 5f534d52 2c6e696d     _max,VE_RMS_min,
  40dfa0:	30484556 646f6d5f 6776615f 4845562c     VEH0_mod_avg,VEH
  40dfb0:	6f6d5f30 616d5f64 45562c78 6d5f3048     0_mod_max,VEH0_m
  40dfc0:	6d5f646f 562c6e69 5f304845 6c676e61     od_min,VEH0_angl
  40dfd0:	76615f65 45562c67 615f3048 656c676e     e_avg,VEH0_angle
  40dfe0:	78616d5f 4845562c 6e615f30 5f656c67     _max,VEH0_angle_
  40dff0:	2c6e696d 31484556 646f6d5f 6776615f     min,VEH1_mod_avg
  40e000:	4845562c 6f6d5f31 616d5f64 45562c78     ,VEH1_mod_max,VE
  40e010:	6d5f3148 6d5f646f 562c6e69 5f314845     H1_mod_min,VEH1_
  40e020:	6c676e61 76615f65 45562c67 615f3148     angle_avg,VEH1_a
  40e030:	656c676e 78616d5f 4845562c 6e615f31     ngle_max,VEH1_an
  40e040:	5f656c67 2c6e696d 33484556 646f6d5f     gle_min,VEH3_mod
  40e050:	6776615f 4845562c 6f6d5f33 616d5f64     _avg,VEH3_mod_ma
  40e060:	45562c78 6d5f3348 6d5f646f 562c6e69     x,VEH3_mod_min,V
  40e070:	5f334845 6c676e61 76615f65 45562c67     EH3_angle_avg,VE
  40e080:	615f3348 656c676e 78616d5f 4845562c     H3_angle_max,VEH
  40e090:	6e615f33 5f656c67 2c6e696d 35484556     3_angle_min,VEH5
  40e0a0:	646f6d5f 6776615f 4845562c 6f6d5f35     _mod_avg,VEH5_mo
  40e0b0:	616d5f64 45562c78 6d5f3548 6d5f646f     d_max,VEH5_mod_m
  40e0c0:	562c6e69 5f354845 6c676e61 76615f65     in,VEH5_angle_av
  40e0d0:	45562c67 615f3548 656c676e 78616d5f     g,VEH5_angle_max
  40e0e0:	4845562c 6e615f35 5f656c67 2c6e696d     ,VEH5_angle_min,
  40e0f0:	37484556 646f6d5f 6776615f 4845562c     VEH7_mod_avg,VEH
  40e100:	6f6d5f37 616d5f64 45562c78 6d5f3748     7_mod_max,VEH7_m
  40e110:	6d5f646f 562c6e69 5f374845 6c676e61     od_min,VEH7_angl
  40e120:	76615f65 45562c67 615f3748 656c676e     e_avg,VEH7_angle
  40e130:	78616d5f 4845562c 6e615f37 5f656c67     _max,VEH7_angle_
  40e140:	2c6e696d 545f4556 615f4457 562c6776     min,VE_TWD_avg,V
  40e150:	57545f45 616d5f44 45562c78 4457545f     E_TWD_max,VE_TWD
  40e160:	6e696d5f 5f31492c 5f534d52 2c677661     _min,I1_RMS_avg,
  40e170:	525f3149 6d5f534d 492c7861 4d525f31     I1_RMS_max,I1_RM
  40e180:	696d5f53 31492c6e 6d5f3048 615f646f     S_min,I1H0_mod_a
  40e190:	492c6776 5f304831 5f646f6d 2c78616d     vg,I1H0_mod_max,
  40e1a0:	30483149 646f6d5f 6e696d5f 4831492c     I1H0_mod_min,I1H
  40e1b0:	6e615f30 5f656c67 2c677661 30483149     0_angle_avg,I1H0
  40e1c0:	676e615f 6d5f656c 492c7861 5f304831     _angle_max,I1H0_
  40e1d0:	6c676e61 696d5f65 31492c6e 6d5f3148     angle_min,I1H1_m
  40e1e0:	615f646f 492c6776 5f314831 5f646f6d     od_avg,I1H1_mod_
  40e1f0:	2c78616d 31483149 646f6d5f 6e696d5f     max,I1H1_mod_min
  40e200:	4831492c 6e615f31 5f656c67 2c677661     ,I1H1_angle_avg,
  40e210:	31483149 676e615f 6d5f656c 492c7861     I1H1_angle_max,I
  40e220:	5f314831 6c676e61 696d5f65 31492c6e     1H1_angle_min,I1
  40e230:	6d5f3348 615f646f 492c6776 5f334831     H3_mod_avg,I1H3_
  40e240:	5f646f6d 2c78616d 33483149 646f6d5f     mod_max,I1H3_mod
  40e250:	6e696d5f 4831492c 6e615f33 5f656c67     _min,I1H3_angle_
  40e260:	2c677661 33483149 676e615f 6d5f656c     avg,I1H3_angle_m
  40e270:	492c7861 5f334831 6c676e61 696d5f65     ax,I1H3_angle_mi
  40e280:	31492c6e 6d5f3548 615f646f 492c6776     n,I1H5_mod_avg,I
  40e290:	5f354831 5f646f6d 2c78616d 35483149     1H5_mod_max,I1H5
  40e2a0:	646f6d5f 6e696d5f 4831492c 6e615f35     _mod_min,I1H5_an
  40e2b0:	5f656c67 2c677661 35483149 676e615f     gle_avg,I1H5_ang
  40e2c0:	6d5f656c 492c7861 5f354831 6c676e61     le_max,I1H5_angl
  40e2d0:	696d5f65 31492c6e 6d5f3748 615f646f     e_min,I1H7_mod_a
  40e2e0:	492c6776 5f374831 5f646f6d 2c78616d     vg,I1H7_mod_max,
  40e2f0:	37483149 646f6d5f 6e696d5f 4831492c     I1H7_mod_min,I1H
  40e300:	6e615f37 5f656c67 2c677661 37483149     7_angle_avg,I1H7
  40e310:	676e615f 6d5f656c 492c7861 5f374831     _angle_max,I1H7_
  40e320:	6c676e61 696d5f65 31492c6e 4457545f     angle_min,I1_TWD
  40e330:	6776615f 5f31492c 5f445754 2c78616d     _avg,I1_TWD_max,
  40e340:	545f3149 6d5f4457 492c6e69 4d525f32     I1_TWD_min,I2_RM
  40e350:	76615f53 32492c67 534d525f 78616d5f     S_avg,I2_RMS_max
  40e360:	5f32492c 5f534d52 2c6e696d 30483249     ,I2_RMS_min,I2H0
  40e370:	646f6d5f 6776615f 4832492c 6f6d5f30     _mod_avg,I2H0_mo
  40e380:	616d5f64 32492c78 6d5f3048 6d5f646f     d_max,I2H0_mod_m
  40e390:	492c6e69 5f304832 6c676e61 76615f65     in,I2H0_angle_av
  40e3a0:	32492c67 615f3048 656c676e 78616d5f     g,I2H0_angle_max
  40e3b0:	4832492c 6e615f30 5f656c67 2c6e696d     ,I2H0_angle_min,
  40e3c0:	31483249 646f6d5f 6776615f 4832492c     I2H1_mod_avg,I2H
  40e3d0:	6f6d5f31 616d5f64 32492c78 6d5f3148     1_mod_max,I2H1_m
  40e3e0:	6d5f646f 492c6e69 5f314832 6c676e61     od_min,I2H1_angl
  40e3f0:	76615f65 32492c67 615f3148 656c676e     e_avg,I2H1_angle
  40e400:	78616d5f 4832492c 6e615f31 5f656c67     _max,I2H1_angle_
  40e410:	2c6e696d 33483249 646f6d5f 6776615f     min,I2H3_mod_avg
  40e420:	4832492c 6f6d5f33 616d5f64 32492c78     ,I2H3_mod_max,I2
  40e430:	6d5f3348 6d5f646f 492c6e69 5f334832     H3_mod_min,I2H3_
  40e440:	6c676e61 76615f65 32492c67 615f3348     angle_avg,I2H3_a
  40e450:	656c676e 78616d5f 4832492c 6e615f33     ngle_max,I2H3_an
  40e460:	5f656c67 2c6e696d 35483249 646f6d5f     gle_min,I2H5_mod
  40e470:	6776615f 4832492c 6f6d5f35 616d5f64     _avg,I2H5_mod_ma
  40e480:	32492c78 6d5f3548 6d5f646f 492c6e69     x,I2H5_mod_min,I
  40e490:	5f354832 6c676e61 76615f65 32492c67     2H5_angle_avg,I2
  40e4a0:	615f3548 656c676e 78616d5f 4832492c     H5_angle_max,I2H
  40e4b0:	6e615f35 5f656c67 2c6e696d 37483249     5_angle_min,I2H7
  40e4c0:	646f6d5f 6776615f 4832492c 6f6d5f37     _mod_avg,I2H7_mo
  40e4d0:	616d5f64 32492c78 6d5f3748 6d5f646f     d_max,I2H7_mod_m
  40e4e0:	492c6e69 5f374832 6c676e61 76615f65     in,I2H7_angle_av
  40e4f0:	32492c67 615f3748 656c676e 78616d5f     g,I2H7_angle_max
  40e500:	4832492c 6e615f37 5f656c67 2c6e696d     ,I2H7_angle_min,
  40e510:	545f3249 615f4457 492c6776 57545f32     I2_TWD_avg,I2_TW
  40e520:	616d5f44 32492c78 4457545f 6e696d5f     D_max,I2_TWD_min
  40e530:	5f33492c 5f534d52 2c677661 525f3349     ,I3_RMS_avg,I3_R
  40e540:	6d5f534d 492c7861 4d525f33 696d5f53     MS_max,I3_RMS_mi
  40e550:	33492c6e 6d5f3048 615f646f 492c6776     n,I3H0_mod_avg,I
  40e560:	5f304833 5f646f6d 2c78616d 30483349     3H0_mod_max,I3H0
  40e570:	646f6d5f 6e696d5f 4833492c 6e615f30     _mod_min,I3H0_an
  40e580:	5f656c67 2c677661 30483349 676e615f     gle_avg,I3H0_ang
  40e590:	6d5f656c 492c7861 5f304833 6c676e61     le_max,I3H0_angl
  40e5a0:	696d5f65 33492c6e 6d5f3148 615f646f     e_min,I3H1_mod_a
  40e5b0:	492c6776 5f314833 5f646f6d 2c78616d     vg,I3H1_mod_max,
  40e5c0:	31483349 646f6d5f 6e696d5f 4833492c     I3H1_mod_min,I3H
  40e5d0:	6e615f31 5f656c67 2c677661 31483349     1_angle_avg,I3H1
  40e5e0:	676e615f 6d5f656c 492c7861 5f314833     _angle_max,I3H1_
  40e5f0:	6c676e61 696d5f65 33492c6e 6d5f3348     angle_min,I3H3_m
  40e600:	615f646f 492c6776 5f334833 5f646f6d     od_avg,I3H3_mod_
  40e610:	2c78616d 33483349 646f6d5f 6e696d5f     max,I3H3_mod_min
  40e620:	4833492c 6e615f33 5f656c67 2c677661     ,I3H3_angle_avg,
  40e630:	33483349 676e615f 6d5f656c 492c7861     I3H3_angle_max,I
  40e640:	5f334833 6c676e61 696d5f65 33492c6e     3H3_angle_min,I3
  40e650:	6d5f3548 615f646f 492c6776 5f354833     H5_mod_avg,I3H5_
  40e660:	5f646f6d 2c78616d 35483349 646f6d5f     mod_max,I3H5_mod
  40e670:	6e696d5f 4833492c 6e615f35 5f656c67     _min,I3H5_angle_
  40e680:	2c677661 35483349 676e615f 6d5f656c     avg,I3H5_angle_m
  40e690:	492c7861 5f354833 6c676e61 696d5f65     ax,I3H5_angle_mi
  40e6a0:	33492c6e 6d5f3748 615f646f 492c6776     n,I3H7_mod_avg,I
  40e6b0:	5f374833 5f646f6d 2c78616d 37483349     3H7_mod_max,I3H7
  40e6c0:	646f6d5f 6e696d5f 4833492c 6e615f37     _mod_min,I3H7_an
  40e6d0:	5f656c67 2c677661 37483349 676e615f     gle_avg,I3H7_ang
  40e6e0:	6d5f656c 492c7861 5f374833 6c676e61     le_max,I3H7_angl
  40e6f0:	696d5f65 33492c6e 4457545f 6776615f     e_min,I3_TWD_avg
  40e700:	5f33492c 5f445754 2c78616d 545f3349     ,I3_TWD_max,I3_T
  40e710:	6d5f4457 492c6e69 4d525f4e 76615f53     WD_min,IN_RMS_av
  40e720:	4e492c67 534d525f 78616d5f 5f4e492c     g,IN_RMS_max,IN_
  40e730:	5f534d52 2c6e696d 30484e49 646f6d5f     RMS_min,INH0_mod
  40e740:	6776615f 484e492c 6f6d5f30 616d5f64     _avg,INH0_mod_ma
  40e750:	4e492c78 6d5f3048 6d5f646f 492c6e69     x,INH0_mod_min,I
  40e760:	5f30484e 6c676e61 76615f65 4e492c67     NH0_angle_avg,IN
  40e770:	615f3048 656c676e 78616d5f 484e492c     H0_angle_max,INH
  40e780:	6e615f30 5f656c67 2c6e696d 31484e49     0_angle_min,INH1
  40e790:	646f6d5f 6776615f 484e492c 6f6d5f31     _mod_avg,INH1_mo
  40e7a0:	616d5f64 4e492c78 6d5f3148 6d5f646f     d_max,INH1_mod_m
  40e7b0:	492c6e69 5f31484e 6c676e61 76615f65     in,INH1_angle_av
  40e7c0:	4e492c67 615f3148 656c676e 78616d5f     g,INH1_angle_max
  40e7d0:	484e492c 6e615f31 5f656c67 2c6e696d     ,INH1_angle_min,
  40e7e0:	33484e49 646f6d5f 6776615f 484e492c     INH3_mod_avg,INH
  40e7f0:	6f6d5f33 616d5f64 4e492c78 6d5f3348     3_mod_max,INH3_m
  40e800:	6d5f646f 492c6e69 5f33484e 6c676e61     od_min,INH3_angl
  40e810:	76615f65 4e492c67 615f3348 656c676e     e_avg,INH3_angle
  40e820:	78616d5f 484e492c 6e615f33 5f656c67     _max,INH3_angle_
  40e830:	2c6e696d 35484e49 646f6d5f 6776615f     min,INH5_mod_avg
  40e840:	484e492c 6f6d5f35 616d5f64 4e492c78     ,INH5_mod_max,IN
  40e850:	6d5f3548 6d5f646f 492c6e69 5f35484e     H5_mod_min,INH5_
  40e860:	6c676e61 76615f65 4e492c67 615f3548     angle_avg,INH5_a
  40e870:	656c676e 78616d5f 484e492c 6e615f35     ngle_max,INH5_an
  40e880:	5f656c67 2c6e696d 37484e49 646f6d5f     gle_min,INH7_mod
  40e890:	6776615f 484e492c 6f6d5f37 616d5f64     _avg,INH7_mod_ma
  40e8a0:	4e492c78 6d5f3748 6d5f646f 492c6e69     x,INH7_mod_min,I
  40e8b0:	5f37484e 6c676e61 76615f65 4e492c67     NH7_angle_avg,IN
  40e8c0:	615f3748 656c676e 78616d5f 484e492c     H7_angle_max,INH
  40e8d0:	6e615f37 5f656c67 2c6e696d 545f4e49     7_angle_min,IN_T
  40e8e0:	615f4457 492c6776 57545f4e 616d5f44     WD_avg,IN_TWD_ma
  40e8f0:	4e492c78 4457545f 6e696d5f 4f50562c     x,IN_TWD_min,VPO
  40e900:	6f6d5f53 76615f64 50562c67 6d5f534f     S_mod_avg,VPOS_m
  40e910:	6d5f646f 562c7861 5f534f50 5f646f6d     od_max,VPOS_mod_
  40e920:	2c6e696d 534f5056 676e615f 615f656c     min,VPOS_angle_a
  40e930:	562c6776 5f534f50 6c676e61 616d5f65     vg,VPOS_angle_ma
  40e940:	50562c78 615f534f 656c676e 6e696d5f     x,VPOS_angle_min
  40e950:	454e562c 6f6d5f47 76615f64 4e562c67     ,VNEG_mod_avg,VN
  40e960:	6d5f4745 6d5f646f 562c7861 5f47454e     EG_mod_max,VNEG_
  40e970:	5f646f6d 2c6e696d 47454e56 676e615f     mod_min,VNEG_ang
  40e980:	615f656c 562c6776 5f47454e 6c676e61     le_avg,VNEG_angl
  40e990:	616d5f65 4e562c78 615f4745 656c676e     e_max,VNEG_angle
  40e9a0:	6e696d5f 4f48562c 6f6d5f4d 76615f64     _min,VHOM_mod_av
  40e9b0:	48562c67 6d5f4d4f 6d5f646f 562c7861     g,VHOM_mod_max,V
  40e9c0:	5f4d4f48 5f646f6d 2c6e696d 4d4f4856     HOM_mod_min,VHOM
  40e9d0:	676e615f 615f656c 562c6776 5f4d4f48     _angle_avg,VHOM_
  40e9e0:	6c676e61 616d5f65 48562c78 615f4d4f     angle_max,VHOM_a
  40e9f0:	656c676e 6e696d5f 4f50492c 6f6d5f53     ngle_min,IPOS_mo
  40ea00:	76615f64 50492c67 6d5f534f 6d5f646f     d_avg,IPOS_mod_m
  40ea10:	492c7861 5f534f50 5f646f6d 2c6e696d     ax,IPOS_mod_min,
  40ea20:	534f5049 676e615f 615f656c 492c6776     IPOS_angle_avg,I
  40ea30:	5f534f50 6c676e61 616d5f65 50492c78     POS_angle_max,IP
  40ea40:	615f534f 656c676e 6e696d5f 454e492c     OS_angle_min,INE
  40ea50:	6f6d5f47 76615f64 4e492c67 6d5f4745     G_mod_avg,INEG_m
  40ea60:	6d5f646f 492c7861 5f47454e 5f646f6d     od_max,INEG_mod_
  40ea70:	2c6e696d 47454e49 676e615f 615f656c     min,INEG_angle_a
  40ea80:	492c6776 5f47454e 6c676e61 616d5f65     vg,INEG_angle_ma
  40ea90:	4e492c78 615f4745 656c676e 6e696d5f     x,INEG_angle_min
  40eaa0:	4f48492c 6f6d5f4d 76615f64 48492c67     ,IHOM_mod_avg,IH
  40eab0:	6d5f4d4f 6d5f646f 492c7861 5f4d4f48     OM_mod_max,IHOM_
  40eac0:	5f646f6d 2c6e696d 4d4f4849 676e615f     mod_min,IHOM_ang
  40ead0:	615f656c 492c6776 5f4d4f48 6c676e61     le_avg,IHOM_angl
  40eae0:	616d5f65 48492c78 615f4d4f 656c676e     e_max,IHOM_angle
  40eaf0:	6e696d5f 5345442c 47454e5f 6776615f     _min,DES_NEG_avg
  40eb00:	5345442c 47454e5f 78616d5f 5345442c     ,DES_NEG_max,DES
  40eb10:	47454e5f 6e696d5f 5345442c 4d4f485f     _NEG_min,DES_HOM
  40eb20:	6776615f 5345442c 4d4f485f 78616d5f     _avg,DES_HOM_max
  40eb30:	5345442c 4d4f485f 6e696d5f 5f31502c     ,DES_HOM_min,P1_
  40eb40:	41505041 544e4552 6776615f 5f31502c     APPARENT_avg,P1_
  40eb50:	41505041 544e4552 78616d5f 5f31502c     APPARENT_max,P1_
  40eb60:	41505041 544e4552 6e696d5f 5f31502c     APPARENT_min,P1_
  40eb70:	49544341 615f4556 502c6776 43415f31     ACTIVE_avg,P1_AC
  40eb80:	45564954 78616d5f 5f31502c 49544341     TIVE_max,P1_ACTI
  40eb90:	6d5f4556 502c6e69 4f4e5f31 49544341     VE_min,P1_NOACTI
  40eba0:	615f4556 502c6776 4f4e5f31 49544341     VE_avg,P1_NOACTI
  40ebb0:	6d5f4556 502c7861 4f4e5f31 49544341     VE_max,P1_NOACTI
  40ebc0:	6d5f4556 502c6e69 46505f31 6776615f     VE_min,P1_PF_avg
  40ebd0:	5f31502c 6d5f4650 502c7861 46505f31     ,P1_PF_max,P1_PF
  40ebe0:	646f6d5f 6e696d5f 5f32502c 41505041     _mod_min,P2_APPA
  40ebf0:	544e4552 6776615f 5f32502c 41505041     RENT_avg,P2_APPA
  40ec00:	544e4552 78616d5f 5f32502c 41505041     RENT_max,P2_APPA
  40ec10:	544e4552 6e696d5f 5f32502c 49544341     RENT_min,P2_ACTI
  40ec20:	615f4556 502c6776 43415f32 45564954     VE_avg,P2_ACTIVE
  40ec30:	78616d5f 5f32502c 49544341 6d5f4556     _max,P2_ACTIVE_m
  40ec40:	502c6e69 4f4e5f32 49544341 615f4556     in,P2_NOACTIVE_a
  40ec50:	502c6776 4f4e5f32 49544341 6d5f4556     vg,P2_NOACTIVE_m
  40ec60:	502c7861 4f4e5f32 49544341 6d5f4556     ax,P2_NOACTIVE_m
  40ec70:	502c6e69 46505f32 6776615f 5f32502c     in,P2_PF_avg,P2_
  40ec80:	6d5f4650 502c7861 46505f32 646f6d5f     PF_max,P2_PF_mod
  40ec90:	6e696d5f 5f33502c 41505041 544e4552     _min,P3_APPARENT
  40eca0:	6776615f 5f33502c 41505041 544e4552     _avg,P3_APPARENT
  40ecb0:	78616d5f 5f33502c 41505041 544e4552     _max,P3_APPARENT
  40ecc0:	6e696d5f 5f33502c 49544341 615f4556     _min,P3_ACTIVE_a
  40ecd0:	502c6776 43415f33 45564954 78616d5f     vg,P3_ACTIVE_max
  40ece0:	5f33502c 49544341 6d5f4556 502c6e69     ,P3_ACTIVE_min,P
  40ecf0:	4f4e5f33 49544341 615f4556 502c6776     3_NOACTIVE_avg,P
  40ed00:	4f4e5f33 49544341 6d5f4556 502c7861     3_NOACTIVE_max,P
  40ed10:	4f4e5f33 49544341 6d5f4556 502c6e69     3_NOACTIVE_min,P
  40ed20:	46505f33 6776615f 5f33502c 6d5f4650     3_PF_avg,P3_PF_m
  40ed30:	502c7861 46505f33 646f6d5f 6e696d5f     ax,P3_PF_mod_min
  40ed40:	0000000a 64323025 3230253a 30253a64     ....%02d:%02d:%0
  40ed50:	002c6432 64323025 3230253a 30253a64     2d,.%02d:%02d:%0
  40ed60:	00006432 3130252c 00006236              2d..,%016b..

0040ed6c <mmc_trans_multipliers>:
  40ed6c:	00000000 0000000a 0000000c 0000000d     ................
  40ed7c:	0000000f 00000014 0000001a 0000001e     ................
  40ed8c:	00000023 00000028 0000002d 00000034     #...(...-...4...
  40ed9c:	00000037 0000003c 00000046 00000050     7...<...F...P...

0040edac <sd_mmc_trans_units>:
  40edac:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0040edc8 <sd_trans_multipliers>:
  40edc8:	00000000 0000000a 0000000c 0000000d     ................
  40edd8:	0000000f 00000014 00000019 0000001e     ................
  40ede8:	00000023 00000028 0000002d 00000032     #...(...-...2...
  40edf8:	00000037 0000003c 00000046 00000050     7...<...F...P...

0040ee08 <LfnOfs>:
  40ee08:	07050301 12100e09 1c181614 0000001e     ................

0040ee18 <excvt.4560>:
  40ee18:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
  40ee28:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
  40ee38:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
  40ee48:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
  40ee58:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
  40ee68:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
  40ee78:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
  40ee88:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
  40ee98:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
  40eea8:	00005d5b                                []..

0040eeac <tbl_lower.4257>:
  40eeac:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
  40eebc:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
  40eecc:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
  40eedc:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
  40eeec:	00e100e0 00e300e2 00e500e4 00e700e6     ................
  40eefc:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
  40ef0c:	00f100f0 00f300f2 00f500f4 00f800f6     ................
  40ef1c:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
  40ef2c:	01050103 01090107 010d010b 0111010f     ................
  40ef3c:	01150113 01190117 011d011b 0121011f     ..............!.
  40ef4c:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
  40ef5c:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
  40ef6c:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
  40ef7c:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
  40ef8c:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
  40ef9c:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
  40efac:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
  40efbc:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
  40efcc:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
  40efdc:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
  40efec:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
  40effc:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
  40f00c:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
  40f01c:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
  40f02c:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
  40f03c:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
  40f04c:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
  40f05c:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
  40f06c:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
  40f07c:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0040f08c <Tbl>:
  40f08c:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
  40f09c:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
  40f0ac:	00e600c9 00f400c6 00f200f6 00f900fb     ................
  40f0bc:	00d600ff 00f800dc 00d800a3 019200d7     ................
  40f0cc:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
  40f0dc:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
  40f0ec:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
  40f0fc:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
  40f10c:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
  40f11c:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
  40f12c:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
  40f13c:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
  40f14c:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
  40f15c:	00da00de 00d900db 00dd00fd 00b400af     ................
  40f16c:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
  40f17c:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0040f18c <tbl_upper.4258>:
  40f18c:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
  40f19c:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
  40f1ac:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
  40f1bc:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
  40f1cc:	00c100c0 00c300c2 00c500c4 00c700c6     ................
  40f1dc:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
  40f1ec:	00d100d0 00d300d2 00d500d4 00d800d6     ................
  40f1fc:	00da00d9 00dc00db 00de00dd 01000178     ............x...
  40f20c:	01040102 01080106 010c010a 0110010e     ................
  40f21c:	01140112 01180116 011c011a 0120011e     .............. .
  40f22c:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
  40f23c:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
  40f24c:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
  40f25c:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
  40f26c:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
  40f27c:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
  40f28c:	03940393 03960395 03980397 039a0399     ................
  40f29c:	039c039b 039e039d 03a0039f 03a303a1     ................
  40f2ac:	03a503a4 03a703a6 03a903a8 041003aa     ................
  40f2bc:	04120411 04140413 04160415 04180417     ................
  40f2cc:	041a0419 041c041b 041e041d 0420041f     .............. .
  40f2dc:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
  40f2ec:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
  40f2fc:	04030402 04050404 04070406 04090408     ................
  40f30c:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
  40f31c:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
  40f32c:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
  40f33c:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
  40f34c:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
  40f35c:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
  40f36c:	74727173 00000000 00000000              sqrt........

0040f378 <atanhi>:
  40f378:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
  40f388:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

0040f398 <atanlo>:
  40f398:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
  40f3a8:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

0040f3b8 <_global_impure_ptr>:
  40f3b8:	200000c8 00464e49 00666e69 004e414e     ... INF.inf.NAN.
  40f3c8:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  40f3d8:	46454443 00000000 33323130 37363534     CDEF....01234567
  40f3e8:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40f3f8:	0000296c 00000030                       l)..0...

0040f400 <blanks.7223>:
  40f400:	20202020 20202020 20202020 20202020                     

0040f410 <zeroes.7224>:
  40f410:	30303030 30303030 30303030 30303030     0000000000000000
  40f420:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  40f430:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0040f440 <__mprec_bigtens>:
  40f440:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40f450:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40f460:	7f73bf3c 75154fdd                       <.s..O.u

0040f468 <__mprec_tens>:
  40f468:	00000000 3ff00000 00000000 40240000     .......?......$@
  40f478:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40f488:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40f498:	00000000 412e8480 00000000 416312d0     .......A......cA
  40f4a8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40f4b8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40f4c8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40f4d8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40f4e8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40f4f8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40f508:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40f518:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40f528:	79d99db4 44ea7843                       ...yCx.D

0040f530 <p05.6055>:
  40f530:	00000005 00000019 0000007d              ........}...

0040f53c <_ctype_>:
  40f53c:	20202000 20202020 28282020 20282828     .         ((((( 
  40f54c:	20202020 20202020 20202020 20202020                     
  40f55c:	10108820 10101010 10101010 10101010      ...............
  40f56c:	04040410 04040404 10040404 10101010     ................
  40f57c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40f58c:	01010101 01010101 01010101 10101010     ................
  40f59c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40f5ac:	02020202 02020202 02020202 10101010     ................
  40f5bc:	00000020 00000000 00000000 00000000      ...............
	...

0040f640 <_init>:
  40f640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40f642:	bf00      	nop
  40f644:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40f646:	bc08      	pop	{r3}
  40f648:	469e      	mov	lr, r3
  40f64a:	4770      	bx	lr

0040f64c <__init_array_start>:
  40f64c:	0040abad 	.word	0x0040abad

0040f650 <__frame_dummy_init_array_entry>:
  40f650:	004000f1                                ..@.

0040f654 <_fini>:
  40f654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40f656:	bf00      	nop
  40f658:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40f65a:	bc08      	pop	{r3}
  40f65c:	469e      	mov	lr, r3
  40f65e:	4770      	bx	lr

0040f660 <__fini_array_start>:
  40f660:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b430      	push	{r4, r5}
20000002:	b082      	sub	sp, #8
20000004:	9d04      	ldr	r5, [sp, #16]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000006:	b35b      	cbz	r3, 20000060 <efc_perform_read_sequence+0x60>
20000008:	461c      	mov	r4, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000000a:	6803      	ldr	r3, [r0, #0]
2000000c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20000010:	6003      	str	r3, [r0, #0]

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20000012:	b2c9      	uxtb	r1, r1
20000014:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
20000018:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000001a:	6883      	ldr	r3, [r0, #8]
2000001c:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000001e:	9b01      	ldr	r3, [sp, #4]
20000020:	f013 0f01 	tst.w	r3, #1
20000024:	d1f9      	bne.n	2000001a <efc_perform_read_sequence+0x1a>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000026:	b14d      	cbz	r5, 2000003c <efc_perform_read_sequence+0x3c>
20000028:	4621      	mov	r1, r4
2000002a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
2000002e:	4c0d      	ldr	r4, [pc, #52]	; (20000064 <efc_perform_read_sequence+0x64>)
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20000030:	f854 5f04 	ldr.w	r5, [r4, #4]!
20000034:	f841 5b04 	str.w	r5, [r1], #4
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000038:	4299      	cmp	r1, r3
2000003a:	d1f9      	bne.n	20000030 <efc_perform_read_sequence+0x30>
	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000003c:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
2000003e:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000042:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000044:	6883      	ldr	r3, [r0, #8]
20000046:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000048:	9b01      	ldr	r3, [sp, #4]
2000004a:	f013 0f01 	tst.w	r3, #1
2000004e:	d0f9      	beq.n	20000044 <efc_perform_read_sequence+0x44>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20000050:	6803      	ldr	r3, [r0, #0]
20000052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20000056:	6003      	str	r3, [r0, #0]

	return EFC_RC_OK;
20000058:	2000      	movs	r0, #0
}
2000005a:	b002      	add	sp, #8
2000005c:	bc30      	pop	{r4, r5}
2000005e:	4770      	bx	lr
		return EFC_RC_INVALID;
20000060:	2002      	movs	r0, #2
20000062:	e7fa      	b.n	2000005a <efc_perform_read_sequence+0x5a>
20000064:	003ffffc 	.word	0x003ffffc

20000068 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20000068:	6001      	str	r1, [r0, #0]
2000006a:	4770      	bx	lr

2000006c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2000006c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2000006e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20000070:	6883      	ldr	r3, [r0, #8]
20000072:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000074:	9b01      	ldr	r3, [sp, #4]
20000076:	f013 0f01 	tst.w	r3, #1
2000007a:	d0f9      	beq.n	20000070 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
2000007c:	9801      	ldr	r0, [sp, #4]
}
2000007e:	f000 000e 	and.w	r0, r0, #14
20000082:	b002      	add	sp, #8
20000084:	4770      	bx	lr
20000086:	bf00      	nop

20000088 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000088:	f3bf 8f5f 	dmb	sy
2000008c:	3801      	subs	r0, #1
2000008e:	d1fb      	bne.n	20000088 <portable_delay_cycles>
20000090:	4770      	bx	lr
20000092:	bf00      	nop

20000094 <sd_mmc_cards>:
	...
2000009c:	0019 0000 0000 0000 0000 0000 0000 0000     ................
	...

200000b8 <g_interrupt_enabled>:
200000b8:	0001 0000                                   ....

200000bc <SystemCoreClock>:
200000bc:	0900 003d                                   ..=.

200000c0 <__fdlib_version>:
200000c0:	0001 0000                                   ....

200000c4 <_impure_ptr>:
200000c4:	00c8 2000                                   ... 

200000c8 <impure_data>:
200000c8:	0000 0000 03b4 2000 041c 2000 0484 2000     ....... ... ... 
	...
20000170:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000180:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

200004f0 <__atexit_recursive_mutex>:
200004f0:	2014 2000                                   . . 

200004f4 <__global_locale>:
200004f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000514:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000534:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000554:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000574:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000594:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200005b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200005d4:	d099 0040 c371 0040 0000 0000 f53c 0040     ..@.q.@.....<.@.
200005e4:	f43c 0040 d624 0040 d624 0040 d624 0040     <.@.$.@.$.@.$.@.
200005f4:	d624 0040 d624 0040 d624 0040 d624 0040     $.@.$.@.$.@.$.@.
20000604:	d624 0040 d624 0040 ffff ffff ffff ffff     $.@.$.@.........
20000614:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2000063c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

20000660 <__malloc_av_>:
	...
20000668:	0660 2000 0660 2000 0668 2000 0668 2000     `.. `.. h.. h.. 
20000678:	0670 2000 0670 2000 0678 2000 0678 2000     p.. p.. x.. x.. 
20000688:	0680 2000 0680 2000 0688 2000 0688 2000     ... ... ... ... 
20000698:	0690 2000 0690 2000 0698 2000 0698 2000     ... ... ... ... 
200006a8:	06a0 2000 06a0 2000 06a8 2000 06a8 2000     ... ... ... ... 
200006b8:	06b0 2000 06b0 2000 06b8 2000 06b8 2000     ... ... ... ... 
200006c8:	06c0 2000 06c0 2000 06c8 2000 06c8 2000     ... ... ... ... 
200006d8:	06d0 2000 06d0 2000 06d8 2000 06d8 2000     ... ... ... ... 
200006e8:	06e0 2000 06e0 2000 06e8 2000 06e8 2000     ... ... ... ... 
200006f8:	06f0 2000 06f0 2000 06f8 2000 06f8 2000     ... ... ... ... 
20000708:	0700 2000 0700 2000 0708 2000 0708 2000     ... ... ... ... 
20000718:	0710 2000 0710 2000 0718 2000 0718 2000     ... ... ... ... 
20000728:	0720 2000 0720 2000 0728 2000 0728 2000      ..  .. (.. (.. 
20000738:	0730 2000 0730 2000 0738 2000 0738 2000     0.. 0.. 8.. 8.. 
20000748:	0740 2000 0740 2000 0748 2000 0748 2000     @.. @.. H.. H.. 
20000758:	0750 2000 0750 2000 0758 2000 0758 2000     P.. P.. X.. X.. 
20000768:	0760 2000 0760 2000 0768 2000 0768 2000     `.. `.. h.. h.. 
20000778:	0770 2000 0770 2000 0778 2000 0778 2000     p.. p.. x.. x.. 
20000788:	0780 2000 0780 2000 0788 2000 0788 2000     ... ... ... ... 
20000798:	0790 2000 0790 2000 0798 2000 0798 2000     ... ... ... ... 
200007a8:	07a0 2000 07a0 2000 07a8 2000 07a8 2000     ... ... ... ... 
200007b8:	07b0 2000 07b0 2000 07b8 2000 07b8 2000     ... ... ... ... 
200007c8:	07c0 2000 07c0 2000 07c8 2000 07c8 2000     ... ... ... ... 
200007d8:	07d0 2000 07d0 2000 07d8 2000 07d8 2000     ... ... ... ... 
200007e8:	07e0 2000 07e0 2000 07e8 2000 07e8 2000     ... ... ... ... 
200007f8:	07f0 2000 07f0 2000 07f8 2000 07f8 2000     ... ... ... ... 
20000808:	0800 2000 0800 2000 0808 2000 0808 2000     ... ... ... ... 
20000818:	0810 2000 0810 2000 0818 2000 0818 2000     ... ... ... ... 
20000828:	0820 2000 0820 2000 0828 2000 0828 2000      ..  .. (.. (.. 
20000838:	0830 2000 0830 2000 0838 2000 0838 2000     0.. 0.. 8.. 8.. 
20000848:	0840 2000 0840 2000 0848 2000 0848 2000     @.. @.. H.. H.. 
20000858:	0850 2000 0850 2000 0858 2000 0858 2000     P.. P.. X.. X.. 
20000868:	0860 2000 0860 2000 0868 2000 0868 2000     `.. `.. h.. h.. 
20000878:	0870 2000 0870 2000 0878 2000 0878 2000     p.. p.. x.. x.. 
20000888:	0880 2000 0880 2000 0888 2000 0888 2000     ... ... ... ... 
20000898:	0890 2000 0890 2000 0898 2000 0898 2000     ... ... ... ... 
200008a8:	08a0 2000 08a0 2000 08a8 2000 08a8 2000     ... ... ... ... 
200008b8:	08b0 2000 08b0 2000 08b8 2000 08b8 2000     ... ... ... ... 
200008c8:	08c0 2000 08c0 2000 08c8 2000 08c8 2000     ... ... ... ... 
200008d8:	08d0 2000 08d0 2000 08d8 2000 08d8 2000     ... ... ... ... 
200008e8:	08e0 2000 08e0 2000 08e8 2000 08e8 2000     ... ... ... ... 
200008f8:	08f0 2000 08f0 2000 08f8 2000 08f8 2000     ... ... ... ... 
20000908:	0900 2000 0900 2000 0908 2000 0908 2000     ... ... ... ... 
20000918:	0910 2000 0910 2000 0918 2000 0918 2000     ... ... ... ... 
20000928:	0920 2000 0920 2000 0928 2000 0928 2000      ..  .. (.. (.. 
20000938:	0930 2000 0930 2000 0938 2000 0938 2000     0.. 0.. 8.. 8.. 
20000948:	0940 2000 0940 2000 0948 2000 0948 2000     @.. @.. H.. H.. 
20000958:	0950 2000 0950 2000 0958 2000 0958 2000     P.. P.. X.. X.. 
20000968:	0960 2000 0960 2000 0968 2000 0968 2000     `.. `.. h.. h.. 
20000978:	0970 2000 0970 2000 0978 2000 0978 2000     p.. p.. x.. x.. 
20000988:	0980 2000 0980 2000 0988 2000 0988 2000     ... ... ... ... 
20000998:	0990 2000 0990 2000 0998 2000 0998 2000     ... ... ... ... 
200009a8:	09a0 2000 09a0 2000 09a8 2000 09a8 2000     ... ... ... ... 
200009b8:	09b0 2000 09b0 2000 09b8 2000 09b8 2000     ... ... ... ... 
200009c8:	09c0 2000 09c0 2000 09c8 2000 09c8 2000     ... ... ... ... 
200009d8:	09d0 2000 09d0 2000 09d8 2000 09d8 2000     ... ... ... ... 
200009e8:	09e0 2000 09e0 2000 09e8 2000 09e8 2000     ... ... ... ... 
200009f8:	09f0 2000 09f0 2000 09f8 2000 09f8 2000     ... ... ... ... 
20000a08:	0a00 2000 0a00 2000 0a08 2000 0a08 2000     ... ... ... ... 
20000a18:	0a10 2000 0a10 2000 0a18 2000 0a18 2000     ... ... ... ... 
20000a28:	0a20 2000 0a20 2000 0a28 2000 0a28 2000      ..  .. (.. (.. 
20000a38:	0a30 2000 0a30 2000 0a38 2000 0a38 2000     0.. 0.. 8.. 8.. 
20000a48:	0a40 2000 0a40 2000 0a48 2000 0a48 2000     @.. @.. H.. H.. 
20000a58:	0a50 2000 0a50 2000 0a58 2000 0a58 2000     P.. P.. X.. X.. 

20000a68 <__malloc_sbrk_base>:
20000a68:	ffff ffff                                   ....

20000a6c <__malloc_trim_threshold>:
20000a6c:	0000 0002                                   ....
