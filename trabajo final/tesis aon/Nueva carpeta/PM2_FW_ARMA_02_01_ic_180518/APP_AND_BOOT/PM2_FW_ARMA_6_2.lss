
PM2_FW_ARMA_6_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f664  00402000  00402000  00002000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00411664  00411664  00011664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a70  20000000  0041166c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000015cc  20000a70  004120dc  00020a70  2**2
                  ALLOC
  4 .stack        00003004  2000203c  004136a8  00020a70  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020a70  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020a9a  2**0
                  CONTENTS, READONLY
  7 .debug_info   00030701  00000000  00000000  00020af3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000065ae  00000000  00000000  000511f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00011975  00000000  00000000  000577a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000012f8  00000000  00000000  00069117  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000013d8  00000000  00000000  0006a40f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001e208  00000000  00000000  0006b7e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000212f5  00000000  00000000  000899ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005c549  00000000  00000000  000aace4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003ef4  00000000  00000000  00107230  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00402000 <exception_table>:
  402000:	40 50 00 20 dd 71 40 00 d9 71 40 00 d9 71 40 00     @P. .q@..q@..q@.
  402010:	d9 71 40 00 d9 71 40 00 d9 71 40 00 00 00 00 00     .q@..q@..q@.....
	...
  40202c:	d9 71 40 00 d9 71 40 00 00 00 00 00 d9 71 40 00     .q@..q@......q@.
  40203c:	11 9e 40 00 35 9e 40 00 d9 71 40 00 d9 71 40 00     ..@.5.@..q@..q@.
  40204c:	d9 71 40 00 d9 71 40 00 d9 71 40 00 d9 71 40 00     .q@..q@..q@..q@.
  40205c:	00 00 00 00 1d 9e 40 00 29 9e 40 00 00 00 00 00     ......@.).@.....
  40206c:	61 6c 40 00 75 6c 40 00 00 00 00 00 d9 71 40 00     al@.ul@......q@.
  40207c:	d9 71 40 00 00 00 00 00 00 00 00 00 d9 71 40 00     .q@..........q@.
  40208c:	d9 71 40 00 d9 71 40 00 d9 71 40 00 d9 71 40 00     .q@..q@..q@..q@.
  40209c:	d9 71 40 00 d9 71 40 00 d9 71 40 00 00 00 00 00     .q@..q@..q@.....
	...
  4020b4:	d9 71 40 00 d9 71 40 00 d9 71 40 00 d9 71 40 00     .q@..q@..q@..q@.
  4020c4:	d9 71 40 00 d9 71 40 00                             .q@..q@.

004020cc <__do_global_dtors_aux>:
  4020cc:	b510      	push	{r4, lr}
  4020ce:	4c05      	ldr	r4, [pc, #20]	; (4020e4 <__do_global_dtors_aux+0x18>)
  4020d0:	7823      	ldrb	r3, [r4, #0]
  4020d2:	b933      	cbnz	r3, 4020e2 <__do_global_dtors_aux+0x16>
  4020d4:	4b04      	ldr	r3, [pc, #16]	; (4020e8 <__do_global_dtors_aux+0x1c>)
  4020d6:	b113      	cbz	r3, 4020de <__do_global_dtors_aux+0x12>
  4020d8:	4804      	ldr	r0, [pc, #16]	; (4020ec <__do_global_dtors_aux+0x20>)
  4020da:	f3af 8000 	nop.w
  4020de:	2301      	movs	r3, #1
  4020e0:	7023      	strb	r3, [r4, #0]
  4020e2:	bd10      	pop	{r4, pc}
  4020e4:	20000a70 	.word	0x20000a70
  4020e8:	00000000 	.word	0x00000000
  4020ec:	0041166c 	.word	0x0041166c

004020f0 <frame_dummy>:
  4020f0:	4b0c      	ldr	r3, [pc, #48]	; (402124 <frame_dummy+0x34>)
  4020f2:	b143      	cbz	r3, 402106 <frame_dummy+0x16>
  4020f4:	480c      	ldr	r0, [pc, #48]	; (402128 <frame_dummy+0x38>)
  4020f6:	490d      	ldr	r1, [pc, #52]	; (40212c <frame_dummy+0x3c>)
  4020f8:	b510      	push	{r4, lr}
  4020fa:	f3af 8000 	nop.w
  4020fe:	480c      	ldr	r0, [pc, #48]	; (402130 <frame_dummy+0x40>)
  402100:	6803      	ldr	r3, [r0, #0]
  402102:	b923      	cbnz	r3, 40210e <frame_dummy+0x1e>
  402104:	bd10      	pop	{r4, pc}
  402106:	480a      	ldr	r0, [pc, #40]	; (402130 <frame_dummy+0x40>)
  402108:	6803      	ldr	r3, [r0, #0]
  40210a:	b933      	cbnz	r3, 40211a <frame_dummy+0x2a>
  40210c:	4770      	bx	lr
  40210e:	4b09      	ldr	r3, [pc, #36]	; (402134 <frame_dummy+0x44>)
  402110:	2b00      	cmp	r3, #0
  402112:	d0f7      	beq.n	402104 <frame_dummy+0x14>
  402114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  402118:	4718      	bx	r3
  40211a:	4b06      	ldr	r3, [pc, #24]	; (402134 <frame_dummy+0x44>)
  40211c:	2b00      	cmp	r3, #0
  40211e:	d0f5      	beq.n	40210c <frame_dummy+0x1c>
  402120:	4718      	bx	r3
  402122:	bf00      	nop
  402124:	00000000 	.word	0x00000000
  402128:	0041166c 	.word	0x0041166c
  40212c:	20000a74 	.word	0x20000a74
  402130:	0041166c 	.word	0x0041166c
  402134:	00000000 	.word	0x00000000

00402138 <API_BOOT_ARM_start_upload_req>:
/// @brief Start firmware update.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_BOOT_ARM_start_upload_req( msg_t * msg_ptr )
{
  402138:	b510      	push	{r4, lr}
  40213a:	b084      	sub	sp, #16
  40213c:	4604      	mov	r4, r0
	
	uint8_t response;
	
	// Accept command only if payload length is equal to new image structure
    if ( msg_ptr->packet_in[msg_h_payload_len] == sizeof(new_image_t) ) {
  40213e:	7c43      	ldrb	r3, [r0, #17]
  402140:	2b10      	cmp	r3, #16
  402142:	d00f      	beq.n	402164 <API_BOOT_ARM_start_upload_req+0x2c>
		response = bootloader_start_upload( (uint8_t *)&msg_ptr->packet_in[msg_h_payload_1st_byte] );

	} 
	else {

	    response = 0x1;
  402144:	2301      	movs	r3, #1
  402146:	f88d 300f 	strb.w	r3, [sp, #15]

    }	
		
	comm_send_msg( msg_ptr->uart_ptr ,
  40214a:	7c22      	ldrb	r2, [r4, #16]
  40214c:	3201      	adds	r2, #1
  40214e:	7ba1      	ldrb	r1, [r4, #14]
  402150:	6820      	ldr	r0, [r4, #0]
  402152:	f10d 030f 	add.w	r3, sp, #15
  402156:	9300      	str	r3, [sp, #0]
  402158:	2301      	movs	r3, #1
  40215a:	b2d2      	uxtb	r2, r2
  40215c:	4c04      	ldr	r4, [pc, #16]	; (402170 <API_BOOT_ARM_start_upload_req+0x38>)
  40215e:	47a0      	blx	r4
	               msg_ptr->packet_in[msg_h_src_id] ,
	               msg_ptr->packet_in[msg_h_msg_id]+1 ,
	               1 ,
 	               &response);

}
  402160:	b004      	add	sp, #16
  402162:	bd10      	pop	{r4, pc}
		response = bootloader_start_upload( (uint8_t *)&msg_ptr->packet_in[msg_h_payload_1st_byte] );
  402164:	3012      	adds	r0, #18
  402166:	4b03      	ldr	r3, [pc, #12]	; (402174 <API_BOOT_ARM_start_upload_req+0x3c>)
  402168:	4798      	blx	r3
  40216a:	f88d 000f 	strb.w	r0, [sp, #15]
  40216e:	e7ec      	b.n	40214a <API_BOOT_ARM_start_upload_req+0x12>
  402170:	00404ff1 	.word	0x00404ff1
  402174:	00402ef1 	.word	0x00402ef1

00402178 <API_BOOT_ARM_upload_block_req>:
/// @brief Update block in scratchpad.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_BOOT_ARM_upload_block_req( msg_t * msg_ptr )
{
  402178:	b510      	push	{r4, lr}
  40217a:	b084      	sub	sp, #16
  40217c:	4604      	mov	r4, r0

	uint8_t response;
	
	response = bootloader_upload_block( (uint8_t *)&msg_ptr->packet_in[msg_h_payload_1st_byte] , msg_ptr->packet_in[msg_h_payload_len] );
  40217e:	7c41      	ldrb	r1, [r0, #17]
  402180:	3012      	adds	r0, #18
  402182:	4b08      	ldr	r3, [pc, #32]	; (4021a4 <API_BOOT_ARM_upload_block_req+0x2c>)
  402184:	4798      	blx	r3
  402186:	ab04      	add	r3, sp, #16
  402188:	f803 0d01 	strb.w	r0, [r3, #-1]!
	
	comm_send_msg( msg_ptr->uart_ptr ,
  40218c:	7c22      	ldrb	r2, [r4, #16]
  40218e:	3201      	adds	r2, #1
  402190:	7ba1      	ldrb	r1, [r4, #14]
  402192:	6820      	ldr	r0, [r4, #0]
  402194:	9300      	str	r3, [sp, #0]
  402196:	2301      	movs	r3, #1
  402198:	b2d2      	uxtb	r2, r2
  40219a:	4c03      	ldr	r4, [pc, #12]	; (4021a8 <API_BOOT_ARM_upload_block_req+0x30>)
  40219c:	47a0      	blx	r4
                   msg_ptr->packet_in[msg_h_src_id] ,
                   msg_ptr->packet_in[msg_h_msg_id]+1 ,
                   1 ,
                   &response);
	
}
  40219e:	b004      	add	sp, #16
  4021a0:	bd10      	pop	{r4, pc}
  4021a2:	bf00      	nop
  4021a4:	00402f45 	.word	0x00402f45
  4021a8:	00404ff1 	.word	0x00404ff1

004021ac <API_BOOT_ARM_install_image_req>:
/// @brief Install image from scratchpad.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_BOOT_ARM_install_image_req( msg_t * msg_ptr )
{
  4021ac:	b510      	push	{r4, lr}
  4021ae:	b084      	sub	sp, #16
  4021b0:	4604      	mov	r4, r0

	uint8_t response;
	
	// Accept command only if payload length is equal to new image structure
	if ( msg_ptr->packet_in[msg_h_payload_len] == sizeof(new_image_t) ) {
  4021b2:	7c43      	ldrb	r3, [r0, #17]
  4021b4:	2b10      	cmp	r3, #16
  4021b6:	d00f      	beq.n	4021d8 <API_BOOT_ARM_install_image_req+0x2c>
		response = bootloader_install_image( (uint8_t *)&msg_ptr->packet_in[msg_h_payload_1st_byte] );

	}
	else {

		response = 0x1;
  4021b8:	2301      	movs	r3, #1
  4021ba:	f88d 300f 	strb.w	r3, [sp, #15]

	}
	
	comm_send_msg( msg_ptr->uart_ptr ,
  4021be:	7c22      	ldrb	r2, [r4, #16]
  4021c0:	3201      	adds	r2, #1
  4021c2:	7ba1      	ldrb	r1, [r4, #14]
  4021c4:	6820      	ldr	r0, [r4, #0]
  4021c6:	f10d 030f 	add.w	r3, sp, #15
  4021ca:	9300      	str	r3, [sp, #0]
  4021cc:	2301      	movs	r3, #1
  4021ce:	b2d2      	uxtb	r2, r2
  4021d0:	4c04      	ldr	r4, [pc, #16]	; (4021e4 <API_BOOT_ARM_install_image_req+0x38>)
  4021d2:	47a0      	blx	r4
               	   msg_ptr->packet_in[msg_h_src_id] ,
               	   msg_ptr->packet_in[msg_h_msg_id]+1 ,
	               1 ,
                   &response);
	
}
  4021d4:	b004      	add	sp, #16
  4021d6:	bd10      	pop	{r4, pc}
		response = bootloader_install_image( (uint8_t *)&msg_ptr->packet_in[msg_h_payload_1st_byte] );
  4021d8:	3012      	adds	r0, #18
  4021da:	4b03      	ldr	r3, [pc, #12]	; (4021e8 <API_BOOT_ARM_install_image_req+0x3c>)
  4021dc:	4798      	blx	r3
  4021de:	f88d 000f 	strb.w	r0, [sp, #15]
  4021e2:	e7ec      	b.n	4021be <API_BOOT_ARM_install_image_req+0x12>
  4021e4:	00404ff1 	.word	0x00404ff1
  4021e8:	00402f6d 	.word	0x00402f6d

004021ec <API_FW_DSP_version_res>:

///// @brief Response to request of DSP FW version.
/////
///// @param[in] msp_ptr Pointer to incoming message
/////
void API_FW_DSP_version_res(msg_t * msg_ptr) {
  4021ec:	b508      	push	{r3, lr}
	
	// Accept command only if:
	//     1) payload length is equal to 1 byte
	//     2) ARM is waiting for this message 
	if ((msg_ptr->packet_in[msg_h_payload_len] == 2) && ((comm_flags & SETTINGS_COMM_FLAG_FW_REQUEST_MASK) != 0 )) {
  4021ee:	7c43      	ldrb	r3, [r0, #17]
  4021f0:	2b02      	cmp	r3, #2
  4021f2:	d000      	beq.n	4021f6 <API_FW_DSP_version_res+0xa>
  4021f4:	bd08      	pop	{r3, pc}
  4021f6:	4b0a      	ldr	r3, [pc, #40]	; (402220 <API_FW_DSP_version_res+0x34>)
  4021f8:	881b      	ldrh	r3, [r3, #0]
  4021fa:	f013 0f01 	tst.w	r3, #1
  4021fe:	d0f9      	beq.n	4021f4 <API_FW_DSP_version_res+0x8>
	
		// save DSP firmware version
		DSP_fw[0] = msg_ptr->packet_in[msg_h_payload_1st_byte];
  402200:	7c82      	ldrb	r2, [r0, #18]
  402202:	4b08      	ldr	r3, [pc, #32]	; (402224 <API_FW_DSP_version_res+0x38>)
  402204:	701a      	strb	r2, [r3, #0]
		DSP_fw[1] = msg_ptr->packet_in[msg_h_payload_1st_byte+1];
  402206:	7cc2      	ldrb	r2, [r0, #19]
  402208:	705a      	strb	r2, [r3, #1]
		
		// Clear flag 
		comm_flags &= ~SETTINGS_COMM_FLAG_FW_REQUEST_MASK;
  40220a:	4a05      	ldr	r2, [pc, #20]	; (402220 <API_FW_DSP_version_res+0x34>)
  40220c:	8813      	ldrh	r3, [r2, #0]
  40220e:	f023 0301 	bic.w	r3, r3, #1
  402212:	041b      	lsls	r3, r3, #16
  402214:	0c1b      	lsrs	r3, r3, #16
  402216:	8013      	strh	r3, [r2, #0]
		
		// force next communication
		comm_TX_counter_clear();
  402218:	4b03      	ldr	r3, [pc, #12]	; (402228 <API_FW_DSP_version_res+0x3c>)
  40221a:	4798      	blx	r3
		
	}
	
}
  40221c:	e7ea      	b.n	4021f4 <API_FW_DSP_version_res+0x8>
  40221e:	bf00      	nop
  402220:	20001e54 	.word	0x20001e54
  402224:	20000be8 	.word	0x20000be8
  402228:	004050f5 	.word	0x004050f5

0040222c <API_FW_DSP_send_comm_flag_res>:

///// @brief Response to request of DSP comm flags.
/////
///// @param[in] msp_ptr Pointer to incoming message
/////
void API_FW_DSP_send_comm_flag_res(msg_t * msg_ptr) {
  40222c:	b510      	push	{r4, lr}
  40222e:	b082      	sub	sp, #8
  402230:	4604      	mov	r4, r0

	volatile uint16_t temp;

	gpio_set_pin_high(TP0_GPIO);
  402232:	2021      	movs	r0, #33	; 0x21
  402234:	4b15      	ldr	r3, [pc, #84]	; (40228c <API_FW_DSP_send_comm_flag_res+0x60>)
  402236:	4798      	blx	r3

	// Accept command only if:
	//     1) payload length is equal to 2 byte
	//     2) ARM is waiting for this message
	if ((msg_ptr->packet_in[msg_h_payload_len] == 2) && (comm_flags & SETTINGS_COMM_FLAG_REQUEST_MASK)) {
  402238:	7c63      	ldrb	r3, [r4, #17]
  40223a:	2b02      	cmp	r3, #2
  40223c:	d004      	beq.n	402248 <API_FW_DSP_send_comm_flag_res+0x1c>
		// force next communication
		comm_TX_counter_clear();
		
	}
	
	gpio_set_pin_low(TP0_GPIO);
  40223e:	2021      	movs	r0, #33	; 0x21
  402240:	4b13      	ldr	r3, [pc, #76]	; (402290 <API_FW_DSP_send_comm_flag_res+0x64>)
  402242:	4798      	blx	r3
	
}
  402244:	b002      	add	sp, #8
  402246:	bd10      	pop	{r4, pc}
	if ((msg_ptr->packet_in[msg_h_payload_len] == 2) && (comm_flags & SETTINGS_COMM_FLAG_REQUEST_MASK)) {
  402248:	4b12      	ldr	r3, [pc, #72]	; (402294 <API_FW_DSP_send_comm_flag_res+0x68>)
  40224a:	881b      	ldrh	r3, [r3, #0]
  40224c:	f013 0f02 	tst.w	r3, #2
  402250:	d0f5      	beq.n	40223e <API_FW_DSP_send_comm_flag_res+0x12>
		temp = msg_ptr->packet_in[msg_h_payload_1st_byte] +  (msg_ptr->packet_in[msg_h_payload_1st_byte+1]<<8);
  402252:	7ce2      	ldrb	r2, [r4, #19]
  402254:	7ca3      	ldrb	r3, [r4, #18]
  402256:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  40225a:	b29b      	uxth	r3, r3
  40225c:	f8ad 3006 	strh.w	r3, [sp, #6]
		comm_flags |= temp;
  402260:	f8bd 1006 	ldrh.w	r1, [sp, #6]
  402264:	4a0b      	ldr	r2, [pc, #44]	; (402294 <API_FW_DSP_send_comm_flag_res+0x68>)
  402266:	8813      	ldrh	r3, [r2, #0]
  402268:	430b      	orrs	r3, r1
  40226a:	b29b      	uxth	r3, r3
  40226c:	8013      	strh	r3, [r2, #0]
		comm_flags &= ~SETTINGS_COMM_FLAG_REQUEST_MASK;
  40226e:	8813      	ldrh	r3, [r2, #0]
  402270:	f023 0302 	bic.w	r3, r3, #2
  402274:	041b      	lsls	r3, r3, #16
  402276:	0c1b      	lsrs	r3, r3, #16
  402278:	8013      	strh	r3, [r2, #0]
		sdcard_save_flags(temp);
  40227a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  40227e:	b280      	uxth	r0, r0
  402280:	4b05      	ldr	r3, [pc, #20]	; (402298 <API_FW_DSP_send_comm_flag_res+0x6c>)
  402282:	4798      	blx	r3
		comm_TX_counter_clear();
  402284:	4b05      	ldr	r3, [pc, #20]	; (40229c <API_FW_DSP_send_comm_flag_res+0x70>)
  402286:	4798      	blx	r3
  402288:	e7d9      	b.n	40223e <API_FW_DSP_send_comm_flag_res+0x12>
  40228a:	bf00      	nop
  40228c:	0040698b 	.word	0x0040698b
  402290:	004069a5 	.word	0x004069a5
  402294:	20001e54 	.word	0x20001e54
  402298:	00403f99 	.word	0x00403f99
  40229c:	004050f5 	.word	0x004050f5

004022a0 <API_RTC_DSP_update_res>:

///// @brief Response to request of update DSP RTC.
/////
///// @param[in] msp_ptr Pointer to incoming message
/////
void API_RTC_DSP_update_res(msg_t * msg_ptr) {
  4022a0:	b508      	push	{r3, lr}
	
	// Accept command only if:
	//     1) payload length is equal to 1 byte
	//     2) payload is equal to 0 (NO ERROR)
	//     3) ARM is waiting for this message
	if ( (msg_ptr->packet_in[msg_h_payload_len] == 1) &&
  4022a2:	6903      	ldr	r3, [r0, #16]
  4022a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4022a8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
  4022ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4022b0:	d000      	beq.n	4022b4 <API_RTC_DSP_update_res+0x14>
  4022b2:	bd08      	pop	{r3, pc}
	     (msg_ptr->packet_in[msg_h_payload_1st_byte] == 0) &&
	     (comm_flags & SETTINGS_COMM_FLAG_RTC_REQUEST_MASK) ) {
  4022b4:	4b07      	ldr	r3, [pc, #28]	; (4022d4 <API_RTC_DSP_update_res+0x34>)
  4022b6:	881b      	ldrh	r3, [r3, #0]
	     (msg_ptr->packet_in[msg_h_payload_1st_byte] == 0) &&
  4022b8:	f013 0f04 	tst.w	r3, #4
  4022bc:	d0f9      	beq.n	4022b2 <API_RTC_DSP_update_res+0x12>
					
		// Update flag to avoid
		comm_flags &= ~SETTINGS_COMM_FLAG_RTC_REQUEST_MASK;
  4022be:	4a05      	ldr	r2, [pc, #20]	; (4022d4 <API_RTC_DSP_update_res+0x34>)
  4022c0:	8813      	ldrh	r3, [r2, #0]
  4022c2:	f023 0304 	bic.w	r3, r3, #4
  4022c6:	041b      	lsls	r3, r3, #16
  4022c8:	0c1b      	lsrs	r3, r3, #16
  4022ca:	8013      	strh	r3, [r2, #0]
		
		// force next communication
		comm_TX_counter_clear();
  4022cc:	4b02      	ldr	r3, [pc, #8]	; (4022d8 <API_RTC_DSP_update_res+0x38>)
  4022ce:	4798      	blx	r3
			
	}
	
}
  4022d0:	e7ef      	b.n	4022b2 <API_RTC_DSP_update_res+0x12>
  4022d2:	bf00      	nop
  4022d4:	20001e54 	.word	0x20001e54
  4022d8:	004050f5 	.word	0x004050f5

004022dc <API_UNIT_CONFIG_DSP_update_res>:

///// @brief Response to request of update DSP unit config.
/////
///// @param[in] msp_ptr Pointer to incoming message
/////
void API_UNIT_CONFIG_DSP_update_res(msg_t * msg_ptr) {
  4022dc:	b508      	push	{r3, lr}

	// Accept command only if:
	//     1) payload length is equal to 1 byte
	//     2) payload is equal to 0 (NO ERROR)
	//     3) ARM is waiting for this message
	if ( (msg_ptr->packet_in[msg_h_payload_len] == 1) &&
  4022de:	6903      	ldr	r3, [r0, #16]
  4022e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4022e4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
  4022e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4022ec:	d000      	beq.n	4022f0 <API_UNIT_CONFIG_DSP_update_res+0x14>
  4022ee:	bd08      	pop	{r3, pc}
	     (msg_ptr->packet_in[msg_h_payload_1st_byte] == 0) &&
	     (comm_flags & SETTINGS_COMM_FLAG_UNIT_CONFIG_REQUEST_MASK) ) {
  4022f0:	4b07      	ldr	r3, [pc, #28]	; (402310 <API_UNIT_CONFIG_DSP_update_res+0x34>)
  4022f2:	881b      	ldrh	r3, [r3, #0]
	     (msg_ptr->packet_in[msg_h_payload_1st_byte] == 0) &&
  4022f4:	f013 0f08 	tst.w	r3, #8
  4022f8:	d0f9      	beq.n	4022ee <API_UNIT_CONFIG_DSP_update_res+0x12>
					
		// Update flag to avoid
		comm_flags &= ~SETTINGS_COMM_FLAG_UNIT_CONFIG_REQUEST_MASK;
  4022fa:	4a05      	ldr	r2, [pc, #20]	; (402310 <API_UNIT_CONFIG_DSP_update_res+0x34>)
  4022fc:	8813      	ldrh	r3, [r2, #0]
  4022fe:	f023 0308 	bic.w	r3, r3, #8
  402302:	041b      	lsls	r3, r3, #16
  402304:	0c1b      	lsrs	r3, r3, #16
  402306:	8013      	strh	r3, [r2, #0]
		
		// force next communication
		comm_TX_counter_clear();
  402308:	4b02      	ldr	r3, [pc, #8]	; (402314 <API_UNIT_CONFIG_DSP_update_res+0x38>)
  40230a:	4798      	blx	r3
			
	}
	
}
  40230c:	e7ef      	b.n	4022ee <API_UNIT_CONFIG_DSP_update_res+0x12>
  40230e:	bf00      	nop
  402310:	20001e54 	.word	0x20001e54
  402314:	004050f5 	.word	0x004050f5

00402318 <API_UNIT_CALIBRATION_DSP_update_res>:

///// @brief Response to request of update DSP unit calibration.
/////
///// @param[in] msp_ptr Pointer to incoming message
/////
void API_UNIT_CALIBRATION_DSP_update_res(msg_t * msg_ptr) {
  402318:	b508      	push	{r3, lr}

	// Accept command only if:
	//     1) payload length is equal to 1 byte
	//     2) payload is equal to 0 (NO ERROR)
	//     3) ARM is waiting for this message
	if ( (msg_ptr->packet_in[msg_h_payload_len] == 1) &&
  40231a:	6903      	ldr	r3, [r0, #16]
  40231c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  402320:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
  402324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  402328:	d000      	beq.n	40232c <API_UNIT_CALIBRATION_DSP_update_res+0x14>
  40232a:	bd08      	pop	{r3, pc}
	     (msg_ptr->packet_in[msg_h_payload_1st_byte] == 0) &&
	     (comm_flags & SETTINGS_COMM_FLAG_UNIT_CALIBRATION_REQUEST_MASK) ) {
  40232c:	4b07      	ldr	r3, [pc, #28]	; (40234c <API_UNIT_CALIBRATION_DSP_update_res+0x34>)
  40232e:	881b      	ldrh	r3, [r3, #0]
	     (msg_ptr->packet_in[msg_h_payload_1st_byte] == 0) &&
  402330:	f013 0f10 	tst.w	r3, #16
  402334:	d0f9      	beq.n	40232a <API_UNIT_CALIBRATION_DSP_update_res+0x12>
		
		// Update flag to avoid
		comm_flags &= ~SETTINGS_COMM_FLAG_UNIT_CALIBRATION_REQUEST_MASK;
  402336:	4a05      	ldr	r2, [pc, #20]	; (40234c <API_UNIT_CALIBRATION_DSP_update_res+0x34>)
  402338:	8813      	ldrh	r3, [r2, #0]
  40233a:	f023 0310 	bic.w	r3, r3, #16
  40233e:	041b      	lsls	r3, r3, #16
  402340:	0c1b      	lsrs	r3, r3, #16
  402342:	8013      	strh	r3, [r2, #0]
		
		// force next communication
		comm_TX_counter_clear();
  402344:	4b02      	ldr	r3, [pc, #8]	; (402350 <API_UNIT_CALIBRATION_DSP_update_res+0x38>)
  402346:	4798      	blx	r3
		
	}
	
}
  402348:	e7ef      	b.n	40232a <API_UNIT_CALIBRATION_DSP_update_res+0x12>
  40234a:	bf00      	nop
  40234c:	20001e54 	.word	0x20001e54
  402350:	004050f5 	.word	0x004050f5

00402354 <API_CTRL_DSP_trend_150cycles_res>:

///// @brief Response to request of 150 cycles trend.
/////
///// @param[in] msp_ptr Pointer to incoming message
/////
void API_CTRL_DSP_trend_150cycles_res(msg_t * msg_ptr) {	
  402354:	b508      	push	{r3, lr}
	
	// Accept command only if ARM is waiting for this message
	if (comm_flags & SETTINGS_COMM_FLAG_TREND_150CYCLE_MASK) {
  402356:	4b21      	ldr	r3, [pc, #132]	; (4023dc <API_CTRL_DSP_trend_150cycles_res+0x88>)
  402358:	881b      	ldrh	r3, [r3, #0]
  40235a:	f013 0f20 	tst.w	r3, #32
  40235e:	d039      	beq.n	4023d4 <API_CTRL_DSP_trend_150cycles_res+0x80>

		// First msg (trend_request_counter=0). It must return 0x00.
		if ( (trend_150cycles_request_counter==0) && (msg_ptr->packet_in[msg_h_payload_len] == 1) && (msg_ptr->packet_in[msg_h_payload_1st_byte] == 0x00)) {
  402360:	4b1f      	ldr	r3, [pc, #124]	; (4023e0 <API_CTRL_DSP_trend_150cycles_res+0x8c>)
  402362:	8819      	ldrh	r1, [r3, #0]
  402364:	b959      	cbnz	r1, 40237e <API_CTRL_DSP_trend_150cycles_res+0x2a>
  402366:	6903      	ldr	r3, [r0, #16]
  402368:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40236c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
  402370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  402374:	d12e      	bne.n	4023d4 <API_CTRL_DSP_trend_150cycles_res+0x80>
			 trend_150cycles_request_counter++;
  402376:	2201      	movs	r2, #1
  402378:	4b19      	ldr	r3, [pc, #100]	; (4023e0 <API_CTRL_DSP_trend_150cycles_res+0x8c>)
  40237a:	801a      	strh	r2, [r3, #0]
  40237c:	e02a      	b.n	4023d4 <API_CTRL_DSP_trend_150cycles_res+0x80>
		}
		// Trend data (0 < trend_request_counter < (SETTINGS_TREND_MSG_NUMBER-1) ). Save data into trend structure.
		else if ((trend_150cycles_request_counter>0) && (trend_150cycles_request_counter<(SETTINGS_TREND_LENGHT_IN_MSG-1))) {
  40237e:	1e4b      	subs	r3, r1, #1
  402380:	b29b      	uxth	r3, r3
  402382:	2b09      	cmp	r3, #9
  402384:	d907      	bls.n	402396 <API_CTRL_DSP_trend_150cycles_res+0x42>
			copy_content( &msg_ptr->packet_in[msg_h_payload_1st_byte] , (((uint8_t *)&sdcard_trend_150cycles)+((trend_150cycles_request_counter-1)<<7)) , msg_ptr->packet_in[msg_h_payload_len] );
			trend_150cycles_request_counter++;
		}
		// Last msg. It must return 0xFF.
		else if ((trend_150cycles_request_counter==(SETTINGS_TREND_LENGHT_IN_MSG-1)) && (msg_ptr->packet_in[msg_h_payload_len] == 1) && (msg_ptr->packet_in[msg_h_payload_1st_byte] = 0xFF)) {
  402386:	290b      	cmp	r1, #11
  402388:	d111      	bne.n	4023ae <API_CTRL_DSP_trend_150cycles_res+0x5a>
  40238a:	7c43      	ldrb	r3, [r0, #17]
  40238c:	2b01      	cmp	r3, #1
  40238e:	d121      	bne.n	4023d4 <API_CTRL_DSP_trend_150cycles_res+0x80>
  402390:	23ff      	movs	r3, #255	; 0xff
  402392:	7483      	strb	r3, [r0, #18]
  402394:	e00f      	b.n	4023b6 <API_CTRL_DSP_trend_150cycles_res+0x62>
			copy_content( &msg_ptr->packet_in[msg_h_payload_1st_byte] , (((uint8_t *)&sdcard_trend_150cycles)+((trend_150cycles_request_counter-1)<<7)) , msg_ptr->packet_in[msg_h_payload_len] );
  402396:	3901      	subs	r1, #1
  402398:	7c42      	ldrb	r2, [r0, #17]
  40239a:	4b12      	ldr	r3, [pc, #72]	; (4023e4 <API_CTRL_DSP_trend_150cycles_res+0x90>)
  40239c:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
  4023a0:	3012      	adds	r0, #18
  4023a2:	4b11      	ldr	r3, [pc, #68]	; (4023e8 <API_CTRL_DSP_trend_150cycles_res+0x94>)
  4023a4:	4798      	blx	r3
			trend_150cycles_request_counter++;
  4023a6:	4a0e      	ldr	r2, [pc, #56]	; (4023e0 <API_CTRL_DSP_trend_150cycles_res+0x8c>)
  4023a8:	8813      	ldrh	r3, [r2, #0]
  4023aa:	3301      	adds	r3, #1
  4023ac:	8013      	strh	r3, [r2, #0]
		}
		// If no one, do nothing.

		// If trend structure is complete, clear communication flag and set sd-card task flag to force 
		// data storing in background.
		if (trend_150cycles_request_counter == SETTINGS_TREND_LENGHT_IN_MSG) {
  4023ae:	4b0c      	ldr	r3, [pc, #48]	; (4023e0 <API_CTRL_DSP_trend_150cycles_res+0x8c>)
  4023b0:	881b      	ldrh	r3, [r3, #0]
  4023b2:	2b0c      	cmp	r3, #12
  4023b4:	d10e      	bne.n	4023d4 <API_CTRL_DSP_trend_150cycles_res+0x80>
				
			// Update flags
			comm_flags &= ~SETTINGS_COMM_FLAG_TREND_150CYCLE_MASK;
  4023b6:	4a09      	ldr	r2, [pc, #36]	; (4023dc <API_CTRL_DSP_trend_150cycles_res+0x88>)
  4023b8:	8813      	ldrh	r3, [r2, #0]
  4023ba:	f023 0320 	bic.w	r3, r3, #32
  4023be:	041b      	lsls	r3, r3, #16
  4023c0:	0c1b      	lsrs	r3, r3, #16
  4023c2:	8013      	strh	r3, [r2, #0]
			sdcard_flags_task |= SDCARD_FLAGS_TASK_SAVE_TRENDS_150CYCLES;	
  4023c4:	4a09      	ldr	r2, [pc, #36]	; (4023ec <API_CTRL_DSP_trend_150cycles_res+0x98>)
  4023c6:	7813      	ldrb	r3, [r2, #0]
  4023c8:	f043 0301 	orr.w	r3, r3, #1
  4023cc:	7013      	strb	r3, [r2, #0]
			
			// Reset counter
			trend_150cycles_request_counter = 0;
  4023ce:	2200      	movs	r2, #0
  4023d0:	4b03      	ldr	r3, [pc, #12]	; (4023e0 <API_CTRL_DSP_trend_150cycles_res+0x8c>)
  4023d2:	801a      	strh	r2, [r3, #0]
		}	
	
	}

	// force next communication
	comm_TX_counter_clear();
  4023d4:	4b06      	ldr	r3, [pc, #24]	; (4023f0 <API_CTRL_DSP_trend_150cycles_res+0x9c>)
  4023d6:	4798      	blx	r3
  4023d8:	bd08      	pop	{r3, pc}
  4023da:	bf00      	nop
  4023dc:	20001e54 	.word	0x20001e54
  4023e0:	20000a8e 	.word	0x20000a8e
  4023e4:	20001830 	.word	0x20001830
  4023e8:	00405129 	.word	0x00405129
  4023ec:	20001cf0 	.word	0x20001cf0
  4023f0:	004050f5 	.word	0x004050f5

004023f4 <API_CTRL_DSP_trend_5minutes_res>:

///// @brief Response to request of 5 minutes trend.
/////
///// @param[in] msp_ptr Pointer to incoming message
/////
void API_CTRL_DSP_trend_5minutes_res(msg_t * msg_ptr) {
  4023f4:	b508      	push	{r3, lr}
	
	// Accept command only if ARM is waiting for this message
	if (comm_flags & SETTINGS_COMM_FLAG_TREND_5MINUTES_MASK) {
  4023f6:	4b21      	ldr	r3, [pc, #132]	; (40247c <API_CTRL_DSP_trend_5minutes_res+0x88>)
  4023f8:	881b      	ldrh	r3, [r3, #0]
  4023fa:	f013 0f40 	tst.w	r3, #64	; 0x40
  4023fe:	d039      	beq.n	402474 <API_CTRL_DSP_trend_5minutes_res+0x80>

		// First msg (trend_request_counter=0). It must return 0x00.
		if ( (trend_5minutes_request_counter==0) && (msg_ptr->packet_in[msg_h_payload_len] == 1) && (msg_ptr->packet_in[msg_h_payload_1st_byte] == 0x00)) {
  402400:	4b1f      	ldr	r3, [pc, #124]	; (402480 <API_CTRL_DSP_trend_5minutes_res+0x8c>)
  402402:	8819      	ldrh	r1, [r3, #0]
  402404:	b959      	cbnz	r1, 40241e <API_CTRL_DSP_trend_5minutes_res+0x2a>
  402406:	6903      	ldr	r3, [r0, #16]
  402408:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40240c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
  402410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  402414:	d12e      	bne.n	402474 <API_CTRL_DSP_trend_5minutes_res+0x80>
			trend_5minutes_request_counter++;
  402416:	2201      	movs	r2, #1
  402418:	4b19      	ldr	r3, [pc, #100]	; (402480 <API_CTRL_DSP_trend_5minutes_res+0x8c>)
  40241a:	801a      	strh	r2, [r3, #0]
  40241c:	e02a      	b.n	402474 <API_CTRL_DSP_trend_5minutes_res+0x80>
		}
		// Trend data (0 < trend_request_counter < (SETTINGS_TREND_MSG_NUMBER-1) ). Save data into trend structure.
		else if ((trend_5minutes_request_counter>0) && (trend_5minutes_request_counter<(SETTINGS_TREND_LENGHT_IN_MSG-1))) {
  40241e:	1e4b      	subs	r3, r1, #1
  402420:	b29b      	uxth	r3, r3
  402422:	2b09      	cmp	r3, #9
  402424:	d907      	bls.n	402436 <API_CTRL_DSP_trend_5minutes_res+0x42>
			copy_content( &msg_ptr->packet_in[msg_h_payload_1st_byte] , (((uint8_t *)&sdcard_trend_5minutes)+((trend_5minutes_request_counter-1)<<7)) , msg_ptr->packet_in[msg_h_payload_len] );
			trend_5minutes_request_counter++;
		}
		// Last msg. It must return 0xFF.
		else if ((trend_5minutes_request_counter==(SETTINGS_TREND_LENGHT_IN_MSG-1)) && (msg_ptr->packet_in[msg_h_payload_len] == 1) && (msg_ptr->packet_in[msg_h_payload_1st_byte] = 0xFF)) {
  402426:	290b      	cmp	r1, #11
  402428:	d111      	bne.n	40244e <API_CTRL_DSP_trend_5minutes_res+0x5a>
  40242a:	7c43      	ldrb	r3, [r0, #17]
  40242c:	2b01      	cmp	r3, #1
  40242e:	d121      	bne.n	402474 <API_CTRL_DSP_trend_5minutes_res+0x80>
  402430:	23ff      	movs	r3, #255	; 0xff
  402432:	7483      	strb	r3, [r0, #18]
  402434:	e00f      	b.n	402456 <API_CTRL_DSP_trend_5minutes_res+0x62>
			copy_content( &msg_ptr->packet_in[msg_h_payload_1st_byte] , (((uint8_t *)&sdcard_trend_5minutes)+((trend_5minutes_request_counter-1)<<7)) , msg_ptr->packet_in[msg_h_payload_len] );
  402436:	3901      	subs	r1, #1
  402438:	7c42      	ldrb	r2, [r0, #17]
  40243a:	4b12      	ldr	r3, [pc, #72]	; (402484 <API_CTRL_DSP_trend_5minutes_res+0x90>)
  40243c:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
  402440:	3012      	adds	r0, #18
  402442:	4b11      	ldr	r3, [pc, #68]	; (402488 <API_CTRL_DSP_trend_5minutes_res+0x94>)
  402444:	4798      	blx	r3
			trend_5minutes_request_counter++;
  402446:	4a0e      	ldr	r2, [pc, #56]	; (402480 <API_CTRL_DSP_trend_5minutes_res+0x8c>)
  402448:	8813      	ldrh	r3, [r2, #0]
  40244a:	3301      	adds	r3, #1
  40244c:	8013      	strh	r3, [r2, #0]
		}
		// If no one, do nothing.

		// If trend structure is complete, clear communication flag and set sd-card task flag to force
		// data storing in background.
		if (trend_5minutes_request_counter == SETTINGS_TREND_LENGHT_IN_MSG) {
  40244e:	4b0c      	ldr	r3, [pc, #48]	; (402480 <API_CTRL_DSP_trend_5minutes_res+0x8c>)
  402450:	881b      	ldrh	r3, [r3, #0]
  402452:	2b0c      	cmp	r3, #12
  402454:	d10e      	bne.n	402474 <API_CTRL_DSP_trend_5minutes_res+0x80>
			
			// Update flags
			comm_flags &= ~SETTINGS_COMM_FLAG_TREND_5MINUTES_MASK;
  402456:	4a09      	ldr	r2, [pc, #36]	; (40247c <API_CTRL_DSP_trend_5minutes_res+0x88>)
  402458:	8813      	ldrh	r3, [r2, #0]
  40245a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  40245e:	041b      	lsls	r3, r3, #16
  402460:	0c1b      	lsrs	r3, r3, #16
  402462:	8013      	strh	r3, [r2, #0]
			sdcard_flags_task |= SDCARD_FLAGS_TASK_SAVE_TRENDS_5MINUTES;
  402464:	4a09      	ldr	r2, [pc, #36]	; (40248c <API_CTRL_DSP_trend_5minutes_res+0x98>)
  402466:	7813      	ldrb	r3, [r2, #0]
  402468:	f043 0302 	orr.w	r3, r3, #2
  40246c:	7013      	strb	r3, [r2, #0]
			
			// Reset counter
			trend_5minutes_request_counter = 0;
  40246e:	2200      	movs	r2, #0
  402470:	4b03      	ldr	r3, [pc, #12]	; (402480 <API_CTRL_DSP_trend_5minutes_res+0x8c>)
  402472:	801a      	strh	r2, [r3, #0]
		}
		
	}

	// force next communication
	comm_TX_counter_clear();
  402474:	4b06      	ldr	r3, [pc, #24]	; (402490 <API_CTRL_DSP_trend_5minutes_res+0x9c>)
  402476:	4798      	blx	r3
  402478:	bd08      	pop	{r3, pc}
  40247a:	bf00      	nop
  40247c:	20001e54 	.word	0x20001e54
  402480:	20000a90 	.word	0x20000a90
  402484:	20001300 	.word	0x20001300
  402488:	00405129 	.word	0x00405129
  40248c:	20001cf0 	.word	0x20001cf0
  402490:	004050f5 	.word	0x004050f5

00402494 <API_CTRL_DSP_event_buffer_res>:

///// @brief Response to request of event buffer.
/////
///// @param[in] msp_ptr Pointer to incoming message
/////
void API_CTRL_DSP_event_buffer_res(msg_t * msg_ptr) {
  402494:	b508      	push	{r3, lr}
	
	// Accept command only if ARM is waiting for this message
	if (comm_flags & SETTINGS_COMM_FLAG_EVENT_BUFFER_MASK) {
  402496:	4b25      	ldr	r3, [pc, #148]	; (40252c <API_CTRL_DSP_event_buffer_res+0x98>)
  402498:	881b      	ldrh	r3, [r3, #0]
  40249a:	f413 7f80 	tst.w	r3, #256	; 0x100
  40249e:	d005      	beq.n	4024ac <API_CTRL_DSP_event_buffer_res+0x18>

		// First msg (event_request_counter=0).
		if ( (event_request_counter==0) && (msg_ptr->packet_in[msg_h_payload_len] == sizeof(sdcard_event_buffer_info) ) ) {
  4024a0:	4b23      	ldr	r3, [pc, #140]	; (402530 <API_CTRL_DSP_event_buffer_res+0x9c>)
  4024a2:	881b      	ldrh	r3, [r3, #0]
  4024a4:	b9a3      	cbnz	r3, 4024d0 <API_CTRL_DSP_event_buffer_res+0x3c>
  4024a6:	7c43      	ldrb	r3, [r0, #17]
  4024a8:	2b06      	cmp	r3, #6
  4024aa:	d002      	beq.n	4024b2 <API_CTRL_DSP_event_buffer_res+0x1e>
		}
		
	}

	// force next communication
	comm_TX_counter_clear();
  4024ac:	4b21      	ldr	r3, [pc, #132]	; (402534 <API_CTRL_DSP_event_buffer_res+0xa0>)
  4024ae:	4798      	blx	r3
  4024b0:	bd08      	pop	{r3, pc}
			copy_content( &msg_ptr->packet_in[msg_h_payload_1st_byte] , ((uint8_t *)&sdcard_event_buffer_info[0]) , sizeof(sdcard_event_buffer_info) );
  4024b2:	2206      	movs	r2, #6
  4024b4:	4920      	ldr	r1, [pc, #128]	; (402538 <API_CTRL_DSP_event_buffer_res+0xa4>)
  4024b6:	3012      	adds	r0, #18
  4024b8:	4b20      	ldr	r3, [pc, #128]	; (40253c <API_CTRL_DSP_event_buffer_res+0xa8>)
  4024ba:	4798      	blx	r3
			sdcard_flags_task |= SDCARD_FLAGS_TASK_SAVE_EVENT_BUFFER_INFO;
  4024bc:	4a20      	ldr	r2, [pc, #128]	; (402540 <API_CTRL_DSP_event_buffer_res+0xac>)
  4024be:	7813      	ldrb	r3, [r2, #0]
  4024c0:	f043 0308 	orr.w	r3, r3, #8
  4024c4:	7013      	strb	r3, [r2, #0]
			event_request_counter++;
  4024c6:	4a1a      	ldr	r2, [pc, #104]	; (402530 <API_CTRL_DSP_event_buffer_res+0x9c>)
  4024c8:	8813      	ldrh	r3, [r2, #0]
  4024ca:	3301      	adds	r3, #1
  4024cc:	8013      	strh	r3, [r2, #0]
  4024ce:	e7ed      	b.n	4024ac <API_CTRL_DSP_event_buffer_res+0x18>
		else if ( (event_request_counter>0) && (event_request_counter<=SETTINGS_EVENT_BUFFER_LENGHT) && (msg_ptr->packet_in[msg_h_payload_len] == sizeof(sdcard_event_buffer)) ) {
  4024d0:	1e5a      	subs	r2, r3, #1
  4024d2:	b292      	uxth	r2, r2
  4024d4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
  4024d8:	d202      	bcs.n	4024e0 <API_CTRL_DSP_event_buffer_res+0x4c>
  4024da:	7c42      	ldrb	r2, [r0, #17]
  4024dc:	2a12      	cmp	r2, #18
  4024de:	d016      	beq.n	40250e <API_CTRL_DSP_event_buffer_res+0x7a>
		else if ((event_request_counter==(SETTINGS_EVENT_BUFFER_LENGHT+1)) && (msg_ptr->packet_in[msg_h_payload_len] == 1) && (msg_ptr->packet_in[msg_h_payload_1st_byte] == 0)) {
  4024e0:	f240 4201 	movw	r2, #1025	; 0x401
  4024e4:	4293      	cmp	r3, r2
  4024e6:	d1e1      	bne.n	4024ac <API_CTRL_DSP_event_buffer_res+0x18>
  4024e8:	6903      	ldr	r3, [r0, #16]
  4024ea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4024ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
  4024f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4024f6:	d1d9      	bne.n	4024ac <API_CTRL_DSP_event_buffer_res+0x18>
			event_request_counter=0;		
  4024f8:	2200      	movs	r2, #0
  4024fa:	4b0d      	ldr	r3, [pc, #52]	; (402530 <API_CTRL_DSP_event_buffer_res+0x9c>)
  4024fc:	801a      	strh	r2, [r3, #0]
			comm_flags &= ~SETTINGS_COMM_FLAG_EVENT_BUFFER_MASK;
  4024fe:	4a0b      	ldr	r2, [pc, #44]	; (40252c <API_CTRL_DSP_event_buffer_res+0x98>)
  402500:	8813      	ldrh	r3, [r2, #0]
  402502:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  402506:	041b      	lsls	r3, r3, #16
  402508:	0c1b      	lsrs	r3, r3, #16
  40250a:	8013      	strh	r3, [r2, #0]
  40250c:	e7ce      	b.n	4024ac <API_CTRL_DSP_event_buffer_res+0x18>
			copy_content( &msg_ptr->packet_in[msg_h_payload_1st_byte] , ((uint8_t *)&sdcard_event_buffer[0]) , sizeof(sdcard_event_buffer) );
  40250e:	490d      	ldr	r1, [pc, #52]	; (402544 <API_CTRL_DSP_event_buffer_res+0xb0>)
  402510:	4410      	add	r0, r2
  402512:	4b0a      	ldr	r3, [pc, #40]	; (40253c <API_CTRL_DSP_event_buffer_res+0xa8>)
  402514:	4798      	blx	r3
			sdcard_flags_task |= SDCARD_FLAGS_TASK_SAVE_EVENT_BUFFER;
  402516:	4a0a      	ldr	r2, [pc, #40]	; (402540 <API_CTRL_DSP_event_buffer_res+0xac>)
  402518:	7813      	ldrb	r3, [r2, #0]
  40251a:	f043 0310 	orr.w	r3, r3, #16
  40251e:	7013      	strb	r3, [r2, #0]
			event_request_counter++;
  402520:	4a03      	ldr	r2, [pc, #12]	; (402530 <API_CTRL_DSP_event_buffer_res+0x9c>)
  402522:	8813      	ldrh	r3, [r2, #0]
  402524:	3301      	adds	r3, #1
  402526:	8013      	strh	r3, [r2, #0]
  402528:	e7c0      	b.n	4024ac <API_CTRL_DSP_event_buffer_res+0x18>
  40252a:	bf00      	nop
  40252c:	20001e54 	.word	0x20001e54
  402530:	20000a8c 	.word	0x20000a8c
  402534:	004050f5 	.word	0x004050f5
  402538:	20001cf4 	.word	0x20001cf4
  40253c:	00405129 	.word	0x00405129
  402540:	20001cf0 	.word	0x20001cf0
  402544:	200012ec 	.word	0x200012ec

00402548 <API_CTRL_DSP_event_det_res>:

///// @brief Response to request of detection info.
/////
///// @param[in] msp_ptr Pointer to incoming message
/////
void API_CTRL_DSP_event_det_res(msg_t * msg_ptr) {
  402548:	b508      	push	{r3, lr}
	
	// Accept command only if:
	//     1) payload length is equal to sizeof(event_det_t)
	//     2) ARM is waiting for this message
	if ( (msg_ptr->packet_in[msg_h_payload_len] == sizeof(event_det_t)) &&
  40254a:	7c43      	ldrb	r3, [r0, #17]
  40254c:	2b18      	cmp	r3, #24
  40254e:	d000      	beq.n	402552 <API_CTRL_DSP_event_det_res+0xa>
  402550:	bd08      	pop	{r3, pc}
	     (comm_flags & SETTINGS_COMM_FLAG_EVENT_DET_MASK) ) {
  402552:	4b0c      	ldr	r3, [pc, #48]	; (402584 <API_CTRL_DSP_event_det_res+0x3c>)
  402554:	881b      	ldrh	r3, [r3, #0]
	if ( (msg_ptr->packet_in[msg_h_payload_len] == sizeof(event_det_t)) &&
  402556:	f413 7f00 	tst.w	r3, #512	; 0x200
  40255a:	d0f9      	beq.n	402550 <API_CTRL_DSP_event_det_res+0x8>

		// copy data to temporal variable
		copy_content( &msg_ptr->packet_in[msg_h_payload_1st_byte] ,
  40255c:	2218      	movs	r2, #24
  40255e:	490a      	ldr	r1, [pc, #40]	; (402588 <API_CTRL_DSP_event_det_res+0x40>)
  402560:	3012      	adds	r0, #18
  402562:	4b0a      	ldr	r3, [pc, #40]	; (40258c <API_CTRL_DSP_event_det_res+0x44>)
  402564:	4798      	blx	r3
		              (uint8_t *)&sdcard_event_det ,
					  sizeof(event_det_t));

		// Update flags
		comm_flags &= ~SETTINGS_COMM_FLAG_EVENT_DET_MASK;
  402566:	4a07      	ldr	r2, [pc, #28]	; (402584 <API_CTRL_DSP_event_det_res+0x3c>)
  402568:	8813      	ldrh	r3, [r2, #0]
  40256a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  40256e:	041b      	lsls	r3, r3, #16
  402570:	0c1b      	lsrs	r3, r3, #16
  402572:	8013      	strh	r3, [r2, #0]
		sdcard_flags_task |= SDCARD_FLAGS_TASK_SAVE_EVENT_DET_INFO;
  402574:	4a06      	ldr	r2, [pc, #24]	; (402590 <API_CTRL_DSP_event_det_res+0x48>)
  402576:	7813      	ldrb	r3, [r2, #0]
  402578:	f043 0304 	orr.w	r3, r3, #4
  40257c:	7013      	strb	r3, [r2, #0]
		
		// force next communication
		comm_TX_counter_clear();
  40257e:	4b05      	ldr	r3, [pc, #20]	; (402594 <API_CTRL_DSP_event_det_res+0x4c>)
  402580:	4798      	blx	r3

	}
	
}
  402582:	e7e5      	b.n	402550 <API_CTRL_DSP_event_det_res+0x8>
  402584:	20001e54 	.word	0x20001e54
  402588:	20001818 	.word	0x20001818
  40258c:	00405129 	.word	0x00405129
  402590:	20001cf0 	.word	0x20001cf0
  402594:	004050f5 	.word	0x004050f5

00402598 <API_FW_ARM_version_req>:
/// @brief Response to FW version request.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_FW_ARM_version_req( msg_t * msg_ptr )
{
  402598:	b510      	push	{r4, lr}
  40259a:	b088      	sub	sp, #32

	// by default size = 2 + 12 + 9
	const uint8_t fw_version[2 + sizeof(__DATE__) + sizeof(__TIME__)] = {
  40259c:	2302      	movs	r3, #2
  40259e:	f88d 3008 	strb.w	r3, [sp, #8]
  4025a2:	2303      	movs	r3, #3
  4025a4:	f88d 3009 	strb.w	r3, [sp, #9]
  4025a8:	2353      	movs	r3, #83	; 0x53
  4025aa:	f88d 300a 	strb.w	r3, [sp, #10]
  4025ae:	2365      	movs	r3, #101	; 0x65
  4025b0:	f88d 300b 	strb.w	r3, [sp, #11]
  4025b4:	2370      	movs	r3, #112	; 0x70
  4025b6:	f88d 300c 	strb.w	r3, [sp, #12]
  4025ba:	2220      	movs	r2, #32
  4025bc:	f88d 200d 	strb.w	r2, [sp, #13]
  4025c0:	2331      	movs	r3, #49	; 0x31
  4025c2:	f88d 300e 	strb.w	r3, [sp, #14]
  4025c6:	2433      	movs	r4, #51	; 0x33
  4025c8:	f88d 400f 	strb.w	r4, [sp, #15]
  4025cc:	f88d 2010 	strb.w	r2, [sp, #16]
  4025d0:	2232      	movs	r2, #50	; 0x32
  4025d2:	f88d 2011 	strb.w	r2, [sp, #17]
  4025d6:	2130      	movs	r1, #48	; 0x30
  4025d8:	f88d 1012 	strb.w	r1, [sp, #18]
  4025dc:	f88d 2013 	strb.w	r2, [sp, #19]
  4025e0:	f88d 3014 	strb.w	r3, [sp, #20]
  4025e4:	2200      	movs	r2, #0
  4025e6:	f88d 2015 	strb.w	r2, [sp, #21]
  4025ea:	f88d 3016 	strb.w	r3, [sp, #22]
  4025ee:	2137      	movs	r1, #55	; 0x37
  4025f0:	f88d 1017 	strb.w	r1, [sp, #23]
  4025f4:	213a      	movs	r1, #58	; 0x3a
  4025f6:	f88d 1018 	strb.w	r1, [sp, #24]
  4025fa:	f88d 3019 	strb.w	r3, [sp, #25]
  4025fe:	f88d 401a 	strb.w	r4, [sp, #26]
  402602:	f88d 101b 	strb.w	r1, [sp, #27]
  402606:	2335      	movs	r3, #53	; 0x35
  402608:	f88d 301c 	strb.w	r3, [sp, #28]
  40260c:	f88d 301d 	strb.w	r3, [sp, #29]
  402610:	f88d 201e 	strb.w	r2, [sp, #30]
		SETTINGS_ARM_FW_VERSION,SETTINGS_ARM_FW_VERSION_ENG_BUILD,
		__DATE__[0],__DATE__[1],__DATE__[2],__DATE__[3],__DATE__[4],__DATE__[5],__DATE__[6],__DATE__[7],__DATE__[8],__DATE__[9],__DATE__[10],__DATE__[11],
		__TIME__[0],__TIME__[1],__TIME__[2],__TIME__[3],__TIME__[4],__TIME__[5],__TIME__[6],__TIME__[7],__TIME__[8]};

	comm_send_msg( msg_ptr->uart_ptr ,
  402614:	7c02      	ldrb	r2, [r0, #16]
  402616:	3201      	adds	r2, #1
  402618:	7b81      	ldrb	r1, [r0, #14]
  40261a:	6800      	ldr	r0, [r0, #0]
  40261c:	ab02      	add	r3, sp, #8
  40261e:	9300      	str	r3, [sp, #0]
  402620:	2317      	movs	r3, #23
  402622:	b2d2      	uxtb	r2, r2
  402624:	4c01      	ldr	r4, [pc, #4]	; (40262c <API_FW_ARM_version_req+0x94>)
  402626:	47a0      	blx	r4
                   msg_ptr->packet_in[msg_h_src_id] ,
			       msg_ptr->packet_in[msg_h_msg_id]+1 ,
			       sizeof(fw_version) ,
				   (uint8_t *)&fw_version[0]);

}
  402628:	b008      	add	sp, #32
  40262a:	bd10      	pop	{r4, pc}
  40262c:	00404ff1 	.word	0x00404ff1

00402630 <API_FW_ARM_echo_req>:
/// @brief Send echo back to source.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_FW_ARM_echo_req( msg_t * msg_ptr )
{
  402630:	b510      	push	{r4, lr}
  402632:	b082      	sub	sp, #8

	comm_send_msg( msg_ptr->uart_ptr ,
  402634:	7c43      	ldrb	r3, [r0, #17]
  402636:	7c02      	ldrb	r2, [r0, #16]
  402638:	3201      	adds	r2, #1
  40263a:	7b81      	ldrb	r1, [r0, #14]
  40263c:	4604      	mov	r4, r0
  40263e:	f854 0b12 	ldr.w	r0, [r4], #18
  402642:	9400      	str	r4, [sp, #0]
  402644:	b2d2      	uxtb	r2, r2
  402646:	4c02      	ldr	r4, [pc, #8]	; (402650 <API_FW_ARM_echo_req+0x20>)
  402648:	47a0      	blx	r4
				   msg_ptr->packet_in[msg_h_src_id] ,
				   msg_ptr->packet_in[msg_h_msg_id]+1 ,
				   msg_ptr->packet_in[msg_h_payload_len] ,
				   (uint8_t *)&msg_ptr->packet_in[msg_h_payload_1st_byte]);

}
  40264a:	b002      	add	sp, #8
  40264c:	bd10      	pop	{r4, pc}
  40264e:	bf00      	nop
  402650:	00404ff1 	.word	0x00404ff1

00402654 <API_FW_ARM_unique_id_req>:
/// @brief Send ARM unique ID.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_FW_ARM_unique_id_req( msg_t * msg_ptr )
{
  402654:	b510      	push	{r4, lr}
  402656:	b082      	sub	sp, #8

	comm_send_msg( msg_ptr->uart_ptr ,
  402658:	7c02      	ldrb	r2, [r0, #16]
  40265a:	3201      	adds	r2, #1
  40265c:	7b81      	ldrb	r1, [r0, #14]
  40265e:	6800      	ldr	r0, [r0, #0]
  402660:	4b03      	ldr	r3, [pc, #12]	; (402670 <API_FW_ARM_unique_id_req+0x1c>)
  402662:	9300      	str	r3, [sp, #0]
  402664:	2310      	movs	r3, #16
  402666:	b2d2      	uxtb	r2, r2
  402668:	4c02      	ldr	r4, [pc, #8]	; (402674 <API_FW_ARM_unique_id_req+0x20>)
  40266a:	47a0      	blx	r4
				   msg_ptr->packet_in[msg_h_src_id] ,
				   msg_ptr->packet_in[msg_h_msg_id]+1 ,
				   sizeof(ARM_unique_id) ,
				   (uint8_t *)ARM_unique_id);

}
  40266c:	b002      	add	sp, #8
  40266e:	bd10      	pop	{r4, pc}
  402670:	20001da0 	.word	0x20001da0
  402674:	00404ff1 	.word	0x00404ff1

00402678 <API_FW_ARM_reset_req>:

/// @brief Request ARM reset.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_FW_ARM_reset_req( msg_t * msg_ptr ) {
  402678:	b570      	push	{r4, r5, r6, lr}
  40267a:	b084      	sub	sp, #16
  40267c:	4605      	mov	r5, r0
	
	uint8_t response = 1;
  40267e:	2601      	movs	r6, #1
  402680:	ac04      	add	r4, sp, #16
  402682:	f804 6d01 	strb.w	r6, [r4, #-1]!
	
	system_reset_ARM();
  402686:	4b06      	ldr	r3, [pc, #24]	; (4026a0 <API_FW_ARM_reset_req+0x28>)
  402688:	4798      	blx	r3
	
	// send error
	comm_send_msg( msg_ptr->uart_ptr ,
  40268a:	7c2a      	ldrb	r2, [r5, #16]
  40268c:	4432      	add	r2, r6
  40268e:	7ba9      	ldrb	r1, [r5, #14]
  402690:	6828      	ldr	r0, [r5, #0]
  402692:	9400      	str	r4, [sp, #0]
  402694:	4633      	mov	r3, r6
  402696:	b2d2      	uxtb	r2, r2
  402698:	4c02      	ldr	r4, [pc, #8]	; (4026a4 <API_FW_ARM_reset_req+0x2c>)
  40269a:	47a0      	blx	r4
	               msg_ptr->packet_in[msg_h_src_id] ,
	               msg_ptr->packet_in[msg_h_msg_id]+1 ,
	               1 ,
	               &response);
	
}
  40269c:	b004      	add	sp, #16
  40269e:	bd70      	pop	{r4, r5, r6, pc}
  4026a0:	00405659 	.word	0x00405659
  4026a4:	00404ff1 	.word	0x00404ff1

004026a8 <API_FW_ARM_unknow_msg_id>:
/// @param[in] msp_ptr Pointer to incoming message
///
void API_FW_ARM_unknow_msg_id( msg_t * msg_ptr ) {

	// Do not send a error message (id unknown) if DSP is the source.
	if (msg_ptr->packet_in[msg_h_src_id] != SETTINGS_DSP_ID ) {
  4026a8:	7b81      	ldrb	r1, [r0, #14]
  4026aa:	2933      	cmp	r1, #51	; 0x33
  4026ac:	d00b      	beq.n	4026c6 <API_FW_ARM_unknow_msg_id+0x1e>
void API_FW_ARM_unknow_msg_id( msg_t * msg_ptr ) {
  4026ae:	b510      	push	{r4, lr}
  4026b0:	b082      	sub	sp, #8

		comm_send_msg( msg_ptr->uart_ptr ,
  4026b2:	4603      	mov	r3, r0
  4026b4:	f853 0b10 	ldr.w	r0, [r3], #16
  4026b8:	9300      	str	r3, [sp, #0]
  4026ba:	2301      	movs	r3, #1
  4026bc:	220f      	movs	r2, #15
  4026be:	4c02      	ldr	r4, [pc, #8]	; (4026c8 <API_FW_ARM_unknow_msg_id+0x20>)
  4026c0:	47a0      	blx	r4
				       1 ,
					   (uint8_t *)&msg_ptr->packet_in[msg_h_msg_id]);

	}

}
  4026c2:	b002      	add	sp, #8
  4026c4:	bd10      	pop	{r4, pc}
  4026c6:	4770      	bx	lr
  4026c8:	00404ff1 	.word	0x00404ff1

004026cc <API_RTC_ARM_send_req>:

/// @brief Send real time clock.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_RTC_ARM_send_req( msg_t * msg_ptr ) {
  4026cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4026ce:	b083      	sub	sp, #12
  4026d0:	4606      	mov	r6, r0
	
	// get time and date
	rtc_get_time(RTC, &data.hour, &data.minute, &data.second);
  4026d2:	4c10      	ldr	r4, [pc, #64]	; (402714 <API_RTC_ARM_send_req+0x48>)
  4026d4:	4f10      	ldr	r7, [pc, #64]	; (402718 <API_RTC_ARM_send_req+0x4c>)
  4026d6:	4623      	mov	r3, r4
  4026d8:	1f22      	subs	r2, r4, #4
  4026da:	f1a4 0108 	sub.w	r1, r4, #8
  4026de:	4638      	mov	r0, r7
  4026e0:	4d0e      	ldr	r5, [pc, #56]	; (40271c <API_RTC_ARM_send_req+0x50>)
  4026e2:	47a8      	blx	r5
	rtc_get_date(RTC, &data.year, &data.month, &data.day, &data.week);
  4026e4:	f1a4 0518 	sub.w	r5, r4, #24
  4026e8:	f1a4 030c 	sub.w	r3, r4, #12
  4026ec:	9300      	str	r3, [sp, #0]
  4026ee:	f1a4 0310 	sub.w	r3, r4, #16
  4026f2:	f1a4 0214 	sub.w	r2, r4, #20
  4026f6:	4629      	mov	r1, r5
  4026f8:	4638      	mov	r0, r7
  4026fa:	4c09      	ldr	r4, [pc, #36]	; (402720 <API_RTC_ARM_send_req+0x54>)
  4026fc:	47a0      	blx	r4

	comm_send_msg( msg_ptr->uart_ptr ,
  4026fe:	7c32      	ldrb	r2, [r6, #16]
  402700:	3201      	adds	r2, #1
  402702:	7bb1      	ldrb	r1, [r6, #14]
  402704:	6830      	ldr	r0, [r6, #0]
  402706:	9500      	str	r5, [sp, #0]
  402708:	231c      	movs	r3, #28
  40270a:	b2d2      	uxtb	r2, r2
  40270c:	4c05      	ldr	r4, [pc, #20]	; (402724 <API_RTC_ARM_send_req+0x58>)
  40270e:	47a0      	blx	r4
/*	comm_send_msg( msg_ptr->uart_ptr ,
                   msg_ptr->packet_in[msg_h_src_id] ,
	               msg_ptr->packet_in[msg_h_msg_id]+1 ,
	               sizeof(rtc_time_and_date_t),
	               (uint8_t *)&temp_data);*/
}
  402710:	b003      	add	sp, #12
  402712:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402714:	20000f00 	.word	0x20000f00
  402718:	400e1460 	.word	0x400e1460
  40271c:	00406f17 	.word	0x00406f17
  402720:	00407005 	.word	0x00407005
  402724:	00404ff1 	.word	0x00404ff1

00402728 <API_RTC_ARM_update_req>:

void API_RTC_ARM_update_req( msg_t * msg_ptr ) {
  402728:	b5f0      	push	{r4, r5, r6, r7, lr}
  40272a:	b085      	sub	sp, #20
  40272c:	4604      	mov	r4, r0

	uint8_t response;

    // Accept command only if payload length is equal to 0
    if (msg_ptr->packet_in[msg_h_payload_len] == sizeof(rtc_time_and_date_t) )
  40272e:	7c43      	ldrb	r3, [r0, #17]
  402730:	2b1c      	cmp	r3, #28
  402732:	d00f      	beq.n	402754 <API_RTC_ARM_update_req+0x2c>
	}
	else
	{

		// response
		response = 0x01;
  402734:	2301      	movs	r3, #1
  402736:	f88d 300f 	strb.w	r3, [sp, #15]

	}

	comm_send_msg( msg_ptr->uart_ptr ,
  40273a:	7c22      	ldrb	r2, [r4, #16]
  40273c:	3201      	adds	r2, #1
  40273e:	7ba1      	ldrb	r1, [r4, #14]
  402740:	6820      	ldr	r0, [r4, #0]
  402742:	f10d 030f 	add.w	r3, sp, #15
  402746:	9300      	str	r3, [sp, #0]
  402748:	2301      	movs	r3, #1
  40274a:	b2d2      	uxtb	r2, r2
  40274c:	4c11      	ldr	r4, [pc, #68]	; (402794 <API_RTC_ARM_update_req+0x6c>)
  40274e:	47a0      	blx	r4
	               msg_ptr->packet_in[msg_h_src_id] ,
                   msg_ptr->packet_in[msg_h_msg_id]+1 ,
	               1 ,
	               &response);

}
  402750:	b005      	add	sp, #20
  402752:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	copy_content( (uint8_t *)&msg_ptr->packet_in[msg_h_payload_1st_byte] ,
  402754:	4d10      	ldr	r5, [pc, #64]	; (402798 <API_RTC_ARM_update_req+0x70>)
  402756:	221c      	movs	r2, #28
  402758:	4629      	mov	r1, r5
  40275a:	3012      	adds	r0, #18
  40275c:	4b0f      	ldr	r3, [pc, #60]	; (40279c <API_RTC_ARM_update_req+0x74>)
  40275e:	4798      	blx	r3
   		rtc_set_time(RTC,data.hour,data.minute,data.second);
  402760:	4e0f      	ldr	r6, [pc, #60]	; (4027a0 <API_RTC_ARM_update_req+0x78>)
  402762:	69ab      	ldr	r3, [r5, #24]
  402764:	696a      	ldr	r2, [r5, #20]
  402766:	6929      	ldr	r1, [r5, #16]
  402768:	4630      	mov	r0, r6
  40276a:	4f0e      	ldr	r7, [pc, #56]	; (4027a4 <API_RTC_ARM_update_req+0x7c>)
  40276c:	47b8      	blx	r7
   		rtc_set_date(RTC,data.year,data.month,data.day,data.week);
  40276e:	68ab      	ldr	r3, [r5, #8]
  402770:	686a      	ldr	r2, [r5, #4]
  402772:	6829      	ldr	r1, [r5, #0]
  402774:	68e8      	ldr	r0, [r5, #12]
  402776:	9000      	str	r0, [sp, #0]
  402778:	4630      	mov	r0, r6
  40277a:	4d0b      	ldr	r5, [pc, #44]	; (4027a8 <API_RTC_ARM_update_req+0x80>)
  40277c:	47a8      	blx	r5
		comm_flags |= SETTINGS_COMM_FLAG_RTC_REQUEST_MASK;
  40277e:	4a0b      	ldr	r2, [pc, #44]	; (4027ac <API_RTC_ARM_update_req+0x84>)
  402780:	8813      	ldrh	r3, [r2, #0]
  402782:	b29b      	uxth	r3, r3
  402784:	f043 0304 	orr.w	r3, r3, #4
  402788:	8013      	strh	r3, [r2, #0]
		response = 0x00;
  40278a:	2300      	movs	r3, #0
  40278c:	f88d 300f 	strb.w	r3, [sp, #15]
  402790:	e7d3      	b.n	40273a <API_RTC_ARM_update_req+0x12>
  402792:	bf00      	nop
  402794:	00404ff1 	.word	0x00404ff1
  402798:	20000ee8 	.word	0x20000ee8
  40279c:	00405129 	.word	0x00405129
  4027a0:	400e1460 	.word	0x400e1460
  4027a4:	00406f71 	.word	0x00406f71
  4027a8:	00407079 	.word	0x00407079
  4027ac:	20001e54 	.word	0x20001e54

004027b0 <API_SDCARD_dir_open_req>:
/// @brief Response to open directory.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_SDCARD_dir_open_req( msg_t * msg_ptr )
{
  4027b0:	b530      	push	{r4, r5, lr}
  4027b2:	b083      	sub	sp, #12
  4027b4:	4604      	mov	r4, r0

	// predefine device root directory
	memset( (void *)&sdcard_api_string , 0 , sizeof(sdcard_api_string) );
  4027b6:	4d10      	ldr	r5, [pc, #64]	; (4027f8 <API_SDCARD_dir_open_req+0x48>)
  4027b8:	2280      	movs	r2, #128	; 0x80
  4027ba:	2100      	movs	r1, #0
  4027bc:	4628      	mov	r0, r5
  4027be:	4b0f      	ldr	r3, [pc, #60]	; (4027fc <API_SDCARD_dir_open_req+0x4c>)
  4027c0:	4798      	blx	r3
	sprintf( (char *)&sdcard_api_string ,"%s" , "0:/"); // store first three characteres
  4027c2:	4b0f      	ldr	r3, [pc, #60]	; (402800 <API_SDCARD_dir_open_req+0x50>)
  4027c4:	6818      	ldr	r0, [r3, #0]
  4027c6:	4629      	mov	r1, r5
  4027c8:	f841 0b03 	str.w	r0, [r1], #3
	
	// copy name of directory
	copy_content( (uint8_t *)&msg_ptr->packet_in[msg_h_payload_1st_byte] ,
  4027cc:	7c62      	ldrb	r2, [r4, #17]
  4027ce:	f104 0012 	add.w	r0, r4, #18
  4027d2:	4b0c      	ldr	r3, [pc, #48]	; (402804 <API_SDCARD_dir_open_req+0x54>)
  4027d4:	4798      	blx	r3
	              ((uint8_t *)&sdcard_api_string) + 3,
	              msg_ptr->packet_in[msg_h_payload_len] );
	
	// open directory
	res = f_opendir ( (DIR *)&directory , (const TCHAR *)&sdcard_api_string );
  4027d6:	4629      	mov	r1, r5
  4027d8:	480b      	ldr	r0, [pc, #44]	; (402808 <API_SDCARD_dir_open_req+0x58>)
  4027da:	4b0c      	ldr	r3, [pc, #48]	; (40280c <API_SDCARD_dir_open_req+0x5c>)
  4027dc:	4798      	blx	r3
  4027de:	4b0c      	ldr	r3, [pc, #48]	; (402810 <API_SDCARD_dir_open_req+0x60>)
  4027e0:	7018      	strb	r0, [r3, #0]
	
	// Send response
	comm_send_msg( msg_ptr->uart_ptr ,
  4027e2:	7c22      	ldrb	r2, [r4, #16]
  4027e4:	3201      	adds	r2, #1
  4027e6:	7ba1      	ldrb	r1, [r4, #14]
  4027e8:	6820      	ldr	r0, [r4, #0]
  4027ea:	9300      	str	r3, [sp, #0]
  4027ec:	2301      	movs	r3, #1
  4027ee:	b2d2      	uxtb	r2, r2
  4027f0:	4c08      	ldr	r4, [pc, #32]	; (402814 <API_SDCARD_dir_open_req+0x64>)
  4027f2:	47a0      	blx	r4
		           msg_ptr->packet_in[msg_h_src_id] ,
	               msg_ptr->packet_in[msg_h_msg_id]+1 ,
	               sizeof(FRESULT),
	               (uint8_t *)&res);

}
  4027f4:	b003      	add	sp, #12
  4027f6:	bd30      	pop	{r4, r5, pc}
  4027f8:	20000f70 	.word	0x20000f70
  4027fc:	0040b671 	.word	0x0040b671
  402800:	0040f4e8 	.word	0x0040f4e8
  402804:	00405129 	.word	0x00405129
  402808:	20000f04 	.word	0x20000f04
  40280c:	004093b9 	.word	0x004093b9
  402810:	20000f6c 	.word	0x20000f6c
  402814:	00404ff1 	.word	0x00404ff1

00402818 <API_SDCARD_item_next_req>:

	uint8_t payload_len;
	uint8_t * payload_ptr;
		
	// Accept command only if payload length is equal to 0
	if (msg_ptr->packet_in[msg_h_payload_len] == 0) {
  402818:	7c43      	ldrb	r3, [r0, #17]
  40281a:	b103      	cbz	r3, 40281e <API_SDCARD_item_next_req+0x6>
  40281c:	4770      	bx	lr
{
  40281e:	b5f0      	push	{r4, r5, r6, r7, lr}
  402820:	b083      	sub	sp, #12
  402822:	4604      	mov	r4, r0
		
		// clear previous file info
		memset( (void *)&file_info , 0 , sizeof(FILINFO) );
  402824:	4d13      	ldr	r5, [pc, #76]	; (402874 <API_SDCARD_item_next_req+0x5c>)
  402826:	2220      	movs	r2, #32
  402828:	2100      	movs	r1, #0
  40282a:	4628      	mov	r0, r5
  40282c:	4b12      	ldr	r3, [pc, #72]	; (402878 <API_SDCARD_item_next_req+0x60>)
  40282e:	4798      	blx	r3
	
		// read item from directory
		res = f_readdir ( (DIR *)&directory , &file_info );
  402830:	4629      	mov	r1, r5
  402832:	4812      	ldr	r0, [pc, #72]	; (40287c <API_SDCARD_item_next_req+0x64>)
  402834:	4b12      	ldr	r3, [pc, #72]	; (402880 <API_SDCARD_item_next_req+0x68>)
  402836:	4798      	blx	r3
  402838:	4b12      	ldr	r3, [pc, #72]	; (402884 <API_SDCARD_item_next_req+0x6c>)
  40283a:	7018      	strb	r0, [r3, #0]

		// Define response depending on f_opendir.
		if (res == FR_OK) {
  40283c:	b158      	cbz	r0, 402856 <API_SDCARD_item_next_req+0x3e>
			payload_len = sizeof(FILINFO);
			payload_ptr = (uint8_t *)&file_info;
		}
		else {
			payload_len = sizeof(FRESULT);
			payload_ptr = (uint8_t *)&res;
  40283e:	4d11      	ldr	r5, [pc, #68]	; (402884 <API_SDCARD_item_next_req+0x6c>)
			payload_len = sizeof(FRESULT);
  402840:	2301      	movs	r3, #1
		}

		// Send response
		comm_send_msg( msg_ptr->uart_ptr ,
  402842:	7c22      	ldrb	r2, [r4, #16]
  402844:	3201      	adds	r2, #1
  402846:	7ba1      	ldrb	r1, [r4, #14]
  402848:	6820      	ldr	r0, [r4, #0]
  40284a:	9500      	str	r5, [sp, #0]
  40284c:	b2d2      	uxtb	r2, r2
  40284e:	4c0e      	ldr	r4, [pc, #56]	; (402888 <API_SDCARD_item_next_req+0x70>)
  402850:	47a0      	blx	r4
					   payload_len ,
					   payload_ptr);

	}

}
  402852:	b003      	add	sp, #12
  402854:	bdf0      	pop	{r4, r5, r6, r7, pc}
			memset( (void *)&sdcard_api_string , 0 , sizeof(sdcard_api_string) );
  402856:	4e0d      	ldr	r6, [pc, #52]	; (40288c <API_SDCARD_item_next_req+0x74>)
  402858:	2780      	movs	r7, #128	; 0x80
  40285a:	463a      	mov	r2, r7
  40285c:	2100      	movs	r1, #0
  40285e:	4630      	mov	r0, r6
  402860:	4b05      	ldr	r3, [pc, #20]	; (402878 <API_SDCARD_item_next_req+0x60>)
  402862:	4798      	blx	r3
			sdcard_file_get_name( &directory, &file_info , &sdcard_api_string[0] , STRING_MAX);
  402864:	463b      	mov	r3, r7
  402866:	4632      	mov	r2, r6
  402868:	4629      	mov	r1, r5
  40286a:	4804      	ldr	r0, [pc, #16]	; (40287c <API_SDCARD_item_next_req+0x64>)
  40286c:	4e08      	ldr	r6, [pc, #32]	; (402890 <API_SDCARD_item_next_req+0x78>)
  40286e:	47b0      	blx	r6
			payload_len = sizeof(FILINFO);
  402870:	2320      	movs	r3, #32
  402872:	e7e6      	b.n	402842 <API_SDCARD_item_next_req+0x2a>
  402874:	20000f4c 	.word	0x20000f4c
  402878:	0040b671 	.word	0x0040b671
  40287c:	20000f04 	.word	0x20000f04
  402880:	00409439 	.word	0x00409439
  402884:	20000f6c 	.word	0x20000f6c
  402888:	00404ff1 	.word	0x00404ff1
  40288c:	20000f70 	.word	0x20000f70
  402890:	004041c5 	.word	0x004041c5

00402894 <API_SDCARD_item_name_req>:
{

	uint8_t name_length = 0;
	
	// Accept command only if payload length is equal to 0
	if (msg_ptr->packet_in[msg_h_payload_len] == 0) {
  402894:	7c43      	ldrb	r3, [r0, #17]
  402896:	b9bb      	cbnz	r3, 4028c8 <API_SDCARD_item_name_req+0x34>
{
  402898:	b510      	push	{r4, lr}
  40289a:	b082      	sub	sp, #8
			
		// calculate LFN length (find null caracter)
		for (;;) {
			if (sdcard_api_string[name_length] != 0)
  40289c:	4a0b      	ldr	r2, [pc, #44]	; (4028cc <API_SDCARD_item_name_req+0x38>)
  40289e:	7812      	ldrb	r2, [r2, #0]
  4028a0:	b182      	cbz	r2, 4028c4 <API_SDCARD_item_name_req+0x30>
  4028a2:	490a      	ldr	r1, [pc, #40]	; (4028cc <API_SDCARD_item_name_req+0x38>)
				name_length++;
  4028a4:	3301      	adds	r3, #1
  4028a6:	b2db      	uxtb	r3, r3
			if (sdcard_api_string[name_length] != 0)
  4028a8:	5cca      	ldrb	r2, [r1, r3]
  4028aa:	2a00      	cmp	r2, #0
  4028ac:	d1fa      	bne.n	4028a4 <API_SDCARD_item_name_req+0x10>
			else
				break;
		}
			
		// Send response
		comm_send_msg( msg_ptr->uart_ptr ,
  4028ae:	7c02      	ldrb	r2, [r0, #16]
  4028b0:	3201      	adds	r2, #1
  4028b2:	7b81      	ldrb	r1, [r0, #14]
  4028b4:	6800      	ldr	r0, [r0, #0]
  4028b6:	4c05      	ldr	r4, [pc, #20]	; (4028cc <API_SDCARD_item_name_req+0x38>)
  4028b8:	9400      	str	r4, [sp, #0]
  4028ba:	b2d2      	uxtb	r2, r2
  4028bc:	4c04      	ldr	r4, [pc, #16]	; (4028d0 <API_SDCARD_item_name_req+0x3c>)
  4028be:	47a0      	blx	r4
		               name_length,
		               (uint8_t *)&sdcard_api_string[0]);

	}

}
  4028c0:	b002      	add	sp, #8
  4028c2:	bd10      	pop	{r4, pc}
			if (sdcard_api_string[name_length] != 0)
  4028c4:	4613      	mov	r3, r2
  4028c6:	e7f2      	b.n	4028ae <API_SDCARD_item_name_req+0x1a>
  4028c8:	4770      	bx	lr
  4028ca:	bf00      	nop
  4028cc:	20000f70 	.word	0x20000f70
  4028d0:	00404ff1 	.word	0x00404ff1

004028d4 <API_SDCARD_file_size_req>:
/// @param[in] msp_ptr Pointer to incoming message
///
void API_SDCARD_file_size_req( msg_t * msg_ptr ) {

	// Accept command only if payload length is equal to 0
	if (msg_ptr->packet_in[msg_h_payload_len] == 0) {
  4028d4:	7c43      	ldrb	r3, [r0, #17]
  4028d6:	b103      	cbz	r3, 4028da <API_SDCARD_file_size_req+0x6>
  4028d8:	4770      	bx	lr
void API_SDCARD_file_size_req( msg_t * msg_ptr ) {
  4028da:	b510      	push	{r4, lr}
  4028dc:	b082      	sub	sp, #8
	
		// Send response
		comm_send_msg( msg_ptr->uart_ptr ,
  4028de:	7c02      	ldrb	r2, [r0, #16]
  4028e0:	3201      	adds	r2, #1
  4028e2:	7b81      	ldrb	r1, [r0, #14]
  4028e4:	6800      	ldr	r0, [r0, #0]
  4028e6:	4b04      	ldr	r3, [pc, #16]	; (4028f8 <API_SDCARD_file_size_req+0x24>)
  4028e8:	9300      	str	r3, [sp, #0]
  4028ea:	2304      	movs	r3, #4
  4028ec:	b2d2      	uxtb	r2, r2
  4028ee:	4c03      	ldr	r4, [pc, #12]	; (4028fc <API_SDCARD_file_size_req+0x28>)
  4028f0:	47a0      	blx	r4
					   msg_ptr->packet_in[msg_h_msg_id]+1 ,
					   sizeof(DWORD),
					   (uint8_t *)&sdcard_api_file_object.fsize);
	
	}
}
  4028f2:	b002      	add	sp, #8
  4028f4:	bd10      	pop	{r4, pc}
  4028f6:	bf00      	nop
  4028f8:	20000f34 	.word	0x20000f34
  4028fc:	00404ff1 	.word	0x00404ff1

00402900 <API_SDCARD_file_open_req>:

/// @brief Response to open file request.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_SDCARD_file_open_req( msg_t * msg_ptr ) {
  402900:	b530      	push	{r4, r5, lr}
  402902:	b083      	sub	sp, #12
  402904:	4604      	mov	r4, r0
	
	// predefine device root directory
	memset( (void *)&sdcard_api_string , 0 , sizeof(sdcard_api_string) );
  402906:	4d11      	ldr	r5, [pc, #68]	; (40294c <API_SDCARD_file_open_req+0x4c>)
  402908:	2280      	movs	r2, #128	; 0x80
  40290a:	2100      	movs	r1, #0
  40290c:	4628      	mov	r0, r5
  40290e:	4b10      	ldr	r3, [pc, #64]	; (402950 <API_SDCARD_file_open_req+0x50>)
  402910:	4798      	blx	r3
	sprintf( (char *)&sdcard_api_string ,"%s" , "0:/");
  402912:	4b10      	ldr	r3, [pc, #64]	; (402954 <API_SDCARD_file_open_req+0x54>)
  402914:	6818      	ldr	r0, [r3, #0]
  402916:	4629      	mov	r1, r5
  402918:	f841 0b03 	str.w	r0, [r1], #3
		
	// copy name of directory
	copy_content( (uint8_t *)&msg_ptr->packet_in[msg_h_payload_1st_byte] ,
  40291c:	7c62      	ldrb	r2, [r4, #17]
  40291e:	f104 0012 	add.w	r0, r4, #18
  402922:	4b0d      	ldr	r3, [pc, #52]	; (402958 <API_SDCARD_file_open_req+0x58>)
  402924:	4798      	blx	r3
				  ((uint8_t *)&sdcard_api_string) + 3,
				  msg_ptr->packet_in[msg_h_payload_len] );
		
	// open directory
	res = f_open( &sdcard_api_file_object , (char const *)&sdcard_api_string , FA_READ );
  402926:	2201      	movs	r2, #1
  402928:	4629      	mov	r1, r5
  40292a:	480c      	ldr	r0, [pc, #48]	; (40295c <API_SDCARD_file_open_req+0x5c>)
  40292c:	4b0c      	ldr	r3, [pc, #48]	; (402960 <API_SDCARD_file_open_req+0x60>)
  40292e:	4798      	blx	r3
  402930:	4b0c      	ldr	r3, [pc, #48]	; (402964 <API_SDCARD_file_open_req+0x64>)
  402932:	7018      	strb	r0, [r3, #0]
		
	// Send response
	comm_send_msg( msg_ptr->uart_ptr ,
  402934:	7c22      	ldrb	r2, [r4, #16]
  402936:	3201      	adds	r2, #1
  402938:	7ba1      	ldrb	r1, [r4, #14]
  40293a:	6820      	ldr	r0, [r4, #0]
  40293c:	9300      	str	r3, [sp, #0]
  40293e:	2301      	movs	r3, #1
  402940:	b2d2      	uxtb	r2, r2
  402942:	4c09      	ldr	r4, [pc, #36]	; (402968 <API_SDCARD_file_open_req+0x68>)
  402944:	47a0      	blx	r4
	               msg_ptr->packet_in[msg_h_src_id] ,
	               msg_ptr->packet_in[msg_h_msg_id]+1 ,
	               sizeof(FRESULT),
	               (uint8_t *)&res);
	
}
  402946:	b003      	add	sp, #12
  402948:	bd30      	pop	{r4, r5, pc}
  40294a:	bf00      	nop
  40294c:	20000f70 	.word	0x20000f70
  402950:	0040b671 	.word	0x0040b671
  402954:	0040f4e8 	.word	0x0040f4e8
  402958:	00405129 	.word	0x00405129
  40295c:	20000f28 	.word	0x20000f28
  402960:	00408c79 	.word	0x00408c79
  402964:	20000f6c 	.word	0x20000f6c
  402968:	00404ff1 	.word	0x00404ff1

0040296c <API_SDCARD_file_read_req>:
	
	UINT br;
	UINT offset;
	
	// Accept command only if payload length is equal to SDCARD_FILE_READ_LENGTH
	if (msg_ptr->packet_in[msg_h_payload_len] == SDCARD_FILE_READ_LENGTH) {
  40296c:	7c43      	ldrb	r3, [r0, #17]
  40296e:	2b04      	cmp	r3, #4
  402970:	d000      	beq.n	402974 <API_SDCARD_file_read_req+0x8>
  402972:	4770      	bx	lr
void API_SDCARD_file_read_req( msg_t * msg_ptr ) {
  402974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402978:	b084      	sub	sp, #16
  40297a:	4604      	mov	r4, r0
	
		// Read offset
		copy_content( (uint8_t *)&msg_ptr->packet_in[msg_h_payload_1st_byte] ,
  40297c:	2204      	movs	r2, #4
  40297e:	a902      	add	r1, sp, #8
  402980:	3012      	adds	r0, #18
  402982:	4e14      	ldr	r6, [pc, #80]	; (4029d4 <API_SDCARD_file_read_req+0x68>)
  402984:	47b0      	blx	r6
		              (uint8_t *)&offset,
		               SDCARD_FILE_READ_LENGTH );
		
		// Moves the file read/write pointer
		res = f_lseek ( &sdcard_api_file_object , offset*SDCARD_FILE_READ_BYTE_MAX );
  402986:	9902      	ldr	r1, [sp, #8]
  402988:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
  40298c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4029e8 <API_SDCARD_file_read_req+0x7c>
  402990:	0089      	lsls	r1, r1, #2
  402992:	4640      	mov	r0, r8
  402994:	4b10      	ldr	r3, [pc, #64]	; (4029d8 <API_SDCARD_file_read_req+0x6c>)
  402996:	4798      	blx	r3
  402998:	4f10      	ldr	r7, [pc, #64]	; (4029dc <API_SDCARD_file_read_req+0x70>)
  40299a:	7038      	strb	r0, [r7, #0]

		// Reads data from a file. Left SDCARD_FILE_READ_LENGTH bytes to store number of read bytes.
		res = f_read ( &sdcard_api_file_object , (uint8_t *)&sdcard_api_string[SDCARD_FILE_READ_LENGTH] , SDCARD_FILE_READ_BYTE_MAX , &br );
  40299c:	4d10      	ldr	r5, [pc, #64]	; (4029e0 <API_SDCARD_file_read_req+0x74>)
  40299e:	ab03      	add	r3, sp, #12
  4029a0:	227c      	movs	r2, #124	; 0x7c
  4029a2:	4629      	mov	r1, r5
  4029a4:	4640      	mov	r0, r8
  4029a6:	f8df 8044 	ldr.w	r8, [pc, #68]	; 4029ec <API_SDCARD_file_read_req+0x80>
  4029aa:	47c0      	blx	r8
  4029ac:	7038      	strb	r0, [r7, #0]
		
		// save read bytes
		copy_content( (uint8_t *)&br ,
  4029ae:	3d04      	subs	r5, #4
  4029b0:	2204      	movs	r2, #4
  4029b2:	4629      	mov	r1, r5
  4029b4:	a803      	add	r0, sp, #12
  4029b6:	47b0      	blx	r6
		              (uint8_t *)&sdcard_api_string,
		              SDCARD_FILE_READ_LENGTH );

		// Send response
		comm_send_msg( msg_ptr->uart_ptr ,
  4029b8:	9b03      	ldr	r3, [sp, #12]
  4029ba:	3304      	adds	r3, #4
  4029bc:	7c22      	ldrb	r2, [r4, #16]
  4029be:	3201      	adds	r2, #1
  4029c0:	7ba1      	ldrb	r1, [r4, #14]
  4029c2:	6820      	ldr	r0, [r4, #0]
  4029c4:	9500      	str	r5, [sp, #0]
  4029c6:	b2db      	uxtb	r3, r3
  4029c8:	b2d2      	uxtb	r2, r2
  4029ca:	4c06      	ldr	r4, [pc, #24]	; (4029e4 <API_SDCARD_file_read_req+0x78>)
  4029cc:	47a0      	blx	r4
		               (uint8_t *)&sdcard_api_string);
		

	}
	
}
  4029ce:	b004      	add	sp, #16
  4029d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4029d4:	00405129 	.word	0x00405129
  4029d8:	0040925d 	.word	0x0040925d
  4029dc:	20000f6c 	.word	0x20000f6c
  4029e0:	20000f74 	.word	0x20000f74
  4029e4:	00404ff1 	.word	0x00404ff1
  4029e8:	20000f28 	.word	0x20000f28
  4029ec:	00408e11 	.word	0x00408e11

004029f0 <API_SDCARD_file_close_req>:

/// @brief Response to close file request.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_SDCARD_file_close_req( msg_t * msg_ptr ) {
  4029f0:	b510      	push	{r4, lr}
  4029f2:	b084      	sub	sp, #16
  4029f4:	4604      	mov	r4, r0
	
	uint8_t response;
	
	// Accept command only if payload length is equal to 0
	if (msg_ptr->packet_in[msg_h_payload_len] == 0) {
  4029f6:	7c43      	ldrb	r3, [r0, #17]
  4029f8:	b17b      	cbz	r3, 402a1a <API_SDCARD_file_close_req+0x2a>
			
	}
	else {
		
		// response
		response = 0xFF;
  4029fa:	23ff      	movs	r3, #255	; 0xff
  4029fc:	f88d 300f 	strb.w	r3, [sp, #15]

	}

	// Send response
	comm_send_msg( msg_ptr->uart_ptr ,
  402a00:	7c22      	ldrb	r2, [r4, #16]
  402a02:	3201      	adds	r2, #1
  402a04:	7ba1      	ldrb	r1, [r4, #14]
  402a06:	6820      	ldr	r0, [r4, #0]
  402a08:	f10d 030f 	add.w	r3, sp, #15
  402a0c:	9300      	str	r3, [sp, #0]
  402a0e:	2301      	movs	r3, #1
  402a10:	b2d2      	uxtb	r2, r2
  402a12:	4c06      	ldr	r4, [pc, #24]	; (402a2c <API_SDCARD_file_close_req+0x3c>)
  402a14:	47a0      	blx	r4
	               msg_ptr->packet_in[msg_h_src_id] ,
	               msg_ptr->packet_in[msg_h_msg_id]+1 ,
	               1 ,
	               &response);
	
}
  402a16:	b004      	add	sp, #16
  402a18:	bd10      	pop	{r4, pc}
		res = f_close( &sdcard_api_file_object );
  402a1a:	4805      	ldr	r0, [pc, #20]	; (402a30 <API_SDCARD_file_close_req+0x40>)
  402a1c:	4b05      	ldr	r3, [pc, #20]	; (402a34 <API_SDCARD_file_close_req+0x44>)
  402a1e:	4798      	blx	r3
  402a20:	4b05      	ldr	r3, [pc, #20]	; (402a38 <API_SDCARD_file_close_req+0x48>)
  402a22:	7018      	strb	r0, [r3, #0]
		response = res;
  402a24:	f88d 000f 	strb.w	r0, [sp, #15]
  402a28:	e7ea      	b.n	402a00 <API_SDCARD_file_close_req+0x10>
  402a2a:	bf00      	nop
  402a2c:	00404ff1 	.word	0x00404ff1
  402a30:	20000f28 	.word	0x20000f28
  402a34:	00409245 	.word	0x00409245
  402a38:	20000f6c 	.word	0x20000f6c

00402a3c <API_SDCARD_file_and_dir_remove_req>:
/// @param[in] msp_ptr Pointer to incoming message
///
/// @note Removing a directory could take a long time since all files and sub-directory
///       must be removed first. As, result, this function update the file/directory to
///       be removed in background (one file each time that it is executed).
void API_SDCARD_file_and_dir_remove_req( msg_t * msg_ptr ) {
  402a3c:	b510      	push	{r4, lr}
  402a3e:	b084      	sub	sp, #16
  402a40:	4604      	mov	r4, r0
	
	uint8_t response;
				  
	// update folder to be removed
	response = sdcard_update_file_and_dir_to_remove( (uint8_t *)&msg_ptr->packet_in[msg_h_payload_1st_byte] );
  402a42:	3012      	adds	r0, #18
  402a44:	4b07      	ldr	r3, [pc, #28]	; (402a64 <API_SDCARD_file_and_dir_remove_req+0x28>)
  402a46:	4798      	blx	r3
  402a48:	ab04      	add	r3, sp, #16
  402a4a:	f803 0d01 	strb.w	r0, [r3, #-1]!
			
	// Send response
	comm_send_msg( msg_ptr->uart_ptr ,
  402a4e:	7c22      	ldrb	r2, [r4, #16]
  402a50:	3201      	adds	r2, #1
  402a52:	7ba1      	ldrb	r1, [r4, #14]
  402a54:	6820      	ldr	r0, [r4, #0]
  402a56:	9300      	str	r3, [sp, #0]
  402a58:	2301      	movs	r3, #1
  402a5a:	b2d2      	uxtb	r2, r2
  402a5c:	4c02      	ldr	r4, [pc, #8]	; (402a68 <API_SDCARD_file_and_dir_remove_req+0x2c>)
  402a5e:	47a0      	blx	r4
	               msg_ptr->packet_in[msg_h_src_id] ,
				   msg_ptr->packet_in[msg_h_msg_id]+1 ,
	               1 ,
	               &response);
	
}
  402a60:	b004      	add	sp, #16
  402a62:	bd10      	pop	{r4, pc}
  402a64:	00404159 	.word	0x00404159
  402a68:	00404ff1 	.word	0x00404ff1

00402a6c <API_SDCARD_get_mbytes_req>:

/// @brief Response to size request.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_SDCARD_get_mbytes_req( msg_t * msg_ptr ) {
  402a6c:	b510      	push	{r4, lr}
  402a6e:	b084      	sub	sp, #16
  402a70:	4604      	mov	r4, r0

	uint32_t info[2];
	
	info[0] = sdcard_get_total_mbytes_req();
  402a72:	4b09      	ldr	r3, [pc, #36]	; (402a98 <API_SDCARD_get_mbytes_req+0x2c>)
  402a74:	4798      	blx	r3
  402a76:	9002      	str	r0, [sp, #8]
	info[1] = sdcard_get_free_mbytes_req();
  402a78:	4b08      	ldr	r3, [pc, #32]	; (402a9c <API_SDCARD_get_mbytes_req+0x30>)
  402a7a:	4798      	blx	r3
  402a7c:	9003      	str	r0, [sp, #12]

	// Send response
	comm_send_msg( msg_ptr->uart_ptr ,
  402a7e:	7c22      	ldrb	r2, [r4, #16]
  402a80:	3201      	adds	r2, #1
  402a82:	7ba1      	ldrb	r1, [r4, #14]
  402a84:	6820      	ldr	r0, [r4, #0]
  402a86:	ab02      	add	r3, sp, #8
  402a88:	9300      	str	r3, [sp, #0]
  402a8a:	2308      	movs	r3, #8
  402a8c:	b2d2      	uxtb	r2, r2
  402a8e:	4c04      	ldr	r4, [pc, #16]	; (402aa0 <API_SDCARD_get_mbytes_req+0x34>)
  402a90:	47a0      	blx	r4
	   			   msg_ptr->packet_in[msg_h_msg_id]+1 ,
				   sizeof(info),
				   (uint8_t *)&info);
	
	
}
  402a92:	b004      	add	sp, #16
  402a94:	bd10      	pop	{r4, pc}
  402a96:	bf00      	nop
  402a98:	004040e9 	.word	0x004040e9
  402a9c:	00404115 	.word	0x00404115
  402aa0:	00404ff1 	.word	0x00404ff1

00402aa4 <API_UNIT_CONFIG_ARM_update_req>:
/// @brief Set unit configuration with custom data.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_UNIT_CONFIG_ARM_update_req( msg_t * msg_ptr )
{
  402aa4:	b530      	push	{r4, r5, lr}
  402aa6:	b085      	sub	sp, #20
  402aa8:	4604      	mov	r4, r0

	uint8_t response;
	static unit_config_t temp;

    // Accept command only if payload length is equal to unit config length
    if (msg_ptr->packet_in[msg_h_payload_len] == sizeof(unit_config_t) )
  402aaa:	7c43      	ldrb	r3, [r0, #17]
  402aac:	2b44      	cmp	r3, #68	; 0x44
  402aae:	d00f      	beq.n	402ad0 <API_UNIT_CONFIG_ARM_update_req+0x2c>
		response = 0x00;

    } else {

    	// response
	    response = 0x01;
  402ab0:	2301      	movs	r3, #1
  402ab2:	f88d 300f 	strb.w	r3, [sp, #15]

	}

	comm_send_msg( msg_ptr->uart_ptr ,
  402ab6:	7c22      	ldrb	r2, [r4, #16]
  402ab8:	3201      	adds	r2, #1
  402aba:	7ba1      	ldrb	r1, [r4, #14]
  402abc:	6820      	ldr	r0, [r4, #0]
  402abe:	f10d 030f 	add.w	r3, sp, #15
  402ac2:	9300      	str	r3, [sp, #0]
  402ac4:	2301      	movs	r3, #1
  402ac6:	b2d2      	uxtb	r2, r2
  402ac8:	4c0f      	ldr	r4, [pc, #60]	; (402b08 <API_UNIT_CONFIG_ARM_update_req+0x64>)
  402aca:	47a0      	blx	r4
                   msg_ptr->packet_in[msg_h_src_id] ,
	               msg_ptr->packet_in[msg_h_msg_id]+1 ,
	               1 ,
	               &response);

}
  402acc:	b005      	add	sp, #20
  402ace:	bd30      	pop	{r4, r5, pc}
    	copy_content( (uint8_t *)&msg_ptr->packet_in[msg_h_payload_1st_byte] ,
  402ad0:	4d0e      	ldr	r5, [pc, #56]	; (402b0c <API_UNIT_CONFIG_ARM_update_req+0x68>)
  402ad2:	2244      	movs	r2, #68	; 0x44
  402ad4:	4629      	mov	r1, r5
  402ad6:	3012      	adds	r0, #18
  402ad8:	4b0d      	ldr	r3, [pc, #52]	; (402b10 <API_UNIT_CONFIG_ARM_update_req+0x6c>)
  402ada:	4798      	blx	r3
    	unit_config_set_custom(&temp);
  402adc:	4628      	mov	r0, r5
  402ade:	4b0d      	ldr	r3, [pc, #52]	; (402b14 <API_UNIT_CONFIG_ARM_update_req+0x70>)
  402ae0:	4798      	blx	r3
		comm_flags |= SETTINGS_COMM_FLAG_UNIT_CONFIG_REQUEST_MASK;
  402ae2:	4a0d      	ldr	r2, [pc, #52]	; (402b18 <API_UNIT_CONFIG_ARM_update_req+0x74>)
  402ae4:	8813      	ldrh	r3, [r2, #0]
  402ae6:	b29b      	uxth	r3, r3
  402ae8:	f043 0308 	orr.w	r3, r3, #8
  402aec:	8013      	strh	r3, [r2, #0]
		if (sdcard_flags_status & SDCARD_FLAGS_STATUS_CARD_READY)
  402aee:	4b0b      	ldr	r3, [pc, #44]	; (402b1c <API_UNIT_CONFIG_ARM_update_req+0x78>)
  402af0:	781b      	ldrb	r3, [r3, #0]
  402af2:	f013 0f20 	tst.w	r3, #32
  402af6:	d103      	bne.n	402b00 <API_UNIT_CONFIG_ARM_update_req+0x5c>
		response = 0x00;
  402af8:	2300      	movs	r3, #0
  402afa:	f88d 300f 	strb.w	r3, [sp, #15]
  402afe:	e7da      	b.n	402ab6 <API_UNIT_CONFIG_ARM_update_req+0x12>
			sdcard_save_unit_config();
  402b00:	4b07      	ldr	r3, [pc, #28]	; (402b20 <API_UNIT_CONFIG_ARM_update_req+0x7c>)
  402b02:	4798      	blx	r3
  402b04:	e7f8      	b.n	402af8 <API_UNIT_CONFIG_ARM_update_req+0x54>
  402b06:	bf00      	nop
  402b08:	00404ff1 	.word	0x00404ff1
  402b0c:	20000a94 	.word	0x20000a94
  402b10:	00405129 	.word	0x00405129
  402b14:	004047f1 	.word	0x004047f1
  402b18:	20001e54 	.word	0x20001e54
  402b1c:	20001cc8 	.word	0x20001cc8
  402b20:	00403e01 	.word	0x00403e01

00402b24 <API_UNIT_CONFIG_ARM_send_req>:
/// @brief Get unit configuration
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_UNIT_CONFIG_ARM_send_req( msg_t * msg_ptr )
{
  402b24:	b510      	push	{r4, lr}
  402b26:	b082      	sub	sp, #8

	comm_send_msg( msg_ptr->uart_ptr ,
  402b28:	7c02      	ldrb	r2, [r0, #16]
  402b2a:	3201      	adds	r2, #1
  402b2c:	7b81      	ldrb	r1, [r0, #14]
  402b2e:	6800      	ldr	r0, [r0, #0]
  402b30:	4b03      	ldr	r3, [pc, #12]	; (402b40 <API_UNIT_CONFIG_ARM_send_req+0x1c>)
  402b32:	9300      	str	r3, [sp, #0]
  402b34:	2344      	movs	r3, #68	; 0x44
  402b36:	b2d2      	uxtb	r2, r2
  402b38:	4c02      	ldr	r4, [pc, #8]	; (402b44 <API_UNIT_CONFIG_ARM_send_req+0x20>)
  402b3a:	47a0      	blx	r4
                   msg_ptr->packet_in[msg_h_src_id] ,
	               msg_ptr->packet_in[msg_h_msg_id]+1 ,
	               sizeof(unit_config_t),
	               (uint8_t *)&unit_config);

}
  402b3c:	b002      	add	sp, #8
  402b3e:	bd10      	pop	{r4, pc}
  402b40:	20001db0 	.word	0x20001db0
  402b44:	00404ff1 	.word	0x00404ff1

00402b48 <API_UNIT_CONFIG_ARM_set_default_req>:
/// @brief Set unit configuration to default.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_UNIT_CONFIG_ARM_set_default_req( msg_t * msg_ptr )
{
  402b48:	b510      	push	{r4, lr}
  402b4a:	b084      	sub	sp, #16
  402b4c:	4604      	mov	r4, r0

	uint8_t response;

	// Accept command only if payload length is equal to 0
	if (msg_ptr->packet_in[msg_h_payload_len] == 0)
  402b4e:	7c43      	ldrb	r3, [r0, #17]
  402b50:	b17b      	cbz	r3, 402b72 <API_UNIT_CONFIG_ARM_set_default_req+0x2a>
	}
	else
	{

		// response
		response = 0x01;
  402b52:	2301      	movs	r3, #1
  402b54:	f88d 300f 	strb.w	r3, [sp, #15]

	}

	comm_send_msg( msg_ptr->uart_ptr ,
  402b58:	7c22      	ldrb	r2, [r4, #16]
  402b5a:	3201      	adds	r2, #1
  402b5c:	7ba1      	ldrb	r1, [r4, #14]
  402b5e:	6820      	ldr	r0, [r4, #0]
  402b60:	f10d 030f 	add.w	r3, sp, #15
  402b64:	9300      	str	r3, [sp, #0]
  402b66:	2301      	movs	r3, #1
  402b68:	b2d2      	uxtb	r2, r2
  402b6a:	4c0c      	ldr	r4, [pc, #48]	; (402b9c <API_UNIT_CONFIG_ARM_set_default_req+0x54>)
  402b6c:	47a0      	blx	r4
	               msg_ptr->packet_in[msg_h_src_id] ,
	               msg_ptr->packet_in[msg_h_msg_id]+1 ,
                   1 ,
                   &response);

}
  402b6e:	b004      	add	sp, #16
  402b70:	bd10      	pop	{r4, pc}
		unit_config_set_default();
  402b72:	4b0b      	ldr	r3, [pc, #44]	; (402ba0 <API_UNIT_CONFIG_ARM_set_default_req+0x58>)
  402b74:	4798      	blx	r3
		comm_flags |= SETTINGS_COMM_FLAG_UNIT_CONFIG_REQUEST_MASK;
  402b76:	4a0b      	ldr	r2, [pc, #44]	; (402ba4 <API_UNIT_CONFIG_ARM_set_default_req+0x5c>)
  402b78:	8813      	ldrh	r3, [r2, #0]
  402b7a:	b29b      	uxth	r3, r3
  402b7c:	f043 0308 	orr.w	r3, r3, #8
  402b80:	8013      	strh	r3, [r2, #0]
		if (sdcard_flags_status & SDCARD_FLAGS_STATUS_CARD_READY)
  402b82:	4b09      	ldr	r3, [pc, #36]	; (402ba8 <API_UNIT_CONFIG_ARM_set_default_req+0x60>)
  402b84:	781b      	ldrb	r3, [r3, #0]
  402b86:	f013 0f20 	tst.w	r3, #32
  402b8a:	d103      	bne.n	402b94 <API_UNIT_CONFIG_ARM_set_default_req+0x4c>
		response = 0x00;
  402b8c:	2300      	movs	r3, #0
  402b8e:	f88d 300f 	strb.w	r3, [sp, #15]
  402b92:	e7e1      	b.n	402b58 <API_UNIT_CONFIG_ARM_set_default_req+0x10>
			sdcard_save_unit_config();
  402b94:	4b05      	ldr	r3, [pc, #20]	; (402bac <API_UNIT_CONFIG_ARM_set_default_req+0x64>)
  402b96:	4798      	blx	r3
  402b98:	e7f8      	b.n	402b8c <API_UNIT_CONFIG_ARM_set_default_req+0x44>
  402b9a:	bf00      	nop
  402b9c:	00404ff1 	.word	0x00404ff1
  402ba0:	0040477d 	.word	0x0040477d
  402ba4:	20001e54 	.word	0x20001e54
  402ba8:	20001cc8 	.word	0x20001cc8
  402bac:	00403e01 	.word	0x00403e01

00402bb0 <API_UNIT_CALIBRATION_ARM_update_req>:
/// @brief Set unit configuration with custom data.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_UNIT_CALIBRATION_ARM_update_req( msg_t * msg_ptr )
{
  402bb0:	b530      	push	{r4, r5, lr}
  402bb2:	b085      	sub	sp, #20
  402bb4:	4604      	mov	r4, r0

	uint8_t response;
	static unit_calibration_t temp;

	// Accept command only if payload length is equal to unit config length
	if (msg_ptr->packet_in[msg_h_payload_len] == sizeof(unit_calibration_t) )
  402bb6:	7c43      	ldrb	r3, [r0, #17]
  402bb8:	2b60      	cmp	r3, #96	; 0x60
  402bba:	d00f      	beq.n	402bdc <API_UNIT_CALIBRATION_ARM_update_req+0x2c>
		response = 0x00;

	} else {

		// response
		response = 0x01;
  402bbc:	2301      	movs	r3, #1
  402bbe:	f88d 300f 	strb.w	r3, [sp, #15]

	}

	comm_send_msg( msg_ptr->uart_ptr ,
  402bc2:	7c22      	ldrb	r2, [r4, #16]
  402bc4:	3201      	adds	r2, #1
  402bc6:	7ba1      	ldrb	r1, [r4, #14]
  402bc8:	6820      	ldr	r0, [r4, #0]
  402bca:	f10d 030f 	add.w	r3, sp, #15
  402bce:	9300      	str	r3, [sp, #0]
  402bd0:	2301      	movs	r3, #1
  402bd2:	b2d2      	uxtb	r2, r2
  402bd4:	4c0f      	ldr	r4, [pc, #60]	; (402c14 <API_UNIT_CALIBRATION_ARM_update_req+0x64>)
  402bd6:	47a0      	blx	r4
                   msg_ptr->packet_in[msg_h_src_id] ,
	               msg_ptr->packet_in[msg_h_msg_id]+1 ,
	               1 ,
	               &response);

}
  402bd8:	b005      	add	sp, #20
  402bda:	bd30      	pop	{r4, r5, pc}
		copy_content( (uint8_t *)&msg_ptr->packet_in[msg_h_payload_1st_byte] ,
  402bdc:	4d0e      	ldr	r5, [pc, #56]	; (402c18 <API_UNIT_CALIBRATION_ARM_update_req+0x68>)
  402bde:	2260      	movs	r2, #96	; 0x60
  402be0:	4629      	mov	r1, r5
  402be2:	3012      	adds	r0, #18
  402be4:	4b0d      	ldr	r3, [pc, #52]	; (402c1c <API_UNIT_CALIBRATION_ARM_update_req+0x6c>)
  402be6:	4798      	blx	r3
		unit_calibration_set_custom(&temp);
  402be8:	4628      	mov	r0, r5
  402bea:	4b0d      	ldr	r3, [pc, #52]	; (402c20 <API_UNIT_CALIBRATION_ARM_update_req+0x70>)
  402bec:	4798      	blx	r3
		comm_flags |= SETTINGS_COMM_FLAG_UNIT_CALIBRATION_REQUEST_MASK;
  402bee:	4a0d      	ldr	r2, [pc, #52]	; (402c24 <API_UNIT_CALIBRATION_ARM_update_req+0x74>)
  402bf0:	8813      	ldrh	r3, [r2, #0]
  402bf2:	b29b      	uxth	r3, r3
  402bf4:	f043 0310 	orr.w	r3, r3, #16
  402bf8:	8013      	strh	r3, [r2, #0]
		if (sdcard_flags_status & SDCARD_FLAGS_STATUS_CARD_READY)
  402bfa:	4b0b      	ldr	r3, [pc, #44]	; (402c28 <API_UNIT_CALIBRATION_ARM_update_req+0x78>)
  402bfc:	781b      	ldrb	r3, [r3, #0]
  402bfe:	f013 0f20 	tst.w	r3, #32
  402c02:	d103      	bne.n	402c0c <API_UNIT_CALIBRATION_ARM_update_req+0x5c>
		response = 0x00;
  402c04:	2300      	movs	r3, #0
  402c06:	f88d 300f 	strb.w	r3, [sp, #15]
  402c0a:	e7da      	b.n	402bc2 <API_UNIT_CALIBRATION_ARM_update_req+0x12>
			sdcard_save_unit_calibration();
  402c0c:	4b07      	ldr	r3, [pc, #28]	; (402c2c <API_UNIT_CALIBRATION_ARM_update_req+0x7c>)
  402c0e:	4798      	blx	r3
  402c10:	e7f8      	b.n	402c04 <API_UNIT_CALIBRATION_ARM_update_req+0x54>
  402c12:	bf00      	nop
  402c14:	00404ff1 	.word	0x00404ff1
  402c18:	20000ad8 	.word	0x20000ad8
  402c1c:	00405129 	.word	0x00405129
  402c20:	00404839 	.word	0x00404839
  402c24:	20001e54 	.word	0x20001e54
  402c28:	20001cc8 	.word	0x20001cc8
  402c2c:	00403ecd 	.word	0x00403ecd

00402c30 <API_UNIT_CALIBRATION_ARM_send_req>:
/// @brief Get unit configuration.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_UNIT_CALIBRATION_ARM_send_req( msg_t * msg_ptr )
{
  402c30:	b510      	push	{r4, lr}
  402c32:	b082      	sub	sp, #8

	comm_send_msg( msg_ptr->uart_ptr ,
  402c34:	7c02      	ldrb	r2, [r0, #16]
  402c36:	3201      	adds	r2, #1
  402c38:	7b81      	ldrb	r1, [r0, #14]
  402c3a:	6800      	ldr	r0, [r0, #0]
  402c3c:	4b03      	ldr	r3, [pc, #12]	; (402c4c <API_UNIT_CALIBRATION_ARM_send_req+0x1c>)
  402c3e:	9300      	str	r3, [sp, #0]
  402c40:	2360      	movs	r3, #96	; 0x60
  402c42:	b2d2      	uxtb	r2, r2
  402c44:	4c02      	ldr	r4, [pc, #8]	; (402c50 <API_UNIT_CALIBRATION_ARM_send_req+0x20>)
  402c46:	47a0      	blx	r4
	               msg_ptr->packet_in[msg_h_src_id] ,
	               msg_ptr->packet_in[msg_h_msg_id]+1 ,
	               sizeof(unit_calibration_t),
	               (uint8_t *)&unit_calibration);

}
  402c48:	b002      	add	sp, #8
  402c4a:	bd10      	pop	{r4, pc}
  402c4c:	20001df4 	.word	0x20001df4
  402c50:	00404ff1 	.word	0x00404ff1

00402c54 <API_UNIT_CALIBRATION_ARM_set_default_req>:
/// @brief Set unit configuration to default.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void API_UNIT_CALIBRATION_ARM_set_default_req( msg_t * msg_ptr )
{
  402c54:	b510      	push	{r4, lr}
  402c56:	b084      	sub	sp, #16
  402c58:	4604      	mov	r4, r0

	uint8_t response;

	// Accept command only if payload length is equal to 0
	if (msg_ptr->packet_in[msg_h_payload_len] == 0)
  402c5a:	7c43      	ldrb	r3, [r0, #17]
  402c5c:	b17b      	cbz	r3, 402c7e <API_UNIT_CALIBRATION_ARM_set_default_req+0x2a>
	}
	else
	{

		// response
		response = 0x01;
  402c5e:	2301      	movs	r3, #1
  402c60:	f88d 300f 	strb.w	r3, [sp, #15]

	}

	comm_send_msg( msg_ptr->uart_ptr ,
  402c64:	7c22      	ldrb	r2, [r4, #16]
  402c66:	3201      	adds	r2, #1
  402c68:	7ba1      	ldrb	r1, [r4, #14]
  402c6a:	6820      	ldr	r0, [r4, #0]
  402c6c:	f10d 030f 	add.w	r3, sp, #15
  402c70:	9300      	str	r3, [sp, #0]
  402c72:	2301      	movs	r3, #1
  402c74:	b2d2      	uxtb	r2, r2
  402c76:	4c0c      	ldr	r4, [pc, #48]	; (402ca8 <API_UNIT_CALIBRATION_ARM_set_default_req+0x54>)
  402c78:	47a0      	blx	r4
	               msg_ptr->packet_in[msg_h_src_id] ,
	               msg_ptr->packet_in[msg_h_msg_id]+1 ,
	               1 ,
	               &response);

}
  402c7a:	b004      	add	sp, #16
  402c7c:	bd10      	pop	{r4, pc}
		unit_calibration_set_default();
  402c7e:	4b0b      	ldr	r3, [pc, #44]	; (402cac <API_UNIT_CALIBRATION_ARM_set_default_req+0x58>)
  402c80:	4798      	blx	r3
		comm_flags |= SETTINGS_COMM_FLAG_UNIT_CALIBRATION_REQUEST_MASK;
  402c82:	4a0b      	ldr	r2, [pc, #44]	; (402cb0 <API_UNIT_CALIBRATION_ARM_set_default_req+0x5c>)
  402c84:	8813      	ldrh	r3, [r2, #0]
  402c86:	b29b      	uxth	r3, r3
  402c88:	f043 0310 	orr.w	r3, r3, #16
  402c8c:	8013      	strh	r3, [r2, #0]
		if (sdcard_flags_status & SDCARD_FLAGS_STATUS_CARD_READY)
  402c8e:	4b09      	ldr	r3, [pc, #36]	; (402cb4 <API_UNIT_CALIBRATION_ARM_set_default_req+0x60>)
  402c90:	781b      	ldrb	r3, [r3, #0]
  402c92:	f013 0f20 	tst.w	r3, #32
  402c96:	d103      	bne.n	402ca0 <API_UNIT_CALIBRATION_ARM_set_default_req+0x4c>
		response = 0x00;
  402c98:	2300      	movs	r3, #0
  402c9a:	f88d 300f 	strb.w	r3, [sp, #15]
  402c9e:	e7e1      	b.n	402c64 <API_UNIT_CALIBRATION_ARM_set_default_req+0x10>
			sdcard_save_unit_calibration();
  402ca0:	4b05      	ldr	r3, [pc, #20]	; (402cb8 <API_UNIT_CALIBRATION_ARM_set_default_req+0x64>)
  402ca2:	4798      	blx	r3
  402ca4:	e7f8      	b.n	402c98 <API_UNIT_CALIBRATION_ARM_set_default_req+0x44>
  402ca6:	bf00      	nop
  402ca8:	00404ff1 	.word	0x00404ff1
  402cac:	00404805 	.word	0x00404805
  402cb0:	20001e54 	.word	0x20001e54
  402cb4:	20001cc8 	.word	0x20001cc8
  402cb8:	00403ecd 	.word	0x00403ecd

00402cbc <scratch_erase>:
/// @brief Function to erase the scratchpad space on flash memory
///
/// @return 0 if successful; otherwise returns an error code.
///
uint32_t scratch_erase(void)
{	
  402cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t i = 0;
	uint32_t erase_address = app_temp.start;
  402cc0:	4c14      	ldr	r4, [pc, #80]	; (402d14 <scratch_erase+0x58>)
  402cc2:	6825      	ldr	r5, [r4, #0]
	uint32_t erase_error = 0;
	
	/* Flash Unlock Temp App region */
	erase_error = flash_unlock(app_temp.start, app_temp.start + app_temp.size - 1, 0, 0);
  402cc4:	6861      	ldr	r1, [r4, #4]
  402cc6:	4429      	add	r1, r5
  402cc8:	2300      	movs	r3, #0
  402cca:	461a      	mov	r2, r3
  402ccc:	3901      	subs	r1, #1
  402cce:	4628      	mov	r0, r5
  402cd0:	4e11      	ldr	r6, [pc, #68]	; (402d18 <scratch_erase+0x5c>)
  402cd2:	47b0      	blx	r6
  402cd4:	4606      	mov	r6, r0
	
	/* Erase sectors from Temp App region */
	for (i=0; i<(app_temp.size / FLASH_SECTOR_SIZE); i++)
  402cd6:	6861      	ldr	r1, [r4, #4]
  402cd8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
  402cdc:	d30e      	bcc.n	402cfc <scratch_erase+0x40>
  402cde:	2400      	movs	r4, #0
	{
		erase_error |= flash_erase_sector(erase_address);
  402ce0:	f8df 803c 	ldr.w	r8, [pc, #60]	; 402d20 <scratch_erase+0x64>
	for (i=0; i<(app_temp.size / FLASH_SECTOR_SIZE); i++)
  402ce4:	4f0b      	ldr	r7, [pc, #44]	; (402d14 <scratch_erase+0x58>)
		erase_error |= flash_erase_sector(erase_address);
  402ce6:	4628      	mov	r0, r5
  402ce8:	47c0      	blx	r8
  402cea:	4306      	orrs	r6, r0
		erase_address += FLASH_SECTOR_SIZE;
  402cec:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
	for (i=0; i<(app_temp.size / FLASH_SECTOR_SIZE); i++)
  402cf0:	3401      	adds	r4, #1
  402cf2:	b2e4      	uxtb	r4, r4
  402cf4:	6879      	ldr	r1, [r7, #4]
  402cf6:	ebb4 4f11 	cmp.w	r4, r1, lsr #16
  402cfa:	d3f4      	bcc.n	402ce6 <scratch_erase+0x2a>
	}
	
	/* Flash Lock Temp App region */
	erase_error |= flash_lock(app_temp.start, app_temp.start + app_temp.size - 1, 0, 0);
  402cfc:	4b05      	ldr	r3, [pc, #20]	; (402d14 <scratch_erase+0x58>)
  402cfe:	6818      	ldr	r0, [r3, #0]
  402d00:	1e44      	subs	r4, r0, #1
  402d02:	2300      	movs	r3, #0
  402d04:	461a      	mov	r2, r3
  402d06:	4421      	add	r1, r4
  402d08:	4c04      	ldr	r4, [pc, #16]	; (402d1c <scratch_erase+0x60>)
  402d0a:	47a0      	blx	r4
	
	return erase_error;
}
  402d0c:	4330      	orrs	r0, r6
  402d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402d12:	bf00      	nop
  402d14:	20001000 	.word	0x20001000
  402d18:	00404aad 	.word	0x00404aad
  402d1c:	00404a45 	.word	0x00404a45
  402d20:	00404955 	.word	0x00404955

00402d24 <scratch_checksum>:
///
/// @param[in] image_size Image length
/// @return Checksum value is returned in a 16 bits word.
///
uint16_t scratch_checksum(uint32_t image_size)
{
  402d24:	b500      	push	{lr}
  402d26:	b083      	sub	sp, #12
	uint16_t checksum = 0;
  402d28:	aa02      	add	r2, sp, #8
  402d2a:	2300      	movs	r3, #0
  402d2c:	f822 3d02 	strh.w	r3, [r2, #-2]!
	
	calculate_checksum_ptr((uint8_t*)app_temp.start, image_size, &checksum);
  402d30:	4601      	mov	r1, r0
  402d32:	4b04      	ldr	r3, [pc, #16]	; (402d44 <scratch_checksum+0x20>)
  402d34:	6818      	ldr	r0, [r3, #0]
  402d36:	4b04      	ldr	r3, [pc, #16]	; (402d48 <scratch_checksum+0x24>)
  402d38:	4798      	blx	r3
		
	return checksum;
}
  402d3a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  402d3e:	b003      	add	sp, #12
  402d40:	f85d fb04 	ldr.w	pc, [sp], #4
  402d44:	20001000 	.word	0x20001000
  402d48:	00405195 	.word	0x00405195

00402d4c <verify_scratch_image>:
	if (img_size == 0)
  402d4c:	b908      	cbnz	r0, 402d52 <verify_scratch_image+0x6>
		return FALSE;
  402d4e:	2000      	movs	r0, #0
  402d50:	4770      	bx	lr
{
  402d52:	b510      	push	{r4, lr}
  402d54:	460c      	mov	r4, r1
	if (scratch_checksum(img_size) == img_crc)
  402d56:	4b03      	ldr	r3, [pc, #12]	; (402d64 <verify_scratch_image+0x18>)
  402d58:	4798      	blx	r3
		return FALSE;
  402d5a:	42a0      	cmp	r0, r4
  402d5c:	bf14      	ite	ne
  402d5e:	2000      	movne	r0, #0
  402d60:	2001      	moveq	r0, #1
  402d62:	bd10      	pop	{r4, pc}
  402d64:	00402d25 	.word	0x00402d25

00402d68 <save_image_block>:

uint8_t save_image_block(uint16_t blk_number, uint8_t* blk_ptr, uint16_t blk_size)
{
  402d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402d6c:	460d      	mov	r5, r1
  402d6e:	4616      	mov	r6, r2
	uint32_t blk_error;
	uint32_t blk_offset = (uint32_t)blk_number * new_image.block_size;
  402d70:	4b1a      	ldr	r3, [pc, #104]	; (402ddc <save_image_block+0x74>)
  402d72:	68dc      	ldr	r4, [r3, #12]
  402d74:	fb04 f400 	mul.w	r4, r4, r0
	
	/* Save block into scratch. Only write block if memory content is different */
	if (memcmp((const void *)(blk_ptr), (const void *)(app_temp.start + blk_offset), blk_size))
  402d78:	4b19      	ldr	r3, [pc, #100]	; (402de0 <save_image_block+0x78>)
  402d7a:	6819      	ldr	r1, [r3, #0]
  402d7c:	4421      	add	r1, r4
  402d7e:	4628      	mov	r0, r5
  402d80:	4b18      	ldr	r3, [pc, #96]	; (402de4 <save_image_block+0x7c>)
  402d82:	4798      	blx	r3
  402d84:	b910      	cbnz	r0, 402d8c <save_image_block+0x24>
		{
			return 1;
		}
	}
		
	return 0;
  402d86:	2000      	movs	r0, #0
}
  402d88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    This function disables FIQ interrupts by setting the F-bit in the CPSR.
    Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
{
  __ASM volatile ("cpsid f" : : : "memory");
  402d8c:	b671      	cpsid	f
		blk_error = flash_unlock((uint32_t)app_temp.start + blk_offset, (uint32_t)app_temp.start + blk_offset + blk_size - 1, 0, 0);
  402d8e:	4f14      	ldr	r7, [pc, #80]	; (402de0 <save_image_block+0x78>)
  402d90:	6838      	ldr	r0, [r7, #0]
  402d92:	4420      	add	r0, r4
  402d94:	f106 38ff 	add.w	r8, r6, #4294967295
  402d98:	2300      	movs	r3, #0
  402d9a:	461a      	mov	r2, r3
  402d9c:	eb00 0108 	add.w	r1, r0, r8
  402da0:	f8df 904c 	ldr.w	r9, [pc, #76]	; 402df0 <save_image_block+0x88>
  402da4:	47c8      	blx	r9
  402da6:	4681      	mov	r9, r0
		blk_error |= flash_write((uint32_t)app_temp.start + blk_offset, blk_ptr, (uint32_t)blk_size, 0);
  402da8:	6838      	ldr	r0, [r7, #0]
  402daa:	2300      	movs	r3, #0
  402dac:	4632      	mov	r2, r6
  402dae:	4629      	mov	r1, r5
  402db0:	4420      	add	r0, r4
  402db2:	4d0d      	ldr	r5, [pc, #52]	; (402de8 <save_image_block+0x80>)
  402db4:	47a8      	blx	r5
  402db6:	ea49 0900 	orr.w	r9, r9, r0
		blk_error |= flash_lock((uint32_t)app_temp.start + blk_offset, (uint32_t)app_temp.start + blk_offset + blk_size - 1, 0, 0);
  402dba:	6838      	ldr	r0, [r7, #0]
  402dbc:	4420      	add	r0, r4
  402dbe:	2300      	movs	r3, #0
  402dc0:	461a      	mov	r2, r3
  402dc2:	eb00 0108 	add.w	r1, r0, r8
  402dc6:	4c09      	ldr	r4, [pc, #36]	; (402dec <save_image_block+0x84>)
  402dc8:	47a0      	blx	r4
  __ASM volatile ("cpsie f" : : : "memory");
  402dca:	b661      	cpsie	f
		if (blk_error != 0)
  402dcc:	ea59 0300 	orrs.w	r3, r9, r0
			return 1;
  402dd0:	bf14      	ite	ne
  402dd2:	2001      	movne	r0, #1
  402dd4:	2000      	moveq	r0, #0
  402dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402dda:	bf00      	nop
  402ddc:	20000ff0 	.word	0x20000ff0
  402de0:	20001000 	.word	0x20001000
  402de4:	0040b4dd 	.word	0x0040b4dd
  402de8:	00404979 	.word	0x00404979
  402dec:	00404a45 	.word	0x00404a45
  402df0:	00404aad 	.word	0x00404aad

00402df4 <boot_set_flag>:

uint32_t boot_set_flag(uint16_t fw_crc, uint32_t fw_size)
{
  402df4:	b570      	push	{r4, r5, r6, lr}
  402df6:	b082      	sub	sp, #8
	uint32_t error_code;
	static uint16_t boot_flag = RUN_BOOT_FLAG_SET;
	uint8_t boot_flag_buffer[8];
	
	/* Save on last flash page boot flag and new image checksum and size  */
	memcpy(boot_flag_buffer, &boot_flag, sizeof(boot_flag));
  402df8:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
  402dfc:	f8ad 3000 	strh.w	r3, [sp]
	memcpy(boot_flag_buffer + 2, &fw_crc, sizeof(fw_crc));
  402e00:	f8ad 0002 	strh.w	r0, [sp, #2]
	memcpy(boot_flag_buffer + 4, &fw_size, sizeof(fw_size));
  402e04:	9101      	str	r1, [sp, #4]
  __ASM volatile ("cpsid f" : : : "memory");
  402e06:	b671      	cpsid	f
	
	/* Disable interrupts */
	__disable_fault_irq();
	/* Flash Unlock */
	error_code = flash_unlock((uint32_t)app_temp.flag_add, (uint32_t)app_temp.start + app_temp.size - 1, 0, 0);
  402e08:	4c0f      	ldr	r4, [pc, #60]	; (402e48 <boot_set_flag+0x54>)
  402e0a:	6821      	ldr	r1, [r4, #0]
  402e0c:	6863      	ldr	r3, [r4, #4]
  402e0e:	4419      	add	r1, r3
  402e10:	2300      	movs	r3, #0
  402e12:	461a      	mov	r2, r3
  402e14:	3901      	subs	r1, #1
  402e16:	68a0      	ldr	r0, [r4, #8]
  402e18:	4d0c      	ldr	r5, [pc, #48]	; (402e4c <boot_set_flag+0x58>)
  402e1a:	47a8      	blx	r5
  402e1c:	4605      	mov	r5, r0
	/*Flash Write */
	error_code |= flash_write((uint32_t)app_temp.flag_add, boot_flag_buffer, sizeof(boot_flag_buffer), 0);
  402e1e:	2300      	movs	r3, #0
  402e20:	2208      	movs	r2, #8
  402e22:	4669      	mov	r1, sp
  402e24:	68a0      	ldr	r0, [r4, #8]
  402e26:	4e0a      	ldr	r6, [pc, #40]	; (402e50 <boot_set_flag+0x5c>)
  402e28:	47b0      	blx	r6
  402e2a:	4305      	orrs	r5, r0
	/* Flash Lock */
	error_code |= flash_lock((uint32_t)app_temp.flag_add, (uint32_t)app_temp.start + app_temp.size - 1, 0, 0);
  402e2c:	6821      	ldr	r1, [r4, #0]
  402e2e:	6863      	ldr	r3, [r4, #4]
  402e30:	4419      	add	r1, r3
  402e32:	2300      	movs	r3, #0
  402e34:	461a      	mov	r2, r3
  402e36:	3901      	subs	r1, #1
  402e38:	68a0      	ldr	r0, [r4, #8]
  402e3a:	4c06      	ldr	r4, [pc, #24]	; (402e54 <boot_set_flag+0x60>)
  402e3c:	47a0      	blx	r4
  __ASM volatile ("cpsie f" : : : "memory");
  402e3e:	b661      	cpsie	f
	/* Enable interrupts */
	__enable_fault_irq();
	
	return error_code;
}
  402e40:	4328      	orrs	r0, r5
  402e42:	b002      	add	sp, #8
  402e44:	bd70      	pop	{r4, r5, r6, pc}
  402e46:	bf00      	nop
  402e48:	20001000 	.word	0x20001000
  402e4c:	00404aad 	.word	0x00404aad
  402e50:	00404979 	.word	0x00404979
  402e54:	00404a45 	.word	0x00404a45

00402e58 <bootloader_init>:
	return (flash_size_t)((CHIPID->CHIPID_CIDR & CHIPID_CIDR_NVPSIZ_Msk) >> CHIPID_CIDR_NVPSIZ_Pos);
  402e58:	4b23      	ldr	r3, [pc, #140]	; (402ee8 <bootloader_init+0x90>)
  402e5a:	681b      	ldr	r3, [r3, #0]
/// @brief Bootloader initialization.
/// @details Scratchpad origin and length are estimated.
void bootloader_init(void){
	
	// Get flash size and critical memory addresses
	switch (get_flash_size())
  402e5c:	f3c3 2303 	ubfx	r3, r3, #8, #4
  402e60:	3b07      	subs	r3, #7
  402e62:	2b07      	cmp	r3, #7
  402e64:	d838      	bhi.n	402ed8 <bootloader_init+0x80>
  402e66:	e8df f003 	tbb	[pc, r3]
  402e6a:	3704      	.short	0x3704
  402e6c:	27371f17 	.word	0x27371f17
  402e70:	2f37      	.short	0x2f37
	{
		case FLASH_SIZE_128K:
			app_temp.start = 0x00410000;
  402e72:	4b1e      	ldr	r3, [pc, #120]	; (402eec <bootloader_init+0x94>)
  402e74:	f44f 0282 	mov.w	r2, #4259840	; 0x410000
  402e78:	601a      	str	r2, [r3, #0]
			app_temp.size = 0x00010000;
  402e7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  402e7e:	605a      	str	r2, [r3, #4]
			app_temp.size = 0x00010000;
			break;
	}
		
	// Load boot flag, app temp image checksum and size addresses
	app_temp.flag_add = app_temp.start + app_temp.size - 8;
  402e80:	4a1a      	ldr	r2, [pc, #104]	; (402eec <bootloader_init+0x94>)
  402e82:	6813      	ldr	r3, [r2, #0]
  402e84:	6851      	ldr	r1, [r2, #4]
  402e86:	440b      	add	r3, r1
  402e88:	f1a3 0108 	sub.w	r1, r3, #8
  402e8c:	6091      	str	r1, [r2, #8]
	app_temp.crc_add = app_temp.start + app_temp.size - 6;
  402e8e:	1f99      	subs	r1, r3, #6
  402e90:	60d1      	str	r1, [r2, #12]
	app_temp.size_add = app_temp.start + app_temp.size - 4;
  402e92:	3b04      	subs	r3, #4
  402e94:	6113      	str	r3, [r2, #16]
  402e96:	4770      	bx	lr
			app_temp.start = 0x00420000;
  402e98:	4b14      	ldr	r3, [pc, #80]	; (402eec <bootloader_init+0x94>)
  402e9a:	f44f 0284 	mov.w	r2, #4325376	; 0x420000
  402e9e:	601a      	str	r2, [r3, #0]
			app_temp.size = 0x00020000;
  402ea0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  402ea4:	605a      	str	r2, [r3, #4]
			break;
  402ea6:	e7eb      	b.n	402e80 <bootloader_init+0x28>
			app_temp.start = 0x00440000;
  402ea8:	4b10      	ldr	r3, [pc, #64]	; (402eec <bootloader_init+0x94>)
  402eaa:	f44f 0288 	mov.w	r2, #4456448	; 0x440000
  402eae:	601a      	str	r2, [r3, #0]
			app_temp.size = 0x00040000;
  402eb0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  402eb4:	605a      	str	r2, [r3, #4]
			break;
  402eb6:	e7e3      	b.n	402e80 <bootloader_init+0x28>
			app_temp.start = 0x00480000;
  402eb8:	4b0c      	ldr	r3, [pc, #48]	; (402eec <bootloader_init+0x94>)
  402eba:	f44f 0290 	mov.w	r2, #4718592	; 0x480000
  402ebe:	601a      	str	r2, [r3, #0]
			app_temp.size = 0x00080000;
  402ec0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  402ec4:	605a      	str	r2, [r3, #4]
		break;
  402ec6:	e7db      	b.n	402e80 <bootloader_init+0x28>
			app_temp.start = 0x00500000;
  402ec8:	4b08      	ldr	r3, [pc, #32]	; (402eec <bootloader_init+0x94>)
  402eca:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
  402ece:	601a      	str	r2, [r3, #0]
			app_temp.size = 0x00100000;
  402ed0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  402ed4:	605a      	str	r2, [r3, #4]
		break;
  402ed6:	e7d3      	b.n	402e80 <bootloader_init+0x28>
			app_temp.start = 0x00410000;
  402ed8:	4b04      	ldr	r3, [pc, #16]	; (402eec <bootloader_init+0x94>)
  402eda:	f44f 0282 	mov.w	r2, #4259840	; 0x410000
  402ede:	601a      	str	r2, [r3, #0]
			app_temp.size = 0x00010000;
  402ee0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  402ee4:	605a      	str	r2, [r3, #4]
			break;
  402ee6:	e7cb      	b.n	402e80 <bootloader_init+0x28>
  402ee8:	400e0740 	.word	0x400e0740
  402eec:	20001000 	.word	0x20001000

00402ef0 <bootloader_start_upload>:
///         3- Image bigger than space available.
///         4- CRC (param) same as CRC image on scratch pad space.
///         5- Blocks size bigger than max payload message
///         6- Fail to erase flash.
///
uint8_t bootloader_start_upload( uint8_t * payload ) {
  402ef0:	b510      	push	{r4, lr}
		
	start_upload_ready = 0;
  402ef2:	2200      	movs	r2, #0
  402ef4:	4b0e      	ldr	r3, [pc, #56]	; (402f30 <bootloader_start_upload+0x40>)
  402ef6:	701a      	strb	r2, [r3, #0]
		
	// Save new image info
   	copy_content( payload , (uint8_t *)&new_image , sizeof(new_image_t) );
  402ef8:	4c0e      	ldr	r4, [pc, #56]	; (402f34 <bootloader_start_upload+0x44>)
  402efa:	2210      	movs	r2, #16
  402efc:	4621      	mov	r1, r4
  402efe:	4b0e      	ldr	r3, [pc, #56]	; (402f38 <bootloader_start_upload+0x48>)
  402f00:	4798      	blx	r3
	// Check new FW version
//	if ( new_image.fw_version < ( (SETTINGS_ARM_FW_VERSION<<8) | SETTINGS_ARM_FW_VERSION_ENG_BUILD )  )
//		return 2;
		
	// Check that new FW fits into application space
	if (new_image.length > (app_temp.size - BOOT_SIZE))
  402f02:	4b0e      	ldr	r3, [pc, #56]	; (402f3c <bootloader_start_upload+0x4c>)
  402f04:	685b      	ldr	r3, [r3, #4]
  402f06:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
  402f0a:	6862      	ldr	r2, [r4, #4]
  402f0c:	429a      	cmp	r2, r3
  402f0e:	d901      	bls.n	402f14 <bootloader_start_upload+0x24>
		return 3;
  402f10:	2003      	movs	r0, #3
  402f12:	bd10      	pop	{r4, pc}
	// Check if image on temp app region is the same that is going to be download
//	if (verify_scratch_image(new_image.length, new_image.crc))
//		return 4;
		
	// Check block size
	if (new_image.block_size > (SETTINGS_MSG_LENGHT_PAYLOAD - sizeof(uint16_t) ) )
  402f14:	68e3      	ldr	r3, [r4, #12]
  402f16:	2b7e      	cmp	r3, #126	; 0x7e
  402f18:	d901      	bls.n	402f1e <bootloader_start_upload+0x2e>
		return 5;
  402f1a:	2005      	movs	r0, #5
  402f1c:	bd10      	pop	{r4, pc}
			
	// Erase scratch-pad
	if (scratch_erase() != 0)
  402f1e:	4b08      	ldr	r3, [pc, #32]	; (402f40 <bootloader_start_upload+0x50>)
  402f20:	4798      	blx	r3
  402f22:	b108      	cbz	r0, 402f28 <bootloader_start_upload+0x38>
		return 6;
  402f24:	2006      	movs	r0, #6
						
	// All is ok
	start_upload_ready = 1;
	return 0;
		
}
  402f26:	bd10      	pop	{r4, pc}
	start_upload_ready = 1;
  402f28:	2201      	movs	r2, #1
  402f2a:	4b01      	ldr	r3, [pc, #4]	; (402f30 <bootloader_start_upload+0x40>)
  402f2c:	701a      	strb	r2, [r3, #0]
	return 0;
  402f2e:	bd10      	pop	{r4, pc}
  402f30:	20000b38 	.word	0x20000b38
  402f34:	20000ff0 	.word	0x20000ff0
  402f38:	00405129 	.word	0x00405129
  402f3c:	20001000 	.word	0x20001000
  402f40:	00402cbd 	.word	0x00402cbd

00402f44 <bootloader_upload_block>:
/// @param[in] payload Pointer to input data
/// @return 0 if successful; otherwise returns an error code:
///         2- Start upload command was not successfully executed.
///         3- Fail to save block.
///
uint8_t bootloader_upload_block( uint8_t * payload , uint8_t payload_length ) {
  402f44:	b508      	push	{r3, lr}
		
	// Load block number
	memcpy(&blk_number, payload , sizeof(blk_number));
		
	// Only execute the followings command if start upload command was executed successfully
	if (start_upload_ready == 0)
  402f46:	4b07      	ldr	r3, [pc, #28]	; (402f64 <bootloader_upload_block+0x20>)
  402f48:	781b      	ldrb	r3, [r3, #0]
  402f4a:	b90b      	cbnz	r3, 402f50 <bootloader_upload_block+0xc>
		return 2;
  402f4c:	2002      	movs	r0, #2
		return 3;
		
	// All is ok
	return 0;
			
}
  402f4e:	bd08      	pop	{r3, pc}
	if (save_image_block(blk_number, payload + 2, payload_length - 2) != 0)
  402f50:	1e8a      	subs	r2, r1, #2
  402f52:	b292      	uxth	r2, r2
  402f54:	1c81      	adds	r1, r0, #2
  402f56:	8800      	ldrh	r0, [r0, #0]
  402f58:	4b03      	ldr	r3, [pc, #12]	; (402f68 <bootloader_upload_block+0x24>)
  402f5a:	4798      	blx	r3
  402f5c:	2800      	cmp	r0, #0
		return 3;
  402f5e:	bf18      	it	ne
  402f60:	2003      	movne	r0, #3
  402f62:	bd08      	pop	{r3, pc}
  402f64:	20000b38 	.word	0x20000b38
  402f68:	00402d69 	.word	0x00402d69

00402f6c <bootloader_install_image>:
///			2- received info do not match with previous info 
///			3- CRC (param) same as CRC image on scratch pad space.
///         4- flags not set
///			5- ARM was not reset
///
uint8_t bootloader_install_image( uint8_t * payload ) {	
  402f6c:	b510      	push	{r4, lr}
		
	// check that info is equal to info received with the start command
	if (compare_content( (uint8_t *)&new_image , payload , sizeof(new_image_t)) != 0)
  402f6e:	2210      	movs	r2, #16
  402f70:	4601      	mov	r1, r0
  402f72:	480e      	ldr	r0, [pc, #56]	; (402fac <bootloader_install_image+0x40>)
  402f74:	4b0e      	ldr	r3, [pc, #56]	; (402fb0 <bootloader_install_image+0x44>)
  402f76:	4798      	blx	r3
  402f78:	b108      	cbz	r0, 402f7e <bootloader_install_image+0x12>
		return 2;
  402f7a:	2002      	movs	r0, #2
  402f7c:	bd10      	pop	{r4, pc}
	
	// Check if CRC received as parameter matches with the scratchpad image CRC
	if (verify_scratch_image(new_image.length, new_image.crc) == FALSE)
  402f7e:	4b0b      	ldr	r3, [pc, #44]	; (402fac <bootloader_install_image+0x40>)
  402f80:	8919      	ldrh	r1, [r3, #8]
  402f82:	6858      	ldr	r0, [r3, #4]
  402f84:	4b0b      	ldr	r3, [pc, #44]	; (402fb4 <bootloader_install_image+0x48>)
  402f86:	4798      	blx	r3
  402f88:	b908      	cbnz	r0, 402f8e <bootloader_install_image+0x22>
		return 3;
  402f8a:	2003      	movs	r0, #3
  402f8c:	bd10      	pop	{r4, pc}
	
	// Set flags
	if (boot_set_flag(new_image.crc, new_image.length) != 0)
  402f8e:	4b07      	ldr	r3, [pc, #28]	; (402fac <bootloader_install_image+0x40>)
  402f90:	6859      	ldr	r1, [r3, #4]
  402f92:	8918      	ldrh	r0, [r3, #8]
  402f94:	4b08      	ldr	r3, [pc, #32]	; (402fb8 <bootloader_install_image+0x4c>)
  402f96:	4798      	blx	r3
  402f98:	b108      	cbz	r0, 402f9e <bootloader_install_image+0x32>
		return 4;
  402f9a:	2004      	movs	r0, #4
	system_reset_ARM();

	// Should never get here
	return 0;
	
}
  402f9c:	bd10      	pop	{r4, pc}
	start_upload_ready = 0;
  402f9e:	2400      	movs	r4, #0
  402fa0:	4b06      	ldr	r3, [pc, #24]	; (402fbc <bootloader_install_image+0x50>)
  402fa2:	701c      	strb	r4, [r3, #0]
	system_reset_ARM();
  402fa4:	4b06      	ldr	r3, [pc, #24]	; (402fc0 <bootloader_install_image+0x54>)
  402fa6:	4798      	blx	r3
	return 0;
  402fa8:	4620      	mov	r0, r4
  402faa:	bd10      	pop	{r4, pc}
  402fac:	20000ff0 	.word	0x20000ff0
  402fb0:	00405149 	.word	0x00405149
  402fb4:	00402d4d 	.word	0x00402d4d
  402fb8:	00402df5 	.word	0x00402df5
  402fbc:	20000b38 	.word	0x20000b38
  402fc0:	00405659 	.word	0x00405659

00402fc4 <sdcard_mount_logic_drive>:
volatile int16_t      sdcard_event_buffer[SETTINGS_EVENT_BUFFER_NUM];

/**************************** LOCAL FUNCTIONS ********************************/

/// @brief Mount the logic drive
FRESULT sdcard_mount_logic_drive(void) {
  402fc4:	b510      	push	{r4, lr}

	memset(&fs, 0, sizeof(FATFS));
  402fc6:	4c06      	ldr	r4, [pc, #24]	; (402fe0 <sdcard_mount_logic_drive+0x1c>)
  402fc8:	f44f 720d 	mov.w	r2, #564	; 0x234
  402fcc:	2100      	movs	r1, #0
  402fce:	4620      	mov	r0, r4
  402fd0:	4b04      	ldr	r3, [pc, #16]	; (402fe4 <sdcard_mount_logic_drive+0x20>)
  402fd2:	4798      	blx	r3
	return f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
  402fd4:	4621      	mov	r1, r4
  402fd6:	2000      	movs	r0, #0
  402fd8:	4b03      	ldr	r3, [pc, #12]	; (402fe8 <sdcard_mount_logic_drive+0x24>)
  402fda:	4798      	blx	r3
}
  402fdc:	bd10      	pop	{r4, pc}
  402fde:	bf00      	nop
  402fe0:	20001014 	.word	0x20001014
  402fe4:	0040b671 	.word	0x0040b671
  402fe8:	00408c51 	.word	0x00408c51
  402fec:	00000000 	.word	0x00000000

00402ff0 <compute_mod_and_phase>:

/*****************************************************************************/

void compute_mod_and_phase(trend_complex16_t * complex , int16_t * complex_mod , int16_t * complex_phase ) {
  402ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402ff4:	b083      	sub	sp, #12
  402ff6:	1e84      	subs	r4, r0, #2
  402ff8:	f1a1 0a02 	sub.w	sl, r1, #2
  402ffc:	f1a2 0b02 	sub.w	fp, r2, #2
  403000:	1d86      	adds	r6, r0, #6
  403002:	f100 0904 	add.w	r9, r0, #4

	for ( uint8_t i=0 ; i<3 ; i++ ) {

		complex_mod[i] = MATH_SQRT( SQUARE(complex->real[i]) + SQUARE(complex->imag[i]) );
  403006:	4d18      	ldr	r5, [pc, #96]	; (403068 <compute_mod_and_phase+0x78>)
  403008:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
  40300c:	46b0      	mov	r8, r6
  40300e:	f936 3b02 	ldrsh.w	r3, [r6], #2
  403012:	fb03 f303 	mul.w	r3, r3, r3
  403016:	fb00 3000 	mla	r0, r0, r0, r3
  40301a:	47a8      	blx	r5
  40301c:	4b13      	ldr	r3, [pc, #76]	; (40306c <compute_mod_and_phase+0x7c>)
  40301e:	4798      	blx	r3
  403020:	4f13      	ldr	r7, [pc, #76]	; (403070 <compute_mod_and_phase+0x80>)
  403022:	47b8      	blx	r7
  403024:	f82a 0f02 	strh.w	r0, [sl, #2]!
		complex_phase[i] = ((360.0/6.283185307179586)*64) * MATH_ATAN2( complex->imag[i] , complex->real[i] );
  403028:	f934 0f02 	ldrsh.w	r0, [r4, #2]!
  40302c:	47a8      	blx	r5
  40302e:	e9cd 0100 	strd	r0, r1, [sp]
  403032:	f9b8 0000 	ldrsh.w	r0, [r8]
  403036:	47a8      	blx	r5
  403038:	e9dd 2300 	ldrd	r2, r3, [sp]
  40303c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 403074 <compute_mod_and_phase+0x84>
  403040:	47c0      	blx	r8
  403042:	a307      	add	r3, pc, #28	; (adr r3, 403060 <compute_mod_and_phase+0x70>)
  403044:	e9d3 2300 	ldrd	r2, r3, [r3]
  403048:	f8df 802c 	ldr.w	r8, [pc, #44]	; 403078 <compute_mod_and_phase+0x88>
  40304c:	47c0      	blx	r8
  40304e:	47b8      	blx	r7
  403050:	f82b 0f02 	strh.w	r0, [fp, #2]!
	for ( uint8_t i=0 ; i<3 ; i++ ) {
  403054:	454c      	cmp	r4, r9
  403056:	d1d7      	bne.n	403008 <compute_mod_and_phase+0x18>

	}
	
}
  403058:	b003      	add	sp, #12
  40305a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40305e:	bf00      	nop
  403060:	1a63c1f8 	.word	0x1a63c1f8
  403064:	40aca5dc 	.word	0x40aca5dc
  403068:	0040a85d 	.word	0x0040a85d
  40306c:	00409e5d 	.word	0x00409e5d
  403070:	0040ae89 	.word	0x0040ae89
  403074:	00409e59 	.word	0x00409e59
  403078:	0040a929 	.word	0x0040a929

0040307c <save_data_x1>:
}

/*****************************************************************************/

/// @brief Save 1 data
bool save_data_x1( int16_t * data , float gain ) {
  40307c:	b570      	push	{r4, r5, r6, lr}
  40307e:	460d      	mov	r5, r1

	float temp;

	temp = data[0]*gain;
  403080:	4c13      	ldr	r4, [pc, #76]	; (4030d0 <save_data_x1+0x54>)
  403082:	f9b0 0000 	ldrsh.w	r0, [r0]
  403086:	47a0      	blx	r4
  403088:	4629      	mov	r1, r5
  40308a:	4b12      	ldr	r3, [pc, #72]	; (4030d4 <save_data_x1+0x58>)
  40308c:	4798      	blx	r3
  40308e:	4606      	mov	r6, r0
	if (EOF == f_printf( &file_object, "%d.%03d", (int16_t)temp , ABS((int16_t)((temp-(int32_t)temp)*1000.0)) )) return 0;
  403090:	4d11      	ldr	r5, [pc, #68]	; (4030d8 <save_data_x1+0x5c>)
  403092:	47a8      	blx	r5
  403094:	47a0      	blx	r4
  403096:	4601      	mov	r1, r0
  403098:	4630      	mov	r0, r6
  40309a:	4b10      	ldr	r3, [pc, #64]	; (4030dc <save_data_x1+0x60>)
  40309c:	4798      	blx	r3
  40309e:	4b10      	ldr	r3, [pc, #64]	; (4030e0 <save_data_x1+0x64>)
  4030a0:	4798      	blx	r3
  4030a2:	2200      	movs	r2, #0
  4030a4:	4b0f      	ldr	r3, [pc, #60]	; (4030e4 <save_data_x1+0x68>)
  4030a6:	4c10      	ldr	r4, [pc, #64]	; (4030e8 <save_data_x1+0x6c>)
  4030a8:	47a0      	blx	r4
  4030aa:	4b10      	ldr	r3, [pc, #64]	; (4030ec <save_data_x1+0x70>)
  4030ac:	4798      	blx	r3
  4030ae:	b200      	sxth	r0, r0
  4030b0:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
  4030b4:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
  4030b8:	4630      	mov	r0, r6
  4030ba:	47a8      	blx	r5
  4030bc:	4623      	mov	r3, r4
  4030be:	b202      	sxth	r2, r0
  4030c0:	490b      	ldr	r1, [pc, #44]	; (4030f0 <save_data_x1+0x74>)
  4030c2:	480c      	ldr	r0, [pc, #48]	; (4030f4 <save_data_x1+0x78>)
  4030c4:	4c0c      	ldr	r4, [pc, #48]	; (4030f8 <save_data_x1+0x7c>)
  4030c6:	47a0      	blx	r4

	return 1;
	
}
  4030c8:	3001      	adds	r0, #1
  4030ca:	bf18      	it	ne
  4030cc:	2001      	movne	r0, #1
  4030ce:	bd70      	pop	{r4, r5, r6, pc}
  4030d0:	0040b0ed 	.word	0x0040b0ed
  4030d4:	0040b195 	.word	0x0040b195
  4030d8:	0040b435 	.word	0x0040b435
  4030dc:	0040af81 	.word	0x0040af81
  4030e0:	0040a881 	.word	0x0040a881
  4030e4:	408f4000 	.word	0x408f4000
  4030e8:	0040a929 	.word	0x0040a929
  4030ec:	0040ae89 	.word	0x0040ae89
  4030f0:	0040f628 	.word	0x0040f628
  4030f4:	20001248 	.word	0x20001248
  4030f8:	004099a5 	.word	0x004099a5

004030fc <save_data_x3>:

/// @brief Save max, min and average
bool save_data_x3( int16_t * data , float gain ) {
  4030fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403100:	4606      	mov	r6, r0
  403102:	460d      	mov	r5, r1

	float temp;

	temp = data[0]*gain;
  403104:	4c3d      	ldr	r4, [pc, #244]	; (4031fc <save_data_x3+0x100>)
  403106:	f9b0 0000 	ldrsh.w	r0, [r0]
  40310a:	47a0      	blx	r4
  40310c:	4629      	mov	r1, r5
  40310e:	4b3c      	ldr	r3, [pc, #240]	; (403200 <save_data_x3+0x104>)
  403110:	4798      	blx	r3
  403112:	4680      	mov	r8, r0
	if (EOF == f_printf( &file_object, ",%d.%03d", (int16_t)temp , ABS((int16_t)((temp-(int32_t)temp)*1000.0)) )) return 0;
  403114:	4f3b      	ldr	r7, [pc, #236]	; (403204 <save_data_x3+0x108>)
  403116:	47b8      	blx	r7
  403118:	47a0      	blx	r4
  40311a:	4601      	mov	r1, r0
  40311c:	4640      	mov	r0, r8
  40311e:	4b3a      	ldr	r3, [pc, #232]	; (403208 <save_data_x3+0x10c>)
  403120:	4798      	blx	r3
  403122:	4b3a      	ldr	r3, [pc, #232]	; (40320c <save_data_x3+0x110>)
  403124:	4798      	blx	r3
  403126:	2200      	movs	r2, #0
  403128:	4b39      	ldr	r3, [pc, #228]	; (403210 <save_data_x3+0x114>)
  40312a:	4c3a      	ldr	r4, [pc, #232]	; (403214 <save_data_x3+0x118>)
  40312c:	47a0      	blx	r4
  40312e:	4b3a      	ldr	r3, [pc, #232]	; (403218 <save_data_x3+0x11c>)
  403130:	4798      	blx	r3
  403132:	b200      	sxth	r0, r0
  403134:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
  403138:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
  40313c:	4640      	mov	r0, r8
  40313e:	47b8      	blx	r7
  403140:	4623      	mov	r3, r4
  403142:	b202      	sxth	r2, r0
  403144:	4935      	ldr	r1, [pc, #212]	; (40321c <save_data_x3+0x120>)
  403146:	4836      	ldr	r0, [pc, #216]	; (403220 <save_data_x3+0x124>)
  403148:	4c36      	ldr	r4, [pc, #216]	; (403224 <save_data_x3+0x128>)
  40314a:	47a0      	blx	r4
  40314c:	f1b0 3fff 	cmp.w	r0, #4294967295
  403150:	d04d      	beq.n	4031ee <save_data_x3+0xf2>
	temp = data[1]*gain;
  403152:	4c2a      	ldr	r4, [pc, #168]	; (4031fc <save_data_x3+0x100>)
  403154:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
  403158:	47a0      	blx	r4
  40315a:	4629      	mov	r1, r5
  40315c:	4b28      	ldr	r3, [pc, #160]	; (403200 <save_data_x3+0x104>)
  40315e:	4798      	blx	r3
  403160:	4680      	mov	r8, r0
	if (EOF == f_printf( &file_object, ",%d.%03d", (int16_t)temp , ABS((int16_t)((temp-(int32_t)temp)*1000.0)) )) return 0;
  403162:	47b8      	blx	r7
  403164:	47a0      	blx	r4
  403166:	4601      	mov	r1, r0
  403168:	4640      	mov	r0, r8
  40316a:	4b27      	ldr	r3, [pc, #156]	; (403208 <save_data_x3+0x10c>)
  40316c:	4798      	blx	r3
  40316e:	4b27      	ldr	r3, [pc, #156]	; (40320c <save_data_x3+0x110>)
  403170:	4798      	blx	r3
  403172:	2200      	movs	r2, #0
  403174:	4b26      	ldr	r3, [pc, #152]	; (403210 <save_data_x3+0x114>)
  403176:	4c27      	ldr	r4, [pc, #156]	; (403214 <save_data_x3+0x118>)
  403178:	47a0      	blx	r4
  40317a:	4b27      	ldr	r3, [pc, #156]	; (403218 <save_data_x3+0x11c>)
  40317c:	4798      	blx	r3
  40317e:	b200      	sxth	r0, r0
  403180:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
  403184:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
  403188:	4640      	mov	r0, r8
  40318a:	47b8      	blx	r7
  40318c:	4623      	mov	r3, r4
  40318e:	b202      	sxth	r2, r0
  403190:	4922      	ldr	r1, [pc, #136]	; (40321c <save_data_x3+0x120>)
  403192:	4823      	ldr	r0, [pc, #140]	; (403220 <save_data_x3+0x124>)
  403194:	4c23      	ldr	r4, [pc, #140]	; (403224 <save_data_x3+0x128>)
  403196:	47a0      	blx	r4
  403198:	f1b0 3fff 	cmp.w	r0, #4294967295
  40319c:	d02a      	beq.n	4031f4 <save_data_x3+0xf8>
	temp = data[2]*gain;
  40319e:	4c17      	ldr	r4, [pc, #92]	; (4031fc <save_data_x3+0x100>)
  4031a0:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
  4031a4:	47a0      	blx	r4
  4031a6:	4629      	mov	r1, r5
  4031a8:	4b15      	ldr	r3, [pc, #84]	; (403200 <save_data_x3+0x104>)
  4031aa:	4798      	blx	r3
  4031ac:	4606      	mov	r6, r0
	if (EOF == f_printf( &file_object, ",%d.%03d", (int16_t)temp , ABS((int16_t)((temp-(int32_t)temp)*1000.0)) )) return 0;
  4031ae:	47b8      	blx	r7
  4031b0:	47a0      	blx	r4
  4031b2:	4601      	mov	r1, r0
  4031b4:	4630      	mov	r0, r6
  4031b6:	4b14      	ldr	r3, [pc, #80]	; (403208 <save_data_x3+0x10c>)
  4031b8:	4798      	blx	r3
  4031ba:	4b14      	ldr	r3, [pc, #80]	; (40320c <save_data_x3+0x110>)
  4031bc:	4798      	blx	r3
  4031be:	2200      	movs	r2, #0
  4031c0:	4b13      	ldr	r3, [pc, #76]	; (403210 <save_data_x3+0x114>)
  4031c2:	4c14      	ldr	r4, [pc, #80]	; (403214 <save_data_x3+0x118>)
  4031c4:	47a0      	blx	r4
  4031c6:	4b14      	ldr	r3, [pc, #80]	; (403218 <save_data_x3+0x11c>)
  4031c8:	4798      	blx	r3
  4031ca:	b200      	sxth	r0, r0
  4031cc:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
  4031d0:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
  4031d4:	4630      	mov	r0, r6
  4031d6:	47b8      	blx	r7
  4031d8:	4623      	mov	r3, r4
  4031da:	b202      	sxth	r2, r0
  4031dc:	490f      	ldr	r1, [pc, #60]	; (40321c <save_data_x3+0x120>)
  4031de:	4810      	ldr	r0, [pc, #64]	; (403220 <save_data_x3+0x124>)
  4031e0:	4c10      	ldr	r4, [pc, #64]	; (403224 <save_data_x3+0x128>)
  4031e2:	47a0      	blx	r4
  4031e4:	3001      	adds	r0, #1
  4031e6:	bf18      	it	ne
  4031e8:	2001      	movne	r0, #1
  4031ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (EOF == f_printf( &file_object, ",%d.%03d", (int16_t)temp , ABS((int16_t)((temp-(int32_t)temp)*1000.0)) )) return 0;
  4031ee:	2000      	movs	r0, #0
  4031f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (EOF == f_printf( &file_object, ",%d.%03d", (int16_t)temp , ABS((int16_t)((temp-(int32_t)temp)*1000.0)) )) return 0;
  4031f4:	2000      	movs	r0, #0
	
	return 1;

}
  4031f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4031fa:	bf00      	nop
  4031fc:	0040b0ed 	.word	0x0040b0ed
  403200:	0040b195 	.word	0x0040b195
  403204:	0040b435 	.word	0x0040b435
  403208:	0040af81 	.word	0x0040af81
  40320c:	0040a881 	.word	0x0040a881
  403210:	408f4000 	.word	0x408f4000
  403214:	0040a929 	.word	0x0040a929
  403218:	0040ae89 	.word	0x0040ae89
  40321c:	0040f630 	.word	0x0040f630
  403220:	20001248 	.word	0x20001248
  403224:	004099a5 	.word	0x004099a5

00403228 <print_device_identification>:

/// @brief print_device_label
bool print_device_identification( void ) {
  403228:	b510      	push	{r4, lr}

	if (EOF ==  f_printf( &file_object, "%s (Project ID=0x%02x)\n", SETTINGS_PROJECT_NAME , SETTINGS_PROJECT_ID )) return 0;
  40322a:	2304      	movs	r3, #4
  40322c:	4a2e      	ldr	r2, [pc, #184]	; (4032e8 <print_device_identification+0xc0>)
  40322e:	492f      	ldr	r1, [pc, #188]	; (4032ec <print_device_identification+0xc4>)
  403230:	482f      	ldr	r0, [pc, #188]	; (4032f0 <print_device_identification+0xc8>)
  403232:	4c30      	ldr	r4, [pc, #192]	; (4032f4 <print_device_identification+0xcc>)
  403234:	47a0      	blx	r4
  403236:	f1b0 3fff 	cmp.w	r0, #4294967295
  40323a:	d042      	beq.n	4032c2 <print_device_identification+0x9a>
	if (EOF ==  f_printf( &file_object, "ARM FW version = %d.%d\n", SETTINGS_ARM_FW_VERSION , SETTINGS_ARM_FW_VERSION_ENG_BUILD )) return 0;
  40323c:	2303      	movs	r3, #3
  40323e:	2202      	movs	r2, #2
  403240:	492d      	ldr	r1, [pc, #180]	; (4032f8 <print_device_identification+0xd0>)
  403242:	482b      	ldr	r0, [pc, #172]	; (4032f0 <print_device_identification+0xc8>)
  403244:	47a0      	blx	r4
  403246:	f1b0 3fff 	cmp.w	r0, #4294967295
  40324a:	d03c      	beq.n	4032c6 <print_device_identification+0x9e>
	if (EOF ==  f_printf( &file_object, "DSP FW version = %d.%d\n", DSP_fw[0] , DSP_fw[1] )) return 0;
  40324c:	4b2b      	ldr	r3, [pc, #172]	; (4032fc <print_device_identification+0xd4>)
  40324e:	781a      	ldrb	r2, [r3, #0]
  403250:	785b      	ldrb	r3, [r3, #1]
  403252:	492b      	ldr	r1, [pc, #172]	; (403300 <print_device_identification+0xd8>)
  403254:	4826      	ldr	r0, [pc, #152]	; (4032f0 <print_device_identification+0xc8>)
  403256:	47a0      	blx	r4
  403258:	f1b0 3fff 	cmp.w	r0, #4294967295
  40325c:	d035      	beq.n	4032ca <print_device_identification+0xa2>
	if (EOF ==  f_puts( "Location name = none\n" , &file_object )) return 0;
  40325e:	4924      	ldr	r1, [pc, #144]	; (4032f0 <print_device_identification+0xc8>)
  403260:	4828      	ldr	r0, [pc, #160]	; (403304 <print_device_identification+0xdc>)
  403262:	4b29      	ldr	r3, [pc, #164]	; (403308 <print_device_identification+0xe0>)
  403264:	4798      	blx	r3
  403266:	f1b0 3fff 	cmp.w	r0, #4294967295
  40326a:	d030      	beq.n	4032ce <print_device_identification+0xa6>
	if (EOF ==  f_puts( "Device name = none\n" , &file_object )) return 0;
  40326c:	4920      	ldr	r1, [pc, #128]	; (4032f0 <print_device_identification+0xc8>)
  40326e:	4827      	ldr	r0, [pc, #156]	; (40330c <print_device_identification+0xe4>)
  403270:	4b25      	ldr	r3, [pc, #148]	; (403308 <print_device_identification+0xe0>)
  403272:	4798      	blx	r3
  403274:	f1b0 3fff 	cmp.w	r0, #4294967295
  403278:	d02b      	beq.n	4032d2 <print_device_identification+0xaa>
	if (EOF ==  f_puts( "Note_1 = none\n" , &file_object )) return 0;
  40327a:	491d      	ldr	r1, [pc, #116]	; (4032f0 <print_device_identification+0xc8>)
  40327c:	4824      	ldr	r0, [pc, #144]	; (403310 <print_device_identification+0xe8>)
  40327e:	4b22      	ldr	r3, [pc, #136]	; (403308 <print_device_identification+0xe0>)
  403280:	4798      	blx	r3
  403282:	f1b0 3fff 	cmp.w	r0, #4294967295
  403286:	d026      	beq.n	4032d6 <print_device_identification+0xae>
	if (EOF ==  f_puts( "Note_2 = none\n" , &file_object )) return 0;
  403288:	4919      	ldr	r1, [pc, #100]	; (4032f0 <print_device_identification+0xc8>)
  40328a:	4822      	ldr	r0, [pc, #136]	; (403314 <print_device_identification+0xec>)
  40328c:	4b1e      	ldr	r3, [pc, #120]	; (403308 <print_device_identification+0xe0>)
  40328e:	4798      	blx	r3
  403290:	f1b0 3fff 	cmp.w	r0, #4294967295
  403294:	d021      	beq.n	4032da <print_device_identification+0xb2>
	if (EOF ==  f_puts( "Power configuration = Wye/Star\n" , &file_object )) return 0;
  403296:	4916      	ldr	r1, [pc, #88]	; (4032f0 <print_device_identification+0xc8>)
  403298:	481f      	ldr	r0, [pc, #124]	; (403318 <print_device_identification+0xf0>)
  40329a:	4b1b      	ldr	r3, [pc, #108]	; (403308 <print_device_identification+0xe0>)
  40329c:	4798      	blx	r3
  40329e:	f1b0 3fff 	cmp.w	r0, #4294967295
  4032a2:	d01c      	beq.n	4032de <print_device_identification+0xb6>
	if (EOF ==  f_puts( "Nominal Line-to-Line Voltage = 380V\n" , &file_object )) return 0;
  4032a4:	4912      	ldr	r1, [pc, #72]	; (4032f0 <print_device_identification+0xc8>)
  4032a6:	481d      	ldr	r0, [pc, #116]	; (40331c <print_device_identification+0xf4>)
  4032a8:	4b17      	ldr	r3, [pc, #92]	; (403308 <print_device_identification+0xe0>)
  4032aa:	4798      	blx	r3
  4032ac:	f1b0 3fff 	cmp.w	r0, #4294967295
  4032b0:	d017      	beq.n	4032e2 <print_device_identification+0xba>
	if (EOF ==  f_puts( "Nominal Line-to-Neutral Voltage = 220V\n\n" , &file_object )) return 0;
  4032b2:	490f      	ldr	r1, [pc, #60]	; (4032f0 <print_device_identification+0xc8>)
  4032b4:	481a      	ldr	r0, [pc, #104]	; (403320 <print_device_identification+0xf8>)
  4032b6:	4b14      	ldr	r3, [pc, #80]	; (403308 <print_device_identification+0xe0>)
  4032b8:	4798      	blx	r3
  4032ba:	3001      	adds	r0, #1
  4032bc:	bf18      	it	ne
  4032be:	2001      	movne	r0, #1
  4032c0:	bd10      	pop	{r4, pc}
	if (EOF ==  f_printf( &file_object, "%s (Project ID=0x%02x)\n", SETTINGS_PROJECT_NAME , SETTINGS_PROJECT_ID )) return 0;
  4032c2:	2000      	movs	r0, #0
  4032c4:	bd10      	pop	{r4, pc}
	if (EOF ==  f_printf( &file_object, "ARM FW version = %d.%d\n", SETTINGS_ARM_FW_VERSION , SETTINGS_ARM_FW_VERSION_ENG_BUILD )) return 0;
  4032c6:	2000      	movs	r0, #0
  4032c8:	bd10      	pop	{r4, pc}
	if (EOF ==  f_printf( &file_object, "DSP FW version = %d.%d\n", DSP_fw[0] , DSP_fw[1] )) return 0;
  4032ca:	2000      	movs	r0, #0
  4032cc:	bd10      	pop	{r4, pc}
	if (EOF ==  f_puts( "Location name = none\n" , &file_object )) return 0;
  4032ce:	2000      	movs	r0, #0
  4032d0:	bd10      	pop	{r4, pc}
	if (EOF ==  f_puts( "Device name = none\n" , &file_object )) return 0;
  4032d2:	2000      	movs	r0, #0
  4032d4:	bd10      	pop	{r4, pc}
	if (EOF ==  f_puts( "Note_1 = none\n" , &file_object )) return 0;
  4032d6:	2000      	movs	r0, #0
  4032d8:	bd10      	pop	{r4, pc}
	if (EOF ==  f_puts( "Note_2 = none\n" , &file_object )) return 0;
  4032da:	2000      	movs	r0, #0
  4032dc:	bd10      	pop	{r4, pc}
	if (EOF ==  f_puts( "Power configuration = Wye/Star\n" , &file_object )) return 0;
  4032de:	2000      	movs	r0, #0
  4032e0:	bd10      	pop	{r4, pc}
	if (EOF ==  f_puts( "Nominal Line-to-Line Voltage = 380V\n" , &file_object )) return 0;
  4032e2:	2000      	movs	r0, #0
	
	return 1;

}
  4032e4:	bd10      	pop	{r4, pc}
  4032e6:	bf00      	nop
  4032e8:	0040f510 	.word	0x0040f510
  4032ec:	0040f520 	.word	0x0040f520
  4032f0:	20001248 	.word	0x20001248
  4032f4:	004099a5 	.word	0x004099a5
  4032f8:	0040f538 	.word	0x0040f538
  4032fc:	20000be8 	.word	0x20000be8
  403300:	0040f550 	.word	0x0040f550
  403304:	0040f568 	.word	0x0040f568
  403308:	00409975 	.word	0x00409975
  40330c:	0040f580 	.word	0x0040f580
  403310:	0040f594 	.word	0x0040f594
  403314:	0040f5a4 	.word	0x0040f5a4
  403318:	0040f5b4 	.word	0x0040f5b4
  40331c:	0040f5d4 	.word	0x0040f5d4
  403320:	0040f5fc 	.word	0x0040f5fc
  403324:	00000000 	.word	0x00000000

00403328 <sdcard_save_trends>:

/// @brief Save trends into SD-Card.
//EXAMPLE: 12:50:43,13:01:13, 156.246, 156.246, 156.246, 226.391, 226.391, 226.391,   0.012,   0.012,   0.012, 180.000, 180.000, 180.000, 310.998, 310.998, 310.998, -90.000,   0.000, -90.000,  69.982,  69.982,  69.982,  50.625,  50.625,  50.625,   0.012,   0.012,   0.012, 180.000, 180.000, 180.000,  29.992,  29.992,  29.992,-140.625,   0.000,-140.625,  24.462,  24.462,  24.462,  95.117,  95.117,  95.117,   0.012,   0.012,   0.012, 180.000, 180.000, 180.000,  99.987,  99.987,  99.987, 149.062, 149.062, 149.062,   0.012,   0.012,   0.012, -90.000,   0.000, -90.000,   0.012,   0.012,   0.012, -90.000,   0.000, -90.000,  90.002,  90.002,  90.002,-140.609,   0.000,-140.609,  89.990,  89.990,  89.990,  45.251,  45.251,  45.251,   0.012,   0.012,   0.012, 180.000, 180.000, 180.000,  49.987,  49.987,  49.987,  30.921,  30.921,  30.921,  39.978,  39.978,  39.978,  50.609,  50.609,  50.609,   0.012,   0.012,   0.012, 180.000, 180.000, 180.000,   0.012,   0.012,   0.012,-135.000,   0.000,-135.000,  80.004,  80.004,  80.004,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.024,   0.024,   0.024,  84.844,  84.844,  84.844,   0.006,   0.006,   0.006, 180.000, 180.000, 180.000, 120.001, 120.001, 120.001, -90.000,   0.000, -90.000,   0.006,   0.006,   0.006, -90.000,   0.000, -90.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,  84.844,  84.844,  84.844,   0.006,   0.006,   0.006, 180.000, 180.000, 180.000, 119.995, 119.995, 119.995, 149.062, 149.062, 149.062,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.006,   0.006,   0.006, -90.000,   0.000, -90.000,   0.006,   0.006,   0.006,-135.000,   0.000,-135.000,   0.512,   0.512,   0.512,  84.844,  84.844,  84.844,   0.006,   0.006,   0.006, 180.000, 180.000, 180.000, 119.989, 119.989, 119.989,  30.921,  30.921,  30.921,   0.006,   0.006,   0.006, 180.000, 180.000, 180.000,   0.006,   0.006,   0.006,-135.000,   0.000,-135.000,   0.006,   0.006,   0.006, -90.000,   0.000, -90.000,   1.123,   1.123,   1.123,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.024,   0.024,   0.024, 153.649, 153.649, 153.649, -90.093,   0.000, -90.093,  80.688,  80.688,  80.688, -79.593,   0.000, -79.593,  79.260,  79.260,  79.260,-100.375,   0.000,-100.375,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,  52.490,  52.490,  52.490,  51.562,  51.562,  51.562,1000.000,1000.000,1000.000,1000.000,1000.000,1000.000,1000.000,1000.000,1000.000,1000.000,1000.000,1000.000
bool sdcard_save_trends( trend_t * trend , uint8_t type) {
  403328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40332c:	b08f      	sub	sp, #60	; 0x3c
  40332e:	4606      	mov	r6, r0
  403330:	4689      	mov	r9, r1
	uint32_t year, month, day, hour, minute, second;
	float gain_voltage,gain_current,gain_power_Q14;
	int16_t complex_mod[6], complex_phase[6];
		
	// update gains
	gain_voltage = unit_config.gain_volt/SETTINGS_DSP_ADC_MAX_TICK;
  403332:	4b52      	ldr	r3, [pc, #328]	; (40347c <sdcard_save_trends+0x154>)
  403334:	f8d3 a020 	ldr.w	sl, [r3, #32]
	gain_current = unit_config.gain_curr_A/SETTINGS_DSP_ADC_MAX_TICK;
  403338:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
	gain_power_Q14 = gain_voltage*gain_current*Q14;
	
	// get date from RTC
	rtc_get_date(RTC, &year, &month, &day, 0);
  40333c:	4c50      	ldr	r4, [pc, #320]	; (403480 <sdcard_save_trends+0x158>)
  40333e:	2500      	movs	r5, #0
  403340:	9500      	str	r5, [sp, #0]
  403342:	ab0b      	add	r3, sp, #44	; 0x2c
  403344:	aa0c      	add	r2, sp, #48	; 0x30
  403346:	a90d      	add	r1, sp, #52	; 0x34
  403348:	4620      	mov	r0, r4
  40334a:	4f4e      	ldr	r7, [pc, #312]	; (403484 <sdcard_save_trends+0x15c>)
  40334c:	47b8      	blx	r7
	rtc_get_time(RTC, &hour, &minute, &second);
  40334e:	ab08      	add	r3, sp, #32
  403350:	aa09      	add	r2, sp, #36	; 0x24
  403352:	a90a      	add	r1, sp, #40	; 0x28
  403354:	4620      	mov	r0, r4
  403356:	4c4c      	ldr	r4, [pc, #304]	; (403488 <sdcard_save_trends+0x160>)
  403358:	47a0      	blx	r4
	
	// Define directory name (example "2015/Month_12/Day_01" for 1 of December of 2015) and create it.
	memset( (void *)&string , 0 , sizeof(string) );
  40335a:	4c4c      	ldr	r4, [pc, #304]	; (40348c <sdcard_save_trends+0x164>)
  40335c:	2280      	movs	r2, #128	; 0x80
  40335e:	4629      	mov	r1, r5
  403360:	4620      	mov	r0, r4
  403362:	4b4b      	ldr	r3, [pc, #300]	; (403490 <sdcard_save_trends+0x168>)
  403364:	4798      	blx	r3
	sprintf( (char *)&string ,"%4d" , (int16_t)year);
  403366:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
  40336a:	494a      	ldr	r1, [pc, #296]	; (403494 <sdcard_save_trends+0x16c>)
  40336c:	4620      	mov	r0, r4
  40336e:	4f4a      	ldr	r7, [pc, #296]	; (403498 <sdcard_save_trends+0x170>)
  403370:	47b8      	blx	r7
	f_mkdir(string);	// Create folder if it do not exist
  403372:	4620      	mov	r0, r4
  403374:	4d49      	ldr	r5, [pc, #292]	; (40349c <sdcard_save_trends+0x174>)
  403376:	47a8      	blx	r5
	sprintf( (char *)&string+4 ,"/Month_%02d" , (int16_t)month);
  403378:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
  40337c:	4948      	ldr	r1, [pc, #288]	; (4034a0 <sdcard_save_trends+0x178>)
  40337e:	1d20      	adds	r0, r4, #4
  403380:	47b8      	blx	r7
	f_mkdir(string);	// Create folder if it do not exist
  403382:	4620      	mov	r0, r4
  403384:	47a8      	blx	r5
	sprintf( (char *)&string+13 ,"/Day_%02d" , (int16_t)day);
  403386:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
  40338a:	4946      	ldr	r1, [pc, #280]	; (4034a4 <sdcard_save_trends+0x17c>)
  40338c:	f104 000d 	add.w	r0, r4, #13
  403390:	47b8      	blx	r7
	f_mkdir(string);	// Create folder if it do not exist
  403392:	4620      	mov	r0, r4
  403394:	47a8      	blx	r5
	
	// define file name (example "PM_2015_12_05_DailyTrend_3s.txt" for 5 of December of 2015). File name is added to folder name so pointer is moved 20 chars.
	if (type == 0)
  403396:	f1b9 0f00 	cmp.w	r9, #0
  40339a:	d15a      	bne.n	403452 <sdcard_save_trends+0x12a>
		sprintf( (char *)&string+20 ,"/LICPM2_%4d_%02d_%02d_DailyTrend_3s.txt" , (int16_t)year , (int16_t)month , (int16_t)day);
  40339c:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
  4033a0:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
  4033a4:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
  4033a8:	9100      	str	r1, [sp, #0]
  4033aa:	493f      	ldr	r1, [pc, #252]	; (4034a8 <sdcard_save_trends+0x180>)
  4033ac:	f104 0014 	add.w	r0, r4, #20
  4033b0:	47b8      	blx	r7
	else
		sprintf( (char *)&string+20 ,"/LICPM2_%4d_%02d_%02d_DailyTrend_5m.txt" , (int16_t)year , (int16_t)month , (int16_t)day);
		
	// get date from RTC. TODO: Por alguna razon que no entiendo sprintf sobrescribe la variable day. Repito la lectura del RTC hasta entender este problema.
	rtc_get_date(RTC, &year, &month, &day, 0);
  4033b2:	2300      	movs	r3, #0
  4033b4:	9300      	str	r3, [sp, #0]
  4033b6:	ab0b      	add	r3, sp, #44	; 0x2c
  4033b8:	aa0c      	add	r2, sp, #48	; 0x30
  4033ba:	a90d      	add	r1, sp, #52	; 0x34
  4033bc:	4830      	ldr	r0, [pc, #192]	; (403480 <sdcard_save_trends+0x158>)
  4033be:	4c31      	ldr	r4, [pc, #196]	; (403484 <sdcard_save_trends+0x15c>)
  4033c0:	47a0      	blx	r4

	// open file or create it if it do not exist.
	if (FR_OK != f_open( &file_object , (char const *)string , FA_OPEN_ALWAYS | FA_WRITE ))	return 0;
  4033c2:	2212      	movs	r2, #18
  4033c4:	4931      	ldr	r1, [pc, #196]	; (40348c <sdcard_save_trends+0x164>)
  4033c6:	4839      	ldr	r0, [pc, #228]	; (4034ac <sdcard_save_trends+0x184>)
  4033c8:	4b39      	ldr	r3, [pc, #228]	; (4034b0 <sdcard_save_trends+0x188>)
  4033ca:	4798      	blx	r3
  4033cc:	2800      	cmp	r0, #0
  4033ce:	f040 81b5 	bne.w	40373c <sdcard_save_trends+0x414>

	// if file was created, read/write pointer at begging, print Power Meter information
	if (f_tell ( &file_object ) == 0) {
  4033d2:	4b36      	ldr	r3, [pc, #216]	; (4034ac <sdcard_save_trends+0x184>)
  4033d4:	689b      	ldr	r3, [r3, #8]
  4033d6:	2b00      	cmp	r3, #0
  4033d8:	d133      	bne.n	403442 <sdcard_save_trends+0x11a>
		// device information
		if (EOF == print_device_identification()) return 0;
  4033da:	4b36      	ldr	r3, [pc, #216]	; (4034b4 <sdcard_save_trends+0x18c>)
  4033dc:	4798      	blx	r3
		// specific information
		if (EOF == f_printf( &file_object, "Daily Trend\n" )) return 0;
  4033de:	4936      	ldr	r1, [pc, #216]	; (4034b8 <sdcard_save_trends+0x190>)
  4033e0:	4832      	ldr	r0, [pc, #200]	; (4034ac <sdcard_save_trends+0x184>)
  4033e2:	4b36      	ldr	r3, [pc, #216]	; (4034bc <sdcard_save_trends+0x194>)
  4033e4:	4798      	blx	r3
  4033e6:	f1b0 3fff 	cmp.w	r0, #4294967295
  4033ea:	f000 81ab 	beq.w	403744 <sdcard_save_trends+0x41c>
		if (EOF == f_puts( "Type = " , &file_object )) return 0;
  4033ee:	492f      	ldr	r1, [pc, #188]	; (4034ac <sdcard_save_trends+0x184>)
  4033f0:	4833      	ldr	r0, [pc, #204]	; (4034c0 <sdcard_save_trends+0x198>)
  4033f2:	4b34      	ldr	r3, [pc, #208]	; (4034c4 <sdcard_save_trends+0x19c>)
  4033f4:	4798      	blx	r3
  4033f6:	f1b0 3fff 	cmp.w	r0, #4294967295
  4033fa:	f000 81a5 	beq.w	403748 <sdcard_save_trends+0x420>
		if (type == 0) 
  4033fe:	f1b9 0f00 	cmp.w	r9, #0
  403402:	d132      	bne.n	40346a <sdcard_save_trends+0x142>
			{ if (EOF == f_puts( "3 seconds" , &file_object )) return 0; }
  403404:	4929      	ldr	r1, [pc, #164]	; (4034ac <sdcard_save_trends+0x184>)
  403406:	4830      	ldr	r0, [pc, #192]	; (4034c8 <sdcard_save_trends+0x1a0>)
  403408:	4b2e      	ldr	r3, [pc, #184]	; (4034c4 <sdcard_save_trends+0x19c>)
  40340a:	4798      	blx	r3
  40340c:	f1b0 3fff 	cmp.w	r0, #4294967295
  403410:	f000 819c 	beq.w	40374c <sdcard_save_trends+0x424>
		else
			{ if (EOF == f_puts( "5 minutes" , &file_object )) return 0; }
		if (EOF == f_printf( &file_object, "\nDate = %4d/%02d/%02d\n\n", (int16_t)year , (int16_t)month , (int16_t)day )) return 0;
  403414:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
  403418:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
  40341c:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
  403420:	9100      	str	r1, [sp, #0]
  403422:	492a      	ldr	r1, [pc, #168]	; (4034cc <sdcard_save_trends+0x1a4>)
  403424:	4821      	ldr	r0, [pc, #132]	; (4034ac <sdcard_save_trends+0x184>)
  403426:	4c25      	ldr	r4, [pc, #148]	; (4034bc <sdcard_save_trends+0x194>)
  403428:	47a0      	blx	r4
  40342a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40342e:	f000 818f 	beq.w	403750 <sdcard_save_trends+0x428>
		if (EOF == f_puts( TRENDS_LABELS , &file_object )) return 0;
  403432:	491e      	ldr	r1, [pc, #120]	; (4034ac <sdcard_save_trends+0x184>)
  403434:	4826      	ldr	r0, [pc, #152]	; (4034d0 <sdcard_save_trends+0x1a8>)
  403436:	4b23      	ldr	r3, [pc, #140]	; (4034c4 <sdcard_save_trends+0x19c>)
  403438:	4798      	blx	r3
  40343a:	f1b0 3fff 	cmp.w	r0, #4294967295
  40343e:	f000 8189 	beq.w	403754 <sdcard_save_trends+0x42c>
	}
	
	// Move to end of the file to append data (needed when a existing file is open)
	if (FR_OK != f_lseek( &file_object , f_size(&file_object)) ) return 0;
  403442:	481a      	ldr	r0, [pc, #104]	; (4034ac <sdcard_save_trends+0x184>)
  403444:	68c1      	ldr	r1, [r0, #12]
  403446:	4b23      	ldr	r3, [pc, #140]	; (4034d4 <sdcard_save_trends+0x1ac>)
  403448:	4798      	blx	r3
  40344a:	2800      	cmp	r0, #0
  40344c:	d04a      	beq.n	4034e4 <sdcard_save_trends+0x1bc>
  40344e:	2000      	movs	r0, #0
  403450:	e175      	b.n	40373e <sdcard_save_trends+0x416>
		sprintf( (char *)&string+20 ,"/LICPM2_%4d_%02d_%02d_DailyTrend_5m.txt" , (int16_t)year , (int16_t)month , (int16_t)day);
  403452:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
  403456:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
  40345a:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
  40345e:	9100      	str	r1, [sp, #0]
  403460:	491d      	ldr	r1, [pc, #116]	; (4034d8 <sdcard_save_trends+0x1b0>)
  403462:	481e      	ldr	r0, [pc, #120]	; (4034dc <sdcard_save_trends+0x1b4>)
  403464:	4c0c      	ldr	r4, [pc, #48]	; (403498 <sdcard_save_trends+0x170>)
  403466:	47a0      	blx	r4
  403468:	e7a3      	b.n	4033b2 <sdcard_save_trends+0x8a>
			{ if (EOF == f_puts( "5 minutes" , &file_object )) return 0; }
  40346a:	4910      	ldr	r1, [pc, #64]	; (4034ac <sdcard_save_trends+0x184>)
  40346c:	481c      	ldr	r0, [pc, #112]	; (4034e0 <sdcard_save_trends+0x1b8>)
  40346e:	4b15      	ldr	r3, [pc, #84]	; (4034c4 <sdcard_save_trends+0x19c>)
  403470:	4798      	blx	r3
  403472:	f1b0 3fff 	cmp.w	r0, #4294967295
  403476:	d1cd      	bne.n	403414 <sdcard_save_trends+0xec>
  403478:	2000      	movs	r0, #0
  40347a:	e160      	b.n	40373e <sdcard_save_trends+0x416>
  40347c:	20001db0 	.word	0x20001db0
  403480:	400e1460 	.word	0x400e1460
  403484:	00407005 	.word	0x00407005
  403488:	00406f17 	.word	0x00406f17
  40348c:	2000126c 	.word	0x2000126c
  403490:	0040b671 	.word	0x0040b671
  403494:	0040f8b4 	.word	0x0040f8b4
  403498:	0040b70d 	.word	0x0040b70d
  40349c:	0040970d 	.word	0x0040970d
  4034a0:	0040f8b8 	.word	0x0040f8b8
  4034a4:	0040f8c4 	.word	0x0040f8c4
  4034a8:	0040f8d0 	.word	0x0040f8d0
  4034ac:	20001248 	.word	0x20001248
  4034b0:	00408c79 	.word	0x00408c79
  4034b4:	00403229 	.word	0x00403229
  4034b8:	0040f920 	.word	0x0040f920
  4034bc:	004099a5 	.word	0x004099a5
  4034c0:	0040f930 	.word	0x0040f930
  4034c4:	00409975 	.word	0x00409975
  4034c8:	0040f938 	.word	0x0040f938
  4034cc:	0040f950 	.word	0x0040f950
  4034d0:	0040f968 	.word	0x0040f968
  4034d4:	0040925d 	.word	0x0040925d
  4034d8:	0040f8f8 	.word	0x0040f8f8
  4034dc:	20001280 	.word	0x20001280
  4034e0:	0040f944 	.word	0x0040f944
	
	// Print ARM RTC for debugging porpuose.
	if (EOF == f_printf( &file_object, "%02d:%02d:%02d,", (int16_t)hour , (int16_t)minute , (int16_t)second )) return 0;
  4034e4:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
  4034e8:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
  4034ec:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
  4034f0:	9100      	str	r1, [sp, #0]
  4034f2:	499f      	ldr	r1, [pc, #636]	; (403770 <sdcard_save_trends+0x448>)
  4034f4:	489f      	ldr	r0, [pc, #636]	; (403774 <sdcard_save_trends+0x44c>)
  4034f6:	4ca0      	ldr	r4, [pc, #640]	; (403778 <sdcard_save_trends+0x450>)
  4034f8:	47a0      	blx	r4
  4034fa:	f1b0 3fff 	cmp.w	r0, #4294967295
  4034fe:	f000 812b 	beq.w	403758 <sdcard_save_trends+0x430>
	
	// Print trends into sd-card
	{
		// Print time
		if (EOF == f_printf( &file_object, "%02d:%02d:%02d", trend->time.hour , trend->time.minute , trend->time.second )) return 0;
  403502:	88b3      	ldrh	r3, [r6, #4]
  403504:	88f2      	ldrh	r2, [r6, #6]
  403506:	8871      	ldrh	r1, [r6, #2]
  403508:	9100      	str	r1, [sp, #0]
  40350a:	499c      	ldr	r1, [pc, #624]	; (40377c <sdcard_save_trends+0x454>)
  40350c:	4899      	ldr	r0, [pc, #612]	; (403774 <sdcard_save_trends+0x44c>)
  40350e:	47a0      	blx	r4
  403510:	f1b0 3fff 	cmp.w	r0, #4294967295
  403514:	f000 8122 	beq.w	40375c <sdcard_save_trends+0x434>

		// Print flags
		if (EOF == f_printf( &file_object, ",%016b", trend->flags )) return 0;
  403518:	8932      	ldrh	r2, [r6, #8]
  40351a:	4999      	ldr	r1, [pc, #612]	; (403780 <sdcard_save_trends+0x458>)
  40351c:	4895      	ldr	r0, [pc, #596]	; (403774 <sdcard_save_trends+0x44c>)
  40351e:	47a0      	blx	r4
  403520:	f1b0 3fff 	cmp.w	r0, #4294967295
  403524:	f000 811c 	beq.w	403760 <sdcard_save_trends+0x438>

		// Print time utilization
		{
			float temp = trend->time_utilization * (1.0 / SETTINGS_DSP_SYSCLK_MHZ);
  403528:	f9b6 000a 	ldrsh.w	r0, [r6, #10]
  40352c:	4b95      	ldr	r3, [pc, #596]	; (403784 <sdcard_save_trends+0x45c>)
  40352e:	4798      	blx	r3
  403530:	4c95      	ldr	r4, [pc, #596]	; (403788 <sdcard_save_trends+0x460>)
  403532:	a38d      	add	r3, pc, #564	; (adr r3, 403768 <sdcard_save_trends+0x440>)
  403534:	e9d3 2300 	ldrd	r2, r3, [r3]
  403538:	47a0      	blx	r4
  40353a:	4b94      	ldr	r3, [pc, #592]	; (40378c <sdcard_save_trends+0x464>)
  40353c:	4798      	blx	r3
  40353e:	4607      	mov	r7, r0
			if (EOF == f_printf( &file_object, ",%d.%03d", (int16_t)temp , ABS((int16_t)((temp-(int32_t)temp)*1000.0)) )) return 0;
  403540:	4d93      	ldr	r5, [pc, #588]	; (403790 <sdcard_save_trends+0x468>)
  403542:	47a8      	blx	r5
  403544:	4b93      	ldr	r3, [pc, #588]	; (403794 <sdcard_save_trends+0x46c>)
  403546:	4798      	blx	r3
  403548:	4601      	mov	r1, r0
  40354a:	4638      	mov	r0, r7
  40354c:	4b92      	ldr	r3, [pc, #584]	; (403798 <sdcard_save_trends+0x470>)
  40354e:	4798      	blx	r3
  403550:	4b92      	ldr	r3, [pc, #584]	; (40379c <sdcard_save_trends+0x474>)
  403552:	4798      	blx	r3
  403554:	2200      	movs	r2, #0
  403556:	4b92      	ldr	r3, [pc, #584]	; (4037a0 <sdcard_save_trends+0x478>)
  403558:	47a0      	blx	r4
  40355a:	4b92      	ldr	r3, [pc, #584]	; (4037a4 <sdcard_save_trends+0x47c>)
  40355c:	4798      	blx	r3
  40355e:	b200      	sxth	r0, r0
  403560:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
  403564:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
  403568:	4638      	mov	r0, r7
  40356a:	47a8      	blx	r5
  40356c:	4623      	mov	r3, r4
  40356e:	b202      	sxth	r2, r0
  403570:	498d      	ldr	r1, [pc, #564]	; (4037a8 <sdcard_save_trends+0x480>)
  403572:	4880      	ldr	r0, [pc, #512]	; (403774 <sdcard_save_trends+0x44c>)
  403574:	4c80      	ldr	r4, [pc, #512]	; (403778 <sdcard_save_trends+0x450>)
  403576:	47a0      	blx	r4
  403578:	f1b0 3fff 	cmp.w	r0, #4294967295
  40357c:	f000 8126 	beq.w	4037cc <sdcard_save_trends+0x4a4>
	gain_voltage = unit_config.gain_volt/SETTINGS_DSP_ADC_MAX_TICK;
  403580:	4650      	mov	r0, sl
  403582:	4b80      	ldr	r3, [pc, #512]	; (403784 <sdcard_save_trends+0x45c>)
  403584:	4798      	blx	r3
  403586:	2200      	movs	r2, #0
  403588:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
  40358c:	4c7e      	ldr	r4, [pc, #504]	; (403788 <sdcard_save_trends+0x460>)
  40358e:	47a0      	blx	r4
  403590:	4b7e      	ldr	r3, [pc, #504]	; (40378c <sdcard_save_trends+0x464>)
  403592:	4798      	blx	r3
  403594:	4681      	mov	r9, r0
		}
		
		// Print sampling period
		if (EOF == save_data_x3( &trend->Ts[0] , (1.0/SETTINGS_DSP_SYSCLK_MHZ) )) return 0;
  403596:	4985      	ldr	r1, [pc, #532]	; (4037ac <sdcard_save_trends+0x484>)
  403598:	f106 000c 	add.w	r0, r6, #12
  40359c:	4c84      	ldr	r4, [pc, #528]	; (4037b0 <sdcard_save_trends+0x488>)
  40359e:	47a0      	blx	r4

		// Print frequency
		if (EOF == save_data_x3( &trend->fL[0] , (1.0/Q08) )) return 0;
  4035a0:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
  4035a4:	f106 0012 	add.w	r0, r6, #18
  4035a8:	47a0      	blx	r4
  4035aa:	f106 045a 	add.w	r4, r6, #90	; 0x5a
  4035ae:	f506 7bbd 	add.w	fp, r6, #378	; 0x17a
			uint16_t H_count;

			for ( CH_count=0 ; CH_count<(SETTINGS_DSP_ADC_CH_NUMBER>>1) ; CH_count++ ) {

				// RMS
				if (EOF == save_data_x3( &trend->ch[CH_count].rms[0] , gain_voltage )) return 0;
  4035b2:	4f7f      	ldr	r7, [pc, #508]	; (4037b0 <sdcard_save_trends+0x488>)
					if (EOF == save_data_x3( &complex_phase[0] , (1.0/64.0) )) return 0;

				}

				// Total Waveform Distortion (TWD)
				if (EOF == save_data_x3( &trend->ch[CH_count].twd[0] , (100.0/4096.0) )) return 0;
  4035b4:	46b2      	mov	sl, r6
				if (EOF == save_data_x3( &trend->ch[CH_count].rms[0] , gain_voltage )) return 0;
  4035b6:	4649      	mov	r1, r9
  4035b8:	f1a4 0042 	sub.w	r0, r4, #66	; 0x42
  4035bc:	47b8      	blx	r7
  4035be:	f1a4 053c 	sub.w	r5, r4, #60	; 0x3c
					compute_mod_and_phase(&trend->ch[CH_count].harmonic[H_count] , &complex_mod[0] , &complex_phase[0] );
  4035c2:	4e7c      	ldr	r6, [pc, #496]	; (4037b4 <sdcard_save_trends+0x48c>)
  4035c4:	aa02      	add	r2, sp, #8
  4035c6:	a905      	add	r1, sp, #20
  4035c8:	4628      	mov	r0, r5
  4035ca:	47b0      	blx	r6
					if (EOF == save_data_x3( &complex_mod[0] , gain_voltage)) return 0;
  4035cc:	4649      	mov	r1, r9
  4035ce:	a805      	add	r0, sp, #20
  4035d0:	47b8      	blx	r7
					if (EOF == save_data_x3( &complex_phase[0] , (1.0/64.0) )) return 0;
  4035d2:	f04f 5172 	mov.w	r1, #1015021568	; 0x3c800000
  4035d6:	a802      	add	r0, sp, #8
  4035d8:	47b8      	blx	r7
  4035da:	350c      	adds	r5, #12
				for ( H_count=0 ; H_count<(SETTINGS_DSP_NDFT_MAX+1) ; H_count++ ) {
  4035dc:	42a5      	cmp	r5, r4
  4035de:	d1f1      	bne.n	4035c4 <sdcard_save_trends+0x29c>
				if (EOF == save_data_x3( &trend->ch[CH_count].twd[0] , (100.0/4096.0) )) return 0;
  4035e0:	4975      	ldr	r1, [pc, #468]	; (4037b8 <sdcard_save_trends+0x490>)
  4035e2:	4620      	mov	r0, r4
  4035e4:	47b8      	blx	r7
  4035e6:	3448      	adds	r4, #72	; 0x48
			for ( CH_count=0 ; CH_count<(SETTINGS_DSP_ADC_CH_NUMBER>>1) ; CH_count++ ) {
  4035e8:	455c      	cmp	r4, fp
  4035ea:	d1e4      	bne.n	4035b6 <sdcard_save_trends+0x28e>
	gain_current = unit_config.gain_curr_A/SETTINGS_DSP_ADC_MAX_TICK;
  4035ec:	4640      	mov	r0, r8
  4035ee:	4b65      	ldr	r3, [pc, #404]	; (403784 <sdcard_save_trends+0x45c>)
  4035f0:	4798      	blx	r3
  4035f2:	2200      	movs	r2, #0
  4035f4:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
  4035f8:	4d63      	ldr	r5, [pc, #396]	; (403788 <sdcard_save_trends+0x460>)
  4035fa:	47a8      	blx	r5
  4035fc:	4b63      	ldr	r3, [pc, #396]	; (40378c <sdcard_save_trends+0x464>)
  4035fe:	4798      	blx	r3
  403600:	4680      	mov	r8, r0
  403602:	f20a 2b9a 	addw	fp, sl, #666	; 0x29a
			}

			for ( CH_count=(SETTINGS_DSP_ADC_CH_NUMBER>>1) ; CH_count<SETTINGS_DSP_ADC_CH_NUMBER ; CH_count++ ) {

				// RMS
				if (EOF == save_data_x3( &trend->ch[CH_count].rms[0] , gain_current )) return 0;
  403606:	4f6a      	ldr	r7, [pc, #424]	; (4037b0 <sdcard_save_trends+0x488>)
  403608:	4641      	mov	r1, r8
  40360a:	f1a4 0042 	sub.w	r0, r4, #66	; 0x42
  40360e:	47b8      	blx	r7
  403610:	f1a4 053c 	sub.w	r5, r4, #60	; 0x3c

				// Harmonics
				for ( H_count=0 ; H_count<(SETTINGS_DSP_NDFT_MAX+1) ; H_count++ ) {
				
					compute_mod_and_phase(&trend->ch[CH_count].harmonic[H_count] , &complex_mod[0] , &complex_phase[0] );
  403614:	4e67      	ldr	r6, [pc, #412]	; (4037b4 <sdcard_save_trends+0x48c>)
  403616:	aa02      	add	r2, sp, #8
  403618:	a905      	add	r1, sp, #20
  40361a:	4628      	mov	r0, r5
  40361c:	47b0      	blx	r6
					if (EOF == save_data_x3( &complex_mod[0] , gain_current)) return 0;
  40361e:	4641      	mov	r1, r8
  403620:	a805      	add	r0, sp, #20
  403622:	47b8      	blx	r7
					if (EOF == save_data_x3( &complex_phase[0] , (1.0/64.0) )) return 0;
  403624:	f04f 5172 	mov.w	r1, #1015021568	; 0x3c800000
  403628:	a802      	add	r0, sp, #8
  40362a:	47b8      	blx	r7
  40362c:	350c      	adds	r5, #12
				for ( H_count=0 ; H_count<(SETTINGS_DSP_NDFT_MAX+1) ; H_count++ ) {
  40362e:	42a5      	cmp	r5, r4
  403630:	d1f1      	bne.n	403616 <sdcard_save_trends+0x2ee>

				}

				// Total Waveform Distortion (TWD)
				if (EOF == save_data_x3( &trend->ch[CH_count].twd[0] , (100.0/4096.0) )) return 0;
  403632:	4961      	ldr	r1, [pc, #388]	; (4037b8 <sdcard_save_trends+0x490>)
  403634:	4620      	mov	r0, r4
  403636:	47b8      	blx	r7
  403638:	3448      	adds	r4, #72	; 0x48
			for ( CH_count=(SETTINGS_DSP_ADC_CH_NUMBER>>1) ; CH_count<SETTINGS_DSP_ADC_CH_NUMBER ; CH_count++ ) {
  40363a:	455c      	cmp	r4, fp
  40363c:	d1e4      	bne.n	403608 <sdcard_save_trends+0x2e0>
  40363e:	4656      	mov	r6, sl
	gain_power_Q14 = gain_voltage*gain_current*Q14;
  403640:	4c5e      	ldr	r4, [pc, #376]	; (4037bc <sdcard_save_trends+0x494>)
  403642:	4641      	mov	r1, r8
  403644:	4648      	mov	r0, r9
  403646:	47a0      	blx	r4
  403648:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
  40364c:	47a0      	blx	r4
  40364e:	4607      	mov	r7, r0

		}

		// Print voltage 
		// positive sequence
		compute_mod_and_phase(&trend->v_seq.pos , &complex_mod[0] , &complex_phase[0] );
  403650:	aa02      	add	r2, sp, #8
  403652:	a905      	add	r1, sp, #20
  403654:	f50a 705e 	add.w	r0, sl, #888	; 0x378
  403658:	f8df a158 	ldr.w	sl, [pc, #344]	; 4037b4 <sdcard_save_trends+0x48c>
  40365c:	47d0      	blx	sl
		if (EOF == save_data_x3( &complex_mod[0] , gain_voltage)) return 0;
  40365e:	4649      	mov	r1, r9
  403660:	a805      	add	r0, sp, #20
  403662:	4c53      	ldr	r4, [pc, #332]	; (4037b0 <sdcard_save_trends+0x488>)
  403664:	47a0      	blx	r4
		if (EOF == save_data_x3( &complex_phase[0] , (1.0/64.0) )) return 0;
  403666:	f04f 5572 	mov.w	r5, #1015021568	; 0x3c800000
  40366a:	4629      	mov	r1, r5
  40366c:	a802      	add	r0, sp, #8
  40366e:	47a0      	blx	r4
		// negative sequence
		compute_mod_and_phase(&trend->v_seq.neg , &complex_mod[0] , &complex_phase[0] );
  403670:	aa02      	add	r2, sp, #8
  403672:	a905      	add	r1, sp, #20
  403674:	f506 7061 	add.w	r0, r6, #900	; 0x384
  403678:	47d0      	blx	sl
		if (EOF == save_data_x3( &complex_mod[0] , gain_voltage)) return 0;
  40367a:	4649      	mov	r1, r9
  40367c:	a805      	add	r0, sp, #20
  40367e:	47a0      	blx	r4
		if (EOF == save_data_x3( &complex_phase[0] , (1.0/64.0) )) return 0;
  403680:	4629      	mov	r1, r5
  403682:	a802      	add	r0, sp, #8
  403684:	47a0      	blx	r4
		// homopolar sequence
		compute_mod_and_phase(&trend->v_seq.hom , &complex_mod[0] , &complex_phase[0] );
  403686:	aa02      	add	r2, sp, #8
  403688:	a905      	add	r1, sp, #20
  40368a:	f506 7064 	add.w	r0, r6, #912	; 0x390
  40368e:	47d0      	blx	sl
		if (EOF == save_data_x3( &complex_mod[0] , gain_voltage)) return 0;
  403690:	4649      	mov	r1, r9
  403692:	a805      	add	r0, sp, #20
  403694:	47a0      	blx	r4
		if (EOF == save_data_x3( &complex_phase[0] , (1.0/64.0) )) return 0;
  403696:	4629      	mov	r1, r5
  403698:	a802      	add	r0, sp, #8
  40369a:	47a0      	blx	r4

		// Print current A
		// positive sequence
		compute_mod_and_phase(&trend->iA_seq.pos , &complex_mod[0] , &complex_phase[0] );
  40369c:	aa02      	add	r2, sp, #8
  40369e:	a905      	add	r1, sp, #20
  4036a0:	f506 7067 	add.w	r0, r6, #924	; 0x39c
  4036a4:	47d0      	blx	sl
		if (EOF == save_data_x3( &complex_mod[0] , gain_current)) return 0;
  4036a6:	4641      	mov	r1, r8
  4036a8:	a805      	add	r0, sp, #20
  4036aa:	47a0      	blx	r4
		if (EOF == save_data_x3( &complex_phase[0] , (1.0/64.0) )) return 0;		
  4036ac:	4629      	mov	r1, r5
  4036ae:	a802      	add	r0, sp, #8
  4036b0:	47a0      	blx	r4
		// negative sequence
		compute_mod_and_phase(&trend->iA_seq.neg , &complex_mod[0] , &complex_phase[0] );
  4036b2:	aa02      	add	r2, sp, #8
  4036b4:	a905      	add	r1, sp, #20
  4036b6:	f506 706a 	add.w	r0, r6, #936	; 0x3a8
  4036ba:	47d0      	blx	sl
		if (EOF == save_data_x3( &complex_mod[0] , gain_current)) return 0;
  4036bc:	4641      	mov	r1, r8
  4036be:	a805      	add	r0, sp, #20
  4036c0:	47a0      	blx	r4
		if (EOF == save_data_x3( &complex_phase[0] , (1.0/64.0) )) return 0;
  4036c2:	4629      	mov	r1, r5
  4036c4:	a802      	add	r0, sp, #8
  4036c6:	47a0      	blx	r4
		// homopolar sequence
		compute_mod_and_phase(&trend->iA_seq.hom , &complex_mod[0] , &complex_phase[0] );
  4036c8:	aa02      	add	r2, sp, #8
  4036ca:	a905      	add	r1, sp, #20
  4036cc:	f506 706d 	add.w	r0, r6, #948	; 0x3b4
  4036d0:	47d0      	blx	sl
		if (EOF == save_data_x3( &complex_mod[0] , gain_current)) return 0;
  4036d2:	4641      	mov	r1, r8
  4036d4:	a805      	add	r0, sp, #20
  4036d6:	47a0      	blx	r4
		if (EOF == save_data_x3( &complex_phase[0] , (1.0/64.0) )) return 0;
  4036d8:	4629      	mov	r1, r5
  4036da:	a802      	add	r0, sp, #8
  4036dc:	47a0      	blx	r4

		// Print desbalance
		if (EOF == save_data_x3( &trend->v_desb_neg[0] , (100.0/4096.0) )) return 0;
  4036de:	4d36      	ldr	r5, [pc, #216]	; (4037b8 <sdcard_save_trends+0x490>)
  4036e0:	4629      	mov	r1, r5
  4036e2:	f506 7079 	add.w	r0, r6, #996	; 0x3e4
  4036e6:	47a0      	blx	r4
		if (EOF == save_data_x3( &trend->v_desb_hom[0] , (100.0/4096.0) )) return 0;
  4036e8:	4629      	mov	r1, r5
  4036ea:	f206 30ea 	addw	r0, r6, #1002	; 0x3ea
  4036ee:	47a0      	blx	r4
  4036f0:	f506 6481 	add.w	r4, r6, #1032	; 0x408
  4036f4:	f506 668a 	add.w	r6, r6, #1104	; 0x450
		{
			uint16_t CH_count;

			for ( CH_count=0 ; CH_count<3 ; CH_count++ ) {

				if (EOF == save_data_x3( &trend->ch_power[CH_count].ApparentPower[0] , gain_power_Q14 )) return 0;
  4036f8:	4d2d      	ldr	r5, [pc, #180]	; (4037b0 <sdcard_save_trends+0x488>)
				if (EOF == save_data_x3( &trend->ch_power[CH_count].ActivePower[0]   , gain_power_Q14 )) return 0;
				if (EOF == save_data_x3( &trend->ch_power[CH_count].NoactivePower[0] , gain_power_Q14 )) return 0;
				if (EOF == save_data_x3( &trend->ch_power[CH_count].PowerFactor[0]   , (100.0/4096.0) )) return 0;
  4036fa:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 4037b8 <sdcard_save_trends+0x490>
				if (EOF == save_data_x3( &trend->ch_power[CH_count].ApparentPower[0] , gain_power_Q14 )) return 0;
  4036fe:	4639      	mov	r1, r7
  403700:	4620      	mov	r0, r4
  403702:	47a8      	blx	r5
				if (EOF == save_data_x3( &trend->ch_power[CH_count].ActivePower[0]   , gain_power_Q14 )) return 0;
  403704:	4639      	mov	r1, r7
  403706:	1da0      	adds	r0, r4, #6
  403708:	47a8      	blx	r5
				if (EOF == save_data_x3( &trend->ch_power[CH_count].NoactivePower[0] , gain_power_Q14 )) return 0;
  40370a:	4639      	mov	r1, r7
  40370c:	f104 000c 	add.w	r0, r4, #12
  403710:	47a8      	blx	r5
				if (EOF == save_data_x3( &trend->ch_power[CH_count].PowerFactor[0]   , (100.0/4096.0) )) return 0;
  403712:	4641      	mov	r1, r8
  403714:	f104 0012 	add.w	r0, r4, #18
  403718:	47a8      	blx	r5
  40371a:	3418      	adds	r4, #24
			for ( CH_count=0 ; CH_count<3 ; CH_count++ ) {
  40371c:	42b4      	cmp	r4, r6
  40371e:	d1ee      	bne.n	4036fe <sdcard_save_trends+0x3d6>
		}
	
	}

	// Print new line
	if (EOF == f_puts( "\n" , &file_object )) return 0;
  403720:	4914      	ldr	r1, [pc, #80]	; (403774 <sdcard_save_trends+0x44c>)
  403722:	4827      	ldr	r0, [pc, #156]	; (4037c0 <sdcard_save_trends+0x498>)
  403724:	4b27      	ldr	r3, [pc, #156]	; (4037c4 <sdcard_save_trends+0x49c>)
  403726:	4798      	blx	r3
  403728:	f1b0 3fff 	cmp.w	r0, #4294967295
  40372c:	d050      	beq.n	4037d0 <sdcard_save_trends+0x4a8>
			
	// Close file
	if (FR_OK != f_close( &file_object )) return 0;
  40372e:	4811      	ldr	r0, [pc, #68]	; (403774 <sdcard_save_trends+0x44c>)
  403730:	4b25      	ldr	r3, [pc, #148]	; (4037c8 <sdcard_save_trends+0x4a0>)
  403732:	4798      	blx	r3
  403734:	fab0 f080 	clz	r0, r0
  403738:	0940      	lsrs	r0, r0, #5
  40373a:	e000      	b.n	40373e <sdcard_save_trends+0x416>
	if (FR_OK != f_open( &file_object , (char const *)string , FA_OPEN_ALWAYS | FA_WRITE ))	return 0;
  40373c:	2000      	movs	r0, #0

	return 1;
	
}
  40373e:	b00f      	add	sp, #60	; 0x3c
  403740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (EOF == f_printf( &file_object, "Daily Trend\n" )) return 0;
  403744:	2000      	movs	r0, #0
  403746:	e7fa      	b.n	40373e <sdcard_save_trends+0x416>
		if (EOF == f_puts( "Type = " , &file_object )) return 0;
  403748:	2000      	movs	r0, #0
  40374a:	e7f8      	b.n	40373e <sdcard_save_trends+0x416>
			{ if (EOF == f_puts( "3 seconds" , &file_object )) return 0; }
  40374c:	2000      	movs	r0, #0
  40374e:	e7f6      	b.n	40373e <sdcard_save_trends+0x416>
		if (EOF == f_printf( &file_object, "\nDate = %4d/%02d/%02d\n\n", (int16_t)year , (int16_t)month , (int16_t)day )) return 0;
  403750:	2000      	movs	r0, #0
  403752:	e7f4      	b.n	40373e <sdcard_save_trends+0x416>
		if (EOF == f_puts( TRENDS_LABELS , &file_object )) return 0;
  403754:	2000      	movs	r0, #0
  403756:	e7f2      	b.n	40373e <sdcard_save_trends+0x416>
	if (EOF == f_printf( &file_object, "%02d:%02d:%02d,", (int16_t)hour , (int16_t)minute , (int16_t)second )) return 0;
  403758:	2000      	movs	r0, #0
  40375a:	e7f0      	b.n	40373e <sdcard_save_trends+0x416>
		if (EOF == f_printf( &file_object, "%02d:%02d:%02d", trend->time.hour , trend->time.minute , trend->time.second )) return 0;
  40375c:	2000      	movs	r0, #0
  40375e:	e7ee      	b.n	40373e <sdcard_save_trends+0x416>
		if (EOF == f_printf( &file_object, ",%016b", trend->flags )) return 0;
  403760:	2000      	movs	r0, #0
  403762:	e7ec      	b.n	40373e <sdcard_save_trends+0x416>
  403764:	f3af 8000 	nop.w
  403768:	b4e81b4f 	.word	0xb4e81b4f
  40376c:	3f7b4e81 	.word	0x3f7b4e81
  403770:	00410d44 	.word	0x00410d44
  403774:	20001248 	.word	0x20001248
  403778:	004099a5 	.word	0x004099a5
  40377c:	00410d54 	.word	0x00410d54
  403780:	00410d64 	.word	0x00410d64
  403784:	0040a85d 	.word	0x0040a85d
  403788:	0040a929 	.word	0x0040a929
  40378c:	0040aed9 	.word	0x0040aed9
  403790:	0040b435 	.word	0x0040b435
  403794:	0040b0ed 	.word	0x0040b0ed
  403798:	0040af81 	.word	0x0040af81
  40379c:	0040a881 	.word	0x0040a881
  4037a0:	408f4000 	.word	0x408f4000
  4037a4:	0040ae89 	.word	0x0040ae89
  4037a8:	0040f630 	.word	0x0040f630
  4037ac:	3bda740e 	.word	0x3bda740e
  4037b0:	004030fd 	.word	0x004030fd
  4037b4:	00402ff1 	.word	0x00402ff1
  4037b8:	3cc80000 	.word	0x3cc80000
  4037bc:	0040b195 	.word	0x0040b195
  4037c0:	0040f850 	.word	0x0040f850
  4037c4:	00409975 	.word	0x00409975
  4037c8:	00409245 	.word	0x00409245
			if (EOF == f_printf( &file_object, ",%d.%03d", (int16_t)temp , ABS((int16_t)((temp-(int32_t)temp)*1000.0)) )) return 0;
  4037cc:	2000      	movs	r0, #0
  4037ce:	e7b6      	b.n	40373e <sdcard_save_trends+0x416>
	if (EOF == f_puts( "\n" , &file_object )) return 0;
  4037d0:	2000      	movs	r0, #0
  4037d2:	e7b4      	b.n	40373e <sdcard_save_trends+0x416>
  4037d4:	0000      	movs	r0, r0
	...

004037d8 <sdcard_save_event_det_info>:

bool sdcard_save_event_det_info( event_det_t * event_det ) {
  4037d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4037dc:	b089      	sub	sp, #36	; 0x24
  4037de:	4606      	mov	r6, r0

	uint32_t year, month, day;
	float gain_voltage,gain_current;
	
	// update gains
	gain_voltage = unit_config.gain_volt/SETTINGS_DSP_ADC_MAX_TICK;
  4037e0:	4ba7      	ldr	r3, [pc, #668]	; (403a80 <sdcard_save_event_det_info+0x2a8>)
  4037e2:	f8d3 b020 	ldr.w	fp, [r3, #32]
	gain_current = unit_config.gain_curr_A/SETTINGS_DSP_ADC_MAX_TICK;
  4037e6:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
	
	// get date from RTC
	rtc_get_date(RTC, &year, &month, &day, 0);
  4037ea:	2700      	movs	r7, #0
  4037ec:	9700      	str	r7, [sp, #0]
  4037ee:	ab05      	add	r3, sp, #20
  4037f0:	aa06      	add	r2, sp, #24
  4037f2:	a907      	add	r1, sp, #28
  4037f4:	48a3      	ldr	r0, [pc, #652]	; (403a84 <sdcard_save_event_det_info+0x2ac>)
  4037f6:	f8df 9328 	ldr.w	r9, [pc, #808]	; 403b20 <sdcard_save_event_det_info+0x348>
  4037fa:	47c8      	blx	r9
	
	// Define directory name (example "2015/Month_12/Day_01" for 1 of December of 2015) and create it.
	memset( (void *)&string , 0 , sizeof(string) );
  4037fc:	4ca2      	ldr	r4, [pc, #648]	; (403a88 <sdcard_save_event_det_info+0x2b0>)
  4037fe:	2280      	movs	r2, #128	; 0x80
  403800:	4639      	mov	r1, r7
  403802:	4620      	mov	r0, r4
  403804:	4ba1      	ldr	r3, [pc, #644]	; (403a8c <sdcard_save_event_det_info+0x2b4>)
  403806:	4798      	blx	r3
	sprintf( (char *)&string ,"%4d" , (int16_t)year);
  403808:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
  40380c:	49a0      	ldr	r1, [pc, #640]	; (403a90 <sdcard_save_event_det_info+0x2b8>)
  40380e:	4620      	mov	r0, r4
  403810:	4da0      	ldr	r5, [pc, #640]	; (403a94 <sdcard_save_event_det_info+0x2bc>)
  403812:	47a8      	blx	r5
	f_mkdir(string);	// Create folder if it do not exist
  403814:	4620      	mov	r0, r4
  403816:	f8df 830c 	ldr.w	r8, [pc, #780]	; 403b24 <sdcard_save_event_det_info+0x34c>
  40381a:	47c0      	blx	r8
	sprintf( (char *)&string+4 ,"/Month_%02d" , (int16_t)month);
  40381c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
  403820:	499d      	ldr	r1, [pc, #628]	; (403a98 <sdcard_save_event_det_info+0x2c0>)
  403822:	1d20      	adds	r0, r4, #4
  403824:	47a8      	blx	r5
	f_mkdir(string);	// Create folder if it do not exist
  403826:	4620      	mov	r0, r4
  403828:	47c0      	blx	r8
	sprintf( (char *)&string+13 ,"/Day_%02d" , (int16_t)day);
  40382a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
  40382e:	499b      	ldr	r1, [pc, #620]	; (403a9c <sdcard_save_event_det_info+0x2c4>)
  403830:	f104 000d 	add.w	r0, r4, #13
  403834:	47a8      	blx	r5
	f_mkdir(string);	// Create folder if it do not exist
  403836:	4620      	mov	r0, r4
  403838:	47c0      	blx	r8
	
	// define file name (example "PM_2015_12_05_Event_15_05_30.txt" for 15:05:30 of 5 of December of 2015). File name is added to folder name so pointer move 20 chars.
	sprintf( (char *)&string+20 ,"/LICPM2_%4d_%02d_%02d_Event_%02d_%02d_%02d.txt" , (int16_t)year , (int16_t)month , (int16_t)day , event_det->time.hour , event_det->time.minute , event_det->time.second );
  40383a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
  40383e:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
  403842:	8a31      	ldrh	r1, [r6, #16]
  403844:	9103      	str	r1, [sp, #12]
  403846:	8a71      	ldrh	r1, [r6, #18]
  403848:	9102      	str	r1, [sp, #8]
  40384a:	8ab1      	ldrh	r1, [r6, #20]
  40384c:	9101      	str	r1, [sp, #4]
  40384e:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
  403852:	9100      	str	r1, [sp, #0]
  403854:	4992      	ldr	r1, [pc, #584]	; (403aa0 <sdcard_save_event_det_info+0x2c8>)
  403856:	f104 0014 	add.w	r0, r4, #20
  40385a:	47a8      	blx	r5
		
	// TODO: Por alguna razon que no entiendo sprintf sobrescribe la variable day. Repito la lectura del RTC hasta entender este problema.
	// get date from RTC
	rtc_get_date(RTC, &year, &month, &day, 0);
  40385c:	9700      	str	r7, [sp, #0]
  40385e:	ab05      	add	r3, sp, #20
  403860:	aa06      	add	r2, sp, #24
  403862:	a907      	add	r1, sp, #28
  403864:	4887      	ldr	r0, [pc, #540]	; (403a84 <sdcard_save_event_det_info+0x2ac>)
  403866:	47c8      	blx	r9

	// create file
	if (FR_OK != f_open( &file_object , (char const *)&string , FA_CREATE_ALWAYS | FA_WRITE )) return 0;
  403868:	220a      	movs	r2, #10
  40386a:	4621      	mov	r1, r4
  40386c:	488d      	ldr	r0, [pc, #564]	; (403aa4 <sdcard_save_event_det_info+0x2cc>)
  40386e:	4b8e      	ldr	r3, [pc, #568]	; (403aa8 <sdcard_save_event_det_info+0x2d0>)
  403870:	4798      	blx	r3
  403872:	b118      	cbz	r0, 40387c <sdcard_save_event_det_info+0xa4>
  403874:	2000      	movs	r0, #0
	// Close file
	if (FR_OK != f_close( &file_object )) return 0;
		
	return 1;
	
}
  403876:	b009      	add	sp, #36	; 0x24
  403878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (EOF == print_device_identification()) return 0;
  40387c:	4b8b      	ldr	r3, [pc, #556]	; (403aac <sdcard_save_event_det_info+0x2d4>)
  40387e:	4798      	blx	r3
	if (EOF == f_printf( &file_object, "Event waveform\n" )) return 0;
  403880:	498b      	ldr	r1, [pc, #556]	; (403ab0 <sdcard_save_event_det_info+0x2d8>)
  403882:	4888      	ldr	r0, [pc, #544]	; (403aa4 <sdcard_save_event_det_info+0x2cc>)
  403884:	4b8b      	ldr	r3, [pc, #556]	; (403ab4 <sdcard_save_event_det_info+0x2dc>)
  403886:	4798      	blx	r3
  403888:	f1b0 3fff 	cmp.w	r0, #4294967295
  40388c:	f000 8198 	beq.w	403bc0 <sdcard_save_event_det_info+0x3e8>
	if (EOF == f_puts( "Type = " , &file_object ))return 0;
  403890:	4984      	ldr	r1, [pc, #528]	; (403aa4 <sdcard_save_event_det_info+0x2cc>)
  403892:	4889      	ldr	r0, [pc, #548]	; (403ab8 <sdcard_save_event_det_info+0x2e0>)
  403894:	4b89      	ldr	r3, [pc, #548]	; (403abc <sdcard_save_event_det_info+0x2e4>)
  403896:	4798      	blx	r3
  403898:	f1b0 3fff 	cmp.w	r0, #4294967295
  40389c:	f000 8192 	beq.w	403bc4 <sdcard_save_event_det_info+0x3ec>
	switch (event_det->type & ~EVENT_TYPE_BUFFER_USED_MASK) {
  4038a0:	8873      	ldrh	r3, [r6, #2]
  4038a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4038a6:	2b20      	cmp	r3, #32
  4038a8:	f000 8152 	beq.w	403b50 <sdcard_save_event_det_info+0x378>
  4038ac:	d820      	bhi.n	4038f0 <sdcard_save_event_det_info+0x118>
  4038ae:	2b04      	cmp	r3, #4
  4038b0:	f000 813a 	beq.w	403b28 <sdcard_save_event_det_info+0x350>
  4038b4:	d80d      	bhi.n	4038d2 <sdcard_save_event_det_info+0xfa>
  4038b6:	2b01      	cmp	r3, #1
  4038b8:	d03f      	beq.n	40393a <sdcard_save_event_det_info+0x162>
  4038ba:	2b02      	cmp	r3, #2
  4038bc:	f040 8170 	bne.w	403ba0 <sdcard_save_event_det_info+0x3c8>
		case EVENT_TYPE_RMS_OV_V2_MASK:		if (EOF == f_puts( "V2 Over voltage"  , &file_object )) return 0; break;
  4038c0:	4978      	ldr	r1, [pc, #480]	; (403aa4 <sdcard_save_event_det_info+0x2cc>)
  4038c2:	487f      	ldr	r0, [pc, #508]	; (403ac0 <sdcard_save_event_det_info+0x2e8>)
  4038c4:	4b7d      	ldr	r3, [pc, #500]	; (403abc <sdcard_save_event_det_info+0x2e4>)
  4038c6:	4798      	blx	r3
  4038c8:	f1b0 3fff 	cmp.w	r0, #4294967295
  4038cc:	d13d      	bne.n	40394a <sdcard_save_event_det_info+0x172>
  4038ce:	2000      	movs	r0, #0
  4038d0:	e7d1      	b.n	403876 <sdcard_save_event_det_info+0x9e>
	switch (event_det->type & ~EVENT_TYPE_BUFFER_USED_MASK) {
  4038d2:	2b08      	cmp	r3, #8
  4038d4:	f000 8132 	beq.w	403b3c <sdcard_save_event_det_info+0x364>
  4038d8:	2b10      	cmp	r3, #16
  4038da:	f040 8161 	bne.w	403ba0 <sdcard_save_event_det_info+0x3c8>
		case EVENT_TYPE_RMS_UV_V2_MASK:		if (EOF == f_puts( "V2 Under voltage" , &file_object )) return 0; break;
  4038de:	4971      	ldr	r1, [pc, #452]	; (403aa4 <sdcard_save_event_det_info+0x2cc>)
  4038e0:	4878      	ldr	r0, [pc, #480]	; (403ac4 <sdcard_save_event_det_info+0x2ec>)
  4038e2:	4b76      	ldr	r3, [pc, #472]	; (403abc <sdcard_save_event_det_info+0x2e4>)
  4038e4:	4798      	blx	r3
  4038e6:	f1b0 3fff 	cmp.w	r0, #4294967295
  4038ea:	d12e      	bne.n	40394a <sdcard_save_event_det_info+0x172>
  4038ec:	2000      	movs	r0, #0
  4038ee:	e7c2      	b.n	403876 <sdcard_save_event_det_info+0x9e>
	switch (event_det->type & ~EVENT_TYPE_BUFFER_USED_MASK) {
  4038f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4038f4:	f000 8140 	beq.w	403b78 <sdcard_save_event_det_info+0x3a0>
  4038f8:	d80e      	bhi.n	403918 <sdcard_save_event_det_info+0x140>
  4038fa:	2b40      	cmp	r3, #64	; 0x40
  4038fc:	f000 8132 	beq.w	403b64 <sdcard_save_event_det_info+0x38c>
  403900:	2b80      	cmp	r3, #128	; 0x80
  403902:	f040 814d 	bne.w	403ba0 <sdcard_save_event_det_info+0x3c8>
		case EVENT_TYPE_RMS_OC_I2_MASK:		if (EOF == f_puts( "I2 Over current"  , &file_object )) return 0; break;
  403906:	4967      	ldr	r1, [pc, #412]	; (403aa4 <sdcard_save_event_det_info+0x2cc>)
  403908:	486f      	ldr	r0, [pc, #444]	; (403ac8 <sdcard_save_event_det_info+0x2f0>)
  40390a:	4b6c      	ldr	r3, [pc, #432]	; (403abc <sdcard_save_event_det_info+0x2e4>)
  40390c:	4798      	blx	r3
  40390e:	f1b0 3fff 	cmp.w	r0, #4294967295
  403912:	d11a      	bne.n	40394a <sdcard_save_event_det_info+0x172>
  403914:	2000      	movs	r0, #0
  403916:	e7ae      	b.n	403876 <sdcard_save_event_det_info+0x9e>
	switch (event_det->type & ~EVENT_TYPE_BUFFER_USED_MASK) {
  403918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40391c:	f000 8136 	beq.w	403b8c <sdcard_save_event_det_info+0x3b4>
  403920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  403924:	f040 813c 	bne.w	403ba0 <sdcard_save_event_det_info+0x3c8>
		case EVENT_TYPE_FREQ_OF_MASK:		if (EOF == f_puts( "Over frequency"   , &file_object )) return 0; break;
  403928:	495e      	ldr	r1, [pc, #376]	; (403aa4 <sdcard_save_event_det_info+0x2cc>)
  40392a:	4868      	ldr	r0, [pc, #416]	; (403acc <sdcard_save_event_det_info+0x2f4>)
  40392c:	4b63      	ldr	r3, [pc, #396]	; (403abc <sdcard_save_event_det_info+0x2e4>)
  40392e:	4798      	blx	r3
  403930:	f1b0 3fff 	cmp.w	r0, #4294967295
  403934:	d109      	bne.n	40394a <sdcard_save_event_det_info+0x172>
  403936:	2000      	movs	r0, #0
  403938:	e79d      	b.n	403876 <sdcard_save_event_det_info+0x9e>
		case EVENT_TYPE_RMS_OV_V1_MASK:		if (EOF == f_puts( "V1 Over voltage"  , &file_object )) return 0; break;
  40393a:	495a      	ldr	r1, [pc, #360]	; (403aa4 <sdcard_save_event_det_info+0x2cc>)
  40393c:	4864      	ldr	r0, [pc, #400]	; (403ad0 <sdcard_save_event_det_info+0x2f8>)
  40393e:	4b5f      	ldr	r3, [pc, #380]	; (403abc <sdcard_save_event_det_info+0x2e4>)
  403940:	4798      	blx	r3
  403942:	f1b0 3fff 	cmp.w	r0, #4294967295
  403946:	f000 813f 	beq.w	403bc8 <sdcard_save_event_det_info+0x3f0>
		float temp = event_det->duration_dsp_ticks * (1.0 / SETTINGS_DSP_SYSCLK_HZ);
  40394a:	6870      	ldr	r0, [r6, #4]
  40394c:	4b61      	ldr	r3, [pc, #388]	; (403ad4 <sdcard_save_event_det_info+0x2fc>)
  40394e:	4798      	blx	r3
  403950:	4c61      	ldr	r4, [pc, #388]	; (403ad8 <sdcard_save_event_det_info+0x300>)
  403952:	a349      	add	r3, pc, #292	; (adr r3, 403a78 <sdcard_save_event_det_info+0x2a0>)
  403954:	e9d3 2300 	ldrd	r2, r3, [r3]
  403958:	47a0      	blx	r4
  40395a:	4b60      	ldr	r3, [pc, #384]	; (403adc <sdcard_save_event_det_info+0x304>)
  40395c:	4798      	blx	r3
  40395e:	4607      	mov	r7, r0
		if (EOF == f_printf( &file_object, "\nDuration = %d.%03d sec", (int16_t)temp , ABS((int16_t)((temp-(int32_t)temp)*1000.0)) ))return 0;
  403960:	4d5f      	ldr	r5, [pc, #380]	; (403ae0 <sdcard_save_event_det_info+0x308>)
  403962:	47a8      	blx	r5
  403964:	4b5f      	ldr	r3, [pc, #380]	; (403ae4 <sdcard_save_event_det_info+0x30c>)
  403966:	4798      	blx	r3
  403968:	4601      	mov	r1, r0
  40396a:	4638      	mov	r0, r7
  40396c:	4b5e      	ldr	r3, [pc, #376]	; (403ae8 <sdcard_save_event_det_info+0x310>)
  40396e:	4798      	blx	r3
  403970:	4b5e      	ldr	r3, [pc, #376]	; (403aec <sdcard_save_event_det_info+0x314>)
  403972:	4798      	blx	r3
  403974:	2200      	movs	r2, #0
  403976:	4b5e      	ldr	r3, [pc, #376]	; (403af0 <sdcard_save_event_det_info+0x318>)
  403978:	47a0      	blx	r4
  40397a:	4b5e      	ldr	r3, [pc, #376]	; (403af4 <sdcard_save_event_det_info+0x31c>)
  40397c:	4798      	blx	r3
  40397e:	b200      	sxth	r0, r0
  403980:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
  403984:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
  403988:	4638      	mov	r0, r7
  40398a:	47a8      	blx	r5
  40398c:	4623      	mov	r3, r4
  40398e:	b202      	sxth	r2, r0
  403990:	4959      	ldr	r1, [pc, #356]	; (403af8 <sdcard_save_event_det_info+0x320>)
  403992:	4844      	ldr	r0, [pc, #272]	; (403aa4 <sdcard_save_event_det_info+0x2cc>)
  403994:	4c47      	ldr	r4, [pc, #284]	; (403ab4 <sdcard_save_event_det_info+0x2dc>)
  403996:	47a0      	blx	r4
  403998:	f1b0 3fff 	cmp.w	r0, #4294967295
  40399c:	f000 8116 	beq.w	403bcc <sdcard_save_event_det_info+0x3f4>
	if (EOF == f_puts( "\nVoltage Max = " , &file_object )) return 0;
  4039a0:	4940      	ldr	r1, [pc, #256]	; (403aa4 <sdcard_save_event_det_info+0x2cc>)
  4039a2:	4856      	ldr	r0, [pc, #344]	; (403afc <sdcard_save_event_det_info+0x324>)
  4039a4:	4b45      	ldr	r3, [pc, #276]	; (403abc <sdcard_save_event_det_info+0x2e4>)
  4039a6:	4798      	blx	r3
  4039a8:	f1b0 3fff 	cmp.w	r0, #4294967295
  4039ac:	f000 8110 	beq.w	403bd0 <sdcard_save_event_det_info+0x3f8>
	gain_voltage = unit_config.gain_volt/SETTINGS_DSP_ADC_MAX_TICK;
  4039b0:	4658      	mov	r0, fp
  4039b2:	4b53      	ldr	r3, [pc, #332]	; (403b00 <sdcard_save_event_det_info+0x328>)
  4039b4:	4798      	blx	r3
  4039b6:	2200      	movs	r2, #0
  4039b8:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
  4039bc:	4c46      	ldr	r4, [pc, #280]	; (403ad8 <sdcard_save_event_det_info+0x300>)
  4039be:	47a0      	blx	r4
  4039c0:	4b46      	ldr	r3, [pc, #280]	; (403adc <sdcard_save_event_det_info+0x304>)
  4039c2:	4798      	blx	r3
  4039c4:	4604      	mov	r4, r0
	if (EOF == save_data_x1( &event_det->v_max , gain_voltage )) return 0;
  4039c6:	4601      	mov	r1, r0
  4039c8:	f106 0008 	add.w	r0, r6, #8
  4039cc:	4b4d      	ldr	r3, [pc, #308]	; (403b04 <sdcard_save_event_det_info+0x32c>)
  4039ce:	4798      	blx	r3
	if (EOF == f_puts( " V\nVoltage Min = " , &file_object )) return 0;
  4039d0:	4934      	ldr	r1, [pc, #208]	; (403aa4 <sdcard_save_event_det_info+0x2cc>)
  4039d2:	484d      	ldr	r0, [pc, #308]	; (403b08 <sdcard_save_event_det_info+0x330>)
  4039d4:	4b39      	ldr	r3, [pc, #228]	; (403abc <sdcard_save_event_det_info+0x2e4>)
  4039d6:	4798      	blx	r3
  4039d8:	f1b0 3fff 	cmp.w	r0, #4294967295
  4039dc:	f000 80fa 	beq.w	403bd4 <sdcard_save_event_det_info+0x3fc>
	if (EOF == save_data_x1( &event_det->v_min , gain_voltage )) return 0;
  4039e0:	4621      	mov	r1, r4
  4039e2:	f106 000a 	add.w	r0, r6, #10
  4039e6:	4b47      	ldr	r3, [pc, #284]	; (403b04 <sdcard_save_event_det_info+0x32c>)
  4039e8:	4798      	blx	r3
	if (EOF == f_puts( " V\nCurrent Max = " , &file_object )) return 0;
  4039ea:	492e      	ldr	r1, [pc, #184]	; (403aa4 <sdcard_save_event_det_info+0x2cc>)
  4039ec:	4847      	ldr	r0, [pc, #284]	; (403b0c <sdcard_save_event_det_info+0x334>)
  4039ee:	4b33      	ldr	r3, [pc, #204]	; (403abc <sdcard_save_event_det_info+0x2e4>)
  4039f0:	4798      	blx	r3
  4039f2:	f1b0 3fff 	cmp.w	r0, #4294967295
  4039f6:	f000 80ef 	beq.w	403bd8 <sdcard_save_event_det_info+0x400>
	gain_current = unit_config.gain_curr_A/SETTINGS_DSP_ADC_MAX_TICK;
  4039fa:	4650      	mov	r0, sl
  4039fc:	4b40      	ldr	r3, [pc, #256]	; (403b00 <sdcard_save_event_det_info+0x328>)
  4039fe:	4798      	blx	r3
  403a00:	2200      	movs	r2, #0
  403a02:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
  403a06:	4c34      	ldr	r4, [pc, #208]	; (403ad8 <sdcard_save_event_det_info+0x300>)
  403a08:	47a0      	blx	r4
  403a0a:	4b34      	ldr	r3, [pc, #208]	; (403adc <sdcard_save_event_det_info+0x304>)
  403a0c:	4798      	blx	r3
	if (EOF == save_data_x1( &event_det->i_max , gain_current )) return 0;
  403a0e:	4601      	mov	r1, r0
  403a10:	f106 000c 	add.w	r0, r6, #12
  403a14:	4b3b      	ldr	r3, [pc, #236]	; (403b04 <sdcard_save_event_det_info+0x32c>)
  403a16:	4798      	blx	r3
	if (EOF == f_puts( " A\n" , &file_object)) return 0;
  403a18:	4922      	ldr	r1, [pc, #136]	; (403aa4 <sdcard_save_event_det_info+0x2cc>)
  403a1a:	483d      	ldr	r0, [pc, #244]	; (403b10 <sdcard_save_event_det_info+0x338>)
  403a1c:	4b27      	ldr	r3, [pc, #156]	; (403abc <sdcard_save_event_det_info+0x2e4>)
  403a1e:	4798      	blx	r3
  403a20:	f1b0 3fff 	cmp.w	r0, #4294967295
  403a24:	f000 80da 	beq.w	403bdc <sdcard_save_event_det_info+0x404>
	if (EOF == f_printf( &file_object, "Trigger Date = %4d/%02d/%02d\n", (int16_t)year , (int16_t)month , (int16_t)day )) return 0;
  403a28:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
  403a2c:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
  403a30:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
  403a34:	9100      	str	r1, [sp, #0]
  403a36:	4937      	ldr	r1, [pc, #220]	; (403b14 <sdcard_save_event_det_info+0x33c>)
  403a38:	481a      	ldr	r0, [pc, #104]	; (403aa4 <sdcard_save_event_det_info+0x2cc>)
  403a3a:	4c1e      	ldr	r4, [pc, #120]	; (403ab4 <sdcard_save_event_det_info+0x2dc>)
  403a3c:	47a0      	blx	r4
  403a3e:	f1b0 3fff 	cmp.w	r0, #4294967295
  403a42:	f000 80cd 	beq.w	403be0 <sdcard_save_event_det_info+0x408>
	if (EOF == f_printf( &file_object, "Trigger Time = %02d:%02d:%02d\n", event_det->time.hour , event_det->time.minute , event_det->time.second )) return 0;
  403a46:	8a73      	ldrh	r3, [r6, #18]
  403a48:	8ab2      	ldrh	r2, [r6, #20]
  403a4a:	8a31      	ldrh	r1, [r6, #16]
  403a4c:	9100      	str	r1, [sp, #0]
  403a4e:	4932      	ldr	r1, [pc, #200]	; (403b18 <sdcard_save_event_det_info+0x340>)
  403a50:	4814      	ldr	r0, [pc, #80]	; (403aa4 <sdcard_save_event_det_info+0x2cc>)
  403a52:	47a0      	blx	r4
  403a54:	f1b0 3fff 	cmp.w	r0, #4294967295
  403a58:	f000 80c4 	beq.w	403be4 <sdcard_save_event_det_info+0x40c>
	if (event_det->type & EVENT_TYPE_BUFFER_USED_MASK) {
  403a5c:	8873      	ldrh	r3, [r6, #2]
  403a5e:	f413 6f00 	tst.w	r3, #2048	; 0x800
  403a62:	f040 80a7 	bne.w	403bb4 <sdcard_save_event_det_info+0x3dc>
	if (FR_OK != f_close( &file_object )) return 0;
  403a66:	480f      	ldr	r0, [pc, #60]	; (403aa4 <sdcard_save_event_det_info+0x2cc>)
  403a68:	4b2c      	ldr	r3, [pc, #176]	; (403b1c <sdcard_save_event_det_info+0x344>)
  403a6a:	4798      	blx	r3
  403a6c:	fab0 f080 	clz	r0, r0
  403a70:	0940      	lsrs	r0, r0, #5
  403a72:	e700      	b.n	403876 <sdcard_save_event_det_info+0x9e>
  403a74:	f3af 8000 	nop.w
  403a78:	d840baf8 	.word	0xd840baf8
  403a7c:	3e3ca213 	.word	0x3e3ca213
  403a80:	20001db0 	.word	0x20001db0
  403a84:	400e1460 	.word	0x400e1460
  403a88:	2000126c 	.word	0x2000126c
  403a8c:	0040b671 	.word	0x0040b671
  403a90:	0040f8b4 	.word	0x0040f8b4
  403a94:	0040b70d 	.word	0x0040b70d
  403a98:	0040f8b8 	.word	0x0040f8b8
  403a9c:	0040f8c4 	.word	0x0040f8c4
  403aa0:	0040f6dc 	.word	0x0040f6dc
  403aa4:	20001248 	.word	0x20001248
  403aa8:	00408c79 	.word	0x00408c79
  403aac:	00403229 	.word	0x00403229
  403ab0:	0040f70c 	.word	0x0040f70c
  403ab4:	004099a5 	.word	0x004099a5
  403ab8:	0040f930 	.word	0x0040f930
  403abc:	00409975 	.word	0x00409975
  403ac0:	0040f72c 	.word	0x0040f72c
  403ac4:	0040f760 	.word	0x0040f760
  403ac8:	0040f798 	.word	0x0040f798
  403acc:	0040f7c8 	.word	0x0040f7c8
  403ad0:	0040f71c 	.word	0x0040f71c
  403ad4:	0040a83d 	.word	0x0040a83d
  403ad8:	0040a929 	.word	0x0040a929
  403adc:	0040aed9 	.word	0x0040aed9
  403ae0:	0040b435 	.word	0x0040b435
  403ae4:	0040b0ed 	.word	0x0040b0ed
  403ae8:	0040af81 	.word	0x0040af81
  403aec:	0040a881 	.word	0x0040a881
  403af0:	408f4000 	.word	0x408f4000
  403af4:	0040ae89 	.word	0x0040ae89
  403af8:	0040f7e0 	.word	0x0040f7e0
  403afc:	0040f7f8 	.word	0x0040f7f8
  403b00:	0040a85d 	.word	0x0040a85d
  403b04:	0040307d 	.word	0x0040307d
  403b08:	0040f808 	.word	0x0040f808
  403b0c:	0040f81c 	.word	0x0040f81c
  403b10:	0040f830 	.word	0x0040f830
  403b14:	0040f834 	.word	0x0040f834
  403b18:	0040f854 	.word	0x0040f854
  403b1c:	00409245 	.word	0x00409245
  403b20:	00407005 	.word	0x00407005
  403b24:	0040970d 	.word	0x0040970d
		case EVENT_TYPE_RMS_OV_V3_MASK:		if (EOF == f_puts( "V3 Over voltage"  , &file_object )) return 0; break;
  403b28:	492f      	ldr	r1, [pc, #188]	; (403be8 <sdcard_save_event_det_info+0x410>)
  403b2a:	4830      	ldr	r0, [pc, #192]	; (403bec <sdcard_save_event_det_info+0x414>)
  403b2c:	4b30      	ldr	r3, [pc, #192]	; (403bf0 <sdcard_save_event_det_info+0x418>)
  403b2e:	4798      	blx	r3
  403b30:	f1b0 3fff 	cmp.w	r0, #4294967295
  403b34:	f47f af09 	bne.w	40394a <sdcard_save_event_det_info+0x172>
  403b38:	2000      	movs	r0, #0
  403b3a:	e69c      	b.n	403876 <sdcard_save_event_det_info+0x9e>
		case EVENT_TYPE_RMS_UV_V1_MASK:		if (EOF == f_puts( "V1 Under voltage" , &file_object )) return 0; break;
  403b3c:	492a      	ldr	r1, [pc, #168]	; (403be8 <sdcard_save_event_det_info+0x410>)
  403b3e:	482d      	ldr	r0, [pc, #180]	; (403bf4 <sdcard_save_event_det_info+0x41c>)
  403b40:	4b2b      	ldr	r3, [pc, #172]	; (403bf0 <sdcard_save_event_det_info+0x418>)
  403b42:	4798      	blx	r3
  403b44:	f1b0 3fff 	cmp.w	r0, #4294967295
  403b48:	f47f aeff 	bne.w	40394a <sdcard_save_event_det_info+0x172>
  403b4c:	2000      	movs	r0, #0
  403b4e:	e692      	b.n	403876 <sdcard_save_event_det_info+0x9e>
		case EVENT_TYPE_RMS_UV_V3_MASK:		if (EOF == f_puts( "V3 Under voltage" , &file_object )) return 0; break;
  403b50:	4925      	ldr	r1, [pc, #148]	; (403be8 <sdcard_save_event_det_info+0x410>)
  403b52:	4829      	ldr	r0, [pc, #164]	; (403bf8 <sdcard_save_event_det_info+0x420>)
  403b54:	4b26      	ldr	r3, [pc, #152]	; (403bf0 <sdcard_save_event_det_info+0x418>)
  403b56:	4798      	blx	r3
  403b58:	f1b0 3fff 	cmp.w	r0, #4294967295
  403b5c:	f47f aef5 	bne.w	40394a <sdcard_save_event_det_info+0x172>
  403b60:	2000      	movs	r0, #0
  403b62:	e688      	b.n	403876 <sdcard_save_event_det_info+0x9e>
		case EVENT_TYPE_RMS_OC_I1_MASK:		if (EOF == f_puts( "I1 Over current"  , &file_object )) return 0; break;
  403b64:	4920      	ldr	r1, [pc, #128]	; (403be8 <sdcard_save_event_det_info+0x410>)
  403b66:	4825      	ldr	r0, [pc, #148]	; (403bfc <sdcard_save_event_det_info+0x424>)
  403b68:	4b21      	ldr	r3, [pc, #132]	; (403bf0 <sdcard_save_event_det_info+0x418>)
  403b6a:	4798      	blx	r3
  403b6c:	f1b0 3fff 	cmp.w	r0, #4294967295
  403b70:	f47f aeeb 	bne.w	40394a <sdcard_save_event_det_info+0x172>
  403b74:	2000      	movs	r0, #0
  403b76:	e67e      	b.n	403876 <sdcard_save_event_det_info+0x9e>
		case EVENT_TYPE_RMS_OC_I3_MASK:		if (EOF == f_puts( "I3 Over current"  , &file_object )) return 0; break;
  403b78:	491b      	ldr	r1, [pc, #108]	; (403be8 <sdcard_save_event_det_info+0x410>)
  403b7a:	4821      	ldr	r0, [pc, #132]	; (403c00 <sdcard_save_event_det_info+0x428>)
  403b7c:	4b1c      	ldr	r3, [pc, #112]	; (403bf0 <sdcard_save_event_det_info+0x418>)
  403b7e:	4798      	blx	r3
  403b80:	f1b0 3fff 	cmp.w	r0, #4294967295
  403b84:	f47f aee1 	bne.w	40394a <sdcard_save_event_det_info+0x172>
  403b88:	2000      	movs	r0, #0
  403b8a:	e674      	b.n	403876 <sdcard_save_event_det_info+0x9e>
		case EVENT_TYPE_FREQ_UF_MASK:		if (EOF == f_puts( "Under frequency"  , &file_object )) return 0; break;
  403b8c:	4916      	ldr	r1, [pc, #88]	; (403be8 <sdcard_save_event_det_info+0x410>)
  403b8e:	481d      	ldr	r0, [pc, #116]	; (403c04 <sdcard_save_event_det_info+0x42c>)
  403b90:	4b17      	ldr	r3, [pc, #92]	; (403bf0 <sdcard_save_event_det_info+0x418>)
  403b92:	4798      	blx	r3
  403b94:	f1b0 3fff 	cmp.w	r0, #4294967295
  403b98:	f47f aed7 	bne.w	40394a <sdcard_save_event_det_info+0x172>
  403b9c:	2000      	movs	r0, #0
  403b9e:	e66a      	b.n	403876 <sdcard_save_event_det_info+0x9e>
		default:							if (EOF == f_puts( "Unknown"          , &file_object )) return 0; break;
  403ba0:	4911      	ldr	r1, [pc, #68]	; (403be8 <sdcard_save_event_det_info+0x410>)
  403ba2:	4819      	ldr	r0, [pc, #100]	; (403c08 <sdcard_save_event_det_info+0x430>)
  403ba4:	4b12      	ldr	r3, [pc, #72]	; (403bf0 <sdcard_save_event_det_info+0x418>)
  403ba6:	4798      	blx	r3
  403ba8:	f1b0 3fff 	cmp.w	r0, #4294967295
  403bac:	f47f aecd 	bne.w	40394a <sdcard_save_event_det_info+0x172>
  403bb0:	2000      	movs	r0, #0
  403bb2:	e660      	b.n	403876 <sdcard_save_event_det_info+0x9e>
		copy_content( (uint8_t *)&string[0] ,  (uint8_t *)&string_event_file_name[0] , sizeof(string) );
  403bb4:	2280      	movs	r2, #128	; 0x80
  403bb6:	4915      	ldr	r1, [pc, #84]	; (403c0c <sdcard_save_event_det_info+0x434>)
  403bb8:	4815      	ldr	r0, [pc, #84]	; (403c10 <sdcard_save_event_det_info+0x438>)
  403bba:	4b16      	ldr	r3, [pc, #88]	; (403c14 <sdcard_save_event_det_info+0x43c>)
  403bbc:	4798      	blx	r3
  403bbe:	e752      	b.n	403a66 <sdcard_save_event_det_info+0x28e>
	if (EOF == f_printf( &file_object, "Event waveform\n" )) return 0;
  403bc0:	2000      	movs	r0, #0
  403bc2:	e658      	b.n	403876 <sdcard_save_event_det_info+0x9e>
	if (EOF == f_puts( "Type = " , &file_object ))return 0;
  403bc4:	2000      	movs	r0, #0
  403bc6:	e656      	b.n	403876 <sdcard_save_event_det_info+0x9e>
		case EVENT_TYPE_RMS_OV_V1_MASK:		if (EOF == f_puts( "V1 Over voltage"  , &file_object )) return 0; break;
  403bc8:	2000      	movs	r0, #0
  403bca:	e654      	b.n	403876 <sdcard_save_event_det_info+0x9e>
		if (EOF == f_printf( &file_object, "\nDuration = %d.%03d sec", (int16_t)temp , ABS((int16_t)((temp-(int32_t)temp)*1000.0)) ))return 0;
  403bcc:	2000      	movs	r0, #0
  403bce:	e652      	b.n	403876 <sdcard_save_event_det_info+0x9e>
	if (EOF == f_puts( "\nVoltage Max = " , &file_object )) return 0;
  403bd0:	2000      	movs	r0, #0
  403bd2:	e650      	b.n	403876 <sdcard_save_event_det_info+0x9e>
	if (EOF == f_puts( " V\nVoltage Min = " , &file_object )) return 0;
  403bd4:	2000      	movs	r0, #0
  403bd6:	e64e      	b.n	403876 <sdcard_save_event_det_info+0x9e>
	if (EOF == f_puts( " V\nCurrent Max = " , &file_object )) return 0;
  403bd8:	2000      	movs	r0, #0
  403bda:	e64c      	b.n	403876 <sdcard_save_event_det_info+0x9e>
	if (EOF == f_puts( " A\n" , &file_object)) return 0;
  403bdc:	2000      	movs	r0, #0
  403bde:	e64a      	b.n	403876 <sdcard_save_event_det_info+0x9e>
	if (EOF == f_printf( &file_object, "Trigger Date = %4d/%02d/%02d\n", (int16_t)year , (int16_t)month , (int16_t)day )) return 0;
  403be0:	2000      	movs	r0, #0
  403be2:	e648      	b.n	403876 <sdcard_save_event_det_info+0x9e>
	if (EOF == f_printf( &file_object, "Trigger Time = %02d:%02d:%02d\n", event_det->time.hour , event_det->time.minute , event_det->time.second )) return 0;
  403be4:	2000      	movs	r0, #0
  403be6:	e646      	b.n	403876 <sdcard_save_event_det_info+0x9e>
  403be8:	20001248 	.word	0x20001248
  403bec:	0040f73c 	.word	0x0040f73c
  403bf0:	00409975 	.word	0x00409975
  403bf4:	0040f74c 	.word	0x0040f74c
  403bf8:	0040f774 	.word	0x0040f774
  403bfc:	0040f788 	.word	0x0040f788
  403c00:	0040f7a8 	.word	0x0040f7a8
  403c04:	0040f7b8 	.word	0x0040f7b8
  403c08:	0040f7d8 	.word	0x0040f7d8
  403c0c:	20001798 	.word	0x20001798
  403c10:	2000126c 	.word	0x2000126c
  403c14:	00405129 	.word	0x00405129

00403c18 <sdcard_save_event_buffer>:

/// @brief Save event into SD-Card.
bool sdcard_save_event_buffer( uint16_t * info , int16_t * buffer) {
  403c18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403c1c:	4604      	mov	r4, r0
  403c1e:	460d      	mov	r5, r1
	
	// open file or create it if it do not exist.
	if (FR_OK != f_open( &file_object , (char const *)string_event_file_name , FA_OPEN_ALWAYS | FA_WRITE )) return 0;
  403c20:	2212      	movs	r2, #18
  403c22:	4967      	ldr	r1, [pc, #412]	; (403dc0 <sdcard_save_event_buffer+0x1a8>)
  403c24:	4867      	ldr	r0, [pc, #412]	; (403dc4 <sdcard_save_event_buffer+0x1ac>)
  403c26:	4b68      	ldr	r3, [pc, #416]	; (403dc8 <sdcard_save_event_buffer+0x1b0>)
  403c28:	4798      	blx	r3
  403c2a:	b110      	cbz	r0, 403c32 <sdcard_save_event_buffer+0x1a>
  403c2c:	2000      	movs	r0, #0
  403c2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	
	// Move to end of the file to append data (needed when a existing file is open)
	if (FR_OK != f_lseek( &file_object , f_size(&file_object)) ) return 0;
  403c32:	4864      	ldr	r0, [pc, #400]	; (403dc4 <sdcard_save_event_buffer+0x1ac>)
  403c34:	68c1      	ldr	r1, [r0, #12]
  403c36:	4b65      	ldr	r3, [pc, #404]	; (403dcc <sdcard_save_event_buffer+0x1b4>)
  403c38:	4798      	blx	r3
  403c3a:	2800      	cmp	r0, #0
  403c3c:	f040 80ab 	bne.w	403d96 <sdcard_save_event_buffer+0x17e>
	
	// Print buffer info if pointer to buffer is NULL.
	if (buffer == NULL ) {
  403c40:	b185      	cbz	r5, 403c64 <sdcard_save_event_buffer+0x4c>
		int16_t data_integer;
		int32_t data_fractional;

		// print counter
		
		if (EOF == f_printf( &file_object, "%d,", buffer[0] )) return 0;
  403c42:	f9b5 2000 	ldrsh.w	r2, [r5]
  403c46:	4962      	ldr	r1, [pc, #392]	; (403dd0 <sdcard_save_event_buffer+0x1b8>)
  403c48:	485e      	ldr	r0, [pc, #376]	; (403dc4 <sdcard_save_event_buffer+0x1ac>)
  403c4a:	4b62      	ldr	r3, [pc, #392]	; (403dd4 <sdcard_save_event_buffer+0x1bc>)
  403c4c:	4798      	blx	r3
  403c4e:	f1b0 3fff 	cmp.w	r0, #4294967295
  403c52:	f000 80ac 	beq.w	403dae <sdcard_save_event_buffer+0x196>
  403c56:	2401      	movs	r4, #1
			if (count_channel<5) {
				data_integer = FPMUL16( abs(data_f) , unit_config.gain_volt , 15 );
				data_fractional = FPMUL32( abs(data_f) , unit_config.gain_volt*100 , 15 ) - (((int32_t)data_integer)*100);
			}
			else {
				data_integer = FPMUL16( abs(data_f) , unit_config.gain_curr_A , 15 );
  403c58:	4e5f      	ldr	r6, [pc, #380]	; (403dd8 <sdcard_save_event_buffer+0x1c0>)
			
			// Since data is an absolute value, add signal
			if (data_f<0)
				{if (EOF == f_printf( &file_object, "%d.%02d,", -data_integer , data_fractional )) return 0;}
			else
				{if (EOF == f_printf( &file_object, "%d.%02d,",  data_integer , data_fractional )) return 0;}
  403c5a:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 403dfc <sdcard_save_event_buffer+0x1e4>
  403c5e:	f8df b164 	ldr.w	fp, [pc, #356]	; 403dc4 <sdcard_save_event_buffer+0x1ac>
  403c62:	e05b      	b.n	403d1c <sdcard_save_event_buffer+0x104>
		if (EOF == f_printf( &file_object , "\nStart index = %d\n" , info[0] )) return 0;
  403c64:	8822      	ldrh	r2, [r4, #0]
  403c66:	495d      	ldr	r1, [pc, #372]	; (403ddc <sdcard_save_event_buffer+0x1c4>)
  403c68:	4856      	ldr	r0, [pc, #344]	; (403dc4 <sdcard_save_event_buffer+0x1ac>)
  403c6a:	4b5a      	ldr	r3, [pc, #360]	; (403dd4 <sdcard_save_event_buffer+0x1bc>)
  403c6c:	4798      	blx	r3
  403c6e:	f1b0 3fff 	cmp.w	r0, #4294967295
  403c72:	f000 8093 	beq.w	403d9c <sdcard_save_event_buffer+0x184>
		if (EOF == f_printf( &file_object , "Stop index = %d\n" , info[1] )) return 0;
  403c76:	8862      	ldrh	r2, [r4, #2]
  403c78:	4959      	ldr	r1, [pc, #356]	; (403de0 <sdcard_save_event_buffer+0x1c8>)
  403c7a:	4852      	ldr	r0, [pc, #328]	; (403dc4 <sdcard_save_event_buffer+0x1ac>)
  403c7c:	4b55      	ldr	r3, [pc, #340]	; (403dd4 <sdcard_save_event_buffer+0x1bc>)
  403c7e:	4798      	blx	r3
  403c80:	f1b0 3fff 	cmp.w	r0, #4294967295
  403c84:	f000 808d 	beq.w	403da2 <sdcard_save_event_buffer+0x18a>
		if (info[2] == 1)
  403c88:	88a3      	ldrh	r3, [r4, #4]
  403c8a:	2b01      	cmp	r3, #1
  403c8c:	d011      	beq.n	403cb2 <sdcard_save_event_buffer+0x9a>
			{if (EOF == f_puts( "Buffer not divided\n\n" , &file_object )) return 0;}
  403c8e:	494d      	ldr	r1, [pc, #308]	; (403dc4 <sdcard_save_event_buffer+0x1ac>)
  403c90:	4854      	ldr	r0, [pc, #336]	; (403de4 <sdcard_save_event_buffer+0x1cc>)
  403c92:	4b55      	ldr	r3, [pc, #340]	; (403de8 <sdcard_save_event_buffer+0x1d0>)
  403c94:	4798      	blx	r3
  403c96:	f1b0 3fff 	cmp.w	r0, #4294967295
  403c9a:	f000 8085 	beq.w	403da8 <sdcard_save_event_buffer+0x190>
		if (EOF == f_puts( "Counter,V1[V],V2[V],V3[V],VE[V],I1[A],I2[A],I3[A],IN[A]\n" , &file_object )) return 0;
  403c9e:	4949      	ldr	r1, [pc, #292]	; (403dc4 <sdcard_save_event_buffer+0x1ac>)
  403ca0:	4852      	ldr	r0, [pc, #328]	; (403dec <sdcard_save_event_buffer+0x1d4>)
  403ca2:	4b51      	ldr	r3, [pc, #324]	; (403de8 <sdcard_save_event_buffer+0x1d0>)
  403ca4:	4798      	blx	r3
  403ca6:	f1b0 3fff 	cmp.w	r0, #4294967295
  403caa:	d16c      	bne.n	403d86 <sdcard_save_event_buffer+0x16e>
  403cac:	2000      	movs	r0, #0
  403cae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			{if (EOF == f_puts( "Buffer divided\n\n" , &file_object )) return 0;}
  403cb2:	4944      	ldr	r1, [pc, #272]	; (403dc4 <sdcard_save_event_buffer+0x1ac>)
  403cb4:	484e      	ldr	r0, [pc, #312]	; (403df0 <sdcard_save_event_buffer+0x1d8>)
  403cb6:	4b4c      	ldr	r3, [pc, #304]	; (403de8 <sdcard_save_event_buffer+0x1d0>)
  403cb8:	4798      	blx	r3
  403cba:	f1b0 3fff 	cmp.w	r0, #4294967295
  403cbe:	d1ee      	bne.n	403c9e <sdcard_save_event_buffer+0x86>
  403cc0:	2000      	movs	r0, #0
  403cc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				data_integer = FPMUL16( abs(data_f) , unit_config.gain_curr_A , 15 );
  403cc6:	ea87 7ee7 	eor.w	lr, r7, r7, asr #31
  403cca:	ebae 7ee7 	sub.w	lr, lr, r7, asr #31
  403cce:	6a72      	ldr	r2, [r6, #36]	; 0x24
  403cd0:	fb02 f20e 	mul.w	r2, r2, lr
  403cd4:	f342 32cf 	sbfx	r2, r2, #15, #16
				data_fractional = FPMUL32( abs(data_f) , unit_config.gain_curr_A*100 , 15 ) - (((int32_t)data_integer)*100);
  403cd8:	6a73      	ldr	r3, [r6, #36]	; 0x24
  403cda:	2064      	movs	r0, #100	; 0x64
  403cdc:	fb00 f303 	mul.w	r3, r0, r3
  403ce0:	17d9      	asrs	r1, r3, #31
  403ce2:	ea4f 79ee 	mov.w	r9, lr, asr #31
  403ce6:	fb03 fc09 	mul.w	ip, r3, r9
  403cea:	fb0e cc01 	mla	ip, lr, r1, ip
  403cee:	fba3 010e 	umull	r0, r1, r3, lr
  403cf2:	4461      	add	r1, ip
  403cf4:	0bc0      	lsrs	r0, r0, #15
  403cf6:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
  403cfa:	f06f 0363 	mvn.w	r3, #99	; 0x63
  403cfe:	fb03 0302 	mla	r3, r3, r2, r0
			if (data_f<0)
  403d02:	2f00      	cmp	r7, #0
  403d04:	db2d      	blt.n	403d62 <sdcard_save_event_buffer+0x14a>
				{if (EOF == f_printf( &file_object, "%d.%02d,",  data_integer , data_fractional )) return 0;}
  403d06:	4651      	mov	r1, sl
  403d08:	4658      	mov	r0, fp
  403d0a:	4f32      	ldr	r7, [pc, #200]	; (403dd4 <sdcard_save_event_buffer+0x1bc>)
  403d0c:	47b8      	blx	r7
  403d0e:	f1b0 3fff 	cmp.w	r0, #4294967295
  403d12:	d04f      	beq.n	403db4 <sdcard_save_event_buffer+0x19c>
		for ( count_channel=1 ; count_channel<SETTINGS_EVENT_BUFFER_NUM ; count_channel++ ) {
  403d14:	3401      	adds	r4, #1
  403d16:	b2a4      	uxth	r4, r4
  403d18:	2c09      	cmp	r4, #9
  403d1a:	d02d      	beq.n	403d78 <sdcard_save_event_buffer+0x160>
			data_f = buffer[count_channel];
  403d1c:	f935 7f02 	ldrsh.w	r7, [r5, #2]!
			if (count_channel<5) {
  403d20:	2c04      	cmp	r4, #4
  403d22:	d8d0      	bhi.n	403cc6 <sdcard_save_event_buffer+0xae>
				data_integer = FPMUL16( abs(data_f) , unit_config.gain_volt , 15 );
  403d24:	ea87 7ee7 	eor.w	lr, r7, r7, asr #31
  403d28:	ebae 7ee7 	sub.w	lr, lr, r7, asr #31
  403d2c:	6a32      	ldr	r2, [r6, #32]
  403d2e:	fb02 f20e 	mul.w	r2, r2, lr
  403d32:	f342 32cf 	sbfx	r2, r2, #15, #16
				data_fractional = FPMUL32( abs(data_f) , unit_config.gain_volt*100 , 15 ) - (((int32_t)data_integer)*100);
  403d36:	6a33      	ldr	r3, [r6, #32]
  403d38:	2064      	movs	r0, #100	; 0x64
  403d3a:	fb00 f303 	mul.w	r3, r0, r3
  403d3e:	17d9      	asrs	r1, r3, #31
  403d40:	ea4f 79ee 	mov.w	r9, lr, asr #31
  403d44:	fb03 fc09 	mul.w	ip, r3, r9
  403d48:	fb0e cc01 	mla	ip, lr, r1, ip
  403d4c:	fba3 010e 	umull	r0, r1, r3, lr
  403d50:	4461      	add	r1, ip
  403d52:	0bc0      	lsrs	r0, r0, #15
  403d54:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
  403d58:	f06f 0363 	mvn.w	r3, #99	; 0x63
  403d5c:	fb03 0302 	mla	r3, r3, r2, r0
  403d60:	e7cf      	b.n	403d02 <sdcard_save_event_buffer+0xea>
				{if (EOF == f_printf( &file_object, "%d.%02d,", -data_integer , data_fractional )) return 0;}
  403d62:	4252      	negs	r2, r2
  403d64:	4651      	mov	r1, sl
  403d66:	4658      	mov	r0, fp
  403d68:	4f1a      	ldr	r7, [pc, #104]	; (403dd4 <sdcard_save_event_buffer+0x1bc>)
  403d6a:	47b8      	blx	r7
  403d6c:	f1b0 3fff 	cmp.w	r0, #4294967295
  403d70:	d1d0      	bne.n	403d14 <sdcard_save_event_buffer+0xfc>
  403d72:	2000      	movs	r0, #0
  403d74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

		}
		if (EOF == f_puts( "\n" , &file_object )) return 0;
  403d78:	4912      	ldr	r1, [pc, #72]	; (403dc4 <sdcard_save_event_buffer+0x1ac>)
  403d7a:	481e      	ldr	r0, [pc, #120]	; (403df4 <sdcard_save_event_buffer+0x1dc>)
  403d7c:	4b1a      	ldr	r3, [pc, #104]	; (403de8 <sdcard_save_event_buffer+0x1d0>)
  403d7e:	4798      	blx	r3
  403d80:	f1b0 3fff 	cmp.w	r0, #4294967295
  403d84:	d019      	beq.n	403dba <sdcard_save_event_buffer+0x1a2>
		
	}
	
	// Close file
	if (FR_OK != f_close( &file_object )) return 0;
  403d86:	480f      	ldr	r0, [pc, #60]	; (403dc4 <sdcard_save_event_buffer+0x1ac>)
  403d88:	4b1b      	ldr	r3, [pc, #108]	; (403df8 <sdcard_save_event_buffer+0x1e0>)
  403d8a:	4798      	blx	r3
  403d8c:	fab0 f080 	clz	r0, r0
  403d90:	0940      	lsrs	r0, r0, #5
  403d92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (FR_OK != f_lseek( &file_object , f_size(&file_object)) ) return 0;
  403d96:	2000      	movs	r0, #0
  403d98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (EOF == f_printf( &file_object , "\nStart index = %d\n" , info[0] )) return 0;
  403d9c:	2000      	movs	r0, #0
  403d9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (EOF == f_printf( &file_object , "Stop index = %d\n" , info[1] )) return 0;
  403da2:	2000      	movs	r0, #0
  403da4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			{if (EOF == f_puts( "Buffer not divided\n\n" , &file_object )) return 0;}
  403da8:	2000      	movs	r0, #0
  403daa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (EOF == f_printf( &file_object, "%d,", buffer[0] )) return 0;
  403dae:	2000      	movs	r0, #0
  403db0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				{if (EOF == f_printf( &file_object, "%d.%02d,",  data_integer , data_fractional )) return 0;}
  403db4:	2000      	movs	r0, #0
  403db6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (EOF == f_puts( "\n" , &file_object )) return 0;
  403dba:	2000      	movs	r0, #0
	
	return 1;
}
  403dbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403dc0:	20001798 	.word	0x20001798
  403dc4:	20001248 	.word	0x20001248
  403dc8:	00408c79 	.word	0x00408c79
  403dcc:	0040925d 	.word	0x0040925d
  403dd0:	0040f6cc 	.word	0x0040f6cc
  403dd4:	004099a5 	.word	0x004099a5
  403dd8:	20001db0 	.word	0x20001db0
  403ddc:	0040f63c 	.word	0x0040f63c
  403de0:	0040f650 	.word	0x0040f650
  403de4:	0040f678 	.word	0x0040f678
  403de8:	00409975 	.word	0x00409975
  403dec:	0040f690 	.word	0x0040f690
  403df0:	0040f664 	.word	0x0040f664
  403df4:	0040f850 	.word	0x0040f850
  403df8:	00409245 	.word	0x00409245
  403dfc:	0040f6d0 	.word	0x0040f6d0

00403e00 <sdcard_save_unit_config>:
			
	}
}

/// @brief Save unit configuration into SD-Card.
bool sdcard_save_unit_config(void) {
  403e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		
	// Since file do not exist or need to be over written, create it
	if (FR_OK != f_open( &file_object , (char const *)file_name_conf , FA_CREATE_ALWAYS | FA_WRITE )) return 0;
  403e04:	220a      	movs	r2, #10
  403e06:	490e      	ldr	r1, [pc, #56]	; (403e40 <sdcard_save_unit_config+0x40>)
  403e08:	480e      	ldr	r0, [pc, #56]	; (403e44 <sdcard_save_unit_config+0x44>)
  403e0a:	4b0f      	ldr	r3, [pc, #60]	; (403e48 <sdcard_save_unit_config+0x48>)
  403e0c:	4798      	blx	r3
  403e0e:	b9a0      	cbnz	r0, 403e3a <sdcard_save_unit_config+0x3a>
  403e10:	4c0e      	ldr	r4, [pc, #56]	; (403e4c <sdcard_save_unit_config+0x4c>)
  403e12:	f104 0844 	add.w	r8, r4, #68	; 0x44
			
	// Save default unit config
	for ( uint8_t i=0 ; i<(sizeof(unit_config)>>2) ; i++ ) {
		f_printf( &file_object , "%d\n", ((int32_t *)&unit_config)[i] );
  403e16:	4f0e      	ldr	r7, [pc, #56]	; (403e50 <sdcard_save_unit_config+0x50>)
  403e18:	4e0a      	ldr	r6, [pc, #40]	; (403e44 <sdcard_save_unit_config+0x44>)
  403e1a:	4d0e      	ldr	r5, [pc, #56]	; (403e54 <sdcard_save_unit_config+0x54>)
  403e1c:	f854 2f04 	ldr.w	r2, [r4, #4]!
  403e20:	4639      	mov	r1, r7
  403e22:	4630      	mov	r0, r6
  403e24:	47a8      	blx	r5
	for ( uint8_t i=0 ; i<(sizeof(unit_config)>>2) ; i++ ) {
  403e26:	4544      	cmp	r4, r8
  403e28:	d1f8      	bne.n	403e1c <sdcard_save_unit_config+0x1c>
	}
			
	// Close file
	if (FR_OK != f_close( &file_object )) return 0;
  403e2a:	4806      	ldr	r0, [pc, #24]	; (403e44 <sdcard_save_unit_config+0x44>)
  403e2c:	4b0a      	ldr	r3, [pc, #40]	; (403e58 <sdcard_save_unit_config+0x58>)
  403e2e:	4798      	blx	r3
  403e30:	fab0 f080 	clz	r0, r0
  403e34:	0940      	lsrs	r0, r0, #5
  403e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (FR_OK != f_open( &file_object , (char const *)file_name_conf , FA_CREATE_ALWAYS | FA_WRITE )) return 0;
  403e3a:	2000      	movs	r0, #0
		
	return 1;
	
}
  403e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403e40:	0040f500 	.word	0x0040f500
  403e44:	20001248 	.word	0x20001248
  403e48:	00408c79 	.word	0x00408c79
  403e4c:	20001dac 	.word	0x20001dac
  403e50:	0040f54c 	.word	0x0040f54c
  403e54:	004099a5 	.word	0x004099a5
  403e58:	00409245 	.word	0x00409245

00403e5c <sdcard_check_and_read_unit_config>:
bool sdcard_check_and_read_unit_config(void) {
  403e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  403e5e:	b085      	sub	sp, #20
	if (FR_OK == f_open( &file_object , (char const *)file_name_conf , FA_READ )) {
  403e60:	2201      	movs	r2, #1
  403e62:	4912      	ldr	r1, [pc, #72]	; (403eac <sdcard_check_and_read_unit_config+0x50>)
  403e64:	4812      	ldr	r0, [pc, #72]	; (403eb0 <sdcard_check_and_read_unit_config+0x54>)
  403e66:	4b13      	ldr	r3, [pc, #76]	; (403eb4 <sdcard_check_and_read_unit_config+0x58>)
  403e68:	4798      	blx	r3
  403e6a:	b9d8      	cbnz	r0, 403ea4 <sdcard_check_and_read_unit_config+0x48>
  403e6c:	4c12      	ldr	r4, [pc, #72]	; (403eb8 <sdcard_check_and_read_unit_config+0x5c>)
  403e6e:	f104 0744 	add.w	r7, r4, #68	; 0x44
			uint8_t buffer[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
  403e72:	2600      	movs	r6, #0
  403e74:	4635      	mov	r5, r6
  403e76:	9501      	str	r5, [sp, #4]
  403e78:	9502      	str	r5, [sp, #8]
  403e7a:	9503      	str	r5, [sp, #12]
			f_gets( (TCHAR *)buffer , (int)12 , &file_object );
  403e7c:	4a0c      	ldr	r2, [pc, #48]	; (403eb0 <sdcard_check_and_read_unit_config+0x54>)
  403e7e:	210c      	movs	r1, #12
  403e80:	a801      	add	r0, sp, #4
  403e82:	4b0e      	ldr	r3, [pc, #56]	; (403ebc <sdcard_check_and_read_unit_config+0x60>)
  403e84:	4798      	blx	r3
			(*UTILS_Strchr( (char *)buffer , '\n' ) ) = '\0';
  403e86:	210a      	movs	r1, #10
  403e88:	a801      	add	r0, sp, #4
  403e8a:	4b0d      	ldr	r3, [pc, #52]	; (403ec0 <sdcard_check_and_read_unit_config+0x64>)
  403e8c:	4798      	blx	r3
  403e8e:	7006      	strb	r6, [r0, #0]
			UTILS_Atoi( (char *)buffer , &((int32_t *)&unit_config)[i] );
  403e90:	4621      	mov	r1, r4
  403e92:	a801      	add	r0, sp, #4
  403e94:	4b0b      	ldr	r3, [pc, #44]	; (403ec4 <sdcard_check_and_read_unit_config+0x68>)
  403e96:	4798      	blx	r3
  403e98:	3404      	adds	r4, #4
		for ( uint8_t i=0 ; i<(sizeof(unit_config)>>2) ; i++ ) {
  403e9a:	42bc      	cmp	r4, r7
  403e9c:	d1eb      	bne.n	403e76 <sdcard_check_and_read_unit_config+0x1a>
	return 1;
  403e9e:	2001      	movs	r0, #1
}
  403ea0:	b005      	add	sp, #20
  403ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (1 != sdcard_save_unit_config())
  403ea4:	4b08      	ldr	r3, [pc, #32]	; (403ec8 <sdcard_check_and_read_unit_config+0x6c>)
  403ea6:	4798      	blx	r3
  403ea8:	e7fa      	b.n	403ea0 <sdcard_check_and_read_unit_config+0x44>
  403eaa:	bf00      	nop
  403eac:	0040f500 	.word	0x0040f500
  403eb0:	20001248 	.word	0x20001248
  403eb4:	00408c79 	.word	0x00408c79
  403eb8:	20001db0 	.word	0x20001db0
  403ebc:	004098fd 	.word	0x004098fd
  403ec0:	00405261 	.word	0x00405261
  403ec4:	00405295 	.word	0x00405295
  403ec8:	00403e01 	.word	0x00403e01

00403ecc <sdcard_save_unit_calibration>:

/// @brief Save unit calibration into SD-Card.
bool sdcard_save_unit_calibration(void) {
  403ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	
	// Since file do not exist or need to be over written, create it
	if (FR_OK != f_open( &file_object , (char const *)file_name_cal , FA_CREATE_ALWAYS | FA_WRITE )) return 0;
  403ed0:	220a      	movs	r2, #10
  403ed2:	490e      	ldr	r1, [pc, #56]	; (403f0c <sdcard_save_unit_calibration+0x40>)
  403ed4:	480e      	ldr	r0, [pc, #56]	; (403f10 <sdcard_save_unit_calibration+0x44>)
  403ed6:	4b0f      	ldr	r3, [pc, #60]	; (403f14 <sdcard_save_unit_calibration+0x48>)
  403ed8:	4798      	blx	r3
  403eda:	b9a0      	cbnz	r0, 403f06 <sdcard_save_unit_calibration+0x3a>
  403edc:	4c0e      	ldr	r4, [pc, #56]	; (403f18 <sdcard_save_unit_calibration+0x4c>)
  403ede:	f104 0860 	add.w	r8, r4, #96	; 0x60
	
	// Save default unit config
	for ( uint8_t i=0 ; i<(sizeof(unit_calibration)>>2) ; i++ ) {
		f_printf( &file_object , "%d\n", ((int32_t *)&unit_calibration)[i] );
  403ee2:	4f0e      	ldr	r7, [pc, #56]	; (403f1c <sdcard_save_unit_calibration+0x50>)
  403ee4:	4e0a      	ldr	r6, [pc, #40]	; (403f10 <sdcard_save_unit_calibration+0x44>)
  403ee6:	4d0e      	ldr	r5, [pc, #56]	; (403f20 <sdcard_save_unit_calibration+0x54>)
  403ee8:	f854 2f04 	ldr.w	r2, [r4, #4]!
  403eec:	4639      	mov	r1, r7
  403eee:	4630      	mov	r0, r6
  403ef0:	47a8      	blx	r5
	for ( uint8_t i=0 ; i<(sizeof(unit_calibration)>>2) ; i++ ) {
  403ef2:	4544      	cmp	r4, r8
  403ef4:	d1f8      	bne.n	403ee8 <sdcard_save_unit_calibration+0x1c>
	}
	
	// Close file
	if (FR_OK != f_close( &file_object )) return 0;
  403ef6:	4806      	ldr	r0, [pc, #24]	; (403f10 <sdcard_save_unit_calibration+0x44>)
  403ef8:	4b0a      	ldr	r3, [pc, #40]	; (403f24 <sdcard_save_unit_calibration+0x58>)
  403efa:	4798      	blx	r3
  403efc:	fab0 f080 	clz	r0, r0
  403f00:	0940      	lsrs	r0, r0, #5
  403f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (FR_OK != f_open( &file_object , (char const *)file_name_cal , FA_CREATE_ALWAYS | FA_WRITE )) return 0;
  403f06:	2000      	movs	r0, #0
	
	return 1;
	
}
  403f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403f0c:	0040f4ec 	.word	0x0040f4ec
  403f10:	20001248 	.word	0x20001248
  403f14:	00408c79 	.word	0x00408c79
  403f18:	20001df0 	.word	0x20001df0
  403f1c:	0040f54c 	.word	0x0040f54c
  403f20:	004099a5 	.word	0x004099a5
  403f24:	00409245 	.word	0x00409245

00403f28 <sdcard_check_and_read_unit_calibration>:
bool sdcard_check_and_read_unit_calibration(void) {
  403f28:	b5f0      	push	{r4, r5, r6, r7, lr}
  403f2a:	b085      	sub	sp, #20
	if (FR_OK == f_open( &file_object , (char const *)file_name_cal , FA_READ )) {
  403f2c:	2201      	movs	r2, #1
  403f2e:	4912      	ldr	r1, [pc, #72]	; (403f78 <sdcard_check_and_read_unit_calibration+0x50>)
  403f30:	4812      	ldr	r0, [pc, #72]	; (403f7c <sdcard_check_and_read_unit_calibration+0x54>)
  403f32:	4b13      	ldr	r3, [pc, #76]	; (403f80 <sdcard_check_and_read_unit_calibration+0x58>)
  403f34:	4798      	blx	r3
  403f36:	b9d8      	cbnz	r0, 403f70 <sdcard_check_and_read_unit_calibration+0x48>
  403f38:	4c12      	ldr	r4, [pc, #72]	; (403f84 <sdcard_check_and_read_unit_calibration+0x5c>)
  403f3a:	f104 0760 	add.w	r7, r4, #96	; 0x60
			uint8_t buffer[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
  403f3e:	2600      	movs	r6, #0
  403f40:	4635      	mov	r5, r6
  403f42:	9501      	str	r5, [sp, #4]
  403f44:	9502      	str	r5, [sp, #8]
  403f46:	9503      	str	r5, [sp, #12]
			f_gets( (TCHAR *)buffer , (int)12 , &file_object );
  403f48:	4a0c      	ldr	r2, [pc, #48]	; (403f7c <sdcard_check_and_read_unit_calibration+0x54>)
  403f4a:	210c      	movs	r1, #12
  403f4c:	a801      	add	r0, sp, #4
  403f4e:	4b0e      	ldr	r3, [pc, #56]	; (403f88 <sdcard_check_and_read_unit_calibration+0x60>)
  403f50:	4798      	blx	r3
			(*UTILS_Strchr( (char *)buffer , '\n' ) ) = '\0';
  403f52:	210a      	movs	r1, #10
  403f54:	a801      	add	r0, sp, #4
  403f56:	4b0d      	ldr	r3, [pc, #52]	; (403f8c <sdcard_check_and_read_unit_calibration+0x64>)
  403f58:	4798      	blx	r3
  403f5a:	7006      	strb	r6, [r0, #0]
			UTILS_Atoi( (char *)buffer , &((int32_t *)&unit_calibration)[i] );
  403f5c:	4621      	mov	r1, r4
  403f5e:	a801      	add	r0, sp, #4
  403f60:	4b0b      	ldr	r3, [pc, #44]	; (403f90 <sdcard_check_and_read_unit_calibration+0x68>)
  403f62:	4798      	blx	r3
  403f64:	3404      	adds	r4, #4
		for ( uint8_t i=0 ; i<(sizeof(unit_calibration)>>2) ; i++ ) {
  403f66:	42bc      	cmp	r4, r7
  403f68:	d1eb      	bne.n	403f42 <sdcard_check_and_read_unit_calibration+0x1a>
	return 1;
  403f6a:	2001      	movs	r0, #1
}
  403f6c:	b005      	add	sp, #20
  403f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (1 != sdcard_save_unit_calibration())
  403f70:	4b08      	ldr	r3, [pc, #32]	; (403f94 <sdcard_check_and_read_unit_calibration+0x6c>)
  403f72:	4798      	blx	r3
  403f74:	e7fa      	b.n	403f6c <sdcard_check_and_read_unit_calibration+0x44>
  403f76:	bf00      	nop
  403f78:	0040f4ec 	.word	0x0040f4ec
  403f7c:	20001248 	.word	0x20001248
  403f80:	00408c79 	.word	0x00408c79
  403f84:	20001df4 	.word	0x20001df4
  403f88:	004098fd 	.word	0x004098fd
  403f8c:	00405261 	.word	0x00405261
  403f90:	00405295 	.word	0x00405295
  403f94:	00403ecd 	.word	0x00403ecd

00403f98 <sdcard_save_flags>:

#if SETTINGS_ARM_ENABLE_SDCARD_COMM_FLAG_SAVE

bool sdcard_save_flags(uint16_t flags) {
  403f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403f9c:	b088      	sub	sp, #32
  403f9e:	4682      	mov	sl, r0
	static FIL file_log;
	uint32_t hour, minute, second;
	uint32_t year, month, day;
		
	// get date from RTC
	rtc_get_time(RTC, &hour, &minute, &second);
  403fa0:	4e3d      	ldr	r6, [pc, #244]	; (404098 <sdcard_save_flags+0x100>)
  403fa2:	ab05      	add	r3, sp, #20
  403fa4:	aa06      	add	r2, sp, #24
  403fa6:	a907      	add	r1, sp, #28
  403fa8:	4630      	mov	r0, r6
  403faa:	4c3c      	ldr	r4, [pc, #240]	; (40409c <sdcard_save_flags+0x104>)
  403fac:	47a0      	blx	r4
	rtc_get_date(RTC, &year, &month, &day, 0);	
  403fae:	2700      	movs	r7, #0
  403fb0:	9700      	str	r7, [sp, #0]
  403fb2:	ab02      	add	r3, sp, #8
  403fb4:	aa03      	add	r2, sp, #12
  403fb6:	a904      	add	r1, sp, #16
  403fb8:	4630      	mov	r0, r6
  403fba:	f8df 9124 	ldr.w	r9, [pc, #292]	; 4040e0 <sdcard_save_flags+0x148>
  403fbe:	47c8      	blx	r9
	
	// Define directory name (example "2015/Month_12/Day_01" for 1 of December of 2015) and create it.
	memset( (void *)&string , 0 , sizeof(string) );
  403fc0:	4c37      	ldr	r4, [pc, #220]	; (4040a0 <sdcard_save_flags+0x108>)
  403fc2:	2280      	movs	r2, #128	; 0x80
  403fc4:	4639      	mov	r1, r7
  403fc6:	4620      	mov	r0, r4
  403fc8:	4b36      	ldr	r3, [pc, #216]	; (4040a4 <sdcard_save_flags+0x10c>)
  403fca:	4798      	blx	r3
	sprintf( (char *)&string ,"%4d" , (int16_t)year);
  403fcc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
  403fd0:	4935      	ldr	r1, [pc, #212]	; (4040a8 <sdcard_save_flags+0x110>)
  403fd2:	4620      	mov	r0, r4
  403fd4:	4d35      	ldr	r5, [pc, #212]	; (4040ac <sdcard_save_flags+0x114>)
  403fd6:	47a8      	blx	r5
	f_mkdir(string);	// Create folder if it do not exist
  403fd8:	4620      	mov	r0, r4
  403fda:	f8df 8108 	ldr.w	r8, [pc, #264]	; 4040e4 <sdcard_save_flags+0x14c>
  403fde:	47c0      	blx	r8
	sprintf( (char *)&string+4 ,"/Month_%02d" , (int16_t)month);
  403fe0:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
  403fe4:	4932      	ldr	r1, [pc, #200]	; (4040b0 <sdcard_save_flags+0x118>)
  403fe6:	1d20      	adds	r0, r4, #4
  403fe8:	47a8      	blx	r5
	f_mkdir(string);	// Create folder if it do not exist
  403fea:	4620      	mov	r0, r4
  403fec:	47c0      	blx	r8
	sprintf( (char *)&string+13 ,"/Day_%02d" , (int16_t)day);
  403fee:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
  403ff2:	4930      	ldr	r1, [pc, #192]	; (4040b4 <sdcard_save_flags+0x11c>)
  403ff4:	f104 000d 	add.w	r0, r4, #13
  403ff8:	47a8      	blx	r5
	f_mkdir(string);	// Create folder if it do not exist
  403ffa:	4620      	mov	r0, r4
  403ffc:	47c0      	blx	r8
	
	// define file name (example "LICPM2_2015_12_05_log.txt" for 5 of December of 2015). File name is added to folder name so pointer is moved 20 chars.
	sprintf( (char *)&string+20 ,"/LICPM2_%4d_%02d_%02d_log.txt" , (int16_t)year , (int16_t)month , (int16_t)day);
  403ffe:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
  404002:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
  404006:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
  40400a:	9100      	str	r1, [sp, #0]
  40400c:	492a      	ldr	r1, [pc, #168]	; (4040b8 <sdcard_save_flags+0x120>)
  40400e:	f104 0014 	add.w	r0, r4, #20
  404012:	47a8      	blx	r5
		
	// get date from RTC. TODO: Por alguna razon que no entiendo sprintf sobrescribe la variable day. Repito la lectura del RTC hasta entender este problema.
	rtc_get_date(RTC, &year, &month, &day, 0);
  404014:	9700      	str	r7, [sp, #0]
  404016:	ab02      	add	r3, sp, #8
  404018:	aa03      	add	r2, sp, #12
  40401a:	a904      	add	r1, sp, #16
  40401c:	4630      	mov	r0, r6
  40401e:	47c8      	blx	r9

	// open file or create it if it do not exist.
	if (FR_OK != f_open( &file_log , (char const *)string , FA_OPEN_ALWAYS | FA_WRITE ))	return 0;
  404020:	2212      	movs	r2, #18
  404022:	4621      	mov	r1, r4
  404024:	4825      	ldr	r0, [pc, #148]	; (4040bc <sdcard_save_flags+0x124>)
  404026:	4b26      	ldr	r3, [pc, #152]	; (4040c0 <sdcard_save_flags+0x128>)
  404028:	4798      	blx	r3
  40402a:	b118      	cbz	r0, 404034 <sdcard_save_flags+0x9c>
  40402c:	2000      	movs	r0, #0
	// Close file
	if (FR_OK != f_close( &file_log )) return 0;
	
	return 1;
	
}
  40402e:	b008      	add	sp, #32
  404030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (FR_OK != f_lseek( &file_log , f_size(&file_log)) ) return 0;
  404034:	4821      	ldr	r0, [pc, #132]	; (4040bc <sdcard_save_flags+0x124>)
  404036:	68c1      	ldr	r1, [r0, #12]
  404038:	4b22      	ldr	r3, [pc, #136]	; (4040c4 <sdcard_save_flags+0x12c>)
  40403a:	4798      	blx	r3
  40403c:	b108      	cbz	r0, 404042 <sdcard_save_flags+0xaa>
  40403e:	2000      	movs	r0, #0
  404040:	e7f5      	b.n	40402e <sdcard_save_flags+0x96>
	if (EOF == f_printf( &file_log, "%02d:%02d:%02d ", (int16_t)hour , (int16_t)minute , (int16_t)second )) return 0;
  404042:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
  404046:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
  40404a:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
  40404e:	9100      	str	r1, [sp, #0]
  404050:	491d      	ldr	r1, [pc, #116]	; (4040c8 <sdcard_save_flags+0x130>)
  404052:	481a      	ldr	r0, [pc, #104]	; (4040bc <sdcard_save_flags+0x124>)
  404054:	4c1d      	ldr	r4, [pc, #116]	; (4040cc <sdcard_save_flags+0x134>)
  404056:	47a0      	blx	r4
  404058:	f1b0 3fff 	cmp.w	r0, #4294967295
  40405c:	d015      	beq.n	40408a <sdcard_save_flags+0xf2>
	if (EOF == f_printf( &file_log, "%016b ", flags )) return 0;
  40405e:	4652      	mov	r2, sl
  404060:	491b      	ldr	r1, [pc, #108]	; (4040d0 <sdcard_save_flags+0x138>)
  404062:	4816      	ldr	r0, [pc, #88]	; (4040bc <sdcard_save_flags+0x124>)
  404064:	47a0      	blx	r4
  404066:	f1b0 3fff 	cmp.w	r0, #4294967295
  40406a:	d010      	beq.n	40408e <sdcard_save_flags+0xf6>
	if (EOF == f_printf( &file_log, "%08b \n", sdcard_flags_status )) return 0;
  40406c:	4b19      	ldr	r3, [pc, #100]	; (4040d4 <sdcard_save_flags+0x13c>)
  40406e:	781a      	ldrb	r2, [r3, #0]
  404070:	4919      	ldr	r1, [pc, #100]	; (4040d8 <sdcard_save_flags+0x140>)
  404072:	4812      	ldr	r0, [pc, #72]	; (4040bc <sdcard_save_flags+0x124>)
  404074:	47a0      	blx	r4
  404076:	f1b0 3fff 	cmp.w	r0, #4294967295
  40407a:	d00a      	beq.n	404092 <sdcard_save_flags+0xfa>
	if (FR_OK != f_close( &file_log )) return 0;
  40407c:	480f      	ldr	r0, [pc, #60]	; (4040bc <sdcard_save_flags+0x124>)
  40407e:	4b17      	ldr	r3, [pc, #92]	; (4040dc <sdcard_save_flags+0x144>)
  404080:	4798      	blx	r3
  404082:	fab0 f080 	clz	r0, r0
  404086:	0940      	lsrs	r0, r0, #5
  404088:	e7d1      	b.n	40402e <sdcard_save_flags+0x96>
	if (EOF == f_printf( &file_log, "%02d:%02d:%02d ", (int16_t)hour , (int16_t)minute , (int16_t)second )) return 0;
  40408a:	2000      	movs	r0, #0
  40408c:	e7cf      	b.n	40402e <sdcard_save_flags+0x96>
	if (EOF == f_printf( &file_log, "%016b ", flags )) return 0;
  40408e:	2000      	movs	r0, #0
  404090:	e7cd      	b.n	40402e <sdcard_save_flags+0x96>
	if (EOF == f_printf( &file_log, "%08b \n", sdcard_flags_status )) return 0;
  404092:	2000      	movs	r0, #0
  404094:	e7cb      	b.n	40402e <sdcard_save_flags+0x96>
  404096:	bf00      	nop
  404098:	400e1460 	.word	0x400e1460
  40409c:	00406f17 	.word	0x00406f17
  4040a0:	2000126c 	.word	0x2000126c
  4040a4:	0040b671 	.word	0x0040b671
  4040a8:	0040f8b4 	.word	0x0040f8b4
  4040ac:	0040b70d 	.word	0x0040b70d
  4040b0:	0040f8b8 	.word	0x0040f8b8
  4040b4:	0040f8c4 	.word	0x0040f8c4
  4040b8:	0040f874 	.word	0x0040f874
  4040bc:	20000b3c 	.word	0x20000b3c
  4040c0:	00408c79 	.word	0x00408c79
  4040c4:	0040925d 	.word	0x0040925d
  4040c8:	0040f894 	.word	0x0040f894
  4040cc:	004099a5 	.word	0x004099a5
  4040d0:	0040f8a4 	.word	0x0040f8a4
  4040d4:	20001cc8 	.word	0x20001cc8
  4040d8:	0040f8ac 	.word	0x0040f8ac
  4040dc:	00409245 	.word	0x00409245
  4040e0:	00407005 	.word	0x00407005
  4040e4:	0040970d 	.word	0x0040970d

004040e8 <sdcard_get_total_mbytes_req>:

/// @brief Get total Mbytes of sd-card.
///
/// @param[out] Total Mbyte
///
uint32_t sdcard_get_total_mbytes_req(void) {
  4040e8:	b430      	push	{r4, r5}

	// Get total bytes (total_MB = clusters * sectors/custers * bytes/sectors / 1024 / 1024)
#if _MAX_SS != 512
	return (( ((uint64_t)fs.n_fatent - 2) * fs.csize * fs.ssize ) / 1048576 );
#else
	return (( ((uint64_t)fs.n_fatent - 2) * fs.csize * 512 ) / 1048576 );
  4040ea:	4909      	ldr	r1, [pc, #36]	; (404110 <sdcard_get_total_mbytes_req+0x28>)
  4040ec:	69c8      	ldr	r0, [r1, #28]
  4040ee:	0dc3      	lsrs	r3, r0, #23
  4040f0:	0242      	lsls	r2, r0, #9
  4040f2:	f5b2 6280 	subs.w	r2, r2, #1024	; 0x400
  4040f6:	f143 33ff 	adc.w	r3, r3, #4294967295
  4040fa:	7888      	ldrb	r0, [r1, #2]
  4040fc:	fba2 4500 	umull	r4, r5, r2, r0
  404100:	fb00 5503 	mla	r5, r0, r3, r5
  404104:	0d20      	lsrs	r0, r4, #20
#endif

}
  404106:	ea40 3005 	orr.w	r0, r0, r5, lsl #12
  40410a:	bc30      	pop	{r4, r5}
  40410c:	4770      	bx	lr
  40410e:	bf00      	nop
  404110:	20001014 	.word	0x20001014

00404114 <sdcard_get_free_mbytes_req>:

/// @brief Get free Mbytes of sd-card.
///
/// @param[out] Free Mbyte
///
uint32_t sdcard_get_free_mbytes_req(void) {
  404114:	b510      	push	{r4, lr}
  404116:	b082      	sub	sp, #8

	DWORD Free_clust;
	FATFS *fs_ptr = &fs;
  404118:	4c0b      	ldr	r4, [pc, #44]	; (404148 <sdcard_get_free_mbytes_req+0x34>)
  40411a:	aa02      	add	r2, sp, #8
  40411c:	f842 4d08 	str.w	r4, [r2, #-8]!
	
	// Get volume information and free clusters of drive
	res = f_getfree("0:/", &Free_clust, &fs_ptr);
  404120:	a901      	add	r1, sp, #4
  404122:	480a      	ldr	r0, [pc, #40]	; (40414c <sdcard_get_free_mbytes_req+0x38>)
  404124:	4b0a      	ldr	r3, [pc, #40]	; (404150 <sdcard_get_free_mbytes_req+0x3c>)
  404126:	4798      	blx	r3
  404128:	4b0a      	ldr	r3, [pc, #40]	; (404154 <sdcard_get_free_mbytes_req+0x40>)
  40412a:	7018      	strb	r0, [r3, #0]

	// return free space
#if _MAX_SS != 512
	return (( ((uint64_t)Free_clust) * fs.csize * fs.ssize ) / 1048576 );
#else
	return (( ((uint64_t)Free_clust) * fs.csize * 512 ) / 1048576 );
  40412c:	78a0      	ldrb	r0, [r4, #2]
  40412e:	9a01      	ldr	r2, [sp, #4]
  404130:	fba2 2300 	umull	r2, r3, r2, r0
  404134:	0258      	lsls	r0, r3, #9
  404136:	ea40 50d2 	orr.w	r0, r0, r2, lsr #23
  40413a:	f3c2 22cb 	ubfx	r2, r2, #11, #12
#endif	

}
  40413e:	ea42 3000 	orr.w	r0, r2, r0, lsl #12
  404142:	b002      	add	sp, #8
  404144:	bd10      	pop	{r4, pc}
  404146:	bf00      	nop
  404148:	20001014 	.word	0x20001014
  40414c:	0040f4e8 	.word	0x0040f4e8
  404150:	00409505 	.word	0x00409505
  404154:	20000f6c 	.word	0x20000f6c

00404158 <sdcard_update_file_and_dir_to_remove>:

/// @brief Update file and directory name to be removed.
uint8_t sdcard_update_file_and_dir_to_remove( uint8_t * str_name ) {
  404158:	b570      	push	{r4, r5, r6, lr}
  40415a:	4605      	mov	r5, r0
		
	uint8_t str_length;
	
	// calculate string length	
	str_length = calculate_string_length( str_name , STRING_MAX );
  40415c:	2180      	movs	r1, #128	; 0x80
  40415e:	4b11      	ldr	r3, [pc, #68]	; (4041a4 <sdcard_update_file_and_dir_to_remove+0x4c>)
  404160:	4798      	blx	r3
	
	// check if there is a file or directory to be removed
	if (dir_remove_name_length == 0) {
  404162:	4b11      	ldr	r3, [pc, #68]	; (4041a8 <sdcard_update_file_and_dir_to_remove+0x50>)
  404164:	781b      	ldrb	r3, [r3, #0]
  404166:	b10b      	cbz	r3, 40416c <sdcard_update_file_and_dir_to_remove+0x14>
		// return
		return 0;
		
	}
	else
		return 2;
  404168:	2002      	movs	r0, #2
  40416a:	bd70      	pop	{r4, r5, r6, pc}
  40416c:	4604      	mov	r4, r0
		memset( (void *)&dir_remove_name , 0 , sizeof(dir_remove_name) );
  40416e:	4e0f      	ldr	r6, [pc, #60]	; (4041ac <sdcard_update_file_and_dir_to_remove+0x54>)
  404170:	2280      	movs	r2, #128	; 0x80
  404172:	2100      	movs	r1, #0
  404174:	4630      	mov	r0, r6
  404176:	4b0e      	ldr	r3, [pc, #56]	; (4041b0 <sdcard_update_file_and_dir_to_remove+0x58>)
  404178:	4798      	blx	r3
		sprintf( (char *)&dir_remove_name ,"%s" , "0:/");
  40417a:	4b0e      	ldr	r3, [pc, #56]	; (4041b4 <sdcard_update_file_and_dir_to_remove+0x5c>)
  40417c:	6818      	ldr	r0, [r3, #0]
  40417e:	4631      	mov	r1, r6
  404180:	f841 0b03 	str.w	r0, [r1], #3
		copy_content( str_name ,
  404184:	b2a2      	uxth	r2, r4
  404186:	4628      	mov	r0, r5
  404188:	4b0b      	ldr	r3, [pc, #44]	; (4041b8 <sdcard_update_file_and_dir_to_remove+0x60>)
  40418a:	4798      	blx	r3
		if (FR_OK != f_stat ( (char const *)&dir_remove_name , &sdcard_file_info ))
  40418c:	490b      	ldr	r1, [pc, #44]	; (4041bc <sdcard_update_file_and_dir_to_remove+0x64>)
  40418e:	4630      	mov	r0, r6
  404190:	4b0b      	ldr	r3, [pc, #44]	; (4041c0 <sdcard_update_file_and_dir_to_remove+0x68>)
  404192:	4798      	blx	r3
  404194:	b918      	cbnz	r0, 40419e <sdcard_update_file_and_dir_to_remove+0x46>
		dir_remove_name_length = str_length+3;
  404196:	3403      	adds	r4, #3
  404198:	4b03      	ldr	r3, [pc, #12]	; (4041a8 <sdcard_update_file_and_dir_to_remove+0x50>)
  40419a:	701c      	strb	r4, [r3, #0]
		return 0;
  40419c:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
  40419e:	2001      	movs	r0, #1
	
}
  4041a0:	bd70      	pop	{r4, r5, r6, pc}
  4041a2:	bf00      	nop
  4041a4:	00405221 	.word	0x00405221
  4041a8:	20000b39 	.word	0x20000b39
  4041ac:	20001cfc 	.word	0x20001cfc
  4041b0:	0040b671 	.word	0x0040b671
  4041b4:	0040f4e8 	.word	0x0040f4e8
  4041b8:	00405129 	.word	0x00405129
  4041bc:	20001d7c 	.word	0x20001d7c
  4041c0:	004094b1 	.word	0x004094b1

004041c4 <sdcard_file_get_name>:
/// @param[out] name_length
///
/// @note string_name must be cleared outside.
/// @note It must be called after next item function since other fatfs function 
///       related to sd-card could modified the buffer where long name is saved.
uint8_t sdcard_file_get_name(DIR * directory, FILINFO * file_info , uint8_t * name_string , uint8_t limit) {
  4041c4:	b570      	push	{r4, r5, r6, lr}

	uint8_t name_length = 0;

	// check if there is a short file name
	if  (directory->lfn_idx == 0xFFFF) {
  4041c6:	8c05      	ldrh	r5, [r0, #32]
  4041c8:	f64f 74ff 	movw	r4, #65535	; 0xffff
  4041cc:	42a5      	cmp	r5, r4
  4041ce:	d013      	beq.n	4041f8 <sdcard_file_get_name+0x34>
	// it is a long file name (LFN)
	else {
		
		// LFN is stored in a string of 16bits word, so a custom code is used
		for (;;) {
			if ((*(directory->lfn + name_length) != 0) & (name_length < limit)) {
  4041d0:	69c1      	ldr	r1, [r0, #28]
  4041d2:	880d      	ldrh	r5, [r1, #0]
  4041d4:	b175      	cbz	r5, 4041f4 <sdcard_file_get_name+0x30>
  4041d6:	b16b      	cbz	r3, 4041f4 <sdcard_file_get_name+0x30>
  4041d8:	2600      	movs	r6, #0
  4041da:	4634      	mov	r4, r6
				name_string[name_length] = *(directory->lfn + name_length);
  4041dc:	5595      	strb	r5, [r2, r6]
				name_length++;
  4041de:	3401      	adds	r4, #1
  4041e0:	b2e4      	uxtb	r4, r4
			if ((*(directory->lfn + name_length) != 0) & (name_length < limit)) {
  4041e2:	4626      	mov	r6, r4
  4041e4:	69c5      	ldr	r5, [r0, #28]
  4041e6:	f835 5014 	ldrh.w	r5, [r5, r4, lsl #1]
  4041ea:	b10d      	cbz	r5, 4041f0 <sdcard_file_get_name+0x2c>
  4041ec:	42a3      	cmp	r3, r4
  4041ee:	d8f5      	bhi.n	4041dc <sdcard_file_get_name+0x18>

	}
	
	return name_length;

}
  4041f0:	4620      	mov	r0, r4
  4041f2:	bd70      	pop	{r4, r5, r6, pc}
			if ((*(directory->lfn + name_length) != 0) & (name_length < limit)) {
  4041f4:	2400      	movs	r4, #0
  4041f6:	e7fb      	b.n	4041f0 <sdcard_file_get_name+0x2c>
  4041f8:	4615      	mov	r5, r2
		name_length = calculate_string_length( (uint8_t *)&file_info->fname[0] , 13 );
  4041fa:	f101 0609 	add.w	r6, r1, #9
  4041fe:	210d      	movs	r1, #13
  404200:	4630      	mov	r0, r6
  404202:	4b04      	ldr	r3, [pc, #16]	; (404214 <sdcard_file_get_name+0x50>)
  404204:	4798      	blx	r3
  404206:	4604      	mov	r4, r0
		copy_content( (uint8_t *)&(file_info->fname[0]) ,
  404208:	b282      	uxth	r2, r0
  40420a:	4629      	mov	r1, r5
  40420c:	4630      	mov	r0, r6
  40420e:	4b02      	ldr	r3, [pc, #8]	; (404218 <sdcard_file_get_name+0x54>)
  404210:	4798      	blx	r3
  404212:	e7ed      	b.n	4041f0 <sdcard_file_get_name+0x2c>
  404214:	00405221 	.word	0x00405221
  404218:	00405129 	.word	0x00405129

0040421c <sdcard_find_older_directory>:
void sdcard_find_older_directory( char * dir_name ) {
  40421c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404220:	4604      	mov	r4, r0
	dir_name[0] = 0xFF;
  404222:	23ff      	movs	r3, #255	; 0xff
  404224:	7003      	strb	r3, [r0, #0]
		sdcard_file_info.fattrib = 0;
  404226:	4e23      	ldr	r6, [pc, #140]	; (4042b4 <sdcard_find_older_directory+0x98>)
  404228:	f04f 0a00 	mov.w	sl, #0
  40422c:	46d1      	mov	r9, sl
		if (FR_OK != f_readdir ( (DIR *)&sdcard_directory , &sdcard_file_info ))
  40422e:	f8df 809c 	ldr.w	r8, [pc, #156]	; 4042cc <sdcard_find_older_directory+0xb0>
			temp_length = sdcard_file_get_name( &sdcard_directory, &sdcard_file_info , (uint8_t *)&string[0] , STRING_MAX );
  404232:	4f21      	ldr	r7, [pc, #132]	; (4042b8 <sdcard_find_older_directory+0x9c>)
		sdcard_file_info.fattrib = 0;
  404234:	f886 9008 	strb.w	r9, [r6, #8]
		if (FR_OK != f_readdir ( (DIR *)&sdcard_directory , &sdcard_file_info ))
  404238:	4631      	mov	r1, r6
  40423a:	4820      	ldr	r0, [pc, #128]	; (4042bc <sdcard_find_older_directory+0xa0>)
  40423c:	47c0      	blx	r8
  40423e:	2800      	cmp	r0, #0
  404240:	d135      	bne.n	4042ae <sdcard_find_older_directory+0x92>
		if ( sdcard_file_info.fattrib & AM_ARC )
  404242:	7a33      	ldrb	r3, [r6, #8]
  404244:	f013 0f20 	tst.w	r3, #32
  404248:	d1f4      	bne.n	404234 <sdcard_find_older_directory+0x18>
		else if ( sdcard_file_info.fattrib & AM_DIR ) {
  40424a:	f013 0f10 	tst.w	r3, #16
  40424e:	d02e      	beq.n	4042ae <sdcard_find_older_directory+0x92>
			memset( (void *)&string , 0 , sizeof(string) );
  404250:	4d1b      	ldr	r5, [pc, #108]	; (4042c0 <sdcard_find_older_directory+0xa4>)
  404252:	f04f 0b80 	mov.w	fp, #128	; 0x80
  404256:	465a      	mov	r2, fp
  404258:	4651      	mov	r1, sl
  40425a:	4628      	mov	r0, r5
  40425c:	4b19      	ldr	r3, [pc, #100]	; (4042c4 <sdcard_find_older_directory+0xa8>)
  40425e:	4798      	blx	r3
			temp_length = sdcard_file_get_name( &sdcard_directory, &sdcard_file_info , (uint8_t *)&string[0] , STRING_MAX );
  404260:	465b      	mov	r3, fp
  404262:	462a      	mov	r2, r5
  404264:	4631      	mov	r1, r6
  404266:	4815      	ldr	r0, [pc, #84]	; (4042bc <sdcard_find_older_directory+0xa0>)
  404268:	f8df b064 	ldr.w	fp, [pc, #100]	; 4042d0 <sdcard_find_older_directory+0xb4>
  40426c:	47d8      	blx	fp
  40426e:	7038      	strb	r0, [r7, #0]
			if (string[0] == 46 ) // 46 -> "."
  404270:	782a      	ldrb	r2, [r5, #0]
  404272:	2a2e      	cmp	r2, #46	; 0x2e
  404274:	d0de      	beq.n	404234 <sdcard_find_older_directory+0x18>
			for ( i = 0 ; i < STRING_MAX ; i++) {
  404276:	4b14      	ldr	r3, [pc, #80]	; (4042c8 <sdcard_find_older_directory+0xac>)
  404278:	f883 a000 	strb.w	sl, [r3]
				if ( string[i] > dir_name[i] )
  40427c:	7823      	ldrb	r3, [r4, #0]
  40427e:	429a      	cmp	r2, r3
  404280:	d8d8      	bhi.n	404234 <sdcard_find_older_directory+0x18>
					copy_content( (uint8_t *)&string[0] ,
  404282:	f8df b050 	ldr.w	fp, [pc, #80]	; 4042d4 <sdcard_find_older_directory+0xb8>
  404286:	e00b      	b.n	4042a0 <sdcard_find_older_directory+0x84>
			for ( i = 0 ; i < STRING_MAX ; i++) {
  404288:	4a0f      	ldr	r2, [pc, #60]	; (4042c8 <sdcard_find_older_directory+0xac>)
  40428a:	7813      	ldrb	r3, [r2, #0]
  40428c:	3301      	adds	r3, #1
  40428e:	b2db      	uxtb	r3, r3
  404290:	7013      	strb	r3, [r2, #0]
  404292:	f013 0f80 	tst.w	r3, #128	; 0x80
  404296:	d1cd      	bne.n	404234 <sdcard_find_older_directory+0x18>
				if ( string[i] > dir_name[i] )
  404298:	5cea      	ldrb	r2, [r5, r3]
  40429a:	5ce3      	ldrb	r3, [r4, r3]
  40429c:	429a      	cmp	r2, r3
  40429e:	d8c9      	bhi.n	404234 <sdcard_find_older_directory+0x18>
				else if ( string[i] < dir_name[i] ) {
  4042a0:	429a      	cmp	r2, r3
  4042a2:	d2f1      	bcs.n	404288 <sdcard_find_older_directory+0x6c>
					copy_content( (uint8_t *)&string[0] ,
  4042a4:	783a      	ldrb	r2, [r7, #0]
  4042a6:	4621      	mov	r1, r4
  4042a8:	4628      	mov	r0, r5
  4042aa:	47d8      	blx	fp
  4042ac:	e7ec      	b.n	404288 <sdcard_find_older_directory+0x6c>
  4042ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4042b2:	bf00      	nop
  4042b4:	20001d7c 	.word	0x20001d7c
  4042b8:	20000b61 	.word	0x20000b61
  4042bc:	20001ccc 	.word	0x20001ccc
  4042c0:	2000126c 	.word	0x2000126c
  4042c4:	0040b671 	.word	0x0040b671
  4042c8:	20000b60 	.word	0x20000b60
  4042cc:	00409439 	.word	0x00409439
  4042d0:	004041c5 	.word	0x004041c5
  4042d4:	00405129 	.word	0x00405129

004042d8 <sdcard_find_older_month>:
uint8_t sdcard_find_older_month(char * dir_name) {
  4042d8:	b530      	push	{r4, r5, lr}
  4042da:	b083      	sub	sp, #12
  4042dc:	4604      	mov	r4, r0
	memset( (void *)dir_name , 0 , STRING_MAX );
  4042de:	2280      	movs	r2, #128	; 0x80
  4042e0:	2100      	movs	r1, #0
  4042e2:	4b28      	ldr	r3, [pc, #160]	; (404384 <sdcard_find_older_month+0xac>)
  4042e4:	4798      	blx	r3
	sprintf( (char *)dir_name ,"%s" , "0:/");
  4042e6:	4b28      	ldr	r3, [pc, #160]	; (404388 <sdcard_find_older_month+0xb0>)
  4042e8:	6818      	ldr	r0, [r3, #0]
  4042ea:	6020      	str	r0, [r4, #0]
	if (FR_OK != f_opendir ( (DIR *)&sdcard_directory , &dir_name[0] ))
  4042ec:	4621      	mov	r1, r4
  4042ee:	4827      	ldr	r0, [pc, #156]	; (40438c <sdcard_find_older_month+0xb4>)
  4042f0:	4b27      	ldr	r3, [pc, #156]	; (404390 <sdcard_find_older_month+0xb8>)
  4042f2:	4798      	blx	r3
  4042f4:	b110      	cbz	r0, 4042fc <sdcard_find_older_month+0x24>
		return 0; // Go out since there was a problem.
  4042f6:	2000      	movs	r0, #0
}
  4042f8:	b003      	add	sp, #12
  4042fa:	bd30      	pop	{r4, r5, pc}
	temp_length = calculate_string_length( (uint8_t *)&dir_name[0] , STRING_MAX );
  4042fc:	2180      	movs	r1, #128	; 0x80
  4042fe:	4620      	mov	r0, r4
  404300:	4b24      	ldr	r3, [pc, #144]	; (404394 <sdcard_find_older_month+0xbc>)
  404302:	4798      	blx	r3
  404304:	f88d 0007 	strb.w	r0, [sp, #7]
	sdcard_find_older_directory( &dir_name[temp_length] );
  404308:	f89d 0007 	ldrb.w	r0, [sp, #7]
  40430c:	4420      	add	r0, r4
  40430e:	4b22      	ldr	r3, [pc, #136]	; (404398 <sdcard_find_older_month+0xc0>)
  404310:	4798      	blx	r3
	if (FR_OK != f_opendir ( (DIR *)&sdcard_directory , &dir_name[0] ))
  404312:	4621      	mov	r1, r4
  404314:	481d      	ldr	r0, [pc, #116]	; (40438c <sdcard_find_older_month+0xb4>)
  404316:	4b1e      	ldr	r3, [pc, #120]	; (404390 <sdcard_find_older_month+0xb8>)
  404318:	4798      	blx	r3
  40431a:	b108      	cbz	r0, 404320 <sdcard_find_older_month+0x48>
		return 0; // Go out since there was a problem.
  40431c:	2000      	movs	r0, #0
  40431e:	e7eb      	b.n	4042f8 <sdcard_find_older_month+0x20>
	temp_length = calculate_string_length( (uint8_t *)&dir_name[0] , STRING_MAX );
  404320:	2180      	movs	r1, #128	; 0x80
  404322:	4620      	mov	r0, r4
  404324:	4d1b      	ldr	r5, [pc, #108]	; (404394 <sdcard_find_older_month+0xbc>)
  404326:	47a8      	blx	r5
  404328:	f88d 0007 	strb.w	r0, [sp, #7]
	dir_name[temp_length] = 47; // 47->"/"
  40432c:	f89d 3007 	ldrb.w	r3, [sp, #7]
  404330:	b2db      	uxtb	r3, r3
  404332:	222f      	movs	r2, #47	; 0x2f
  404334:	54e2      	strb	r2, [r4, r3]
	sdcard_find_older_directory( &dir_name[temp_length+1] );
  404336:	f89d 0007 	ldrb.w	r0, [sp, #7]
  40433a:	3001      	adds	r0, #1
  40433c:	4420      	add	r0, r4
  40433e:	4b16      	ldr	r3, [pc, #88]	; (404398 <sdcard_find_older_month+0xc0>)
  404340:	4798      	blx	r3
	temp_length = calculate_string_length( (uint8_t *)&dir_name[0] , STRING_MAX );
  404342:	2180      	movs	r1, #128	; 0x80
  404344:	4620      	mov	r0, r4
  404346:	47a8      	blx	r5
  404348:	f88d 0007 	strb.w	r0, [sp, #7]
	if (dir_name[temp_length-1] == 0xFF ) {
  40434c:	f89d 3007 	ldrb.w	r3, [sp, #7]
  404350:	4423      	add	r3, r4
  404352:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  404356:	2bff      	cmp	r3, #255	; 0xff
  404358:	d003      	beq.n	404362 <sdcard_find_older_month+0x8a>
		return temp_length;	
  40435a:	f89d 0007 	ldrb.w	r0, [sp, #7]
  40435e:	b2c0      	uxtb	r0, r0
  404360:	e7ca      	b.n	4042f8 <sdcard_find_older_month+0x20>
		dir_name[temp_length-1] = 0;   // clear 0xFF
  404362:	f89d 3007 	ldrb.w	r3, [sp, #7]
  404366:	4423      	add	r3, r4
  404368:	2200      	movs	r2, #0
  40436a:	f803 2c01 	strb.w	r2, [r3, #-1]
		dir_name[temp_length-2] = 0; // clear "/"
  40436e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  404372:	441c      	add	r4, r3
  404374:	f804 2c02 	strb.w	r2, [r4, #-2]
		return temp_length-2;
  404378:	f89d 0007 	ldrb.w	r0, [sp, #7]
  40437c:	3802      	subs	r0, #2
  40437e:	b2c0      	uxtb	r0, r0
  404380:	e7ba      	b.n	4042f8 <sdcard_find_older_month+0x20>
  404382:	bf00      	nop
  404384:	0040b671 	.word	0x0040b671
  404388:	0040f4e8 	.word	0x0040f4e8
  40438c:	20001ccc 	.word	0x20001ccc
  404390:	004093b9 	.word	0x004093b9
  404394:	00405221 	.word	0x00405221
  404398:	0040421d 	.word	0x0040421d

0040439c <sdcard_check_free_space_and_update_directory_to_remove>:
void sdcard_check_free_space_and_update_directory_to_remove(void) {
  40439c:	b510      	push	{r4, lr}
	data_MB = sdcard_get_total_mbytes_req() - sdcard_get_free_mbytes_req();
  40439e:	4b08      	ldr	r3, [pc, #32]	; (4043c0 <sdcard_check_free_space_and_update_directory_to_remove+0x24>)
  4043a0:	4798      	blx	r3
  4043a2:	4604      	mov	r4, r0
  4043a4:	4b07      	ldr	r3, [pc, #28]	; (4043c4 <sdcard_check_free_space_and_update_directory_to_remove+0x28>)
  4043a6:	4798      	blx	r3
	if (data_MB > unit_config.sdcard_memory_max_MB)
  4043a8:	4b07      	ldr	r3, [pc, #28]	; (4043c8 <sdcard_check_free_space_and_update_directory_to_remove+0x2c>)
  4043aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	data_MB = sdcard_get_total_mbytes_req() - sdcard_get_free_mbytes_req();
  4043ac:	1a20      	subs	r0, r4, r0
	if (data_MB > unit_config.sdcard_memory_max_MB)
  4043ae:	4298      	cmp	r0, r3
  4043b0:	dc00      	bgt.n	4043b4 <sdcard_check_free_space_and_update_directory_to_remove+0x18>
  4043b2:	bd10      	pop	{r4, pc}
		dir_remove_name_length = sdcard_find_older_month(&dir_remove_name[0]);
  4043b4:	4805      	ldr	r0, [pc, #20]	; (4043cc <sdcard_check_free_space_and_update_directory_to_remove+0x30>)
  4043b6:	4b06      	ldr	r3, [pc, #24]	; (4043d0 <sdcard_check_free_space_and_update_directory_to_remove+0x34>)
  4043b8:	4798      	blx	r3
  4043ba:	4b06      	ldr	r3, [pc, #24]	; (4043d4 <sdcard_check_free_space_and_update_directory_to_remove+0x38>)
  4043bc:	7018      	strb	r0, [r3, #0]
}
  4043be:	e7f8      	b.n	4043b2 <sdcard_check_free_space_and_update_directory_to_remove+0x16>
  4043c0:	004040e9 	.word	0x004040e9
  4043c4:	00404115 	.word	0x00404115
  4043c8:	20001db0 	.word	0x20001db0
  4043cc:	20001cfc 	.word	0x20001cfc
  4043d0:	004042d9 	.word	0x004042d9
  4043d4:	20000b39 	.word	0x20000b39

004043d8 <sdcard_remove_directory>:
void sdcard_remove_directory(void) {
  4043d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	memset( (void *)&temp_name , 0 , sizeof(temp_name) );
  4043dc:	4d25      	ldr	r5, [pc, #148]	; (404474 <sdcard_remove_directory+0x9c>)
  4043de:	2280      	movs	r2, #128	; 0x80
  4043e0:	2100      	movs	r1, #0
  4043e2:	4628      	mov	r0, r5
  4043e4:	4b24      	ldr	r3, [pc, #144]	; (404478 <sdcard_remove_directory+0xa0>)
  4043e6:	4798      	blx	r3
	copy_content( (uint8_t *)dir_remove_name ,
  4043e8:	4c24      	ldr	r4, [pc, #144]	; (40447c <sdcard_remove_directory+0xa4>)
  4043ea:	7822      	ldrb	r2, [r4, #0]
  4043ec:	4629      	mov	r1, r5
  4043ee:	4824      	ldr	r0, [pc, #144]	; (404480 <sdcard_remove_directory+0xa8>)
  4043f0:	4b24      	ldr	r3, [pc, #144]	; (404484 <sdcard_remove_directory+0xac>)
  4043f2:	4798      	blx	r3
	temp_name_length = dir_remove_name_length;
  4043f4:	7822      	ldrb	r2, [r4, #0]
  4043f6:	4b24      	ldr	r3, [pc, #144]	; (404488 <sdcard_remove_directory+0xb0>)
  4043f8:	701a      	strb	r2, [r3, #0]
  4043fa:	240a      	movs	r4, #10
		res = f_unlink ( (char const *)&temp_name );
  4043fc:	462e      	mov	r6, r5
  4043fe:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 4044a0 <sdcard_remove_directory+0xc8>
  404402:	4f22      	ldr	r7, [pc, #136]	; (40448c <sdcard_remove_directory+0xb4>)
  404404:	4630      	mov	r0, r6
  404406:	47c0      	blx	r8
  404408:	7038      	strb	r0, [r7, #0]
		if (res == FR_OK)
  40440a:	2800      	cmp	r0, #0
  40440c:	d02f      	beq.n	40446e <sdcard_remove_directory+0x96>
		else if (res != FR_DENIED)
  40440e:	2807      	cmp	r0, #7
  404410:	d12a      	bne.n	404468 <sdcard_remove_directory+0x90>
		if (FR_OK != f_opendir ( (DIR *)&sdcard_directory , (const TCHAR *)&temp_name ) )
  404412:	4631      	mov	r1, r6
  404414:	481e      	ldr	r0, [pc, #120]	; (404490 <sdcard_remove_directory+0xb8>)
  404416:	4b1f      	ldr	r3, [pc, #124]	; (404494 <sdcard_remove_directory+0xbc>)
  404418:	4798      	blx	r3
  40441a:	bb28      	cbnz	r0, 404468 <sdcard_remove_directory+0x90>
		if (FR_OK != f_readdir ( (DIR *)&sdcard_directory , &sdcard_file_info ))
  40441c:	491e      	ldr	r1, [pc, #120]	; (404498 <sdcard_remove_directory+0xc0>)
  40441e:	481c      	ldr	r0, [pc, #112]	; (404490 <sdcard_remove_directory+0xb8>)
  404420:	4b1e      	ldr	r3, [pc, #120]	; (40449c <sdcard_remove_directory+0xc4>)
  404422:	4798      	blx	r3
  404424:	bb00      	cbnz	r0, 404468 <sdcard_remove_directory+0x90>
		if (FR_OK != f_readdir ( (DIR *)&sdcard_directory , &sdcard_file_info ))
  404426:	491c      	ldr	r1, [pc, #112]	; (404498 <sdcard_remove_directory+0xc0>)
  404428:	4819      	ldr	r0, [pc, #100]	; (404490 <sdcard_remove_directory+0xb8>)
  40442a:	4b1c      	ldr	r3, [pc, #112]	; (40449c <sdcard_remove_directory+0xc4>)
  40442c:	4798      	blx	r3
  40442e:	b9d8      	cbnz	r0, 404468 <sdcard_remove_directory+0x90>
		if (FR_OK != f_readdir ( (DIR *)&sdcard_directory , &sdcard_file_info ))
  404430:	4919      	ldr	r1, [pc, #100]	; (404498 <sdcard_remove_directory+0xc0>)
  404432:	4817      	ldr	r0, [pc, #92]	; (404490 <sdcard_remove_directory+0xb8>)
  404434:	4b19      	ldr	r3, [pc, #100]	; (40449c <sdcard_remove_directory+0xc4>)
  404436:	4798      	blx	r3
  404438:	b9b0      	cbnz	r0, 404468 <sdcard_remove_directory+0x90>
		temp_name[temp_name_length] = 0x2F;
  40443a:	4d13      	ldr	r5, [pc, #76]	; (404488 <sdcard_remove_directory+0xb0>)
  40443c:	782a      	ldrb	r2, [r5, #0]
  40443e:	232f      	movs	r3, #47	; 0x2f
  404440:	54b3      	strb	r3, [r6, r2]
		temp_name_length += 1;
  404442:	3201      	adds	r2, #1
  404444:	b2d2      	uxtb	r2, r2
  404446:	702a      	strb	r2, [r5, #0]
		temp_name_length += sdcard_file_get_name(  (DIR *)&sdcard_directory, &sdcard_file_info , (uint8_t *)&temp_name[temp_name_length] , STRING_MAX - temp_name_length );
  404448:	f1c2 0380 	rsb	r3, r2, #128	; 0x80
  40444c:	b2db      	uxtb	r3, r3
  40444e:	4432      	add	r2, r6
  404450:	4911      	ldr	r1, [pc, #68]	; (404498 <sdcard_remove_directory+0xc0>)
  404452:	480f      	ldr	r0, [pc, #60]	; (404490 <sdcard_remove_directory+0xb8>)
  404454:	f8df 904c 	ldr.w	r9, [pc, #76]	; 4044a4 <sdcard_remove_directory+0xcc>
  404458:	47c8      	blx	r9
  40445a:	782b      	ldrb	r3, [r5, #0]
  40445c:	4418      	add	r0, r3
  40445e:	7028      	strb	r0, [r5, #0]
  404460:	3c01      	subs	r4, #1
	while (loop_count) {
  404462:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
  404466:	d1cd      	bne.n	404404 <sdcard_remove_directory+0x2c>
	dir_remove_name_length = 0;
  404468:	2200      	movs	r2, #0
  40446a:	4b04      	ldr	r3, [pc, #16]	; (40447c <sdcard_remove_directory+0xa4>)
  40446c:	701a      	strb	r2, [r3, #0]
  40446e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404472:	bf00      	nop
  404474:	20000b64 	.word	0x20000b64
  404478:	0040b671 	.word	0x0040b671
  40447c:	20000b39 	.word	0x20000b39
  404480:	20001cfc 	.word	0x20001cfc
  404484:	00405129 	.word	0x00405129
  404488:	20000be4 	.word	0x20000be4
  40448c:	20000f6c 	.word	0x20000f6c
  404490:	20001ccc 	.word	0x20001ccc
  404494:	004093b9 	.word	0x004093b9
  404498:	20001d7c 	.word	0x20001d7c
  40449c:	00409439 	.word	0x00409439
  4044a0:	0040960d 	.word	0x0040960d
  4044a4:	004041c5 	.word	0x004041c5

004044a8 <sdcard_background>:
void sdcard_background(void) {
  4044a8:	b508      	push	{r3, lr}
		status = sd_mmc_test_unit_ready(0);
  4044aa:	2000      	movs	r0, #0
  4044ac:	4b64      	ldr	r3, [pc, #400]	; (404640 <sdcard_background+0x198>)
  4044ae:	4798      	blx	r3
  4044b0:	4b64      	ldr	r3, [pc, #400]	; (404644 <sdcard_background+0x19c>)
  4044b2:	7018      	strb	r0, [r3, #0]
		if (sdcard_flags_status & SDCARD_FLAGS_STATUS_ENABLE_SDCARD ) {
  4044b4:	4b64      	ldr	r3, [pc, #400]	; (404648 <sdcard_background+0x1a0>)
  4044b6:	781b      	ldrb	r3, [r3, #0]
  4044b8:	f013 0f01 	tst.w	r3, #1
  4044bc:	d049      	beq.n	404552 <sdcard_background+0xaa>
			if (!(sdcard_flags_status & SDCARD_FLAGS_STATUS_DETECT_SDCARD )) {
  4044be:	4b62      	ldr	r3, [pc, #392]	; (404648 <sdcard_background+0x1a0>)
  4044c0:	781b      	ldrb	r3, [r3, #0]
  4044c2:	f013 0f02 	tst.w	r3, #2
  4044c6:	d107      	bne.n	4044d8 <sdcard_background+0x30>
				if (CTRL_GOOD == status)
  4044c8:	2800      	cmp	r0, #0
  4044ca:	d145      	bne.n	404558 <sdcard_background+0xb0>
					sdcard_flags_status |= SDCARD_FLAGS_STATUS_DETECT_SDCARD;
  4044cc:	4a5e      	ldr	r2, [pc, #376]	; (404648 <sdcard_background+0x1a0>)
  4044ce:	7813      	ldrb	r3, [r2, #0]
  4044d0:	f043 0302 	orr.w	r3, r3, #2
  4044d4:	7013      	strb	r3, [r2, #0]
  4044d6:	e03f      	b.n	404558 <sdcard_background+0xb0>
			else if	(!(sdcard_flags_status & SDCARD_FLAGS_STATUS_LOGIC_MOUNT)) {
  4044d8:	4b5b      	ldr	r3, [pc, #364]	; (404648 <sdcard_background+0x1a0>)
  4044da:	781b      	ldrb	r3, [r3, #0]
  4044dc:	f013 0f04 	tst.w	r3, #4
  4044e0:	d010      	beq.n	404504 <sdcard_background+0x5c>
			else if	(!(sdcard_flags_status & SDCARD_FLAGS_STATUS_READ_UNIT_CONFIG)) {
  4044e2:	4b59      	ldr	r3, [pc, #356]	; (404648 <sdcard_background+0x1a0>)
  4044e4:	781b      	ldrb	r3, [r3, #0]
  4044e6:	f013 0f08 	tst.w	r3, #8
  4044ea:	d014      	beq.n	404516 <sdcard_background+0x6e>
			else if	(!(sdcard_flags_status & SDCARD_FLAGS_STATUS_READ_UNIT_CALIBRATION)) {
  4044ec:	4b56      	ldr	r3, [pc, #344]	; (404648 <sdcard_background+0x1a0>)
  4044ee:	781b      	ldrb	r3, [r3, #0]
  4044f0:	f013 0f10 	tst.w	r3, #16
  4044f4:	d018      	beq.n	404528 <sdcard_background+0x80>
				if (CTRL_GOOD == status)
  4044f6:	bb30      	cbnz	r0, 404546 <sdcard_background+0x9e>
					sdcard_flags_status |= SDCARD_FLAGS_STATUS_CARD_READY;
  4044f8:	4a53      	ldr	r2, [pc, #332]	; (404648 <sdcard_background+0x1a0>)
  4044fa:	7813      	ldrb	r3, [r2, #0]
  4044fc:	f043 0320 	orr.w	r3, r3, #32
  404500:	7013      	strb	r3, [r2, #0]
  404502:	e029      	b.n	404558 <sdcard_background+0xb0>
				if (FR_OK == sdcard_mount_logic_drive())
  404504:	4b51      	ldr	r3, [pc, #324]	; (40464c <sdcard_background+0x1a4>)
  404506:	4798      	blx	r3
  404508:	bb30      	cbnz	r0, 404558 <sdcard_background+0xb0>
					sdcard_flags_status |= SDCARD_FLAGS_STATUS_LOGIC_MOUNT;
  40450a:	4a4f      	ldr	r2, [pc, #316]	; (404648 <sdcard_background+0x1a0>)
  40450c:	7813      	ldrb	r3, [r2, #0]
  40450e:	f043 0304 	orr.w	r3, r3, #4
  404512:	7013      	strb	r3, [r2, #0]
  404514:	e020      	b.n	404558 <sdcard_background+0xb0>
				if (sdcard_check_and_read_unit_config())
  404516:	4b4e      	ldr	r3, [pc, #312]	; (404650 <sdcard_background+0x1a8>)
  404518:	4798      	blx	r3
  40451a:	b1e8      	cbz	r0, 404558 <sdcard_background+0xb0>
					sdcard_flags_status |= SDCARD_FLAGS_STATUS_READ_UNIT_CONFIG;
  40451c:	4a4a      	ldr	r2, [pc, #296]	; (404648 <sdcard_background+0x1a0>)
  40451e:	7813      	ldrb	r3, [r2, #0]
  404520:	f043 0308 	orr.w	r3, r3, #8
  404524:	7013      	strb	r3, [r2, #0]
  404526:	e017      	b.n	404558 <sdcard_background+0xb0>
				if (sdcard_check_and_read_unit_calibration()) {
  404528:	4b4a      	ldr	r3, [pc, #296]	; (404654 <sdcard_background+0x1ac>)
  40452a:	4798      	blx	r3
  40452c:	b1a0      	cbz	r0, 404558 <sdcard_background+0xb0>
					sdcard_flags_status |= SDCARD_FLAGS_STATUS_READ_UNIT_CALIBRATION;
  40452e:	4a46      	ldr	r2, [pc, #280]	; (404648 <sdcard_background+0x1a0>)
  404530:	7813      	ldrb	r3, [r2, #0]
  404532:	f043 0310 	orr.w	r3, r3, #16
  404536:	7013      	strb	r3, [r2, #0]
					comm_flags |= SETTINGS_COMM_FLAG_UNIT_CONFIG_REQUEST_MASK | SETTINGS_COMM_FLAG_UNIT_CALIBRATION_REQUEST_MASK;
  404538:	4a47      	ldr	r2, [pc, #284]	; (404658 <sdcard_background+0x1b0>)
  40453a:	8813      	ldrh	r3, [r2, #0]
  40453c:	b29b      	uxth	r3, r3
  40453e:	f043 0318 	orr.w	r3, r3, #24
  404542:	8013      	strh	r3, [r2, #0]
  404544:	e008      	b.n	404558 <sdcard_background+0xb0>
					sdcard_flags_status &= 0x1; // only save fist flag
  404546:	4a40      	ldr	r2, [pc, #256]	; (404648 <sdcard_background+0x1a0>)
  404548:	7813      	ldrb	r3, [r2, #0]
  40454a:	f003 0301 	and.w	r3, r3, #1
  40454e:	7013      	strb	r3, [r2, #0]
  404550:	e002      	b.n	404558 <sdcard_background+0xb0>
			sdcard_flags_status = 0;
  404552:	2200      	movs	r2, #0
  404554:	4b3c      	ldr	r3, [pc, #240]	; (404648 <sdcard_background+0x1a0>)
  404556:	701a      	strb	r2, [r3, #0]
		if (sdcard_flags_status & SDCARD_FLAGS_STATUS_CARD_READY)
  404558:	4b3b      	ldr	r3, [pc, #236]	; (404648 <sdcard_background+0x1a0>)
  40455a:	781b      	ldrb	r3, [r3, #0]
  40455c:	f013 0f20 	tst.w	r3, #32
			led_green_on();
  404560:	f04f 0010 	mov.w	r0, #16
  404564:	bf14      	ite	ne
  404566:	4b3d      	ldrne	r3, [pc, #244]	; (40465c <sdcard_background+0x1b4>)
			led_green_off();
  404568:	4b3d      	ldreq	r3, [pc, #244]	; (404660 <sdcard_background+0x1b8>)
  40456a:	4798      	blx	r3
	if (sdcard_flags_status & SDCARD_FLAGS_STATUS_CARD_READY) {
  40456c:	4b36      	ldr	r3, [pc, #216]	; (404648 <sdcard_background+0x1a0>)
  40456e:	781b      	ldrb	r3, [r3, #0]
  404570:	f013 0f20 	tst.w	r3, #32
  404574:	d021      	beq.n	4045ba <sdcard_background+0x112>
		if (sdcard_flags_task & SDCARD_FLAGS_TASK_SAVE_TRENDS_150CYCLES ) {
  404576:	4b3b      	ldr	r3, [pc, #236]	; (404664 <sdcard_background+0x1bc>)
  404578:	781b      	ldrb	r3, [r3, #0]
  40457a:	f013 0f01 	tst.w	r3, #1
  40457e:	d11d      	bne.n	4045bc <sdcard_background+0x114>
		else if (sdcard_flags_task & SDCARD_FLAGS_TASK_SAVE_TRENDS_5MINUTES ) {
  404580:	4b38      	ldr	r3, [pc, #224]	; (404664 <sdcard_background+0x1bc>)
  404582:	781b      	ldrb	r3, [r3, #0]
  404584:	f013 0f02 	tst.w	r3, #2
  404588:	d124      	bne.n	4045d4 <sdcard_background+0x12c>
		else if (sdcard_flags_task & SDCARD_FLAGS_TASK_SAVE_EVENT_DET_INFO ) {
  40458a:	4b36      	ldr	r3, [pc, #216]	; (404664 <sdcard_background+0x1bc>)
  40458c:	781b      	ldrb	r3, [r3, #0]
  40458e:	f013 0f04 	tst.w	r3, #4
  404592:	d12b      	bne.n	4045ec <sdcard_background+0x144>
		else if (sdcard_flags_task & SDCARD_FLAGS_TASK_SAVE_EVENT_BUFFER_INFO ) {
  404594:	4b33      	ldr	r3, [pc, #204]	; (404664 <sdcard_background+0x1bc>)
  404596:	781b      	ldrb	r3, [r3, #0]
  404598:	f013 0f08 	tst.w	r3, #8
  40459c:	d131      	bne.n	404602 <sdcard_background+0x15a>
		else if (sdcard_flags_task & SDCARD_FLAGS_TASK_SAVE_EVENT_BUFFER ) {
  40459e:	4b31      	ldr	r3, [pc, #196]	; (404664 <sdcard_background+0x1bc>)
  4045a0:	781b      	ldrb	r3, [r3, #0]
  4045a2:	f013 0f10 	tst.w	r3, #16
  4045a6:	d138      	bne.n	40461a <sdcard_background+0x172>
		if (dir_remove_name_length)
  4045a8:	4b2f      	ldr	r3, [pc, #188]	; (404668 <sdcard_background+0x1c0>)
  4045aa:	781b      	ldrb	r3, [r3, #0]
  4045ac:	2b00      	cmp	r3, #0
  4045ae:	d140      	bne.n	404632 <sdcard_background+0x18a>
		else if (unit_config.mode_flags & UNIT_CONFIG_MODE_SDCARD_DISCARD_ENABLE)
  4045b0:	4b2e      	ldr	r3, [pc, #184]	; (40466c <sdcard_background+0x1c4>)
  4045b2:	681b      	ldr	r3, [r3, #0]
  4045b4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4045b8:	d13e      	bne.n	404638 <sdcard_background+0x190>
  4045ba:	bd08      	pop	{r3, pc}
			if ( 1 == sdcard_save_trends( (trend_t *)&sdcard_trend_150cycles , 0 ) )
  4045bc:	2100      	movs	r1, #0
  4045be:	482c      	ldr	r0, [pc, #176]	; (404670 <sdcard_background+0x1c8>)
  4045c0:	4b2c      	ldr	r3, [pc, #176]	; (404674 <sdcard_background+0x1cc>)
  4045c2:	4798      	blx	r3
  4045c4:	2800      	cmp	r0, #0
  4045c6:	d0ef      	beq.n	4045a8 <sdcard_background+0x100>
				sdcard_flags_task &= ~SDCARD_FLAGS_TASK_SAVE_TRENDS_150CYCLES;
  4045c8:	4a26      	ldr	r2, [pc, #152]	; (404664 <sdcard_background+0x1bc>)
  4045ca:	7813      	ldrb	r3, [r2, #0]
  4045cc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  4045d0:	7013      	strb	r3, [r2, #0]
  4045d2:	e7e9      	b.n	4045a8 <sdcard_background+0x100>
			if ( 1 == sdcard_save_trends( (trend_t *)&sdcard_trend_5minutes , 1 ) )
  4045d4:	2101      	movs	r1, #1
  4045d6:	4828      	ldr	r0, [pc, #160]	; (404678 <sdcard_background+0x1d0>)
  4045d8:	4b26      	ldr	r3, [pc, #152]	; (404674 <sdcard_background+0x1cc>)
  4045da:	4798      	blx	r3
  4045dc:	2800      	cmp	r0, #0
  4045de:	d0e3      	beq.n	4045a8 <sdcard_background+0x100>
				sdcard_flags_task &= ~SDCARD_FLAGS_TASK_SAVE_TRENDS_5MINUTES;
  4045e0:	4a20      	ldr	r2, [pc, #128]	; (404664 <sdcard_background+0x1bc>)
  4045e2:	7813      	ldrb	r3, [r2, #0]
  4045e4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
  4045e8:	7013      	strb	r3, [r2, #0]
  4045ea:	e7dd      	b.n	4045a8 <sdcard_background+0x100>
			if ( 1 == sdcard_save_event_det_info( (event_det_t *)&sdcard_event_det ) )
  4045ec:	4823      	ldr	r0, [pc, #140]	; (40467c <sdcard_background+0x1d4>)
  4045ee:	4b24      	ldr	r3, [pc, #144]	; (404680 <sdcard_background+0x1d8>)
  4045f0:	4798      	blx	r3
  4045f2:	2800      	cmp	r0, #0
  4045f4:	d0d8      	beq.n	4045a8 <sdcard_background+0x100>
				sdcard_flags_task &= ~SDCARD_FLAGS_TASK_SAVE_EVENT_DET_INFO;
  4045f6:	4a1b      	ldr	r2, [pc, #108]	; (404664 <sdcard_background+0x1bc>)
  4045f8:	7813      	ldrb	r3, [r2, #0]
  4045fa:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
  4045fe:	7013      	strb	r3, [r2, #0]
  404600:	e7d2      	b.n	4045a8 <sdcard_background+0x100>
			if ( 1 == sdcard_save_event_buffer( (uint16_t *)&sdcard_event_buffer_info[0] , NULL ) )
  404602:	2100      	movs	r1, #0
  404604:	481f      	ldr	r0, [pc, #124]	; (404684 <sdcard_background+0x1dc>)
  404606:	4b20      	ldr	r3, [pc, #128]	; (404688 <sdcard_background+0x1e0>)
  404608:	4798      	blx	r3
  40460a:	2800      	cmp	r0, #0
  40460c:	d0cc      	beq.n	4045a8 <sdcard_background+0x100>
				sdcard_flags_task &= ~SDCARD_FLAGS_TASK_SAVE_EVENT_BUFFER_INFO;
  40460e:	4a15      	ldr	r2, [pc, #84]	; (404664 <sdcard_background+0x1bc>)
  404610:	7813      	ldrb	r3, [r2, #0]
  404612:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  404616:	7013      	strb	r3, [r2, #0]
  404618:	e7c6      	b.n	4045a8 <sdcard_background+0x100>
			if ( 1 == sdcard_save_event_buffer( NULL , (int16_t *)&sdcard_event_buffer[0] ) )
  40461a:	491c      	ldr	r1, [pc, #112]	; (40468c <sdcard_background+0x1e4>)
  40461c:	2000      	movs	r0, #0
  40461e:	4b1a      	ldr	r3, [pc, #104]	; (404688 <sdcard_background+0x1e0>)
  404620:	4798      	blx	r3
  404622:	2800      	cmp	r0, #0
  404624:	d0c0      	beq.n	4045a8 <sdcard_background+0x100>
				sdcard_flags_task &= ~SDCARD_FLAGS_TASK_SAVE_EVENT_BUFFER;
  404626:	4a0f      	ldr	r2, [pc, #60]	; (404664 <sdcard_background+0x1bc>)
  404628:	7813      	ldrb	r3, [r2, #0]
  40462a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
  40462e:	7013      	strb	r3, [r2, #0]
  404630:	e7ba      	b.n	4045a8 <sdcard_background+0x100>
			sdcard_remove_directory();
  404632:	4b17      	ldr	r3, [pc, #92]	; (404690 <sdcard_background+0x1e8>)
  404634:	4798      	blx	r3
  404636:	bd08      	pop	{r3, pc}
			sdcard_check_free_space_and_update_directory_to_remove();
  404638:	4b16      	ldr	r3, [pc, #88]	; (404694 <sdcard_background+0x1ec>)
  40463a:	4798      	blx	r3
}
  40463c:	e7bd      	b.n	4045ba <sdcard_background+0x112>
  40463e:	bf00      	nop
  404640:	0040612d 	.word	0x0040612d
  404644:	20001d9c 	.word	0x20001d9c
  404648:	20001cc8 	.word	0x20001cc8
  40464c:	00402fc5 	.word	0x00402fc5
  404650:	00403e5d 	.word	0x00403e5d
  404654:	00403f29 	.word	0x00403f29
  404658:	20001e54 	.word	0x20001e54
  40465c:	0040698b 	.word	0x0040698b
  404660:	004069a5 	.word	0x004069a5
  404664:	20001cf0 	.word	0x20001cf0
  404668:	20000b39 	.word	0x20000b39
  40466c:	20001db0 	.word	0x20001db0
  404670:	20001830 	.word	0x20001830
  404674:	00403329 	.word	0x00403329
  404678:	20001300 	.word	0x20001300
  40467c:	20001818 	.word	0x20001818
  404680:	004037d9 	.word	0x004037d9
  404684:	20001cf4 	.word	0x20001cf4
  404688:	00403c19 	.word	0x00403c19
  40468c:	200012ec 	.word	0x200012ec
  404690:	004043d9 	.word	0x004043d9
  404694:	0040439d 	.word	0x0040439d

00404698 <backup_mode_prepare>:
/**************************** GLOBAL VARIABLES *******************************/

/**************************** LOCAL FUNCTIONS ********************************/

void backup_mode_prepare(void)
{
  404698:	b570      	push	{r4, r5, r6, lr}
	// Disable interrupts
	system_disable_interrupt();
  40469a:	4b1d      	ldr	r3, [pc, #116]	; (404710 <backup_mode_prepare+0x78>)
  40469c:	4798      	blx	r3

	// Configure all PIOs as input, disable pull ups and pull downs
	gpio_configure_group( PIOA , PIO_MASK_PORT , (PIO_INPUT | PIO_DEFAULT));
  40469e:	4c1d      	ldr	r4, [pc, #116]	; (404714 <backup_mode_prepare+0x7c>)
  4046a0:	f04f 5220 	mov.w	r2, #671088640	; 0x28000000
  4046a4:	f04f 31ff 	mov.w	r1, #4294967295
  4046a8:	4620      	mov	r0, r4
  4046aa:	4d1b      	ldr	r5, [pc, #108]	; (404718 <backup_mode_prepare+0x80>)
  4046ac:	47a8      	blx	r5
	gpio_configure_group( PIOB , PIO_MASK_PORT , (PIO_INPUT | PIO_DEFAULT));
  4046ae:	4e1b      	ldr	r6, [pc, #108]	; (40471c <backup_mode_prepare+0x84>)
  4046b0:	f04f 5220 	mov.w	r2, #671088640	; 0x28000000
  4046b4:	f04f 31ff 	mov.w	r1, #4294967295
  4046b8:	4630      	mov	r0, r6
  4046ba:	47a8      	blx	r5
	pio_pull_up(PIOA, PIO_MASK_PORT , false );
  4046bc:	2200      	movs	r2, #0
  4046be:	f04f 31ff 	mov.w	r1, #4294967295
  4046c2:	4620      	mov	r0, r4
  4046c4:	4d16      	ldr	r5, [pc, #88]	; (404720 <backup_mode_prepare+0x88>)
  4046c6:	47a8      	blx	r5
	pio_pull_up(PIOB, PIO_MASK_PORT , false );
  4046c8:	2200      	movs	r2, #0
  4046ca:	f04f 31ff 	mov.w	r1, #4294967295
  4046ce:	4630      	mov	r0, r6
  4046d0:	47a8      	blx	r5
	pio_pull_down(PIOA, PIO_MASK_PORT , false );
  4046d2:	2200      	movs	r2, #0
  4046d4:	f04f 31ff 	mov.w	r1, #4294967295
  4046d8:	4620      	mov	r0, r4
  4046da:	4d12      	ldr	r5, [pc, #72]	; (404724 <backup_mode_prepare+0x8c>)
  4046dc:	47a8      	blx	r5
	pio_pull_down(PIOB, PIO_MASK_PORT , false );
  4046de:	2200      	movs	r2, #0
  4046e0:	f04f 31ff 	mov.w	r1, #4294967295
  4046e4:	4630      	mov	r0, r6
  4046e6:	47a8      	blx	r5
			
	// Configure PIO for wake up
	pio_pull_down(PIOA, PIO_PA0 , true );
  4046e8:	2201      	movs	r2, #1
  4046ea:	4611      	mov	r1, r2
  4046ec:	4620      	mov	r0, r4
  4046ee:	47a8      	blx	r5
	
	// Disable all peripheral clocks 
	pmc_disable_all_periph_clk();
  4046f0:	4b0d      	ldr	r3, [pc, #52]	; (404728 <backup_mode_prepare+0x90>)
  4046f2:	4798      	blx	r3
	
	// Disable brown out detector and supply monitor
	supc_disable_brownout_detector( SUPC );	
  4046f4:	f504 64c2 	add.w	r4, r4, #1552	; 0x610
  4046f8:	4620      	mov	r0, r4
  4046fa:	4b0c      	ldr	r3, [pc, #48]	; (40472c <backup_mode_prepare+0x94>)
  4046fc:	4798      	blx	r3
	supc_set_monitor_sampling_period( SUPC , SUPC_SMMR_SMSMPL_SMD );
  4046fe:	2100      	movs	r1, #0
  404700:	4620      	mov	r0, r4
  404702:	4b0b      	ldr	r3, [pc, #44]	; (404730 <backup_mode_prepare+0x98>)
  404704:	4798      	blx	r3
	
	// Disable USB device clock and programmable clocks
	PMC->PMC_SCDR = PMC_SCDR_UDP | PMC_SCDR_PCK0 | PMC_SCDR_PCK1 | PMC_SCDR_PCK2;
  404706:	f44f 62f0 	mov.w	r2, #1920	; 0x780
  40470a:	4b0a      	ldr	r3, [pc, #40]	; (404734 <backup_mode_prepare+0x9c>)
  40470c:	605a      	str	r2, [r3, #4]
  40470e:	bd70      	pop	{r4, r5, r6, pc}
  404710:	0040562d 	.word	0x0040562d
  404714:	400e0e00 	.word	0x400e0e00
  404718:	00406ae1 	.word	0x00406ae1
  40471c:	400e1000 	.word	0x400e1000
  404720:	00406835 	.word	0x00406835
  404724:	00406941 	.word	0x00406941
  404728:	00406eb1 	.word	0x00406eb1
  40472c:	00404905 	.word	0x00404905
  404730:	0040492b 	.word	0x0040492b
  404734:	400e0400 	.word	0x400e0400

00404738 <enter_backup_mode>:
	
}

void enter_backup_mode(void)
{	
  404738:	b508      	push	{r3, lr}
	// Enable the GPIO for wake-up
	supc_set_wakeup_inputs( SUPC , SUPC_WUIR_WKUPEN0_ENABLE , SUPC_WUIR_WKUPT0_HIGH );
  40473a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  40473e:	2101      	movs	r1, #1
  404740:	4807      	ldr	r0, [pc, #28]	; (404760 <enter_backup_mode+0x28>)
  404742:	4b08      	ldr	r3, [pc, #32]	; (404764 <enter_backup_mode+0x2c>)
  404744:	4798      	blx	r3
//	supc_set_wakeup_mode( SUPC , SUPC_WUMR_SMEN );
	
	// Switch MCK to slow clock 
	pmc_switch_mck_to_sclk(PMC_MCKR_PRES_CLK_1);
  404746:	2000      	movs	r0, #0
  404748:	4b07      	ldr	r3, [pc, #28]	; (404768 <enter_backup_mode+0x30>)
  40474a:	4798      	blx	r3
	
	// Disable unused clock to save power - Disable fast RC oscillator and PLL
	pmc_osc_disable_fastrc();
  40474c:	4b07      	ldr	r3, [pc, #28]	; (40476c <enter_backup_mode+0x34>)
  40474e:	4798      	blx	r3
	pmc_osc_disable_xtal( 0 );
  404750:	2000      	movs	r0, #0
  404752:	4b07      	ldr	r3, [pc, #28]	; (404770 <enter_backup_mode+0x38>)
  404754:	4798      	blx	r3
	pmc_disable_pllack();
  404756:	4b07      	ldr	r3, [pc, #28]	; (404774 <enter_backup_mode+0x3c>)
  404758:	4798      	blx	r3
	
	// Enable back up mode
	pmc_enable_backupmode();
  40475a:	4b07      	ldr	r3, [pc, #28]	; (404778 <enter_backup_mode+0x40>)
  40475c:	4798      	blx	r3
  40475e:	bd08      	pop	{r3, pc}
  404760:	400e1410 	.word	0x400e1410
  404764:	0040494f 	.word	0x0040494f
  404768:	00406c89 	.word	0x00406c89
  40476c:	00406d91 	.word	0x00406d91
  404770:	00406dfd 	.word	0x00406dfd
  404774:	00406e3d 	.word	0x00406e3d
  404778:	00406edd 	.word	0x00406edd

0040477c <unit_config_set_default>:
  40477c:	4b14      	ldr	r3, [pc, #80]	; (4047d0 <unit_config_set_default+0x54>)
  40477e:	4a15      	ldr	r2, [pc, #84]	; (4047d4 <unit_config_set_default+0x58>)
  404780:	601a      	str	r2, [r3, #0]
  404782:	f240 72ff 	movw	r2, #2047	; 0x7ff
  404786:	605a      	str	r2, [r3, #4]
  404788:	4a13      	ldr	r2, [pc, #76]	; (4047d8 <unit_config_set_default+0x5c>)
  40478a:	609a      	str	r2, [r3, #8]
  40478c:	4a13      	ldr	r2, [pc, #76]	; (4047dc <unit_config_set_default+0x60>)
  40478e:	60da      	str	r2, [r3, #12]
  404790:	f5a2 02a2 	sub.w	r2, r2, #5308416	; 0x510000
  404794:	f5a2 722e 	sub.w	r2, r2, #696	; 0x2b8
  404798:	611a      	str	r2, [r3, #16]
  40479a:	2200      	movs	r2, #0
  40479c:	615a      	str	r2, [r3, #20]
  40479e:	4a10      	ldr	r2, [pc, #64]	; (4047e0 <unit_config_set_default+0x64>)
  4047a0:	619a      	str	r2, [r3, #24]
  4047a2:	4a10      	ldr	r2, [pc, #64]	; (4047e4 <unit_config_set_default+0x68>)
  4047a4:	61da      	str	r2, [r3, #28]
  4047a6:	f44f 72c8 	mov.w	r2, #400	; 0x190
  4047aa:	621a      	str	r2, [r3, #32]
  4047ac:	625a      	str	r2, [r3, #36]	; 0x24
  4047ae:	629a      	str	r2, [r3, #40]	; 0x28
  4047b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4047b4:	62da      	str	r2, [r3, #44]	; 0x2c
  4047b6:	4a0c      	ldr	r2, [pc, #48]	; (4047e8 <unit_config_set_default+0x6c>)
  4047b8:	631a      	str	r2, [r3, #48]	; 0x30
  4047ba:	4a0c      	ldr	r2, [pc, #48]	; (4047ec <unit_config_set_default+0x70>)
  4047bc:	635a      	str	r2, [r3, #52]	; 0x34
  4047be:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
  4047c2:	639a      	str	r2, [r3, #56]	; 0x38
  4047c4:	2234      	movs	r2, #52	; 0x34
  4047c6:	63da      	str	r2, [r3, #60]	; 0x3c
  4047c8:	2230      	movs	r2, #48	; 0x30
  4047ca:	641a      	str	r2, [r3, #64]	; 0x40
  4047cc:	4770      	bx	lr
  4047ce:	bf00      	nop
  4047d0:	20001db0 	.word	0x20001db0
  4047d4:	00010121 	.word	0x00010121
  4047d8:	000b71b0 	.word	0x000b71b0
  4047dc:	00288e98 	.word	0x00288e98
  4047e0:	00017700 	.word	0x00017700
  4047e4:	fffe8900 	.word	0xfffe8900
  4047e8:	176cf41f 	.word	0x176cf41f
  4047ec:	0fae7d56 	.word	0x0fae7d56

004047f0 <unit_config_set_custom>:
  4047f0:	b508      	push	{r3, lr}
  4047f2:	2244      	movs	r2, #68	; 0x44
  4047f4:	4901      	ldr	r1, [pc, #4]	; (4047fc <unit_config_set_custom+0xc>)
  4047f6:	4b02      	ldr	r3, [pc, #8]	; (404800 <unit_config_set_custom+0x10>)
  4047f8:	4798      	blx	r3
  4047fa:	bd08      	pop	{r3, pc}
  4047fc:	20001db0 	.word	0x20001db0
  404800:	00405129 	.word	0x00405129

00404804 <unit_calibration_set_default>:
  404804:	b410      	push	{r4}
  404806:	2300      	movs	r3, #0
  404808:	4a09      	ldr	r2, [pc, #36]	; (404830 <unit_calibration_set_default+0x2c>)
  40480a:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  40480e:	4809      	ldr	r0, [pc, #36]	; (404834 <unit_calibration_set_default+0x30>)
  404810:	b299      	uxth	r1, r3
  404812:	2903      	cmp	r1, #3
  404814:	bf94      	ite	ls
  404816:	f842 0023 	strls.w	r0, [r2, r3, lsl #2]
  40481a:	f842 4023 	strhi.w	r4, [r2, r3, lsl #2]
  40481e:	f103 010c 	add.w	r1, r3, #12
  404822:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  404826:	3301      	adds	r3, #1
  404828:	2b0c      	cmp	r3, #12
  40482a:	d1f1      	bne.n	404810 <unit_calibration_set_default+0xc>
  40482c:	bc10      	pop	{r4}
  40482e:	4770      	bx	lr
  404830:	20001df4 	.word	0x20001df4
  404834:	ffff8000 	.word	0xffff8000

00404838 <unit_calibration_set_custom>:
  404838:	b508      	push	{r3, lr}
  40483a:	2260      	movs	r2, #96	; 0x60
  40483c:	4901      	ldr	r1, [pc, #4]	; (404844 <unit_calibration_set_custom+0xc>)
  40483e:	4b02      	ldr	r3, [pc, #8]	; (404848 <unit_calibration_set_custom+0x10>)
  404840:	4798      	blx	r3
  404842:	bd08      	pop	{r3, pc}
  404844:	20001df4 	.word	0x20001df4
  404848:	00405129 	.word	0x00405129

0040484c <unit_config_and_calibration_init>:
  40484c:	b570      	push	{r4, r5, r6, lr}
  40484e:	2244      	movs	r2, #68	; 0x44
  404850:	2100      	movs	r1, #0
  404852:	480f      	ldr	r0, [pc, #60]	; (404890 <unit_config_and_calibration_init+0x44>)
  404854:	4c0f      	ldr	r4, [pc, #60]	; (404894 <unit_config_and_calibration_init+0x48>)
  404856:	47a0      	blx	r4
  404858:	2260      	movs	r2, #96	; 0x60
  40485a:	2100      	movs	r1, #0
  40485c:	480e      	ldr	r0, [pc, #56]	; (404898 <unit_config_and_calibration_init+0x4c>)
  40485e:	47a0      	blx	r4
  404860:	2300      	movs	r3, #0
  404862:	4a0e      	ldr	r2, [pc, #56]	; (40489c <unit_config_and_calibration_init+0x50>)
  404864:	7013      	strb	r3, [r2, #0]
  404866:	4a0e      	ldr	r2, [pc, #56]	; (4048a0 <unit_config_and_calibration_init+0x54>)
  404868:	8013      	strh	r3, [r2, #0]
  40486a:	4e0e      	ldr	r6, [pc, #56]	; (4048a4 <unit_config_and_calibration_init+0x58>)
  40486c:	2504      	movs	r5, #4
  40486e:	4c0e      	ldr	r4, [pc, #56]	; (4048a8 <unit_config_and_calibration_init+0x5c>)
  404870:	4629      	mov	r1, r5
  404872:	4630      	mov	r0, r6
  404874:	47a0      	blx	r4
  404876:	2800      	cmp	r0, #0
  404878:	d1fa      	bne.n	404870 <unit_config_and_calibration_init+0x24>
  40487a:	4b0c      	ldr	r3, [pc, #48]	; (4048ac <unit_config_and_calibration_init+0x60>)
  40487c:	4798      	blx	r3
  40487e:	4b0c      	ldr	r3, [pc, #48]	; (4048b0 <unit_config_and_calibration_init+0x64>)
  404880:	4798      	blx	r3
  404882:	2301      	movs	r3, #1
  404884:	4a05      	ldr	r2, [pc, #20]	; (40489c <unit_config_and_calibration_init+0x50>)
  404886:	7013      	strb	r3, [r2, #0]
  404888:	4a05      	ldr	r2, [pc, #20]	; (4048a0 <unit_config_and_calibration_init+0x54>)
  40488a:	8013      	strh	r3, [r2, #0]
  40488c:	bd70      	pop	{r4, r5, r6, pc}
  40488e:	bf00      	nop
  404890:	20001db0 	.word	0x20001db0
  404894:	0040b671 	.word	0x0040b671
  404898:	20001df4 	.word	0x20001df4
  40489c:	20001cc8 	.word	0x20001cc8
  4048a0:	20001e54 	.word	0x20001e54
  4048a4:	20001da0 	.word	0x20001da0
  4048a8:	00404b15 	.word	0x00404b15
  4048ac:	0040477d 	.word	0x0040477d
  4048b0:	00404805 	.word	0x00404805

004048b4 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
  4048b4:	b538      	push	{r3, r4, r5, lr}
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
  4048b6:	f1a1 030e 	sub.w	r3, r1, #14
  4048ba:	2b01      	cmp	r3, #1
  4048bc:	d802      	bhi.n	4048c4 <efc_perform_command+0x10>
		return EFC_RC_NOT_SUPPORT;
  4048be:	f04f 30ff 	mov.w	r0, #4294967295
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
	cpu_irq_restore(flags);
	return result;
}
  4048c2:	bd38      	pop	{r3, r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4048c4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
  4048c8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4048ca:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4048ce:	2500      	movs	r5, #0
  4048d0:	4b0a      	ldr	r3, [pc, #40]	; (4048fc <efc_perform_command+0x48>)
  4048d2:	701d      	strb	r5, [r3, #0]
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
  4048d4:	0212      	lsls	r2, r2, #8
  4048d6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
  4048da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
	result = efc_perform_fcr(p_efc,
  4048de:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
			EEFC_FCR_FCMD(ul_command));
  4048e2:	b2c9      	uxtb	r1, r1
	result = efc_perform_fcr(p_efc,
  4048e4:	4311      	orrs	r1, r2
  4048e6:	4b06      	ldr	r3, [pc, #24]	; (404900 <efc_perform_command+0x4c>)
  4048e8:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4048ea:	2c00      	cmp	r4, #0
  4048ec:	d1e9      	bne.n	4048c2 <efc_perform_command+0xe>
		cpu_irq_enable();
  4048ee:	2201      	movs	r2, #1
  4048f0:	4b02      	ldr	r3, [pc, #8]	; (4048fc <efc_perform_command+0x48>)
  4048f2:	701a      	strb	r2, [r3, #0]
  4048f4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4048f8:	b662      	cpsie	i
  4048fa:	bd38      	pop	{r3, r4, r5, pc}
  4048fc:	200000b8 	.word	0x200000b8
  404900:	2000006d 	.word	0x2000006d

00404904 <supc_disable_brownout_detector>:
 *
 * \param p_supc Pointer to a SUPC instance.
 */
void supc_disable_brownout_detector(Supc *p_supc)
{
	uint32_t ul_mr = p_supc->SUPC_MR & (~(SUPC_MR_KEY_Msk | SUPC_MR_BODDIS));
  404904:	6883      	ldr	r3, [r0, #8]
  404906:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40490a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
	p_supc->SUPC_MR = SUPC_MR_KEY_PASSWD | ul_mr | SUPC_MR_BODDIS;
  40490e:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  404912:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404916:	6083      	str	r3, [r0, #8]
  404918:	4770      	bx	lr

0040491a <supc_set_monitor_threshold>:
 * \param p_supc Pointer to a SUPC instance.
 * \param ul_threshold Supply monitor threshold (between 1.9V and 3.4V).
 */
void supc_set_monitor_threshold(Supc *p_supc, uint32_t ul_threshold)
{
	uint32_t ul_smmr = p_supc->SUPC_SMMR & (~SUPC_SMMR_SMTH_Msk);
  40491a:	6843      	ldr	r3, [r0, #4]
  40491c:	f023 030f 	bic.w	r3, r3, #15
	p_supc->SUPC_SMMR = ul_smmr | (SUPC_SMMR_SMTH_Msk & ul_threshold);
  404920:	f001 010f 	and.w	r1, r1, #15
  404924:	430b      	orrs	r3, r1
  404926:	6043      	str	r3, [r0, #4]
  404928:	4770      	bx	lr

0040492a <supc_set_monitor_sampling_period>:
 * \param p_supc Pointer to a SUPC instance.
 * \param ul_period Supply monitor sampling period.
 */
void supc_set_monitor_sampling_period(Supc *p_supc, uint32_t ul_period)
{
	uint32_t ul_smmr = p_supc->SUPC_SMMR & (~SUPC_SMMR_SMSMPL_Msk);
  40492a:	6843      	ldr	r3, [r0, #4]
  40492c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
	p_supc->SUPC_SMMR = ul_smmr | (SUPC_SMMR_SMSMPL_Msk & ul_period);
  404930:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
  404934:	430b      	orrs	r3, r1
  404936:	6043      	str	r3, [r0, #4]
  404938:	4770      	bx	lr

0040493a <supc_disable_monitor_reset>:
 *
 * \param p_supc Pointer to a SUPC instance.
 */
void supc_disable_monitor_reset(Supc *p_supc)
{
	p_supc->SUPC_SMMR &= ~SUPC_SMMR_SMRSTEN;
  40493a:	6843      	ldr	r3, [r0, #4]
  40493c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  404940:	6043      	str	r3, [r0, #4]
  404942:	4770      	bx	lr

00404944 <supc_enable_monitor_interrupt>:
 *
 * \param p_supc Pointer to a SUPC instance.
 */
void supc_enable_monitor_interrupt(Supc *p_supc)
{
	p_supc->SUPC_SMMR |= SUPC_SMMR_SMIEN;
  404944:	6843      	ldr	r3, [r0, #4]
  404946:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40494a:	6043      	str	r3, [r0, #4]
  40494c:	4770      	bx	lr

0040494e <supc_set_wakeup_inputs>:
 * 0 means a low-to-high level transition forces the wake up of core power supply.
 */
void supc_set_wakeup_inputs(Supc *p_supc, uint32_t ul_inputs,
		uint32_t ul_transition)
{
	p_supc->SUPC_WUIR = ul_inputs | ul_transition;
  40494e:	430a      	orrs	r2, r1
  404950:	6102      	str	r2, [r0, #16]
  404952:	4770      	bx	lr

00404954 <flash_erase_sector>:
 * \param ul_address Flash sector start address.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_erase_sector(uint32_t ul_address)
{
  404954:	b508      	push	{r3, lr}
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
  404956:	f5a0 0280 	sub.w	r2, r0, #4194304	; 0x400000
	Efc *p_efc;
	uint16_t us_page;

	translate_address(&p_efc, ul_address, &us_page, NULL);

	if (EFC_RC_OK != efc_perform_command(p_efc, EFC_FCMD_ES, us_page)) {
  40495a:	f3c2 224f 	ubfx	r2, r2, #9, #16
  40495e:	2111      	movs	r1, #17
  404960:	4803      	ldr	r0, [pc, #12]	; (404970 <flash_erase_sector+0x1c>)
  404962:	4b04      	ldr	r3, [pc, #16]	; (404974 <flash_erase_sector+0x20>)
  404964:	4798      	blx	r3
  404966:	2800      	cmp	r0, #0
		return FLASH_RC_ERROR;
	}

	return FLASH_RC_OK;
}
  404968:	bf18      	it	ne
  40496a:	2010      	movne	r0, #16
  40496c:	bd08      	pop	{r3, pc}
  40496e:	bf00      	nop
  404970:	400e0a00 	.word	0x400e0a00
  404974:	004048b5 	.word	0x004048b5

00404978 <flash_write>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_write(uint32_t ul_address, const void *p_buffer,
		uint32_t ul_size, uint32_t ul_erase_flag)
{
  404978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40497c:	b085      	sub	sp, #20
  40497e:	9100      	str	r1, [sp, #0]
  404980:	9303      	str	r3, [sp, #12]
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
  404982:	f5a0 0380 	sub.w	r3, r0, #4194304	; 0x400000
  404986:	f3c3 2a4f 	ubfx	sl, r3, #9, #16
	us_offset = (ul_addr - IFLASH_ADDR) % IFLASH_PAGE_SIZE;
  40498a:	f3c0 0708 	ubfx	r7, r0, #0, #9
#else
	UNUSED(ul_fws_temp);
#endif

	/* Write all pages */
	while (ul_size > 0) {
  40498e:	4693      	mov	fp, r2
  404990:	2a00      	cmp	r2, #0
  404992:	d04d      	beq.n	404a30 <flash_write+0xb8>
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;

		/* Pre-buffer data */
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
  404994:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 404a40 <flash_write+0xc8>
  404998:	f509 75fe 	add.w	r5, r9, #508	; 0x1fc
  40499c:	e011      	b.n	4049c2 <flash_write+0x4a>

		if (ul_erase_flag) {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
					us_page);
		} else {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
  40499e:	9a01      	ldr	r2, [sp, #4]
  4049a0:	2101      	movs	r1, #1
  4049a2:	4824      	ldr	r0, [pc, #144]	; (404a34 <flash_write+0xbc>)
  4049a4:	4b24      	ldr	r3, [pc, #144]	; (404a38 <flash_write+0xc0>)
  4049a6:	4798      	blx	r3
					us_page);
		}

		if (ul_error) {
  4049a8:	2800      	cmp	r0, #0
  4049aa:	d13e      	bne.n	404a2a <flash_write+0xb2>
			return ul_error;
		}

		/* Progression */
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
  4049ac:	9b00      	ldr	r3, [sp, #0]
  4049ae:	4423      	add	r3, r4
  4049b0:	9300      	str	r3, [sp, #0]
		ul_size -= writeSize;
		us_page++;
  4049b2:	f10a 0a01 	add.w	sl, sl, #1
  4049b6:	fa1f fa8a 	uxth.w	sl, sl
		us_offset = 0;
  4049ba:	2700      	movs	r7, #0
	while (ul_size > 0) {
  4049bc:	ebbb 0b04 	subs.w	fp, fp, r4
  4049c0:	d032      	beq.n	404a28 <flash_write+0xb0>
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
  4049c2:	f5c7 7300 	rsb	r3, r7, #512	; 0x200
  4049c6:	9302      	str	r3, [sp, #8]
  4049c8:	461c      	mov	r4, r3
  4049ca:	455b      	cmp	r3, fp
  4049cc:	bf28      	it	cs
  4049ce:	465c      	movcs	r4, fp
	ul_addr = IFLASH_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
  4049d0:	f8cd a004 	str.w	sl, [sp, #4]
  4049d4:	f50a 5300 	add.w	r3, sl, #8192	; 0x2000
  4049d8:	ea4f 2843 	mov.w	r8, r3, lsl #9
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
  4049dc:	463a      	mov	r2, r7
  4049de:	4641      	mov	r1, r8
  4049e0:	4648      	mov	r0, r9
  4049e2:	4e16      	ldr	r6, [pc, #88]	; (404a3c <flash_write+0xc4>)
  4049e4:	47b0      	blx	r6
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);
  4049e6:	4622      	mov	r2, r4
  4049e8:	9900      	ldr	r1, [sp, #0]
  4049ea:	eb09 0007 	add.w	r0, r9, r7
  4049ee:	47b0      	blx	r6
		memcpy(puc_page_buffer + us_offset + writeSize,
  4049f0:	1938      	adds	r0, r7, r4
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;
  4049f2:	9a02      	ldr	r2, [sp, #8]
  4049f4:	1b12      	subs	r2, r2, r4
				(void *)(ul_page_addr + us_offset + writeSize),
  4049f6:	eb04 0108 	add.w	r1, r4, r8
		memcpy(puc_page_buffer + us_offset + writeSize,
  4049fa:	b292      	uxth	r2, r2
  4049fc:	4439      	add	r1, r7
  4049fe:	4448      	add	r0, r9
  404a00:	47b0      	blx	r6
  404a02:	f1a9 0304 	sub.w	r3, r9, #4
  404a06:	f1a8 0204 	sub.w	r2, r8, #4
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
  404a0a:	f853 1f04 	ldr.w	r1, [r3, #4]!
  404a0e:	f842 1f04 	str.w	r1, [r2, #4]!
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
  404a12:	42ab      	cmp	r3, r5
  404a14:	d1f9      	bne.n	404a0a <flash_write+0x92>
		if (ul_erase_flag) {
  404a16:	9b03      	ldr	r3, [sp, #12]
  404a18:	2b00      	cmp	r3, #0
  404a1a:	d0c0      	beq.n	40499e <flash_write+0x26>
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
  404a1c:	9a01      	ldr	r2, [sp, #4]
  404a1e:	2103      	movs	r1, #3
  404a20:	4804      	ldr	r0, [pc, #16]	; (404a34 <flash_write+0xbc>)
  404a22:	4b05      	ldr	r3, [pc, #20]	; (404a38 <flash_write+0xc0>)
  404a24:	4798      	blx	r3
  404a26:	e7bf      	b.n	4049a8 <flash_write+0x30>
#if SAM3S || SAM3N || SAM3XA || SAM3U
	/* According to the errata, restore the wait state value. */
	efc_set_wait_state(p_efc, ul_fws_temp);
#endif

	return FLASH_RC_OK;
  404a28:	4658      	mov	r0, fp
}
  404a2a:	b005      	add	sp, #20
  404a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return FLASH_RC_OK;
  404a30:	4610      	mov	r0, r2
  404a32:	e7fa      	b.n	404a2a <flash_write+0xb2>
  404a34:	400e0a00 	.word	0x400e0a00
  404a38:	004048b5 	.word	0x004048b5
  404a3c:	0040b53d 	.word	0x0040b53d
  404a40:	20000bec 	.word	0x20000bec

00404a44 <flash_lock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_lock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
  404a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
  404a48:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
  404a4c:	f020 001f 	bic.w	r0, r0, #31
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
  404a50:	f421 51ff 	bic.w	r1, r1, #8160	; 0x1fe0
  404a54:	f021 011f 	bic.w	r1, r1, #31
  404a58:	f501 54ff 	add.w	r4, r1, #8160	; 0x1fe0
  404a5c:	341f      	adds	r4, #31
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual lock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);

	if (pul_actual_start != NULL) {
  404a5e:	b102      	cbz	r2, 404a62 <flash_lock+0x1e>
		*pul_actual_start = ul_actual_start;
  404a60:	6010      	str	r0, [r2, #0]
	}

	if (pul_actual_end != NULL) {
  404a62:	b103      	cbz	r3, 404a66 <flash_lock+0x22>
		*pul_actual_end = ul_actual_end;
  404a64:	601c      	str	r4, [r3, #0]
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
  404a66:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
  404a6a:	0a64      	lsrs	r4, r4, #9
  404a6c:	b2a4      	uxth	r4, r4
  404a6e:	4d0c      	ldr	r5, [pc, #48]	; (404aa0 <flash_lock+0x5c>)
  404a70:	440d      	add	r5, r1
  404a72:	f3c5 254f 	ubfx	r5, r5, #9, #16
	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
	translate_address(0, ul_actual_end, &us_end_page, 0);

	/* Lock all pages */
	while (us_start_page < us_end_page) {
  404a76:	42a5      	cmp	r5, r4
  404a78:	d910      	bls.n	404a9c <flash_lock+0x58>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_SLB, us_start_page);
  404a7a:	f8df 802c 	ldr.w	r8, [pc, #44]	; 404aa8 <flash_lock+0x64>
  404a7e:	2708      	movs	r7, #8
  404a80:	4e08      	ldr	r6, [pc, #32]	; (404aa4 <flash_lock+0x60>)
  404a82:	4622      	mov	r2, r4
  404a84:	4639      	mov	r1, r7
  404a86:	4640      	mov	r0, r8
  404a88:	47b0      	blx	r6

		if (ul_error) {
  404a8a:	4603      	mov	r3, r0
  404a8c:	b918      	cbnz	r0, 404a96 <flash_lock+0x52>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
  404a8e:	3410      	adds	r4, #16
  404a90:	b2a4      	uxth	r4, r4
	while (us_start_page < us_end_page) {
  404a92:	42ac      	cmp	r4, r5
  404a94:	d3f5      	bcc.n	404a82 <flash_lock+0x3e>
	}

	return FLASH_RC_OK;
}
  404a96:	4618      	mov	r0, r3
  404a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return FLASH_RC_OK;
  404a9c:	2300      	movs	r3, #0
  404a9e:	e7fa      	b.n	404a96 <flash_lock+0x52>
  404aa0:	ffc01fff 	.word	0xffc01fff
  404aa4:	004048b5 	.word	0x004048b5
  404aa8:	400e0a00 	.word	0x400e0a00

00404aac <flash_unlock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_unlock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
  404aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
  404ab0:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
  404ab4:	f020 001f 	bic.w	r0, r0, #31
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
  404ab8:	f421 51ff 	bic.w	r1, r1, #8160	; 0x1fe0
  404abc:	f021 011f 	bic.w	r1, r1, #31
  404ac0:	f501 54ff 	add.w	r4, r1, #8160	; 0x1fe0
  404ac4:	341f      	adds	r4, #31
	uint16_t us_num_pages_in_region =
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual unlock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
	if (pul_actual_start != NULL) {
  404ac6:	b102      	cbz	r2, 404aca <flash_unlock+0x1e>
		*pul_actual_start = ul_actual_start;
  404ac8:	6010      	str	r0, [r2, #0]
	}
	if (pul_actual_end != NULL) {
  404aca:	b103      	cbz	r3, 404ace <flash_unlock+0x22>
		*pul_actual_end = ul_actual_end;
  404acc:	601c      	str	r4, [r3, #0]
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
  404ace:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
  404ad2:	0a64      	lsrs	r4, r4, #9
  404ad4:	b2a4      	uxth	r4, r4
  404ad6:	4d0c      	ldr	r5, [pc, #48]	; (404b08 <flash_unlock+0x5c>)
  404ad8:	440d      	add	r5, r1
  404ada:	f3c5 254f 	ubfx	r5, r5, #9, #16
	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
	translate_address(0, ul_actual_end, &us_end_page, 0);

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
  404ade:	42a5      	cmp	r5, r4
  404ae0:	d910      	bls.n	404b04 <flash_unlock+0x58>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_CLB,
  404ae2:	f8df 802c 	ldr.w	r8, [pc, #44]	; 404b10 <flash_unlock+0x64>
  404ae6:	2709      	movs	r7, #9
  404ae8:	4e08      	ldr	r6, [pc, #32]	; (404b0c <flash_unlock+0x60>)
  404aea:	4622      	mov	r2, r4
  404aec:	4639      	mov	r1, r7
  404aee:	4640      	mov	r0, r8
  404af0:	47b0      	blx	r6
				us_start_page);
		if (ul_error) {
  404af2:	4603      	mov	r3, r0
  404af4:	b918      	cbnz	r0, 404afe <flash_unlock+0x52>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
  404af6:	3410      	adds	r4, #16
  404af8:	b2a4      	uxth	r4, r4
	while (us_start_page < us_end_page) {
  404afa:	42ac      	cmp	r4, r5
  404afc:	d3f5      	bcc.n	404aea <flash_unlock+0x3e>
	}

	return FLASH_RC_OK;
}
  404afe:	4618      	mov	r0, r3
  404b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return FLASH_RC_OK;
  404b04:	2300      	movs	r3, #0
  404b06:	e7fa      	b.n	404afe <flash_unlock+0x52>
  404b08:	ffc01fff 	.word	0xffc01fff
  404b0c:	004048b5 	.word	0x004048b5
  404b10:	400e0a00 	.word	0x400e0a00

00404b14 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
  404b14:	b570      	push	{r4, r5, r6, lr}
  404b16:	b086      	sub	sp, #24
  404b18:	4604      	mov	r4, r0
  404b1a:	460e      	mov	r6, r1
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
  404b1c:	2304      	movs	r3, #4
  404b1e:	9300      	str	r3, [sp, #0]
  404b20:	ab02      	add	r3, sp, #8
  404b22:	220f      	movs	r2, #15
  404b24:	210e      	movs	r1, #14
  404b26:	480d      	ldr	r0, [pc, #52]	; (404b5c <flash_read_unique_id+0x48>)
  404b28:	4d0d      	ldr	r5, [pc, #52]	; (404b60 <flash_read_unique_id+0x4c>)
  404b2a:	47a8      	blx	r5
  404b2c:	b118      	cbz	r0, 404b36 <flash_read_unique_id+0x22>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
  404b2e:	2510      	movs	r5, #16
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
		pul_data[ul_idx] = uid_buf[ul_idx];
	}

	return FLASH_RC_OK;
}
  404b30:	4628      	mov	r0, r5
  404b32:	b006      	add	sp, #24
  404b34:	bd70      	pop	{r4, r5, r6, pc}
  404b36:	4605      	mov	r5, r0
  404b38:	2e04      	cmp	r6, #4
  404b3a:	bf28      	it	cs
  404b3c:	2604      	movcs	r6, #4
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
  404b3e:	b156      	cbz	r6, 404b56 <flash_read_unique_id+0x42>
  404b40:	aa02      	add	r2, sp, #8
  404b42:	4623      	mov	r3, r4
  404b44:	eb04 0186 	add.w	r1, r4, r6, lsl #2
		pul_data[ul_idx] = uid_buf[ul_idx];
  404b48:	f852 0b04 	ldr.w	r0, [r2], #4
  404b4c:	f843 0b04 	str.w	r0, [r3], #4
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
  404b50:	428b      	cmp	r3, r1
  404b52:	d1f9      	bne.n	404b48 <flash_read_unique_id+0x34>
  404b54:	e7ec      	b.n	404b30 <flash_read_unique_id+0x1c>
	return FLASH_RC_OK;
  404b56:	4635      	mov	r5, r6
  404b58:	e7ea      	b.n	404b30 <flash_read_unique_id+0x1c>
  404b5a:	bf00      	nop
  404b5c:	400e0a00 	.word	0x400e0a00
  404b60:	20000001 	.word	0x20000001

00404b64 <decode_incoming_comms_packet>:
/// @brief Decode incoming message from SCI.
///
/// @param[in] msp_ptr Pointer to incoming message
///
void decode_incoming_comms_packet( msg_t * msg_ptr )
{
  404b64:	b508      	push	{r3, lr}

	if (msg_ptr->packet_in[msg_h_des_id] == SETTINGS_DSP_ID)
  404b66:	7bc3      	ldrb	r3, [r0, #15]
  404b68:	2b33      	cmp	r3, #51	; 0x33
  404b6a:	f000 80ac 	beq.w	404cc6 <decode_incoming_comms_packet+0x162>
		comm_bypass_msg( UART_DSP , msg_ptr );

	else if ( (msg_ptr->packet_in[msg_h_des_id] == SETTINGS_RPI_ID) || (msg_ptr->packet_in[msg_h_des_id] == SETTINGS_OTHERS_ID) )
  404b6e:	2baa      	cmp	r3, #170	; 0xaa
  404b70:	f000 80ae 	beq.w	404cd0 <decode_incoming_comms_packet+0x16c>
  404b74:	2bee      	cmp	r3, #238	; 0xee
  404b76:	f000 80ab 	beq.w	404cd0 <decode_incoming_comms_packet+0x16c>
		comm_bypass_msg( UART_RPI , msg_ptr );
	else
		switch (msg_ptr->packet_in[msg_h_msg_id])
  404b7a:	7c03      	ldrb	r3, [r0, #16]
  404b7c:	3b02      	subs	r3, #2
  404b7e:	2b9e      	cmp	r3, #158	; 0x9e
  404b80:	f200 810e 	bhi.w	404da0 <decode_incoming_comms_packet+0x23c>
  404b84:	e8df f013 	tbh	[pc, r3, lsl #1]
  404b88:	010c00a9 	.word	0x010c00a9
  404b8c:	010c00ac 	.word	0x010c00ac
  404b90:	010c00af 	.word	0x010c00af
  404b94:	010c00b2 	.word	0x010c00b2
  404b98:	010c010c 	.word	0x010c010c
  404b9c:	010c010c 	.word	0x010c010c
  404ba0:	010c010c 	.word	0x010c010c
  404ba4:	00e8010c 	.word	0x00e8010c
  404ba8:	010c010c 	.word	0x010c010c
  404bac:	00eb010c 	.word	0x00eb010c
  404bb0:	010c010c 	.word	0x010c010c
  404bb4:	010c010c 	.word	0x010c010c
  404bb8:	010c010c 	.word	0x010c010c
  404bbc:	010c010c 	.word	0x010c010c
  404bc0:	010c010c 	.word	0x010c010c
  404bc4:	010c00b5 	.word	0x010c00b5
  404bc8:	010c00b8 	.word	0x010c00b8
  404bcc:	010c00bb 	.word	0x010c00bb
  404bd0:	010c00be 	.word	0x010c00be
  404bd4:	010c00c1 	.word	0x010c00c1
  404bd8:	010c00c4 	.word	0x010c00c4
  404bdc:	010c010c 	.word	0x010c010c
  404be0:	010c010c 	.word	0x010c010c
  404be4:	00f1010c 	.word	0x00f1010c
  404be8:	010c010c 	.word	0x010c010c
  404bec:	010c010c 	.word	0x010c010c
  404bf0:	00f4010c 	.word	0x00f4010c
  404bf4:	010c010c 	.word	0x010c010c
  404bf8:	010c010c 	.word	0x010c010c
  404bfc:	010c010c 	.word	0x010c010c
  404c00:	010c010c 	.word	0x010c010c
  404c04:	010c00ca 	.word	0x010c00ca
  404c08:	010c00c7 	.word	0x010c00c7
  404c0c:	010c010c 	.word	0x010c010c
  404c10:	010c010c 	.word	0x010c010c
  404c14:	010c010c 	.word	0x010c010c
  404c18:	010c010c 	.word	0x010c010c
  404c1c:	010c010c 	.word	0x010c010c
  404c20:	010c010c 	.word	0x010c010c
  404c24:	00ee010c 	.word	0x00ee010c
  404c28:	010c010c 	.word	0x010c010c
  404c2c:	010c010c 	.word	0x010c010c
  404c30:	010c010c 	.word	0x010c010c
  404c34:	010c010c 	.word	0x010c010c
  404c38:	010c010c 	.word	0x010c010c
  404c3c:	010c010c 	.word	0x010c010c
  404c40:	010c010c 	.word	0x010c010c
  404c44:	010c00cd 	.word	0x010c00cd
  404c48:	010c00d0 	.word	0x010c00d0
  404c4c:	010c00d3 	.word	0x010c00d3
  404c50:	010c00d6 	.word	0x010c00d6
  404c54:	010c00d9 	.word	0x010c00d9
  404c58:	010c00dc 	.word	0x010c00dc
  404c5c:	010c00df 	.word	0x010c00df
  404c60:	010c00e2 	.word	0x010c00e2
  404c64:	00f7010c 	.word	0x00f7010c
  404c68:	00fa010c 	.word	0x00fa010c
  404c6c:	010c010c 	.word	0x010c010c
  404c70:	010c010c 	.word	0x010c010c
  404c74:	00fd010c 	.word	0x00fd010c
  404c78:	0100010c 	.word	0x0100010c
  404c7c:	010c010c 	.word	0x010c010c
  404c80:	010c010c 	.word	0x010c010c
  404c84:	010c0103 	.word	0x010c0103
  404c88:	010c0106 	.word	0x010c0106
  404c8c:	010c0109 	.word	0x010c0109
  404c90:	010c010c 	.word	0x010c010c
  404c94:	010c010c 	.word	0x010c010c
  404c98:	010c010c 	.word	0x010c010c
  404c9c:	010c010c 	.word	0x010c010c
  404ca0:	010c010c 	.word	0x010c010c
  404ca4:	010c010c 	.word	0x010c010c
  404ca8:	010c010c 	.word	0x010c010c
  404cac:	010c010c 	.word	0x010c010c
  404cb0:	010c010c 	.word	0x010c010c
  404cb4:	010c010c 	.word	0x010c010c
  404cb8:	010c010c 	.word	0x010c010c
  404cbc:	010c010c 	.word	0x010c010c
  404cc0:	010c010c 	.word	0x010c010c
  404cc4:	00e5      	.short	0x00e5
		comm_bypass_msg( UART_DSP , msg_ptr );
  404cc6:	4601      	mov	r1, r0
  404cc8:	4837      	ldr	r0, [pc, #220]	; (404da8 <decode_incoming_comms_packet+0x244>)
  404cca:	4b38      	ldr	r3, [pc, #224]	; (404dac <decode_incoming_comms_packet+0x248>)
  404ccc:	4798      	blx	r3
  404cce:	bd08      	pop	{r3, pc}
		comm_bypass_msg( UART_RPI , msg_ptr );
  404cd0:	4601      	mov	r1, r0
  404cd2:	4837      	ldr	r0, [pc, #220]	; (404db0 <decode_incoming_comms_packet+0x24c>)
  404cd4:	4b35      	ldr	r3, [pc, #212]	; (404dac <decode_incoming_comms_packet+0x248>)
  404cd6:	4798      	blx	r3
  404cd8:	bd08      	pop	{r3, pc}
		{
			// FW
			case API_FW_ARM_VERSION_REQ:                    API_FW_ARM_version_req( msg_ptr );                    break;
  404cda:	4b36      	ldr	r3, [pc, #216]	; (404db4 <decode_incoming_comms_packet+0x250>)
  404cdc:	4798      	blx	r3
  404cde:	bd08      	pop	{r3, pc}
			case API_FW_ARM_ECHO_REQ:                       API_FW_ARM_echo_req( msg_ptr );                       break;
  404ce0:	4b35      	ldr	r3, [pc, #212]	; (404db8 <decode_incoming_comms_packet+0x254>)
  404ce2:	4798      	blx	r3
  404ce4:	bd08      	pop	{r3, pc}
			case API_FW_ARM_UNIQUE_ID_REQ:                  API_FW_ARM_unique_id_req( msg_ptr );                  break;
  404ce6:	4b35      	ldr	r3, [pc, #212]	; (404dbc <decode_incoming_comms_packet+0x258>)
  404ce8:	4798      	blx	r3
  404cea:	bd08      	pop	{r3, pc}
			case API_FW_ARM_RESET_ID_REQ:                   API_FW_ARM_reset_req( msg_ptr );                      break;
  404cec:	4b34      	ldr	r3, [pc, #208]	; (404dc0 <decode_incoming_comms_packet+0x25c>)
  404cee:	4798      	blx	r3
  404cf0:	bd08      	pop	{r3, pc}
			
			// Unit configuration and calibration
			case API_UNIT_CONFIG_ARM_UPDATE_REQ:            API_UNIT_CONFIG_ARM_update_req( msg_ptr );            break;
  404cf2:	4b34      	ldr	r3, [pc, #208]	; (404dc4 <decode_incoming_comms_packet+0x260>)
  404cf4:	4798      	blx	r3
  404cf6:	bd08      	pop	{r3, pc}
			case API_UNIT_CONFIG_ARM_SEND_REQ:              API_UNIT_CONFIG_ARM_send_req( msg_ptr );              break;
  404cf8:	4b33      	ldr	r3, [pc, #204]	; (404dc8 <decode_incoming_comms_packet+0x264>)
  404cfa:	4798      	blx	r3
  404cfc:	bd08      	pop	{r3, pc}
			case API_UNIT_CONFIG_ARM_SET_DEFAULT_REQ:       API_UNIT_CONFIG_ARM_set_default_req( msg_ptr );       break;
  404cfe:	4b33      	ldr	r3, [pc, #204]	; (404dcc <decode_incoming_comms_packet+0x268>)
  404d00:	4798      	blx	r3
  404d02:	bd08      	pop	{r3, pc}
			case API_UNIT_CALIBRATION_ARM_UPDATE_REQ:       API_UNIT_CALIBRATION_ARM_update_req( msg_ptr );       break;
  404d04:	4b32      	ldr	r3, [pc, #200]	; (404dd0 <decode_incoming_comms_packet+0x26c>)
  404d06:	4798      	blx	r3
  404d08:	bd08      	pop	{r3, pc}
			case API_UNIT_CALIBRATION_ARM_SEND_REQ:         API_UNIT_CALIBRATION_ARM_send_req( msg_ptr );         break;
  404d0a:	4b32      	ldr	r3, [pc, #200]	; (404dd4 <decode_incoming_comms_packet+0x270>)
  404d0c:	4798      	blx	r3
  404d0e:	bd08      	pop	{r3, pc}
			case API_UNIT_CALIBRATION_ARM_SET_DEFAULT_REQ:  API_UNIT_CALIBRATION_ARM_set_default_req( msg_ptr );  break;
  404d10:	4b31      	ldr	r3, [pc, #196]	; (404dd8 <decode_incoming_comms_packet+0x274>)
  404d12:	4798      	blx	r3
  404d14:	bd08      	pop	{r3, pc}

			// Rel Time Clock
			case API_RTC_ARM_SEND_REQ:                      API_RTC_ARM_send_req( msg_ptr );                      break;
  404d16:	4b31      	ldr	r3, [pc, #196]	; (404ddc <decode_incoming_comms_packet+0x278>)
  404d18:	4798      	blx	r3
  404d1a:	bd08      	pop	{r3, pc}
			case API_RTC_ARM_UPDATE_REQ:                    API_RTC_ARM_update_req( msg_ptr );                    break;
  404d1c:	4b30      	ldr	r3, [pc, #192]	; (404de0 <decode_incoming_comms_packet+0x27c>)
  404d1e:	4798      	blx	r3
  404d20:	bd08      	pop	{r3, pc}

			// SD-Card
			case API_SDCARD_DIR_OPEN_REQ:                   API_SDCARD_dir_open_req( msg_ptr );                   break;
  404d22:	4b30      	ldr	r3, [pc, #192]	; (404de4 <decode_incoming_comms_packet+0x280>)
  404d24:	4798      	blx	r3
  404d26:	bd08      	pop	{r3, pc}
			case API_SDCARD_DIR_ITEM_NEXT_REQ:              API_SDCARD_item_next_req( msg_ptr );                  break;
  404d28:	4b2f      	ldr	r3, [pc, #188]	; (404de8 <decode_incoming_comms_packet+0x284>)
  404d2a:	4798      	blx	r3
  404d2c:	bd08      	pop	{r3, pc}
			case API_SDCARD_DIR_ITEM_NAME_REQ:              API_SDCARD_item_name_req( msg_ptr );                  break;
  404d2e:	4b2f      	ldr	r3, [pc, #188]	; (404dec <decode_incoming_comms_packet+0x288>)
  404d30:	4798      	blx	r3
  404d32:	bd08      	pop	{r3, pc}
			case API_SDCARD_FILE_OPEN_REQ:                  API_SDCARD_file_open_req( msg_ptr );                  break;
  404d34:	4b2e      	ldr	r3, [pc, #184]	; (404df0 <decode_incoming_comms_packet+0x28c>)
  404d36:	4798      	blx	r3
  404d38:	bd08      	pop	{r3, pc}
			case API_SDCARD_FILE_READ_REQ:                  API_SDCARD_file_read_req( msg_ptr );                  break;
  404d3a:	4b2e      	ldr	r3, [pc, #184]	; (404df4 <decode_incoming_comms_packet+0x290>)
  404d3c:	4798      	blx	r3
  404d3e:	bd08      	pop	{r3, pc}
			case API_SDCARD_FILE_CLOSE_REQ:                 API_SDCARD_file_close_req( msg_ptr );                 break;
  404d40:	4b2d      	ldr	r3, [pc, #180]	; (404df8 <decode_incoming_comms_packet+0x294>)
  404d42:	4798      	blx	r3
  404d44:	bd08      	pop	{r3, pc}
			case API_SDCARD_FILE_SIZE_REQ:                  API_SDCARD_file_size_req( msg_ptr );                  break;
  404d46:	4b2d      	ldr	r3, [pc, #180]	; (404dfc <decode_incoming_comms_packet+0x298>)
  404d48:	4798      	blx	r3
  404d4a:	bd08      	pop	{r3, pc}
			case API_SDCARD_FILE_AND_DIR_REMOVE_REQ:        API_SDCARD_file_and_dir_remove_req( msg_ptr );        break;
  404d4c:	4b2c      	ldr	r3, [pc, #176]	; (404e00 <decode_incoming_comms_packet+0x29c>)
  404d4e:	4798      	blx	r3
  404d50:	bd08      	pop	{r3, pc}
			case API_SDCARD_GET_MBYTES_REQ:                 API_SDCARD_get_mbytes_req( msg_ptr );	              break;
  404d52:	4b2c      	ldr	r3, [pc, #176]	; (404e04 <decode_incoming_comms_packet+0x2a0>)
  404d54:	4798      	blx	r3
  404d56:	bd08      	pop	{r3, pc}

			// DSP Responses
			case API_FW_DSP_VERSION_RES:	                API_FW_DSP_version_res( msg_ptr );                    break;
  404d58:	4b2b      	ldr	r3, [pc, #172]	; (404e08 <decode_incoming_comms_packet+0x2a4>)
  404d5a:	4798      	blx	r3
  404d5c:	bd08      	pop	{r3, pc}
			case API_FW_DSP_SEND_COMM_FLAG_RES:             API_FW_DSP_send_comm_flag_res( msg_ptr );             break;
  404d5e:	4b2b      	ldr	r3, [pc, #172]	; (404e0c <decode_incoming_comms_packet+0x2a8>)
  404d60:	4798      	blx	r3
  404d62:	bd08      	pop	{r3, pc}
			case API_RTC_DSP_UPDATE_RES:                    API_RTC_DSP_update_res( msg_ptr );                    break;
  404d64:	4b2a      	ldr	r3, [pc, #168]	; (404e10 <decode_incoming_comms_packet+0x2ac>)
  404d66:	4798      	blx	r3
  404d68:	bd08      	pop	{r3, pc}
			case API_UNIT_CONFIG_DSP_UPDATE_RES:            API_UNIT_CONFIG_DSP_update_res( msg_ptr );            break;
  404d6a:	4b2a      	ldr	r3, [pc, #168]	; (404e14 <decode_incoming_comms_packet+0x2b0>)
  404d6c:	4798      	blx	r3
  404d6e:	bd08      	pop	{r3, pc}
			case API_UNIT_CALIBRATION_DSP_UPDATE_RES:       API_UNIT_CALIBRATION_DSP_update_res( msg_ptr );       break;
  404d70:	4b29      	ldr	r3, [pc, #164]	; (404e18 <decode_incoming_comms_packet+0x2b4>)
  404d72:	4798      	blx	r3
  404d74:	bd08      	pop	{r3, pc}
			case API_CTRL_DSP_TREND_150CYCLES_RES:          API_CTRL_DSP_trend_150cycles_res( msg_ptr );          break;
  404d76:	4b29      	ldr	r3, [pc, #164]	; (404e1c <decode_incoming_comms_packet+0x2b8>)
  404d78:	4798      	blx	r3
  404d7a:	bd08      	pop	{r3, pc}
			case API_CTRL_DSP_TREND_5MINUTES_RES:           API_CTRL_DSP_trend_5minutes_res( msg_ptr );           break;
  404d7c:	4b28      	ldr	r3, [pc, #160]	; (404e20 <decode_incoming_comms_packet+0x2bc>)
  404d7e:	4798      	blx	r3
  404d80:	bd08      	pop	{r3, pc}
			case API_CTRL_DSP_EVENT_BUFFER_RES:             API_CTRL_DSP_event_buffer_res( msg_ptr );             break;
  404d82:	4b28      	ldr	r3, [pc, #160]	; (404e24 <decode_incoming_comms_packet+0x2c0>)
  404d84:	4798      	blx	r3
  404d86:	bd08      	pop	{r3, pc}
			case API_CTRL_DSP_EVENT_DET_RES:                API_CTRL_DSP_event_det_res( msg_ptr );                break;
  404d88:	4b27      	ldr	r3, [pc, #156]	; (404e28 <decode_incoming_comms_packet+0x2c4>)
  404d8a:	4798      	blx	r3
  404d8c:	bd08      	pop	{r3, pc}
			
			// ARM - Bootloader
			case API_BOOT_ARM_START_UPLOAD_REQ:             API_BOOT_ARM_start_upload_req( msg_ptr );             break;
  404d8e:	4b27      	ldr	r3, [pc, #156]	; (404e2c <decode_incoming_comms_packet+0x2c8>)
  404d90:	4798      	blx	r3
  404d92:	bd08      	pop	{r3, pc}
			case API_BOOT_ARM_UPLOAD_BLOCK_REQ:             API_BOOT_ARM_upload_block_req( msg_ptr );             break;
  404d94:	4b26      	ldr	r3, [pc, #152]	; (404e30 <decode_incoming_comms_packet+0x2cc>)
  404d96:	4798      	blx	r3
  404d98:	bd08      	pop	{r3, pc}
			case API_BOOT_ARM_INSTALL_IMAGE_REQ:            API_BOOT_ARM_install_image_req( msg_ptr );            break;
  404d9a:	4b26      	ldr	r3, [pc, #152]	; (404e34 <decode_incoming_comms_packet+0x2d0>)
  404d9c:	4798      	blx	r3
  404d9e:	bd08      	pop	{r3, pc}
			
			// Unknown command
			default:                                        API_FW_ARM_unknow_msg_id( msg_ptr );	              break;
  404da0:	4b25      	ldr	r3, [pc, #148]	; (404e38 <decode_incoming_comms_packet+0x2d4>)
  404da2:	4798      	blx	r3
  404da4:	bd08      	pop	{r3, pc}
  404da6:	bf00      	nop
  404da8:	400e0600 	.word	0x400e0600
  404dac:	00405059 	.word	0x00405059
  404db0:	400e0800 	.word	0x400e0800
  404db4:	00402599 	.word	0x00402599
  404db8:	00402631 	.word	0x00402631
  404dbc:	00402655 	.word	0x00402655
  404dc0:	00402679 	.word	0x00402679
  404dc4:	00402aa5 	.word	0x00402aa5
  404dc8:	00402b25 	.word	0x00402b25
  404dcc:	00402b49 	.word	0x00402b49
  404dd0:	00402bb1 	.word	0x00402bb1
  404dd4:	00402c31 	.word	0x00402c31
  404dd8:	00402c55 	.word	0x00402c55
  404ddc:	004026cd 	.word	0x004026cd
  404de0:	00402729 	.word	0x00402729
  404de4:	004027b1 	.word	0x004027b1
  404de8:	00402819 	.word	0x00402819
  404dec:	00402895 	.word	0x00402895
  404df0:	00402901 	.word	0x00402901
  404df4:	0040296d 	.word	0x0040296d
  404df8:	004029f1 	.word	0x004029f1
  404dfc:	004028d5 	.word	0x004028d5
  404e00:	00402a3d 	.word	0x00402a3d
  404e04:	00402a6d 	.word	0x00402a6d
  404e08:	004021ed 	.word	0x004021ed
  404e0c:	0040222d 	.word	0x0040222d
  404e10:	004022a1 	.word	0x004022a1
  404e14:	004022dd 	.word	0x004022dd
  404e18:	00402319 	.word	0x00402319
  404e1c:	00402355 	.word	0x00402355
  404e20:	004023f5 	.word	0x004023f5
  404e24:	00402495 	.word	0x00402495
  404e28:	00402549 	.word	0x00402549
  404e2c:	00402139 	.word	0x00402139
  404e30:	00402179 	.word	0x00402179
  404e34:	004021ad 	.word	0x004021ad
  404e38:	004026a9 	.word	0x004026a9

00404e3c <comm_preprocess_RX_msg>:

/// @brief Generic UART pre-process incoming message
/// @details This functions is called by Rx interrupt when a byte is received.
///          Byte is added to buffer and counter of received data is updated.
/// @param[in] msg_ptr Pointer to msg_t
void comm_preprocess_RX_msg( msg_t * msg_ptr ) {
  404e3c:	b510      	push	{r4, lr}
  404e3e:	4604      	mov	r4, r0

	// Check if a byte was received
	if ( uart_is_rx_ready(msg_ptr->uart_ptr) ) {
  404e40:	6800      	ldr	r0, [r0, #0]
  404e42:	4b08      	ldr	r3, [pc, #32]	; (404e64 <comm_preprocess_RX_msg+0x28>)
  404e44:	4798      	blx	r3
  404e46:	b900      	cbnz	r0, 404e4a <comm_preprocess_RX_msg+0xe>
  404e48:	bd10      	pop	{r4, pc}

		// save new byte
		uart_read(msg_ptr->uart_ptr, &msg_ptr->packet_in[msg_ptr->rx_counter] );
  404e4a:	7921      	ldrb	r1, [r4, #4]
  404e4c:	310c      	adds	r1, #12
  404e4e:	4421      	add	r1, r4
  404e50:	6820      	ldr	r0, [r4, #0]
  404e52:	4b05      	ldr	r3, [pc, #20]	; (404e68 <comm_preprocess_RX_msg+0x2c>)
  404e54:	4798      	blx	r3

		// increment the rx counter and
		msg_ptr->rx_counter++;
  404e56:	7923      	ldrb	r3, [r4, #4]
  404e58:	3301      	adds	r3, #1
  404e5a:	7123      	strb	r3, [r4, #4]

		// reset timeout counter
		msg_ptr->timeout_counter = 0;
  404e5c:	2300      	movs	r3, #0
  404e5e:	60a3      	str	r3, [r4, #8]

	}

}
  404e60:	e7f2      	b.n	404e48 <comm_preprocess_RX_msg+0xc>
  404e62:	bf00      	nop
  404e64:	004071af 	.word	0x004071af
  404e68:	004071c7 	.word	0x004071c7

00404e6c <comm_process_RX_msg>:


/// @brief Generic UART process incoming message
/// @details This functions is called in background and check if a message is complete.
/// @param[in] msg_ptr Pointer to UART structure
void comm_process_RX_msg( msg_t * msg_ptr ) {
  404e6c:	b510      	push	{r4, lr}
  404e6e:	4604      	mov	r4, r0

	// If error occurs, start over.
    if ( uart_get_status(msg_ptr->uart_ptr) == (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE) ) {
  404e70:	6800      	ldr	r0, [r0, #0]
  404e72:	4b2e      	ldr	r3, [pc, #184]	; (404f2c <comm_process_RX_msg+0xc0>)
  404e74:	4798      	blx	r3
  404e76:	28e0      	cmp	r0, #224	; 0xe0
  404e78:	d01a      	beq.n	404eb0 <comm_process_RX_msg+0x44>
																// TODO: this is e problem for other uC.

    }

    // Increment timeout counter
    msg_ptr->timeout_counter++;
  404e7a:	68a3      	ldr	r3, [r4, #8]
  404e7c:	3301      	adds	r3, #1
  404e7e:	60a3      	str	r3, [r4, #8]

    // Reset counters if timeout occurs
    if (msg_ptr->timeout_counter == MSG_TIMEOUT) {
  404e80:	f240 72ff 	movw	r2, #2047	; 0x7ff
  404e84:	4293      	cmp	r3, r2
  404e86:	d020      	beq.n	404eca <comm_process_RX_msg+0x5e>
    	msg_ptr->timeout_counter = 0;
    	msg_ptr->rx_counter = 0;
    }

   	// Check proper start byte
   	if (msg_ptr->rx_counter > 0) {
  404e88:	7923      	ldrb	r3, [r4, #4]
  404e8a:	b123      	cbz	r3, 404e96 <comm_process_RX_msg+0x2a>
   		if (msg_ptr->packet_in[msg_h_start] != MSG_START_BYTE)
  404e8c:	7b23      	ldrb	r3, [r4, #12]
  404e8e:	2b3c      	cmp	r3, #60	; 0x3c
  404e90:	d02b      	beq.n	404eea <comm_process_RX_msg+0x7e>
   			msg_ptr->rx_counter = 0; // reset buffer
  404e92:	2300      	movs	r3, #0
  404e94:	7123      	strb	r3, [r4, #4]
               (msg_ptr->packet_in[msg_h_src_id] == SETTINGS_RPI_ID) ))
       		msg_ptr->rx_counter = 0; // reset buffer
   	}

   	// Check proper destination id
   	if (msg_ptr->rx_counter > 3) {
  404e96:	7923      	ldrb	r3, [r4, #4]
  404e98:	2b03      	cmp	r3, #3
  404e9a:	d92e      	bls.n	404efa <comm_process_RX_msg+0x8e>
		    //	{
			//		#include "../apps/system.h"
			//		led_green_on();
		   	//	}		   
       	if (!( (msg_ptr->packet_in[msg_h_des_id] == SETTINGS_ARM_ID) ||
  404e9c:	7be3      	ldrb	r3, [r4, #15]
  404e9e:	2b77      	cmp	r3, #119	; 0x77
  404ea0:	d02b      	beq.n	404efa <comm_process_RX_msg+0x8e>
  404ea2:	2baa      	cmp	r3, #170	; 0xaa
  404ea4:	d029      	beq.n	404efa <comm_process_RX_msg+0x8e>
  404ea6:	2b33      	cmp	r3, #51	; 0x33
  404ea8:	d027      	beq.n	404efa <comm_process_RX_msg+0x8e>
       		   (msg_ptr->packet_in[msg_h_des_id] == SETTINGS_RPI_ID) ||
			   (msg_ptr->packet_in[msg_h_des_id] == SETTINGS_DSP_ID)))
       		msg_ptr->rx_counter = 0; // reset buffer
  404eaa:	2300      	movs	r3, #0
  404eac:	7123      	strb	r3, [r4, #4]
  404eae:	bd10      	pop	{r4, pc}
    	memset( msg_ptr->packet_in , 0 , MSG_LENGHT_MAX_SIZE ); // Reset buffer
  404eb0:	2288      	movs	r2, #136	; 0x88
  404eb2:	2100      	movs	r1, #0
  404eb4:	f104 000c 	add.w	r0, r4, #12
  404eb8:	4b1d      	ldr	r3, [pc, #116]	; (404f30 <comm_process_RX_msg+0xc4>)
  404eba:	4798      	blx	r3
        msg_ptr->rx_counter = 0;                                // Reset rx index
  404ebc:	2300      	movs	r3, #0
  404ebe:	7123      	strb	r3, [r4, #4]
        msg_ptr->timeout_counter = 0;                           // Reset timeout counter
  404ec0:	60a3      	str	r3, [r4, #8]
        uart_reset_status(msg_ptr->uart_ptr);					// Clear error since it will block receiving
  404ec2:	6820      	ldr	r0, [r4, #0]
  404ec4:	4b1b      	ldr	r3, [pc, #108]	; (404f34 <comm_process_RX_msg+0xc8>)
  404ec6:	4798      	blx	r3
  404ec8:	e7d7      	b.n	404e7a <comm_process_RX_msg+0xe>
    	msg_ptr->timeout_counter = 0;
  404eca:	2300      	movs	r3, #0
  404ecc:	60a3      	str	r3, [r4, #8]
    	msg_ptr->rx_counter = 0;
  404ece:	7123      	strb	r3, [r4, #4]
   	if (msg_ptr->rx_counter > 2) {
  404ed0:	7923      	ldrb	r3, [r4, #4]
  404ed2:	2b02      	cmp	r3, #2
  404ed4:	d9df      	bls.n	404e96 <comm_process_RX_msg+0x2a>
       	if (!( (msg_ptr->packet_in[msg_h_src_id] == SETTINGS_OTHERS_ID) ||
  404ed6:	7ba3      	ldrb	r3, [r4, #14]
  404ed8:	2bee      	cmp	r3, #238	; 0xee
  404eda:	d0dc      	beq.n	404e96 <comm_process_RX_msg+0x2a>
  404edc:	2b33      	cmp	r3, #51	; 0x33
  404ede:	d0da      	beq.n	404e96 <comm_process_RX_msg+0x2a>
  404ee0:	2baa      	cmp	r3, #170	; 0xaa
  404ee2:	d0d8      	beq.n	404e96 <comm_process_RX_msg+0x2a>
       		msg_ptr->rx_counter = 0; // reset buffer
  404ee4:	2300      	movs	r3, #0
  404ee6:	7123      	strb	r3, [r4, #4]
  404ee8:	bd10      	pop	{r4, pc}
   	if (msg_ptr->rx_counter > 1) {
  404eea:	7923      	ldrb	r3, [r4, #4]
  404eec:	2b01      	cmp	r3, #1
  404eee:	d9ef      	bls.n	404ed0 <comm_process_RX_msg+0x64>
       	if (!(msg_ptr->packet_in[msg_h_proj_id] == SETTINGS_PROJECT_ID) )
  404ef0:	7b63      	ldrb	r3, [r4, #13]
  404ef2:	2b04      	cmp	r3, #4
  404ef4:	d0ec      	beq.n	404ed0 <comm_process_RX_msg+0x64>
       		msg_ptr->rx_counter = 0; // reset buffer
  404ef6:	2300      	movs	r3, #0
  404ef8:	7123      	strb	r3, [r4, #4]
   	}

   	// if the packet is complete, check CRC and packet out is not busy, decode message and reset buffer
   	if (  (msg_ptr->rx_counter >= MSG_LENGHT_HEADER) &&
  404efa:	7921      	ldrb	r1, [r4, #4]
  404efc:	2907      	cmp	r1, #7
  404efe:	d903      	bls.n	404f08 <comm_process_RX_msg+0x9c>
   		  ((msg_ptr->packet_in[msg_h_payload_len] + MSG_LENGHT_HEADER) == msg_ptr->rx_counter) &&
  404f00:	7c63      	ldrb	r3, [r4, #17]
  404f02:	3308      	adds	r3, #8
   	if (  (msg_ptr->rx_counter >= MSG_LENGHT_HEADER) &&
  404f04:	428b      	cmp	r3, r1
  404f06:	d000      	beq.n	404f0a <comm_process_RX_msg+0x9e>
  404f08:	bd10      	pop	{r4, pc}
          (!packet_out_busy ) &&
  404f0a:	4b0b      	ldr	r3, [pc, #44]	; (404f38 <comm_process_RX_msg+0xcc>)
   		  ((msg_ptr->packet_in[msg_h_payload_len] + MSG_LENGHT_HEADER) == msg_ptr->rx_counter) &&
  404f0c:	781b      	ldrb	r3, [r3, #0]
  404f0e:	2b00      	cmp	r3, #0
  404f10:	d1fa      	bne.n	404f08 <comm_process_RX_msg+0x9c>
   		  (!calculate_checksum( msg_ptr->packet_in , (uint16_t) msg_ptr->rx_counter)) ) {
  404f12:	f104 000c 	add.w	r0, r4, #12
  404f16:	4b09      	ldr	r3, [pc, #36]	; (404f3c <comm_process_RX_msg+0xd0>)
  404f18:	4798      	blx	r3
          (!packet_out_busy ) &&
  404f1a:	2800      	cmp	r0, #0
  404f1c:	d1f4      	bne.n	404f08 <comm_process_RX_msg+0x9c>
       		decode_incoming_comms_packet( msg_ptr );
  404f1e:	4620      	mov	r0, r4
  404f20:	4b07      	ldr	r3, [pc, #28]	; (404f40 <comm_process_RX_msg+0xd4>)
  404f22:	4798      	blx	r3
       	msg_ptr->rx_counter = 0; // reset buffer
  404f24:	2300      	movs	r3, #0
  404f26:	7123      	strb	r3, [r4, #4]
   	}

}
  404f28:	e7ee      	b.n	404f08 <comm_process_RX_msg+0x9c>
  404f2a:	bf00      	nop
  404f2c:	0040719b 	.word	0x0040719b
  404f30:	0040b671 	.word	0x0040b671
  404f34:	0040719f 	.word	0x0040719f
  404f38:	20000dec 	.word	0x20000dec
  404f3c:	00405201 	.word	0x00405201
  404f40:	00404b65 	.word	0x00404b65

00404f44 <uart_send_packet>:

void uart_send_packet(Uart *uart_ptr, uint8_t *tx_packet, uint16_t tx_len) {
	
	while (tx_len--) {
  404f44:	b1aa      	cbz	r2, 404f72 <uart_send_packet+0x2e>
void uart_send_packet(Uart *uart_ptr, uint8_t *tx_packet, uint16_t tx_len) {
  404f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404f4a:	1e57      	subs	r7, r2, #1
  404f4c:	b2bf      	uxth	r7, r7
  404f4e:	4604      	mov	r4, r0
  404f50:	1e4e      	subs	r6, r1, #1
  404f52:	440f      	add	r7, r1

		// wait for sci FIFO transmit data register to have space
        while ( !uart_is_tx_empty(uart_ptr) );
  404f54:	4d07      	ldr	r5, [pc, #28]	; (404f74 <uart_send_packet+0x30>)

		uart_write( uart_ptr , *tx_packet++ );
  404f56:	f8df 8020 	ldr.w	r8, [pc, #32]	; 404f78 <uart_send_packet+0x34>
        while ( !uart_is_tx_empty(uart_ptr) );
  404f5a:	4620      	mov	r0, r4
  404f5c:	47a8      	blx	r5
  404f5e:	2800      	cmp	r0, #0
  404f60:	d0fb      	beq.n	404f5a <uart_send_packet+0x16>
		uart_write( uart_ptr , *tx_packet++ );
  404f62:	f816 1f01 	ldrb.w	r1, [r6, #1]!
  404f66:	4620      	mov	r0, r4
  404f68:	47c0      	blx	r8
	while (tx_len--) {
  404f6a:	42be      	cmp	r6, r7
  404f6c:	d1f5      	bne.n	404f5a <uart_send_packet+0x16>
  404f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404f72:	4770      	bx	lr
  404f74:	004071a7 	.word	0x004071a7
  404f78:	004071b7 	.word	0x004071b7

00404f7c <comm_init>:
}

/**************************** GLOBAL FUNCTIONS *******************************/

/// @brief Communication initialization routine.
void comm_init(void) {
  404f7c:	b570      	push	{r4, r5, r6, lr}

	// TX buffer
	memset( (void *)&packet_out , 0 , MSG_LENGHT_MAX_SIZE );
  404f7e:	2288      	movs	r2, #136	; 0x88
  404f80:	2100      	movs	r1, #0
  404f82:	480c      	ldr	r0, [pc, #48]	; (404fb4 <comm_init+0x38>)
  404f84:	4c0c      	ldr	r4, [pc, #48]	; (404fb8 <comm_init+0x3c>)
  404f86:	47a0      	blx	r4

	// UART DB15 variable initialization
	memset( (void *)&UART_RPI_msg , 0 , sizeof(UART_RPI_msg) );
  404f88:	4d0c      	ldr	r5, [pc, #48]	; (404fbc <comm_init+0x40>)
  404f8a:	2694      	movs	r6, #148	; 0x94
  404f8c:	4632      	mov	r2, r6
  404f8e:	2100      	movs	r1, #0
  404f90:	4628      	mov	r0, r5
  404f92:	47a0      	blx	r4
	UART_RPI_msg.uart_ptr = UART_RPI;
  404f94:	4b0a      	ldr	r3, [pc, #40]	; (404fc0 <comm_init+0x44>)
  404f96:	602b      	str	r3, [r5, #0]

	// UART DSP variable initialization
	memset( (void *)&UART_DSP_msg , 0 , sizeof(UART_DSP_msg) );
  404f98:	4d0a      	ldr	r5, [pc, #40]	; (404fc4 <comm_init+0x48>)
  404f9a:	4632      	mov	r2, r6
  404f9c:	2100      	movs	r1, #0
  404f9e:	4628      	mov	r0, r5
  404fa0:	47a0      	blx	r4
	UART_DSP_msg.uart_ptr = UART_DSP;
  404fa2:	4b09      	ldr	r3, [pc, #36]	; (404fc8 <comm_init+0x4c>)
  404fa4:	602b      	str	r3, [r5, #0]
	
	// init counters
	comm_TX_counter = 0;
  404fa6:	2300      	movs	r3, #0
  404fa8:	4a08      	ldr	r2, [pc, #32]	; (404fcc <comm_init+0x50>)
  404faa:	8013      	strh	r3, [r2, #0]
	comm_DSP_counter = 0;
  404fac:	4a08      	ldr	r2, [pc, #32]	; (404fd0 <comm_init+0x54>)
  404fae:	8013      	strh	r3, [r2, #0]
  404fb0:	bd70      	pop	{r4, r5, r6, pc}
  404fb2:	bf00      	nop
  404fb4:	20001ef0 	.word	0x20001ef0
  404fb8:	0040b671 	.word	0x0040b671
  404fbc:	20001e58 	.word	0x20001e58
  404fc0:	400e0800 	.word	0x400e0800
  404fc4:	20001f7c 	.word	0x20001f7c
  404fc8:	400e0600 	.word	0x400e0600
  404fcc:	20001f78 	.word	0x20001f78
  404fd0:	20001eec 	.word	0x20001eec

00404fd4 <comm_background>:
/// @details It run several function related to communication:
///          1) Process incoming msg from DSP
///          2) Run the following by priority
///             2.1) Pending communication with DSP
///             2.2) Process incoming msg from RPI
void comm_background(void) {
  404fd4:	b510      	push	{r4, lr}
	// TODO: pass this function to DMA interruption routine
	//comm_preprocess_RX_msg( &UART_DSP_msg );
	//comm_preprocess_RX_msg( &UART_RPI_msg );
	
    // Process message from UART_DSP (run it always)
	comm_process_RX_msg( &UART_DSP_msg );
  404fd6:	4803      	ldr	r0, [pc, #12]	; (404fe4 <comm_background+0x10>)
  404fd8:	4c03      	ldr	r4, [pc, #12]	; (404fe8 <comm_background+0x14>)
  404fda:	47a0      	blx	r4
				API_CTRL_DSP_event_buffer_req();
				gpio_set_pin_low(TP3_GPIO);
			}
			// if nothing to do, process msg from RPI
			else*/
				comm_process_RX_msg( &UART_RPI_msg );
  404fdc:	4803      	ldr	r0, [pc, #12]	; (404fec <comm_background+0x18>)
  404fde:	47a0      	blx	r4
  404fe0:	bd10      	pop	{r4, pc}
  404fe2:	bf00      	nop
  404fe4:	20001f7c 	.word	0x20001f7c
  404fe8:	00404e6d 	.word	0x00404e6d
  404fec:	20001e58 	.word	0x20001e58

00404ff0 <comm_send_msg>:
void comm_send_msg( Uart *uart_ptr ,
		            uint8_t msg_des,
		            uint8_t msg_id ,
		            uint8_t payload_len ,
		            uint8_t * payload_ptr
		            ) {
  404ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404ff4:	4680      	mov	r8, r0
  404ff6:	461d      	mov	r5, r3

	 uint16_t checksum;

	 // set flag of packet out busy
	 packet_out_busy = 1;
  404ff8:	4e12      	ldr	r6, [pc, #72]	; (405044 <comm_send_msg+0x54>)
  404ffa:	2301      	movs	r3, #1
  404ffc:	7033      	strb	r3, [r6, #0]

	 // Fill in output packet structure
	 packet_out[msg_h_start] = MSG_START_BYTE;
  404ffe:	4c12      	ldr	r4, [pc, #72]	; (405048 <comm_send_msg+0x58>)
  405000:	233c      	movs	r3, #60	; 0x3c
  405002:	7023      	strb	r3, [r4, #0]
	 packet_out[msg_h_proj_id] = SETTINGS_PROJECT_ID;
  405004:	2304      	movs	r3, #4
  405006:	7063      	strb	r3, [r4, #1]
	 packet_out[msg_h_src_id] = SETTINGS_ARM_ID;
  405008:	2377      	movs	r3, #119	; 0x77
  40500a:	70a3      	strb	r3, [r4, #2]
	 packet_out[msg_h_des_id] = msg_des;
  40500c:	70e1      	strb	r1, [r4, #3]
	 packet_out[msg_h_msg_id] = msg_id;
  40500e:	7122      	strb	r2, [r4, #4]
	 packet_out[msg_h_payload_len] = payload_len;
  405010:	7165      	strb	r5, [r4, #5]

	 // save payload
	 copy_content( payload_ptr , &packet_out[msg_h_payload_1st_byte] , payload_len );
  405012:	b2af      	uxth	r7, r5
  405014:	463a      	mov	r2, r7
  405016:	1da1      	adds	r1, r4, #6
  405018:	9806      	ldr	r0, [sp, #24]
  40501a:	4b0c      	ldr	r3, [pc, #48]	; (40504c <comm_send_msg+0x5c>)
  40501c:	4798      	blx	r3

     // Append checksum
     checksum = calculate_checksum( packet_out , (uint16_t) (packet_out[msg_h_payload_len] + MSG_LENGHT_HEADER - 2));
  40501e:	7961      	ldrb	r1, [r4, #5]
  405020:	3106      	adds	r1, #6
  405022:	4620      	mov	r0, r4
  405024:	4b0a      	ldr	r3, [pc, #40]	; (405050 <comm_send_msg+0x60>)
  405026:	4798      	blx	r3
	 packet_out[MSG_LENGHT_HEADER - 2 + payload_len] = ( checksum      & 0xFF );
  405028:	4425      	add	r5, r4
  40502a:	71a8      	strb	r0, [r5, #6]
	 packet_out[MSG_LENGHT_HEADER - 1 + payload_len] = ( (checksum>>8) & 0xFF );
  40502c:	0a00      	lsrs	r0, r0, #8
  40502e:	71e8      	strb	r0, [r5, #7]

     // Send packet via UART
	 uart_send_packet( uart_ptr , packet_out , MSG_LENGHT_HEADER + payload_len );
  405030:	f107 0208 	add.w	r2, r7, #8
  405034:	4621      	mov	r1, r4
  405036:	4640      	mov	r0, r8
  405038:	4b06      	ldr	r3, [pc, #24]	; (405054 <comm_send_msg+0x64>)
  40503a:	4798      	blx	r3
	
	 // clear flag of packet out busy
	 packet_out_busy = 0;
  40503c:	2300      	movs	r3, #0
  40503e:	7033      	strb	r3, [r6, #0]
  405040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405044:	20000dec 	.word	0x20000dec
  405048:	20001ef0 	.word	0x20001ef0
  40504c:	00405129 	.word	0x00405129
  405050:	00405201 	.word	0x00405201
  405054:	00404f45 	.word	0x00404f45

00405058 <comm_bypass_msg>:
/// @brief Send request when a received message must be bypassed to other device (VFP to FPGA or FPGA to VFP)
/// @details This functions is called when a well-formed message is received and it must be transmitted to other device.
///
/// @param[in] uart_ptr Pointer to destination UART
/// @param[in] msp_ptr Pointer to incoming message
void comm_bypass_msg( Uart *uart_ptr , msg_t * msg_ptr ) {
  405058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40505a:	4607      	mov	r7, r0
  40505c:	460c      	mov	r4, r1

	uint8_t payload_len;

	 // set flag of packet out busy
	 packet_out_busy = 1;
  40505e:	4d09      	ldr	r5, [pc, #36]	; (405084 <comm_bypass_msg+0x2c>)
  405060:	2301      	movs	r3, #1
  405062:	702b      	strb	r3, [r5, #0]

	 // save packet
	 copy_content( msg_ptr->packet_in , &packet_out[0] , msg_ptr->rx_counter );
  405064:	4e08      	ldr	r6, [pc, #32]	; (405088 <comm_bypass_msg+0x30>)
  405066:	790a      	ldrb	r2, [r1, #4]
  405068:	4631      	mov	r1, r6
  40506a:	f104 000c 	add.w	r0, r4, #12
  40506e:	4b07      	ldr	r3, [pc, #28]	; (40508c <comm_bypass_msg+0x34>)
  405070:	4798      	blx	r3
	 payload_len = msg_ptr->rx_counter;
     
	 // Send packet via UART
     uart_send_packet( uart_ptr , packet_out , payload_len );
  405072:	7922      	ldrb	r2, [r4, #4]
  405074:	4631      	mov	r1, r6
  405076:	4638      	mov	r0, r7
  405078:	4b05      	ldr	r3, [pc, #20]	; (405090 <comm_bypass_msg+0x38>)
  40507a:	4798      	blx	r3
     
     // clear flag of packet out busy
     packet_out_busy = 0;
  40507c:	2300      	movs	r3, #0
  40507e:	702b      	strb	r3, [r5, #0]
  405080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405082:	bf00      	nop
  405084:	20000dec 	.word	0x20000dec
  405088:	20001ef0 	.word	0x20001ef0
  40508c:	00405129 	.word	0x00405129
  405090:	00404f45 	.word	0x00404f45

00405094 <comm_counters_update>:

}

/// @brief Update counters
void comm_counters_update(void) {
  405094:	b508      	push	{r3, lr}

	// Decrease the pending communication counter to repeat a TX if response is not received.
	if (comm_TX_counter>0)
  405096:	4b12      	ldr	r3, [pc, #72]	; (4050e0 <comm_counters_update+0x4c>)
  405098:	881b      	ldrh	r3, [r3, #0]
  40509a:	b113      	cbz	r3, 4050a2 <comm_counters_update+0xe>
		comm_TX_counter--;
  40509c:	3b01      	subs	r3, #1
  40509e:	4a10      	ldr	r2, [pc, #64]	; (4050e0 <comm_counters_update+0x4c>)
  4050a0:	8013      	strh	r3, [r2, #0]
	else
		comm_TX_counter = 0;
		
	// Increase DSP communication flag counter
	comm_DSP_counter++;
  4050a2:	4a10      	ldr	r2, [pc, #64]	; (4050e4 <comm_counters_update+0x50>)
  4050a4:	8813      	ldrh	r3, [r2, #0]
  4050a6:	3301      	adds	r3, #1
  4050a8:	b29b      	uxth	r3, r3
  4050aa:	8013      	strh	r3, [r2, #0]
		
	// if DSP communication flag counter reach 1 second, update ARM communication flags
	// to force the request in background
	if (comm_DSP_counter<5000) {
  4050ac:	f241 3287 	movw	r2, #4999	; 0x1387
  4050b0:	4293      	cmp	r3, r2
  4050b2:	d90d      	bls.n	4050d0 <comm_counters_update+0x3c>
		led_red_on();
	}
	else if (comm_DSP_counter<10000) {
  4050b4:	f242 720f 	movw	r2, #9999	; 0x270f
  4050b8:	4293      	cmp	r3, r2
  4050ba:	d90d      	bls.n	4050d8 <comm_counters_update+0x44>
		led_red_off();
	}
	else {
		comm_DSP_counter = 0;
  4050bc:	2200      	movs	r2, #0
  4050be:	4b09      	ldr	r3, [pc, #36]	; (4050e4 <comm_counters_update+0x50>)
  4050c0:	801a      	strh	r2, [r3, #0]
		comm_flags |= SETTINGS_COMM_FLAG_REQUEST_MASK;
  4050c2:	4a09      	ldr	r2, [pc, #36]	; (4050e8 <comm_counters_update+0x54>)
  4050c4:	8813      	ldrh	r3, [r2, #0]
  4050c6:	b29b      	uxth	r3, r3
  4050c8:	f043 0302 	orr.w	r3, r3, #2
  4050cc:	8013      	strh	r3, [r2, #0]
  4050ce:	bd08      	pop	{r3, pc}
		led_red_on();
  4050d0:	200f      	movs	r0, #15
  4050d2:	4b06      	ldr	r3, [pc, #24]	; (4050ec <comm_counters_update+0x58>)
  4050d4:	4798      	blx	r3
  4050d6:	bd08      	pop	{r3, pc}
		led_red_off();
  4050d8:	200f      	movs	r0, #15
  4050da:	4b05      	ldr	r3, [pc, #20]	; (4050f0 <comm_counters_update+0x5c>)
  4050dc:	4798      	blx	r3
  4050de:	bd08      	pop	{r3, pc}
  4050e0:	20001f78 	.word	0x20001f78
  4050e4:	20001eec 	.word	0x20001eec
  4050e8:	20001e54 	.word	0x20001e54
  4050ec:	0040698b 	.word	0x0040698b
  4050f0:	004069a5 	.word	0x004069a5

004050f4 <comm_TX_counter_clear>:
}

/// @brief Clear pending communication counter
void comm_TX_counter_clear(void) {

	comm_TX_counter = 0;
  4050f4:	2200      	movs	r2, #0
  4050f6:	4b01      	ldr	r3, [pc, #4]	; (4050fc <comm_TX_counter_clear+0x8>)
  4050f8:	801a      	strh	r2, [r3, #0]
  4050fa:	4770      	bx	lr
  4050fc:	20001f78 	.word	0x20001f78

00405100 <comm_preprocess_uart_DSP_RX>:
	comm_TX_counter = 5000;

}


void comm_preprocess_uart_DSP_RX(void) {
  405100:	b508      	push	{r3, lr}
	comm_preprocess_RX_msg( &UART_DSP_msg );
  405102:	4802      	ldr	r0, [pc, #8]	; (40510c <comm_preprocess_uart_DSP_RX+0xc>)
  405104:	4b02      	ldr	r3, [pc, #8]	; (405110 <comm_preprocess_uart_DSP_RX+0x10>)
  405106:	4798      	blx	r3
  405108:	bd08      	pop	{r3, pc}
  40510a:	bf00      	nop
  40510c:	20001f7c 	.word	0x20001f7c
  405110:	00404e3d 	.word	0x00404e3d

00405114 <comm_preprocess_uart_RPI_RX>:
}

void comm_preprocess_uart_RPI_RX(void) {
  405114:	b508      	push	{r3, lr}
	comm_preprocess_RX_msg( &UART_RPI_msg );
  405116:	4802      	ldr	r0, [pc, #8]	; (405120 <comm_preprocess_uart_RPI_RX+0xc>)
  405118:	4b02      	ldr	r3, [pc, #8]	; (405124 <comm_preprocess_uart_RPI_RX+0x10>)
  40511a:	4798      	blx	r3
  40511c:	bd08      	pop	{r3, pc}
  40511e:	bf00      	nop
  405120:	20001e58 	.word	0x20001e58
  405124:	00404e3d 	.word	0x00404e3d

00405128 <copy_content>:

void copy_content(uint8_t *source, uint8_t *target, uint16_t length)
{
    uint16_t i = 0;

    for (i = 0; i < length; i++)
  405128:	b162      	cbz	r2, 405144 <copy_content+0x1c>
{
  40512a:	b410      	push	{r4}
  40512c:	1e43      	subs	r3, r0, #1
  40512e:	3901      	subs	r1, #1
  405130:	1e54      	subs	r4, r2, #1
  405132:	fa10 f084 	uxtah	r0, r0, r4
        target[i] = source[i];
  405136:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  40513a:	f801 2f01 	strb.w	r2, [r1, #1]!
    for (i = 0; i < length; i++)
  40513e:	4283      	cmp	r3, r0
  405140:	d1f9      	bne.n	405136 <copy_content+0xe>
}
  405142:	bc10      	pop	{r4}
  405144:	4770      	bx	lr
	...

00405148 <compare_content>:

// length is in bytes, return flag: mismatch
uint16_t compare_content(volatile uint8_t *in1, uint8_t *in2, uint16_t length)
{
  405148:	b470      	push	{r4, r5, r6}
    static uint16_t i = 0;

    for (i = 0; i < length; i++) {
  40514a:	2400      	movs	r4, #0
  40514c:	4b10      	ldr	r3, [pc, #64]	; (405190 <compare_content+0x48>)
  40514e:	801c      	strh	r4, [r3, #0]
  405150:	4616      	mov	r6, r2
  405152:	b1c2      	cbz	r2, 405186 <compare_content+0x3e>
        if (in1[i] != in2[i]) {
  405154:	7803      	ldrb	r3, [r0, #0]
  405156:	b2db      	uxtb	r3, r3
  405158:	780a      	ldrb	r2, [r1, #0]
  40515a:	429a      	cmp	r2, r3
  40515c:	d115      	bne.n	40518a <compare_content+0x42>
  40515e:	2301      	movs	r3, #1
    for (i = 0; i < length; i++) {
  405160:	b29c      	uxth	r4, r3
  405162:	42a6      	cmp	r6, r4
  405164:	d90a      	bls.n	40517c <compare_content+0x34>
        if (in1[i] != in2[i]) {
  405166:	5cc2      	ldrb	r2, [r0, r3]
  405168:	b2d2      	uxtb	r2, r2
  40516a:	3301      	adds	r3, #1
  40516c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  405170:	4295      	cmp	r5, r2
  405172:	d0f5      	beq.n	405160 <compare_content+0x18>
  405174:	4b06      	ldr	r3, [pc, #24]	; (405190 <compare_content+0x48>)
  405176:	801c      	strh	r4, [r3, #0]
            // if content unmatched
            return 1;
  405178:	2001      	movs	r0, #1
  40517a:	e002      	b.n	405182 <compare_content+0x3a>
  40517c:	4b04      	ldr	r3, [pc, #16]	; (405190 <compare_content+0x48>)
  40517e:	801c      	strh	r4, [r3, #0]
        }
    }
    // if content is matched
    return 0;
  405180:	2000      	movs	r0, #0
}
  405182:	bc70      	pop	{r4, r5, r6}
  405184:	4770      	bx	lr
    return 0;
  405186:	4610      	mov	r0, r2
  405188:	e7fb      	b.n	405182 <compare_content+0x3a>
            return 1;
  40518a:	2001      	movs	r0, #1
  40518c:	e7f9      	b.n	405182 <compare_content+0x3a>
  40518e:	bf00      	nop
  405190:	20000dee 	.word	0x20000dee

00405194 <calculate_checksum_ptr>:

// returns 16-bit checksum. If done for a packet with checksum appended, should return 0
// length is in bytes!
// be careful this function is not reentrant
void calculate_checksum_ptr(uint8_t input[], uint32_t length, uint16_t *result)
{
  405194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    static uint8_t data = 0;
    static uint8_t result_bit = 0;
    static uint8_t data_bit = 0;

    // for every byte
    for (i = 0; i < length; i++) {
  405198:	2400      	movs	r4, #0
  40519a:	4b16      	ldr	r3, [pc, #88]	; (4051f4 <calculate_checksum_ptr+0x60>)
  40519c:	601c      	str	r4, [r3, #0]
  40519e:	b331      	cbz	r1, 4051ee <calculate_checksum_ptr+0x5a>
  4051a0:	468c      	mov	ip, r1
  4051a2:	4607      	mov	r7, r0
  4051a4:	eb00 0e01 	add.w	lr, r0, r1
        data = input[i];
  4051a8:	f04f 0808 	mov.w	r8, #8
 
            data_bit = data & 0x1;        // get LSbit
            data = data >> 1;            // shift down
 
            if (result_bit != data_bit) {
                *result = *result ^ CRCPoly;
  4051ac:	f24a 0601 	movw	r6, #40961	; 0xa001
        data = input[i];
  4051b0:	f817 5b01 	ldrb.w	r5, [r7], #1
  4051b4:	8813      	ldrh	r3, [r2, #0]
  4051b6:	4641      	mov	r1, r8
            result_bit = *result & 0x1;    // get LSbit
  4051b8:	f003 0401 	and.w	r4, r3, #1
            data_bit = data & 0x1;        // get LSbit
  4051bc:	f005 0001 	and.w	r0, r5, #1
            if (result_bit != data_bit) {
  4051c0:	4284      	cmp	r4, r0
  4051c2:	ea4f 0555 	mov.w	r5, r5, lsr #1
  4051c6:	ea4f 0353 	mov.w	r3, r3, lsr #1
                *result = *result ^ CRCPoly;
  4051ca:	bf1c      	itt	ne
  4051cc:	4073      	eorne	r3, r6
  4051ce:	b29b      	uxthne	r3, r3
  4051d0:	3901      	subs	r1, #1
        for (j = 0; j < 8; j++) {
  4051d2:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
  4051d6:	d1ef      	bne.n	4051b8 <calculate_checksum_ptr+0x24>
  4051d8:	8013      	strh	r3, [r2, #0]
    for (i = 0; i < length; i++) {
  4051da:	4577      	cmp	r7, lr
  4051dc:	d1e8      	bne.n	4051b0 <calculate_checksum_ptr+0x1c>
  4051de:	4b06      	ldr	r3, [pc, #24]	; (4051f8 <calculate_checksum_ptr+0x64>)
  4051e0:	701d      	strb	r5, [r3, #0]
  4051e2:	2208      	movs	r2, #8
  4051e4:	4b05      	ldr	r3, [pc, #20]	; (4051fc <calculate_checksum_ptr+0x68>)
  4051e6:	701a      	strb	r2, [r3, #0]
  4051e8:	4b02      	ldr	r3, [pc, #8]	; (4051f4 <calculate_checksum_ptr+0x60>)
  4051ea:	f8c3 c000 	str.w	ip, [r3]
  4051ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4051f2:	bf00      	nop
  4051f4:	20000df0 	.word	0x20000df0
  4051f8:	20000ded 	.word	0x20000ded
  4051fc:	20000df4 	.word	0x20000df4

00405200 <calculate_checksum>:
{
  405200:	b500      	push	{lr}
  405202:	b083      	sub	sp, #12
    uint16_t checksum = 0;
  405204:	aa02      	add	r2, sp, #8
  405206:	2300      	movs	r3, #0
  405208:	f822 3d02 	strh.w	r3, [r2, #-2]!
    calculate_checksum_ptr(input, length, &checksum);
  40520c:	4b03      	ldr	r3, [pc, #12]	; (40521c <calculate_checksum+0x1c>)
  40520e:	4798      	blx	r3
}
  405210:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  405214:	b003      	add	sp, #12
  405216:	f85d fb04 	ldr.w	pc, [sp], #4
  40521a:	bf00      	nop
  40521c:	00405195 	.word	0x00405195

00405220 <calculate_string_length>:
uint8_t calculate_string_length(uint8_t * str , uint8_t length_max) {
	
	uint8_t temp_length = 0;
	
	for (;;) {
		if ( (str[temp_length] != 0) & (temp_length < length_max) )
  405220:	7803      	ldrb	r3, [r0, #0]
  405222:	b14b      	cbz	r3, 405238 <calculate_string_length+0x18>
  405224:	b141      	cbz	r1, 405238 <calculate_string_length+0x18>
  405226:	2300      	movs	r3, #0
			temp_length++;
  405228:	3301      	adds	r3, #1
  40522a:	b2db      	uxtb	r3, r3
		if ( (str[temp_length] != 0) & (temp_length < length_max) )
  40522c:	5cc2      	ldrb	r2, [r0, r3]
  40522e:	b10a      	cbz	r2, 405234 <calculate_string_length+0x14>
  405230:	4299      	cmp	r1, r3
  405232:	d8f9      	bhi.n	405228 <calculate_string_length+0x8>
		else
			return temp_length;
	}	
	
  405234:	4618      	mov	r0, r3
  405236:	4770      	bx	lr
	uint8_t temp_length = 0;
  405238:	2300      	movs	r3, #0
  40523a:	e7fb      	b.n	405234 <calculate_string_length+0x14>

0040523c <UTILS_Strlen>:
  40523c:	7802      	ldrb	r2, [r0, #0]
  40523e:	b162      	cbz	r2, 40525a <UTILS_Strlen+0x1e>
  405240:	b410      	push	{r4}
  405242:	4601      	mov	r1, r0
  405244:	1c43      	adds	r3, r0, #1
  405246:	f200 2401 	addw	r4, r0, #513	; 0x201
  40524a:	1a58      	subs	r0, r3, r1
  40524c:	f813 2b01 	ldrb.w	r2, [r3], #1
  405250:	b10a      	cbz	r2, 405256 <UTILS_Strlen+0x1a>
  405252:	42a3      	cmp	r3, r4
  405254:	d1f9      	bne.n	40524a <UTILS_Strlen+0xe>
  405256:	bc10      	pop	{r4}
  405258:	4770      	bx	lr
  40525a:	2000      	movs	r0, #0
  40525c:	4770      	bx	lr
	...

00405260 <UTILS_Strchr>:
  405260:	b538      	push	{r3, r4, r5, lr}
  405262:	4604      	mov	r4, r0
  405264:	b180      	cbz	r0, 405288 <UTILS_Strchr+0x28>
  405266:	460d      	mov	r5, r1
  405268:	4b09      	ldr	r3, [pc, #36]	; (405290 <UTILS_Strchr+0x30>)
  40526a:	4798      	blx	r3
  40526c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
  405270:	d80b      	bhi.n	40528a <UTILS_Strchr+0x2a>
  405272:	4623      	mov	r3, r4
  405274:	4618      	mov	r0, r3
  405276:	f813 2b01 	ldrb.w	r2, [r3], #1
  40527a:	42aa      	cmp	r2, r5
  40527c:	d003      	beq.n	405286 <UTILS_Strchr+0x26>
  40527e:	2a00      	cmp	r2, #0
  405280:	d1f8      	bne.n	405274 <UTILS_Strchr+0x14>
  405282:	2000      	movs	r0, #0
  405284:	bd38      	pop	{r3, r4, r5, pc}
  405286:	bd38      	pop	{r3, r4, r5, pc}
  405288:	bd38      	pop	{r3, r4, r5, pc}
  40528a:	2000      	movs	r0, #0
  40528c:	bd38      	pop	{r3, r4, r5, pc}
  40528e:	bf00      	nop
  405290:	0040523d 	.word	0x0040523d

00405294 <UTILS_Atoi>:
  405294:	b368      	cbz	r0, 4052f2 <UTILS_Atoi+0x5e>
  405296:	b570      	push	{r4, r5, r6, lr}
  405298:	4606      	mov	r6, r0
  40529a:	460d      	mov	r5, r1
  40529c:	4b18      	ldr	r3, [pc, #96]	; (405300 <UTILS_Atoi+0x6c>)
  40529e:	4798      	blx	r3
  4052a0:	2811      	cmp	r0, #17
  4052a2:	d828      	bhi.n	4052f6 <UTILS_Atoi+0x62>
  4052a4:	7833      	ldrb	r3, [r6, #0]
  4052a6:	2b2d      	cmp	r3, #45	; 0x2d
  4052a8:	bf15      	itete	ne
  4052aa:	2400      	movne	r4, #0
  4052ac:	2401      	moveq	r4, #1
  4052ae:	2001      	movne	r0, #1
  4052b0:	f04f 30ff 	moveq.w	r0, #4294967295
  4052b4:	5d33      	ldrb	r3, [r6, r4]
  4052b6:	b1b3      	cbz	r3, 4052e6 <UTILS_Atoi+0x52>
  4052b8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
  4052bc:	b2c9      	uxtb	r1, r1
  4052be:	2909      	cmp	r1, #9
  4052c0:	d81b      	bhi.n	4052fa <UTILS_Atoi+0x66>
  4052c2:	2200      	movs	r2, #0
  4052c4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4052c8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
  4052cc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  4052d0:	3401      	adds	r4, #1
  4052d2:	b2e4      	uxtb	r4, r4
  4052d4:	5d33      	ldrb	r3, [r6, r4]
  4052d6:	b13b      	cbz	r3, 4052e8 <UTILS_Atoi+0x54>
  4052d8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
  4052dc:	b2c9      	uxtb	r1, r1
  4052de:	2909      	cmp	r1, #9
  4052e0:	d9f0      	bls.n	4052c4 <UTILS_Atoi+0x30>
  4052e2:	2000      	movs	r0, #0
  4052e4:	bd70      	pop	{r4, r5, r6, pc}
  4052e6:	2200      	movs	r2, #0
  4052e8:	fb02 f200 	mul.w	r2, r2, r0
  4052ec:	602a      	str	r2, [r5, #0]
  4052ee:	2001      	movs	r0, #1
  4052f0:	bd70      	pop	{r4, r5, r6, pc}
  4052f2:	2000      	movs	r0, #0
  4052f4:	4770      	bx	lr
  4052f6:	2000      	movs	r0, #0
  4052f8:	bd70      	pop	{r4, r5, r6, pc}
  4052fa:	2000      	movs	r0, #0
  4052fc:	bd70      	pop	{r4, r5, r6, pc}
  4052fe:	bf00      	nop
  405300:	0040523d 	.word	0x0040523d

00405304 <system_init>:
}

/**************************** GLOBAL FUNCTIONS *******************************/

///@brief System initialization.
void system_init() {
  405304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405308:	b087      	sub	sp, #28

	// general initialization
	WDT->WDT_MR = WDT_MR_WDDIS; // Disable the watchdog
  40530a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40530e:	4b7a      	ldr	r3, [pc, #488]	; (4054f8 <system_init+0x1f4>)
  405310:	605a      	str	r2, [r3, #4]
	sysclk_init();
  405312:	4b7a      	ldr	r3, [pc, #488]	; (4054fc <system_init+0x1f8>)
  405314:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  405316:	200b      	movs	r0, #11
  405318:	4b79      	ldr	r3, [pc, #484]	; (405500 <system_init+0x1fc>)
  40531a:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOA);
//	sysclk_enable_peripheral_clock(ID_PIOB);
	gpio_configure_group( PIOA , 0xFFFFFFFF , (PIO_INPUT | PIO_DEFAULT));
  40531c:	4d79      	ldr	r5, [pc, #484]	; (405504 <system_init+0x200>)
  40531e:	f04f 5220 	mov.w	r2, #671088640	; 0x28000000
  405322:	f04f 31ff 	mov.w	r1, #4294967295
  405326:	4628      	mov	r0, r5
  405328:	4e77      	ldr	r6, [pc, #476]	; (405508 <system_init+0x204>)
  40532a:	47b0      	blx	r6
	gpio_configure_group( PIOB , 0xFFFFFFFF , (PIO_INPUT | PIO_DEFAULT));
  40532c:	4c77      	ldr	r4, [pc, #476]	; (40550c <system_init+0x208>)
  40532e:	f04f 5220 	mov.w	r2, #671088640	; 0x28000000
  405332:	f04f 31ff 	mov.w	r1, #4294967295
  405336:	4620      	mov	r0, r4
  405338:	47b0      	blx	r6
	pio_pull_down( PIOA , 0xFFFFFFFF , 0 );
  40533a:	2200      	movs	r2, #0
  40533c:	f04f 31ff 	mov.w	r1, #4294967295
  405340:	4628      	mov	r0, r5
  405342:	4e73      	ldr	r6, [pc, #460]	; (405510 <system_init+0x20c>)
  405344:	47b0      	blx	r6
	pio_pull_down( PIOB , 0xFFFFFFFF , 0 );
  405346:	2200      	movs	r2, #0
  405348:	f04f 31ff 	mov.w	r1, #4294967295
  40534c:	4620      	mov	r0, r4
  40534e:	47b0      	blx	r6
	pio_pull_up( PIOA , 0xFFFFFFFF , 0 );
  405350:	2200      	movs	r2, #0
  405352:	f04f 31ff 	mov.w	r1, #4294967295
  405356:	4628      	mov	r0, r5
  405358:	4d6e      	ldr	r5, [pc, #440]	; (405514 <system_init+0x210>)
  40535a:	47a8      	blx	r5
	pio_pull_up( PIOB , 0xFFFFFFFF , 0 );
  40535c:	2200      	movs	r2, #0
  40535e:	f04f 31ff 	mov.w	r1, #4294967295
  405362:	4620      	mov	r0, r4
  405364:	47a8      	blx	r5
	pmc_switch_sclk_to_32kxtal(0);		// Select 32.768 KHz crystal as Slow CLock source. No bypass?????	
  405366:	2000      	movs	r0, #0
  405368:	4b6b      	ldr	r3, [pc, #428]	; (405518 <system_init+0x214>)
  40536a:	4798      	blx	r3
	while (pmc_osc_is_ready_32kxtal() != 1) {}
  40536c:	4c6b      	ldr	r4, [pc, #428]	; (40551c <system_init+0x218>)
  40536e:	47a0      	blx	r4
  405370:	2801      	cmp	r0, #1
  405372:	d1fc      	bne.n	40536e <system_init+0x6a>
	rtc_set_hour_mode(RTC, 0); 			// Default RTC configuration, 24-hour mode
  405374:	4c6a      	ldr	r4, [pc, #424]	; (405520 <system_init+0x21c>)
  405376:	2100      	movs	r1, #0
  405378:	4620      	mov	r0, r4
  40537a:	4b6a      	ldr	r3, [pc, #424]	; (405524 <system_init+0x220>)
  40537c:	4798      	blx	r3
	rtc_set_calibration(RTC, 1 , 124 , 1);	// 0   -> Positive correction //TODO: creo que debe ser negativo pero me duplica el error.
  40537e:	2301      	movs	r3, #1
  405380:	227c      	movs	r2, #124	; 0x7c
  405382:	4619      	mov	r1, r3
  405384:	4620      	mov	r0, r4
  405386:	4c68      	ldr	r4, [pc, #416]	; (405528 <system_init+0x224>)
  405388:	47a0      	blx	r4
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  40538a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40538e:	200f      	movs	r0, #15
  405390:	4c66      	ldr	r4, [pc, #408]	; (40552c <system_init+0x228>)
  405392:	47a0      	blx	r4
	gpio_set_pin_low(LED0_GPIO);                 // initial value
  405394:	200f      	movs	r0, #15
  405396:	4d66      	ldr	r5, [pc, #408]	; (405530 <system_init+0x22c>)
  405398:	47a8      	blx	r5
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  40539a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40539e:	2010      	movs	r0, #16
  4053a0:	47a0      	blx	r4
	gpio_set_pin_low(LED1_GPIO);                 // initial value
  4053a2:	2010      	movs	r0, #16
  4053a4:	47a8      	blx	r5
	gpio_configure_pin(TP0_GPIO, TP0_FLAGS);
  4053a6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4053aa:	2021      	movs	r0, #33	; 0x21
  4053ac:	47a0      	blx	r4
	gpio_set_pin_low(TP0_GPIO);                 // initial value
  4053ae:	2021      	movs	r0, #33	; 0x21
  4053b0:	47a8      	blx	r5
	gpio_configure_pin(TP1_GPIO, TP1_FLAGS);
  4053b2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4053b6:	2012      	movs	r0, #18
  4053b8:	47a0      	blx	r4
	gpio_set_pin_low(TP1_GPIO);                 // initial value
  4053ba:	2012      	movs	r0, #18
  4053bc:	47a8      	blx	r5
	gpio_configure_pin(TP2_GPIO, TP2_FLAGS);
  4053be:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4053c2:	2013      	movs	r0, #19
  4053c4:	47a0      	blx	r4
	gpio_set_pin_low(TP2_GPIO);                 // initial value
  4053c6:	2013      	movs	r0, #19
  4053c8:	47a8      	blx	r5
	gpio_configure_pin(TP3_GPIO, TP3_FLAGS);
  4053ca:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4053ce:	2014      	movs	r0, #20
  4053d0:	47a0      	blx	r4
	gpio_set_pin_low(TP3_GPIO);                 // initial value
  4053d2:	2014      	movs	r0, #20
  4053d4:	47a8      	blx	r5
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  4053d6:	4b57      	ldr	r3, [pc, #348]	; (405534 <system_init+0x230>)
  4053d8:	9303      	str	r3, [sp, #12]
	uart_settings.ul_baudrate = SETTINGS_COMM_ARM_BAUDRATE;
  4053da:	4b57      	ldr	r3, [pc, #348]	; (405538 <system_init+0x234>)
  4053dc:	9304      	str	r3, [sp, #16]
	uart_settings.ul_mode = US_MR_CHRL_8_BIT |  // 8 bit lenght
  4053de:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
  4053e2:	9305      	str	r3, [sp, #20]
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  4053e4:	4d47      	ldr	r5, [pc, #284]	; (405504 <system_init+0x200>)
  4053e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4053ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  4053ee:	4628      	mov	r0, r5
  4053f0:	f8df b114 	ldr.w	fp, [pc, #276]	; 405508 <system_init+0x204>
  4053f4:	47d8      	blx	fp
  4053f6:	2008      	movs	r0, #8
  4053f8:	f8df a104 	ldr.w	sl, [pc, #260]	; 405500 <system_init+0x1fc>
  4053fc:	47d0      	blx	sl
	uart_init( UART0 , &uart_settings);
  4053fe:	4e4f      	ldr	r6, [pc, #316]	; (40553c <system_init+0x238>)
  405400:	a903      	add	r1, sp, #12
  405402:	4630      	mov	r0, r6
  405404:	f8df 9168 	ldr.w	r9, [pc, #360]	; 405570 <system_init+0x26c>
  405408:	47c8      	blx	r9
	uart_enable( UART0 );
  40540a:	4630      	mov	r0, r6
  40540c:	f8df 8164 	ldr.w	r8, [pc, #356]	; 405574 <system_init+0x270>
  405410:	47c0      	blx	r8
	uart_enable_interrupt( UART0 , UART_IER_RXRDY );
  405412:	2101      	movs	r1, #1
  405414:	4630      	mov	r0, r6
  405416:	4f4a      	ldr	r7, [pc, #296]	; (405540 <system_init+0x23c>)
  405418:	47b8      	blx	r7
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  40541a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40541e:	210c      	movs	r1, #12
  405420:	483a      	ldr	r0, [pc, #232]	; (40550c <system_init+0x208>)
  405422:	47d8      	blx	fp
  405424:	2009      	movs	r0, #9
  405426:	47d0      	blx	sl
	uart_init( UART1 , &uart_settings);
  405428:	f506 7600 	add.w	r6, r6, #512	; 0x200
  40542c:	a903      	add	r1, sp, #12
  40542e:	4630      	mov	r0, r6
  405430:	47c8      	blx	r9
	uart_enable( UART1 );
  405432:	4630      	mov	r0, r6
  405434:	47c0      	blx	r8
	uart_enable_interrupt( UART1 , UART_IER_RXRDY );
  405436:	2101      	movs	r1, #1
  405438:	4630      	mov	r0, r6
  40543a:	47b8      	blx	r7
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  40543c:	f8df 9138 	ldr.w	r9, [pc, #312]	; 405578 <system_init+0x274>
  405440:	4649      	mov	r1, r9
  405442:	200b      	movs	r0, #11
  405444:	47a0      	blx	r4
	pio_set_debounce_filter(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK, 10);
  405446:	220a      	movs	r2, #10
  405448:	f44f 6100 	mov.w	r1, #2048	; 0x800
  40544c:	4628      	mov	r0, r5
  40544e:	f8df 812c 	ldr.w	r8, [pc, #300]	; 40557c <system_init+0x278>
  405452:	47c0      	blx	r8
	pio_handler_set(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_ID, PIN_PUSHBUTTON_1_MASK, PIN_PUSHBUTTON_1_ATTR, coreio_push_button_1_isr);
  405454:	4b3b      	ldr	r3, [pc, #236]	; (405544 <system_init+0x240>)
  405456:	9300      	str	r3, [sp, #0]
  405458:	2358      	movs	r3, #88	; 0x58
  40545a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40545e:	210b      	movs	r1, #11
  405460:	4628      	mov	r0, r5
  405462:	4f39      	ldr	r7, [pc, #228]	; (405548 <system_init+0x244>)
  405464:	47b8      	blx	r7
	pio_enable_interrupt(PIN_PUSHBUTTON_1_PIO, PIN_PUSHBUTTON_1_MASK);
  405466:	f44f 6100 	mov.w	r1, #2048	; 0x800
  40546a:	4628      	mov	r0, r5
  40546c:	4e37      	ldr	r6, [pc, #220]	; (40554c <system_init+0x248>)
  40546e:	47b0      	blx	r6
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
  405470:	4649      	mov	r1, r9
  405472:	200c      	movs	r0, #12
  405474:	47a0      	blx	r4
	pio_set_debounce_filter(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK, 10);
  405476:	220a      	movs	r2, #10
  405478:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40547c:	4628      	mov	r0, r5
  40547e:	47c0      	blx	r8
	pio_handler_set(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_ID, PIN_PUSHBUTTON_2_MASK, PIN_PUSHBUTTON_2_ATTR, coreio_push_button_2_isr);
  405480:	4b33      	ldr	r3, [pc, #204]	; (405550 <system_init+0x24c>)
  405482:	9300      	str	r3, [sp, #0]
  405484:	2358      	movs	r3, #88	; 0x58
  405486:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40548a:	210b      	movs	r1, #11
  40548c:	4628      	mov	r0, r5
  40548e:	47b8      	blx	r7
	pio_enable_interrupt(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK);
  405490:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  405494:	4628      	mov	r0, r5
  405496:	47b0      	blx	r6
	gpio_configure_pin(PIN_HSMCI_MCCDA_GPIO, PIN_HSMCI_MCCDA_FLAGS);
  405498:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40549c:	201c      	movs	r0, #28
  40549e:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCCK_GPIO, PIN_HSMCI_MCCK_FLAGS);
  4054a0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4054a4:	201d      	movs	r0, #29
  4054a6:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA0_GPIO, PIN_HSMCI_MCDA0_FLAGS);
  4054a8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4054ac:	201e      	movs	r0, #30
  4054ae:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA1_GPIO, PIN_HSMCI_MCDA1_FLAGS);
  4054b0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4054b4:	201f      	movs	r0, #31
  4054b6:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA2_GPIO, PIN_HSMCI_MCDA2_FLAGS);
  4054b8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4054bc:	201a      	movs	r0, #26
  4054be:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA3_GPIO, PIN_HSMCI_MCDA3_FLAGS);
  4054c0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4054c4:	201b      	movs	r0, #27
  4054c6:	47a0      	blx	r4
	gpio_configure_pin(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
  4054c8:	4922      	ldr	r1, [pc, #136]	; (405554 <system_init+0x250>)
  4054ca:	2019      	movs	r0, #25
  4054cc:	47a0      	blx	r4
	sd_mmc_init();
  4054ce:	4b22      	ldr	r3, [pc, #136]	; (405558 <system_init+0x254>)
  4054d0:	4798      	blx	r3
	supc_disable_monitor_reset( SUPC );
  4054d2:	4c22      	ldr	r4, [pc, #136]	; (40555c <system_init+0x258>)
  4054d4:	4620      	mov	r0, r4
  4054d6:	4b22      	ldr	r3, [pc, #136]	; (405560 <system_init+0x25c>)
  4054d8:	4798      	blx	r3
	supc_enable_monitor_interrupt( SUPC );
  4054da:	4620      	mov	r0, r4
  4054dc:	4b21      	ldr	r3, [pc, #132]	; (405564 <system_init+0x260>)
  4054de:	4798      	blx	r3
	supc_set_monitor_sampling_period( SUPC , SUPC_SMMR_SMSMPL_2048SLCK );
  4054e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4054e4:	4620      	mov	r0, r4
  4054e6:	4b20      	ldr	r3, [pc, #128]	; (405568 <system_init+0x264>)
  4054e8:	4798      	blx	r3
	supc_set_monitor_threshold( SUPC , 0x0Au  );
  4054ea:	210a      	movs	r1, #10
  4054ec:	4620      	mov	r0, r4
  4054ee:	4b1f      	ldr	r3, [pc, #124]	; (40556c <system_init+0x268>)
  4054f0:	4798      	blx	r3
	arm_uart_init();
	arm_push_button_init();
	arm_hsmci_init();
	arm_supply_monitor_init();
	 
 }
  4054f2:	b007      	add	sp, #28
  4054f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4054f8:	400e1450 	.word	0x400e1450
  4054fc:	0040626d 	.word	0x0040626d
  405500:	00406e5d 	.word	0x00406e5d
  405504:	400e0e00 	.word	0x400e0e00
  405508:	00406ae1 	.word	0x00406ae1
  40550c:	400e1000 	.word	0x400e1000
  405510:	00406941 	.word	0x00406941
  405514:	00406835 	.word	0x00406835
  405518:	00406d4d 	.word	0x00406d4d
  40551c:	00406d71 	.word	0x00406d71
  405520:	400e1460 	.word	0x400e1460
  405524:	00406f01 	.word	0x00406f01
  405528:	00407131 	.word	0x00407131
  40552c:	004069c1 	.word	0x004069c1
  405530:	004069a5 	.word	0x004069a5
  405534:	07270e00 	.word	0x07270e00
  405538:	000e4e1c 	.word	0x000e4e1c
  40553c:	400e0600 	.word	0x400e0600
  405540:	00407197 	.word	0x00407197
  405544:	00409da9 	.word	0x00409da9
  405548:	00406c21 	.word	0x00406c21
  40554c:	0040697d 	.word	0x0040697d
  405550:	00409ddd 	.word	0x00409ddd
  405554:	28000001 	.word	0x28000001
  405558:	004057e1 	.word	0x004057e1
  40555c:	400e1410 	.word	0x400e1410
  405560:	0040493b 	.word	0x0040493b
  405564:	00404945 	.word	0x00404945
  405568:	0040492b 	.word	0x0040492b
  40556c:	0040491b 	.word	0x0040491b
  405570:	0040715b 	.word	0x0040715b
  405574:	00407191 	.word	0x00407191
  405578:	28000058 	.word	0x28000058
  40557c:	0040683f 	.word	0x0040683f

00405580 <system_ready>:

///@brief Show that system is ready. 
void system_ready(void) {
  405580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405584:	2403      	movs	r4, #3
		led_green_on();
  405586:	f04f 0910 	mov.w	r9, #16
  40558a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4055c4 <system_ready+0x44>
		delay_ms(250);
  40558e:	4f0a      	ldr	r7, [pc, #40]	; (4055b8 <system_ready+0x38>)
		led_green_on();
  405590:	4648      	mov	r0, r9
  405592:	47c0      	blx	r8
		led_red_on();
  405594:	200f      	movs	r0, #15
  405596:	47c0      	blx	r8
		delay_ms(250);
  405598:	4638      	mov	r0, r7
  40559a:	4d08      	ldr	r5, [pc, #32]	; (4055bc <system_ready+0x3c>)
  40559c:	47a8      	blx	r5
		led_green_off();
  40559e:	4648      	mov	r0, r9
  4055a0:	4e07      	ldr	r6, [pc, #28]	; (4055c0 <system_ready+0x40>)
  4055a2:	47b0      	blx	r6
		led_red_off();
  4055a4:	200f      	movs	r0, #15
  4055a6:	47b0      	blx	r6
		delay_ms(250);
  4055a8:	4638      	mov	r0, r7
  4055aa:	47a8      	blx	r5
  4055ac:	1e63      	subs	r3, r4, #1
	for ( repeat=0 ; repeat<3 ; repeat++ ) {
  4055ae:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  4055b2:	d1ed      	bne.n	405590 <system_ready+0x10>

	arm_toggle_leds_3_times();

}
  4055b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4055b8:	0020b28a 	.word	0x0020b28a
  4055bc:	20000089 	.word	0x20000089
  4055c0:	004069a5 	.word	0x004069a5
  4055c4:	0040698b 	.word	0x0040698b

004055c8 <system_enable_interrupt>:

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4055c8:	4b17      	ldr	r3, [pc, #92]	; (405628 <system_enable_interrupt+0x60>)
  4055ca:	2201      	movs	r2, #1
  4055cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4055d0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4055d4:	2100      	movs	r1, #0
  4055d6:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4055da:	601a      	str	r2, [r3, #0]
  4055dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4055e0:	601a      	str	r2, [r3, #0]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4055e2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4055e6:	2130      	movs	r1, #48	; 0x30
  4055e8:	f883 130b 	strb.w	r1, [r3, #779]	; 0x30b
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4055ec:	601a      	str	r2, [r3, #0]
  4055ee:	601a      	str	r2, [r3, #0]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4055f0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4055f4:	2140      	movs	r1, #64	; 0x40
  4055f6:	f883 130b 	strb.w	r1, [r3, #779]	; 0x30b
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4055fa:	601a      	str	r2, [r3, #0]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4055fc:	f44f 7280 	mov.w	r2, #256	; 0x100
  405600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  405604:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  405608:	2110      	movs	r1, #16
  40560a:	f883 1308 	strb.w	r1, [r3, #776]	; 0x308
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40560e:	601a      	str	r2, [r3, #0]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  405610:	f44f 7200 	mov.w	r2, #512	; 0x200
  405614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  405618:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  40561c:	2120      	movs	r1, #32
  40561e:	f883 1309 	strb.w	r1, [r3, #777]	; 0x309
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  405622:	601a      	str	r2, [r3, #0]
  405624:	4770      	bx	lr
  405626:	bf00      	nop
  405628:	e000e100 	.word	0xe000e100

0040562c <system_disable_interrupt>:
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40562c:	4b09      	ldr	r3, [pc, #36]	; (405654 <system_disable_interrupt+0x28>)
  40562e:	2201      	movs	r2, #1
  405630:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  405634:	f44f 6200 	mov.w	r2, #2048	; 0x800
  405638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  40563c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  405640:	f44f 7280 	mov.w	r2, #256	; 0x100
  405644:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  405648:	f44f 7200 	mov.w	r2, #512	; 0x200
  40564c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  405650:	4770      	bx	lr
  405652:	bf00      	nop
  405654:	e000e100 	.word	0xe000e100

00405658 <system_reset_ARM>:
}

///@brief Reset ARM.
void system_reset_ARM(void) {
	
	RSTC->RSTC_CR = RSTC_CR_KEY_PASSWD | RSTC_CR_PROCRST | RSTC_CR_PERRST;
  405658:	4a01      	ldr	r2, [pc, #4]	; (405660 <system_reset_ARM+0x8>)
  40565a:	4b02      	ldr	r3, [pc, #8]	; (405664 <system_reset_ARM+0xc>)
  40565c:	601a      	str	r2, [r3, #0]
  40565e:	4770      	bx	lr
  405660:	a5000005 	.word	0xa5000005
  405664:	400e1400 	.word	0x400e1400

00405668 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  405668:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  40566a:	4b07      	ldr	r3, [pc, #28]	; (405688 <sd_mmc_configure_slot+0x20>)
  40566c:	6819      	ldr	r1, [r3, #0]
  40566e:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
  405672:	3300      	adds	r3, #0
  405674:	bf18      	it	ne
  405676:	2301      	movne	r3, #1
  405678:	7c4a      	ldrb	r2, [r1, #17]
  40567a:	6809      	ldr	r1, [r1, #0]
  40567c:	4803      	ldr	r0, [pc, #12]	; (40568c <sd_mmc_configure_slot+0x24>)
  40567e:	7800      	ldrb	r0, [r0, #0]
  405680:	4c03      	ldr	r4, [pc, #12]	; (405690 <sd_mmc_configure_slot+0x28>)
  405682:	47a0      	blx	r4
  405684:	bd10      	pop	{r4, pc}
  405686:	bf00      	nop
  405688:	20000df8 	.word	0x20000df8
  40568c:	20000e01 	.word	0x20000e01
  405690:	00406445 	.word	0x00406445

00405694 <sd_mmc_select_slot>:
	if (slot >= SD_MMC_MEM_CNT) {
  405694:	b108      	cbz	r0, 40569a <sd_mmc_select_slot+0x6>
		return SD_MMC_ERR_SLOT;
  405696:	2004      	movs	r0, #4
  405698:	4770      	bx	lr
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
  40569a:	4b33      	ldr	r3, [pc, #204]	; (405768 <sd_mmc_select_slot+0xd4>)
  40569c:	689a      	ldr	r2, [r3, #8]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40569e:	0953      	lsrs	r3, r2, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4056a0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4056a4:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4056a8:	025b      	lsls	r3, r3, #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  4056aa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  4056ac:	f002 021f 	and.w	r2, r2, #31
  4056b0:	2301      	movs	r3, #1
  4056b2:	fa03 f202 	lsl.w	r2, r3, r2
  4056b6:	420a      	tst	r2, r1
  4056b8:	d010      	beq.n	4056dc <sd_mmc_select_slot+0x48>
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  4056ba:	4b2b      	ldr	r3, [pc, #172]	; (405768 <sd_mmc_select_slot+0xd4>)
  4056bc:	7b9b      	ldrb	r3, [r3, #14]
  4056be:	2b01      	cmp	r3, #1
  4056c0:	d004      	beq.n	4056cc <sd_mmc_select_slot+0x38>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  4056c2:	2204      	movs	r2, #4
  4056c4:	4b28      	ldr	r3, [pc, #160]	; (405768 <sd_mmc_select_slot+0xd4>)
  4056c6:	739a      	strb	r2, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
  4056c8:	2002      	movs	r0, #2
  4056ca:	4770      	bx	lr
	if (sd_mmc_sam_systick_used) {
  4056cc:	4b27      	ldr	r3, [pc, #156]	; (40576c <sd_mmc_select_slot+0xd8>)
  4056ce:	781b      	ldrb	r3, [r3, #0]
  4056d0:	2b00      	cmp	r3, #0
  4056d2:	d0f6      	beq.n	4056c2 <sd_mmc_select_slot+0x2e>
		SysTick->CTRL = 0;
  4056d4:	2200      	movs	r2, #0
  4056d6:	4b26      	ldr	r3, [pc, #152]	; (405770 <sd_mmc_select_slot+0xdc>)
  4056d8:	601a      	str	r2, [r3, #0]
  4056da:	e7f2      	b.n	4056c2 <sd_mmc_select_slot+0x2e>
{
  4056dc:	b510      	push	{r4, lr}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
  4056de:	4b22      	ldr	r3, [pc, #136]	; (405768 <sd_mmc_select_slot+0xd4>)
  4056e0:	7b9b      	ldrb	r3, [r3, #14]
  4056e2:	2b04      	cmp	r3, #4
  4056e4:	d005      	beq.n	4056f2 <sd_mmc_select_slot+0x5e>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  4056e6:	2b01      	cmp	r3, #1
  4056e8:	d019      	beq.n	40571e <sd_mmc_select_slot+0x8a>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
  4056ea:	2b03      	cmp	r3, #3
  4056ec:	d12c      	bne.n	405748 <sd_mmc_select_slot+0xb4>
		return SD_MMC_ERR_UNUSABLE;
  4056ee:	2003      	movs	r0, #3
  4056f0:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
  4056f2:	2201      	movs	r2, #1
  4056f4:	4b1c      	ldr	r3, [pc, #112]	; (405768 <sd_mmc_select_slot+0xd4>)
  4056f6:	739a      	strb	r2, [r3, #14]
	if (!SysTick->CTRL) {
  4056f8:	4b1d      	ldr	r3, [pc, #116]	; (405770 <sd_mmc_select_slot+0xdc>)
  4056fa:	681b      	ldr	r3, [r3, #0]
  4056fc:	b93b      	cbnz	r3, 40570e <sd_mmc_select_slot+0x7a>
		sd_mmc_sam_systick_used = true;
  4056fe:	4b1b      	ldr	r3, [pc, #108]	; (40576c <sd_mmc_select_slot+0xd8>)
  405700:	701a      	strb	r2, [r3, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
  405702:	4b1b      	ldr	r3, [pc, #108]	; (405770 <sd_mmc_select_slot+0xdc>)
  405704:	491b      	ldr	r1, [pc, #108]	; (405774 <sd_mmc_select_slot+0xe0>)
  405706:	6059      	str	r1, [r3, #4]
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
  405708:	601a      	str	r2, [r3, #0]
		return SD_MMC_ERR_NO_CARD;
  40570a:	2002      	movs	r0, #2
  40570c:	bd10      	pop	{r4, pc}
		sd_mmc_sam_systick_used = false;
  40570e:	2200      	movs	r2, #0
  405710:	4b16      	ldr	r3, [pc, #88]	; (40576c <sd_mmc_select_slot+0xd8>)
  405712:	701a      	strb	r2, [r3, #0]
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
  405714:	4818      	ldr	r0, [pc, #96]	; (405778 <sd_mmc_select_slot+0xe4>)
  405716:	4b19      	ldr	r3, [pc, #100]	; (40577c <sd_mmc_select_slot+0xe8>)
  405718:	4798      	blx	r3
		return SD_MMC_ERR_NO_CARD;
  40571a:	2002      	movs	r0, #2
  40571c:	bd10      	pop	{r4, pc}
	if (!sd_mmc_sam_systick_used) {
  40571e:	4b13      	ldr	r3, [pc, #76]	; (40576c <sd_mmc_select_slot+0xd8>)
  405720:	781b      	ldrb	r3, [r3, #0]
  405722:	b13b      	cbz	r3, 405734 <sd_mmc_select_slot+0xa0>
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
  405724:	4b12      	ldr	r3, [pc, #72]	; (405770 <sd_mmc_select_slot+0xdc>)
  405726:	681b      	ldr	r3, [r3, #0]
  405728:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40572c:	d01a      	beq.n	405764 <sd_mmc_select_slot+0xd0>
		SysTick->CTRL = 0;
  40572e:	2200      	movs	r2, #0
  405730:	4b0f      	ldr	r3, [pc, #60]	; (405770 <sd_mmc_select_slot+0xdc>)
  405732:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  405734:	4b0c      	ldr	r3, [pc, #48]	; (405768 <sd_mmc_select_slot+0xd4>)
  405736:	2202      	movs	r2, #2
  405738:	739a      	strb	r2, [r3, #14]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  40573a:	4a11      	ldr	r2, [pc, #68]	; (405780 <sd_mmc_select_slot+0xec>)
  40573c:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
  40573e:	2201      	movs	r2, #1
  405740:	745a      	strb	r2, [r3, #17]
		sd_mmc_cards[slot].high_speed = 0;
  405742:	2200      	movs	r2, #0
  405744:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_slot_sel = slot;
  405748:	2200      	movs	r2, #0
  40574a:	4b0e      	ldr	r3, [pc, #56]	; (405784 <sd_mmc_select_slot+0xf0>)
  40574c:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  40574e:	4c06      	ldr	r4, [pc, #24]	; (405768 <sd_mmc_select_slot+0xd4>)
  405750:	4b0d      	ldr	r3, [pc, #52]	; (405788 <sd_mmc_select_slot+0xf4>)
  405752:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
  405754:	4b0d      	ldr	r3, [pc, #52]	; (40578c <sd_mmc_select_slot+0xf8>)
  405756:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  405758:	7ba0      	ldrb	r0, [r4, #14]
  40575a:	2802      	cmp	r0, #2
  40575c:	bf14      	ite	ne
  40575e:	2000      	movne	r0, #0
  405760:	2001      	moveq	r0, #1
  405762:	bd10      	pop	{r4, pc}
			return SD_MMC_ERR_NO_CARD;
  405764:	2002      	movs	r0, #2
  405766:	bd10      	pop	{r4, pc}
  405768:	20000094 	.word	0x20000094
  40576c:	20000e00 	.word	0x20000e00
  405770:	e000e010 	.word	0xe000e010
  405774:	00e4e1c0 	.word	0x00e4e1c0
  405778:	0082ca25 	.word	0x0082ca25
  40577c:	20000089 	.word	0x20000089
  405780:	00061a80 	.word	0x00061a80
  405784:	20000e01 	.word	0x20000e01
  405788:	20000df8 	.word	0x20000df8
  40578c:	00405669 	.word	0x00405669

00405790 <sd_mmc_cmd9_mci>:
{
  405790:	b510      	push	{r4, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  405792:	4b09      	ldr	r3, [pc, #36]	; (4057b8 <sd_mmc_cmd9_mci+0x28>)
  405794:	681b      	ldr	r3, [r3, #0]
  405796:	8999      	ldrh	r1, [r3, #12]
  405798:	0409      	lsls	r1, r1, #16
  40579a:	f641 3009 	movw	r0, #6921	; 0x1b09
  40579e:	4b07      	ldr	r3, [pc, #28]	; (4057bc <sd_mmc_cmd9_mci+0x2c>)
  4057a0:	4798      	blx	r3
  4057a2:	4604      	mov	r4, r0
  4057a4:	b908      	cbnz	r0, 4057aa <sd_mmc_cmd9_mci+0x1a>
}
  4057a6:	4620      	mov	r0, r4
  4057a8:	bd10      	pop	{r4, pc}
	driver_get_response_128(sd_mmc_card->csd);
  4057aa:	4b03      	ldr	r3, [pc, #12]	; (4057b8 <sd_mmc_cmd9_mci+0x28>)
  4057ac:	6818      	ldr	r0, [r3, #0]
  4057ae:	3012      	adds	r0, #18
  4057b0:	4b03      	ldr	r3, [pc, #12]	; (4057c0 <sd_mmc_cmd9_mci+0x30>)
  4057b2:	4798      	blx	r3
	return true;
  4057b4:	e7f7      	b.n	4057a6 <sd_mmc_cmd9_mci+0x16>
  4057b6:	bf00      	nop
  4057b8:	20000df8 	.word	0x20000df8
  4057bc:	004064d9 	.word	0x004064d9
  4057c0:	0040650d 	.word	0x0040650d

004057c4 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  4057c4:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  4057c6:	4b04      	ldr	r3, [pc, #16]	; (4057d8 <sd_mmc_deselect_slot+0x14>)
  4057c8:	781b      	ldrb	r3, [r3, #0]
  4057ca:	b103      	cbz	r3, 4057ce <sd_mmc_deselect_slot+0xa>
  4057cc:	bd08      	pop	{r3, pc}
		driver_deselect_device(sd_mmc_slot_sel);
  4057ce:	2000      	movs	r0, #0
  4057d0:	4b02      	ldr	r3, [pc, #8]	; (4057dc <sd_mmc_deselect_slot+0x18>)
  4057d2:	4798      	blx	r3
	}
}
  4057d4:	e7fa      	b.n	4057cc <sd_mmc_deselect_slot+0x8>
  4057d6:	bf00      	nop
  4057d8:	20000e01 	.word	0x20000e01
  4057dc:	004064b5 	.word	0x004064b5

004057e0 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  4057e0:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  4057e2:	2204      	movs	r2, #4
  4057e4:	4b03      	ldr	r3, [pc, #12]	; (4057f4 <sd_mmc_init+0x14>)
  4057e6:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  4057e8:	22ff      	movs	r2, #255	; 0xff
  4057ea:	4b03      	ldr	r3, [pc, #12]	; (4057f8 <sd_mmc_init+0x18>)
  4057ec:	701a      	strb	r2, [r3, #0]
	driver_init();
  4057ee:	4b03      	ldr	r3, [pc, #12]	; (4057fc <sd_mmc_init+0x1c>)
  4057f0:	4798      	blx	r3
  4057f2:	bd08      	pop	{r3, pc}
  4057f4:	20000094 	.word	0x20000094
  4057f8:	20000e01 	.word	0x20000e01
  4057fc:	0040640d 	.word	0x0040640d

00405800 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  405800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405804:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  405806:	4b8a      	ldr	r3, [pc, #552]	; (405a30 <sd_mmc_check+0x230>)
  405808:	4798      	blx	r3
  40580a:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  40580c:	2801      	cmp	r0, #1
  40580e:	d005      	beq.n	40581c <sd_mmc_check+0x1c>
		sd_mmc_deselect_slot();
  405810:	4b88      	ldr	r3, [pc, #544]	; (405a34 <sd_mmc_check+0x234>)
  405812:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  405814:	4620      	mov	r0, r4
  405816:	b015      	add	sp, #84	; 0x54
  405818:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
  40581c:	4b86      	ldr	r3, [pc, #536]	; (405a38 <sd_mmc_check+0x238>)
  40581e:	681b      	ldr	r3, [r3, #0]
  405820:	2201      	movs	r2, #1
  405822:	73da      	strb	r2, [r3, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  405824:	2500      	movs	r5, #0
  405826:	741d      	strb	r5, [r3, #16]
	sd_mmc_card->rca = 0;
  405828:	819d      	strh	r5, [r3, #12]
	driver_send_clock();
  40582a:	4b84      	ldr	r3, [pc, #528]	; (405a3c <sd_mmc_check+0x23c>)
  40582c:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  40582e:	4629      	mov	r1, r5
  405830:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  405834:	4b82      	ldr	r3, [pc, #520]	; (405a40 <sd_mmc_check+0x240>)
  405836:	4798      	blx	r3
  405838:	b930      	cbnz	r0, 405848 <sd_mmc_check+0x48>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  40583a:	4b7f      	ldr	r3, [pc, #508]	; (405a38 <sd_mmc_check+0x238>)
  40583c:	681b      	ldr	r3, [r3, #0]
  40583e:	2403      	movs	r4, #3
  405840:	739c      	strb	r4, [r3, #14]
	sd_mmc_deselect_slot();
  405842:	4b7c      	ldr	r3, [pc, #496]	; (405a34 <sd_mmc_check+0x234>)
  405844:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  405846:	e7e5      	b.n	405814 <sd_mmc_check+0x14>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  405848:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  40584c:	f245 5008 	movw	r0, #21768	; 0x5508
  405850:	4b7b      	ldr	r3, [pc, #492]	; (405a40 <sd_mmc_check+0x240>)
  405852:	4798      	blx	r3
  405854:	2800      	cmp	r0, #0
  405856:	f040 8090 	bne.w	40597a <sd_mmc_check+0x17a>
	*v2 = 0;
  40585a:	2200      	movs	r2, #0
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40585c:	4b76      	ldr	r3, [pc, #472]	; (405a38 <sd_mmc_check+0x238>)
  40585e:	681b      	ldr	r3, [r3, #0]
  405860:	7bdb      	ldrb	r3, [r3, #15]
  405862:	f013 0f01 	tst.w	r3, #1
  405866:	f040 82aa 	bne.w	405dbe <sd_mmc_check+0x5be>
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  40586a:	2100      	movs	r1, #0
  40586c:	f245 1003 	movw	r0, #20739	; 0x5103
  405870:	4b73      	ldr	r3, [pc, #460]	; (405a40 <sd_mmc_check+0x240>)
  405872:	4798      	blx	r3
  405874:	2800      	cmp	r0, #0
  405876:	d0e0      	beq.n	40583a <sd_mmc_check+0x3a>
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  405878:	4d6f      	ldr	r5, [pc, #444]	; (405a38 <sd_mmc_check+0x238>)
  40587a:	682e      	ldr	r6, [r5, #0]
  40587c:	4b71      	ldr	r3, [pc, #452]	; (405a44 <sd_mmc_check+0x244>)
  40587e:	4798      	blx	r3
  405880:	0c00      	lsrs	r0, r0, #16
  405882:	81b0      	strh	r0, [r6, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  405884:	682b      	ldr	r3, [r5, #0]
  405886:	7bdb      	ldrb	r3, [r3, #15]
  405888:	f013 0f01 	tst.w	r3, #1
  40588c:	d034      	beq.n	4058f8 <sd_mmc_check+0xf8>
		if (!sd_mmc_cmd9_mci()) {
  40588e:	4b6e      	ldr	r3, [pc, #440]	; (405a48 <sd_mmc_check+0x248>)
  405890:	4798      	blx	r3
  405892:	2800      	cmp	r0, #0
  405894:	d0d1      	beq.n	40583a <sd_mmc_check+0x3a>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  405896:	682b      	ldr	r3, [r5, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  405898:	7d5a      	ldrb	r2, [r3, #21]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  40589a:	f3c2 00c3 	ubfx	r0, r2, #3, #4
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  40589e:	f002 0207 	and.w	r2, r2, #7
	sd_mmc_card->clock = unit * mul * 1000;
  4058a2:	496a      	ldr	r1, [pc, #424]	; (405a4c <sd_mmc_check+0x24c>)
  4058a4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  4058a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4058ac:	fb02 f201 	mul.w	r2, r2, r1
  4058b0:	4967      	ldr	r1, [pc, #412]	; (405a50 <sd_mmc_check+0x250>)
  4058b2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  4058b6:	fb02 f201 	mul.w	r2, r2, r1
  4058ba:	601a      	str	r2, [r3, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  4058bc:	7c9a      	ldrb	r2, [r3, #18]
  4058be:	0992      	lsrs	r2, r2, #6
  4058c0:	f040 81b4 	bne.w	405c2c <sd_mmc_check+0x42c>
  4058c4:	7e99      	ldrb	r1, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4058c6:	7e58      	ldrb	r0, [r3, #25]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4058c8:	7e1a      	ldrb	r2, [r3, #24]
  4058ca:	0292      	lsls	r2, r2, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4058cc:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
  4058d0:	ea42 12a1 	orr.w	r2, r2, r1, asr #6
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4058d4:	7f18      	ldrb	r0, [r3, #28]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4058d6:	7ed9      	ldrb	r1, [r3, #27]
  4058d8:	0049      	lsls	r1, r1, #1
  4058da:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
	}
	value &=  ((uint32_t)1 << size) - 1;
  4058de:	f3c2 020b 	ubfx	r2, r2, #0, #12
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  4058e2:	3201      	adds	r2, #1
  4058e4:	f001 0107 	and.w	r1, r1, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  4058e8:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  4058ea:	408a      	lsls	r2, r1
  4058ec:	7dd9      	ldrb	r1, [r3, #23]
  4058ee:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  4058f2:	408a      	lsls	r2, r1
				/ 1024;
  4058f4:	0a92      	lsrs	r2, r2, #10
		sd_mmc_card->capacity = blocknr *
  4058f6:	605a      	str	r2, [r3, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  4058f8:	4b4f      	ldr	r3, [pc, #316]	; (405a38 <sd_mmc_check+0x238>)
  4058fa:	681b      	ldr	r3, [r3, #0]
  4058fc:	8999      	ldrh	r1, [r3, #12]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  4058fe:	0409      	lsls	r1, r1, #16
  405900:	f243 1007 	movw	r0, #12551	; 0x3107
  405904:	4b4e      	ldr	r3, [pc, #312]	; (405a40 <sd_mmc_check+0x240>)
  405906:	4798      	blx	r3
  405908:	2800      	cmp	r0, #0
  40590a:	d096      	beq.n	40583a <sd_mmc_check+0x3a>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40590c:	4b4a      	ldr	r3, [pc, #296]	; (405a38 <sd_mmc_check+0x238>)
  40590e:	681b      	ldr	r3, [r3, #0]
  405910:	7bda      	ldrb	r2, [r3, #15]
  405912:	f012 0f01 	tst.w	r2, #1
  405916:	f000 819a 	beq.w	405c4e <sd_mmc_check+0x44e>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  40591a:	8999      	ldrh	r1, [r3, #12]
  40591c:	0409      	lsls	r1, r1, #16
  40591e:	f241 1037 	movw	r0, #4407	; 0x1137
  405922:	4b47      	ldr	r3, [pc, #284]	; (405a40 <sd_mmc_check+0x240>)
  405924:	4798      	blx	r3
  405926:	2800      	cmp	r0, #0
  405928:	d087      	beq.n	40583a <sd_mmc_check+0x3a>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  40592a:	2301      	movs	r3, #1
  40592c:	9300      	str	r3, [sp, #0]
  40592e:	2208      	movs	r2, #8
  405930:	2100      	movs	r1, #0
  405932:	4848      	ldr	r0, [pc, #288]	; (405a54 <sd_mmc_check+0x254>)
  405934:	4d48      	ldr	r5, [pc, #288]	; (405a58 <sd_mmc_check+0x258>)
  405936:	47a8      	blx	r5
  405938:	2800      	cmp	r0, #0
  40593a:	f43f af7e 	beq.w	40583a <sd_mmc_check+0x3a>
	if (!driver_start_read_blocks(scr, 1)) {
  40593e:	2101      	movs	r1, #1
  405940:	a804      	add	r0, sp, #16
  405942:	4b46      	ldr	r3, [pc, #280]	; (405a5c <sd_mmc_check+0x25c>)
  405944:	4798      	blx	r3
  405946:	2800      	cmp	r0, #0
  405948:	f43f af77 	beq.w	40583a <sd_mmc_check+0x3a>
	if (!driver_wait_end_of_read_blocks()) {
  40594c:	4b44      	ldr	r3, [pc, #272]	; (405a60 <sd_mmc_check+0x260>)
  40594e:	4798      	blx	r3
  405950:	2800      	cmp	r0, #0
  405952:	f43f af72 	beq.w	40583a <sd_mmc_check+0x3a>
	switch (SD_SCR_SD_SPEC(scr)) {
  405956:	f89d 3010 	ldrb.w	r3, [sp, #16]
  40595a:	f003 030f 	and.w	r3, r3, #15
  40595e:	2b01      	cmp	r3, #1
  405960:	f000 81bc 	beq.w	405cdc <sd_mmc_check+0x4dc>
  405964:	2b00      	cmp	r3, #0
  405966:	f000 816e 	beq.w	405c46 <sd_mmc_check+0x446>
  40596a:	2b02      	cmp	r3, #2
  40596c:	f000 81bb 	beq.w	405ce6 <sd_mmc_check+0x4e6>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  405970:	4b31      	ldr	r3, [pc, #196]	; (405a38 <sd_mmc_check+0x238>)
  405972:	681b      	ldr	r3, [r3, #0]
  405974:	2210      	movs	r2, #16
  405976:	741a      	strb	r2, [r3, #16]
  405978:	e169      	b.n	405c4e <sd_mmc_check+0x44e>
	resp = driver_get_response();
  40597a:	4b32      	ldr	r3, [pc, #200]	; (405a44 <sd_mmc_check+0x244>)
  40597c:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
  40597e:	f1b0 3fff 	cmp.w	r0, #4294967295
  405982:	f000 821a 	beq.w	405dba <sd_mmc_check+0x5ba>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  405986:	f3c0 000b 	ubfx	r0, r0, #0, #12
  40598a:	f5b0 7fd5 	cmp.w	r0, #426	; 0x1aa
  40598e:	f47f af54 	bne.w	40583a <sd_mmc_check+0x3a>
	*v2 = 1;
  405992:	2201      	movs	r2, #1
  405994:	e762      	b.n	40585c <sd_mmc_check+0x5c>
			if ((resp & OCR_CCS) != 0) {
  405996:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  40599a:	d005      	beq.n	4059a8 <sd_mmc_check+0x1a8>
				sd_mmc_card->type |= CARD_TYPE_HC;
  40599c:	4b26      	ldr	r3, [pc, #152]	; (405a38 <sd_mmc_check+0x238>)
  40599e:	681a      	ldr	r2, [r3, #0]
  4059a0:	7bd3      	ldrb	r3, [r2, #15]
  4059a2:	f043 0308 	orr.w	r3, r3, #8
  4059a6:	73d3      	strb	r3, [r2, #15]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  4059a8:	4b23      	ldr	r3, [pc, #140]	; (405a38 <sd_mmc_check+0x238>)
  4059aa:	681b      	ldr	r3, [r3, #0]
  4059ac:	7bdb      	ldrb	r3, [r3, #15]
  4059ae:	f013 0f01 	tst.w	r3, #1
  4059b2:	f43f af5a 	beq.w	40586a <sd_mmc_check+0x6a>
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  4059b6:	2100      	movs	r1, #0
  4059b8:	f645 3002 	movw	r0, #23298	; 0x5b02
  4059bc:	4b20      	ldr	r3, [pc, #128]	; (405a40 <sd_mmc_check+0x240>)
  4059be:	4798      	blx	r3
  4059c0:	2800      	cmp	r0, #0
  4059c2:	f47f af52 	bne.w	40586a <sd_mmc_check+0x6a>
  4059c6:	e738      	b.n	40583a <sd_mmc_check+0x3a>
			if ((resp & OCR_ACCESS_MODE_MASK)
  4059c8:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
  4059cc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  4059d0:	d027      	beq.n	405a22 <sd_mmc_check+0x222>
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  4059d2:	2100      	movs	r1, #0
  4059d4:	f645 3002 	movw	r0, #23298	; 0x5b02
  4059d8:	4b19      	ldr	r3, [pc, #100]	; (405a40 <sd_mmc_check+0x240>)
  4059da:	4798      	blx	r3
  4059dc:	2800      	cmp	r0, #0
  4059de:	f43f af2c 	beq.w	40583a <sd_mmc_check+0x3a>
	sd_mmc_card->rca = 1;
  4059e2:	4b15      	ldr	r3, [pc, #84]	; (405a38 <sd_mmc_check+0x238>)
  4059e4:	681b      	ldr	r3, [r3, #0]
  4059e6:	2201      	movs	r2, #1
  4059e8:	819a      	strh	r2, [r3, #12]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  4059ea:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4059ee:	f241 1003 	movw	r0, #4355	; 0x1103
  4059f2:	4b13      	ldr	r3, [pc, #76]	; (405a40 <sd_mmc_check+0x240>)
  4059f4:	4798      	blx	r3
  4059f6:	2800      	cmp	r0, #0
  4059f8:	f43f af1f 	beq.w	40583a <sd_mmc_check+0x3a>
	if (!sd_mmc_cmd9_mci()) {
  4059fc:	4b12      	ldr	r3, [pc, #72]	; (405a48 <sd_mmc_check+0x248>)
  4059fe:	4798      	blx	r3
  405a00:	2800      	cmp	r0, #0
  405a02:	f43f af1a 	beq.w	40583a <sd_mmc_check+0x3a>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  405a06:	4b0c      	ldr	r3, [pc, #48]	; (405a38 <sd_mmc_check+0x238>)
  405a08:	681a      	ldr	r2, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  405a0a:	7c93      	ldrb	r3, [r2, #18]
	value &=  ((uint32_t)1 << size) - 1;
  405a0c:	f3c3 0383 	ubfx	r3, r3, #2, #4
  405a10:	3b01      	subs	r3, #1
  405a12:	2b03      	cmp	r3, #3
  405a14:	d826      	bhi.n	405a64 <sd_mmc_check+0x264>
  405a16:	e8df f013 	tbh	[pc, r3, lsl #1]
  405a1a:	00f0      	.short	0x00f0
  405a1c:	00f600f3 	.word	0x00f600f3
  405a20:	00f9      	.short	0x00f9
				sd_mmc_card->type |= CARD_TYPE_HC;
  405a22:	4b05      	ldr	r3, [pc, #20]	; (405a38 <sd_mmc_check+0x238>)
  405a24:	681a      	ldr	r2, [r3, #0]
  405a26:	7bd3      	ldrb	r3, [r2, #15]
  405a28:	f043 0308 	orr.w	r3, r3, #8
  405a2c:	73d3      	strb	r3, [r2, #15]
  405a2e:	e7d0      	b.n	4059d2 <sd_mmc_check+0x1d2>
  405a30:	00405695 	.word	0x00405695
  405a34:	004057c5 	.word	0x004057c5
  405a38:	20000df8 	.word	0x20000df8
  405a3c:	004064b7 	.word	0x004064b7
  405a40:	004064d9 	.word	0x004064d9
  405a44:	00406505 	.word	0x00406505
  405a48:	00405791 	.word	0x00405791
  405a4c:	00410dac 	.word	0x00410dac
  405a50:	00410dc8 	.word	0x00410dc8
  405a54:	00081133 	.word	0x00081133
  405a58:	00406539 	.word	0x00406539
  405a5c:	00406679 	.word	0x00406679
  405a60:	004066e1 	.word	0x004066e1
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  405a64:	2312      	movs	r3, #18
  405a66:	7413      	strb	r3, [r2, #16]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  405a68:	7d53      	ldrb	r3, [r2, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  405a6a:	f003 0007 	and.w	r0, r3, #7
	sd_mmc_card->clock = unit * mul * 1000;
  405a6e:	49a3      	ldr	r1, [pc, #652]	; (405cfc <sd_mmc_check+0x4fc>)
  405a70:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
  405a74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  405a78:	fb01 f100 	mul.w	r1, r1, r0
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  405a7c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
  405a80:	489f      	ldr	r0, [pc, #636]	; (405d00 <sd_mmc_check+0x500>)
  405a82:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  405a86:	fb03 f301 	mul.w	r3, r3, r1
  405a8a:	6013      	str	r3, [r2, #0]
  405a8c:	7e91      	ldrb	r1, [r2, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  405a8e:	7e50      	ldrb	r0, [r2, #25]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  405a90:	7e13      	ldrb	r3, [r2, #24]
  405a92:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  405a94:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
  405a98:	ea43 13a1 	orr.w	r3, r3, r1, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  405a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  405aa0:	f640 71ff 	movw	r1, #4095	; 0xfff
  405aa4:	428b      	cmp	r3, r1
  405aa6:	d00f      	beq.n	405ac8 <sd_mmc_check+0x2c8>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  405aa8:	7f10      	ldrb	r0, [r2, #28]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  405aaa:	7ed1      	ldrb	r1, [r2, #27]
  405aac:	0049      	lsls	r1, r1, #1
  405aae:	ea41 11e0 	orr.w	r1, r1, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  405ab2:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
  405ab4:	f001 0107 	and.w	r1, r1, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  405ab8:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  405aba:	408b      	lsls	r3, r1
  405abc:	7dd1      	ldrb	r1, [r2, #23]
  405abe:	f001 010f 	and.w	r1, r1, #15
		sd_mmc_card->capacity = blocknr *
  405ac2:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  405ac4:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
  405ac6:	6053      	str	r3, [r2, #4]
			(uint32_t)sd_mmc_card->rca << 16)) {
  405ac8:	8991      	ldrh	r1, [r2, #12]
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  405aca:	0409      	lsls	r1, r1, #16
  405acc:	f243 1007 	movw	r0, #12551	; 0x3107
  405ad0:	4b8c      	ldr	r3, [pc, #560]	; (405d04 <sd_mmc_check+0x504>)
  405ad2:	4798      	blx	r3
  405ad4:	2800      	cmp	r0, #0
  405ad6:	f43f aeb0 	beq.w	40583a <sd_mmc_check+0x3a>
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  405ada:	4b8b      	ldr	r3, [pc, #556]	; (405d08 <sd_mmc_check+0x508>)
  405adc:	681b      	ldr	r3, [r3, #0]
  405ade:	7c1b      	ldrb	r3, [r3, #16]
  405ae0:	2b3f      	cmp	r3, #63	; 0x3f
  405ae2:	f240 80a0 	bls.w	405c26 <sd_mmc_check+0x426>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  405ae6:	2100      	movs	r1, #0
  405ae8:	9100      	str	r1, [sp, #0]
  405aea:	2301      	movs	r3, #1
  405aec:	f44f 7200 	mov.w	r2, #512	; 0x200
  405af0:	4886      	ldr	r0, [pc, #536]	; (405d0c <sd_mmc_check+0x50c>)
  405af2:	4d87      	ldr	r5, [pc, #540]	; (405d10 <sd_mmc_check+0x510>)
  405af4:	47a8      	blx	r5
  405af6:	2800      	cmp	r0, #0
  405af8:	f43f ae9f 	beq.w	40583a <sd_mmc_check+0x3a>
  405afc:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
  405afe:	4e85      	ldr	r6, [pc, #532]	; (405d14 <sd_mmc_check+0x514>)
  405b00:	a803      	add	r0, sp, #12
  405b02:	47b0      	blx	r6
  405b04:	2800      	cmp	r0, #0
  405b06:	f43f ae98 	beq.w	40583a <sd_mmc_check+0x3a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  405b0a:	3501      	adds	r5, #1
  405b0c:	b2ad      	uxth	r5, r5
  405b0e:	2d32      	cmp	r5, #50	; 0x32
  405b10:	d1f6      	bne.n	405b00 <sd_mmc_check+0x300>
			& MMC_CTYPE_52MHZ;
  405b12:	9e03      	ldr	r6, [sp, #12]
  405b14:	f006 0602 	and.w	r6, r6, #2
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  405b18:	4b7b      	ldr	r3, [pc, #492]	; (405d08 <sd_mmc_check+0x508>)
  405b1a:	681b      	ldr	r3, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  405b1c:	7e9a      	ldrb	r2, [r3, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  405b1e:	7e59      	ldrb	r1, [r3, #25]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  405b20:	7e1b      	ldrb	r3, [r3, #24]
  405b22:	029b      	lsls	r3, r3, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  405b24:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  405b28:	ea43 13a2 	orr.w	r3, r3, r2, asr #6
	value &=  ((uint32_t)1 << size) - 1;
  405b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
  405b30:	f640 72ff 	movw	r2, #4095	; 0xfff
  405b34:	4293      	cmp	r3, r2
  405b36:	d10e      	bne.n	405b56 <sd_mmc_check+0x356>
			if (!driver_read_word(&sec_count)) {
  405b38:	4f76      	ldr	r7, [pc, #472]	; (405d14 <sd_mmc_check+0x514>)
  405b3a:	a804      	add	r0, sp, #16
  405b3c:	47b8      	blx	r7
  405b3e:	2800      	cmp	r0, #0
  405b40:	f43f ae7b 	beq.w	40583a <sd_mmc_check+0x3a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  405b44:	3501      	adds	r5, #1
  405b46:	b2ad      	uxth	r5, r5
  405b48:	2d35      	cmp	r5, #53	; 0x35
  405b4a:	d9f6      	bls.n	405b3a <sd_mmc_check+0x33a>
		sd_mmc_card->capacity = sec_count / 2;
  405b4c:	4b6e      	ldr	r3, [pc, #440]	; (405d08 <sd_mmc_check+0x508>)
  405b4e:	681a      	ldr	r2, [r3, #0]
  405b50:	9b04      	ldr	r3, [sp, #16]
  405b52:	085b      	lsrs	r3, r3, #1
  405b54:	6053      	str	r3, [r2, #4]
		if (!driver_read_word(&sec_count)) {
  405b56:	4f6f      	ldr	r7, [pc, #444]	; (405d14 <sd_mmc_check+0x514>)
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  405b58:	2d7f      	cmp	r5, #127	; 0x7f
  405b5a:	d95a      	bls.n	405c12 <sd_mmc_check+0x412>
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  405b5c:	4b6e      	ldr	r3, [pc, #440]	; (405d18 <sd_mmc_check+0x518>)
  405b5e:	7818      	ldrb	r0, [r3, #0]
  405b60:	4b6e      	ldr	r3, [pc, #440]	; (405d1c <sd_mmc_check+0x51c>)
  405b62:	4798      	blx	r3
  405b64:	2803      	cmp	r0, #3
  405b66:	d91d      	bls.n	405ba4 <sd_mmc_check+0x3a4>
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  405b68:	4b6b      	ldr	r3, [pc, #428]	; (405d18 <sd_mmc_check+0x518>)
  405b6a:	7818      	ldrb	r0, [r3, #0]
  405b6c:	4b6b      	ldr	r3, [pc, #428]	; (405d1c <sd_mmc_check+0x51c>)
  405b6e:	4798      	blx	r3
  405b70:	4605      	mov	r5, r0
	switch (bus_width) {
  405b72:	2804      	cmp	r0, #4
  405b74:	d055      	beq.n	405c22 <sd_mmc_check+0x422>
		arg = MMC_CMD6_ACCESS_SET_BITS
  405b76:	4b6a      	ldr	r3, [pc, #424]	; (405d20 <sd_mmc_check+0x520>)
  405b78:	496a      	ldr	r1, [pc, #424]	; (405d24 <sd_mmc_check+0x524>)
  405b7a:	2808      	cmp	r0, #8
  405b7c:	bf18      	it	ne
  405b7e:	4619      	movne	r1, r3
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  405b80:	f243 1006 	movw	r0, #12550	; 0x3106
  405b84:	4b5f      	ldr	r3, [pc, #380]	; (405d04 <sd_mmc_check+0x504>)
  405b86:	4798      	blx	r3
  405b88:	2800      	cmp	r0, #0
  405b8a:	f43f ae56 	beq.w	40583a <sd_mmc_check+0x3a>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  405b8e:	4b66      	ldr	r3, [pc, #408]	; (405d28 <sd_mmc_check+0x528>)
  405b90:	4798      	blx	r3
  405b92:	f010 0f80 	tst.w	r0, #128	; 0x80
  405b96:	f47f ae50 	bne.w	40583a <sd_mmc_check+0x3a>
	sd_mmc_card->bus_width = bus_width;
  405b9a:	4b5b      	ldr	r3, [pc, #364]	; (405d08 <sd_mmc_check+0x508>)
  405b9c:	681b      	ldr	r3, [r3, #0]
  405b9e:	745d      	strb	r5, [r3, #17]
			sd_mmc_configure_slot();
  405ba0:	4b62      	ldr	r3, [pc, #392]	; (405d2c <sd_mmc_check+0x52c>)
  405ba2:	4798      	blx	r3
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  405ba4:	4b62      	ldr	r3, [pc, #392]	; (405d30 <sd_mmc_check+0x530>)
  405ba6:	4798      	blx	r3
  405ba8:	b1b8      	cbz	r0, 405bda <sd_mmc_check+0x3da>
  405baa:	b1b6      	cbz	r6, 405bda <sd_mmc_check+0x3da>
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  405bac:	4961      	ldr	r1, [pc, #388]	; (405d34 <sd_mmc_check+0x534>)
  405bae:	f243 1006 	movw	r0, #12550	; 0x3106
  405bb2:	4b54      	ldr	r3, [pc, #336]	; (405d04 <sd_mmc_check+0x504>)
  405bb4:	4798      	blx	r3
  405bb6:	2800      	cmp	r0, #0
  405bb8:	f43f ae3f 	beq.w	40583a <sd_mmc_check+0x3a>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  405bbc:	4b5a      	ldr	r3, [pc, #360]	; (405d28 <sd_mmc_check+0x528>)
  405bbe:	4798      	blx	r3
  405bc0:	f010 0f80 	tst.w	r0, #128	; 0x80
  405bc4:	f47f ae39 	bne.w	40583a <sd_mmc_check+0x3a>
	sd_mmc_card->high_speed = 1;
  405bc8:	4b4f      	ldr	r3, [pc, #316]	; (405d08 <sd_mmc_check+0x508>)
  405bca:	681b      	ldr	r3, [r3, #0]
  405bcc:	2201      	movs	r2, #1
  405bce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock = 52000000lu;
  405bd2:	4a59      	ldr	r2, [pc, #356]	; (405d38 <sd_mmc_check+0x538>)
  405bd4:	601a      	str	r2, [r3, #0]
			sd_mmc_configure_slot();
  405bd6:	4b55      	ldr	r3, [pc, #340]	; (405d2c <sd_mmc_check+0x52c>)
  405bd8:	4798      	blx	r3
		arg = MMC_CMD6_ACCESS_SET_BITS
  405bda:	250a      	movs	r5, #10
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  405bdc:	f44f 7800 	mov.w	r8, #512	; 0x200
  405be0:	f241 1710 	movw	r7, #4368	; 0x1110
  405be4:	4e47      	ldr	r6, [pc, #284]	; (405d04 <sd_mmc_check+0x504>)
  405be6:	4641      	mov	r1, r8
  405be8:	4638      	mov	r0, r7
  405bea:	47b0      	blx	r6
  405bec:	2800      	cmp	r0, #0
  405bee:	d16e      	bne.n	405cce <sd_mmc_check+0x4ce>
  405bf0:	3d01      	subs	r5, #1
	while (retry--) {
  405bf2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  405bf6:	d1f6      	bne.n	405be6 <sd_mmc_check+0x3e6>
  405bf8:	e61f      	b.n	40583a <sd_mmc_check+0x3a>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  405bfa:	2314      	movs	r3, #20
  405bfc:	7413      	strb	r3, [r2, #16]
  405bfe:	e733      	b.n	405a68 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  405c00:	2322      	movs	r3, #34	; 0x22
  405c02:	7413      	strb	r3, [r2, #16]
  405c04:	e730      	b.n	405a68 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
  405c06:	2330      	movs	r3, #48	; 0x30
  405c08:	7413      	strb	r3, [r2, #16]
  405c0a:	e72d      	b.n	405a68 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_4;
  405c0c:	2340      	movs	r3, #64	; 0x40
  405c0e:	7413      	strb	r3, [r2, #16]
  405c10:	e72a      	b.n	405a68 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
  405c12:	a804      	add	r0, sp, #16
  405c14:	47b8      	blx	r7
  405c16:	2800      	cmp	r0, #0
  405c18:	f43f ae0f 	beq.w	40583a <sd_mmc_check+0x3a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  405c1c:	3501      	adds	r5, #1
  405c1e:	b2ad      	uxth	r5, r5
  405c20:	e79a      	b.n	405b58 <sd_mmc_check+0x358>
		arg = MMC_CMD6_ACCESS_SET_BITS
  405c22:	4946      	ldr	r1, [pc, #280]	; (405d3c <sd_mmc_check+0x53c>)
  405c24:	e7ac      	b.n	405b80 <sd_mmc_check+0x380>
		sd_mmc_configure_slot();
  405c26:	4b41      	ldr	r3, [pc, #260]	; (405d2c <sd_mmc_check+0x52c>)
  405c28:	4798      	blx	r3
  405c2a:	e7d6      	b.n	405bda <sd_mmc_check+0x3da>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  405c2c:	7ed9      	ldrb	r1, [r3, #27]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  405c2e:	7e98      	ldrb	r0, [r3, #26]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  405c30:	7e5a      	ldrb	r2, [r3, #25]
  405c32:	0412      	lsls	r2, r2, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  405c34:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  405c38:	430a      	orrs	r2, r1
	value &=  ((uint32_t)1 << size) - 1;
  405c3a:	f3c2 0215 	ubfx	r2, r2, #0, #22
				* 512;
  405c3e:	3201      	adds	r2, #1
  405c40:	0252      	lsls	r2, r2, #9
		sd_mmc_card->capacity =
  405c42:	605a      	str	r2, [r3, #4]
  405c44:	e658      	b.n	4058f8 <sd_mmc_check+0xf8>
		sd_mmc_card->version = CARD_VER_SD_1_0;
  405c46:	4b30      	ldr	r3, [pc, #192]	; (405d08 <sd_mmc_check+0x508>)
  405c48:	681b      	ldr	r3, [r3, #0]
  405c4a:	2210      	movs	r2, #16
  405c4c:	741a      	strb	r2, [r3, #16]
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  405c4e:	4b32      	ldr	r3, [pc, #200]	; (405d18 <sd_mmc_check+0x518>)
  405c50:	7818      	ldrb	r0, [r3, #0]
  405c52:	4b32      	ldr	r3, [pc, #200]	; (405d1c <sd_mmc_check+0x51c>)
  405c54:	4798      	blx	r3
  405c56:	2803      	cmp	r0, #3
  405c58:	d91c      	bls.n	405c94 <sd_mmc_check+0x494>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  405c5a:	4b2b      	ldr	r3, [pc, #172]	; (405d08 <sd_mmc_check+0x508>)
  405c5c:	681b      	ldr	r3, [r3, #0]
  405c5e:	7bda      	ldrb	r2, [r3, #15]
  405c60:	f012 0f01 	tst.w	r2, #1
  405c64:	d014      	beq.n	405c90 <sd_mmc_check+0x490>
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  405c66:	8999      	ldrh	r1, [r3, #12]
  405c68:	0409      	lsls	r1, r1, #16
  405c6a:	f241 1037 	movw	r0, #4407	; 0x1137
  405c6e:	4b25      	ldr	r3, [pc, #148]	; (405d04 <sd_mmc_check+0x504>)
  405c70:	4798      	blx	r3
  405c72:	2800      	cmp	r0, #0
  405c74:	f43f ade1 	beq.w	40583a <sd_mmc_check+0x3a>
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  405c78:	2102      	movs	r1, #2
  405c7a:	f241 1006 	movw	r0, #4358	; 0x1106
  405c7e:	4b21      	ldr	r3, [pc, #132]	; (405d04 <sd_mmc_check+0x504>)
  405c80:	4798      	blx	r3
  405c82:	2800      	cmp	r0, #0
  405c84:	f43f add9 	beq.w	40583a <sd_mmc_check+0x3a>
	sd_mmc_card->bus_width = 4;
  405c88:	4b1f      	ldr	r3, [pc, #124]	; (405d08 <sd_mmc_check+0x508>)
  405c8a:	681b      	ldr	r3, [r3, #0]
  405c8c:	2204      	movs	r2, #4
  405c8e:	745a      	strb	r2, [r3, #17]
		sd_mmc_configure_slot();
  405c90:	4b26      	ldr	r3, [pc, #152]	; (405d2c <sd_mmc_check+0x52c>)
  405c92:	4798      	blx	r3
	if (driver_is_high_speed_capable()) {
  405c94:	4b26      	ldr	r3, [pc, #152]	; (405d30 <sd_mmc_check+0x530>)
  405c96:	4798      	blx	r3
  405c98:	b150      	cbz	r0, 405cb0 <sd_mmc_check+0x4b0>
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  405c9a:	4b1b      	ldr	r3, [pc, #108]	; (405d08 <sd_mmc_check+0x508>)
  405c9c:	681b      	ldr	r3, [r3, #0]
  405c9e:	7bda      	ldrb	r2, [r3, #15]
  405ca0:	f012 0f01 	tst.w	r2, #1
  405ca4:	d002      	beq.n	405cac <sd_mmc_check+0x4ac>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  405ca6:	7c1b      	ldrb	r3, [r3, #16]
  405ca8:	2b10      	cmp	r3, #16
  405caa:	d84b      	bhi.n	405d44 <sd_mmc_check+0x544>
		sd_mmc_configure_slot();
  405cac:	4b1f      	ldr	r3, [pc, #124]	; (405d2c <sd_mmc_check+0x52c>)
  405cae:	4798      	blx	r3
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  405cb0:	4b15      	ldr	r3, [pc, #84]	; (405d08 <sd_mmc_check+0x508>)
  405cb2:	681b      	ldr	r3, [r3, #0]
  405cb4:	7bdb      	ldrb	r3, [r3, #15]
  405cb6:	f013 0f01 	tst.w	r3, #1
  405cba:	d008      	beq.n	405cce <sd_mmc_check+0x4ce>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  405cbc:	f44f 7100 	mov.w	r1, #512	; 0x200
  405cc0:	f241 1010 	movw	r0, #4368	; 0x1110
  405cc4:	4b0f      	ldr	r3, [pc, #60]	; (405d04 <sd_mmc_check+0x504>)
  405cc6:	4798      	blx	r3
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
  405cc8:	2800      	cmp	r0, #0
  405cca:	f43f adb6 	beq.w	40583a <sd_mmc_check+0x3a>
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  405cce:	4b0e      	ldr	r3, [pc, #56]	; (405d08 <sd_mmc_check+0x508>)
  405cd0:	681b      	ldr	r3, [r3, #0]
  405cd2:	2200      	movs	r2, #0
  405cd4:	739a      	strb	r2, [r3, #14]
		sd_mmc_deselect_slot();
  405cd6:	4b1a      	ldr	r3, [pc, #104]	; (405d40 <sd_mmc_check+0x540>)
  405cd8:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
  405cda:	e59b      	b.n	405814 <sd_mmc_check+0x14>
		sd_mmc_card->version = CARD_VER_SD_1_10;
  405cdc:	4b0a      	ldr	r3, [pc, #40]	; (405d08 <sd_mmc_check+0x508>)
  405cde:	681b      	ldr	r3, [r3, #0]
  405ce0:	221a      	movs	r2, #26
  405ce2:	741a      	strb	r2, [r3, #16]
  405ce4:	e7b3      	b.n	405c4e <sd_mmc_check+0x44e>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  405ce6:	f89d 3012 	ldrb.w	r3, [sp, #18]
  405cea:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  405cec:	4b06      	ldr	r3, [pc, #24]	; (405d08 <sd_mmc_check+0x508>)
  405cee:	681b      	ldr	r3, [r3, #0]
  405cf0:	bf14      	ite	ne
  405cf2:	2230      	movne	r2, #48	; 0x30
			sd_mmc_card->version = CARD_VER_SD_2_0;
  405cf4:	2220      	moveq	r2, #32
  405cf6:	741a      	strb	r2, [r3, #16]
  405cf8:	e7a9      	b.n	405c4e <sd_mmc_check+0x44e>
  405cfa:	bf00      	nop
  405cfc:	00410dac 	.word	0x00410dac
  405d00:	00410d6c 	.word	0x00410d6c
  405d04:	004064d9 	.word	0x004064d9
  405d08:	20000df8 	.word	0x20000df8
  405d0c:	00081108 	.word	0x00081108
  405d10:	00406539 	.word	0x00406539
  405d14:	00406605 	.word	0x00406605
  405d18:	20000e01 	.word	0x20000e01
  405d1c:	00406435 	.word	0x00406435
  405d20:	01b70000 	.word	0x01b70000
  405d24:	01b70200 	.word	0x01b70200
  405d28:	00406505 	.word	0x00406505
  405d2c:	00405669 	.word	0x00405669
  405d30:	0040643f 	.word	0x0040643f
  405d34:	03b90100 	.word	0x03b90100
  405d38:	03197500 	.word	0x03197500
  405d3c:	01b70100 	.word	0x01b70100
  405d40:	004057c5 	.word	0x004057c5
	uint8_t switch_status[SD_SW_STATUS_BSIZE] = {0};
  405d44:	2540      	movs	r5, #64	; 0x40
  405d46:	462a      	mov	r2, r5
  405d48:	2100      	movs	r1, #0
  405d4a:	a804      	add	r0, sp, #16
  405d4c:	4b3a      	ldr	r3, [pc, #232]	; (405e38 <sd_mmc_check+0x638>)
  405d4e:	4798      	blx	r3
	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  405d50:	2301      	movs	r3, #1
  405d52:	9300      	str	r3, [sp, #0]
  405d54:	462a      	mov	r2, r5
  405d56:	4939      	ldr	r1, [pc, #228]	; (405e3c <sd_mmc_check+0x63c>)
  405d58:	4839      	ldr	r0, [pc, #228]	; (405e40 <sd_mmc_check+0x640>)
  405d5a:	4d3a      	ldr	r5, [pc, #232]	; (405e44 <sd_mmc_check+0x644>)
  405d5c:	47a8      	blx	r5
  405d5e:	2800      	cmp	r0, #0
  405d60:	f43f ad6b 	beq.w	40583a <sd_mmc_check+0x3a>
	if (!driver_start_read_blocks(switch_status, 1)) {
  405d64:	2101      	movs	r1, #1
  405d66:	a804      	add	r0, sp, #16
  405d68:	4b37      	ldr	r3, [pc, #220]	; (405e48 <sd_mmc_check+0x648>)
  405d6a:	4798      	blx	r3
  405d6c:	2800      	cmp	r0, #0
  405d6e:	f43f ad64 	beq.w	40583a <sd_mmc_check+0x3a>
	if (!driver_wait_end_of_read_blocks()) {
  405d72:	4b36      	ldr	r3, [pc, #216]	; (405e4c <sd_mmc_check+0x64c>)
  405d74:	4798      	blx	r3
  405d76:	2800      	cmp	r0, #0
  405d78:	f43f ad5f 	beq.w	40583a <sd_mmc_check+0x3a>
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  405d7c:	4b34      	ldr	r3, [pc, #208]	; (405e50 <sd_mmc_check+0x650>)
  405d7e:	4798      	blx	r3
  405d80:	f010 0f80 	tst.w	r0, #128	; 0x80
  405d84:	f47f ad59 	bne.w	40583a <sd_mmc_check+0x3a>
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  405d88:	f89d 3020 	ldrb.w	r3, [sp, #32]
  405d8c:	f003 030f 	and.w	r3, r3, #15
  405d90:	2b0f      	cmp	r3, #15
  405d92:	d08b      	beq.n	405cac <sd_mmc_check+0x4ac>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  405d94:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  405d98:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  405d9c:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
  405da0:	f47f ad4b 	bne.w	40583a <sd_mmc_check+0x3a>
	driver_send_clock();
  405da4:	4b2b      	ldr	r3, [pc, #172]	; (405e54 <sd_mmc_check+0x654>)
  405da6:	4798      	blx	r3
	sd_mmc_card->high_speed = 1;
  405da8:	4b2b      	ldr	r3, [pc, #172]	; (405e58 <sd_mmc_check+0x658>)
  405daa:	681b      	ldr	r3, [r3, #0]
  405dac:	2201      	movs	r2, #1
  405dae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	sd_mmc_card->clock *= 2;
  405db2:	681a      	ldr	r2, [r3, #0]
  405db4:	0052      	lsls	r2, r2, #1
  405db6:	601a      	str	r2, [r3, #0]
  405db8:	e778      	b.n	405cac <sd_mmc_check+0x4ac>
	*v2 = 0;
  405dba:	2200      	movs	r2, #0
  405dbc:	e54e      	b.n	40585c <sd_mmc_check+0x5c>
  405dbe:	2a00      	cmp	r2, #0
  405dc0:	4f26      	ldr	r7, [pc, #152]	; (405e5c <sd_mmc_check+0x65c>)
  405dc2:	bf08      	it	eq
  405dc4:	f44f 17fc 	moveq.w	r7, #2064384	; 0x1f8000
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  405dc8:	f640 0535 	movw	r5, #2101	; 0x835
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  405dcc:	f04f 0800 	mov.w	r8, #0
  405dd0:	4e23      	ldr	r6, [pc, #140]	; (405e60 <sd_mmc_check+0x660>)
		resp = driver_get_response();
  405dd2:	f8df 907c 	ldr.w	r9, [pc, #124]	; 405e50 <sd_mmc_check+0x650>
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  405dd6:	4641      	mov	r1, r8
  405dd8:	f241 1037 	movw	r0, #4407	; 0x1137
  405ddc:	47b0      	blx	r6
  405dde:	b150      	cbz	r0, 405df6 <sd_mmc_check+0x5f6>
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  405de0:	4639      	mov	r1, r7
  405de2:	f244 5029 	movw	r0, #17705	; 0x4529
  405de6:	47b0      	blx	r6
  405de8:	b128      	cbz	r0, 405df6 <sd_mmc_check+0x5f6>
		resp = driver_get_response();
  405dea:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
  405dec:	2800      	cmp	r0, #0
  405dee:	f6ff add2 	blt.w	405996 <sd_mmc_check+0x196>
		if (retry-- == 0) {
  405df2:	3d01      	subs	r5, #1
  405df4:	d1ef      	bne.n	405dd6 <sd_mmc_check+0x5d6>
			sd_mmc_card->type = CARD_TYPE_MMC;
  405df6:	4b18      	ldr	r3, [pc, #96]	; (405e58 <sd_mmc_check+0x658>)
  405df8:	681b      	ldr	r3, [r3, #0]
  405dfa:	2202      	movs	r2, #2
  405dfc:	73da      	strb	r2, [r3, #15]
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  405dfe:	2100      	movs	r1, #0
  405e00:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  405e04:	4b16      	ldr	r3, [pc, #88]	; (405e60 <sd_mmc_check+0x660>)
  405e06:	4798      	blx	r3
  405e08:	2800      	cmp	r0, #0
  405e0a:	f43f ad16 	beq.w	40583a <sd_mmc_check+0x3a>
  405e0e:	f241 0569 	movw	r5, #4201	; 0x1069
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  405e12:	f8df 8048 	ldr.w	r8, [pc, #72]	; 405e5c <sd_mmc_check+0x65c>
  405e16:	4f12      	ldr	r7, [pc, #72]	; (405e60 <sd_mmc_check+0x660>)
		resp = driver_get_response();
  405e18:	4e0d      	ldr	r6, [pc, #52]	; (405e50 <sd_mmc_check+0x650>)
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  405e1a:	4641      	mov	r1, r8
  405e1c:	f244 5001 	movw	r0, #17665	; 0x4501
  405e20:	47b8      	blx	r7
  405e22:	2800      	cmp	r0, #0
  405e24:	f43f ad09 	beq.w	40583a <sd_mmc_check+0x3a>
		resp = driver_get_response();
  405e28:	47b0      	blx	r6
		if (resp & OCR_POWER_UP_BUSY) {
  405e2a:	2800      	cmp	r0, #0
  405e2c:	f6ff adcc 	blt.w	4059c8 <sd_mmc_check+0x1c8>
		if (retry-- == 0) {
  405e30:	3d01      	subs	r5, #1
  405e32:	d1f2      	bne.n	405e1a <sd_mmc_check+0x61a>
  405e34:	e501      	b.n	40583a <sd_mmc_check+0x3a>
  405e36:	bf00      	nop
  405e38:	0040b671 	.word	0x0040b671
  405e3c:	80ffff01 	.word	0x80ffff01
  405e40:	00081106 	.word	0x00081106
  405e44:	00406539 	.word	0x00406539
  405e48:	00406679 	.word	0x00406679
  405e4c:	004066e1 	.word	0x004066e1
  405e50:	00406505 	.word	0x00406505
  405e54:	004064b7 	.word	0x004064b7
  405e58:	20000df8 	.word	0x20000df8
  405e5c:	401f8000 	.word	0x401f8000
  405e60:	004064d9 	.word	0x004064d9

00405e64 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
  405e64:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  405e66:	4b05      	ldr	r3, [pc, #20]	; (405e7c <sd_mmc_get_type+0x18>)
  405e68:	4798      	blx	r3
  405e6a:	b108      	cbz	r0, 405e70 <sd_mmc_get_type+0xc>
		return CARD_TYPE_UNKNOWN;
  405e6c:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
  405e6e:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  405e70:	4b03      	ldr	r3, [pc, #12]	; (405e80 <sd_mmc_get_type+0x1c>)
  405e72:	4798      	blx	r3
	return sd_mmc_card->type;
  405e74:	4b03      	ldr	r3, [pc, #12]	; (405e84 <sd_mmc_get_type+0x20>)
  405e76:	681b      	ldr	r3, [r3, #0]
  405e78:	7bd8      	ldrb	r0, [r3, #15]
  405e7a:	bd08      	pop	{r3, pc}
  405e7c:	00405695 	.word	0x00405695
  405e80:	004057c5 	.word	0x004057c5
  405e84:	20000df8 	.word	0x20000df8

00405e88 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  405e88:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  405e8a:	4b05      	ldr	r3, [pc, #20]	; (405ea0 <sd_mmc_get_capacity+0x18>)
  405e8c:	4798      	blx	r3
  405e8e:	b108      	cbz	r0, 405e94 <sd_mmc_get_capacity+0xc>
		return 0;
  405e90:	2000      	movs	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
  405e92:	bd08      	pop	{r3, pc}
	sd_mmc_deselect_slot();
  405e94:	4b03      	ldr	r3, [pc, #12]	; (405ea4 <sd_mmc_get_capacity+0x1c>)
  405e96:	4798      	blx	r3
	return sd_mmc_card->capacity;
  405e98:	4b03      	ldr	r3, [pc, #12]	; (405ea8 <sd_mmc_get_capacity+0x20>)
  405e9a:	681b      	ldr	r3, [r3, #0]
  405e9c:	6858      	ldr	r0, [r3, #4]
  405e9e:	bd08      	pop	{r3, pc}
  405ea0:	00405695 	.word	0x00405695
  405ea4:	004057c5 	.word	0x004057c5
  405ea8:	20000df8 	.word	0x20000df8

00405eac <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
  405eac:	2000      	movs	r0, #0
  405eae:	4770      	bx	lr

00405eb0 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  405eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405eb4:	b082      	sub	sp, #8
  405eb6:	468a      	mov	sl, r1
  405eb8:	4691      	mov	r9, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  405eba:	4b26      	ldr	r3, [pc, #152]	; (405f54 <sd_mmc_init_read_blocks+0xa4>)
  405ebc:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  405ebe:	4680      	mov	r8, r0
  405ec0:	b118      	cbz	r0, 405eca <sd_mmc_init_read_blocks+0x1a>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  405ec2:	4640      	mov	r0, r8
  405ec4:	b002      	add	sp, #8
  405ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405eca:	4c23      	ldr	r4, [pc, #140]	; (405f58 <sd_mmc_init_read_blocks+0xa8>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  405ecc:	4e23      	ldr	r6, [pc, #140]	; (405f5c <sd_mmc_init_read_blocks+0xac>)
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  405ece:	4d24      	ldr	r5, [pc, #144]	; (405f60 <sd_mmc_init_read_blocks+0xb0>)
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  405ed0:	4f24      	ldr	r7, [pc, #144]	; (405f64 <sd_mmc_init_read_blocks+0xb4>)
					(uint32_t)sd_mmc_card->rca << 16)) {
  405ed2:	6833      	ldr	r3, [r6, #0]
  405ed4:	8999      	ldrh	r1, [r3, #12]
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  405ed6:	0409      	lsls	r1, r1, #16
  405ed8:	f241 100d 	movw	r0, #4365	; 0x110d
  405edc:	47a8      	blx	r5
  405ede:	b128      	cbz	r0, 405eec <sd_mmc_init_read_blocks+0x3c>
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  405ee0:	47b8      	blx	r7
  405ee2:	f410 7f80 	tst.w	r0, #256	; 0x100
  405ee6:	d117      	bne.n	405f18 <sd_mmc_init_read_blocks+0x68>
		if (nec_timeout-- == 0) {
  405ee8:	3c01      	subs	r4, #1
  405eea:	d1f2      	bne.n	405ed2 <sd_mmc_init_read_blocks+0x22>
		sd_mmc_deselect_slot();
  405eec:	4b1e      	ldr	r3, [pc, #120]	; (405f68 <sd_mmc_init_read_blocks+0xb8>)
  405eee:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  405ef0:	f04f 0805 	mov.w	r8, #5
  405ef4:	e7e5      	b.n	405ec2 <sd_mmc_init_read_blocks+0x12>
		resp = driver_get_response();
  405ef6:	4b1b      	ldr	r3, [pc, #108]	; (405f64 <sd_mmc_init_read_blocks+0xb4>)
  405ef8:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  405efa:	4b1c      	ldr	r3, [pc, #112]	; (405f6c <sd_mmc_init_read_blocks+0xbc>)
  405efc:	4003      	ands	r3, r0
  405efe:	b933      	cbnz	r3, 405f0e <sd_mmc_init_read_blocks+0x5e>
	sd_mmc_nb_block_remaining = nb_block;
  405f00:	4b1b      	ldr	r3, [pc, #108]	; (405f70 <sd_mmc_init_read_blocks+0xc0>)
  405f02:	f8a3 9000 	strh.w	r9, [r3]
	sd_mmc_nb_block_to_tranfer = nb_block;
  405f06:	4b1b      	ldr	r3, [pc, #108]	; (405f74 <sd_mmc_init_read_blocks+0xc4>)
  405f08:	f8a3 9000 	strh.w	r9, [r3]
	return SD_MMC_OK;
  405f0c:	e7d9      	b.n	405ec2 <sd_mmc_init_read_blocks+0x12>
			sd_mmc_deselect_slot();
  405f0e:	4b16      	ldr	r3, [pc, #88]	; (405f68 <sd_mmc_init_read_blocks+0xb8>)
  405f10:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  405f12:	f04f 0805 	mov.w	r8, #5
  405f16:	e7d4      	b.n	405ec2 <sd_mmc_init_read_blocks+0x12>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
  405f18:	4b17      	ldr	r3, [pc, #92]	; (405f78 <sd_mmc_init_read_blocks+0xc8>)
  405f1a:	4818      	ldr	r0, [pc, #96]	; (405f7c <sd_mmc_init_read_blocks+0xcc>)
  405f1c:	f1b9 0f01 	cmp.w	r9, #1
  405f20:	bf98      	it	ls
  405f22:	4618      	movls	r0, r3
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  405f24:	4b0d      	ldr	r3, [pc, #52]	; (405f5c <sd_mmc_init_read_blocks+0xac>)
  405f26:	681b      	ldr	r3, [r3, #0]
  405f28:	7bdb      	ldrb	r3, [r3, #15]
  405f2a:	f013 0f08 	tst.w	r3, #8
  405f2e:	d101      	bne.n	405f34 <sd_mmc_init_read_blocks+0x84>
		arg = (start * SD_MMC_BLOCK_SIZE);
  405f30:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  405f34:	2301      	movs	r3, #1
  405f36:	9300      	str	r3, [sp, #0]
  405f38:	464b      	mov	r3, r9
  405f3a:	f44f 7200 	mov.w	r2, #512	; 0x200
  405f3e:	4651      	mov	r1, sl
  405f40:	4c0f      	ldr	r4, [pc, #60]	; (405f80 <sd_mmc_init_read_blocks+0xd0>)
  405f42:	47a0      	blx	r4
  405f44:	2800      	cmp	r0, #0
  405f46:	d1d6      	bne.n	405ef6 <sd_mmc_init_read_blocks+0x46>
		sd_mmc_deselect_slot();
  405f48:	4b07      	ldr	r3, [pc, #28]	; (405f68 <sd_mmc_init_read_blocks+0xb8>)
  405f4a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  405f4c:	f04f 0805 	mov.w	r8, #5
  405f50:	e7b7      	b.n	405ec2 <sd_mmc_init_read_blocks+0x12>
  405f52:	bf00      	nop
  405f54:	00405695 	.word	0x00405695
  405f58:	00030d41 	.word	0x00030d41
  405f5c:	20000df8 	.word	0x20000df8
  405f60:	004064d9 	.word	0x004064d9
  405f64:	00406505 	.word	0x00406505
  405f68:	004057c5 	.word	0x004057c5
  405f6c:	e4580000 	.word	0xe4580000
  405f70:	20000dfc 	.word	0x20000dfc
  405f74:	20000dfe 	.word	0x20000dfe
  405f78:	00081111 	.word	0x00081111
  405f7c:	00101112 	.word	0x00101112
  405f80:	00406539 	.word	0x00406539

00405f84 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
  405f84:	b510      	push	{r4, lr}
  405f86:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
  405f88:	4b06      	ldr	r3, [pc, #24]	; (405fa4 <sd_mmc_start_read_blocks+0x20>)
  405f8a:	4798      	blx	r3
  405f8c:	b920      	cbnz	r0, 405f98 <sd_mmc_start_read_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  405f8e:	2200      	movs	r2, #0
  405f90:	4b05      	ldr	r3, [pc, #20]	; (405fa8 <sd_mmc_start_read_blocks+0x24>)
  405f92:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  405f94:	2005      	movs	r0, #5
  405f96:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  405f98:	4a03      	ldr	r2, [pc, #12]	; (405fa8 <sd_mmc_start_read_blocks+0x24>)
  405f9a:	8813      	ldrh	r3, [r2, #0]
  405f9c:	1b1c      	subs	r4, r3, r4
  405f9e:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  405fa0:	2000      	movs	r0, #0
}
  405fa2:	bd10      	pop	{r4, pc}
  405fa4:	00406679 	.word	0x00406679
  405fa8:	20000dfc 	.word	0x20000dfc

00405fac <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
  405fac:	b510      	push	{r4, lr}
  405fae:	4604      	mov	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
  405fb0:	4b13      	ldr	r3, [pc, #76]	; (406000 <sd_mmc_wait_end_of_read_blocks+0x54>)
  405fb2:	4798      	blx	r3
  405fb4:	b908      	cbnz	r0, 405fba <sd_mmc_wait_end_of_read_blocks+0xe>
		return SD_MMC_ERR_COMM;
  405fb6:	2005      	movs	r0, #5
  405fb8:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  405fba:	b184      	cbz	r4, 405fde <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  405fbc:	2200      	movs	r2, #0
  405fbe:	4b11      	ldr	r3, [pc, #68]	; (406004 <sd_mmc_wait_end_of_read_blocks+0x58>)
  405fc0:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  405fc2:	4b11      	ldr	r3, [pc, #68]	; (406008 <sd_mmc_wait_end_of_read_blocks+0x5c>)
  405fc4:	881b      	ldrh	r3, [r3, #0]
  405fc6:	2b01      	cmp	r3, #1
  405fc8:	d00f      	beq.n	405fea <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  405fca:	2100      	movs	r1, #0
  405fcc:	f243 100c 	movw	r0, #12556	; 0x310c
  405fd0:	4b0e      	ldr	r3, [pc, #56]	; (40600c <sd_mmc_wait_end_of_read_blocks+0x60>)
  405fd2:	4798      	blx	r3
  405fd4:	b168      	cbz	r0, 405ff2 <sd_mmc_wait_end_of_read_blocks+0x46>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
  405fd6:	4b0e      	ldr	r3, [pc, #56]	; (406010 <sd_mmc_wait_end_of_read_blocks+0x64>)
  405fd8:	4798      	blx	r3
	return SD_MMC_OK;
  405fda:	2000      	movs	r0, #0
  405fdc:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  405fde:	4b09      	ldr	r3, [pc, #36]	; (406004 <sd_mmc_wait_end_of_read_blocks+0x58>)
  405fe0:	881b      	ldrh	r3, [r3, #0]
  405fe2:	2b00      	cmp	r3, #0
  405fe4:	d0ed      	beq.n	405fc2 <sd_mmc_wait_end_of_read_blocks+0x16>
		return SD_MMC_OK;
  405fe6:	2000      	movs	r0, #0
}
  405fe8:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  405fea:	4b09      	ldr	r3, [pc, #36]	; (406010 <sd_mmc_wait_end_of_read_blocks+0x64>)
  405fec:	4798      	blx	r3
		return SD_MMC_OK;
  405fee:	2000      	movs	r0, #0
  405ff0:	bd10      	pop	{r4, pc}
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
  405ff2:	2100      	movs	r1, #0
  405ff4:	f243 100c 	movw	r0, #12556	; 0x310c
  405ff8:	4b04      	ldr	r3, [pc, #16]	; (40600c <sd_mmc_wait_end_of_read_blocks+0x60>)
  405ffa:	4798      	blx	r3
  405ffc:	e7eb      	b.n	405fd6 <sd_mmc_wait_end_of_read_blocks+0x2a>
  405ffe:	bf00      	nop
  406000:	004066e1 	.word	0x004066e1
  406004:	20000dfc 	.word	0x20000dfc
  406008:	20000dfe 	.word	0x20000dfe
  40600c:	004064d9 	.word	0x004064d9
  406010:	004057c5 	.word	0x004057c5

00406014 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  406014:	b570      	push	{r4, r5, r6, lr}
  406016:	b082      	sub	sp, #8
  406018:	460e      	mov	r6, r1
  40601a:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  40601c:	4b16      	ldr	r3, [pc, #88]	; (406078 <sd_mmc_init_write_blocks+0x64>)
  40601e:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  406020:	4604      	mov	r4, r0
  406022:	b9b8      	cbnz	r0, 406054 <sd_mmc_init_write_blocks+0x40>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
  406024:	4b15      	ldr	r3, [pc, #84]	; (40607c <sd_mmc_init_write_blocks+0x68>)
  406026:	4816      	ldr	r0, [pc, #88]	; (406080 <sd_mmc_init_write_blocks+0x6c>)
  406028:	2d01      	cmp	r5, #1
  40602a:	bf98      	it	ls
  40602c:	4618      	movls	r0, r3
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  40602e:	4b15      	ldr	r3, [pc, #84]	; (406084 <sd_mmc_init_write_blocks+0x70>)
  406030:	681b      	ldr	r3, [r3, #0]
  406032:	7bdb      	ldrb	r3, [r3, #15]
  406034:	f013 0f08 	tst.w	r3, #8
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  406038:	bf08      	it	eq
  40603a:	0276      	lsleq	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  40603c:	2301      	movs	r3, #1
  40603e:	9300      	str	r3, [sp, #0]
  406040:	462b      	mov	r3, r5
  406042:	f44f 7200 	mov.w	r2, #512	; 0x200
  406046:	4631      	mov	r1, r6
  406048:	4e0f      	ldr	r6, [pc, #60]	; (406088 <sd_mmc_init_write_blocks+0x74>)
  40604a:	47b0      	blx	r6
  40604c:	b928      	cbnz	r0, 40605a <sd_mmc_init_write_blocks+0x46>
		sd_mmc_deselect_slot();
  40604e:	4b0f      	ldr	r3, [pc, #60]	; (40608c <sd_mmc_init_write_blocks+0x78>)
  406050:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
  406052:	2405      	movs	r4, #5
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  406054:	4620      	mov	r0, r4
  406056:	b002      	add	sp, #8
  406058:	bd70      	pop	{r4, r5, r6, pc}
		resp = driver_get_response();
  40605a:	4b0d      	ldr	r3, [pc, #52]	; (406090 <sd_mmc_init_write_blocks+0x7c>)
  40605c:	4798      	blx	r3
		if (resp & CARD_STATUS_ERR_RD_WR) {
  40605e:	4b0d      	ldr	r3, [pc, #52]	; (406094 <sd_mmc_init_write_blocks+0x80>)
  406060:	4003      	ands	r3, r0
  406062:	b923      	cbnz	r3, 40606e <sd_mmc_init_write_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
  406064:	4b0c      	ldr	r3, [pc, #48]	; (406098 <sd_mmc_init_write_blocks+0x84>)
  406066:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  406068:	4b0c      	ldr	r3, [pc, #48]	; (40609c <sd_mmc_init_write_blocks+0x88>)
  40606a:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
  40606c:	e7f2      	b.n	406054 <sd_mmc_init_write_blocks+0x40>
			sd_mmc_deselect_slot();
  40606e:	4b07      	ldr	r3, [pc, #28]	; (40608c <sd_mmc_init_write_blocks+0x78>)
  406070:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  406072:	2405      	movs	r4, #5
  406074:	e7ee      	b.n	406054 <sd_mmc_init_write_blocks+0x40>
  406076:	bf00      	nop
  406078:	00405695 	.word	0x00405695
  40607c:	00089118 	.word	0x00089118
  406080:	00109119 	.word	0x00109119
  406084:	20000df8 	.word	0x20000df8
  406088:	00406539 	.word	0x00406539
  40608c:	004057c5 	.word	0x004057c5
  406090:	00406505 	.word	0x00406505
  406094:	e4580000 	.word	0xe4580000
  406098:	20000dfc 	.word	0x20000dfc
  40609c:	20000dfe 	.word	0x20000dfe

004060a0 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  4060a0:	b510      	push	{r4, lr}
  4060a2:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
  4060a4:	4b06      	ldr	r3, [pc, #24]	; (4060c0 <sd_mmc_start_write_blocks+0x20>)
  4060a6:	4798      	blx	r3
  4060a8:	b920      	cbnz	r0, 4060b4 <sd_mmc_start_write_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
  4060aa:	2200      	movs	r2, #0
  4060ac:	4b05      	ldr	r3, [pc, #20]	; (4060c4 <sd_mmc_start_write_blocks+0x24>)
  4060ae:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
  4060b0:	2005      	movs	r0, #5
  4060b2:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  4060b4:	4a03      	ldr	r2, [pc, #12]	; (4060c4 <sd_mmc_start_write_blocks+0x24>)
  4060b6:	8813      	ldrh	r3, [r2, #0]
  4060b8:	1b1c      	subs	r4, r3, r4
  4060ba:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
  4060bc:	2000      	movs	r0, #0
}
  4060be:	bd10      	pop	{r4, pc}
  4060c0:	00406755 	.word	0x00406755
  4060c4:	20000dfc 	.word	0x20000dfc

004060c8 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
  4060c8:	b510      	push	{r4, lr}
  4060ca:	4604      	mov	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
  4060cc:	4b12      	ldr	r3, [pc, #72]	; (406118 <sd_mmc_wait_end_of_write_blocks+0x50>)
  4060ce:	4798      	blx	r3
  4060d0:	b908      	cbnz	r0, 4060d6 <sd_mmc_wait_end_of_write_blocks+0xe>
		return SD_MMC_ERR_COMM;
  4060d2:	2005      	movs	r0, #5
  4060d4:	bd10      	pop	{r4, pc}
	}
	if (abort) {
  4060d6:	b184      	cbz	r4, 4060fa <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
  4060d8:	2200      	movs	r2, #0
  4060da:	4b10      	ldr	r3, [pc, #64]	; (40611c <sd_mmc_wait_end_of_write_blocks+0x54>)
  4060dc:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  4060de:	4b10      	ldr	r3, [pc, #64]	; (406120 <sd_mmc_wait_end_of_write_blocks+0x58>)
  4060e0:	881b      	ldrh	r3, [r3, #0]
  4060e2:	2b01      	cmp	r3, #1
  4060e4:	d00f      	beq.n	406106 <sd_mmc_wait_end_of_write_blocks+0x3e>
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  4060e6:	2100      	movs	r1, #0
  4060e8:	f243 100c 	movw	r0, #12556	; 0x310c
  4060ec:	4b0d      	ldr	r3, [pc, #52]	; (406124 <sd_mmc_wait_end_of_write_blocks+0x5c>)
  4060ee:	4798      	blx	r3
  4060f0:	b968      	cbnz	r0, 40610e <sd_mmc_wait_end_of_write_blocks+0x46>
			sd_mmc_deselect_slot();
  4060f2:	4b0d      	ldr	r3, [pc, #52]	; (406128 <sd_mmc_wait_end_of_write_blocks+0x60>)
  4060f4:	4798      	blx	r3
			return SD_MMC_ERR_COMM;
  4060f6:	2005      	movs	r0, #5
  4060f8:	bd10      	pop	{r4, pc}
	} else if (sd_mmc_nb_block_remaining) {
  4060fa:	4b08      	ldr	r3, [pc, #32]	; (40611c <sd_mmc_wait_end_of_write_blocks+0x54>)
  4060fc:	881b      	ldrh	r3, [r3, #0]
  4060fe:	2b00      	cmp	r3, #0
  406100:	d0ed      	beq.n	4060de <sd_mmc_wait_end_of_write_blocks+0x16>
		return SD_MMC_OK;
  406102:	2000      	movs	r0, #0
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
  406104:	bd10      	pop	{r4, pc}
		sd_mmc_deselect_slot();
  406106:	4b08      	ldr	r3, [pc, #32]	; (406128 <sd_mmc_wait_end_of_write_blocks+0x60>)
  406108:	4798      	blx	r3
		return SD_MMC_OK;
  40610a:	2000      	movs	r0, #0
  40610c:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
  40610e:	4b06      	ldr	r3, [pc, #24]	; (406128 <sd_mmc_wait_end_of_write_blocks+0x60>)
  406110:	4798      	blx	r3
	return SD_MMC_OK;
  406112:	2000      	movs	r0, #0
  406114:	bd10      	pop	{r4, pc}
  406116:	bf00      	nop
  406118:	004067c1 	.word	0x004067c1
  40611c:	20000dfc 	.word	0x20000dfc
  406120:	20000dfe 	.word	0x20000dfe
  406124:	004064d9 	.word	0x004064d9
  406128:	004057c5 	.word	0x004057c5

0040612c <sd_mmc_test_unit_ready>:
  40612c:	b510      	push	{r4, lr}
  40612e:	4604      	mov	r4, r0
  406130:	4b0f      	ldr	r3, [pc, #60]	; (406170 <sd_mmc_test_unit_ready+0x44>)
  406132:	4798      	blx	r3
  406134:	2801      	cmp	r0, #1
  406136:	d018      	beq.n	40616a <sd_mmc_test_unit_ready+0x3e>
  406138:	b118      	cbz	r0, 406142 <sd_mmc_test_unit_ready+0x16>
  40613a:	2802      	cmp	r0, #2
  40613c:	d010      	beq.n	406160 <sd_mmc_test_unit_ready+0x34>
  40613e:	2001      	movs	r0, #1
  406140:	bd10      	pop	{r4, pc}
  406142:	4b0c      	ldr	r3, [pc, #48]	; (406174 <sd_mmc_test_unit_ready+0x48>)
  406144:	5d1b      	ldrb	r3, [r3, r4]
  406146:	b10b      	cbz	r3, 40614c <sd_mmc_test_unit_ready+0x20>
  406148:	2002      	movs	r0, #2
  40614a:	bd10      	pop	{r4, pc}
  40614c:	4620      	mov	r0, r4
  40614e:	4b0a      	ldr	r3, [pc, #40]	; (406178 <sd_mmc_test_unit_ready+0x4c>)
  406150:	4798      	blx	r3
  406152:	f000 0003 	and.w	r0, r0, #3
  406156:	2800      	cmp	r0, #0
  406158:	bf14      	ite	ne
  40615a:	2000      	movne	r0, #0
  40615c:	2002      	moveq	r0, #2
  40615e:	bd10      	pop	{r4, pc}
  406160:	2200      	movs	r2, #0
  406162:	4b04      	ldr	r3, [pc, #16]	; (406174 <sd_mmc_test_unit_ready+0x48>)
  406164:	551a      	strb	r2, [r3, r4]
  406166:	2002      	movs	r0, #2
  406168:	bd10      	pop	{r4, pc}
  40616a:	2003      	movs	r0, #3
  40616c:	bd10      	pop	{r4, pc}
  40616e:	bf00      	nop
  406170:	00405801 	.word	0x00405801
  406174:	20000e04 	.word	0x20000e04
  406178:	00405e65 	.word	0x00405e65

0040617c <sd_mmc_test_unit_ready_0>:
  40617c:	b508      	push	{r3, lr}
  40617e:	2000      	movs	r0, #0
  406180:	4b01      	ldr	r3, [pc, #4]	; (406188 <sd_mmc_test_unit_ready_0+0xc>)
  406182:	4798      	blx	r3
  406184:	bd08      	pop	{r3, pc}
  406186:	bf00      	nop
  406188:	0040612d 	.word	0x0040612d

0040618c <sd_mmc_read_capacity>:
  40618c:	b538      	push	{r3, r4, r5, lr}
  40618e:	4604      	mov	r4, r0
  406190:	460d      	mov	r5, r1
  406192:	4b04      	ldr	r3, [pc, #16]	; (4061a4 <sd_mmc_read_capacity+0x18>)
  406194:	4798      	blx	r3
  406196:	0040      	lsls	r0, r0, #1
  406198:	3801      	subs	r0, #1
  40619a:	6028      	str	r0, [r5, #0]
  40619c:	4620      	mov	r0, r4
  40619e:	4b02      	ldr	r3, [pc, #8]	; (4061a8 <sd_mmc_read_capacity+0x1c>)
  4061a0:	4798      	blx	r3
  4061a2:	bd38      	pop	{r3, r4, r5, pc}
  4061a4:	00405e89 	.word	0x00405e89
  4061a8:	0040612d 	.word	0x0040612d

004061ac <sd_mmc_read_capacity_0>:
  4061ac:	b508      	push	{r3, lr}
  4061ae:	4601      	mov	r1, r0
  4061b0:	2000      	movs	r0, #0
  4061b2:	4b01      	ldr	r3, [pc, #4]	; (4061b8 <sd_mmc_read_capacity_0+0xc>)
  4061b4:	4798      	blx	r3
  4061b6:	bd08      	pop	{r3, pc}
  4061b8:	0040618d 	.word	0x0040618d

004061bc <sd_mmc_wr_protect_0>:
  4061bc:	b508      	push	{r3, lr}
  4061be:	2000      	movs	r0, #0
  4061c0:	4b01      	ldr	r3, [pc, #4]	; (4061c8 <sd_mmc_wr_protect_0+0xc>)
  4061c2:	4798      	blx	r3
  4061c4:	bd08      	pop	{r3, pc}
  4061c6:	bf00      	nop
  4061c8:	00405ead 	.word	0x00405ead

004061cc <sd_mmc_mem_2_ram>:
  4061cc:	b510      	push	{r4, lr}
  4061ce:	4614      	mov	r4, r2
  4061d0:	2201      	movs	r2, #1
  4061d2:	4b0a      	ldr	r3, [pc, #40]	; (4061fc <sd_mmc_mem_2_ram+0x30>)
  4061d4:	4798      	blx	r3
  4061d6:	b120      	cbz	r0, 4061e2 <sd_mmc_mem_2_ram+0x16>
  4061d8:	2802      	cmp	r0, #2
  4061da:	bf0c      	ite	eq
  4061dc:	2002      	moveq	r0, #2
  4061de:	2001      	movne	r0, #1
  4061e0:	bd10      	pop	{r4, pc}
  4061e2:	2101      	movs	r1, #1
  4061e4:	4620      	mov	r0, r4
  4061e6:	4b06      	ldr	r3, [pc, #24]	; (406200 <sd_mmc_mem_2_ram+0x34>)
  4061e8:	4798      	blx	r3
  4061ea:	b108      	cbz	r0, 4061f0 <sd_mmc_mem_2_ram+0x24>
  4061ec:	2001      	movs	r0, #1
  4061ee:	bd10      	pop	{r4, pc}
  4061f0:	4b04      	ldr	r3, [pc, #16]	; (406204 <sd_mmc_mem_2_ram+0x38>)
  4061f2:	4798      	blx	r3
  4061f4:	3000      	adds	r0, #0
  4061f6:	bf18      	it	ne
  4061f8:	2001      	movne	r0, #1
  4061fa:	bd10      	pop	{r4, pc}
  4061fc:	00405eb1 	.word	0x00405eb1
  406200:	00405f85 	.word	0x00405f85
  406204:	00405fad 	.word	0x00405fad

00406208 <sd_mmc_mem_2_ram_0>:
  406208:	b508      	push	{r3, lr}
  40620a:	460a      	mov	r2, r1
  40620c:	4601      	mov	r1, r0
  40620e:	2000      	movs	r0, #0
  406210:	4b01      	ldr	r3, [pc, #4]	; (406218 <sd_mmc_mem_2_ram_0+0x10>)
  406212:	4798      	blx	r3
  406214:	bd08      	pop	{r3, pc}
  406216:	bf00      	nop
  406218:	004061cd 	.word	0x004061cd

0040621c <sd_mmc_ram_2_mem>:
  40621c:	b510      	push	{r4, lr}
  40621e:	4614      	mov	r4, r2
  406220:	2201      	movs	r2, #1
  406222:	4b0a      	ldr	r3, [pc, #40]	; (40624c <sd_mmc_ram_2_mem+0x30>)
  406224:	4798      	blx	r3
  406226:	b120      	cbz	r0, 406232 <sd_mmc_ram_2_mem+0x16>
  406228:	2802      	cmp	r0, #2
  40622a:	bf0c      	ite	eq
  40622c:	2002      	moveq	r0, #2
  40622e:	2001      	movne	r0, #1
  406230:	bd10      	pop	{r4, pc}
  406232:	2101      	movs	r1, #1
  406234:	4620      	mov	r0, r4
  406236:	4b06      	ldr	r3, [pc, #24]	; (406250 <sd_mmc_ram_2_mem+0x34>)
  406238:	4798      	blx	r3
  40623a:	b108      	cbz	r0, 406240 <sd_mmc_ram_2_mem+0x24>
  40623c:	2001      	movs	r0, #1
  40623e:	bd10      	pop	{r4, pc}
  406240:	4b04      	ldr	r3, [pc, #16]	; (406254 <sd_mmc_ram_2_mem+0x38>)
  406242:	4798      	blx	r3
  406244:	3000      	adds	r0, #0
  406246:	bf18      	it	ne
  406248:	2001      	movne	r0, #1
  40624a:	bd10      	pop	{r4, pc}
  40624c:	00406015 	.word	0x00406015
  406250:	004060a1 	.word	0x004060a1
  406254:	004060c9 	.word	0x004060c9

00406258 <sd_mmc_ram_2_mem_0>:
  406258:	b508      	push	{r3, lr}
  40625a:	460a      	mov	r2, r1
  40625c:	4601      	mov	r1, r0
  40625e:	2000      	movs	r0, #0
  406260:	4b01      	ldr	r3, [pc, #4]	; (406268 <sd_mmc_ram_2_mem_0+0x10>)
  406262:	4798      	blx	r3
  406264:	bd08      	pop	{r3, pc}
  406266:	bf00      	nop
  406268:	0040621d 	.word	0x0040621d

0040626c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40626c:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40626e:	480e      	ldr	r0, [pc, #56]	; (4062a8 <sysclk_init+0x3c>)
  406270:	4b0e      	ldr	r3, [pc, #56]	; (4062ac <sysclk_init+0x40>)
  406272:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  406274:	213e      	movs	r1, #62	; 0x3e
  406276:	2000      	movs	r0, #0
  406278:	4b0d      	ldr	r3, [pc, #52]	; (4062b0 <sysclk_init+0x44>)
  40627a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40627c:	4c0d      	ldr	r4, [pc, #52]	; (4062b4 <sysclk_init+0x48>)
  40627e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  406280:	2800      	cmp	r0, #0
  406282:	d0fc      	beq.n	40627e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  406284:	4b0c      	ldr	r3, [pc, #48]	; (4062b8 <sysclk_init+0x4c>)
  406286:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  406288:	4a0c      	ldr	r2, [pc, #48]	; (4062bc <sysclk_init+0x50>)
  40628a:	4b0d      	ldr	r3, [pc, #52]	; (4062c0 <sysclk_init+0x54>)
  40628c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40628e:	4c0d      	ldr	r4, [pc, #52]	; (4062c4 <sysclk_init+0x58>)
  406290:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  406292:	2800      	cmp	r0, #0
  406294:	d0fc      	beq.n	406290 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  406296:	2010      	movs	r0, #16
  406298:	4b0b      	ldr	r3, [pc, #44]	; (4062c8 <sysclk_init+0x5c>)
  40629a:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40629c:	4b0b      	ldr	r3, [pc, #44]	; (4062cc <sysclk_init+0x60>)
  40629e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4062a0:	4801      	ldr	r0, [pc, #4]	; (4062a8 <sysclk_init+0x3c>)
  4062a2:	4b02      	ldr	r3, [pc, #8]	; (4062ac <sysclk_init+0x40>)
  4062a4:	4798      	blx	r3
  4062a6:	bd10      	pop	{r4, pc}
  4062a8:	07270e00 	.word	0x07270e00
  4062ac:	00407399 	.word	0x00407399
  4062b0:	00406da9 	.word	0x00406da9
  4062b4:	00406e2d 	.word	0x00406e2d
  4062b8:	00406e3d 	.word	0x00406e3d
  4062bc:	20133f01 	.word	0x20133f01
  4062c0:	400e0400 	.word	0x400e0400
  4062c4:	00406e4d 	.word	0x00406e4d
  4062c8:	00406ce9 	.word	0x00406ce9
  4062cc:	00407289 	.word	0x00407289

004062d0 <mem_test_unit_ready>:
  4062d0:	b108      	cbz	r0, 4062d6 <mem_test_unit_ready+0x6>
  4062d2:	2001      	movs	r0, #1
  4062d4:	4770      	bx	lr
  4062d6:	b508      	push	{r3, lr}
  4062d8:	4b01      	ldr	r3, [pc, #4]	; (4062e0 <mem_test_unit_ready+0x10>)
  4062da:	4798      	blx	r3
  4062dc:	bd08      	pop	{r3, pc}
  4062de:	bf00      	nop
  4062e0:	0040617d 	.word	0x0040617d

004062e4 <mem_read_capacity>:
  4062e4:	b108      	cbz	r0, 4062ea <mem_read_capacity+0x6>
  4062e6:	2001      	movs	r0, #1
  4062e8:	4770      	bx	lr
  4062ea:	b508      	push	{r3, lr}
  4062ec:	4608      	mov	r0, r1
  4062ee:	4b01      	ldr	r3, [pc, #4]	; (4062f4 <mem_read_capacity+0x10>)
  4062f0:	4798      	blx	r3
  4062f2:	bd08      	pop	{r3, pc}
  4062f4:	004061ad 	.word	0x004061ad

004062f8 <mem_sector_size>:
  4062f8:	fab0 f080 	clz	r0, r0
  4062fc:	0940      	lsrs	r0, r0, #5
  4062fe:	4770      	bx	lr

00406300 <mem_wr_protect>:
  406300:	b108      	cbz	r0, 406306 <mem_wr_protect+0x6>
  406302:	2001      	movs	r0, #1
  406304:	4770      	bx	lr
  406306:	b508      	push	{r3, lr}
  406308:	4b01      	ldr	r3, [pc, #4]	; (406310 <mem_wr_protect+0x10>)
  40630a:	4798      	blx	r3
  40630c:	bd08      	pop	{r3, pc}
  40630e:	bf00      	nop
  406310:	004061bd 	.word	0x004061bd

00406314 <memory_2_ram>:
  406314:	b108      	cbz	r0, 40631a <memory_2_ram+0x6>
  406316:	2001      	movs	r0, #1
  406318:	4770      	bx	lr
  40631a:	b508      	push	{r3, lr}
  40631c:	4608      	mov	r0, r1
  40631e:	4611      	mov	r1, r2
  406320:	4b01      	ldr	r3, [pc, #4]	; (406328 <memory_2_ram+0x14>)
  406322:	4798      	blx	r3
  406324:	bd08      	pop	{r3, pc}
  406326:	bf00      	nop
  406328:	00406209 	.word	0x00406209

0040632c <ram_2_memory>:
  40632c:	b108      	cbz	r0, 406332 <ram_2_memory+0x6>
  40632e:	2001      	movs	r0, #1
  406330:	4770      	bx	lr
  406332:	b508      	push	{r3, lr}
  406334:	4608      	mov	r0, r1
  406336:	4611      	mov	r1, r2
  406338:	4b01      	ldr	r3, [pc, #4]	; (406340 <ram_2_memory+0x14>)
  40633a:	4798      	blx	r3
  40633c:	bd08      	pop	{r3, pc}
  40633e:	bf00      	nop
  406340:	00406259 	.word	0x00406259

00406344 <hsmci_reset>:
  406344:	b470      	push	{r4, r5, r6}
  406346:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40634a:	685d      	ldr	r5, [r3, #4]
  40634c:	689c      	ldr	r4, [r3, #8]
  40634e:	68d8      	ldr	r0, [r3, #12]
  406350:	69d9      	ldr	r1, [r3, #28]
  406352:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  406354:	2680      	movs	r6, #128	; 0x80
  406356:	601e      	str	r6, [r3, #0]
  406358:	605d      	str	r5, [r3, #4]
  40635a:	609c      	str	r4, [r3, #8]
  40635c:	60d8      	str	r0, [r3, #12]
  40635e:	61d9      	str	r1, [r3, #28]
  406360:	655a      	str	r2, [r3, #84]	; 0x54
  406362:	2205      	movs	r2, #5
  406364:	601a      	str	r2, [r3, #0]
  406366:	bc70      	pop	{r4, r5, r6}
  406368:	4770      	bx	lr
	...

0040636c <hsmci_send_cmd_execute>:
  40636c:	b508      	push	{r3, lr}
  40636e:	f001 033f 	and.w	r3, r1, #63	; 0x3f
  406372:	4318      	orrs	r0, r3
  406374:	f411 7f80 	tst.w	r1, #256	; 0x100
  406378:	d004      	beq.n	406384 <hsmci_send_cmd_execute+0x18>
  40637a:	f411 6f00 	tst.w	r1, #2048	; 0x800
  40637e:	d00e      	beq.n	40639e <hsmci_send_cmd_execute+0x32>
  406380:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
  406384:	f411 4f80 	tst.w	r1, #16384	; 0x4000
  406388:	bf18      	it	ne
  40638a:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  40638e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  406392:	611a      	str	r2, [r3, #16]
  406394:	6158      	str	r0, [r3, #20]
  406396:	4618      	mov	r0, r3
  406398:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
  40639c:	e00d      	b.n	4063ba <hsmci_send_cmd_execute+0x4e>
  40639e:	f411 5f00 	tst.w	r1, #8192	; 0x2000
  4063a2:	bf14      	ite	ne
  4063a4:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
  4063a8:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
  4063ac:	e7ea      	b.n	406384 <hsmci_send_cmd_execute+0x18>
  4063ae:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
  4063b2:	d10c      	bne.n	4063ce <hsmci_send_cmd_execute+0x62>
  4063b4:	f013 0f01 	tst.w	r3, #1
  4063b8:	d10d      	bne.n	4063d6 <hsmci_send_cmd_execute+0x6a>
  4063ba:	6c03      	ldr	r3, [r0, #64]	; 0x40
  4063bc:	2a00      	cmp	r2, #0
  4063be:	d0f6      	beq.n	4063ae <hsmci_send_cmd_execute+0x42>
  4063c0:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
  4063c4:	d0f6      	beq.n	4063b4 <hsmci_send_cmd_execute+0x48>
  4063c6:	4b10      	ldr	r3, [pc, #64]	; (406408 <hsmci_send_cmd_execute+0x9c>)
  4063c8:	4798      	blx	r3
  4063ca:	2000      	movs	r0, #0
  4063cc:	bd08      	pop	{r3, pc}
  4063ce:	4b0e      	ldr	r3, [pc, #56]	; (406408 <hsmci_send_cmd_execute+0x9c>)
  4063d0:	4798      	blx	r3
  4063d2:	2000      	movs	r0, #0
  4063d4:	bd08      	pop	{r3, pc}
  4063d6:	f411 5f00 	tst.w	r1, #8192	; 0x2000
  4063da:	d103      	bne.n	4063e4 <hsmci_send_cmd_execute+0x78>
  4063dc:	2001      	movs	r0, #1
  4063de:	bd08      	pop	{r3, pc}
  4063e0:	2001      	movs	r0, #1
  4063e2:	bd08      	pop	{r3, pc}
  4063e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  4063ea:	f04f 32ff 	mov.w	r2, #4294967295
  4063ee:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4063f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
  4063f6:	2b20      	cmp	r3, #32
  4063f8:	d0f2      	beq.n	4063e0 <hsmci_send_cmd_execute+0x74>
  4063fa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  4063fc:	3a01      	subs	r2, #1
  4063fe:	d1f8      	bne.n	4063f2 <hsmci_send_cmd_execute+0x86>
  406400:	4b01      	ldr	r3, [pc, #4]	; (406408 <hsmci_send_cmd_execute+0x9c>)
  406402:	4798      	blx	r3
  406404:	2000      	movs	r0, #0
  406406:	bd08      	pop	{r3, pc}
  406408:	00406345 	.word	0x00406345

0040640c <hsmci_init>:
  40640c:	b508      	push	{r3, lr}
  40640e:	2012      	movs	r0, #18
  406410:	4b07      	ldr	r3, [pc, #28]	; (406430 <hsmci_init+0x24>)
  406412:	4798      	blx	r3
  406414:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  406418:	2272      	movs	r2, #114	; 0x72
  40641a:	609a      	str	r2, [r3, #8]
  40641c:	61da      	str	r2, [r3, #28]
  40641e:	2211      	movs	r2, #17
  406420:	655a      	str	r2, [r3, #84]	; 0x54
  406422:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  406426:	605a      	str	r2, [r3, #4]
  406428:	2205      	movs	r2, #5
  40642a:	601a      	str	r2, [r3, #0]
  40642c:	bd08      	pop	{r3, pc}
  40642e:	bf00      	nop
  406430:	00406e5d 	.word	0x00406e5d

00406434 <hsmci_get_bus_width>:
  406434:	2800      	cmp	r0, #0
  406436:	bf0c      	ite	eq
  406438:	2004      	moveq	r0, #4
  40643a:	2000      	movne	r0, #0
  40643c:	4770      	bx	lr

0040643e <hsmci_is_high_speed_capable>:
  40643e:	2001      	movs	r0, #1
  406440:	4770      	bx	lr
	...

00406444 <hsmci_select_device>:
  406444:	b19b      	cbz	r3, 40646e <hsmci_select_device+0x2a>
  406446:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  40644a:	6d43      	ldr	r3, [r0, #84]	; 0x54
  40644c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  406450:	6543      	str	r3, [r0, #84]	; 0x54
  406452:	0049      	lsls	r1, r1, #1
  406454:	4b15      	ldr	r3, [pc, #84]	; (4064ac <hsmci_select_device+0x68>)
  406456:	4299      	cmp	r1, r3
  406458:	d810      	bhi.n	40647c <hsmci_select_device+0x38>
  40645a:	4815      	ldr	r0, [pc, #84]	; (4064b0 <hsmci_select_device+0x6c>)
  40645c:	fbb0 f3f1 	udiv	r3, r0, r1
  406460:	fb01 0113 	mls	r1, r1, r3, r0
  406464:	b101      	cbz	r1, 406468 <hsmci_select_device+0x24>
  406466:	3301      	adds	r3, #1
  406468:	b14b      	cbz	r3, 40647e <hsmci_select_device+0x3a>
  40646a:	3b01      	subs	r3, #1
  40646c:	e007      	b.n	40647e <hsmci_select_device+0x3a>
  40646e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  406472:	6d43      	ldr	r3, [r0, #84]	; 0x54
  406474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  406478:	6543      	str	r3, [r0, #84]	; 0x54
  40647a:	e7ea      	b.n	406452 <hsmci_select_device+0xe>
  40647c:	2300      	movs	r3, #0
  40647e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  406482:	6848      	ldr	r0, [r1, #4]
  406484:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
  406488:	6048      	str	r0, [r1, #4]
  40648a:	6848      	ldr	r0, [r1, #4]
  40648c:	b2db      	uxtb	r3, r3
  40648e:	4303      	orrs	r3, r0
  406490:	604b      	str	r3, [r1, #4]
  406492:	2a04      	cmp	r2, #4
  406494:	d007      	beq.n	4064a6 <hsmci_select_device+0x62>
  406496:	2a08      	cmp	r2, #8
  406498:	bf0c      	ite	eq
  40649a:	22c0      	moveq	r2, #192	; 0xc0
  40649c:	2200      	movne	r2, #0
  40649e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4064a2:	60da      	str	r2, [r3, #12]
  4064a4:	4770      	bx	lr
  4064a6:	2280      	movs	r2, #128	; 0x80
  4064a8:	e7f9      	b.n	40649e <hsmci_select_device+0x5a>
  4064aa:	bf00      	nop
  4064ac:	07270dff 	.word	0x07270dff
  4064b0:	07270e00 	.word	0x07270e00

004064b4 <hsmci_deselect_device>:
  4064b4:	4770      	bx	lr

004064b6 <hsmci_send_clock>:
  4064b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4064ba:	685a      	ldr	r2, [r3, #4]
  4064bc:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  4064c0:	605a      	str	r2, [r3, #4]
  4064c2:	2200      	movs	r2, #0
  4064c4:	611a      	str	r2, [r3, #16]
  4064c6:	f44f 6210 	mov.w	r2, #2304	; 0x900
  4064ca:	615a      	str	r2, [r3, #20]
  4064cc:	461a      	mov	r2, r3
  4064ce:	6c13      	ldr	r3, [r2, #64]	; 0x40
  4064d0:	f013 0f01 	tst.w	r3, #1
  4064d4:	d0fb      	beq.n	4064ce <hsmci_send_clock+0x18>
  4064d6:	4770      	bx	lr

004064d8 <hsmci_send_cmd>:
  4064d8:	b510      	push	{r4, lr}
  4064da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4064de:	685a      	ldr	r2, [r3, #4]
  4064e0:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  4064e4:	605a      	str	r2, [r3, #4]
  4064e6:	685a      	ldr	r2, [r3, #4]
  4064e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  4064ec:	605a      	str	r2, [r3, #4]
  4064ee:	2400      	movs	r4, #0
  4064f0:	619c      	str	r4, [r3, #24]
  4064f2:	460a      	mov	r2, r1
  4064f4:	4601      	mov	r1, r0
  4064f6:	4620      	mov	r0, r4
  4064f8:	4b01      	ldr	r3, [pc, #4]	; (406500 <hsmci_send_cmd+0x28>)
  4064fa:	4798      	blx	r3
  4064fc:	bd10      	pop	{r4, pc}
  4064fe:	bf00      	nop
  406500:	0040636d 	.word	0x0040636d

00406504 <hsmci_get_response>:
  406504:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  406508:	6a18      	ldr	r0, [r3, #32]
  40650a:	4770      	bx	lr

0040650c <hsmci_get_response_128>:
  40650c:	b410      	push	{r4}
  40650e:	1d03      	adds	r3, r0, #4
  406510:	3014      	adds	r0, #20
  406512:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  406516:	6a22      	ldr	r2, [r4, #32]
  406518:	0e11      	lsrs	r1, r2, #24
  40651a:	f803 1c04 	strb.w	r1, [r3, #-4]
  40651e:	0c11      	lsrs	r1, r2, #16
  406520:	f803 1c03 	strb.w	r1, [r3, #-3]
  406524:	0a11      	lsrs	r1, r2, #8
  406526:	f803 1c02 	strb.w	r1, [r3, #-2]
  40652a:	f803 2c01 	strb.w	r2, [r3, #-1]
  40652e:	3304      	adds	r3, #4
  406530:	4283      	cmp	r3, r0
  406532:	d1f0      	bne.n	406516 <hsmci_get_response_128+0xa>
  406534:	bc10      	pop	{r4}
  406536:	4770      	bx	lr

00406538 <hsmci_adtc_start>:
  406538:	b570      	push	{r4, r5, r6, lr}
  40653a:	f89d 4010 	ldrb.w	r4, [sp, #16]
  40653e:	b38c      	cbz	r4, 4065a4 <hsmci_adtc_start+0x6c>
  406540:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  406544:	686c      	ldr	r4, [r5, #4]
  406546:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
  40654a:	606c      	str	r4, [r5, #4]
  40654c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  406550:	686c      	ldr	r4, [r5, #4]
  406552:	f444 54c0 	orr.w	r4, r4, #6144	; 0x1800
  406556:	606c      	str	r4, [r5, #4]
  406558:	f012 0f03 	tst.w	r2, #3
  40655c:	d029      	beq.n	4065b2 <hsmci_adtc_start+0x7a>
  40655e:	686c      	ldr	r4, [r5, #4]
  406560:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  406564:	606c      	str	r4, [r5, #4]
  406566:	f400 4400 	and.w	r4, r0, #32768	; 0x8000
  40656a:	2c00      	cmp	r4, #0
  40656c:	bf14      	ite	ne
  40656e:	f44f 3480 	movne.w	r4, #65536	; 0x10000
  406572:	f44f 24a0 	moveq.w	r4, #327680	; 0x50000
  406576:	f410 3f80 	tst.w	r0, #65536	; 0x10000
  40657a:	d121      	bne.n	4065c0 <hsmci_adtc_start+0x88>
  40657c:	ea43 4502 	orr.w	r5, r3, r2, lsl #16
  406580:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  406584:	61b5      	str	r5, [r6, #24]
  406586:	f410 3f00 	tst.w	r0, #131072	; 0x20000
  40658a:	d12d      	bne.n	4065e8 <hsmci_adtc_start+0xb0>
  40658c:	f410 2f80 	tst.w	r0, #262144	; 0x40000
  406590:	d12d      	bne.n	4065ee <hsmci_adtc_start+0xb6>
  406592:	f410 2f00 	tst.w	r0, #524288	; 0x80000
  406596:	d11a      	bne.n	4065ce <hsmci_adtc_start+0x96>
  406598:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
  40659c:	bf18      	it	ne
  40659e:	f444 2400 	orrne.w	r4, r4, #524288	; 0x80000
  4065a2:	e014      	b.n	4065ce <hsmci_adtc_start+0x96>
  4065a4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  4065a8:	686c      	ldr	r4, [r5, #4]
  4065aa:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
  4065ae:	606c      	str	r4, [r5, #4]
  4065b0:	e7cc      	b.n	40654c <hsmci_adtc_start+0x14>
  4065b2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  4065b6:	686c      	ldr	r4, [r5, #4]
  4065b8:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  4065bc:	606c      	str	r4, [r5, #4]
  4065be:	e7d2      	b.n	406566 <hsmci_adtc_start+0x2e>
  4065c0:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
  4065c4:	f3c2 0508 	ubfx	r5, r2, #0, #9
  4065c8:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  4065cc:	61b5      	str	r5, [r6, #24]
  4065ce:	2600      	movs	r6, #0
  4065d0:	4d08      	ldr	r5, [pc, #32]	; (4065f4 <hsmci_adtc_start+0xbc>)
  4065d2:	602e      	str	r6, [r5, #0]
  4065d4:	4d08      	ldr	r5, [pc, #32]	; (4065f8 <hsmci_adtc_start+0xc0>)
  4065d6:	802a      	strh	r2, [r5, #0]
  4065d8:	4a08      	ldr	r2, [pc, #32]	; (4065fc <hsmci_adtc_start+0xc4>)
  4065da:	8013      	strh	r3, [r2, #0]
  4065dc:	460a      	mov	r2, r1
  4065de:	4601      	mov	r1, r0
  4065e0:	4620      	mov	r0, r4
  4065e2:	4b07      	ldr	r3, [pc, #28]	; (406600 <hsmci_adtc_start+0xc8>)
  4065e4:	4798      	blx	r3
  4065e6:	bd70      	pop	{r4, r5, r6, pc}
  4065e8:	f444 1420 	orr.w	r4, r4, #2621440	; 0x280000
  4065ec:	e7ef      	b.n	4065ce <hsmci_adtc_start+0x96>
  4065ee:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  4065f2:	e7ec      	b.n	4065ce <hsmci_adtc_start+0x96>
  4065f4:	20000e0c 	.word	0x20000e0c
  4065f8:	20000e06 	.word	0x20000e06
  4065fc:	20000e08 	.word	0x20000e08
  406600:	0040636d 	.word	0x0040636d

00406604 <hsmci_read_word>:
  406604:	b508      	push	{r3, lr}
  406606:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40660a:	4a16      	ldr	r2, [pc, #88]	; (406664 <hsmci_read_word+0x60>)
  40660c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  40660e:	4213      	tst	r3, r2
  406610:	d11d      	bne.n	40664e <hsmci_read_word+0x4a>
  406612:	f013 0f02 	tst.w	r3, #2
  406616:	d0f9      	beq.n	40660c <hsmci_read_word+0x8>
  406618:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40661c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40661e:	6003      	str	r3, [r0, #0]
  406620:	4a11      	ldr	r2, [pc, #68]	; (406668 <hsmci_read_word+0x64>)
  406622:	6813      	ldr	r3, [r2, #0]
  406624:	3304      	adds	r3, #4
  406626:	6013      	str	r3, [r2, #0]
  406628:	4a10      	ldr	r2, [pc, #64]	; (40666c <hsmci_read_word+0x68>)
  40662a:	8811      	ldrh	r1, [r2, #0]
  40662c:	4a10      	ldr	r2, [pc, #64]	; (406670 <hsmci_read_word+0x6c>)
  40662e:	8812      	ldrh	r2, [r2, #0]
  406630:	fb02 f201 	mul.w	r2, r2, r1
  406634:	4293      	cmp	r3, r2
  406636:	d312      	bcc.n	40665e <hsmci_read_word+0x5a>
  406638:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40663c:	4a09      	ldr	r2, [pc, #36]	; (406664 <hsmci_read_word+0x60>)
  40663e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  406640:	4213      	tst	r3, r2
  406642:	d108      	bne.n	406656 <hsmci_read_word+0x52>
  406644:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  406648:	d0f9      	beq.n	40663e <hsmci_read_word+0x3a>
  40664a:	2001      	movs	r0, #1
  40664c:	bd08      	pop	{r3, pc}
  40664e:	4b09      	ldr	r3, [pc, #36]	; (406674 <hsmci_read_word+0x70>)
  406650:	4798      	blx	r3
  406652:	2000      	movs	r0, #0
  406654:	bd08      	pop	{r3, pc}
  406656:	4b07      	ldr	r3, [pc, #28]	; (406674 <hsmci_read_word+0x70>)
  406658:	4798      	blx	r3
  40665a:	2000      	movs	r0, #0
  40665c:	bd08      	pop	{r3, pc}
  40665e:	2001      	movs	r0, #1
  406660:	bd08      	pop	{r3, pc}
  406662:	bf00      	nop
  406664:	c0600000 	.word	0xc0600000
  406668:	20000e0c 	.word	0x20000e0c
  40666c:	20000e06 	.word	0x20000e06
  406670:	20000e08 	.word	0x20000e08
  406674:	00406345 	.word	0x00406345

00406678 <hsmci_start_read_blocks>:
  406678:	4b17      	ldr	r3, [pc, #92]	; (4066d8 <hsmci_start_read_blocks+0x60>)
  40667a:	881b      	ldrh	r3, [r3, #0]
  40667c:	fb03 f101 	mul.w	r1, r3, r1
  406680:	f010 0f03 	tst.w	r0, #3
  406684:	d102      	bne.n	40668c <hsmci_start_read_blocks+0x14>
  406686:	f013 0f03 	tst.w	r3, #3
  40668a:	d01e      	beq.n	4066ca <hsmci_start_read_blocks+0x52>
  40668c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  406690:	6853      	ldr	r3, [r2, #4]
  406692:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  406696:	6053      	str	r3, [r2, #4]
  406698:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40669c:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
  4066a0:	685b      	ldr	r3, [r3, #4]
  4066a2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  4066a6:	bf0c      	ite	eq
  4066a8:	088b      	lsreq	r3, r1, #2
  4066aa:	460b      	movne	r3, r1
  4066ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4066b0:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
  4066b4:	2300      	movs	r3, #0
  4066b6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  4066ba:	2001      	movs	r0, #1
  4066bc:	f8c2 0120 	str.w	r0, [r2, #288]	; 0x120
  4066c0:	4a06      	ldr	r2, [pc, #24]	; (4066dc <hsmci_start_read_blocks+0x64>)
  4066c2:	6813      	ldr	r3, [r2, #0]
  4066c4:	440b      	add	r3, r1
  4066c6:	6013      	str	r3, [r2, #0]
  4066c8:	4770      	bx	lr
  4066ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4066ce:	6853      	ldr	r3, [r2, #4]
  4066d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4066d4:	6053      	str	r3, [r2, #4]
  4066d6:	e7df      	b.n	406698 <hsmci_start_read_blocks+0x20>
  4066d8:	20000e06 	.word	0x20000e06
  4066dc:	20000e0c 	.word	0x20000e0c

004066e0 <hsmci_wait_end_of_read_blocks>:
  4066e0:	b508      	push	{r3, lr}
  4066e2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4066e6:	4a16      	ldr	r2, [pc, #88]	; (406740 <hsmci_wait_end_of_read_blocks+0x60>)
  4066e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  4066ea:	4213      	tst	r3, r2
  4066ec:	d117      	bne.n	40671e <hsmci_wait_end_of_read_blocks+0x3e>
  4066ee:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  4066f2:	d0f9      	beq.n	4066e8 <hsmci_wait_end_of_read_blocks+0x8>
  4066f4:	4b13      	ldr	r3, [pc, #76]	; (406744 <hsmci_wait_end_of_read_blocks+0x64>)
  4066f6:	881a      	ldrh	r2, [r3, #0]
  4066f8:	4b13      	ldr	r3, [pc, #76]	; (406748 <hsmci_wait_end_of_read_blocks+0x68>)
  4066fa:	881b      	ldrh	r3, [r3, #0]
  4066fc:	fb03 f302 	mul.w	r3, r3, r2
  406700:	4a12      	ldr	r2, [pc, #72]	; (40674c <hsmci_wait_end_of_read_blocks+0x6c>)
  406702:	6812      	ldr	r2, [r2, #0]
  406704:	4293      	cmp	r3, r2
  406706:	d818      	bhi.n	40673a <hsmci_wait_end_of_read_blocks+0x5a>
  406708:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40670c:	4a0c      	ldr	r2, [pc, #48]	; (406740 <hsmci_wait_end_of_read_blocks+0x60>)
  40670e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  406710:	4213      	tst	r3, r2
  406712:	d10e      	bne.n	406732 <hsmci_wait_end_of_read_blocks+0x52>
  406714:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  406718:	d0f9      	beq.n	40670e <hsmci_wait_end_of_read_blocks+0x2e>
  40671a:	2001      	movs	r0, #1
  40671c:	bd08      	pop	{r3, pc}
  40671e:	f240 2202 	movw	r2, #514	; 0x202
  406722:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  406726:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  40672a:	4b09      	ldr	r3, [pc, #36]	; (406750 <hsmci_wait_end_of_read_blocks+0x70>)
  40672c:	4798      	blx	r3
  40672e:	2000      	movs	r0, #0
  406730:	bd08      	pop	{r3, pc}
  406732:	4b07      	ldr	r3, [pc, #28]	; (406750 <hsmci_wait_end_of_read_blocks+0x70>)
  406734:	4798      	blx	r3
  406736:	2000      	movs	r0, #0
  406738:	bd08      	pop	{r3, pc}
  40673a:	2001      	movs	r0, #1
  40673c:	bd08      	pop	{r3, pc}
  40673e:	bf00      	nop
  406740:	c0600000 	.word	0xc0600000
  406744:	20000e06 	.word	0x20000e06
  406748:	20000e08 	.word	0x20000e08
  40674c:	20000e0c 	.word	0x20000e0c
  406750:	00406345 	.word	0x00406345

00406754 <hsmci_start_write_blocks>:
  406754:	4b18      	ldr	r3, [pc, #96]	; (4067b8 <hsmci_start_write_blocks+0x64>)
  406756:	881b      	ldrh	r3, [r3, #0]
  406758:	fb03 f101 	mul.w	r1, r3, r1
  40675c:	f010 0f03 	tst.w	r0, #3
  406760:	d102      	bne.n	406768 <hsmci_start_write_blocks+0x14>
  406762:	f013 0f03 	tst.w	r3, #3
  406766:	d020      	beq.n	4067aa <hsmci_start_write_blocks+0x56>
  406768:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40676c:	6853      	ldr	r3, [r2, #4]
  40676e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  406772:	6053      	str	r3, [r2, #4]
  406774:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  406778:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
  40677c:	685b      	ldr	r3, [r3, #4]
  40677e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  406782:	bf0c      	ite	eq
  406784:	088b      	lsreq	r3, r1, #2
  406786:	460b      	movne	r3, r1
  406788:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40678c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  406790:	2300      	movs	r3, #0
  406792:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
  406796:	f44f 7380 	mov.w	r3, #256	; 0x100
  40679a:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
  40679e:	4a07      	ldr	r2, [pc, #28]	; (4067bc <hsmci_start_write_blocks+0x68>)
  4067a0:	6813      	ldr	r3, [r2, #0]
  4067a2:	440b      	add	r3, r1
  4067a4:	6013      	str	r3, [r2, #0]
  4067a6:	2001      	movs	r0, #1
  4067a8:	4770      	bx	lr
  4067aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4067ae:	6853      	ldr	r3, [r2, #4]
  4067b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4067b4:	6053      	str	r3, [r2, #4]
  4067b6:	e7dd      	b.n	406774 <hsmci_start_write_blocks+0x20>
  4067b8:	20000e06 	.word	0x20000e06
  4067bc:	20000e0c 	.word	0x20000e0c

004067c0 <hsmci_wait_end_of_write_blocks>:
  4067c0:	b508      	push	{r3, lr}
  4067c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4067c6:	4a16      	ldr	r2, [pc, #88]	; (406820 <hsmci_wait_end_of_write_blocks+0x60>)
  4067c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  4067ca:	4213      	tst	r3, r2
  4067cc:	d117      	bne.n	4067fe <hsmci_wait_end_of_write_blocks+0x3e>
  4067ce:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  4067d2:	d0f9      	beq.n	4067c8 <hsmci_wait_end_of_write_blocks+0x8>
  4067d4:	4b13      	ldr	r3, [pc, #76]	; (406824 <hsmci_wait_end_of_write_blocks+0x64>)
  4067d6:	881a      	ldrh	r2, [r3, #0]
  4067d8:	4b13      	ldr	r3, [pc, #76]	; (406828 <hsmci_wait_end_of_write_blocks+0x68>)
  4067da:	881b      	ldrh	r3, [r3, #0]
  4067dc:	fb03 f302 	mul.w	r3, r3, r2
  4067e0:	4a12      	ldr	r2, [pc, #72]	; (40682c <hsmci_wait_end_of_write_blocks+0x6c>)
  4067e2:	6812      	ldr	r2, [r2, #0]
  4067e4:	4293      	cmp	r3, r2
  4067e6:	d818      	bhi.n	40681a <hsmci_wait_end_of_write_blocks+0x5a>
  4067e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4067ec:	4a0c      	ldr	r2, [pc, #48]	; (406820 <hsmci_wait_end_of_write_blocks+0x60>)
  4067ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  4067f0:	4213      	tst	r3, r2
  4067f2:	d10e      	bne.n	406812 <hsmci_wait_end_of_write_blocks+0x52>
  4067f4:	f013 0f20 	tst.w	r3, #32
  4067f8:	d0f9      	beq.n	4067ee <hsmci_wait_end_of_write_blocks+0x2e>
  4067fa:	2001      	movs	r0, #1
  4067fc:	bd08      	pop	{r3, pc}
  4067fe:	4b0c      	ldr	r3, [pc, #48]	; (406830 <hsmci_wait_end_of_write_blocks+0x70>)
  406800:	4798      	blx	r3
  406802:	f240 2202 	movw	r2, #514	; 0x202
  406806:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40680a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  40680e:	2000      	movs	r0, #0
  406810:	bd08      	pop	{r3, pc}
  406812:	4b07      	ldr	r3, [pc, #28]	; (406830 <hsmci_wait_end_of_write_blocks+0x70>)
  406814:	4798      	blx	r3
  406816:	2000      	movs	r0, #0
  406818:	bd08      	pop	{r3, pc}
  40681a:	2001      	movs	r0, #1
  40681c:	bd08      	pop	{r3, pc}
  40681e:	bf00      	nop
  406820:	c0600000 	.word	0xc0600000
  406824:	20000e06 	.word	0x20000e06
  406828:	20000e08 	.word	0x20000e08
  40682c:	20000e0c 	.word	0x20000e0c
  406830:	00406345 	.word	0x00406345

00406834 <pio_pull_up>:
  406834:	b90a      	cbnz	r2, 40683a <pio_pull_up+0x6>
  406836:	6601      	str	r1, [r0, #96]	; 0x60
  406838:	4770      	bx	lr
  40683a:	6641      	str	r1, [r0, #100]	; 0x64
  40683c:	4770      	bx	lr

0040683e <pio_set_debounce_filter>:
  40683e:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  406842:	0053      	lsls	r3, r2, #1
  406844:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  406848:	fbb2 f2f3 	udiv	r2, r2, r3
  40684c:	3a01      	subs	r2, #1
  40684e:	f3c2 020d 	ubfx	r2, r2, #0, #14
  406852:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  406856:	4770      	bx	lr

00406858 <pio_set_peripheral>:
  406858:	6442      	str	r2, [r0, #68]	; 0x44
  40685a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40685e:	d039      	beq.n	4068d4 <pio_set_peripheral+0x7c>
  406860:	d813      	bhi.n	40688a <pio_set_peripheral+0x32>
  406862:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  406866:	d025      	beq.n	4068b4 <pio_set_peripheral+0x5c>
  406868:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40686c:	d10a      	bne.n	406884 <pio_set_peripheral+0x2c>
  40686e:	6f03      	ldr	r3, [r0, #112]	; 0x70
  406870:	4313      	orrs	r3, r2
  406872:	6703      	str	r3, [r0, #112]	; 0x70
  406874:	6f43      	ldr	r3, [r0, #116]	; 0x74
  406876:	6f41      	ldr	r1, [r0, #116]	; 0x74
  406878:	400b      	ands	r3, r1
  40687a:	ea23 0302 	bic.w	r3, r3, r2
  40687e:	6743      	str	r3, [r0, #116]	; 0x74
  406880:	6042      	str	r2, [r0, #4]
  406882:	4770      	bx	lr
  406884:	2900      	cmp	r1, #0
  406886:	d1fb      	bne.n	406880 <pio_set_peripheral+0x28>
  406888:	4770      	bx	lr
  40688a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40688e:	d020      	beq.n	4068d2 <pio_set_peripheral+0x7a>
  406890:	d809      	bhi.n	4068a6 <pio_set_peripheral+0x4e>
  406892:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  406896:	d1f3      	bne.n	406880 <pio_set_peripheral+0x28>
  406898:	6f03      	ldr	r3, [r0, #112]	; 0x70
  40689a:	4313      	orrs	r3, r2
  40689c:	6703      	str	r3, [r0, #112]	; 0x70
  40689e:	6f43      	ldr	r3, [r0, #116]	; 0x74
  4068a0:	4313      	orrs	r3, r2
  4068a2:	6743      	str	r3, [r0, #116]	; 0x74
  4068a4:	e7ec      	b.n	406880 <pio_set_peripheral+0x28>
  4068a6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4068aa:	d012      	beq.n	4068d2 <pio_set_peripheral+0x7a>
  4068ac:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4068b0:	d00f      	beq.n	4068d2 <pio_set_peripheral+0x7a>
  4068b2:	e7e5      	b.n	406880 <pio_set_peripheral+0x28>
  4068b4:	b410      	push	{r4}
  4068b6:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4068b8:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4068ba:	43d3      	mvns	r3, r2
  4068bc:	4021      	ands	r1, r4
  4068be:	461c      	mov	r4, r3
  4068c0:	4019      	ands	r1, r3
  4068c2:	6701      	str	r1, [r0, #112]	; 0x70
  4068c4:	6f43      	ldr	r3, [r0, #116]	; 0x74
  4068c6:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4068c8:	400b      	ands	r3, r1
  4068ca:	4023      	ands	r3, r4
  4068cc:	6743      	str	r3, [r0, #116]	; 0x74
  4068ce:	6042      	str	r2, [r0, #4]
  4068d0:	bc10      	pop	{r4}
  4068d2:	4770      	bx	lr
  4068d4:	6f03      	ldr	r3, [r0, #112]	; 0x70
  4068d6:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4068d8:	400b      	ands	r3, r1
  4068da:	ea23 0302 	bic.w	r3, r3, r2
  4068de:	6703      	str	r3, [r0, #112]	; 0x70
  4068e0:	6f43      	ldr	r3, [r0, #116]	; 0x74
  4068e2:	4313      	orrs	r3, r2
  4068e4:	6743      	str	r3, [r0, #116]	; 0x74
  4068e6:	e7cb      	b.n	406880 <pio_set_peripheral+0x28>

004068e8 <pio_set_input>:
  4068e8:	6441      	str	r1, [r0, #68]	; 0x44
  4068ea:	f012 0f01 	tst.w	r2, #1
  4068ee:	bf14      	ite	ne
  4068f0:	6641      	strne	r1, [r0, #100]	; 0x64
  4068f2:	6601      	streq	r1, [r0, #96]	; 0x60
  4068f4:	f012 0f0a 	tst.w	r2, #10
  4068f8:	bf14      	ite	ne
  4068fa:	6201      	strne	r1, [r0, #32]
  4068fc:	6241      	streq	r1, [r0, #36]	; 0x24
  4068fe:	f012 0f02 	tst.w	r2, #2
  406902:	d107      	bne.n	406914 <pio_set_input+0x2c>
  406904:	f012 0f08 	tst.w	r2, #8
  406908:	bf18      	it	ne
  40690a:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
  40690e:	6141      	str	r1, [r0, #20]
  406910:	6001      	str	r1, [r0, #0]
  406912:	4770      	bx	lr
  406914:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  406918:	e7f9      	b.n	40690e <pio_set_input+0x26>

0040691a <pio_set_output>:
  40691a:	b410      	push	{r4}
  40691c:	9c01      	ldr	r4, [sp, #4]
  40691e:	6441      	str	r1, [r0, #68]	; 0x44
  406920:	b944      	cbnz	r4, 406934 <pio_set_output+0x1a>
  406922:	6601      	str	r1, [r0, #96]	; 0x60
  406924:	b143      	cbz	r3, 406938 <pio_set_output+0x1e>
  406926:	6501      	str	r1, [r0, #80]	; 0x50
  406928:	b942      	cbnz	r2, 40693c <pio_set_output+0x22>
  40692a:	6341      	str	r1, [r0, #52]	; 0x34
  40692c:	6101      	str	r1, [r0, #16]
  40692e:	6001      	str	r1, [r0, #0]
  406930:	bc10      	pop	{r4}
  406932:	4770      	bx	lr
  406934:	6641      	str	r1, [r0, #100]	; 0x64
  406936:	e7f5      	b.n	406924 <pio_set_output+0xa>
  406938:	6541      	str	r1, [r0, #84]	; 0x54
  40693a:	e7f5      	b.n	406928 <pio_set_output+0xe>
  40693c:	6301      	str	r1, [r0, #48]	; 0x30
  40693e:	e7f5      	b.n	40692c <pio_set_output+0x12>

00406940 <pio_pull_down>:
  406940:	b912      	cbnz	r2, 406948 <pio_pull_down+0x8>
  406942:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
  406946:	4770      	bx	lr
  406948:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
  40694c:	4770      	bx	lr

0040694e <pio_configure_interrupt>:
  40694e:	f012 0f10 	tst.w	r2, #16
  406952:	d010      	beq.n	406976 <pio_configure_interrupt+0x28>
  406954:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
  406958:	f012 0f20 	tst.w	r2, #32
  40695c:	bf14      	ite	ne
  40695e:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
  406962:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
  406966:	f012 0f40 	tst.w	r2, #64	; 0x40
  40696a:	bf14      	ite	ne
  40696c:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
  406970:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  406974:	4770      	bx	lr
  406976:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  40697a:	4770      	bx	lr

0040697c <pio_enable_interrupt>:
  40697c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40697e:	6401      	str	r1, [r0, #64]	; 0x40
  406980:	4770      	bx	lr

00406982 <pio_get_interrupt_status>:
  406982:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  406984:	4770      	bx	lr

00406986 <pio_get_interrupt_mask>:
  406986:	6c80      	ldr	r0, [r0, #72]	; 0x48
  406988:	4770      	bx	lr

0040698a <pio_set_pin_high>:
  40698a:	0943      	lsrs	r3, r0, #5
  40698c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  406990:	f203 7307 	addw	r3, r3, #1799	; 0x707
  406994:	025b      	lsls	r3, r3, #9
  406996:	f000 001f 	and.w	r0, r0, #31
  40699a:	2201      	movs	r2, #1
  40699c:	fa02 f000 	lsl.w	r0, r2, r0
  4069a0:	6318      	str	r0, [r3, #48]	; 0x30
  4069a2:	4770      	bx	lr

004069a4 <pio_set_pin_low>:
  4069a4:	0943      	lsrs	r3, r0, #5
  4069a6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4069aa:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4069ae:	025b      	lsls	r3, r3, #9
  4069b0:	f000 001f 	and.w	r0, r0, #31
  4069b4:	2201      	movs	r2, #1
  4069b6:	fa02 f000 	lsl.w	r0, r2, r0
  4069ba:	6358      	str	r0, [r3, #52]	; 0x34
  4069bc:	4770      	bx	lr
	...

004069c0 <pio_configure_pin>:
  4069c0:	b570      	push	{r4, r5, r6, lr}
  4069c2:	b082      	sub	sp, #8
  4069c4:	460d      	mov	r5, r1
  4069c6:	0943      	lsrs	r3, r0, #5
  4069c8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4069cc:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4069d0:	025c      	lsls	r4, r3, #9
  4069d2:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4069d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4069da:	d053      	beq.n	406a84 <pio_configure_pin+0xc4>
  4069dc:	d80a      	bhi.n	4069f4 <pio_configure_pin+0x34>
  4069de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4069e2:	d02d      	beq.n	406a40 <pio_configure_pin+0x80>
  4069e4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4069e8:	d03b      	beq.n	406a62 <pio_configure_pin+0xa2>
  4069ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4069ee:	d015      	beq.n	406a1c <pio_configure_pin+0x5c>
  4069f0:	2000      	movs	r0, #0
  4069f2:	e023      	b.n	406a3c <pio_configure_pin+0x7c>
  4069f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4069f8:	d055      	beq.n	406aa6 <pio_configure_pin+0xe6>
  4069fa:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4069fe:	d052      	beq.n	406aa6 <pio_configure_pin+0xe6>
  406a00:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  406a04:	d1f4      	bne.n	4069f0 <pio_configure_pin+0x30>
  406a06:	f000 011f 	and.w	r1, r0, #31
  406a0a:	2601      	movs	r6, #1
  406a0c:	462a      	mov	r2, r5
  406a0e:	fa06 f101 	lsl.w	r1, r6, r1
  406a12:	4620      	mov	r0, r4
  406a14:	4b2f      	ldr	r3, [pc, #188]	; (406ad4 <pio_configure_pin+0x114>)
  406a16:	4798      	blx	r3
  406a18:	4630      	mov	r0, r6
  406a1a:	e00f      	b.n	406a3c <pio_configure_pin+0x7c>
  406a1c:	f000 001f 	and.w	r0, r0, #31
  406a20:	2601      	movs	r6, #1
  406a22:	4086      	lsls	r6, r0
  406a24:	4632      	mov	r2, r6
  406a26:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  406a2a:	4620      	mov	r0, r4
  406a2c:	4b2a      	ldr	r3, [pc, #168]	; (406ad8 <pio_configure_pin+0x118>)
  406a2e:	4798      	blx	r3
  406a30:	f015 0f01 	tst.w	r5, #1
  406a34:	bf14      	ite	ne
  406a36:	6666      	strne	r6, [r4, #100]	; 0x64
  406a38:	6626      	streq	r6, [r4, #96]	; 0x60
  406a3a:	2001      	movs	r0, #1
  406a3c:	b002      	add	sp, #8
  406a3e:	bd70      	pop	{r4, r5, r6, pc}
  406a40:	f000 001f 	and.w	r0, r0, #31
  406a44:	2601      	movs	r6, #1
  406a46:	4086      	lsls	r6, r0
  406a48:	4632      	mov	r2, r6
  406a4a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  406a4e:	4620      	mov	r0, r4
  406a50:	4b21      	ldr	r3, [pc, #132]	; (406ad8 <pio_configure_pin+0x118>)
  406a52:	4798      	blx	r3
  406a54:	f015 0f01 	tst.w	r5, #1
  406a58:	bf14      	ite	ne
  406a5a:	6666      	strne	r6, [r4, #100]	; 0x64
  406a5c:	6626      	streq	r6, [r4, #96]	; 0x60
  406a5e:	2001      	movs	r0, #1
  406a60:	e7ec      	b.n	406a3c <pio_configure_pin+0x7c>
  406a62:	f000 001f 	and.w	r0, r0, #31
  406a66:	2601      	movs	r6, #1
  406a68:	4086      	lsls	r6, r0
  406a6a:	4632      	mov	r2, r6
  406a6c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  406a70:	4620      	mov	r0, r4
  406a72:	4b19      	ldr	r3, [pc, #100]	; (406ad8 <pio_configure_pin+0x118>)
  406a74:	4798      	blx	r3
  406a76:	f015 0f01 	tst.w	r5, #1
  406a7a:	bf14      	ite	ne
  406a7c:	6666      	strne	r6, [r4, #100]	; 0x64
  406a7e:	6626      	streq	r6, [r4, #96]	; 0x60
  406a80:	2001      	movs	r0, #1
  406a82:	e7db      	b.n	406a3c <pio_configure_pin+0x7c>
  406a84:	f000 001f 	and.w	r0, r0, #31
  406a88:	2601      	movs	r6, #1
  406a8a:	4086      	lsls	r6, r0
  406a8c:	4632      	mov	r2, r6
  406a8e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  406a92:	4620      	mov	r0, r4
  406a94:	4b10      	ldr	r3, [pc, #64]	; (406ad8 <pio_configure_pin+0x118>)
  406a96:	4798      	blx	r3
  406a98:	f015 0f01 	tst.w	r5, #1
  406a9c:	bf14      	ite	ne
  406a9e:	6666      	strne	r6, [r4, #100]	; 0x64
  406aa0:	6626      	streq	r6, [r4, #96]	; 0x60
  406aa2:	2001      	movs	r0, #1
  406aa4:	e7ca      	b.n	406a3c <pio_configure_pin+0x7c>
  406aa6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  406aaa:	f000 011f 	and.w	r1, r0, #31
  406aae:	2601      	movs	r6, #1
  406ab0:	ea05 0306 	and.w	r3, r5, r6
  406ab4:	9300      	str	r3, [sp, #0]
  406ab6:	f3c5 0380 	ubfx	r3, r5, #2, #1
  406aba:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  406abe:	bf14      	ite	ne
  406ac0:	2200      	movne	r2, #0
  406ac2:	2201      	moveq	r2, #1
  406ac4:	fa06 f101 	lsl.w	r1, r6, r1
  406ac8:	4620      	mov	r0, r4
  406aca:	4c04      	ldr	r4, [pc, #16]	; (406adc <pio_configure_pin+0x11c>)
  406acc:	47a0      	blx	r4
  406ace:	4630      	mov	r0, r6
  406ad0:	e7b4      	b.n	406a3c <pio_configure_pin+0x7c>
  406ad2:	bf00      	nop
  406ad4:	004068e9 	.word	0x004068e9
  406ad8:	00406859 	.word	0x00406859
  406adc:	0040691b 	.word	0x0040691b

00406ae0 <pio_configure_pin_group>:
  406ae0:	b570      	push	{r4, r5, r6, lr}
  406ae2:	b082      	sub	sp, #8
  406ae4:	4605      	mov	r5, r0
  406ae6:	460e      	mov	r6, r1
  406ae8:	4614      	mov	r4, r2
  406aea:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  406aee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  406af2:	d03d      	beq.n	406b70 <pio_configure_pin_group+0x90>
  406af4:	d80a      	bhi.n	406b0c <pio_configure_pin_group+0x2c>
  406af6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  406afa:	d021      	beq.n	406b40 <pio_configure_pin_group+0x60>
  406afc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  406b00:	d02a      	beq.n	406b58 <pio_configure_pin_group+0x78>
  406b02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  406b06:	d00e      	beq.n	406b26 <pio_configure_pin_group+0x46>
  406b08:	2000      	movs	r0, #0
  406b0a:	e017      	b.n	406b3c <pio_configure_pin_group+0x5c>
  406b0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  406b10:	d03a      	beq.n	406b88 <pio_configure_pin_group+0xa8>
  406b12:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  406b16:	d037      	beq.n	406b88 <pio_configure_pin_group+0xa8>
  406b18:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  406b1c:	d1f4      	bne.n	406b08 <pio_configure_pin_group+0x28>
  406b1e:	4b23      	ldr	r3, [pc, #140]	; (406bac <pio_configure_pin_group+0xcc>)
  406b20:	4798      	blx	r3
  406b22:	2001      	movs	r0, #1
  406b24:	e00a      	b.n	406b3c <pio_configure_pin_group+0x5c>
  406b26:	460a      	mov	r2, r1
  406b28:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  406b2c:	4b20      	ldr	r3, [pc, #128]	; (406bb0 <pio_configure_pin_group+0xd0>)
  406b2e:	4798      	blx	r3
  406b30:	f014 0f01 	tst.w	r4, #1
  406b34:	bf14      	ite	ne
  406b36:	666e      	strne	r6, [r5, #100]	; 0x64
  406b38:	662e      	streq	r6, [r5, #96]	; 0x60
  406b3a:	2001      	movs	r0, #1
  406b3c:	b002      	add	sp, #8
  406b3e:	bd70      	pop	{r4, r5, r6, pc}
  406b40:	460a      	mov	r2, r1
  406b42:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  406b46:	4b1a      	ldr	r3, [pc, #104]	; (406bb0 <pio_configure_pin_group+0xd0>)
  406b48:	4798      	blx	r3
  406b4a:	f014 0f01 	tst.w	r4, #1
  406b4e:	bf14      	ite	ne
  406b50:	666e      	strne	r6, [r5, #100]	; 0x64
  406b52:	662e      	streq	r6, [r5, #96]	; 0x60
  406b54:	2001      	movs	r0, #1
  406b56:	e7f1      	b.n	406b3c <pio_configure_pin_group+0x5c>
  406b58:	460a      	mov	r2, r1
  406b5a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  406b5e:	4b14      	ldr	r3, [pc, #80]	; (406bb0 <pio_configure_pin_group+0xd0>)
  406b60:	4798      	blx	r3
  406b62:	f014 0f01 	tst.w	r4, #1
  406b66:	bf14      	ite	ne
  406b68:	666e      	strne	r6, [r5, #100]	; 0x64
  406b6a:	662e      	streq	r6, [r5, #96]	; 0x60
  406b6c:	2001      	movs	r0, #1
  406b6e:	e7e5      	b.n	406b3c <pio_configure_pin_group+0x5c>
  406b70:	460a      	mov	r2, r1
  406b72:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  406b76:	4b0e      	ldr	r3, [pc, #56]	; (406bb0 <pio_configure_pin_group+0xd0>)
  406b78:	4798      	blx	r3
  406b7a:	f014 0f01 	tst.w	r4, #1
  406b7e:	bf14      	ite	ne
  406b80:	666e      	strne	r6, [r5, #100]	; 0x64
  406b82:	662e      	streq	r6, [r5, #96]	; 0x60
  406b84:	2001      	movs	r0, #1
  406b86:	e7d9      	b.n	406b3c <pio_configure_pin_group+0x5c>
  406b88:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
  406b8c:	f004 0301 	and.w	r3, r4, #1
  406b90:	9300      	str	r3, [sp, #0]
  406b92:	f3c4 0380 	ubfx	r3, r4, #2, #1
  406b96:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  406b9a:	bf14      	ite	ne
  406b9c:	2200      	movne	r2, #0
  406b9e:	2201      	moveq	r2, #1
  406ba0:	4631      	mov	r1, r6
  406ba2:	4628      	mov	r0, r5
  406ba4:	4c03      	ldr	r4, [pc, #12]	; (406bb4 <pio_configure_pin_group+0xd4>)
  406ba6:	47a0      	blx	r4
  406ba8:	2001      	movs	r0, #1
  406baa:	e7c7      	b.n	406b3c <pio_configure_pin_group+0x5c>
  406bac:	004068e9 	.word	0x004068e9
  406bb0:	00406859 	.word	0x00406859
  406bb4:	0040691b 	.word	0x0040691b

00406bb8 <pio_handler_process>:
  406bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406bbc:	4681      	mov	r9, r0
  406bbe:	460f      	mov	r7, r1
  406bc0:	4b12      	ldr	r3, [pc, #72]	; (406c0c <pio_handler_process+0x54>)
  406bc2:	4798      	blx	r3
  406bc4:	4605      	mov	r5, r0
  406bc6:	4648      	mov	r0, r9
  406bc8:	4b11      	ldr	r3, [pc, #68]	; (406c10 <pio_handler_process+0x58>)
  406bca:	4798      	blx	r3
  406bcc:	4005      	ands	r5, r0
  406bce:	d013      	beq.n	406bf8 <pio_handler_process+0x40>
  406bd0:	4c10      	ldr	r4, [pc, #64]	; (406c14 <pio_handler_process+0x5c>)
  406bd2:	f104 0660 	add.w	r6, r4, #96	; 0x60
  406bd6:	e003      	b.n	406be0 <pio_handler_process+0x28>
  406bd8:	42b4      	cmp	r4, r6
  406bda:	d00d      	beq.n	406bf8 <pio_handler_process+0x40>
  406bdc:	3410      	adds	r4, #16
  406bde:	b15d      	cbz	r5, 406bf8 <pio_handler_process+0x40>
  406be0:	6820      	ldr	r0, [r4, #0]
  406be2:	42b8      	cmp	r0, r7
  406be4:	d1f8      	bne.n	406bd8 <pio_handler_process+0x20>
  406be6:	6861      	ldr	r1, [r4, #4]
  406be8:	4229      	tst	r1, r5
  406bea:	d0f5      	beq.n	406bd8 <pio_handler_process+0x20>
  406bec:	68e3      	ldr	r3, [r4, #12]
  406bee:	4798      	blx	r3
  406bf0:	6863      	ldr	r3, [r4, #4]
  406bf2:	ea25 0503 	bic.w	r5, r5, r3
  406bf6:	e7ef      	b.n	406bd8 <pio_handler_process+0x20>
  406bf8:	4b07      	ldr	r3, [pc, #28]	; (406c18 <pio_handler_process+0x60>)
  406bfa:	681b      	ldr	r3, [r3, #0]
  406bfc:	b123      	cbz	r3, 406c08 <pio_handler_process+0x50>
  406bfe:	4b07      	ldr	r3, [pc, #28]	; (406c1c <pio_handler_process+0x64>)
  406c00:	681b      	ldr	r3, [r3, #0]
  406c02:	b10b      	cbz	r3, 406c08 <pio_handler_process+0x50>
  406c04:	4648      	mov	r0, r9
  406c06:	4798      	blx	r3
  406c08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406c0c:	00406983 	.word	0x00406983
  406c10:	00406987 	.word	0x00406987
  406c14:	20000e10 	.word	0x20000e10
  406c18:	20002010 	.word	0x20002010
  406c1c:	20000e84 	.word	0x20000e84

00406c20 <pio_handler_set>:
  406c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406c22:	4c0c      	ldr	r4, [pc, #48]	; (406c54 <pio_handler_set+0x34>)
  406c24:	6824      	ldr	r4, [r4, #0]
  406c26:	2c06      	cmp	r4, #6
  406c28:	d901      	bls.n	406c2e <pio_handler_set+0xe>
  406c2a:	2001      	movs	r0, #1
  406c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406c2e:	4615      	mov	r5, r2
  406c30:	4f09      	ldr	r7, [pc, #36]	; (406c58 <pio_handler_set+0x38>)
  406c32:	0126      	lsls	r6, r4, #4
  406c34:	19ba      	adds	r2, r7, r6
  406c36:	51b9      	str	r1, [r7, r6]
  406c38:	6055      	str	r5, [r2, #4]
  406c3a:	6093      	str	r3, [r2, #8]
  406c3c:	9906      	ldr	r1, [sp, #24]
  406c3e:	60d1      	str	r1, [r2, #12]
  406c40:	3401      	adds	r4, #1
  406c42:	4a04      	ldr	r2, [pc, #16]	; (406c54 <pio_handler_set+0x34>)
  406c44:	6014      	str	r4, [r2, #0]
  406c46:	461a      	mov	r2, r3
  406c48:	4629      	mov	r1, r5
  406c4a:	4b04      	ldr	r3, [pc, #16]	; (406c5c <pio_handler_set+0x3c>)
  406c4c:	4798      	blx	r3
  406c4e:	2000      	movs	r0, #0
  406c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406c52:	bf00      	nop
  406c54:	20000e80 	.word	0x20000e80
  406c58:	20000e10 	.word	0x20000e10
  406c5c:	0040694f 	.word	0x0040694f

00406c60 <PIOA_Handler>:
  406c60:	b508      	push	{r3, lr}
  406c62:	210b      	movs	r1, #11
  406c64:	4801      	ldr	r0, [pc, #4]	; (406c6c <PIOA_Handler+0xc>)
  406c66:	4b02      	ldr	r3, [pc, #8]	; (406c70 <PIOA_Handler+0x10>)
  406c68:	4798      	blx	r3
  406c6a:	bd08      	pop	{r3, pc}
  406c6c:	400e0e00 	.word	0x400e0e00
  406c70:	00406bb9 	.word	0x00406bb9

00406c74 <PIOB_Handler>:
  406c74:	b508      	push	{r3, lr}
  406c76:	210c      	movs	r1, #12
  406c78:	4801      	ldr	r0, [pc, #4]	; (406c80 <PIOB_Handler+0xc>)
  406c7a:	4b02      	ldr	r3, [pc, #8]	; (406c84 <PIOB_Handler+0x10>)
  406c7c:	4798      	blx	r3
  406c7e:	bd08      	pop	{r3, pc}
  406c80:	400e1000 	.word	0x400e1000
  406c84:	00406bb9 	.word	0x00406bb9

00406c88 <pmc_switch_mck_to_sclk>:
  406c88:	4b16      	ldr	r3, [pc, #88]	; (406ce4 <pmc_switch_mck_to_sclk+0x5c>)
  406c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  406c8c:	f022 0203 	bic.w	r2, r2, #3
  406c90:	631a      	str	r2, [r3, #48]	; 0x30
  406c92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  406c94:	f013 0f08 	tst.w	r3, #8
  406c98:	d10a      	bne.n	406cb0 <pmc_switch_mck_to_sclk+0x28>
  406c9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  406c9e:	4911      	ldr	r1, [pc, #68]	; (406ce4 <pmc_switch_mck_to_sclk+0x5c>)
  406ca0:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  406ca2:	f012 0f08 	tst.w	r2, #8
  406ca6:	d103      	bne.n	406cb0 <pmc_switch_mck_to_sclk+0x28>
  406ca8:	3b01      	subs	r3, #1
  406caa:	d1f9      	bne.n	406ca0 <pmc_switch_mck_to_sclk+0x18>
  406cac:	2001      	movs	r0, #1
  406cae:	4770      	bx	lr
  406cb0:	4a0c      	ldr	r2, [pc, #48]	; (406ce4 <pmc_switch_mck_to_sclk+0x5c>)
  406cb2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  406cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  406cb8:	4318      	orrs	r0, r3
  406cba:	6310      	str	r0, [r2, #48]	; 0x30
  406cbc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  406cbe:	f013 0f08 	tst.w	r3, #8
  406cc2:	d10a      	bne.n	406cda <pmc_switch_mck_to_sclk+0x52>
  406cc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  406cc8:	4906      	ldr	r1, [pc, #24]	; (406ce4 <pmc_switch_mck_to_sclk+0x5c>)
  406cca:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  406ccc:	f012 0f08 	tst.w	r2, #8
  406cd0:	d105      	bne.n	406cde <pmc_switch_mck_to_sclk+0x56>
  406cd2:	3b01      	subs	r3, #1
  406cd4:	d1f9      	bne.n	406cca <pmc_switch_mck_to_sclk+0x42>
  406cd6:	2001      	movs	r0, #1
  406cd8:	4770      	bx	lr
  406cda:	2000      	movs	r0, #0
  406cdc:	4770      	bx	lr
  406cde:	2000      	movs	r0, #0
  406ce0:	4770      	bx	lr
  406ce2:	bf00      	nop
  406ce4:	400e0400 	.word	0x400e0400

00406ce8 <pmc_switch_mck_to_pllack>:
  406ce8:	4a17      	ldr	r2, [pc, #92]	; (406d48 <pmc_switch_mck_to_pllack+0x60>)
  406cea:	6b13      	ldr	r3, [r2, #48]	; 0x30
  406cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  406cf0:	4318      	orrs	r0, r3
  406cf2:	6310      	str	r0, [r2, #48]	; 0x30
  406cf4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  406cf6:	f013 0f08 	tst.w	r3, #8
  406cfa:	d10a      	bne.n	406d12 <pmc_switch_mck_to_pllack+0x2a>
  406cfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  406d00:	4911      	ldr	r1, [pc, #68]	; (406d48 <pmc_switch_mck_to_pllack+0x60>)
  406d02:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  406d04:	f012 0f08 	tst.w	r2, #8
  406d08:	d103      	bne.n	406d12 <pmc_switch_mck_to_pllack+0x2a>
  406d0a:	3b01      	subs	r3, #1
  406d0c:	d1f9      	bne.n	406d02 <pmc_switch_mck_to_pllack+0x1a>
  406d0e:	2001      	movs	r0, #1
  406d10:	4770      	bx	lr
  406d12:	4a0d      	ldr	r2, [pc, #52]	; (406d48 <pmc_switch_mck_to_pllack+0x60>)
  406d14:	6b13      	ldr	r3, [r2, #48]	; 0x30
  406d16:	f023 0303 	bic.w	r3, r3, #3
  406d1a:	f043 0302 	orr.w	r3, r3, #2
  406d1e:	6313      	str	r3, [r2, #48]	; 0x30
  406d20:	6e93      	ldr	r3, [r2, #104]	; 0x68
  406d22:	f013 0f08 	tst.w	r3, #8
  406d26:	d10a      	bne.n	406d3e <pmc_switch_mck_to_pllack+0x56>
  406d28:	f44f 6300 	mov.w	r3, #2048	; 0x800
  406d2c:	4906      	ldr	r1, [pc, #24]	; (406d48 <pmc_switch_mck_to_pllack+0x60>)
  406d2e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  406d30:	f012 0f08 	tst.w	r2, #8
  406d34:	d105      	bne.n	406d42 <pmc_switch_mck_to_pllack+0x5a>
  406d36:	3b01      	subs	r3, #1
  406d38:	d1f9      	bne.n	406d2e <pmc_switch_mck_to_pllack+0x46>
  406d3a:	2001      	movs	r0, #1
  406d3c:	4770      	bx	lr
  406d3e:	2000      	movs	r0, #0
  406d40:	4770      	bx	lr
  406d42:	2000      	movs	r0, #0
  406d44:	4770      	bx	lr
  406d46:	bf00      	nop
  406d48:	400e0400 	.word	0x400e0400

00406d4c <pmc_switch_sclk_to_32kxtal>:
  406d4c:	2801      	cmp	r0, #1
  406d4e:	d003      	beq.n	406d58 <pmc_switch_sclk_to_32kxtal+0xc>
  406d50:	4a05      	ldr	r2, [pc, #20]	; (406d68 <pmc_switch_sclk_to_32kxtal+0x1c>)
  406d52:	4b06      	ldr	r3, [pc, #24]	; (406d6c <pmc_switch_sclk_to_32kxtal+0x20>)
  406d54:	601a      	str	r2, [r3, #0]
  406d56:	4770      	bx	lr
  406d58:	4a04      	ldr	r2, [pc, #16]	; (406d6c <pmc_switch_sclk_to_32kxtal+0x20>)
  406d5a:	6893      	ldr	r3, [r2, #8]
  406d5c:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  406d60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  406d64:	6093      	str	r3, [r2, #8]
  406d66:	e7f3      	b.n	406d50 <pmc_switch_sclk_to_32kxtal+0x4>
  406d68:	a5000008 	.word	0xa5000008
  406d6c:	400e1410 	.word	0x400e1410

00406d70 <pmc_osc_is_ready_32kxtal>:
  406d70:	4b05      	ldr	r3, [pc, #20]	; (406d88 <pmc_osc_is_ready_32kxtal+0x18>)
  406d72:	695b      	ldr	r3, [r3, #20]
  406d74:	f013 0f80 	tst.w	r3, #128	; 0x80
  406d78:	bf1d      	ittte	ne
  406d7a:	4b04      	ldrne	r3, [pc, #16]	; (406d8c <pmc_osc_is_ready_32kxtal+0x1c>)
  406d7c:	6e98      	ldrne	r0, [r3, #104]	; 0x68
  406d7e:	f3c0 10c0 	ubfxne	r0, r0, #7, #1
  406d82:	2000      	moveq	r0, #0
  406d84:	4770      	bx	lr
  406d86:	bf00      	nop
  406d88:	400e1410 	.word	0x400e1410
  406d8c:	400e0400 	.word	0x400e0400

00406d90 <pmc_osc_disable_fastrc>:
  406d90:	4a04      	ldr	r2, [pc, #16]	; (406da4 <pmc_osc_disable_fastrc+0x14>)
  406d92:	6a13      	ldr	r3, [r2, #32]
  406d94:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  406d98:	f023 0378 	bic.w	r3, r3, #120	; 0x78
  406d9c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  406da0:	6213      	str	r3, [r2, #32]
  406da2:	4770      	bx	lr
  406da4:	400e0400 	.word	0x400e0400

00406da8 <pmc_switch_mainck_to_xtal>:
  406da8:	b9c8      	cbnz	r0, 406dde <pmc_switch_mainck_to_xtal+0x36>
  406daa:	4a11      	ldr	r2, [pc, #68]	; (406df0 <pmc_switch_mainck_to_xtal+0x48>)
  406dac:	6a13      	ldr	r3, [r2, #32]
  406dae:	0209      	lsls	r1, r1, #8
  406db0:	b289      	uxth	r1, r1
  406db2:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  406db6:	f023 0303 	bic.w	r3, r3, #3
  406dba:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  406dbe:	f043 0301 	orr.w	r3, r3, #1
  406dc2:	430b      	orrs	r3, r1
  406dc4:	6213      	str	r3, [r2, #32]
  406dc6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  406dc8:	f013 0f01 	tst.w	r3, #1
  406dcc:	d0fb      	beq.n	406dc6 <pmc_switch_mainck_to_xtal+0x1e>
  406dce:	4a08      	ldr	r2, [pc, #32]	; (406df0 <pmc_switch_mainck_to_xtal+0x48>)
  406dd0:	6a13      	ldr	r3, [r2, #32]
  406dd2:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  406dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  406dda:	6213      	str	r3, [r2, #32]
  406ddc:	4770      	bx	lr
  406dde:	4904      	ldr	r1, [pc, #16]	; (406df0 <pmc_switch_mainck_to_xtal+0x48>)
  406de0:	6a0b      	ldr	r3, [r1, #32]
  406de2:	4a04      	ldr	r2, [pc, #16]	; (406df4 <pmc_switch_mainck_to_xtal+0x4c>)
  406de4:	401a      	ands	r2, r3
  406de6:	4b04      	ldr	r3, [pc, #16]	; (406df8 <pmc_switch_mainck_to_xtal+0x50>)
  406de8:	4313      	orrs	r3, r2
  406dea:	620b      	str	r3, [r1, #32]
  406dec:	4770      	bx	lr
  406dee:	bf00      	nop
  406df0:	400e0400 	.word	0x400e0400
  406df4:	fec8fffc 	.word	0xfec8fffc
  406df8:	01370002 	.word	0x01370002

00406dfc <pmc_osc_disable_xtal>:
  406dfc:	b948      	cbnz	r0, 406e12 <pmc_osc_disable_xtal+0x16>
  406dfe:	4a0a      	ldr	r2, [pc, #40]	; (406e28 <pmc_osc_disable_xtal+0x2c>)
  406e00:	6a13      	ldr	r3, [r2, #32]
  406e02:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  406e06:	f023 0301 	bic.w	r3, r3, #1
  406e0a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  406e0e:	6213      	str	r3, [r2, #32]
  406e10:	4770      	bx	lr
  406e12:	4a05      	ldr	r2, [pc, #20]	; (406e28 <pmc_osc_disable_xtal+0x2c>)
  406e14:	6a13      	ldr	r3, [r2, #32]
  406e16:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  406e1a:	f023 0302 	bic.w	r3, r3, #2
  406e1e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  406e22:	6213      	str	r3, [r2, #32]
  406e24:	4770      	bx	lr
  406e26:	bf00      	nop
  406e28:	400e0400 	.word	0x400e0400

00406e2c <pmc_osc_is_ready_mainck>:
  406e2c:	4b02      	ldr	r3, [pc, #8]	; (406e38 <pmc_osc_is_ready_mainck+0xc>)
  406e2e:	6e98      	ldr	r0, [r3, #104]	; 0x68
  406e30:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  406e34:	4770      	bx	lr
  406e36:	bf00      	nop
  406e38:	400e0400 	.word	0x400e0400

00406e3c <pmc_disable_pllack>:
  406e3c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  406e40:	4b01      	ldr	r3, [pc, #4]	; (406e48 <pmc_disable_pllack+0xc>)
  406e42:	629a      	str	r2, [r3, #40]	; 0x28
  406e44:	4770      	bx	lr
  406e46:	bf00      	nop
  406e48:	400e0400 	.word	0x400e0400

00406e4c <pmc_is_locked_pllack>:
  406e4c:	4b02      	ldr	r3, [pc, #8]	; (406e58 <pmc_is_locked_pllack+0xc>)
  406e4e:	6e98      	ldr	r0, [r3, #104]	; 0x68
  406e50:	f000 0002 	and.w	r0, r0, #2
  406e54:	4770      	bx	lr
  406e56:	bf00      	nop
  406e58:	400e0400 	.word	0x400e0400

00406e5c <pmc_enable_periph_clk>:
  406e5c:	2822      	cmp	r0, #34	; 0x22
  406e5e:	d81e      	bhi.n	406e9e <pmc_enable_periph_clk+0x42>
  406e60:	281f      	cmp	r0, #31
  406e62:	d80c      	bhi.n	406e7e <pmc_enable_periph_clk+0x22>
  406e64:	4b11      	ldr	r3, [pc, #68]	; (406eac <pmc_enable_periph_clk+0x50>)
  406e66:	699a      	ldr	r2, [r3, #24]
  406e68:	2301      	movs	r3, #1
  406e6a:	4083      	lsls	r3, r0
  406e6c:	4393      	bics	r3, r2
  406e6e:	d018      	beq.n	406ea2 <pmc_enable_periph_clk+0x46>
  406e70:	2301      	movs	r3, #1
  406e72:	fa03 f000 	lsl.w	r0, r3, r0
  406e76:	4b0d      	ldr	r3, [pc, #52]	; (406eac <pmc_enable_periph_clk+0x50>)
  406e78:	6118      	str	r0, [r3, #16]
  406e7a:	2000      	movs	r0, #0
  406e7c:	4770      	bx	lr
  406e7e:	3820      	subs	r0, #32
  406e80:	4b0a      	ldr	r3, [pc, #40]	; (406eac <pmc_enable_periph_clk+0x50>)
  406e82:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  406e86:	2301      	movs	r3, #1
  406e88:	4083      	lsls	r3, r0
  406e8a:	4393      	bics	r3, r2
  406e8c:	d00b      	beq.n	406ea6 <pmc_enable_periph_clk+0x4a>
  406e8e:	2301      	movs	r3, #1
  406e90:	fa03 f000 	lsl.w	r0, r3, r0
  406e94:	4b05      	ldr	r3, [pc, #20]	; (406eac <pmc_enable_periph_clk+0x50>)
  406e96:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
  406e9a:	2000      	movs	r0, #0
  406e9c:	4770      	bx	lr
  406e9e:	2001      	movs	r0, #1
  406ea0:	4770      	bx	lr
  406ea2:	2000      	movs	r0, #0
  406ea4:	4770      	bx	lr
  406ea6:	2000      	movs	r0, #0
  406ea8:	4770      	bx	lr
  406eaa:	bf00      	nop
  406eac:	400e0400 	.word	0x400e0400

00406eb0 <pmc_disable_all_periph_clk>:
  406eb0:	f06f 0203 	mvn.w	r2, #3
  406eb4:	4b08      	ldr	r3, [pc, #32]	; (406ed8 <pmc_disable_all_periph_clk+0x28>)
  406eb6:	615a      	str	r2, [r3, #20]
  406eb8:	461a      	mov	r2, r3
  406eba:	6993      	ldr	r3, [r2, #24]
  406ebc:	f033 0303 	bics.w	r3, r3, #3
  406ec0:	d1fb      	bne.n	406eba <pmc_disable_all_periph_clk+0xa>
  406ec2:	f04f 32ff 	mov.w	r2, #4294967295
  406ec6:	4b04      	ldr	r3, [pc, #16]	; (406ed8 <pmc_disable_all_periph_clk+0x28>)
  406ec8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  406ecc:	461a      	mov	r2, r3
  406ece:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
  406ed2:	2b00      	cmp	r3, #0
  406ed4:	d1fb      	bne.n	406ece <pmc_disable_all_periph_clk+0x1e>
  406ed6:	4770      	bx	lr
  406ed8:	400e0400 	.word	0x400e0400

00406edc <pmc_enable_backupmode>:
  406edc:	4a05      	ldr	r2, [pc, #20]	; (406ef4 <pmc_enable_backupmode+0x18>)
  406ede:	6913      	ldr	r3, [r2, #16]
  406ee0:	f043 0304 	orr.w	r3, r3, #4
  406ee4:	6113      	str	r3, [r2, #16]
  406ee6:	4a04      	ldr	r2, [pc, #16]	; (406ef8 <pmc_enable_backupmode+0x1c>)
  406ee8:	4b04      	ldr	r3, [pc, #16]	; (406efc <pmc_enable_backupmode+0x20>)
  406eea:	601a      	str	r2, [r3, #0]
  406eec:	bf20      	wfe
  406eee:	bf30      	wfi
  406ef0:	4770      	bx	lr
  406ef2:	bf00      	nop
  406ef4:	e000ed00 	.word	0xe000ed00
  406ef8:	a5000004 	.word	0xa5000004
  406efc:	400e1410 	.word	0x400e1410

00406f00 <rtc_set_hour_mode>:
  406f00:	b921      	cbnz	r1, 406f0c <rtc_set_hour_mode+0xc>
  406f02:	6843      	ldr	r3, [r0, #4]
  406f04:	f023 0301 	bic.w	r3, r3, #1
  406f08:	6043      	str	r3, [r0, #4]
  406f0a:	4770      	bx	lr
  406f0c:	6843      	ldr	r3, [r0, #4]
  406f0e:	f043 0301 	orr.w	r3, r3, #1
  406f12:	6043      	str	r3, [r0, #4]
  406f14:	4770      	bx	lr

00406f16 <rtc_get_time>:
  406f16:	b430      	push	{r4, r5}
  406f18:	6885      	ldr	r5, [r0, #8]
  406f1a:	6884      	ldr	r4, [r0, #8]
  406f1c:	42a5      	cmp	r5, r4
  406f1e:	d003      	beq.n	406f28 <rtc_get_time+0x12>
  406f20:	6885      	ldr	r5, [r0, #8]
  406f22:	6884      	ldr	r4, [r0, #8]
  406f24:	42ac      	cmp	r4, r5
  406f26:	d1fb      	bne.n	406f20 <rtc_get_time+0xa>
  406f28:	b161      	cbz	r1, 406f44 <rtc_get_time+0x2e>
  406f2a:	f3c4 5001 	ubfx	r0, r4, #20, #2
  406f2e:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  406f32:	f3c4 4003 	ubfx	r0, r4, #16, #4
  406f36:	eb00 0045 	add.w	r0, r0, r5, lsl #1
  406f3a:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
  406f3e:	bf18      	it	ne
  406f40:	300c      	addne	r0, #12
  406f42:	6008      	str	r0, [r1, #0]
  406f44:	b142      	cbz	r2, 406f58 <rtc_get_time+0x42>
  406f46:	f3c4 3102 	ubfx	r1, r4, #12, #3
  406f4a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  406f4e:	f3c4 2003 	ubfx	r0, r4, #8, #4
  406f52:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  406f56:	6011      	str	r1, [r2, #0]
  406f58:	b143      	cbz	r3, 406f6c <rtc_get_time+0x56>
  406f5a:	f3c4 1202 	ubfx	r2, r4, #4, #3
  406f5e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  406f62:	f004 040f 	and.w	r4, r4, #15
  406f66:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  406f6a:	601c      	str	r4, [r3, #0]
  406f6c:	bc30      	pop	{r4, r5}
  406f6e:	4770      	bx	lr

00406f70 <rtc_set_time>:
  406f70:	b4f0      	push	{r4, r5, r6, r7}
  406f72:	6844      	ldr	r4, [r0, #4]
  406f74:	f014 0f01 	tst.w	r4, #1
  406f78:	d005      	beq.n	406f86 <rtc_set_time+0x16>
  406f7a:	290c      	cmp	r1, #12
  406f7c:	d93d      	bls.n	406ffa <rtc_set_time+0x8a>
  406f7e:	390c      	subs	r1, #12
  406f80:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  406f84:	e000      	b.n	406f88 <rtc_set_time+0x18>
  406f86:	2700      	movs	r7, #0
  406f88:	4c1d      	ldr	r4, [pc, #116]	; (407000 <rtc_set_time+0x90>)
  406f8a:	fba4 5603 	umull	r5, r6, r4, r3
  406f8e:	08f6      	lsrs	r6, r6, #3
  406f90:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  406f94:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  406f98:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  406f9c:	fba4 6502 	umull	r6, r5, r4, r2
  406fa0:	08ed      	lsrs	r5, r5, #3
  406fa2:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  406fa6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  406faa:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  406fae:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  406fb2:	433b      	orrs	r3, r7
  406fb4:	fba4 4201 	umull	r4, r2, r4, r1
  406fb8:	08d2      	lsrs	r2, r2, #3
  406fba:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
  406fbe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  406fc2:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
  406fc6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  406fca:	6803      	ldr	r3, [r0, #0]
  406fcc:	f043 0301 	orr.w	r3, r3, #1
  406fd0:	6003      	str	r3, [r0, #0]
  406fd2:	6983      	ldr	r3, [r0, #24]
  406fd4:	f013 0f01 	tst.w	r3, #1
  406fd8:	d0fb      	beq.n	406fd2 <rtc_set_time+0x62>
  406fda:	2301      	movs	r3, #1
  406fdc:	61c3      	str	r3, [r0, #28]
  406fde:	6081      	str	r1, [r0, #8]
  406fe0:	6803      	ldr	r3, [r0, #0]
  406fe2:	f023 0301 	bic.w	r3, r3, #1
  406fe6:	6003      	str	r3, [r0, #0]
  406fe8:	69c3      	ldr	r3, [r0, #28]
  406fea:	f043 0304 	orr.w	r3, r3, #4
  406fee:	61c3      	str	r3, [r0, #28]
  406ff0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  406ff2:	f000 0001 	and.w	r0, r0, #1
  406ff6:	bcf0      	pop	{r4, r5, r6, r7}
  406ff8:	4770      	bx	lr
  406ffa:	2700      	movs	r7, #0
  406ffc:	e7c4      	b.n	406f88 <rtc_set_time+0x18>
  406ffe:	bf00      	nop
  407000:	cccccccd 	.word	0xcccccccd

00407004 <rtc_get_date>:
  407004:	b4f0      	push	{r4, r5, r6, r7}
  407006:	9e04      	ldr	r6, [sp, #16]
  407008:	68c5      	ldr	r5, [r0, #12]
  40700a:	68c4      	ldr	r4, [r0, #12]
  40700c:	42a5      	cmp	r5, r4
  40700e:	d003      	beq.n	407018 <rtc_get_date+0x14>
  407010:	68c5      	ldr	r5, [r0, #12]
  407012:	68c4      	ldr	r4, [r0, #12]
  407014:	42ac      	cmp	r4, r5
  407016:	d1fb      	bne.n	407010 <rtc_get_date+0xc>
  407018:	b199      	cbz	r1, 407042 <rtc_get_date+0x3e>
  40701a:	f3c4 3003 	ubfx	r0, r4, #12, #4
  40701e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  407022:	f3c4 2703 	ubfx	r7, r4, #8, #4
  407026:	eb07 0740 	add.w	r7, r7, r0, lsl #1
  40702a:	f3c4 1002 	ubfx	r0, r4, #4, #3
  40702e:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  407032:	f004 000f 	and.w	r0, r4, #15
  407036:	eb00 0045 	add.w	r0, r0, r5, lsl #1
  40703a:	2564      	movs	r5, #100	; 0x64
  40703c:	fb05 7000 	mla	r0, r5, r0, r7
  407040:	6008      	str	r0, [r1, #0]
  407042:	b142      	cbz	r2, 407056 <rtc_get_date+0x52>
  407044:	f3c4 5000 	ubfx	r0, r4, #20, #1
  407048:	0081      	lsls	r1, r0, #2
  40704a:	4408      	add	r0, r1
  40704c:	f3c4 4103 	ubfx	r1, r4, #16, #4
  407050:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  407054:	6011      	str	r1, [r2, #0]
  407056:	b143      	cbz	r3, 40706a <rtc_get_date+0x66>
  407058:	f3c4 7201 	ubfx	r2, r4, #28, #2
  40705c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  407060:	f3c4 6103 	ubfx	r1, r4, #24, #4
  407064:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  407068:	601a      	str	r2, [r3, #0]
  40706a:	b116      	cbz	r6, 407072 <rtc_get_date+0x6e>
  40706c:	f3c4 5442 	ubfx	r4, r4, #21, #3
  407070:	6034      	str	r4, [r6, #0]
  407072:	bcf0      	pop	{r4, r5, r6, r7}
  407074:	4770      	bx	lr
	...

00407078 <rtc_set_date>:
  407078:	b470      	push	{r4, r5, r6}
  40707a:	4d2a      	ldr	r5, [pc, #168]	; (407124 <rtc_set_date+0xac>)
  40707c:	fba5 4603 	umull	r4, r6, r5, r3
  407080:	08f6      	lsrs	r6, r6, #3
  407082:	9c03      	ldr	r4, [sp, #12]
  407084:	0564      	lsls	r4, r4, #21
  407086:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
  40708a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40708e:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
  407092:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  407096:	fba5 6402 	umull	r6, r4, r5, r2
  40709a:	08e4      	lsrs	r4, r4, #3
  40709c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  4070a0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4070a4:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
  4070a8:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  4070ac:	4b1e      	ldr	r3, [pc, #120]	; (407128 <rtc_set_date+0xb0>)
  4070ae:	fba3 4301 	umull	r4, r3, r3, r1
  4070b2:	099b      	lsrs	r3, r3, #6
  4070b4:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
  4070b8:	4b1c      	ldr	r3, [pc, #112]	; (40712c <rtc_set_date+0xb4>)
  4070ba:	fba3 4301 	umull	r4, r3, r3, r1
  4070be:	095b      	lsrs	r3, r3, #5
  4070c0:	fba5 6403 	umull	r6, r4, r5, r3
  4070c4:	08e4      	lsrs	r4, r4, #3
  4070c6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4070ca:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
  4070ce:	431a      	orrs	r2, r3
  4070d0:	fba5 4301 	umull	r4, r3, r5, r1
  4070d4:	08db      	lsrs	r3, r3, #3
  4070d6:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  4070da:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
  4070de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  4070e2:	fba5 1503 	umull	r1, r5, r5, r3
  4070e6:	08ed      	lsrs	r5, r5, #3
  4070e8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4070ec:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
  4070f0:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  4070f4:	6803      	ldr	r3, [r0, #0]
  4070f6:	f043 0302 	orr.w	r3, r3, #2
  4070fa:	6003      	str	r3, [r0, #0]
  4070fc:	6983      	ldr	r3, [r0, #24]
  4070fe:	f013 0f01 	tst.w	r3, #1
  407102:	d0fb      	beq.n	4070fc <rtc_set_date+0x84>
  407104:	2301      	movs	r3, #1
  407106:	61c3      	str	r3, [r0, #28]
  407108:	60c2      	str	r2, [r0, #12]
  40710a:	6803      	ldr	r3, [r0, #0]
  40710c:	f023 0302 	bic.w	r3, r3, #2
  407110:	6003      	str	r3, [r0, #0]
  407112:	69c3      	ldr	r3, [r0, #28]
  407114:	f043 0304 	orr.w	r3, r3, #4
  407118:	61c3      	str	r3, [r0, #28]
  40711a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  40711c:	f000 0002 	and.w	r0, r0, #2
  407120:	bc70      	pop	{r4, r5, r6}
  407122:	4770      	bx	lr
  407124:	cccccccd 	.word	0xcccccccd
  407128:	10624dd3 	.word	0x10624dd3
  40712c:	51eb851f 	.word	0x51eb851f

00407130 <rtc_set_calibration>:
  407130:	b410      	push	{r4}
  407132:	6844      	ldr	r4, [r0, #4]
  407134:	b159      	cbz	r1, 40714e <rtc_set_calibration+0x1e>
  407136:	f044 0410 	orr.w	r4, r4, #16
  40713a:	0212      	lsls	r2, r2, #8
  40713c:	f402 42fe 	and.w	r2, r2, #32512	; 0x7f00
  407140:	4322      	orrs	r2, r4
  407142:	b93b      	cbnz	r3, 407154 <rtc_set_calibration+0x24>
  407144:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  407148:	6042      	str	r2, [r0, #4]
  40714a:	bc10      	pop	{r4}
  40714c:	4770      	bx	lr
  40714e:	f024 0410 	bic.w	r4, r4, #16
  407152:	e7f2      	b.n	40713a <rtc_set_calibration+0xa>
  407154:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  407158:	e7f6      	b.n	407148 <rtc_set_calibration+0x18>

0040715a <uart_init>:
  40715a:	b410      	push	{r4}
  40715c:	23ac      	movs	r3, #172	; 0xac
  40715e:	6003      	str	r3, [r0, #0]
  407160:	680b      	ldr	r3, [r1, #0]
  407162:	684a      	ldr	r2, [r1, #4]
  407164:	fbb3 f3f2 	udiv	r3, r3, r2
  407168:	091b      	lsrs	r3, r3, #4
  40716a:	1e5c      	subs	r4, r3, #1
  40716c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  407170:	4294      	cmp	r4, r2
  407172:	d80b      	bhi.n	40718c <uart_init+0x32>
  407174:	6203      	str	r3, [r0, #32]
  407176:	688b      	ldr	r3, [r1, #8]
  407178:	6043      	str	r3, [r0, #4]
  40717a:	f240 2302 	movw	r3, #514	; 0x202
  40717e:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
  407182:	2350      	movs	r3, #80	; 0x50
  407184:	6003      	str	r3, [r0, #0]
  407186:	2000      	movs	r0, #0
  407188:	bc10      	pop	{r4}
  40718a:	4770      	bx	lr
  40718c:	2001      	movs	r0, #1
  40718e:	e7fb      	b.n	407188 <uart_init+0x2e>

00407190 <uart_enable>:
  407190:	2350      	movs	r3, #80	; 0x50
  407192:	6003      	str	r3, [r0, #0]
  407194:	4770      	bx	lr

00407196 <uart_enable_interrupt>:
  407196:	6081      	str	r1, [r0, #8]
  407198:	4770      	bx	lr

0040719a <uart_get_status>:
  40719a:	6940      	ldr	r0, [r0, #20]
  40719c:	4770      	bx	lr

0040719e <uart_reset_status>:
  40719e:	f44f 7380 	mov.w	r3, #256	; 0x100
  4071a2:	6003      	str	r3, [r0, #0]
  4071a4:	4770      	bx	lr

004071a6 <uart_is_tx_empty>:
  4071a6:	6940      	ldr	r0, [r0, #20]
  4071a8:	f3c0 2040 	ubfx	r0, r0, #9, #1
  4071ac:	4770      	bx	lr

004071ae <uart_is_rx_ready>:
  4071ae:	6940      	ldr	r0, [r0, #20]
  4071b0:	f000 0001 	and.w	r0, r0, #1
  4071b4:	4770      	bx	lr

004071b6 <uart_write>:
  4071b6:	6943      	ldr	r3, [r0, #20]
  4071b8:	f013 0f02 	tst.w	r3, #2
  4071bc:	bf1a      	itte	ne
  4071be:	61c1      	strne	r1, [r0, #28]
  4071c0:	2000      	movne	r0, #0
  4071c2:	2001      	moveq	r0, #1
  4071c4:	4770      	bx	lr

004071c6 <uart_read>:
  4071c6:	6943      	ldr	r3, [r0, #20]
  4071c8:	f013 0f01 	tst.w	r3, #1
  4071cc:	bf1d      	ittte	ne
  4071ce:	6983      	ldrne	r3, [r0, #24]
  4071d0:	700b      	strbne	r3, [r1, #0]
  4071d2:	2000      	movne	r0, #0
  4071d4:	2001      	moveq	r0, #1
  4071d6:	4770      	bx	lr

004071d8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4071d8:	e7fe      	b.n	4071d8 <Dummy_Handler>
	...

004071dc <Reset_Handler>:
{
  4071dc:	b508      	push	{r3, lr}
	if (pSrc > pDest) {
  4071de:	4b21      	ldr	r3, [pc, #132]	; (407264 <Reset_Handler+0x88>)
  4071e0:	4a21      	ldr	r2, [pc, #132]	; (407268 <Reset_Handler+0x8c>)
  4071e2:	429a      	cmp	r2, r3
  4071e4:	d928      	bls.n	407238 <Reset_Handler+0x5c>
		for (; pDest < &_erelocate;) {
  4071e6:	4b21      	ldr	r3, [pc, #132]	; (40726c <Reset_Handler+0x90>)
  4071e8:	4a1e      	ldr	r2, [pc, #120]	; (407264 <Reset_Handler+0x88>)
  4071ea:	429a      	cmp	r2, r3
  4071ec:	d20c      	bcs.n	407208 <Reset_Handler+0x2c>
  4071ee:	3b01      	subs	r3, #1
  4071f0:	1a9b      	subs	r3, r3, r2
  4071f2:	f023 0303 	bic.w	r3, r3, #3
  4071f6:	3304      	adds	r3, #4
  4071f8:	4413      	add	r3, r2
  4071fa:	491b      	ldr	r1, [pc, #108]	; (407268 <Reset_Handler+0x8c>)
			*pDest++ = *pSrc++;
  4071fc:	f851 0b04 	ldr.w	r0, [r1], #4
  407200:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  407204:	429a      	cmp	r2, r3
  407206:	d1f9      	bne.n	4071fc <Reset_Handler+0x20>
  __ASM volatile ("nop");
  407208:	bf00      	nop
	for (pDest = &_szero; pDest < &_ezero;) {
  40720a:	4b19      	ldr	r3, [pc, #100]	; (407270 <Reset_Handler+0x94>)
  40720c:	4a19      	ldr	r2, [pc, #100]	; (407274 <Reset_Handler+0x98>)
  40720e:	429a      	cmp	r2, r3
  407210:	d20a      	bcs.n	407228 <Reset_Handler+0x4c>
  407212:	3b01      	subs	r3, #1
  407214:	1a9b      	subs	r3, r3, r2
  407216:	f023 0303 	bic.w	r3, r3, #3
  40721a:	3304      	adds	r3, #4
  40721c:	4413      	add	r3, r2
		*pDest++ = 0;
  40721e:	2100      	movs	r1, #0
  407220:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  407224:	429a      	cmp	r2, r3
  407226:	d1fb      	bne.n	407220 <Reset_Handler+0x44>
	SCB->VTOR = ((uint32_t) pSrc);
  407228:	4b13      	ldr	r3, [pc, #76]	; (407278 <Reset_Handler+0x9c>)
  40722a:	4a14      	ldr	r2, [pc, #80]	; (40727c <Reset_Handler+0xa0>)
  40722c:	609a      	str	r2, [r3, #8]
	__libc_init_array();
  40722e:	4b14      	ldr	r3, [pc, #80]	; (407280 <Reset_Handler+0xa4>)
  407230:	4798      	blx	r3
	main();
  407232:	4b14      	ldr	r3, [pc, #80]	; (407284 <Reset_Handler+0xa8>)
  407234:	4798      	blx	r3
  407236:	e7fe      	b.n	407236 <Reset_Handler+0x5a>
	} else if (pSrc < pDest) {
  407238:	4b0a      	ldr	r3, [pc, #40]	; (407264 <Reset_Handler+0x88>)
  40723a:	4a0b      	ldr	r2, [pc, #44]	; (407268 <Reset_Handler+0x8c>)
  40723c:	429a      	cmp	r2, r3
  40723e:	d2e3      	bcs.n	407208 <Reset_Handler+0x2c>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  407240:	4b0a      	ldr	r3, [pc, #40]	; (40726c <Reset_Handler+0x90>)
  407242:	4808      	ldr	r0, [pc, #32]	; (407264 <Reset_Handler+0x88>)
  407244:	1a18      	subs	r0, r3, r0
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  407246:	4611      	mov	r1, r2
  407248:	3a04      	subs	r2, #4
  40724a:	4402      	add	r2, r0
		for (;nb_bytes;nb_bytes -= 4) {
  40724c:	2800      	cmp	r0, #0
  40724e:	d0db      	beq.n	407208 <Reset_Handler+0x2c>
  407250:	f1c1 0104 	rsb	r1, r1, #4
			*pDest-- = *pSrc--;
  407254:	f852 0904 	ldr.w	r0, [r2], #-4
  407258:	f843 0d04 	str.w	r0, [r3, #-4]!
		for (;nb_bytes;nb_bytes -= 4) {
  40725c:	42ca      	cmn	r2, r1
  40725e:	d1f9      	bne.n	407254 <Reset_Handler+0x78>
  407260:	e7d2      	b.n	407208 <Reset_Handler+0x2c>
  407262:	bf00      	nop
  407264:	20000000 	.word	0x20000000
  407268:	0041166c 	.word	0x0041166c
  40726c:	20000a70 	.word	0x20000a70
  407270:	2000203c 	.word	0x2000203c
  407274:	20000a70 	.word	0x20000a70
  407278:	e000ed00 	.word	0xe000ed00
  40727c:	00402000 	.word	0x00402000
  407280:	0040b48d 	.word	0x0040b48d
  407284:	00409d1d 	.word	0x00409d1d

00407288 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  407288:	4b3c      	ldr	r3, [pc, #240]	; (40737c <SystemCoreClockUpdate+0xf4>)
  40728a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40728c:	f003 0303 	and.w	r3, r3, #3
  407290:	2b03      	cmp	r3, #3
  407292:	d80e      	bhi.n	4072b2 <SystemCoreClockUpdate+0x2a>
  407294:	e8df f003 	tbb	[pc, r3]
  407298:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  40729c:	4b38      	ldr	r3, [pc, #224]	; (407380 <SystemCoreClockUpdate+0xf8>)
  40729e:	695b      	ldr	r3, [r3, #20]
  4072a0:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4072a4:	bf14      	ite	ne
  4072a6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4072aa:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4072ae:	4b35      	ldr	r3, [pc, #212]	; (407384 <SystemCoreClockUpdate+0xfc>)
  4072b0:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4072b2:	4b32      	ldr	r3, [pc, #200]	; (40737c <SystemCoreClockUpdate+0xf4>)
  4072b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4072b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4072ba:	2b70      	cmp	r3, #112	; 0x70
  4072bc:	d055      	beq.n	40736a <SystemCoreClockUpdate+0xe2>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4072be:	4b2f      	ldr	r3, [pc, #188]	; (40737c <SystemCoreClockUpdate+0xf4>)
  4072c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		SystemCoreClock >>=
  4072c2:	4930      	ldr	r1, [pc, #192]	; (407384 <SystemCoreClockUpdate+0xfc>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4072c4:	f3c2 1202 	ubfx	r2, r2, #4, #3
		SystemCoreClock >>=
  4072c8:	680b      	ldr	r3, [r1, #0]
  4072ca:	40d3      	lsrs	r3, r2
  4072cc:	600b      	str	r3, [r1, #0]
  4072ce:	4770      	bx	lr
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4072d0:	4b2a      	ldr	r3, [pc, #168]	; (40737c <SystemCoreClockUpdate+0xf4>)
  4072d2:	6a1b      	ldr	r3, [r3, #32]
  4072d4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4072d8:	d003      	beq.n	4072e2 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4072da:	4a2b      	ldr	r2, [pc, #172]	; (407388 <SystemCoreClockUpdate+0x100>)
  4072dc:	4b29      	ldr	r3, [pc, #164]	; (407384 <SystemCoreClockUpdate+0xfc>)
  4072de:	601a      	str	r2, [r3, #0]
  4072e0:	e7e7      	b.n	4072b2 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4072e2:	4a2a      	ldr	r2, [pc, #168]	; (40738c <SystemCoreClockUpdate+0x104>)
  4072e4:	4b27      	ldr	r3, [pc, #156]	; (407384 <SystemCoreClockUpdate+0xfc>)
  4072e6:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4072e8:	4b24      	ldr	r3, [pc, #144]	; (40737c <SystemCoreClockUpdate+0xf4>)
  4072ea:	6a1b      	ldr	r3, [r3, #32]
  4072ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4072f0:	2b10      	cmp	r3, #16
  4072f2:	d005      	beq.n	407300 <SystemCoreClockUpdate+0x78>
  4072f4:	2b20      	cmp	r3, #32
  4072f6:	d1dc      	bne.n	4072b2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4072f8:	4a23      	ldr	r2, [pc, #140]	; (407388 <SystemCoreClockUpdate+0x100>)
  4072fa:	4b22      	ldr	r3, [pc, #136]	; (407384 <SystemCoreClockUpdate+0xfc>)
  4072fc:	601a      	str	r2, [r3, #0]
			break;
  4072fe:	e7d8      	b.n	4072b2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  407300:	4a23      	ldr	r2, [pc, #140]	; (407390 <SystemCoreClockUpdate+0x108>)
  407302:	4b20      	ldr	r3, [pc, #128]	; (407384 <SystemCoreClockUpdate+0xfc>)
  407304:	601a      	str	r2, [r3, #0]
			break;
  407306:	e7d4      	b.n	4072b2 <SystemCoreClockUpdate+0x2a>
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  407308:	4b1c      	ldr	r3, [pc, #112]	; (40737c <SystemCoreClockUpdate+0xf4>)
  40730a:	6a1b      	ldr	r3, [r3, #32]
  40730c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  407310:	d018      	beq.n	407344 <SystemCoreClockUpdate+0xbc>
				SystemCoreClock = CHIP_FREQ_XTAL;
  407312:	4a1d      	ldr	r2, [pc, #116]	; (407388 <SystemCoreClockUpdate+0x100>)
  407314:	4b1b      	ldr	r3, [pc, #108]	; (407384 <SystemCoreClockUpdate+0xfc>)
  407316:	601a      	str	r2, [r3, #0]
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  407318:	4b18      	ldr	r3, [pc, #96]	; (40737c <SystemCoreClockUpdate+0xf4>)
  40731a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40731c:	f003 0303 	and.w	r3, r3, #3
  407320:	2b02      	cmp	r3, #2
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  407322:	4a16      	ldr	r2, [pc, #88]	; (40737c <SystemCoreClockUpdate+0xf4>)
  407324:	bf07      	ittee	eq
  407326:	6a91      	ldreq	r1, [r2, #40]	; 0x28
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  407328:	6a92      	ldreq	r2, [r2, #40]	; 0x28
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40732a:	6ad1      	ldrne	r1, [r2, #44]	; 0x2c
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40732c:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  40732e:	4815      	ldr	r0, [pc, #84]	; (407384 <SystemCoreClockUpdate+0xfc>)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  407330:	f3c1 410a 	ubfx	r1, r1, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  407334:	6803      	ldr	r3, [r0, #0]
  407336:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_DIVB_Pos));
  40733a:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40733c:	fbb3 f3f2 	udiv	r3, r3, r2
  407340:	6003      	str	r3, [r0, #0]
  407342:	e7b6      	b.n	4072b2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  407344:	4a11      	ldr	r2, [pc, #68]	; (40738c <SystemCoreClockUpdate+0x104>)
  407346:	4b0f      	ldr	r3, [pc, #60]	; (407384 <SystemCoreClockUpdate+0xfc>)
  407348:	601a      	str	r2, [r3, #0]
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40734a:	4b0c      	ldr	r3, [pc, #48]	; (40737c <SystemCoreClockUpdate+0xf4>)
  40734c:	6a1b      	ldr	r3, [r3, #32]
  40734e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  407352:	2b10      	cmp	r3, #16
  407354:	d005      	beq.n	407362 <SystemCoreClockUpdate+0xda>
  407356:	2b20      	cmp	r3, #32
  407358:	d1de      	bne.n	407318 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40735a:	4a0b      	ldr	r2, [pc, #44]	; (407388 <SystemCoreClockUpdate+0x100>)
  40735c:	4b09      	ldr	r3, [pc, #36]	; (407384 <SystemCoreClockUpdate+0xfc>)
  40735e:	601a      	str	r2, [r3, #0]
					break;
  407360:	e7da      	b.n	407318 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  407362:	4a0b      	ldr	r2, [pc, #44]	; (407390 <SystemCoreClockUpdate+0x108>)
  407364:	4b07      	ldr	r3, [pc, #28]	; (407384 <SystemCoreClockUpdate+0xfc>)
  407366:	601a      	str	r2, [r3, #0]
					break;
  407368:	e7d6      	b.n	407318 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  40736a:	4a06      	ldr	r2, [pc, #24]	; (407384 <SystemCoreClockUpdate+0xfc>)
  40736c:	6813      	ldr	r3, [r2, #0]
  40736e:	4909      	ldr	r1, [pc, #36]	; (407394 <SystemCoreClockUpdate+0x10c>)
  407370:	fba1 1303 	umull	r1, r3, r1, r3
  407374:	085b      	lsrs	r3, r3, #1
  407376:	6013      	str	r3, [r2, #0]
  407378:	4770      	bx	lr
  40737a:	bf00      	nop
  40737c:	400e0400 	.word	0x400e0400
  407380:	400e1410 	.word	0x400e1410
  407384:	200000bc 	.word	0x200000bc
  407388:	00b71b00 	.word	0x00b71b00
  40738c:	003d0900 	.word	0x003d0900
  407390:	007a1200 	.word	0x007a1200
  407394:	aaaaaaab 	.word	0xaaaaaaab

00407398 <system_init_flash>:
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  407398:	4b12      	ldr	r3, [pc, #72]	; (4073e4 <system_init_flash+0x4c>)
  40739a:	4298      	cmp	r0, r3
  40739c:	d911      	bls.n	4073c2 <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  40739e:	4b12      	ldr	r3, [pc, #72]	; (4073e8 <system_init_flash+0x50>)
  4073a0:	4298      	cmp	r0, r3
  4073a2:	d913      	bls.n	4073cc <system_init_flash+0x34>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  4073a4:	4b11      	ldr	r3, [pc, #68]	; (4073ec <system_init_flash+0x54>)
  4073a6:	4298      	cmp	r0, r3
  4073a8:	d914      	bls.n	4073d4 <system_init_flash+0x3c>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4073aa:	4b11      	ldr	r3, [pc, #68]	; (4073f0 <system_init_flash+0x58>)
  4073ac:	4298      	cmp	r0, r3
  4073ae:	d915      	bls.n	4073dc <system_init_flash+0x44>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4073b0:	4b10      	ldr	r3, [pc, #64]	; (4073f4 <system_init_flash+0x5c>)
  4073b2:	4298      	cmp	r0, r3
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4073b4:	bf94      	ite	ls
  4073b6:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4073ba:	4a0f      	ldrhi	r2, [pc, #60]	; (4073f8 <system_init_flash+0x60>)
  4073bc:	4b0f      	ldr	r3, [pc, #60]	; (4073fc <system_init_flash+0x64>)
  4073be:	601a      	str	r2, [r3, #0]
  4073c0:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4073c2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4073c6:	4b0d      	ldr	r3, [pc, #52]	; (4073fc <system_init_flash+0x64>)
  4073c8:	601a      	str	r2, [r3, #0]
  4073ca:	4770      	bx	lr
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4073cc:	4a0c      	ldr	r2, [pc, #48]	; (407400 <system_init_flash+0x68>)
  4073ce:	4b0b      	ldr	r3, [pc, #44]	; (4073fc <system_init_flash+0x64>)
  4073d0:	601a      	str	r2, [r3, #0]
  4073d2:	4770      	bx	lr
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4073d4:	4a0b      	ldr	r2, [pc, #44]	; (407404 <system_init_flash+0x6c>)
  4073d6:	4b09      	ldr	r3, [pc, #36]	; (4073fc <system_init_flash+0x64>)
  4073d8:	601a      	str	r2, [r3, #0]
  4073da:	4770      	bx	lr
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4073dc:	4a0a      	ldr	r2, [pc, #40]	; (407408 <system_init_flash+0x70>)
  4073de:	4b07      	ldr	r3, [pc, #28]	; (4073fc <system_init_flash+0x64>)
  4073e0:	601a      	str	r2, [r3, #0]
  4073e2:	4770      	bx	lr
  4073e4:	01312cff 	.word	0x01312cff
  4073e8:	026259ff 	.word	0x026259ff
  4073ec:	039386ff 	.word	0x039386ff
  4073f0:	04c4b3ff 	.word	0x04c4b3ff
  4073f4:	05f5e0ff 	.word	0x05f5e0ff
  4073f8:	04000500 	.word	0x04000500
  4073fc:	400e0a00 	.word	0x400e0a00
  407400:	04000100 	.word	0x04000100
  407404:	04000200 	.word	0x04000200
  407408:	04000300 	.word	0x04000300

0040740c <_sbrk>:
  40740c:	4b0a      	ldr	r3, [pc, #40]	; (407438 <_sbrk+0x2c>)
  40740e:	681b      	ldr	r3, [r3, #0]
  407410:	b153      	cbz	r3, 407428 <_sbrk+0x1c>
  407412:	4b09      	ldr	r3, [pc, #36]	; (407438 <_sbrk+0x2c>)
  407414:	681b      	ldr	r3, [r3, #0]
  407416:	181a      	adds	r2, r3, r0
  407418:	4908      	ldr	r1, [pc, #32]	; (40743c <_sbrk+0x30>)
  40741a:	4291      	cmp	r1, r2
  40741c:	db08      	blt.n	407430 <_sbrk+0x24>
  40741e:	4610      	mov	r0, r2
  407420:	4a05      	ldr	r2, [pc, #20]	; (407438 <_sbrk+0x2c>)
  407422:	6010      	str	r0, [r2, #0]
  407424:	4618      	mov	r0, r3
  407426:	4770      	bx	lr
  407428:	4a05      	ldr	r2, [pc, #20]	; (407440 <_sbrk+0x34>)
  40742a:	4b03      	ldr	r3, [pc, #12]	; (407438 <_sbrk+0x2c>)
  40742c:	601a      	str	r2, [r3, #0]
  40742e:	e7f0      	b.n	407412 <_sbrk+0x6>
  407430:	f04f 30ff 	mov.w	r0, #4294967295
  407434:	4770      	bx	lr
  407436:	bf00      	nop
  407438:	20000e88 	.word	0x20000e88
  40743c:	2001fffc 	.word	0x2001fffc
  407440:	20005040 	.word	0x20005040

00407444 <disk_initialize>:
  407444:	b510      	push	{r4, lr}
  407446:	4604      	mov	r4, r0
  407448:	2100      	movs	r1, #0
  40744a:	480f      	ldr	r0, [pc, #60]	; (407488 <disk_initialize+0x44>)
  40744c:	4b0f      	ldr	r3, [pc, #60]	; (40748c <disk_initialize+0x48>)
  40744e:	4798      	blx	r3
  407450:	2c01      	cmp	r4, #1
  407452:	d901      	bls.n	407458 <disk_initialize+0x14>
  407454:	2001      	movs	r0, #1
  407456:	bd10      	pop	{r4, pc}
  407458:	4620      	mov	r0, r4
  40745a:	4b0d      	ldr	r3, [pc, #52]	; (407490 <disk_initialize+0x4c>)
  40745c:	4798      	blx	r3
  40745e:	2803      	cmp	r0, #3
  407460:	d106      	bne.n	407470 <disk_initialize+0x2c>
  407462:	4620      	mov	r0, r4
  407464:	4b0a      	ldr	r3, [pc, #40]	; (407490 <disk_initialize+0x4c>)
  407466:	4798      	blx	r3
  407468:	2803      	cmp	r0, #3
  40746a:	d101      	bne.n	407470 <disk_initialize+0x2c>
  40746c:	2001      	movs	r0, #1
  40746e:	bd10      	pop	{r4, pc}
  407470:	b938      	cbnz	r0, 407482 <disk_initialize+0x3e>
  407472:	4620      	mov	r0, r4
  407474:	4b07      	ldr	r3, [pc, #28]	; (407494 <disk_initialize+0x50>)
  407476:	4798      	blx	r3
  407478:	2800      	cmp	r0, #0
  40747a:	bf14      	ite	ne
  40747c:	2004      	movne	r0, #4
  40747e:	2000      	moveq	r0, #0
  407480:	bd10      	pop	{r4, pc}
  407482:	2001      	movs	r0, #1
  407484:	bd10      	pop	{r4, pc}
  407486:	bf00      	nop
  407488:	400e1460 	.word	0x400e1460
  40748c:	00406f01 	.word	0x00406f01
  407490:	004062d1 	.word	0x004062d1
  407494:	00406301 	.word	0x00406301

00407498 <disk_status>:
  407498:	b508      	push	{r3, lr}
  40749a:	4b05      	ldr	r3, [pc, #20]	; (4074b0 <disk_status+0x18>)
  40749c:	4798      	blx	r3
  40749e:	b120      	cbz	r0, 4074aa <disk_status+0x12>
  4074a0:	2802      	cmp	r0, #2
  4074a2:	bf0c      	ite	eq
  4074a4:	2003      	moveq	r0, #3
  4074a6:	2001      	movne	r0, #1
  4074a8:	bd08      	pop	{r3, pc}
  4074aa:	2000      	movs	r0, #0
  4074ac:	bd08      	pop	{r3, pc}
  4074ae:	bf00      	nop
  4074b0:	004062d1 	.word	0x004062d1

004074b4 <disk_read>:
  4074b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4074b8:	b083      	sub	sp, #12
  4074ba:	4680      	mov	r8, r0
  4074bc:	460d      	mov	r5, r1
  4074be:	4614      	mov	r4, r2
  4074c0:	461f      	mov	r7, r3
  4074c2:	4b15      	ldr	r3, [pc, #84]	; (407518 <disk_read+0x64>)
  4074c4:	4798      	blx	r3
  4074c6:	b918      	cbnz	r0, 4074d0 <disk_read+0x1c>
  4074c8:	2001      	movs	r0, #1
  4074ca:	b003      	add	sp, #12
  4074cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4074d0:	4606      	mov	r6, r0
  4074d2:	a901      	add	r1, sp, #4
  4074d4:	4640      	mov	r0, r8
  4074d6:	4b11      	ldr	r3, [pc, #68]	; (40751c <disk_read+0x68>)
  4074d8:	4798      	blx	r3
  4074da:	46b1      	mov	r9, r6
  4074dc:	fb06 4207 	mla	r2, r6, r7, r4
  4074e0:	9b01      	ldr	r3, [sp, #4]
  4074e2:	fb03 6306 	mla	r3, r3, r6, r6
  4074e6:	429a      	cmp	r2, r3
  4074e8:	d901      	bls.n	4074ee <disk_read+0x3a>
  4074ea:	2004      	movs	r0, #4
  4074ec:	e7ed      	b.n	4074ca <disk_read+0x16>
  4074ee:	46ba      	mov	sl, r7
  4074f0:	b177      	cbz	r7, 407510 <disk_read+0x5c>
  4074f2:	0276      	lsls	r6, r6, #9
  4074f4:	2700      	movs	r7, #0
  4074f6:	f8df b028 	ldr.w	fp, [pc, #40]	; 407520 <disk_read+0x6c>
  4074fa:	462a      	mov	r2, r5
  4074fc:	4621      	mov	r1, r4
  4074fe:	4640      	mov	r0, r8
  407500:	47d8      	blx	fp
  407502:	b938      	cbnz	r0, 407514 <disk_read+0x60>
  407504:	3701      	adds	r7, #1
  407506:	444c      	add	r4, r9
  407508:	4435      	add	r5, r6
  40750a:	4557      	cmp	r7, sl
  40750c:	d1f5      	bne.n	4074fa <disk_read+0x46>
  40750e:	e7dc      	b.n	4074ca <disk_read+0x16>
  407510:	2000      	movs	r0, #0
  407512:	e7da      	b.n	4074ca <disk_read+0x16>
  407514:	2001      	movs	r0, #1
  407516:	e7d8      	b.n	4074ca <disk_read+0x16>
  407518:	004062f9 	.word	0x004062f9
  40751c:	004062e5 	.word	0x004062e5
  407520:	00406315 	.word	0x00406315

00407524 <disk_write>:
  407524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407528:	b083      	sub	sp, #12
  40752a:	4680      	mov	r8, r0
  40752c:	460d      	mov	r5, r1
  40752e:	4614      	mov	r4, r2
  407530:	461f      	mov	r7, r3
  407532:	4b15      	ldr	r3, [pc, #84]	; (407588 <disk_write+0x64>)
  407534:	4798      	blx	r3
  407536:	b918      	cbnz	r0, 407540 <disk_write+0x1c>
  407538:	2001      	movs	r0, #1
  40753a:	b003      	add	sp, #12
  40753c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407540:	4606      	mov	r6, r0
  407542:	a901      	add	r1, sp, #4
  407544:	4640      	mov	r0, r8
  407546:	4b11      	ldr	r3, [pc, #68]	; (40758c <disk_write+0x68>)
  407548:	4798      	blx	r3
  40754a:	46b1      	mov	r9, r6
  40754c:	fb06 4207 	mla	r2, r6, r7, r4
  407550:	9b01      	ldr	r3, [sp, #4]
  407552:	fb03 6306 	mla	r3, r3, r6, r6
  407556:	429a      	cmp	r2, r3
  407558:	d901      	bls.n	40755e <disk_write+0x3a>
  40755a:	2004      	movs	r0, #4
  40755c:	e7ed      	b.n	40753a <disk_write+0x16>
  40755e:	46ba      	mov	sl, r7
  407560:	b177      	cbz	r7, 407580 <disk_write+0x5c>
  407562:	0276      	lsls	r6, r6, #9
  407564:	2700      	movs	r7, #0
  407566:	f8df b028 	ldr.w	fp, [pc, #40]	; 407590 <disk_write+0x6c>
  40756a:	462a      	mov	r2, r5
  40756c:	4621      	mov	r1, r4
  40756e:	4640      	mov	r0, r8
  407570:	47d8      	blx	fp
  407572:	b938      	cbnz	r0, 407584 <disk_write+0x60>
  407574:	3701      	adds	r7, #1
  407576:	444c      	add	r4, r9
  407578:	4435      	add	r5, r6
  40757a:	4557      	cmp	r7, sl
  40757c:	d1f5      	bne.n	40756a <disk_write+0x46>
  40757e:	e7dc      	b.n	40753a <disk_write+0x16>
  407580:	2000      	movs	r0, #0
  407582:	e7da      	b.n	40753a <disk_write+0x16>
  407584:	2001      	movs	r0, #1
  407586:	e7d8      	b.n	40753a <disk_write+0x16>
  407588:	004062f9 	.word	0x004062f9
  40758c:	004062e5 	.word	0x004062e5
  407590:	0040632d 	.word	0x0040632d

00407594 <disk_ioctl>:
  407594:	b510      	push	{r4, lr}
  407596:	b082      	sub	sp, #8
  407598:	4614      	mov	r4, r2
  40759a:	2903      	cmp	r1, #3
  40759c:	d827      	bhi.n	4075ee <disk_ioctl+0x5a>
  40759e:	e8df f001 	tbb	[pc, r1]
  4075a2:	071f      	.short	0x071f
  4075a4:	020f      	.short	0x020f
  4075a6:	2301      	movs	r3, #1
  4075a8:	6013      	str	r3, [r2, #0]
  4075aa:	2000      	movs	r0, #0
  4075ac:	b002      	add	sp, #8
  4075ae:	bd10      	pop	{r4, pc}
  4075b0:	a901      	add	r1, sp, #4
  4075b2:	4b11      	ldr	r3, [pc, #68]	; (4075f8 <disk_ioctl+0x64>)
  4075b4:	4798      	blx	r3
  4075b6:	9b01      	ldr	r3, [sp, #4]
  4075b8:	3301      	adds	r3, #1
  4075ba:	6023      	str	r3, [r4, #0]
  4075bc:	2000      	movs	r0, #0
  4075be:	e7f5      	b.n	4075ac <disk_ioctl+0x18>
  4075c0:	4b0e      	ldr	r3, [pc, #56]	; (4075fc <disk_ioctl+0x68>)
  4075c2:	4798      	blx	r3
  4075c4:	2808      	cmp	r0, #8
  4075c6:	d814      	bhi.n	4075f2 <disk_ioctl+0x5e>
  4075c8:	f44f 738b 	mov.w	r3, #278	; 0x116
  4075cc:	fa23 f000 	lsr.w	r0, r3, r0
  4075d0:	f010 0f01 	tst.w	r0, #1
  4075d4:	d101      	bne.n	4075da <disk_ioctl+0x46>
  4075d6:	2001      	movs	r0, #1
  4075d8:	e7e8      	b.n	4075ac <disk_ioctl+0x18>
  4075da:	2000      	movs	r0, #0
  4075dc:	7020      	strb	r0, [r4, #0]
  4075de:	e7e5      	b.n	4075ac <disk_ioctl+0x18>
  4075e0:	4b07      	ldr	r3, [pc, #28]	; (407600 <disk_ioctl+0x6c>)
  4075e2:	4798      	blx	r3
  4075e4:	2800      	cmp	r0, #0
  4075e6:	bf0c      	ite	eq
  4075e8:	2000      	moveq	r0, #0
  4075ea:	2003      	movne	r0, #3
  4075ec:	e7de      	b.n	4075ac <disk_ioctl+0x18>
  4075ee:	2004      	movs	r0, #4
  4075f0:	e7dc      	b.n	4075ac <disk_ioctl+0x18>
  4075f2:	2001      	movs	r0, #1
  4075f4:	e7da      	b.n	4075ac <disk_ioctl+0x18>
  4075f6:	bf00      	nop
  4075f8:	004062e5 	.word	0x004062e5
  4075fc:	004062f9 	.word	0x004062f9
  407600:	004062d1 	.word	0x004062d1

00407604 <get_fattime>:
  407604:	b530      	push	{r4, r5, lr}
  407606:	b08b      	sub	sp, #44	; 0x2c
  407608:	4c11      	ldr	r4, [pc, #68]	; (407650 <get_fattime+0x4c>)
  40760a:	ab07      	add	r3, sp, #28
  40760c:	aa08      	add	r2, sp, #32
  40760e:	a909      	add	r1, sp, #36	; 0x24
  407610:	4620      	mov	r0, r4
  407612:	4d10      	ldr	r5, [pc, #64]	; (407654 <get_fattime+0x50>)
  407614:	47a8      	blx	r5
  407616:	ab03      	add	r3, sp, #12
  407618:	9300      	str	r3, [sp, #0]
  40761a:	ab04      	add	r3, sp, #16
  40761c:	aa05      	add	r2, sp, #20
  40761e:	a906      	add	r1, sp, #24
  407620:	4620      	mov	r0, r4
  407622:	4c0d      	ldr	r4, [pc, #52]	; (407658 <get_fattime+0x54>)
  407624:	47a0      	blx	r4
  407626:	9b04      	ldr	r3, [sp, #16]
  407628:	041b      	lsls	r3, r3, #16
  40762a:	9805      	ldr	r0, [sp, #20]
  40762c:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
  407630:	9807      	ldr	r0, [sp, #28]
  407632:	4303      	orrs	r3, r0
  407634:	9809      	ldr	r0, [sp, #36]	; 0x24
  407636:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
  40763a:	9808      	ldr	r0, [sp, #32]
  40763c:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
  407640:	9806      	ldr	r0, [sp, #24]
  407642:	f2a0 70bc 	subw	r0, r0, #1980	; 0x7bc
  407646:	ea43 6040 	orr.w	r0, r3, r0, lsl #25
  40764a:	b00b      	add	sp, #44	; 0x2c
  40764c:	bd30      	pop	{r4, r5, pc}
  40764e:	bf00      	nop
  407650:	400e1460 	.word	0x400e1460
  407654:	00406f17 	.word	0x00406f17
  407658:	00407005 	.word	0x00407005

0040765c <mem_cpy>:
  40765c:	b13a      	cbz	r2, 40766e <mem_cpy+0x12>
  40765e:	3801      	subs	r0, #1
  407660:	188a      	adds	r2, r1, r2
  407662:	f811 3b01 	ldrb.w	r3, [r1], #1
  407666:	f800 3f01 	strb.w	r3, [r0, #1]!
  40766a:	4291      	cmp	r1, r2
  40766c:	d1f9      	bne.n	407662 <mem_cpy+0x6>
  40766e:	4770      	bx	lr

00407670 <mem_set>:
  407670:	b122      	cbz	r2, 40767c <mem_set+0xc>
  407672:	1882      	adds	r2, r0, r2
  407674:	f800 1b01 	strb.w	r1, [r0], #1
  407678:	4282      	cmp	r2, r0
  40767a:	d1fb      	bne.n	407674 <mem_set+0x4>
  40767c:	4770      	bx	lr

0040767e <clust2sect>:
  40767e:	3902      	subs	r1, #2
  407680:	69c3      	ldr	r3, [r0, #28]
  407682:	3b02      	subs	r3, #2
  407684:	4299      	cmp	r1, r3
  407686:	bf3d      	ittte	cc
  407688:	7883      	ldrbcc	r3, [r0, #2]
  40768a:	6ac0      	ldrcc	r0, [r0, #44]	; 0x2c
  40768c:	fb01 0003 	mlacc	r0, r1, r3, r0
  407690:	2000      	movcs	r0, #0
  407692:	4770      	bx	lr

00407694 <sum_sfn>:
  407694:	4602      	mov	r2, r0
  407696:	f100 010b 	add.w	r1, r0, #11
  40769a:	2000      	movs	r0, #0
  40769c:	01c3      	lsls	r3, r0, #7
  40769e:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
  4076a2:	f812 0b01 	ldrb.w	r0, [r2], #1
  4076a6:	fa50 f383 	uxtab	r3, r0, r3
  4076aa:	b2d8      	uxtb	r0, r3
  4076ac:	428a      	cmp	r2, r1
  4076ae:	d1f5      	bne.n	40769c <sum_sfn+0x8>
  4076b0:	4770      	bx	lr
	...

004076b4 <validate>:
  4076b4:	b198      	cbz	r0, 4076de <validate+0x2a>
  4076b6:	b508      	push	{r3, lr}
  4076b8:	7802      	ldrb	r2, [r0, #0]
  4076ba:	b90a      	cbnz	r2, 4076c0 <validate+0xc>
  4076bc:	2009      	movs	r0, #9
  4076be:	bd08      	pop	{r3, pc}
  4076c0:	88c2      	ldrh	r2, [r0, #6]
  4076c2:	428a      	cmp	r2, r1
  4076c4:	d001      	beq.n	4076ca <validate+0x16>
  4076c6:	2009      	movs	r0, #9
  4076c8:	bd08      	pop	{r3, pc}
  4076ca:	7840      	ldrb	r0, [r0, #1]
  4076cc:	4b05      	ldr	r3, [pc, #20]	; (4076e4 <validate+0x30>)
  4076ce:	4798      	blx	r3
  4076d0:	f000 0001 	and.w	r0, r0, #1
  4076d4:	2800      	cmp	r0, #0
  4076d6:	bf14      	ite	ne
  4076d8:	2003      	movne	r0, #3
  4076da:	2000      	moveq	r0, #0
  4076dc:	bd08      	pop	{r3, pc}
  4076de:	2009      	movs	r0, #9
  4076e0:	4770      	bx	lr
  4076e2:	bf00      	nop
  4076e4:	00407499 	.word	0x00407499

004076e8 <check_fs>:
  4076e8:	b538      	push	{r3, r4, r5, lr}
  4076ea:	4604      	mov	r4, r0
  4076ec:	2301      	movs	r3, #1
  4076ee:	460a      	mov	r2, r1
  4076f0:	f100 0134 	add.w	r1, r0, #52	; 0x34
  4076f4:	7840      	ldrb	r0, [r0, #1]
  4076f6:	4d1d      	ldr	r5, [pc, #116]	; (40776c <check_fs+0x84>)
  4076f8:	47a8      	blx	r5
  4076fa:	b108      	cbz	r0, 407700 <check_fs+0x18>
  4076fc:	2003      	movs	r0, #3
  4076fe:	bd38      	pop	{r3, r4, r5, pc}
  407700:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
  407704:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
  407708:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40770c:	b21b      	sxth	r3, r3
  40770e:	4a18      	ldr	r2, [pc, #96]	; (407770 <check_fs+0x88>)
  407710:	4293      	cmp	r3, r2
  407712:	d001      	beq.n	407718 <check_fs+0x30>
  407714:	2002      	movs	r0, #2
  407716:	bd38      	pop	{r3, r4, r5, pc}
  407718:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
  40771c:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
  407720:	041b      	lsls	r3, r3, #16
  407722:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  407726:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
  40772a:	4313      	orrs	r3, r2
  40772c:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
  407730:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  407734:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  407738:	4a0e      	ldr	r2, [pc, #56]	; (407774 <check_fs+0x8c>)
  40773a:	4293      	cmp	r3, r2
  40773c:	d013      	beq.n	407766 <check_fs+0x7e>
  40773e:	f894 3089 	ldrb.w	r3, [r4, #137]	; 0x89
  407742:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
  407746:	0400      	lsls	r0, r0, #16
  407748:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
  40774c:	f894 3086 	ldrb.w	r3, [r4, #134]	; 0x86
  407750:	4318      	orrs	r0, r3
  407752:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
  407756:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  40775a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  40775e:	1a80      	subs	r0, r0, r2
  407760:	bf18      	it	ne
  407762:	2001      	movne	r0, #1
  407764:	bd38      	pop	{r3, r4, r5, pc}
  407766:	2000      	movs	r0, #0
  407768:	bd38      	pop	{r3, r4, r5, pc}
  40776a:	bf00      	nop
  40776c:	004074b5 	.word	0x004074b5
  407770:	ffffaa55 	.word	0xffffaa55
  407774:	00544146 	.word	0x00544146

00407778 <chk_mounted>:
  407778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40777a:	6803      	ldr	r3, [r0, #0]
  40777c:	781c      	ldrb	r4, [r3, #0]
  40777e:	3c30      	subs	r4, #48	; 0x30
  407780:	2c09      	cmp	r4, #9
  407782:	d802      	bhi.n	40778a <chk_mounted+0x12>
  407784:	785d      	ldrb	r5, [r3, #1]
  407786:	2d3a      	cmp	r5, #58	; 0x3a
  407788:	d005      	beq.n	407796 <chk_mounted+0x1e>
  40778a:	4bb3      	ldr	r3, [pc, #716]	; (407a58 <chk_mounted+0x2e0>)
  40778c:	781c      	ldrb	r4, [r3, #0]
  40778e:	2c07      	cmp	r4, #7
  407790:	d904      	bls.n	40779c <chk_mounted+0x24>
  407792:	200b      	movs	r0, #11
  407794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407796:	3302      	adds	r3, #2
  407798:	6003      	str	r3, [r0, #0]
  40779a:	e7f8      	b.n	40778e <chk_mounted+0x16>
  40779c:	4baf      	ldr	r3, [pc, #700]	; (407a5c <chk_mounted+0x2e4>)
  40779e:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
  4077a2:	600d      	str	r5, [r1, #0]
  4077a4:	2d00      	cmp	r5, #0
  4077a6:	f000 813e 	beq.w	407a26 <chk_mounted+0x2ae>
  4077aa:	4616      	mov	r6, r2
  4077ac:	782b      	ldrb	r3, [r5, #0]
  4077ae:	b17b      	cbz	r3, 4077d0 <chk_mounted+0x58>
  4077b0:	7868      	ldrb	r0, [r5, #1]
  4077b2:	4bab      	ldr	r3, [pc, #684]	; (407a60 <chk_mounted+0x2e8>)
  4077b4:	4798      	blx	r3
  4077b6:	f010 0f01 	tst.w	r0, #1
  4077ba:	d109      	bne.n	4077d0 <chk_mounted+0x58>
  4077bc:	2e00      	cmp	r6, #0
  4077be:	f000 8134 	beq.w	407a2a <chk_mounted+0x2b2>
  4077c2:	f000 0004 	and.w	r0, r0, #4
  4077c6:	2800      	cmp	r0, #0
  4077c8:	bf0c      	ite	eq
  4077ca:	2000      	moveq	r0, #0
  4077cc:	200a      	movne	r0, #10
  4077ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4077d0:	2300      	movs	r3, #0
  4077d2:	702b      	strb	r3, [r5, #0]
  4077d4:	b2e0      	uxtb	r0, r4
  4077d6:	7068      	strb	r0, [r5, #1]
  4077d8:	4ba2      	ldr	r3, [pc, #648]	; (407a64 <chk_mounted+0x2ec>)
  4077da:	4798      	blx	r3
  4077dc:	f010 0f01 	tst.w	r0, #1
  4077e0:	d001      	beq.n	4077e6 <chk_mounted+0x6e>
  4077e2:	2003      	movs	r0, #3
  4077e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4077e6:	b126      	cbz	r6, 4077f2 <chk_mounted+0x7a>
  4077e8:	f010 0f04 	tst.w	r0, #4
  4077ec:	d001      	beq.n	4077f2 <chk_mounted+0x7a>
  4077ee:	200a      	movs	r0, #10
  4077f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4077f2:	2100      	movs	r1, #0
  4077f4:	4628      	mov	r0, r5
  4077f6:	4b9c      	ldr	r3, [pc, #624]	; (407a68 <chk_mounted+0x2f0>)
  4077f8:	4798      	blx	r3
  4077fa:	2801      	cmp	r0, #1
  4077fc:	d006      	beq.n	40780c <chk_mounted+0x94>
  4077fe:	2400      	movs	r4, #0
  407800:	2803      	cmp	r0, #3
  407802:	f000 8114 	beq.w	407a2e <chk_mounted+0x2b6>
  407806:	b1c8      	cbz	r0, 40783c <chk_mounted+0xc4>
  407808:	200d      	movs	r0, #13
  40780a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40780c:	f895 31f6 	ldrb.w	r3, [r5, #502]	; 0x1f6
  407810:	b90b      	cbnz	r3, 407816 <chk_mounted+0x9e>
  407812:	200d      	movs	r0, #13
  407814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407816:	f895 31fd 	ldrb.w	r3, [r5, #509]	; 0x1fd
  40781a:	f895 41fc 	ldrb.w	r4, [r5, #508]	; 0x1fc
  40781e:	0424      	lsls	r4, r4, #16
  407820:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
  407824:	f895 31fa 	ldrb.w	r3, [r5, #506]	; 0x1fa
  407828:	431c      	orrs	r4, r3
  40782a:	f895 31fb 	ldrb.w	r3, [r5, #507]	; 0x1fb
  40782e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  407832:	4621      	mov	r1, r4
  407834:	4628      	mov	r0, r5
  407836:	4b8c      	ldr	r3, [pc, #560]	; (407a68 <chk_mounted+0x2f0>)
  407838:	4798      	blx	r3
  40783a:	e7e1      	b.n	407800 <chk_mounted+0x88>
  40783c:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
  407840:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
  407844:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  407848:	b21b      	sxth	r3, r3
  40784a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40784e:	d001      	beq.n	407854 <chk_mounted+0xdc>
  407850:	200d      	movs	r0, #13
  407852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407854:	f895 304b 	ldrb.w	r3, [r5, #75]	; 0x4b
  407858:	f895 204a 	ldrb.w	r2, [r5, #74]	; 0x4a
  40785c:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
  407860:	d10d      	bne.n	40787e <chk_mounted+0x106>
  407862:	f895 305b 	ldrb.w	r3, [r5, #91]	; 0x5b
  407866:	f895 205a 	ldrb.w	r2, [r5, #90]	; 0x5a
  40786a:	0412      	lsls	r2, r2, #16
  40786c:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
  407870:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
  407874:	431a      	orrs	r2, r3
  407876:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
  40787a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  40787e:	622a      	str	r2, [r5, #32]
  407880:	f895 e044 	ldrb.w	lr, [r5, #68]	; 0x44
  407884:	f885 e003 	strb.w	lr, [r5, #3]
  407888:	f10e 33ff 	add.w	r3, lr, #4294967295
  40788c:	b2db      	uxtb	r3, r3
  40788e:	2b01      	cmp	r3, #1
  407890:	d901      	bls.n	407896 <chk_mounted+0x11e>
  407892:	200d      	movs	r0, #13
  407894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407896:	f895 6041 	ldrb.w	r6, [r5, #65]	; 0x41
  40789a:	70ae      	strb	r6, [r5, #2]
  40789c:	2e00      	cmp	r6, #0
  40789e:	f000 80c8 	beq.w	407a32 <chk_mounted+0x2ba>
  4078a2:	1e73      	subs	r3, r6, #1
  4078a4:	4233      	tst	r3, r6
  4078a6:	d001      	beq.n	4078ac <chk_mounted+0x134>
  4078a8:	200d      	movs	r0, #13
  4078aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4078ac:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
  4078b0:	f895 1045 	ldrb.w	r1, [r5, #69]	; 0x45
  4078b4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
  4078b8:	8129      	strh	r1, [r5, #8]
  4078ba:	f011 0f0f 	tst.w	r1, #15
  4078be:	f040 80ba 	bne.w	407a36 <chk_mounted+0x2be>
  4078c2:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
  4078c6:	f895 3047 	ldrb.w	r3, [r5, #71]	; 0x47
  4078ca:	ea53 2300 	orrs.w	r3, r3, r0, lsl #8
  4078ce:	d10d      	bne.n	4078ec <chk_mounted+0x174>
  4078d0:	f895 0057 	ldrb.w	r0, [r5, #87]	; 0x57
  4078d4:	f895 3056 	ldrb.w	r3, [r5, #86]	; 0x56
  4078d8:	041b      	lsls	r3, r3, #16
  4078da:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  4078de:	f895 0054 	ldrb.w	r0, [r5, #84]	; 0x54
  4078e2:	4303      	orrs	r3, r0
  4078e4:	f895 0055 	ldrb.w	r0, [r5, #85]	; 0x55
  4078e8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  4078ec:	f895 0043 	ldrb.w	r0, [r5, #67]	; 0x43
  4078f0:	f895 7042 	ldrb.w	r7, [r5, #66]	; 0x42
  4078f4:	ea57 2700 	orrs.w	r7, r7, r0, lsl #8
  4078f8:	f000 809f 	beq.w	407a3a <chk_mounted+0x2c2>
  4078fc:	fb02 fe0e 	mul.w	lr, r2, lr
  407900:	eb07 1011 	add.w	r0, r7, r1, lsr #4
  407904:	4470      	add	r0, lr
  407906:	4283      	cmp	r3, r0
  407908:	f0c0 8099 	bcc.w	407a3e <chk_mounted+0x2c6>
  40790c:	1a1b      	subs	r3, r3, r0
  40790e:	fbb3 f3f6 	udiv	r3, r3, r6
  407912:	2b00      	cmp	r3, #0
  407914:	f000 8095 	beq.w	407a42 <chk_mounted+0x2ca>
  407918:	f640 76f5 	movw	r6, #4085	; 0xff5
  40791c:	42b3      	cmp	r3, r6
  40791e:	bf8c      	ite	hi
  407920:	2602      	movhi	r6, #2
  407922:	2601      	movls	r6, #1
  407924:	f64f 7cf5 	movw	ip, #65525	; 0xfff5
  407928:	4563      	cmp	r3, ip
  40792a:	f200 80a7 	bhi.w	407a7c <chk_mounted+0x304>
  40792e:	3302      	adds	r3, #2
  407930:	61eb      	str	r3, [r5, #28]
  407932:	4420      	add	r0, r4
  407934:	62e8      	str	r0, [r5, #44]	; 0x2c
  407936:	443c      	add	r4, r7
  407938:	626c      	str	r4, [r5, #36]	; 0x24
  40793a:	2900      	cmp	r1, #0
  40793c:	f000 8089 	beq.w	407a52 <chk_mounted+0x2da>
  407940:	4474      	add	r4, lr
  407942:	62ac      	str	r4, [r5, #40]	; 0x28
  407944:	2e02      	cmp	r6, #2
  407946:	bf0f      	iteee	eq
  407948:	005b      	lsleq	r3, r3, #1
  40794a:	eb03 0143 	addne.w	r1, r3, r3, lsl #1
  40794e:	f003 0301 	andne.w	r3, r3, #1
  407952:	eb03 0351 	addne.w	r3, r3, r1, lsr #1
  407956:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  40795a:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  40795e:	d376      	bcc.n	407a4e <chk_mounted+0x2d6>
  407960:	f04f 33ff 	mov.w	r3, #4294967295
  407964:	612b      	str	r3, [r5, #16]
  407966:	2300      	movs	r3, #0
  407968:	60eb      	str	r3, [r5, #12]
  40796a:	e04a      	b.n	407a02 <chk_mounted+0x28a>
  40796c:	f895 2233 	ldrb.w	r2, [r5, #563]	; 0x233
  407970:	f895 3232 	ldrb.w	r3, [r5, #562]	; 0x232
  407974:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  407978:	b21b      	sxth	r3, r3
  40797a:	4a3c      	ldr	r2, [pc, #240]	; (407a6c <chk_mounted+0x2f4>)
  40797c:	4293      	cmp	r3, r2
  40797e:	d14c      	bne.n	407a1a <chk_mounted+0x2a2>
  407980:	f895 2037 	ldrb.w	r2, [r5, #55]	; 0x37
  407984:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
  407988:	041b      	lsls	r3, r3, #16
  40798a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  40798e:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
  407992:	4313      	orrs	r3, r2
  407994:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
  407998:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40799c:	4a34      	ldr	r2, [pc, #208]	; (407a70 <chk_mounted+0x2f8>)
  40799e:	4293      	cmp	r3, r2
  4079a0:	d13d      	bne.n	407a1e <chk_mounted+0x2a6>
  4079a2:	f895 221b 	ldrb.w	r2, [r5, #539]	; 0x21b
  4079a6:	f895 321a 	ldrb.w	r3, [r5, #538]	; 0x21a
  4079aa:	041b      	lsls	r3, r3, #16
  4079ac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  4079b0:	f895 2218 	ldrb.w	r2, [r5, #536]	; 0x218
  4079b4:	4313      	orrs	r3, r2
  4079b6:	f895 2219 	ldrb.w	r2, [r5, #537]	; 0x219
  4079ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4079be:	4a2d      	ldr	r2, [pc, #180]	; (407a74 <chk_mounted+0x2fc>)
  4079c0:	4293      	cmp	r3, r2
  4079c2:	d12e      	bne.n	407a22 <chk_mounted+0x2aa>
  4079c4:	f895 2223 	ldrb.w	r2, [r5, #547]	; 0x223
  4079c8:	f895 3222 	ldrb.w	r3, [r5, #546]	; 0x222
  4079cc:	041b      	lsls	r3, r3, #16
  4079ce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  4079d2:	f895 2220 	ldrb.w	r2, [r5, #544]	; 0x220
  4079d6:	4313      	orrs	r3, r2
  4079d8:	f895 2221 	ldrb.w	r2, [r5, #545]	; 0x221
  4079dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4079e0:	60eb      	str	r3, [r5, #12]
  4079e2:	f895 221f 	ldrb.w	r2, [r5, #543]	; 0x21f
  4079e6:	f895 321e 	ldrb.w	r3, [r5, #542]	; 0x21e
  4079ea:	041b      	lsls	r3, r3, #16
  4079ec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  4079f0:	f895 221c 	ldrb.w	r2, [r5, #540]	; 0x21c
  4079f4:	4313      	orrs	r3, r2
  4079f6:	f895 221d 	ldrb.w	r2, [r5, #541]	; 0x21d
  4079fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4079fe:	612b      	str	r3, [r5, #16]
  407a00:	2603      	movs	r6, #3
  407a02:	702e      	strb	r6, [r5, #0]
  407a04:	4a1c      	ldr	r2, [pc, #112]	; (407a78 <chk_mounted+0x300>)
  407a06:	8813      	ldrh	r3, [r2, #0]
  407a08:	3301      	adds	r3, #1
  407a0a:	b29b      	uxth	r3, r3
  407a0c:	8013      	strh	r3, [r2, #0]
  407a0e:	80eb      	strh	r3, [r5, #6]
  407a10:	2000      	movs	r0, #0
  407a12:	6328      	str	r0, [r5, #48]	; 0x30
  407a14:	7128      	strb	r0, [r5, #4]
  407a16:	61a8      	str	r0, [r5, #24]
  407a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407a1a:	2603      	movs	r6, #3
  407a1c:	e7f1      	b.n	407a02 <chk_mounted+0x28a>
  407a1e:	2603      	movs	r6, #3
  407a20:	e7ef      	b.n	407a02 <chk_mounted+0x28a>
  407a22:	2603      	movs	r6, #3
  407a24:	e7ed      	b.n	407a02 <chk_mounted+0x28a>
  407a26:	200c      	movs	r0, #12
  407a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407a2a:	2000      	movs	r0, #0
  407a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407a2e:	2001      	movs	r0, #1
  407a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407a32:	200d      	movs	r0, #13
  407a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407a36:	200d      	movs	r0, #13
  407a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407a3a:	200d      	movs	r0, #13
  407a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407a3e:	200d      	movs	r0, #13
  407a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407a42:	200d      	movs	r0, #13
  407a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407a46:	200d      	movs	r0, #13
  407a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407a4a:	200d      	movs	r0, #13
  407a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407a4e:	200d      	movs	r0, #13
  407a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407a52:	200d      	movs	r0, #13
  407a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407a56:	bf00      	nop
  407a58:	20000e8c 	.word	0x20000e8c
  407a5c:	20000e90 	.word	0x20000e90
  407a60:	00407499 	.word	0x00407499
  407a64:	00407445 	.word	0x00407445
  407a68:	004076e9 	.word	0x004076e9
  407a6c:	ffffaa55 	.word	0xffffaa55
  407a70:	41615252 	.word	0x41615252
  407a74:	61417272 	.word	0x61417272
  407a78:	20000eb0 	.word	0x20000eb0
  407a7c:	3302      	adds	r3, #2
  407a7e:	61eb      	str	r3, [r5, #28]
  407a80:	4420      	add	r0, r4
  407a82:	62e8      	str	r0, [r5, #44]	; 0x2c
  407a84:	4427      	add	r7, r4
  407a86:	626f      	str	r7, [r5, #36]	; 0x24
  407a88:	2900      	cmp	r1, #0
  407a8a:	d1de      	bne.n	407a4a <chk_mounted+0x2d2>
  407a8c:	f895 0063 	ldrb.w	r0, [r5, #99]	; 0x63
  407a90:	f895 1062 	ldrb.w	r1, [r5, #98]	; 0x62
  407a94:	0409      	lsls	r1, r1, #16
  407a96:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
  407a9a:	f895 0060 	ldrb.w	r0, [r5, #96]	; 0x60
  407a9e:	4301      	orrs	r1, r0
  407aa0:	f895 0061 	ldrb.w	r0, [r5, #97]	; 0x61
  407aa4:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  407aa8:	62a9      	str	r1, [r5, #40]	; 0x28
  407aaa:	009b      	lsls	r3, r3, #2
  407aac:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  407ab0:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  407ab4:	d3c7      	bcc.n	407a46 <chk_mounted+0x2ce>
  407ab6:	f04f 33ff 	mov.w	r3, #4294967295
  407aba:	612b      	str	r3, [r5, #16]
  407abc:	2300      	movs	r3, #0
  407abe:	60eb      	str	r3, [r5, #12]
  407ac0:	716b      	strb	r3, [r5, #5]
  407ac2:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
  407ac6:	f895 2064 	ldrb.w	r2, [r5, #100]	; 0x64
  407aca:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  407ace:	4422      	add	r2, r4
  407ad0:	616a      	str	r2, [r5, #20]
  407ad2:	2301      	movs	r3, #1
  407ad4:	f105 0134 	add.w	r1, r5, #52	; 0x34
  407ad8:	7868      	ldrb	r0, [r5, #1]
  407ada:	4c03      	ldr	r4, [pc, #12]	; (407ae8 <chk_mounted+0x370>)
  407adc:	47a0      	blx	r4
  407ade:	2800      	cmp	r0, #0
  407ae0:	f43f af44 	beq.w	40796c <chk_mounted+0x1f4>
  407ae4:	2603      	movs	r6, #3
  407ae6:	e78c      	b.n	407a02 <chk_mounted+0x28a>
  407ae8:	004074b5 	.word	0x004074b5

00407aec <get_fileinfo>:
  407aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407af0:	f101 0209 	add.w	r2, r1, #9
  407af4:	6903      	ldr	r3, [r0, #16]
  407af6:	2b00      	cmp	r3, #0
  407af8:	d05e      	beq.n	407bb8 <get_fileinfo+0xcc>
  407afa:	6944      	ldr	r4, [r0, #20]
  407afc:	f894 e00c 	ldrb.w	lr, [r4, #12]
  407b00:	7823      	ldrb	r3, [r4, #0]
  407b02:	2b20      	cmp	r3, #32
  407b04:	d01d      	beq.n	407b42 <get_fileinfo+0x56>
  407b06:	4625      	mov	r5, r4
  407b08:	f101 0711 	add.w	r7, r1, #17
  407b0c:	f04f 08e5 	mov.w	r8, #229	; 0xe5
  407b10:	f00e 0c08 	and.w	ip, lr, #8
  407b14:	e008      	b.n	407b28 <get_fileinfo+0x3c>
  407b16:	4643      	mov	r3, r8
  407b18:	f802 3b01 	strb.w	r3, [r2], #1
  407b1c:	42ba      	cmp	r2, r7
  407b1e:	d010      	beq.n	407b42 <get_fileinfo+0x56>
  407b20:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  407b24:	2b20      	cmp	r3, #32
  407b26:	d00c      	beq.n	407b42 <get_fileinfo+0x56>
  407b28:	2b05      	cmp	r3, #5
  407b2a:	d0f4      	beq.n	407b16 <get_fileinfo+0x2a>
  407b2c:	f1bc 0f00 	cmp.w	ip, #0
  407b30:	d0f2      	beq.n	407b18 <get_fileinfo+0x2c>
  407b32:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
  407b36:	b2f6      	uxtb	r6, r6
  407b38:	2e19      	cmp	r6, #25
  407b3a:	d8ed      	bhi.n	407b18 <get_fileinfo+0x2c>
  407b3c:	3320      	adds	r3, #32
  407b3e:	b2db      	uxtb	r3, r3
  407b40:	e7ea      	b.n	407b18 <get_fileinfo+0x2c>
  407b42:	7a23      	ldrb	r3, [r4, #8]
  407b44:	2b20      	cmp	r3, #32
  407b46:	d020      	beq.n	407b8a <get_fileinfo+0x9e>
  407b48:	1c55      	adds	r5, r2, #1
  407b4a:	232e      	movs	r3, #46	; 0x2e
  407b4c:	7013      	strb	r3, [r2, #0]
  407b4e:	7a23      	ldrb	r3, [r4, #8]
  407b50:	2b20      	cmp	r3, #32
  407b52:	d019      	beq.n	407b88 <get_fileinfo+0x9c>
  407b54:	f104 0708 	add.w	r7, r4, #8
  407b58:	f102 0c04 	add.w	ip, r2, #4
  407b5c:	462a      	mov	r2, r5
  407b5e:	f00e 0510 	and.w	r5, lr, #16
  407b62:	e007      	b.n	407b74 <get_fileinfo+0x88>
  407b64:	f802 3b01 	strb.w	r3, [r2], #1
  407b68:	4562      	cmp	r2, ip
  407b6a:	d00e      	beq.n	407b8a <get_fileinfo+0x9e>
  407b6c:	f817 3f01 	ldrb.w	r3, [r7, #1]!
  407b70:	2b20      	cmp	r3, #32
  407b72:	d00a      	beq.n	407b8a <get_fileinfo+0x9e>
  407b74:	2d00      	cmp	r5, #0
  407b76:	d0f5      	beq.n	407b64 <get_fileinfo+0x78>
  407b78:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
  407b7c:	b2f6      	uxtb	r6, r6
  407b7e:	2e19      	cmp	r6, #25
  407b80:	bf9c      	itt	ls
  407b82:	3320      	addls	r3, #32
  407b84:	b2db      	uxtbls	r3, r3
  407b86:	e7ed      	b.n	407b64 <get_fileinfo+0x78>
  407b88:	462a      	mov	r2, r5
  407b8a:	7ae3      	ldrb	r3, [r4, #11]
  407b8c:	720b      	strb	r3, [r1, #8]
  407b8e:	7fe5      	ldrb	r5, [r4, #31]
  407b90:	7fa3      	ldrb	r3, [r4, #30]
  407b92:	041b      	lsls	r3, r3, #16
  407b94:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
  407b98:	7f25      	ldrb	r5, [r4, #28]
  407b9a:	432b      	orrs	r3, r5
  407b9c:	7f65      	ldrb	r5, [r4, #29]
  407b9e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  407ba2:	600b      	str	r3, [r1, #0]
  407ba4:	7e65      	ldrb	r5, [r4, #25]
  407ba6:	7e23      	ldrb	r3, [r4, #24]
  407ba8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  407bac:	808b      	strh	r3, [r1, #4]
  407bae:	7de5      	ldrb	r5, [r4, #23]
  407bb0:	7da3      	ldrb	r3, [r4, #22]
  407bb2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  407bb6:	80cb      	strh	r3, [r1, #6]
  407bb8:	2300      	movs	r3, #0
  407bba:	7013      	strb	r3, [r2, #0]
  407bbc:	698f      	ldr	r7, [r1, #24]
  407bbe:	b32f      	cbz	r7, 407c0c <get_fileinfo+0x120>
  407bc0:	69cb      	ldr	r3, [r1, #28]
  407bc2:	b31b      	cbz	r3, 407c0c <get_fileinfo+0x120>
  407bc4:	6903      	ldr	r3, [r0, #16]
  407bc6:	b1f3      	cbz	r3, 407c06 <get_fileinfo+0x11a>
  407bc8:	8c02      	ldrh	r2, [r0, #32]
  407bca:	f64f 73ff 	movw	r3, #65535	; 0xffff
  407bce:	429a      	cmp	r2, r3
  407bd0:	d01e      	beq.n	407c10 <get_fileinfo+0x124>
  407bd2:	f8d0 801c 	ldr.w	r8, [r0, #28]
  407bd6:	f8b8 0000 	ldrh.w	r0, [r8]
  407bda:	b1d8      	cbz	r0, 407c14 <get_fileinfo+0x128>
  407bdc:	460d      	mov	r5, r1
  407bde:	1e7e      	subs	r6, r7, #1
  407be0:	2400      	movs	r4, #0
  407be2:	46a2      	mov	sl, r4
  407be4:	f8df 9038 	ldr.w	r9, [pc, #56]	; 407c20 <get_fileinfo+0x134>
  407be8:	4651      	mov	r1, sl
  407bea:	47c8      	blx	r9
  407bec:	b1a0      	cbz	r0, 407c18 <get_fileinfo+0x12c>
  407bee:	69eb      	ldr	r3, [r5, #28]
  407bf0:	3b01      	subs	r3, #1
  407bf2:	42a3      	cmp	r3, r4
  407bf4:	d912      	bls.n	407c1c <get_fileinfo+0x130>
  407bf6:	3401      	adds	r4, #1
  407bf8:	f806 0f01 	strb.w	r0, [r6, #1]!
  407bfc:	f838 0014 	ldrh.w	r0, [r8, r4, lsl #1]
  407c00:	2800      	cmp	r0, #0
  407c02:	d1f1      	bne.n	407be8 <get_fileinfo+0xfc>
  407c04:	e000      	b.n	407c08 <get_fileinfo+0x11c>
  407c06:	2400      	movs	r4, #0
  407c08:	2300      	movs	r3, #0
  407c0a:	553b      	strb	r3, [r7, r4]
  407c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407c10:	2400      	movs	r4, #0
  407c12:	e7f9      	b.n	407c08 <get_fileinfo+0x11c>
  407c14:	2400      	movs	r4, #0
  407c16:	e7f7      	b.n	407c08 <get_fileinfo+0x11c>
  407c18:	2400      	movs	r4, #0
  407c1a:	e7f5      	b.n	407c08 <get_fileinfo+0x11c>
  407c1c:	2400      	movs	r4, #0
  407c1e:	e7f3      	b.n	407c08 <get_fileinfo+0x11c>
  407c20:	00409ca9 	.word	0x00409ca9

00407c24 <move_window>:
  407c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407c28:	6b07      	ldr	r7, [r0, #48]	; 0x30
  407c2a:	428f      	cmp	r7, r1
  407c2c:	d035      	beq.n	407c9a <move_window+0x76>
  407c2e:	460e      	mov	r6, r1
  407c30:	4604      	mov	r4, r0
  407c32:	7903      	ldrb	r3, [r0, #4]
  407c34:	b91b      	cbnz	r3, 407c3e <move_window+0x1a>
  407c36:	bb2e      	cbnz	r6, 407c84 <move_window+0x60>
  407c38:	2000      	movs	r0, #0
  407c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407c3e:	f100 0834 	add.w	r8, r0, #52	; 0x34
  407c42:	2301      	movs	r3, #1
  407c44:	463a      	mov	r2, r7
  407c46:	4641      	mov	r1, r8
  407c48:	7840      	ldrb	r0, [r0, #1]
  407c4a:	4d18      	ldr	r5, [pc, #96]	; (407cac <move_window+0x88>)
  407c4c:	47a8      	blx	r5
  407c4e:	bb38      	cbnz	r0, 407ca0 <move_window+0x7c>
  407c50:	2300      	movs	r3, #0
  407c52:	7123      	strb	r3, [r4, #4]
  407c54:	6a63      	ldr	r3, [r4, #36]	; 0x24
  407c56:	6a22      	ldr	r2, [r4, #32]
  407c58:	4413      	add	r3, r2
  407c5a:	429f      	cmp	r7, r3
  407c5c:	d2eb      	bcs.n	407c36 <move_window+0x12>
  407c5e:	78e5      	ldrb	r5, [r4, #3]
  407c60:	2d01      	cmp	r5, #1
  407c62:	d9e8      	bls.n	407c36 <move_window+0x12>
  407c64:	f04f 0a01 	mov.w	sl, #1
  407c68:	f8df 9040 	ldr.w	r9, [pc, #64]	; 407cac <move_window+0x88>
  407c6c:	6a23      	ldr	r3, [r4, #32]
  407c6e:	441f      	add	r7, r3
  407c70:	4653      	mov	r3, sl
  407c72:	463a      	mov	r2, r7
  407c74:	4641      	mov	r1, r8
  407c76:	7860      	ldrb	r0, [r4, #1]
  407c78:	47c8      	blx	r9
  407c7a:	3d01      	subs	r5, #1
  407c7c:	b2ed      	uxtb	r5, r5
  407c7e:	2d01      	cmp	r5, #1
  407c80:	d1f4      	bne.n	407c6c <move_window+0x48>
  407c82:	e7d8      	b.n	407c36 <move_window+0x12>
  407c84:	2301      	movs	r3, #1
  407c86:	4632      	mov	r2, r6
  407c88:	f104 0134 	add.w	r1, r4, #52	; 0x34
  407c8c:	7860      	ldrb	r0, [r4, #1]
  407c8e:	4d08      	ldr	r5, [pc, #32]	; (407cb0 <move_window+0x8c>)
  407c90:	47a8      	blx	r5
  407c92:	b940      	cbnz	r0, 407ca6 <move_window+0x82>
  407c94:	6326      	str	r6, [r4, #48]	; 0x30
  407c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407c9a:	2000      	movs	r0, #0
  407c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407ca0:	2001      	movs	r0, #1
  407ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407ca6:	2001      	movs	r0, #1
  407ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407cac:	00407525 	.word	0x00407525
  407cb0:	004074b5 	.word	0x004074b5

00407cb4 <get_fat>:
  407cb4:	2901      	cmp	r1, #1
  407cb6:	d96a      	bls.n	407d8e <get_fat+0xda>
  407cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407cba:	69c3      	ldr	r3, [r0, #28]
  407cbc:	4299      	cmp	r1, r3
  407cbe:	d268      	bcs.n	407d92 <get_fat+0xde>
  407cc0:	460c      	mov	r4, r1
  407cc2:	4606      	mov	r6, r0
  407cc4:	7803      	ldrb	r3, [r0, #0]
  407cc6:	2b02      	cmp	r3, #2
  407cc8:	d02f      	beq.n	407d2a <get_fat+0x76>
  407cca:	2b03      	cmp	r3, #3
  407ccc:	d041      	beq.n	407d52 <get_fat+0x9e>
  407cce:	2b01      	cmp	r3, #1
  407cd0:	d002      	beq.n	407cd8 <get_fat+0x24>
  407cd2:	f04f 30ff 	mov.w	r0, #4294967295
  407cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407cd8:	eb01 0751 	add.w	r7, r1, r1, lsr #1
  407cdc:	6a41      	ldr	r1, [r0, #36]	; 0x24
  407cde:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  407ce2:	4b2d      	ldr	r3, [pc, #180]	; (407d98 <get_fat+0xe4>)
  407ce4:	4798      	blx	r3
  407ce6:	b110      	cbz	r0, 407cee <get_fat+0x3a>
  407ce8:	f04f 30ff 	mov.w	r0, #4294967295
  407cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407cee:	f3c7 0308 	ubfx	r3, r7, #0, #9
  407cf2:	4433      	add	r3, r6
  407cf4:	f893 5034 	ldrb.w	r5, [r3, #52]	; 0x34
  407cf8:	3701      	adds	r7, #1
  407cfa:	6a71      	ldr	r1, [r6, #36]	; 0x24
  407cfc:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  407d00:	4630      	mov	r0, r6
  407d02:	4b25      	ldr	r3, [pc, #148]	; (407d98 <get_fat+0xe4>)
  407d04:	4798      	blx	r3
  407d06:	b110      	cbz	r0, 407d0e <get_fat+0x5a>
  407d08:	f04f 30ff 	mov.w	r0, #4294967295
  407d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407d0e:	f3c7 0708 	ubfx	r7, r7, #0, #9
  407d12:	19f0      	adds	r0, r6, r7
  407d14:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
  407d18:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
  407d1c:	f014 0f01 	tst.w	r4, #1
  407d20:	bf14      	ite	ne
  407d22:	0900      	lsrne	r0, r0, #4
  407d24:	f3c0 000b 	ubfxeq	r0, r0, #0, #12
  407d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407d2a:	6a41      	ldr	r1, [r0, #36]	; 0x24
  407d2c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  407d30:	4b19      	ldr	r3, [pc, #100]	; (407d98 <get_fat+0xe4>)
  407d32:	4798      	blx	r3
  407d34:	b110      	cbz	r0, 407d3c <get_fat+0x88>
  407d36:	f04f 30ff 	mov.w	r0, #4294967295
  407d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407d3c:	0060      	lsls	r0, r4, #1
  407d3e:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
  407d42:	4430      	add	r0, r6
  407d44:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
  407d48:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
  407d4c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  407d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407d52:	6a41      	ldr	r1, [r0, #36]	; 0x24
  407d54:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  407d58:	4b0f      	ldr	r3, [pc, #60]	; (407d98 <get_fat+0xe4>)
  407d5a:	4798      	blx	r3
  407d5c:	b110      	cbz	r0, 407d64 <get_fat+0xb0>
  407d5e:	f04f 30ff 	mov.w	r0, #4294967295
  407d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407d64:	00a0      	lsls	r0, r4, #2
  407d66:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
  407d6a:	f100 0234 	add.w	r2, r0, #52	; 0x34
  407d6e:	4432      	add	r2, r6
  407d70:	78d1      	ldrb	r1, [r2, #3]
  407d72:	7893      	ldrb	r3, [r2, #2]
  407d74:	041b      	lsls	r3, r3, #16
  407d76:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  407d7a:	4430      	add	r0, r6
  407d7c:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
  407d80:	4318      	orrs	r0, r3
  407d82:	7853      	ldrb	r3, [r2, #1]
  407d84:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  407d88:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  407d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407d8e:	2001      	movs	r0, #1
  407d90:	4770      	bx	lr
  407d92:	2001      	movs	r0, #1
  407d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407d96:	bf00      	nop
  407d98:	00407c25 	.word	0x00407c25

00407d9c <dir_sdi>:
  407d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407d9e:	4605      	mov	r5, r0
  407da0:	460c      	mov	r4, r1
  407da2:	80c1      	strh	r1, [r0, #6]
  407da4:	6881      	ldr	r1, [r0, #8]
  407da6:	2901      	cmp	r1, #1
  407da8:	d03d      	beq.n	407e26 <dir_sdi+0x8a>
  407daa:	6803      	ldr	r3, [r0, #0]
  407dac:	69da      	ldr	r2, [r3, #28]
  407dae:	4291      	cmp	r1, r2
  407db0:	d301      	bcc.n	407db6 <dir_sdi+0x1a>
  407db2:	2002      	movs	r0, #2
  407db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407db6:	b961      	cbnz	r1, 407dd2 <dir_sdi+0x36>
  407db8:	781a      	ldrb	r2, [r3, #0]
  407dba:	2a03      	cmp	r2, #3
  407dbc:	d006      	beq.n	407dcc <dir_sdi+0x30>
  407dbe:	2200      	movs	r2, #0
  407dc0:	60ea      	str	r2, [r5, #12]
  407dc2:	891a      	ldrh	r2, [r3, #8]
  407dc4:	42a2      	cmp	r2, r4
  407dc6:	d821      	bhi.n	407e0c <dir_sdi+0x70>
  407dc8:	2002      	movs	r0, #2
  407dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407dcc:	6a99      	ldr	r1, [r3, #40]	; 0x28
  407dce:	2900      	cmp	r1, #0
  407dd0:	d0f5      	beq.n	407dbe <dir_sdi+0x22>
  407dd2:	789e      	ldrb	r6, [r3, #2]
  407dd4:	0136      	lsls	r6, r6, #4
  407dd6:	42b4      	cmp	r4, r6
  407dd8:	d310      	bcc.n	407dfc <dir_sdi+0x60>
  407dda:	4f17      	ldr	r7, [pc, #92]	; (407e38 <dir_sdi+0x9c>)
  407ddc:	6828      	ldr	r0, [r5, #0]
  407dde:	47b8      	blx	r7
  407de0:	4601      	mov	r1, r0
  407de2:	f1b0 3fff 	cmp.w	r0, #4294967295
  407de6:	d020      	beq.n	407e2a <dir_sdi+0x8e>
  407de8:	2801      	cmp	r0, #1
  407dea:	d920      	bls.n	407e2e <dir_sdi+0x92>
  407dec:	682b      	ldr	r3, [r5, #0]
  407dee:	69db      	ldr	r3, [r3, #28]
  407df0:	4298      	cmp	r0, r3
  407df2:	d21e      	bcs.n	407e32 <dir_sdi+0x96>
  407df4:	1ba4      	subs	r4, r4, r6
  407df6:	b2a4      	uxth	r4, r4
  407df8:	42a6      	cmp	r6, r4
  407dfa:	d9ef      	bls.n	407ddc <dir_sdi+0x40>
  407dfc:	60e9      	str	r1, [r5, #12]
  407dfe:	6828      	ldr	r0, [r5, #0]
  407e00:	4b0e      	ldr	r3, [pc, #56]	; (407e3c <dir_sdi+0xa0>)
  407e02:	4798      	blx	r3
  407e04:	eb00 1014 	add.w	r0, r0, r4, lsr #4
  407e08:	6128      	str	r0, [r5, #16]
  407e0a:	e003      	b.n	407e14 <dir_sdi+0x78>
  407e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  407e0e:	eb03 1314 	add.w	r3, r3, r4, lsr #4
  407e12:	612b      	str	r3, [r5, #16]
  407e14:	682b      	ldr	r3, [r5, #0]
  407e16:	3334      	adds	r3, #52	; 0x34
  407e18:	f004 040f 	and.w	r4, r4, #15
  407e1c:	eb03 1444 	add.w	r4, r3, r4, lsl #5
  407e20:	616c      	str	r4, [r5, #20]
  407e22:	2000      	movs	r0, #0
  407e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407e26:	2002      	movs	r0, #2
  407e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407e2a:	2001      	movs	r0, #1
  407e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407e2e:	2002      	movs	r0, #2
  407e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407e32:	2002      	movs	r0, #2
  407e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407e36:	bf00      	nop
  407e38:	00407cb5 	.word	0x00407cb5
  407e3c:	0040767f 	.word	0x0040767f

00407e40 <put_fat>:
  407e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407e44:	2901      	cmp	r1, #1
  407e46:	f240 808f 	bls.w	407f68 <put_fat+0x128>
  407e4a:	69c3      	ldr	r3, [r0, #28]
  407e4c:	4299      	cmp	r1, r3
  407e4e:	d301      	bcc.n	407e54 <put_fat+0x14>
  407e50:	2702      	movs	r7, #2
  407e52:	e08a      	b.n	407f6a <put_fat+0x12a>
  407e54:	4615      	mov	r5, r2
  407e56:	460c      	mov	r4, r1
  407e58:	4606      	mov	r6, r0
  407e5a:	7803      	ldrb	r3, [r0, #0]
  407e5c:	2b02      	cmp	r3, #2
  407e5e:	d04e      	beq.n	407efe <put_fat+0xbe>
  407e60:	2b03      	cmp	r3, #3
  407e62:	d05f      	beq.n	407f24 <put_fat+0xe4>
  407e64:	2b01      	cmp	r3, #1
  407e66:	d003      	beq.n	407e70 <put_fat+0x30>
  407e68:	2702      	movs	r7, #2
  407e6a:	2301      	movs	r3, #1
  407e6c:	7133      	strb	r3, [r6, #4]
  407e6e:	e07c      	b.n	407f6a <put_fat+0x12a>
  407e70:	eb01 0851 	add.w	r8, r1, r1, lsr #1
  407e74:	6a41      	ldr	r1, [r0, #36]	; 0x24
  407e76:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  407e7a:	4b3d      	ldr	r3, [pc, #244]	; (407f70 <put_fat+0x130>)
  407e7c:	4798      	blx	r3
  407e7e:	4607      	mov	r7, r0
  407e80:	2800      	cmp	r0, #0
  407e82:	d1f2      	bne.n	407e6a <put_fat+0x2a>
  407e84:	f3c8 0308 	ubfx	r3, r8, #0, #9
  407e88:	f014 0f01 	tst.w	r4, #1
  407e8c:	d01c      	beq.n	407ec8 <put_fat+0x88>
  407e8e:	4433      	add	r3, r6
  407e90:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
  407e94:	f002 020f 	and.w	r2, r2, #15
  407e98:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  407e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  407ea0:	f108 0801 	add.w	r8, r8, #1
  407ea4:	2301      	movs	r3, #1
  407ea6:	7133      	strb	r3, [r6, #4]
  407ea8:	6a71      	ldr	r1, [r6, #36]	; 0x24
  407eaa:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  407eae:	4630      	mov	r0, r6
  407eb0:	4b2f      	ldr	r3, [pc, #188]	; (407f70 <put_fat+0x130>)
  407eb2:	4798      	blx	r3
  407eb4:	2800      	cmp	r0, #0
  407eb6:	d153      	bne.n	407f60 <put_fat+0x120>
  407eb8:	f3c8 0808 	ubfx	r8, r8, #0, #9
  407ebc:	f3c5 1207 	ubfx	r2, r5, #4, #8
  407ec0:	44b0      	add	r8, r6
  407ec2:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
  407ec6:	e7d0      	b.n	407e6a <put_fat+0x2a>
  407ec8:	4433      	add	r3, r6
  407eca:	f883 5034 	strb.w	r5, [r3, #52]	; 0x34
  407ece:	f108 0801 	add.w	r8, r8, #1
  407ed2:	2301      	movs	r3, #1
  407ed4:	7133      	strb	r3, [r6, #4]
  407ed6:	6a71      	ldr	r1, [r6, #36]	; 0x24
  407ed8:	eb01 2158 	add.w	r1, r1, r8, lsr #9
  407edc:	4630      	mov	r0, r6
  407ede:	4b24      	ldr	r3, [pc, #144]	; (407f70 <put_fat+0x130>)
  407ee0:	4798      	blx	r3
  407ee2:	2800      	cmp	r0, #0
  407ee4:	d13e      	bne.n	407f64 <put_fat+0x124>
  407ee6:	f3c8 0808 	ubfx	r8, r8, #0, #9
  407eea:	eb06 0308 	add.w	r3, r6, r8
  407eee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
  407ef2:	f023 030f 	bic.w	r3, r3, #15
  407ef6:	f3c5 2203 	ubfx	r2, r5, #8, #4
  407efa:	431a      	orrs	r2, r3
  407efc:	e7e0      	b.n	407ec0 <put_fat+0x80>
  407efe:	6a41      	ldr	r1, [r0, #36]	; 0x24
  407f00:	eb01 2114 	add.w	r1, r1, r4, lsr #8
  407f04:	4b1a      	ldr	r3, [pc, #104]	; (407f70 <put_fat+0x130>)
  407f06:	4798      	blx	r3
  407f08:	4607      	mov	r7, r0
  407f0a:	2800      	cmp	r0, #0
  407f0c:	d1ad      	bne.n	407e6a <put_fat+0x2a>
  407f0e:	0063      	lsls	r3, r4, #1
  407f10:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
  407f14:	4433      	add	r3, r6
  407f16:	f883 5034 	strb.w	r5, [r3, #52]	; 0x34
  407f1a:	f3c5 2207 	ubfx	r2, r5, #8, #8
  407f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  407f22:	e7a2      	b.n	407e6a <put_fat+0x2a>
  407f24:	6a41      	ldr	r1, [r0, #36]	; 0x24
  407f26:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
  407f2a:	4b11      	ldr	r3, [pc, #68]	; (407f70 <put_fat+0x130>)
  407f2c:	4798      	blx	r3
  407f2e:	4607      	mov	r7, r0
  407f30:	2800      	cmp	r0, #0
  407f32:	d19a      	bne.n	407e6a <put_fat+0x2a>
  407f34:	00a1      	lsls	r1, r4, #2
  407f36:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
  407f3a:	f101 0334 	add.w	r3, r1, #52	; 0x34
  407f3e:	4433      	add	r3, r6
  407f40:	78da      	ldrb	r2, [r3, #3]
  407f42:	0612      	lsls	r2, r2, #24
  407f44:	4431      	add	r1, r6
  407f46:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
  407f4a:	432a      	orrs	r2, r5
  407f4c:	f881 2034 	strb.w	r2, [r1, #52]	; 0x34
  407f50:	f3c2 2107 	ubfx	r1, r2, #8, #8
  407f54:	7059      	strb	r1, [r3, #1]
  407f56:	0c11      	lsrs	r1, r2, #16
  407f58:	7099      	strb	r1, [r3, #2]
  407f5a:	0e12      	lsrs	r2, r2, #24
  407f5c:	70da      	strb	r2, [r3, #3]
  407f5e:	e784      	b.n	407e6a <put_fat+0x2a>
  407f60:	4607      	mov	r7, r0
  407f62:	e782      	b.n	407e6a <put_fat+0x2a>
  407f64:	4607      	mov	r7, r0
  407f66:	e780      	b.n	407e6a <put_fat+0x2a>
  407f68:	2702      	movs	r7, #2
  407f6a:	4638      	mov	r0, r7
  407f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407f70:	00407c25 	.word	0x00407c25

00407f74 <create_chain>:
  407f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407f78:	4605      	mov	r5, r0
  407f7a:	4688      	mov	r8, r1
  407f7c:	b941      	cbnz	r1, 407f90 <create_chain+0x1c>
  407f7e:	68c6      	ldr	r6, [r0, #12]
  407f80:	b186      	cbz	r6, 407fa4 <create_chain+0x30>
  407f82:	69c3      	ldr	r3, [r0, #28]
  407f84:	429e      	cmp	r6, r3
  407f86:	bf28      	it	cs
  407f88:	2601      	movcs	r6, #1
  407f8a:	4634      	mov	r4, r6
  407f8c:	4f27      	ldr	r7, [pc, #156]	; (40802c <create_chain+0xb8>)
  407f8e:	e017      	b.n	407fc0 <create_chain+0x4c>
  407f90:	4b26      	ldr	r3, [pc, #152]	; (40802c <create_chain+0xb8>)
  407f92:	4798      	blx	r3
  407f94:	4603      	mov	r3, r0
  407f96:	2801      	cmp	r0, #1
  407f98:	d93e      	bls.n	408018 <create_chain+0xa4>
  407f9a:	69ea      	ldr	r2, [r5, #28]
  407f9c:	4290      	cmp	r0, r2
  407f9e:	d340      	bcc.n	408022 <create_chain+0xae>
  407fa0:	4646      	mov	r6, r8
  407fa2:	e7f2      	b.n	407f8a <create_chain+0x16>
  407fa4:	2601      	movs	r6, #1
  407fa6:	e7f0      	b.n	407f8a <create_chain+0x16>
  407fa8:	4621      	mov	r1, r4
  407faa:	4628      	mov	r0, r5
  407fac:	47b8      	blx	r7
  407fae:	4603      	mov	r3, r0
  407fb0:	b170      	cbz	r0, 407fd0 <create_chain+0x5c>
  407fb2:	f1b0 3fff 	cmp.w	r0, #4294967295
  407fb6:	d034      	beq.n	408022 <create_chain+0xae>
  407fb8:	2801      	cmp	r0, #1
  407fba:	d032      	beq.n	408022 <create_chain+0xae>
  407fbc:	42b4      	cmp	r4, r6
  407fbe:	d02f      	beq.n	408020 <create_chain+0xac>
  407fc0:	3401      	adds	r4, #1
  407fc2:	69eb      	ldr	r3, [r5, #28]
  407fc4:	429c      	cmp	r4, r3
  407fc6:	d3ef      	bcc.n	407fa8 <create_chain+0x34>
  407fc8:	2e01      	cmp	r6, #1
  407fca:	d927      	bls.n	40801c <create_chain+0xa8>
  407fcc:	2402      	movs	r4, #2
  407fce:	e7eb      	b.n	407fa8 <create_chain+0x34>
  407fd0:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
  407fd4:	4621      	mov	r1, r4
  407fd6:	4628      	mov	r0, r5
  407fd8:	4b15      	ldr	r3, [pc, #84]	; (408030 <create_chain+0xbc>)
  407fda:	4798      	blx	r3
  407fdc:	4603      	mov	r3, r0
  407fde:	b9a8      	cbnz	r0, 40800c <create_chain+0x98>
  407fe0:	f1b8 0f00 	cmp.w	r8, #0
  407fe4:	d10a      	bne.n	407ffc <create_chain+0x88>
  407fe6:	60ec      	str	r4, [r5, #12]
  407fe8:	692b      	ldr	r3, [r5, #16]
  407fea:	f1b3 3fff 	cmp.w	r3, #4294967295
  407fee:	d01b      	beq.n	408028 <create_chain+0xb4>
  407ff0:	3b01      	subs	r3, #1
  407ff2:	612b      	str	r3, [r5, #16]
  407ff4:	2301      	movs	r3, #1
  407ff6:	716b      	strb	r3, [r5, #5]
  407ff8:	4623      	mov	r3, r4
  407ffa:	e012      	b.n	408022 <create_chain+0xae>
  407ffc:	4622      	mov	r2, r4
  407ffe:	4641      	mov	r1, r8
  408000:	4628      	mov	r0, r5
  408002:	4b0b      	ldr	r3, [pc, #44]	; (408030 <create_chain+0xbc>)
  408004:	4798      	blx	r3
  408006:	4603      	mov	r3, r0
  408008:	2800      	cmp	r0, #0
  40800a:	d0ec      	beq.n	407fe6 <create_chain+0x72>
  40800c:	2b01      	cmp	r3, #1
  40800e:	bf0c      	ite	eq
  408010:	f04f 33ff 	moveq.w	r3, #4294967295
  408014:	2301      	movne	r3, #1
  408016:	e004      	b.n	408022 <create_chain+0xae>
  408018:	2301      	movs	r3, #1
  40801a:	e002      	b.n	408022 <create_chain+0xae>
  40801c:	2300      	movs	r3, #0
  40801e:	e000      	b.n	408022 <create_chain+0xae>
  408020:	2300      	movs	r3, #0
  408022:	4618      	mov	r0, r3
  408024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408028:	4623      	mov	r3, r4
  40802a:	e7fa      	b.n	408022 <create_chain+0xae>
  40802c:	00407cb5 	.word	0x00407cb5
  408030:	00407e41 	.word	0x00407e41

00408034 <remove_chain>:
  408034:	2901      	cmp	r1, #1
  408036:	d92e      	bls.n	408096 <remove_chain+0x62>
  408038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40803c:	4604      	mov	r4, r0
  40803e:	460e      	mov	r6, r1
  408040:	69c3      	ldr	r3, [r0, #28]
  408042:	4299      	cmp	r1, r3
  408044:	d303      	bcc.n	40804e <remove_chain+0x1a>
  408046:	2202      	movs	r2, #2
  408048:	4610      	mov	r0, r2
  40804a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40804e:	4f16      	ldr	r7, [pc, #88]	; (4080a8 <remove_chain+0x74>)
  408050:	f04f 0900 	mov.w	r9, #0
  408054:	f8df 8054 	ldr.w	r8, [pc, #84]	; 4080ac <remove_chain+0x78>
  408058:	e003      	b.n	408062 <remove_chain+0x2e>
  40805a:	462e      	mov	r6, r5
  40805c:	69e3      	ldr	r3, [r4, #28]
  40805e:	42ab      	cmp	r3, r5
  408060:	d9f2      	bls.n	408048 <remove_chain+0x14>
  408062:	4631      	mov	r1, r6
  408064:	4620      	mov	r0, r4
  408066:	47b8      	blx	r7
  408068:	4605      	mov	r5, r0
  40806a:	b1b8      	cbz	r0, 40809c <remove_chain+0x68>
  40806c:	2801      	cmp	r0, #1
  40806e:	d017      	beq.n	4080a0 <remove_chain+0x6c>
  408070:	f1b0 3fff 	cmp.w	r0, #4294967295
  408074:	d016      	beq.n	4080a4 <remove_chain+0x70>
  408076:	464a      	mov	r2, r9
  408078:	4631      	mov	r1, r6
  40807a:	4620      	mov	r0, r4
  40807c:	47c0      	blx	r8
  40807e:	4602      	mov	r2, r0
  408080:	2800      	cmp	r0, #0
  408082:	d1e1      	bne.n	408048 <remove_chain+0x14>
  408084:	6923      	ldr	r3, [r4, #16]
  408086:	f1b3 3fff 	cmp.w	r3, #4294967295
  40808a:	d0e6      	beq.n	40805a <remove_chain+0x26>
  40808c:	3301      	adds	r3, #1
  40808e:	6123      	str	r3, [r4, #16]
  408090:	2301      	movs	r3, #1
  408092:	7163      	strb	r3, [r4, #5]
  408094:	e7e1      	b.n	40805a <remove_chain+0x26>
  408096:	2202      	movs	r2, #2
  408098:	4610      	mov	r0, r2
  40809a:	4770      	bx	lr
  40809c:	2200      	movs	r2, #0
  40809e:	e7d3      	b.n	408048 <remove_chain+0x14>
  4080a0:	2202      	movs	r2, #2
  4080a2:	e7d1      	b.n	408048 <remove_chain+0x14>
  4080a4:	2201      	movs	r2, #1
  4080a6:	e7cf      	b.n	408048 <remove_chain+0x14>
  4080a8:	00407cb5 	.word	0x00407cb5
  4080ac:	00407e41 	.word	0x00407e41

004080b0 <dir_next>:
  4080b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4080b4:	88c4      	ldrh	r4, [r0, #6]
  4080b6:	3401      	adds	r4, #1
  4080b8:	b2a4      	uxth	r4, r4
  4080ba:	b914      	cbnz	r4, 4080c2 <dir_next+0x12>
  4080bc:	2004      	movs	r0, #4
  4080be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4080c2:	6903      	ldr	r3, [r0, #16]
  4080c4:	b913      	cbnz	r3, 4080cc <dir_next+0x1c>
  4080c6:	2004      	movs	r0, #4
  4080c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4080cc:	460e      	mov	r6, r1
  4080ce:	4605      	mov	r5, r0
  4080d0:	f014 070f 	ands.w	r7, r4, #15
  4080d4:	d110      	bne.n	4080f8 <dir_next+0x48>
  4080d6:	3301      	adds	r3, #1
  4080d8:	6103      	str	r3, [r0, #16]
  4080da:	68c1      	ldr	r1, [r0, #12]
  4080dc:	b931      	cbnz	r1, 4080ec <dir_next+0x3c>
  4080de:	6803      	ldr	r3, [r0, #0]
  4080e0:	891b      	ldrh	r3, [r3, #8]
  4080e2:	42a3      	cmp	r3, r4
  4080e4:	d808      	bhi.n	4080f8 <dir_next+0x48>
  4080e6:	2004      	movs	r0, #4
  4080e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4080ec:	6800      	ldr	r0, [r0, #0]
  4080ee:	7883      	ldrb	r3, [r0, #2]
  4080f0:	3b01      	subs	r3, #1
  4080f2:	ea13 1314 	ands.w	r3, r3, r4, lsr #4
  4080f6:	d008      	beq.n	40810a <dir_next+0x5a>
  4080f8:	80ec      	strh	r4, [r5, #6]
  4080fa:	682b      	ldr	r3, [r5, #0]
  4080fc:	3334      	adds	r3, #52	; 0x34
  4080fe:	eb03 1347 	add.w	r3, r3, r7, lsl #5
  408102:	616b      	str	r3, [r5, #20]
  408104:	2000      	movs	r0, #0
  408106:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40810a:	4b32      	ldr	r3, [pc, #200]	; (4081d4 <dir_next+0x124>)
  40810c:	4798      	blx	r3
  40810e:	4680      	mov	r8, r0
  408110:	2801      	cmp	r0, #1
  408112:	d94d      	bls.n	4081b0 <dir_next+0x100>
  408114:	f1b0 3fff 	cmp.w	r0, #4294967295
  408118:	d04d      	beq.n	4081b6 <dir_next+0x106>
  40811a:	6828      	ldr	r0, [r5, #0]
  40811c:	69c3      	ldr	r3, [r0, #28]
  40811e:	4598      	cmp	r8, r3
  408120:	d33e      	bcc.n	4081a0 <dir_next+0xf0>
  408122:	b916      	cbnz	r6, 40812a <dir_next+0x7a>
  408124:	2004      	movs	r0, #4
  408126:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40812a:	68e9      	ldr	r1, [r5, #12]
  40812c:	4b2a      	ldr	r3, [pc, #168]	; (4081d8 <dir_next+0x128>)
  40812e:	4798      	blx	r3
  408130:	4680      	mov	r8, r0
  408132:	b910      	cbnz	r0, 40813a <dir_next+0x8a>
  408134:	2007      	movs	r0, #7
  408136:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40813a:	2801      	cmp	r0, #1
  40813c:	d03e      	beq.n	4081bc <dir_next+0x10c>
  40813e:	f1b0 3fff 	cmp.w	r0, #4294967295
  408142:	d03e      	beq.n	4081c2 <dir_next+0x112>
  408144:	2100      	movs	r1, #0
  408146:	6828      	ldr	r0, [r5, #0]
  408148:	4b24      	ldr	r3, [pc, #144]	; (4081dc <dir_next+0x12c>)
  40814a:	4798      	blx	r3
  40814c:	2800      	cmp	r0, #0
  40814e:	d13b      	bne.n	4081c8 <dir_next+0x118>
  408150:	6828      	ldr	r0, [r5, #0]
  408152:	f44f 7200 	mov.w	r2, #512	; 0x200
  408156:	2100      	movs	r1, #0
  408158:	3034      	adds	r0, #52	; 0x34
  40815a:	4b21      	ldr	r3, [pc, #132]	; (4081e0 <dir_next+0x130>)
  40815c:	4798      	blx	r3
  40815e:	682e      	ldr	r6, [r5, #0]
  408160:	4641      	mov	r1, r8
  408162:	4630      	mov	r0, r6
  408164:	4b1f      	ldr	r3, [pc, #124]	; (4081e4 <dir_next+0x134>)
  408166:	4798      	blx	r3
  408168:	6330      	str	r0, [r6, #48]	; 0x30
  40816a:	2600      	movs	r6, #0
  40816c:	f04f 0b01 	mov.w	fp, #1
  408170:	46b2      	mov	sl, r6
  408172:	f8df 9068 	ldr.w	r9, [pc, #104]	; 4081dc <dir_next+0x12c>
  408176:	682b      	ldr	r3, [r5, #0]
  408178:	7899      	ldrb	r1, [r3, #2]
  40817a:	b2f2      	uxtb	r2, r6
  40817c:	4291      	cmp	r1, r2
  40817e:	d90b      	bls.n	408198 <dir_next+0xe8>
  408180:	f883 b004 	strb.w	fp, [r3, #4]
  408184:	4651      	mov	r1, sl
  408186:	6828      	ldr	r0, [r5, #0]
  408188:	47c8      	blx	r9
  40818a:	3601      	adds	r6, #1
  40818c:	b9f8      	cbnz	r0, 4081ce <dir_next+0x11e>
  40818e:	682a      	ldr	r2, [r5, #0]
  408190:	6b13      	ldr	r3, [r2, #48]	; 0x30
  408192:	3301      	adds	r3, #1
  408194:	6313      	str	r3, [r2, #48]	; 0x30
  408196:	e7ee      	b.n	408176 <dir_next+0xc6>
  408198:	4616      	mov	r6, r2
  40819a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40819c:	1b96      	subs	r6, r2, r6
  40819e:	631e      	str	r6, [r3, #48]	; 0x30
  4081a0:	f8c5 800c 	str.w	r8, [r5, #12]
  4081a4:	4641      	mov	r1, r8
  4081a6:	6828      	ldr	r0, [r5, #0]
  4081a8:	4b0e      	ldr	r3, [pc, #56]	; (4081e4 <dir_next+0x134>)
  4081aa:	4798      	blx	r3
  4081ac:	6128      	str	r0, [r5, #16]
  4081ae:	e7a3      	b.n	4080f8 <dir_next+0x48>
  4081b0:	2002      	movs	r0, #2
  4081b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4081b6:	2001      	movs	r0, #1
  4081b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4081bc:	2002      	movs	r0, #2
  4081be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4081c2:	2001      	movs	r0, #1
  4081c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4081c8:	2001      	movs	r0, #1
  4081ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4081ce:	2001      	movs	r0, #1
  4081d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4081d4:	00407cb5 	.word	0x00407cb5
  4081d8:	00407f75 	.word	0x00407f75
  4081dc:	00407c25 	.word	0x00407c25
  4081e0:	00407671 	.word	0x00407671
  4081e4:	0040767f 	.word	0x0040767f

004081e8 <dir_find>:
  4081e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4081ec:	b085      	sub	sp, #20
  4081ee:	4605      	mov	r5, r0
  4081f0:	2100      	movs	r1, #0
  4081f2:	4b62      	ldr	r3, [pc, #392]	; (40837c <dir_find+0x194>)
  4081f4:	4798      	blx	r3
  4081f6:	4680      	mov	r8, r0
  4081f8:	bb08      	cbnz	r0, 40823e <dir_find+0x56>
  4081fa:	f04f 0bff 	mov.w	fp, #255	; 0xff
  4081fe:	46d9      	mov	r9, fp
  408200:	4f5f      	ldr	r7, [pc, #380]	; (408380 <dir_find+0x198>)
  408202:	46da      	mov	sl, fp
  408204:	e095      	b.n	408332 <dir_find+0x14a>
  408206:	2a0f      	cmp	r2, #15
  408208:	d01d      	beq.n	408246 <dir_find+0x5e>
  40820a:	f1b9 0f00 	cmp.w	r9, #0
  40820e:	d104      	bne.n	40821a <dir_find+0x32>
  408210:	4620      	mov	r0, r4
  408212:	4b5c      	ldr	r3, [pc, #368]	; (408384 <dir_find+0x19c>)
  408214:	4798      	blx	r3
  408216:	4582      	cmp	sl, r0
  408218:	d011      	beq.n	40823e <dir_find+0x56>
  40821a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40821e:	842b      	strh	r3, [r5, #32]
  408220:	69ab      	ldr	r3, [r5, #24]
  408222:	7ada      	ldrb	r2, [r3, #11]
  408224:	f012 0f01 	tst.w	r2, #1
  408228:	d17a      	bne.n	408320 <dir_find+0x138>
  40822a:	f104 000b 	add.w	r0, r4, #11
  40822e:	f814 1b01 	ldrb.w	r1, [r4], #1
  408232:	f813 2b01 	ldrb.w	r2, [r3], #1
  408236:	4291      	cmp	r1, r2
  408238:	d16c      	bne.n	408314 <dir_find+0x12c>
  40823a:	42a0      	cmp	r0, r4
  40823c:	d1f7      	bne.n	40822e <dir_find+0x46>
  40823e:	4640      	mov	r0, r8
  408240:	b005      	add	sp, #20
  408242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408246:	f8d5 801c 	ldr.w	r8, [r5, #28]
  40824a:	f1b8 0f00 	cmp.w	r8, #0
  40824e:	d069      	beq.n	408324 <dir_find+0x13c>
  408250:	f016 0f40 	tst.w	r6, #64	; 0x40
  408254:	d00c      	beq.n	408270 <dir_find+0x88>
  408256:	f894 a00d 	ldrb.w	sl, [r4, #13]
  40825a:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
  40825e:	88eb      	ldrh	r3, [r5, #6]
  408260:	842b      	strh	r3, [r5, #32]
  408262:	f894 b00d 	ldrb.w	fp, [r4, #13]
  408266:	45d3      	cmp	fp, sl
  408268:	d008      	beq.n	40827c <dir_find+0x94>
  40826a:	f04f 09ff 	mov.w	r9, #255	; 0xff
  40826e:	e059      	b.n	408324 <dir_find+0x13c>
  408270:	45b1      	cmp	r9, r6
  408272:	bf18      	it	ne
  408274:	f04f 09ff 	movne.w	r9, #255	; 0xff
  408278:	d154      	bne.n	408324 <dir_find+0x13c>
  40827a:	e7f2      	b.n	408262 <dir_find+0x7a>
  40827c:	f894 a000 	ldrb.w	sl, [r4]
  408280:	f02a 0a40 	bic.w	sl, sl, #64	; 0x40
  408284:	f10a 3aff 	add.w	sl, sl, #4294967295
  408288:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
  40828c:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  408290:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 408390 <dir_find+0x1a8>
  408294:	f109 0a0d 	add.w	sl, r9, #13
  408298:	2001      	movs	r0, #1
  40829a:	9603      	str	r6, [sp, #12]
  40829c:	f8cd b004 	str.w	fp, [sp, #4]
  4082a0:	461e      	mov	r6, r3
  4082a2:	9502      	str	r5, [sp, #8]
  4082a4:	e00f      	b.n	4082c6 <dir_find+0xde>
  4082a6:	4618      	mov	r0, r3
  4082a8:	4b37      	ldr	r3, [pc, #220]	; (408388 <dir_find+0x1a0>)
  4082aa:	4798      	blx	r3
  4082ac:	4683      	mov	fp, r0
  4082ae:	2efe      	cmp	r6, #254	; 0xfe
  4082b0:	d85b      	bhi.n	40836a <dir_find+0x182>
  4082b2:	1c75      	adds	r5, r6, #1
  4082b4:	f838 0016 	ldrh.w	r0, [r8, r6, lsl #1]
  4082b8:	4b33      	ldr	r3, [pc, #204]	; (408388 <dir_find+0x1a0>)
  4082ba:	4798      	blx	r3
  4082bc:	4583      	cmp	fp, r0
  4082be:	d158      	bne.n	408372 <dir_find+0x18a>
  4082c0:	462e      	mov	r6, r5
  4082c2:	45d1      	cmp	r9, sl
  4082c4:	d013      	beq.n	4082ee <dir_find+0x106>
  4082c6:	f819 2b01 	ldrb.w	r2, [r9], #1
  4082ca:	18a3      	adds	r3, r4, r2
  4082cc:	7859      	ldrb	r1, [r3, #1]
  4082ce:	5ca3      	ldrb	r3, [r4, r2]
  4082d0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  4082d4:	2800      	cmp	r0, #0
  4082d6:	d1e6      	bne.n	4082a6 <dir_find+0xbe>
  4082d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4082dc:	4293      	cmp	r3, r2
  4082de:	d0f0      	beq.n	4082c2 <dir_find+0xda>
  4082e0:	f8dd b004 	ldr.w	fp, [sp, #4]
  4082e4:	9d02      	ldr	r5, [sp, #8]
  4082e6:	46da      	mov	sl, fp
  4082e8:	f04f 09ff 	mov.w	r9, #255	; 0xff
  4082ec:	e01a      	b.n	408324 <dir_find+0x13c>
  4082ee:	f8dd b004 	ldr.w	fp, [sp, #4]
  4082f2:	4632      	mov	r2, r6
  4082f4:	9e03      	ldr	r6, [sp, #12]
  4082f6:	9d02      	ldr	r5, [sp, #8]
  4082f8:	7823      	ldrb	r3, [r4, #0]
  4082fa:	f013 0f40 	tst.w	r3, #64	; 0x40
  4082fe:	d004      	beq.n	40830a <dir_find+0x122>
  408300:	b118      	cbz	r0, 40830a <dir_find+0x122>
  408302:	f838 3012 	ldrh.w	r3, [r8, r2, lsl #1]
  408306:	2b00      	cmp	r3, #0
  408308:	d1ed      	bne.n	4082e6 <dir_find+0xfe>
  40830a:	3e01      	subs	r6, #1
  40830c:	fa5f f986 	uxtb.w	r9, r6
  408310:	46da      	mov	sl, fp
  408312:	e007      	b.n	408324 <dir_find+0x13c>
  408314:	f04f 09ff 	mov.w	r9, #255	; 0xff
  408318:	e004      	b.n	408324 <dir_find+0x13c>
  40831a:	f04f 09ff 	mov.w	r9, #255	; 0xff
  40831e:	e001      	b.n	408324 <dir_find+0x13c>
  408320:	f04f 09ff 	mov.w	r9, #255	; 0xff
  408324:	2100      	movs	r1, #0
  408326:	4628      	mov	r0, r5
  408328:	4b18      	ldr	r3, [pc, #96]	; (40838c <dir_find+0x1a4>)
  40832a:	4798      	blx	r3
  40832c:	4680      	mov	r8, r0
  40832e:	2800      	cmp	r0, #0
  408330:	d185      	bne.n	40823e <dir_find+0x56>
  408332:	6929      	ldr	r1, [r5, #16]
  408334:	6828      	ldr	r0, [r5, #0]
  408336:	47b8      	blx	r7
  408338:	4680      	mov	r8, r0
  40833a:	2800      	cmp	r0, #0
  40833c:	f47f af7f 	bne.w	40823e <dir_find+0x56>
  408340:	696c      	ldr	r4, [r5, #20]
  408342:	7826      	ldrb	r6, [r4, #0]
  408344:	b176      	cbz	r6, 408364 <dir_find+0x17c>
  408346:	7ae3      	ldrb	r3, [r4, #11]
  408348:	f003 023f 	and.w	r2, r3, #63	; 0x3f
  40834c:	2ee5      	cmp	r6, #229	; 0xe5
  40834e:	d0e4      	beq.n	40831a <dir_find+0x132>
  408350:	f013 0f08 	tst.w	r3, #8
  408354:	f43f af57 	beq.w	408206 <dir_find+0x1e>
  408358:	2a0f      	cmp	r2, #15
  40835a:	f43f af74 	beq.w	408246 <dir_find+0x5e>
  40835e:	f04f 09ff 	mov.w	r9, #255	; 0xff
  408362:	e7df      	b.n	408324 <dir_find+0x13c>
  408364:	f04f 0804 	mov.w	r8, #4
  408368:	e769      	b.n	40823e <dir_find+0x56>
  40836a:	f8dd b004 	ldr.w	fp, [sp, #4]
  40836e:	9d02      	ldr	r5, [sp, #8]
  408370:	e7b9      	b.n	4082e6 <dir_find+0xfe>
  408372:	f8dd b004 	ldr.w	fp, [sp, #4]
  408376:	9d02      	ldr	r5, [sp, #8]
  408378:	e7b5      	b.n	4082e6 <dir_find+0xfe>
  40837a:	bf00      	nop
  40837c:	00407d9d 	.word	0x00407d9d
  408380:	00407c25 	.word	0x00407c25
  408384:	00407695 	.word	0x00407695
  408388:	00409ce9 	.word	0x00409ce9
  40838c:	004080b1 	.word	0x004080b1
  408390:	00410e08 	.word	0x00410e08

00408394 <dir_register>:
  408394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408398:	b089      	sub	sp, #36	; 0x24
  40839a:	4604      	mov	r4, r0
  40839c:	6985      	ldr	r5, [r0, #24]
  40839e:	f8d0 901c 	ldr.w	r9, [r0, #28]
  4083a2:	220c      	movs	r2, #12
  4083a4:	4629      	mov	r1, r5
  4083a6:	a805      	add	r0, sp, #20
  4083a8:	4bac      	ldr	r3, [pc, #688]	; (40865c <dir_register+0x2c8>)
  4083aa:	4798      	blx	r3
  4083ac:	f89d 301f 	ldrb.w	r3, [sp, #31]
  4083b0:	f013 0f20 	tst.w	r3, #32
  4083b4:	d004      	beq.n	4083c0 <dir_register+0x2c>
  4083b6:	2606      	movs	r6, #6
  4083b8:	4630      	mov	r0, r6
  4083ba:	b009      	add	sp, #36	; 0x24
  4083bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4083c0:	f013 0f01 	tst.w	r3, #1
  4083c4:	d075      	beq.n	4084b2 <dir_register+0x11e>
  4083c6:	2300      	movs	r3, #0
  4083c8:	72eb      	strb	r3, [r5, #11]
  4083ca:	61e3      	str	r3, [r4, #28]
  4083cc:	220b      	movs	r2, #11
  4083ce:	a905      	add	r1, sp, #20
  4083d0:	4628      	mov	r0, r5
  4083d2:	4ba2      	ldr	r3, [pc, #648]	; (40865c <dir_register+0x2c8>)
  4083d4:	4798      	blx	r3
  4083d6:	2701      	movs	r7, #1
  4083d8:	463b      	mov	r3, r7
  4083da:	f04f 0820 	mov.w	r8, #32
  4083de:	f8df a29c 	ldr.w	sl, [pc, #668]	; 40867c <dir_register+0x2e8>
  4083e2:	f8df b278 	ldr.w	fp, [pc, #632]	; 40865c <dir_register+0x2c8>
  4083e6:	e032      	b.n	40844e <dir_register+0xba>
  4083e8:	463b      	mov	r3, r7
  4083ea:	e030      	b.n	40844e <dir_register+0xba>
  4083ec:	4613      	mov	r3, r2
  4083ee:	e002      	b.n	4083f6 <dir_register+0x62>
  4083f0:	2300      	movs	r3, #0
  4083f2:	e000      	b.n	4083f6 <dir_register+0x62>
  4083f4:	4613      	mov	r3, r2
  4083f6:	442b      	add	r3, r5
  4083f8:	e005      	b.n	408406 <dir_register+0x72>
  4083fa:	4641      	mov	r1, r8
  4083fc:	f803 1b01 	strb.w	r1, [r3], #1
  408400:	1b59      	subs	r1, r3, r5
  408402:	2907      	cmp	r1, #7
  408404:	d807      	bhi.n	408416 <dir_register+0x82>
  408406:	2a07      	cmp	r2, #7
  408408:	d8f7      	bhi.n	4083fa <dir_register+0x66>
  40840a:	a908      	add	r1, sp, #32
  40840c:	4411      	add	r1, r2
  40840e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
  408412:	3201      	adds	r2, #1
  408414:	e7f2      	b.n	4083fc <dir_register+0x68>
  408416:	4620      	mov	r0, r4
  408418:	47d0      	blx	sl
  40841a:	4606      	mov	r6, r0
  40841c:	2800      	cmp	r0, #0
  40841e:	d13e      	bne.n	40849e <dir_register+0x10a>
  408420:	3701      	adds	r7, #1
  408422:	b2bf      	uxth	r7, r7
  408424:	2f64      	cmp	r7, #100	; 0x64
  408426:	d038      	beq.n	40849a <dir_register+0x106>
  408428:	220b      	movs	r2, #11
  40842a:	a905      	add	r1, sp, #20
  40842c:	4628      	mov	r0, r5
  40842e:	47d8      	blx	fp
  408430:	2f05      	cmp	r7, #5
  408432:	d9d9      	bls.n	4083e8 <dir_register+0x54>
  408434:	463b      	mov	r3, r7
  408436:	4649      	mov	r1, r9
  408438:	03da      	lsls	r2, r3, #15
  40843a:	ea42 0353 	orr.w	r3, r2, r3, lsr #1
  40843e:	f831 2b02 	ldrh.w	r2, [r1], #2
  408442:	fa12 f383 	uxtah	r3, r2, r3
  408446:	b29b      	uxth	r3, r3
  408448:	880a      	ldrh	r2, [r1, #0]
  40844a:	2a00      	cmp	r2, #0
  40844c:	d1f4      	bne.n	408438 <dir_register+0xa4>
  40844e:	f10d 0613 	add.w	r6, sp, #19
  408452:	2207      	movs	r2, #7
  408454:	f003 000f 	and.w	r0, r3, #15
  408458:	f100 0130 	add.w	r1, r0, #48	; 0x30
  40845c:	2939      	cmp	r1, #57	; 0x39
  40845e:	bf88      	it	hi
  408460:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
  408464:	3a01      	subs	r2, #1
  408466:	f806 1901 	strb.w	r1, [r6], #-1
  40846a:	f3c3 130f 	ubfx	r3, r3, #4, #16
  40846e:	2b00      	cmp	r3, #0
  408470:	d1f0      	bne.n	408454 <dir_register+0xc0>
  408472:	217e      	movs	r1, #126	; 0x7e
  408474:	ab08      	add	r3, sp, #32
  408476:	4413      	add	r3, r2
  408478:	f803 1c14 	strb.w	r1, [r3, #-20]
  40847c:	2a00      	cmp	r2, #0
  40847e:	d0b5      	beq.n	4083ec <dir_register+0x58>
  408480:	782b      	ldrb	r3, [r5, #0]
  408482:	2b20      	cmp	r3, #32
  408484:	d0b4      	beq.n	4083f0 <dir_register+0x5c>
  408486:	4629      	mov	r1, r5
  408488:	2300      	movs	r3, #0
  40848a:	3301      	adds	r3, #1
  40848c:	429a      	cmp	r2, r3
  40848e:	d0b1      	beq.n	4083f4 <dir_register+0x60>
  408490:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  408494:	2820      	cmp	r0, #32
  408496:	d1f8      	bne.n	40848a <dir_register+0xf6>
  408498:	e7ad      	b.n	4083f6 <dir_register+0x62>
  40849a:	2607      	movs	r6, #7
  40849c:	e78c      	b.n	4083b8 <dir_register+0x24>
  40849e:	2f64      	cmp	r7, #100	; 0x64
  4084a0:	f000 80a0 	beq.w	4085e4 <dir_register+0x250>
  4084a4:	2804      	cmp	r0, #4
  4084a6:	d187      	bne.n	4083b8 <dir_register+0x24>
  4084a8:	f89d 301f 	ldrb.w	r3, [sp, #31]
  4084ac:	72eb      	strb	r3, [r5, #11]
  4084ae:	f8c4 901c 	str.w	r9, [r4, #28]
  4084b2:	f89d 301f 	ldrb.w	r3, [sp, #31]
  4084b6:	f013 0f02 	tst.w	r3, #2
  4084ba:	d014      	beq.n	4084e6 <dir_register+0x152>
  4084bc:	f8b9 3000 	ldrh.w	r3, [r9]
  4084c0:	b17b      	cbz	r3, 4084e2 <dir_register+0x14e>
  4084c2:	2300      	movs	r3, #0
  4084c4:	3301      	adds	r3, #1
  4084c6:	b29b      	uxth	r3, r3
  4084c8:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
  4084cc:	2a00      	cmp	r2, #0
  4084ce:	d1f9      	bne.n	4084c4 <dir_register+0x130>
  4084d0:	3319      	adds	r3, #25
  4084d2:	4f63      	ldr	r7, [pc, #396]	; (408660 <dir_register+0x2cc>)
  4084d4:	fb87 2703 	smull	r2, r7, r7, r3
  4084d8:	17db      	asrs	r3, r3, #31
  4084da:	ebc3 07a7 	rsb	r7, r3, r7, asr #2
  4084de:	b2bf      	uxth	r7, r7
  4084e0:	e002      	b.n	4084e8 <dir_register+0x154>
  4084e2:	2300      	movs	r3, #0
  4084e4:	e7f4      	b.n	4084d0 <dir_register+0x13c>
  4084e6:	2701      	movs	r7, #1
  4084e8:	2100      	movs	r1, #0
  4084ea:	4620      	mov	r0, r4
  4084ec:	4b5d      	ldr	r3, [pc, #372]	; (408664 <dir_register+0x2d0>)
  4084ee:	4798      	blx	r3
  4084f0:	4606      	mov	r6, r0
  4084f2:	2800      	cmp	r0, #0
  4084f4:	f47f af60 	bne.w	4083b8 <dir_register+0x24>
  4084f8:	f04f 0a00 	mov.w	sl, #0
  4084fc:	4655      	mov	r5, sl
  4084fe:	f8df 8170 	ldr.w	r8, [pc, #368]	; 408670 <dir_register+0x2dc>
  408502:	46d3      	mov	fp, sl
  408504:	f8df 9164 	ldr.w	r9, [pc, #356]	; 40866c <dir_register+0x2d8>
  408508:	e00b      	b.n	408522 <dir_register+0x18e>
  40850a:	1c6b      	adds	r3, r5, #1
  40850c:	b29b      	uxth	r3, r3
  40850e:	429f      	cmp	r7, r3
  408510:	d06a      	beq.n	4085e8 <dir_register+0x254>
  408512:	461d      	mov	r5, r3
  408514:	2101      	movs	r1, #1
  408516:	4620      	mov	r0, r4
  408518:	47c8      	blx	r9
  40851a:	4606      	mov	r6, r0
  40851c:	2800      	cmp	r0, #0
  40851e:	f47f af4b 	bne.w	4083b8 <dir_register+0x24>
  408522:	6921      	ldr	r1, [r4, #16]
  408524:	6820      	ldr	r0, [r4, #0]
  408526:	47c0      	blx	r8
  408528:	4606      	mov	r6, r0
  40852a:	2800      	cmp	r0, #0
  40852c:	f47f af44 	bne.w	4083b8 <dir_register+0x24>
  408530:	6963      	ldr	r3, [r4, #20]
  408532:	781b      	ldrb	r3, [r3, #0]
  408534:	2be5      	cmp	r3, #229	; 0xe5
  408536:	d000      	beq.n	40853a <dir_register+0x1a6>
  408538:	b923      	cbnz	r3, 408544 <dir_register+0x1b0>
  40853a:	2d00      	cmp	r5, #0
  40853c:	d1e5      	bne.n	40850a <dir_register+0x176>
  40853e:	f8b4 a006 	ldrh.w	sl, [r4, #6]
  408542:	e7e2      	b.n	40850a <dir_register+0x176>
  408544:	465d      	mov	r5, fp
  408546:	e7e5      	b.n	408514 <dir_register+0x180>
  408548:	4651      	mov	r1, sl
  40854a:	4620      	mov	r0, r4
  40854c:	4b45      	ldr	r3, [pc, #276]	; (408664 <dir_register+0x2d0>)
  40854e:	4798      	blx	r3
  408550:	4606      	mov	r6, r0
  408552:	2800      	cmp	r0, #0
  408554:	f47f af30 	bne.w	4083b8 <dir_register+0x24>
  408558:	69a0      	ldr	r0, [r4, #24]
  40855a:	4b43      	ldr	r3, [pc, #268]	; (408668 <dir_register+0x2d4>)
  40855c:	4798      	blx	r3
  40855e:	9000      	str	r0, [sp, #0]
  408560:	2700      	movs	r7, #0
  408562:	9701      	str	r7, [sp, #4]
  408564:	e01a      	b.n	40859c <dir_register+0x208>
  408566:	4671      	mov	r1, lr
  408568:	e063      	b.n	408632 <dir_register+0x29e>
  40856a:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40856e:	4293      	cmp	r3, r2
  408570:	d002      	beq.n	408578 <dir_register+0x1e4>
  408572:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
  408576:	b90b      	cbnz	r3, 40857c <dir_register+0x1e8>
  408578:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  40857c:	f880 b000 	strb.w	fp, [r0]
  408580:	6823      	ldr	r3, [r4, #0]
  408582:	2201      	movs	r2, #1
  408584:	711a      	strb	r2, [r3, #4]
  408586:	4639      	mov	r1, r7
  408588:	4620      	mov	r0, r4
  40858a:	4b38      	ldr	r3, [pc, #224]	; (40866c <dir_register+0x2d8>)
  40858c:	4798      	blx	r3
  40858e:	4606      	mov	r6, r0
  408590:	2800      	cmp	r0, #0
  408592:	f47f af11 	bne.w	4083b8 <dir_register+0x24>
  408596:	3d01      	subs	r5, #1
  408598:	b2ad      	uxth	r5, r5
  40859a:	b33d      	cbz	r5, 4085ec <dir_register+0x258>
  40859c:	6921      	ldr	r1, [r4, #16]
  40859e:	6820      	ldr	r0, [r4, #0]
  4085a0:	4b33      	ldr	r3, [pc, #204]	; (408670 <dir_register+0x2dc>)
  4085a2:	4798      	blx	r3
  4085a4:	4606      	mov	r6, r0
  4085a6:	2800      	cmp	r0, #0
  4085a8:	f47f af06 	bne.w	4083b8 <dir_register+0x24>
  4085ac:	f8d4 901c 	ldr.w	r9, [r4, #28]
  4085b0:	6960      	ldr	r0, [r4, #20]
  4085b2:	fa5f fb85 	uxtb.w	fp, r5
  4085b6:	f89d 3000 	ldrb.w	r3, [sp]
  4085ba:	7343      	strb	r3, [r0, #13]
  4085bc:	230f      	movs	r3, #15
  4085be:	72c3      	strb	r3, [r0, #11]
  4085c0:	7307      	strb	r7, [r0, #12]
  4085c2:	7687      	strb	r7, [r0, #26]
  4085c4:	76c7      	strb	r7, [r0, #27]
  4085c6:	f10b 31ff 	add.w	r1, fp, #4294967295
  4085ca:	eb01 0341 	add.w	r3, r1, r1, lsl #1
  4085ce:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  4085d2:	4a28      	ldr	r2, [pc, #160]	; (408674 <dir_register+0x2e0>)
  4085d4:	f102 080d 	add.w	r8, r2, #13
  4085d8:	9b01      	ldr	r3, [sp, #4]
  4085da:	f64f 76ff 	movw	r6, #65535	; 0xffff
  4085de:	f04f 0aff 	mov.w	sl, #255	; 0xff
  4085e2:	e029      	b.n	408638 <dir_register+0x2a4>
  4085e4:	2607      	movs	r6, #7
  4085e6:	e6e7      	b.n	4083b8 <dir_register+0x24>
  4085e8:	2b01      	cmp	r3, #1
  4085ea:	d8ad      	bhi.n	408548 <dir_register+0x1b4>
  4085ec:	6921      	ldr	r1, [r4, #16]
  4085ee:	6820      	ldr	r0, [r4, #0]
  4085f0:	4b1f      	ldr	r3, [pc, #124]	; (408670 <dir_register+0x2dc>)
  4085f2:	4798      	blx	r3
  4085f4:	4606      	mov	r6, r0
  4085f6:	2800      	cmp	r0, #0
  4085f8:	f47f aede 	bne.w	4083b8 <dir_register+0x24>
  4085fc:	6965      	ldr	r5, [r4, #20]
  4085fe:	2220      	movs	r2, #32
  408600:	2100      	movs	r1, #0
  408602:	4628      	mov	r0, r5
  408604:	4b1c      	ldr	r3, [pc, #112]	; (408678 <dir_register+0x2e4>)
  408606:	4798      	blx	r3
  408608:	220b      	movs	r2, #11
  40860a:	69a1      	ldr	r1, [r4, #24]
  40860c:	4628      	mov	r0, r5
  40860e:	4b13      	ldr	r3, [pc, #76]	; (40865c <dir_register+0x2c8>)
  408610:	4798      	blx	r3
  408612:	69a3      	ldr	r3, [r4, #24]
  408614:	7adb      	ldrb	r3, [r3, #11]
  408616:	f003 0318 	and.w	r3, r3, #24
  40861a:	732b      	strb	r3, [r5, #12]
  40861c:	6823      	ldr	r3, [r4, #0]
  40861e:	2201      	movs	r2, #1
  408620:	711a      	strb	r2, [r3, #4]
  408622:	e6c9      	b.n	4083b8 <dir_register+0x24>
  408624:	f892 e000 	ldrb.w	lr, [r2]
  408628:	f800 a00e 	strb.w	sl, [r0, lr]
  40862c:	4486      	add	lr, r0
  40862e:	f88e a001 	strb.w	sl, [lr, #1]
  408632:	3201      	adds	r2, #1
  408634:	4542      	cmp	r2, r8
  408636:	d098      	beq.n	40856a <dir_register+0x1d6>
  408638:	42b3      	cmp	r3, r6
  40863a:	d0f3      	beq.n	408624 <dir_register+0x290>
  40863c:	f101 0e01 	add.w	lr, r1, #1
  408640:	f839 3011 	ldrh.w	r3, [r9, r1, lsl #1]
  408644:	7811      	ldrb	r1, [r2, #0]
  408646:	5443      	strb	r3, [r0, r1]
  408648:	4401      	add	r1, r0
  40864a:	ea4f 2c13 	mov.w	ip, r3, lsr #8
  40864e:	f881 c001 	strb.w	ip, [r1, #1]
  408652:	2b00      	cmp	r3, #0
  408654:	d187      	bne.n	408566 <dir_register+0x1d2>
  408656:	4671      	mov	r1, lr
  408658:	4633      	mov	r3, r6
  40865a:	e7ea      	b.n	408632 <dir_register+0x29e>
  40865c:	0040765d 	.word	0x0040765d
  408660:	4ec4ec4f 	.word	0x4ec4ec4f
  408664:	00407d9d 	.word	0x00407d9d
  408668:	00407695 	.word	0x00407695
  40866c:	004080b1 	.word	0x004080b1
  408670:	00407c25 	.word	0x00407c25
  408674:	00410e08 	.word	0x00410e08
  408678:	00407671 	.word	0x00407671
  40867c:	004081e9 	.word	0x004081e9

00408680 <dir_read>:
  408680:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408684:	4604      	mov	r4, r0
  408686:	f04f 09ff 	mov.w	r9, #255	; 0xff
  40868a:	464e      	mov	r6, r9
  40868c:	2504      	movs	r5, #4
  40868e:	4f40      	ldr	r7, [pc, #256]	; (408790 <dir_read+0x110>)
  408690:	f64f 78ff 	movw	r8, #65535	; 0xffff
  408694:	e01b      	b.n	4086ce <dir_read+0x4e>
  408696:	290f      	cmp	r1, #15
  408698:	d164      	bne.n	408764 <dir_read+0xe4>
  40869a:	f013 0f40 	tst.w	r3, #64	; 0x40
  40869e:	d00b      	beq.n	4086b8 <dir_read+0x38>
  4086a0:	f890 900d 	ldrb.w	r9, [r0, #13]
  4086a4:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
  4086a8:	88e2      	ldrh	r2, [r4, #6]
  4086aa:	8422      	strh	r2, [r4, #32]
  4086ac:	f890 e00d 	ldrb.w	lr, [r0, #13]
  4086b0:	45ce      	cmp	lr, r9
  4086b2:	d024      	beq.n	4086fe <dir_read+0x7e>
  4086b4:	26ff      	movs	r6, #255	; 0xff
  4086b6:	e003      	b.n	4086c0 <dir_read+0x40>
  4086b8:	429e      	cmp	r6, r3
  4086ba:	bf18      	it	ne
  4086bc:	26ff      	movne	r6, #255	; 0xff
  4086be:	d0f5      	beq.n	4086ac <dir_read+0x2c>
  4086c0:	2100      	movs	r1, #0
  4086c2:	4620      	mov	r0, r4
  4086c4:	4b33      	ldr	r3, [pc, #204]	; (408794 <dir_read+0x114>)
  4086c6:	4798      	blx	r3
  4086c8:	4605      	mov	r5, r0
  4086ca:	2800      	cmp	r0, #0
  4086cc:	d15b      	bne.n	408786 <dir_read+0x106>
  4086ce:	6921      	ldr	r1, [r4, #16]
  4086d0:	2900      	cmp	r1, #0
  4086d2:	d052      	beq.n	40877a <dir_read+0xfa>
  4086d4:	6820      	ldr	r0, [r4, #0]
  4086d6:	47b8      	blx	r7
  4086d8:	4605      	mov	r5, r0
  4086da:	2800      	cmp	r0, #0
  4086dc:	d153      	bne.n	408786 <dir_read+0x106>
  4086de:	6960      	ldr	r0, [r4, #20]
  4086e0:	7803      	ldrb	r3, [r0, #0]
  4086e2:	2b00      	cmp	r3, #0
  4086e4:	d04e      	beq.n	408784 <dir_read+0x104>
  4086e6:	7ac2      	ldrb	r2, [r0, #11]
  4086e8:	f002 013f 	and.w	r1, r2, #63	; 0x3f
  4086ec:	2be5      	cmp	r3, #229	; 0xe5
  4086ee:	d042      	beq.n	408776 <dir_read+0xf6>
  4086f0:	f012 0f08 	tst.w	r2, #8
  4086f4:	d0cf      	beq.n	408696 <dir_read+0x16>
  4086f6:	290f      	cmp	r1, #15
  4086f8:	d0cf      	beq.n	40869a <dir_read+0x1a>
  4086fa:	26ff      	movs	r6, #255	; 0xff
  4086fc:	e7e0      	b.n	4086c0 <dir_read+0x40>
  4086fe:	f8d4 a01c 	ldr.w	sl, [r4, #28]
  408702:	7806      	ldrb	r6, [r0, #0]
  408704:	f006 063f 	and.w	r6, r6, #63	; 0x3f
  408708:	3e01      	subs	r6, #1
  40870a:	eb06 0246 	add.w	r2, r6, r6, lsl #1
  40870e:	eb06 0682 	add.w	r6, r6, r2, lsl #2
  408712:	4921      	ldr	r1, [pc, #132]	; (408798 <dir_read+0x118>)
  408714:	f101 090d 	add.w	r9, r1, #13
  408718:	f04f 0c01 	mov.w	ip, #1
  40871c:	e003      	b.n	408726 <dir_read+0xa6>
  40871e:	4542      	cmp	r2, r8
  408720:	d12d      	bne.n	40877e <dir_read+0xfe>
  408722:	4589      	cmp	r9, r1
  408724:	d011      	beq.n	40874a <dir_read+0xca>
  408726:	f811 5b01 	ldrb.w	r5, [r1], #1
  40872a:	1942      	adds	r2, r0, r5
  40872c:	f892 b001 	ldrb.w	fp, [r2, #1]
  408730:	5d42      	ldrb	r2, [r0, r5]
  408732:	ea42 220b 	orr.w	r2, r2, fp, lsl #8
  408736:	f1bc 0f00 	cmp.w	ip, #0
  40873a:	d0f0      	beq.n	40871e <dir_read+0x9e>
  40873c:	2efe      	cmp	r6, #254	; 0xfe
  40873e:	d81e      	bhi.n	40877e <dir_read+0xfe>
  408740:	f82a 2016 	strh.w	r2, [sl, r6, lsl #1]
  408744:	4694      	mov	ip, r2
  408746:	3601      	adds	r6, #1
  408748:	e7eb      	b.n	408722 <dir_read+0xa2>
  40874a:	7802      	ldrb	r2, [r0, #0]
  40874c:	f012 0f40 	tst.w	r2, #64	; 0x40
  408750:	d004      	beq.n	40875c <dir_read+0xdc>
  408752:	2efe      	cmp	r6, #254	; 0xfe
  408754:	d813      	bhi.n	40877e <dir_read+0xfe>
  408756:	2200      	movs	r2, #0
  408758:	f82a 2016 	strh.w	r2, [sl, r6, lsl #1]
  40875c:	3b01      	subs	r3, #1
  40875e:	b2de      	uxtb	r6, r3
  408760:	46f1      	mov	r9, lr
  408762:	e7ad      	b.n	4086c0 <dir_read+0x40>
  408764:	b91e      	cbnz	r6, 40876e <dir_read+0xee>
  408766:	4b0d      	ldr	r3, [pc, #52]	; (40879c <dir_read+0x11c>)
  408768:	4798      	blx	r3
  40876a:	4581      	cmp	r9, r0
  40876c:	d00d      	beq.n	40878a <dir_read+0x10a>
  40876e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  408772:	8423      	strh	r3, [r4, #32]
  408774:	e009      	b.n	40878a <dir_read+0x10a>
  408776:	26ff      	movs	r6, #255	; 0xff
  408778:	e7a2      	b.n	4086c0 <dir_read+0x40>
  40877a:	b135      	cbz	r5, 40878a <dir_read+0x10a>
  40877c:	e003      	b.n	408786 <dir_read+0x106>
  40877e:	46f1      	mov	r9, lr
  408780:	26ff      	movs	r6, #255	; 0xff
  408782:	e79d      	b.n	4086c0 <dir_read+0x40>
  408784:	2504      	movs	r5, #4
  408786:	2300      	movs	r3, #0
  408788:	6123      	str	r3, [r4, #16]
  40878a:	4628      	mov	r0, r5
  40878c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408790:	00407c25 	.word	0x00407c25
  408794:	004080b1 	.word	0x004080b1
  408798:	00410e08 	.word	0x00410e08
  40879c:	00407695 	.word	0x00407695

004087a0 <dir_remove>:
  4087a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4087a4:	4604      	mov	r4, r0
  4087a6:	88c5      	ldrh	r5, [r0, #6]
  4087a8:	8c01      	ldrh	r1, [r0, #32]
  4087aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4087ae:	4299      	cmp	r1, r3
  4087b0:	bf08      	it	eq
  4087b2:	4629      	moveq	r1, r5
  4087b4:	4b10      	ldr	r3, [pc, #64]	; (4087f8 <dir_remove+0x58>)
  4087b6:	4798      	blx	r3
  4087b8:	4603      	mov	r3, r0
  4087ba:	b9c8      	cbnz	r0, 4087f0 <dir_remove+0x50>
  4087bc:	4e0f      	ldr	r6, [pc, #60]	; (4087fc <dir_remove+0x5c>)
  4087be:	27e5      	movs	r7, #229	; 0xe5
  4087c0:	f8df 803c 	ldr.w	r8, [pc, #60]	; 408800 <dir_remove+0x60>
  4087c4:	6921      	ldr	r1, [r4, #16]
  4087c6:	6820      	ldr	r0, [r4, #0]
  4087c8:	47b0      	blx	r6
  4087ca:	4603      	mov	r3, r0
  4087cc:	b968      	cbnz	r0, 4087ea <dir_remove+0x4a>
  4087ce:	6962      	ldr	r2, [r4, #20]
  4087d0:	7017      	strb	r7, [r2, #0]
  4087d2:	6822      	ldr	r2, [r4, #0]
  4087d4:	2101      	movs	r1, #1
  4087d6:	7111      	strb	r1, [r2, #4]
  4087d8:	88e2      	ldrh	r2, [r4, #6]
  4087da:	42aa      	cmp	r2, r5
  4087dc:	d208      	bcs.n	4087f0 <dir_remove+0x50>
  4087de:	2100      	movs	r1, #0
  4087e0:	4620      	mov	r0, r4
  4087e2:	47c0      	blx	r8
  4087e4:	4603      	mov	r3, r0
  4087e6:	2800      	cmp	r0, #0
  4087e8:	d0ec      	beq.n	4087c4 <dir_remove+0x24>
  4087ea:	2b04      	cmp	r3, #4
  4087ec:	bf08      	it	eq
  4087ee:	2302      	moveq	r3, #2
  4087f0:	4618      	mov	r0, r3
  4087f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4087f6:	bf00      	nop
  4087f8:	00407d9d 	.word	0x00407d9d
  4087fc:	00407c25 	.word	0x00407c25
  408800:	004080b1 	.word	0x004080b1

00408804 <sync>:
  408804:	b570      	push	{r4, r5, r6, lr}
  408806:	4604      	mov	r4, r0
  408808:	2100      	movs	r1, #0
  40880a:	4b2d      	ldr	r3, [pc, #180]	; (4088c0 <sync+0xbc>)
  40880c:	4798      	blx	r3
  40880e:	4603      	mov	r3, r0
  408810:	b950      	cbnz	r0, 408828 <sync+0x24>
  408812:	7823      	ldrb	r3, [r4, #0]
  408814:	2b03      	cmp	r3, #3
  408816:	d009      	beq.n	40882c <sync+0x28>
  408818:	2200      	movs	r2, #0
  40881a:	4611      	mov	r1, r2
  40881c:	7860      	ldrb	r0, [r4, #1]
  40881e:	4b29      	ldr	r3, [pc, #164]	; (4088c4 <sync+0xc0>)
  408820:	4798      	blx	r3
  408822:	1c03      	adds	r3, r0, #0
  408824:	bf18      	it	ne
  408826:	2301      	movne	r3, #1
  408828:	4618      	mov	r0, r3
  40882a:	bd70      	pop	{r4, r5, r6, pc}
  40882c:	7963      	ldrb	r3, [r4, #5]
  40882e:	2b00      	cmp	r3, #0
  408830:	d0f2      	beq.n	408818 <sync+0x14>
  408832:	2600      	movs	r6, #0
  408834:	6326      	str	r6, [r4, #48]	; 0x30
  408836:	f104 0534 	add.w	r5, r4, #52	; 0x34
  40883a:	f44f 7200 	mov.w	r2, #512	; 0x200
  40883e:	4631      	mov	r1, r6
  408840:	4628      	mov	r0, r5
  408842:	4b21      	ldr	r3, [pc, #132]	; (4088c8 <sync+0xc4>)
  408844:	4798      	blx	r3
  408846:	2355      	movs	r3, #85	; 0x55
  408848:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
  40884c:	23aa      	movs	r3, #170	; 0xaa
  40884e:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
  408852:	2352      	movs	r3, #82	; 0x52
  408854:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  408858:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  40885c:	2361      	movs	r3, #97	; 0x61
  40885e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  408862:	2241      	movs	r2, #65	; 0x41
  408864:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
  408868:	2172      	movs	r1, #114	; 0x72
  40886a:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
  40886e:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
  408872:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
  408876:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
  40887a:	6923      	ldr	r3, [r4, #16]
  40887c:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
  408880:	f3c3 2207 	ubfx	r2, r3, #8, #8
  408884:	f884 221d 	strb.w	r2, [r4, #541]	; 0x21d
  408888:	0c1a      	lsrs	r2, r3, #16
  40888a:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
  40888e:	0e1b      	lsrs	r3, r3, #24
  408890:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
  408894:	68e3      	ldr	r3, [r4, #12]
  408896:	f884 3220 	strb.w	r3, [r4, #544]	; 0x220
  40889a:	f3c3 2207 	ubfx	r2, r3, #8, #8
  40889e:	f884 2221 	strb.w	r2, [r4, #545]	; 0x221
  4088a2:	0c1a      	lsrs	r2, r3, #16
  4088a4:	f884 2222 	strb.w	r2, [r4, #546]	; 0x222
  4088a8:	0e1b      	lsrs	r3, r3, #24
  4088aa:	f884 3223 	strb.w	r3, [r4, #547]	; 0x223
  4088ae:	2301      	movs	r3, #1
  4088b0:	6962      	ldr	r2, [r4, #20]
  4088b2:	4629      	mov	r1, r5
  4088b4:	7860      	ldrb	r0, [r4, #1]
  4088b6:	4d05      	ldr	r5, [pc, #20]	; (4088cc <sync+0xc8>)
  4088b8:	47a8      	blx	r5
  4088ba:	7166      	strb	r6, [r4, #5]
  4088bc:	e7ac      	b.n	408818 <sync+0x14>
  4088be:	bf00      	nop
  4088c0:	00407c25 	.word	0x00407c25
  4088c4:	00407595 	.word	0x00407595
  4088c8:	00407671 	.word	0x00407671
  4088cc:	00407525 	.word	0x00407525

004088d0 <follow_path>:
  4088d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4088d4:	b083      	sub	sp, #12
  4088d6:	4682      	mov	sl, r0
  4088d8:	4688      	mov	r8, r1
  4088da:	780b      	ldrb	r3, [r1, #0]
  4088dc:	2b2f      	cmp	r3, #47	; 0x2f
  4088de:	d00b      	beq.n	4088f8 <follow_path+0x28>
  4088e0:	2b5c      	cmp	r3, #92	; 0x5c
  4088e2:	d009      	beq.n	4088f8 <follow_path+0x28>
  4088e4:	6803      	ldr	r3, [r0, #0]
  4088e6:	699b      	ldr	r3, [r3, #24]
  4088e8:	6083      	str	r3, [r0, #8]
  4088ea:	f898 3000 	ldrb.w	r3, [r8]
  4088ee:	2b1f      	cmp	r3, #31
  4088f0:	d908      	bls.n	408904 <follow_path+0x34>
  4088f2:	f8df 9334 	ldr.w	r9, [pc, #820]	; 408c28 <follow_path+0x358>
  4088f6:	e00f      	b.n	408918 <follow_path+0x48>
  4088f8:	f108 0801 	add.w	r8, r8, #1
  4088fc:	2300      	movs	r3, #0
  4088fe:	f8ca 3008 	str.w	r3, [sl, #8]
  408902:	e7f2      	b.n	4088ea <follow_path+0x1a>
  408904:	2100      	movs	r1, #0
  408906:	4650      	mov	r0, sl
  408908:	4bc1      	ldr	r3, [pc, #772]	; (408c10 <follow_path+0x340>)
  40890a:	4798      	blx	r3
  40890c:	4603      	mov	r3, r0
  40890e:	2200      	movs	r2, #0
  408910:	f8ca 2014 	str.w	r2, [sl, #20]
  408914:	e071      	b.n	4089fa <follow_path+0x12a>
  408916:	4698      	mov	r8, r3
  408918:	4646      	mov	r6, r8
  40891a:	4643      	mov	r3, r8
  40891c:	f813 0b01 	ldrb.w	r0, [r3], #1
  408920:	282f      	cmp	r0, #47	; 0x2f
  408922:	d0f8      	beq.n	408916 <follow_path+0x46>
  408924:	285c      	cmp	r0, #92	; 0x5c
  408926:	bf08      	it	eq
  408928:	4698      	moveq	r8, r3
  40892a:	d0f5      	beq.n	408918 <follow_path+0x48>
  40892c:	f8da b01c 	ldr.w	fp, [sl, #28]
  408930:	b280      	uxth	r0, r0
  408932:	281f      	cmp	r0, #31
  408934:	f240 8155 	bls.w	408be2 <follow_path+0x312>
  408938:	282f      	cmp	r0, #47	; 0x2f
  40893a:	f000 8158 	beq.w	408bee <follow_path+0x31e>
  40893e:	285c      	cmp	r0, #92	; 0x5c
  408940:	f000 8174 	beq.w	408c2c <follow_path+0x35c>
  408944:	f1ab 0502 	sub.w	r5, fp, #2
  408948:	2401      	movs	r4, #1
  40894a:	4627      	mov	r7, r4
  40894c:	e013      	b.n	408976 <follow_path+0xa6>
  40894e:	2b00      	cmp	r3, #0
  408950:	d152      	bne.n	4089f8 <follow_path+0x128>
  408952:	f825 2f02 	strh.w	r2, [r5, #2]!
  408956:	1c63      	adds	r3, r4, #1
  408958:	f818 0f01 	ldrb.w	r0, [r8, #1]!
  40895c:	281f      	cmp	r0, #31
  40895e:	f240 8142 	bls.w	408be6 <follow_path+0x316>
  408962:	282f      	cmp	r0, #47	; 0x2f
  408964:	f000 8145 	beq.w	408bf2 <follow_path+0x322>
  408968:	285c      	cmp	r0, #92	; 0x5c
  40896a:	f000 8142 	beq.w	408bf2 <follow_path+0x322>
  40896e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  408972:	d041      	beq.n	4089f8 <follow_path+0x128>
  408974:	461c      	mov	r4, r3
  408976:	4639      	mov	r1, r7
  408978:	47c8      	blx	r9
  40897a:	4602      	mov	r2, r0
  40897c:	2800      	cmp	r0, #0
  40897e:	d03b      	beq.n	4089f8 <follow_path+0x128>
  408980:	287f      	cmp	r0, #127	; 0x7f
  408982:	d8e6      	bhi.n	408952 <follow_path+0x82>
  408984:	2822      	cmp	r0, #34	; 0x22
  408986:	f000 8112 	beq.w	408bae <follow_path+0x2de>
  40898a:	232a      	movs	r3, #42	; 0x2a
  40898c:	49a1      	ldr	r1, [pc, #644]	; (408c14 <follow_path+0x344>)
  40898e:	b298      	uxth	r0, r3
  408990:	4290      	cmp	r0, r2
  408992:	d0dc      	beq.n	40894e <follow_path+0x7e>
  408994:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  408998:	2b00      	cmp	r3, #0
  40899a:	d1f8      	bne.n	40898e <follow_path+0xbe>
  40899c:	e7d9      	b.n	408952 <follow_path+0x82>
  40899e:	f8bb 3000 	ldrh.w	r3, [fp]
  4089a2:	2b2e      	cmp	r3, #46	; 0x2e
  4089a4:	f040 8130 	bne.w	408c08 <follow_path+0x338>
  4089a8:	2300      	movs	r3, #0
  4089aa:	f82b 3014 	strh.w	r3, [fp, r4, lsl #1]
  4089ae:	f8da 2018 	ldr.w	r2, [sl, #24]
  4089b2:	42a3      	cmp	r3, r4
  4089b4:	bf34      	ite	cc
  4089b6:	212e      	movcc	r1, #46	; 0x2e
  4089b8:	2120      	movcs	r1, #32
  4089ba:	54d1      	strb	r1, [r2, r3]
  4089bc:	3301      	adds	r3, #1
  4089be:	2b0b      	cmp	r3, #11
  4089c0:	d1f5      	bne.n	4089ae <follow_path+0xde>
  4089c2:	f8da 3018 	ldr.w	r3, [sl, #24]
  4089c6:	f045 0520 	orr.w	r5, r5, #32
  4089ca:	72dd      	strb	r5, [r3, #11]
  4089cc:	e09a      	b.n	408b04 <follow_path+0x234>
  4089ce:	f8bb 3002 	ldrh.w	r3, [fp, #2]
  4089d2:	2b2e      	cmp	r3, #46	; 0x2e
  4089d4:	f040 8118 	bne.w	408c08 <follow_path+0x338>
  4089d8:	f8bb 3000 	ldrh.w	r3, [fp]
  4089dc:	2b2e      	cmp	r3, #46	; 0x2e
  4089de:	f040 8113 	bne.w	408c08 <follow_path+0x338>
  4089e2:	e7e1      	b.n	4089a8 <follow_path+0xd8>
  4089e4:	3c01      	subs	r4, #1
  4089e6:	f000 80e2 	beq.w	408bae <follow_path+0x2de>
  4089ea:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
  4089ee:	2b20      	cmp	r3, #32
  4089f0:	d0f8      	beq.n	4089e4 <follow_path+0x114>
  4089f2:	2b2e      	cmp	r3, #46	; 0x2e
  4089f4:	d0f6      	beq.n	4089e4 <follow_path+0x114>
  4089f6:	b924      	cbnz	r4, 408a02 <follow_path+0x132>
  4089f8:	2306      	movs	r3, #6
  4089fa:	4618      	mov	r0, r3
  4089fc:	b003      	add	sp, #12
  4089fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408a02:	0066      	lsls	r6, r4, #1
  408a04:	2700      	movs	r7, #0
  408a06:	f82b 7014 	strh.w	r7, [fp, r4, lsl #1]
  408a0a:	220b      	movs	r2, #11
  408a0c:	2120      	movs	r1, #32
  408a0e:	f8da 0018 	ldr.w	r0, [sl, #24]
  408a12:	4b81      	ldr	r3, [pc, #516]	; (408c18 <follow_path+0x348>)
  408a14:	4798      	blx	r3
  408a16:	f1ab 0102 	sub.w	r1, fp, #2
  408a1a:	463b      	mov	r3, r7
  408a1c:	e000      	b.n	408a20 <follow_path+0x150>
  408a1e:	3301      	adds	r3, #1
  408a20:	f831 2f02 	ldrh.w	r2, [r1, #2]!
  408a24:	2a20      	cmp	r2, #32
  408a26:	d0fa      	beq.n	408a1e <follow_path+0x14e>
  408a28:	2a2e      	cmp	r2, #46	; 0x2e
  408a2a:	d0f8      	beq.n	408a1e <follow_path+0x14e>
  408a2c:	b10b      	cbz	r3, 408a32 <follow_path+0x162>
  408a2e:	f045 0503 	orr.w	r5, r5, #3
  408a32:	3e02      	subs	r6, #2
  408a34:	eb0b 0206 	add.w	r2, fp, r6
  408a38:	f83b 1006 	ldrh.w	r1, [fp, r6]
  408a3c:	292e      	cmp	r1, #46	; 0x2e
  408a3e:	d005      	beq.n	408a4c <follow_path+0x17c>
  408a40:	3c01      	subs	r4, #1
  408a42:	d003      	beq.n	408a4c <follow_path+0x17c>
  408a44:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
  408a48:	292e      	cmp	r1, #46	; 0x2e
  408a4a:	d1f9      	bne.n	408a40 <follow_path+0x170>
  408a4c:	2208      	movs	r2, #8
  408a4e:	9200      	str	r2, [sp, #0]
  408a50:	2200      	movs	r2, #0
  408a52:	9201      	str	r2, [sp, #4]
  408a54:	4617      	mov	r7, r2
  408a56:	e005      	b.n	408a64 <follow_path+0x194>
  408a58:	42a6      	cmp	r6, r4
  408a5a:	f000 80ea 	beq.w	408c32 <follow_path+0x362>
  408a5e:	f045 0503 	orr.w	r5, r5, #3
  408a62:	4633      	mov	r3, r6
  408a64:	1c5e      	adds	r6, r3, #1
  408a66:	f83b 0013 	ldrh.w	r0, [fp, r3, lsl #1]
  408a6a:	b348      	cbz	r0, 408ac0 <follow_path+0x1f0>
  408a6c:	2820      	cmp	r0, #32
  408a6e:	d0f6      	beq.n	408a5e <follow_path+0x18e>
  408a70:	282e      	cmp	r0, #46	; 0x2e
  408a72:	d0f1      	beq.n	408a58 <follow_path+0x188>
  408a74:	9b01      	ldr	r3, [sp, #4]
  408a76:	9a00      	ldr	r2, [sp, #0]
  408a78:	4293      	cmp	r3, r2
  408a7a:	d217      	bcs.n	408aac <follow_path+0x1dc>
  408a7c:	42a6      	cmp	r6, r4
  408a7e:	f000 80d8 	beq.w	408c32 <follow_path+0x362>
  408a82:	287f      	cmp	r0, #127	; 0x7f
  408a84:	d86a      	bhi.n	408b5c <follow_path+0x28c>
  408a86:	282b      	cmp	r0, #43	; 0x2b
  408a88:	d075      	beq.n	408b76 <follow_path+0x2a6>
  408a8a:	232c      	movs	r3, #44	; 0x2c
  408a8c:	4a63      	ldr	r2, [pc, #396]	; (408c1c <follow_path+0x34c>)
  408a8e:	b299      	uxth	r1, r3
  408a90:	4281      	cmp	r1, r0
  408a92:	d07c      	beq.n	408b8e <follow_path+0x2be>
  408a94:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  408a98:	2b00      	cmp	r3, #0
  408a9a:	d1f8      	bne.n	408a8e <follow_path+0x1be>
  408a9c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
  408aa0:	b29b      	uxth	r3, r3
  408aa2:	2b19      	cmp	r3, #25
  408aa4:	d876      	bhi.n	408b94 <follow_path+0x2c4>
  408aa6:	f047 0702 	orr.w	r7, r7, #2
  408aaa:	e067      	b.n	408b7c <follow_path+0x2ac>
  408aac:	9b00      	ldr	r3, [sp, #0]
  408aae:	2b0b      	cmp	r3, #11
  408ab0:	d048      	beq.n	408b44 <follow_path+0x274>
  408ab2:	42a6      	cmp	r6, r4
  408ab4:	f000 80c0 	beq.w	408c38 <follow_path+0x368>
  408ab8:	f045 0503 	orr.w	r5, r5, #3
  408abc:	f240 80bc 	bls.w	408c38 <follow_path+0x368>
  408ac0:	f8da 3018 	ldr.w	r3, [sl, #24]
  408ac4:	781a      	ldrb	r2, [r3, #0]
  408ac6:	2ae5      	cmp	r2, #229	; 0xe5
  408ac8:	d045      	beq.n	408b56 <follow_path+0x286>
  408aca:	9b00      	ldr	r3, [sp, #0]
  408acc:	2b08      	cmp	r3, #8
  408ace:	bf04      	itt	eq
  408ad0:	00bf      	lsleq	r7, r7, #2
  408ad2:	b2ff      	uxtbeq	r7, r7
  408ad4:	f007 030c 	and.w	r3, r7, #12
  408ad8:	2b0c      	cmp	r3, #12
  408ada:	d065      	beq.n	408ba8 <follow_path+0x2d8>
  408adc:	f007 0203 	and.w	r2, r7, #3
  408ae0:	2a03      	cmp	r2, #3
  408ae2:	d061      	beq.n	408ba8 <follow_path+0x2d8>
  408ae4:	f015 0f02 	tst.w	r5, #2
  408ae8:	d109      	bne.n	408afe <follow_path+0x22e>
  408aea:	f007 0703 	and.w	r7, r7, #3
  408aee:	2f01      	cmp	r7, #1
  408af0:	bf08      	it	eq
  408af2:	f045 0510 	orreq.w	r5, r5, #16
  408af6:	2b04      	cmp	r3, #4
  408af8:	bf08      	it	eq
  408afa:	f045 0508 	orreq.w	r5, r5, #8
  408afe:	f8da 3018 	ldr.w	r3, [sl, #24]
  408b02:	72dd      	strb	r5, [r3, #11]
  408b04:	4650      	mov	r0, sl
  408b06:	4b46      	ldr	r3, [pc, #280]	; (408c20 <follow_path+0x350>)
  408b08:	4798      	blx	r3
  408b0a:	f8da 3018 	ldr.w	r3, [sl, #24]
  408b0e:	7ada      	ldrb	r2, [r3, #11]
  408b10:	4603      	mov	r3, r0
  408b12:	2800      	cmp	r0, #0
  408b14:	d14d      	bne.n	408bb2 <follow_path+0x2e2>
  408b16:	f012 0f04 	tst.w	r2, #4
  408b1a:	f47f af6e 	bne.w	4089fa <follow_path+0x12a>
  408b1e:	f8da 3014 	ldr.w	r3, [sl, #20]
  408b22:	7ada      	ldrb	r2, [r3, #11]
  408b24:	f012 0f10 	tst.w	r2, #16
  408b28:	d059      	beq.n	408bde <follow_path+0x30e>
  408b2a:	7d59      	ldrb	r1, [r3, #21]
  408b2c:	7d1a      	ldrb	r2, [r3, #20]
  408b2e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  408b32:	7ed9      	ldrb	r1, [r3, #27]
  408b34:	7e9b      	ldrb	r3, [r3, #26]
  408b36:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  408b3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  408b3e:	f8ca 3008 	str.w	r3, [sl, #8]
  408b42:	e6e9      	b.n	408918 <follow_path+0x48>
  408b44:	f045 0503 	orr.w	r5, r5, #3
  408b48:	f8da 3018 	ldr.w	r3, [sl, #24]
  408b4c:	781a      	ldrb	r2, [r3, #0]
  408b4e:	2ae5      	cmp	r2, #229	; 0xe5
  408b50:	d1c0      	bne.n	408ad4 <follow_path+0x204>
  408b52:	220b      	movs	r2, #11
  408b54:	9200      	str	r2, [sp, #0]
  408b56:	2205      	movs	r2, #5
  408b58:	701a      	strb	r2, [r3, #0]
  408b5a:	e7b6      	b.n	408aca <follow_path+0x1fa>
  408b5c:	2100      	movs	r1, #0
  408b5e:	47c8      	blx	r9
  408b60:	4603      	mov	r3, r0
  408b62:	2800      	cmp	r0, #0
  408b64:	d070      	beq.n	408c48 <follow_path+0x378>
  408b66:	4a2f      	ldr	r2, [pc, #188]	; (408c24 <follow_path+0x354>)
  408b68:	4413      	add	r3, r2
  408b6a:	f813 0c80 	ldrb.w	r0, [r3, #-128]
  408b6e:	f045 0502 	orr.w	r5, r5, #2
  408b72:	2800      	cmp	r0, #0
  408b74:	d187      	bne.n	408a86 <follow_path+0x1b6>
  408b76:	f045 0503 	orr.w	r5, r5, #3
  408b7a:	205f      	movs	r0, #95	; 0x5f
  408b7c:	f8da 3018 	ldr.w	r3, [sl, #24]
  408b80:	9901      	ldr	r1, [sp, #4]
  408b82:	460a      	mov	r2, r1
  408b84:	5458      	strb	r0, [r3, r1]
  408b86:	4633      	mov	r3, r6
  408b88:	3201      	adds	r2, #1
  408b8a:	9201      	str	r2, [sp, #4]
  408b8c:	e76a      	b.n	408a64 <follow_path+0x194>
  408b8e:	2b00      	cmp	r3, #0
  408b90:	d1f1      	bne.n	408b76 <follow_path+0x2a6>
  408b92:	e783      	b.n	408a9c <follow_path+0x1cc>
  408b94:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
  408b98:	b29b      	uxth	r3, r3
  408b9a:	2b19      	cmp	r3, #25
  408b9c:	d8ee      	bhi.n	408b7c <follow_path+0x2ac>
  408b9e:	f047 0701 	orr.w	r7, r7, #1
  408ba2:	3820      	subs	r0, #32
  408ba4:	b280      	uxth	r0, r0
  408ba6:	e7e9      	b.n	408b7c <follow_path+0x2ac>
  408ba8:	f045 0502 	orr.w	r5, r5, #2
  408bac:	e79a      	b.n	408ae4 <follow_path+0x214>
  408bae:	2306      	movs	r3, #6
  408bb0:	e723      	b.n	4089fa <follow_path+0x12a>
  408bb2:	2b04      	cmp	r3, #4
  408bb4:	f47f af21 	bne.w	4089fa <follow_path+0x12a>
  408bb8:	f012 0f20 	tst.w	r2, #32
  408bbc:	d009      	beq.n	408bd2 <follow_path+0x302>
  408bbe:	2300      	movs	r3, #0
  408bc0:	f8ca 3008 	str.w	r3, [sl, #8]
  408bc4:	f8ca 3014 	str.w	r3, [sl, #20]
  408bc8:	f012 0f04 	tst.w	r2, #4
  408bcc:	f43f aea4 	beq.w	408918 <follow_path+0x48>
  408bd0:	e713      	b.n	4089fa <follow_path+0x12a>
  408bd2:	f002 0204 	and.w	r2, r2, #4
  408bd6:	2a00      	cmp	r2, #0
  408bd8:	bf08      	it	eq
  408bda:	2305      	moveq	r3, #5
  408bdc:	e70d      	b.n	4089fa <follow_path+0x12a>
  408bde:	2305      	movs	r3, #5
  408be0:	e70b      	b.n	4089fa <follow_path+0x12a>
  408be2:	2301      	movs	r3, #1
  408be4:	2400      	movs	r4, #0
  408be6:	eb06 0803 	add.w	r8, r6, r3
  408bea:	2504      	movs	r5, #4
  408bec:	e004      	b.n	408bf8 <follow_path+0x328>
  408bee:	2301      	movs	r3, #1
  408bf0:	2400      	movs	r4, #0
  408bf2:	eb06 0803 	add.w	r8, r6, r3
  408bf6:	2500      	movs	r5, #0
  408bf8:	2c01      	cmp	r4, #1
  408bfa:	f43f aed0 	beq.w	40899e <follow_path+0xce>
  408bfe:	2c02      	cmp	r4, #2
  408c00:	f43f aee5 	beq.w	4089ce <follow_path+0xfe>
  408c04:	2c00      	cmp	r4, #0
  408c06:	d0d2      	beq.n	408bae <follow_path+0x2de>
  408c08:	eb0b 0244 	add.w	r2, fp, r4, lsl #1
  408c0c:	e6ed      	b.n	4089ea <follow_path+0x11a>
  408c0e:	bf00      	nop
  408c10:	00407d9d 	.word	0x00407d9d
  408c14:	00410e99 	.word	0x00410e99
  408c18:	00407671 	.word	0x00407671
  408c1c:	00410ea5 	.word	0x00410ea5
  408c20:	004081e9 	.word	0x004081e9
  408c24:	00410e18 	.word	0x00410e18
  408c28:	00409ca9 	.word	0x00409ca9
  408c2c:	2301      	movs	r3, #1
  408c2e:	2400      	movs	r4, #0
  408c30:	e7df      	b.n	408bf2 <follow_path+0x322>
  408c32:	9b00      	ldr	r3, [sp, #0]
  408c34:	2b0b      	cmp	r3, #11
  408c36:	d085      	beq.n	408b44 <follow_path+0x274>
  408c38:	00bf      	lsls	r7, r7, #2
  408c3a:	b2ff      	uxtb	r7, r7
  408c3c:	4623      	mov	r3, r4
  408c3e:	220b      	movs	r2, #11
  408c40:	9200      	str	r2, [sp, #0]
  408c42:	2208      	movs	r2, #8
  408c44:	9201      	str	r2, [sp, #4]
  408c46:	e70d      	b.n	408a64 <follow_path+0x194>
  408c48:	f045 0502 	orr.w	r5, r5, #2
  408c4c:	e793      	b.n	408b76 <follow_path+0x2a6>
  408c4e:	bf00      	nop

00408c50 <f_mount>:
  408c50:	2807      	cmp	r0, #7
  408c52:	d901      	bls.n	408c58 <f_mount+0x8>
  408c54:	200b      	movs	r0, #11
  408c56:	4770      	bx	lr
  408c58:	4b06      	ldr	r3, [pc, #24]	; (408c74 <f_mount+0x24>)
  408c5a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  408c5e:	b10b      	cbz	r3, 408c64 <f_mount+0x14>
  408c60:	2200      	movs	r2, #0
  408c62:	701a      	strb	r2, [r3, #0]
  408c64:	b109      	cbz	r1, 408c6a <f_mount+0x1a>
  408c66:	2300      	movs	r3, #0
  408c68:	700b      	strb	r3, [r1, #0]
  408c6a:	4b02      	ldr	r3, [pc, #8]	; (408c74 <f_mount+0x24>)
  408c6c:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
  408c70:	2000      	movs	r0, #0
  408c72:	4770      	bx	lr
  408c74:	20000e90 	.word	0x20000e90

00408c78 <f_open>:
  408c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408c7c:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
  408c80:	4605      	mov	r5, r0
  408c82:	9101      	str	r1, [sp, #4]
  408c84:	4616      	mov	r6, r2
  408c86:	2300      	movs	r3, #0
  408c88:	6003      	str	r3, [r0, #0]
  408c8a:	f002 071f 	and.w	r7, r2, #31
  408c8e:	f002 021e 	and.w	r2, r2, #30
  408c92:	a985      	add	r1, sp, #532	; 0x214
  408c94:	a801      	add	r0, sp, #4
  408c96:	4b58      	ldr	r3, [pc, #352]	; (408df8 <f_open+0x180>)
  408c98:	4798      	blx	r3
  408c9a:	ab82      	add	r3, sp, #520	; 0x208
  408c9c:	938b      	str	r3, [sp, #556]	; 0x22c
  408c9e:	ab02      	add	r3, sp, #8
  408ca0:	938c      	str	r3, [sp, #560]	; 0x230
  408ca2:	b140      	cbz	r0, 408cb6 <f_open+0x3e>
  408ca4:	4603      	mov	r3, r0
  408ca6:	9c8a      	ldr	r4, [sp, #552]	; 0x228
  408ca8:	f016 0f1c 	tst.w	r6, #28
  408cac:	d117      	bne.n	408cde <f_open+0x66>
  408cae:	2b00      	cmp	r3, #0
  408cb0:	f040 8092 	bne.w	408dd8 <f_open+0x160>
  408cb4:	e00d      	b.n	408cd2 <f_open+0x5a>
  408cb6:	9901      	ldr	r1, [sp, #4]
  408cb8:	a885      	add	r0, sp, #532	; 0x214
  408cba:	4b50      	ldr	r3, [pc, #320]	; (408dfc <f_open+0x184>)
  408cbc:	4798      	blx	r3
  408cbe:	9c8a      	ldr	r4, [sp, #552]	; 0x228
  408cc0:	4603      	mov	r3, r0
  408cc2:	2800      	cmp	r0, #0
  408cc4:	d1f0      	bne.n	408ca8 <f_open+0x30>
  408cc6:	2c00      	cmp	r4, #0
  408cc8:	f000 808b 	beq.w	408de2 <f_open+0x16a>
  408ccc:	f016 0f1c 	tst.w	r6, #28
  408cd0:	d116      	bne.n	408d00 <f_open+0x88>
  408cd2:	7ae3      	ldrb	r3, [r4, #11]
  408cd4:	f013 0f10 	tst.w	r3, #16
  408cd8:	d04f      	beq.n	408d7a <f_open+0x102>
  408cda:	2304      	movs	r3, #4
  408cdc:	e07c      	b.n	408dd8 <f_open+0x160>
  408cde:	2b04      	cmp	r3, #4
  408ce0:	d005      	beq.n	408cee <f_open+0x76>
  408ce2:	f047 0708 	orr.w	r7, r7, #8
  408ce6:	9c8a      	ldr	r4, [sp, #552]	; 0x228
  408ce8:	2b00      	cmp	r3, #0
  408cea:	d057      	beq.n	408d9c <f_open+0x124>
  408cec:	e074      	b.n	408dd8 <f_open+0x160>
  408cee:	a885      	add	r0, sp, #532	; 0x214
  408cf0:	4b43      	ldr	r3, [pc, #268]	; (408e00 <f_open+0x188>)
  408cf2:	4798      	blx	r3
  408cf4:	f047 0708 	orr.w	r7, r7, #8
  408cf8:	9c8a      	ldr	r4, [sp, #552]	; 0x228
  408cfa:	4603      	mov	r3, r0
  408cfc:	b138      	cbz	r0, 408d0e <f_open+0x96>
  408cfe:	e06b      	b.n	408dd8 <f_open+0x160>
  408d00:	7ae3      	ldrb	r3, [r4, #11]
  408d02:	f013 0f11 	tst.w	r3, #17
  408d06:	d173      	bne.n	408df0 <f_open+0x178>
  408d08:	f016 0f04 	tst.w	r6, #4
  408d0c:	d172      	bne.n	408df4 <f_open+0x17c>
  408d0e:	f017 0f08 	tst.w	r7, #8
  408d12:	d03f      	beq.n	408d94 <f_open+0x11c>
  408d14:	4b3b      	ldr	r3, [pc, #236]	; (408e04 <f_open+0x18c>)
  408d16:	4798      	blx	r3
  408d18:	73a0      	strb	r0, [r4, #14]
  408d1a:	f3c0 2307 	ubfx	r3, r0, #8, #8
  408d1e:	73e3      	strb	r3, [r4, #15]
  408d20:	0c03      	lsrs	r3, r0, #16
  408d22:	7423      	strb	r3, [r4, #16]
  408d24:	0e00      	lsrs	r0, r0, #24
  408d26:	7460      	strb	r0, [r4, #17]
  408d28:	2300      	movs	r3, #0
  408d2a:	72e3      	strb	r3, [r4, #11]
  408d2c:	7723      	strb	r3, [r4, #28]
  408d2e:	7763      	strb	r3, [r4, #29]
  408d30:	77a3      	strb	r3, [r4, #30]
  408d32:	77e3      	strb	r3, [r4, #31]
  408d34:	7d62      	ldrb	r2, [r4, #21]
  408d36:	7d26      	ldrb	r6, [r4, #20]
  408d38:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
  408d3c:	7ee1      	ldrb	r1, [r4, #27]
  408d3e:	7ea2      	ldrb	r2, [r4, #26]
  408d40:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  408d44:	76a3      	strb	r3, [r4, #26]
  408d46:	76e3      	strb	r3, [r4, #27]
  408d48:	7523      	strb	r3, [r4, #20]
  408d4a:	7563      	strb	r3, [r4, #21]
  408d4c:	9885      	ldr	r0, [sp, #532]	; 0x214
  408d4e:	2301      	movs	r3, #1
  408d50:	7103      	strb	r3, [r0, #4]
  408d52:	ea52 4606 	orrs.w	r6, r2, r6, lsl #16
  408d56:	d01b      	beq.n	408d90 <f_open+0x118>
  408d58:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
  408d5c:	4631      	mov	r1, r6
  408d5e:	4b2a      	ldr	r3, [pc, #168]	; (408e08 <f_open+0x190>)
  408d60:	4798      	blx	r3
  408d62:	4603      	mov	r3, r0
  408d64:	2800      	cmp	r0, #0
  408d66:	d137      	bne.n	408dd8 <f_open+0x160>
  408d68:	9885      	ldr	r0, [sp, #532]	; 0x214
  408d6a:	3e01      	subs	r6, #1
  408d6c:	60c6      	str	r6, [r0, #12]
  408d6e:	4641      	mov	r1, r8
  408d70:	4b26      	ldr	r3, [pc, #152]	; (408e0c <f_open+0x194>)
  408d72:	4798      	blx	r3
  408d74:	4603      	mov	r3, r0
  408d76:	b158      	cbz	r0, 408d90 <f_open+0x118>
  408d78:	e02e      	b.n	408dd8 <f_open+0x160>
  408d7a:	f016 0f02 	tst.w	r6, #2
  408d7e:	d004      	beq.n	408d8a <f_open+0x112>
  408d80:	f013 0f01 	tst.w	r3, #1
  408d84:	d001      	beq.n	408d8a <f_open+0x112>
  408d86:	2307      	movs	r3, #7
  408d88:	e026      	b.n	408dd8 <f_open+0x160>
  408d8a:	f016 0f08 	tst.w	r6, #8
  408d8e:	d001      	beq.n	408d94 <f_open+0x11c>
  408d90:	f047 0720 	orr.w	r7, r7, #32
  408d94:	9b85      	ldr	r3, [sp, #532]	; 0x214
  408d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  408d98:	61eb      	str	r3, [r5, #28]
  408d9a:	622c      	str	r4, [r5, #32]
  408d9c:	71af      	strb	r7, [r5, #6]
  408d9e:	7d62      	ldrb	r2, [r4, #21]
  408da0:	7d23      	ldrb	r3, [r4, #20]
  408da2:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  408da6:	7ee1      	ldrb	r1, [r4, #27]
  408da8:	7ea3      	ldrb	r3, [r4, #26]
  408daa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  408dae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  408db2:	612b      	str	r3, [r5, #16]
  408db4:	7fe2      	ldrb	r2, [r4, #31]
  408db6:	7fa3      	ldrb	r3, [r4, #30]
  408db8:	041b      	lsls	r3, r3, #16
  408dba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  408dbe:	7f22      	ldrb	r2, [r4, #28]
  408dc0:	4313      	orrs	r3, r2
  408dc2:	7f62      	ldrb	r2, [r4, #29]
  408dc4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  408dc8:	60eb      	str	r3, [r5, #12]
  408dca:	2300      	movs	r3, #0
  408dcc:	60ab      	str	r3, [r5, #8]
  408dce:	61ab      	str	r3, [r5, #24]
  408dd0:	9a85      	ldr	r2, [sp, #532]	; 0x214
  408dd2:	602a      	str	r2, [r5, #0]
  408dd4:	88d2      	ldrh	r2, [r2, #6]
  408dd6:	80aa      	strh	r2, [r5, #4]
  408dd8:	4618      	mov	r0, r3
  408dda:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
  408dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408de2:	f016 0f1c 	tst.w	r6, #28
  408de6:	d101      	bne.n	408dec <f_open+0x174>
  408de8:	2306      	movs	r3, #6
  408dea:	e77d      	b.n	408ce8 <f_open+0x70>
  408dec:	2306      	movs	r3, #6
  408dee:	e778      	b.n	408ce2 <f_open+0x6a>
  408df0:	2307      	movs	r3, #7
  408df2:	e7f1      	b.n	408dd8 <f_open+0x160>
  408df4:	2308      	movs	r3, #8
  408df6:	e7ef      	b.n	408dd8 <f_open+0x160>
  408df8:	00407779 	.word	0x00407779
  408dfc:	004088d1 	.word	0x004088d1
  408e00:	00408395 	.word	0x00408395
  408e04:	00407605 	.word	0x00407605
  408e08:	00408035 	.word	0x00408035
  408e0c:	00407c25 	.word	0x00407c25

00408e10 <f_read>:
  408e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408e14:	b083      	sub	sp, #12
  408e16:	4604      	mov	r4, r0
  408e18:	4689      	mov	r9, r1
  408e1a:	4615      	mov	r5, r2
  408e1c:	4698      	mov	r8, r3
  408e1e:	2300      	movs	r3, #0
  408e20:	f8c8 3000 	str.w	r3, [r8]
  408e24:	8881      	ldrh	r1, [r0, #4]
  408e26:	6800      	ldr	r0, [r0, #0]
  408e28:	4b58      	ldr	r3, [pc, #352]	; (408f8c <f_read+0x17c>)
  408e2a:	4798      	blx	r3
  408e2c:	9001      	str	r0, [sp, #4]
  408e2e:	2800      	cmp	r0, #0
  408e30:	f040 80a8 	bne.w	408f84 <f_read+0x174>
  408e34:	79a3      	ldrb	r3, [r4, #6]
  408e36:	f013 0f80 	tst.w	r3, #128	; 0x80
  408e3a:	f040 80a1 	bne.w	408f80 <f_read+0x170>
  408e3e:	f013 0f01 	tst.w	r3, #1
  408e42:	d102      	bne.n	408e4a <f_read+0x3a>
  408e44:	2307      	movs	r3, #7
  408e46:	9301      	str	r3, [sp, #4]
  408e48:	e09c      	b.n	408f84 <f_read+0x174>
  408e4a:	68e6      	ldr	r6, [r4, #12]
  408e4c:	68a3      	ldr	r3, [r4, #8]
  408e4e:	1af6      	subs	r6, r6, r3
  408e50:	42ae      	cmp	r6, r5
  408e52:	bf28      	it	cs
  408e54:	462e      	movcs	r6, r5
  408e56:	2e00      	cmp	r6, #0
  408e58:	d14c      	bne.n	408ef4 <f_read+0xe4>
  408e5a:	e093      	b.n	408f84 <f_read+0x174>
  408e5c:	6961      	ldr	r1, [r4, #20]
  408e5e:	4b4c      	ldr	r3, [pc, #304]	; (408f90 <f_read+0x180>)
  408e60:	4798      	blx	r3
  408e62:	e057      	b.n	408f14 <f_read+0x104>
  408e64:	79a3      	ldrb	r3, [r4, #6]
  408e66:	f063 037f 	orn	r3, r3, #127	; 0x7f
  408e6a:	71a3      	strb	r3, [r4, #6]
  408e6c:	2302      	movs	r3, #2
  408e6e:	9301      	str	r3, [sp, #4]
  408e70:	e088      	b.n	408f84 <f_read+0x174>
  408e72:	79a3      	ldrb	r3, [r4, #6]
  408e74:	f063 037f 	orn	r3, r3, #127	; 0x7f
  408e78:	71a3      	strb	r3, [r4, #6]
  408e7a:	2301      	movs	r3, #1
  408e7c:	9301      	str	r3, [sp, #4]
  408e7e:	e081      	b.n	408f84 <f_read+0x174>
  408e80:	79a3      	ldrb	r3, [r4, #6]
  408e82:	f063 037f 	orn	r3, r3, #127	; 0x7f
  408e86:	71a3      	strb	r3, [r4, #6]
  408e88:	2302      	movs	r3, #2
  408e8a:	9301      	str	r3, [sp, #4]
  408e8c:	e07a      	b.n	408f84 <f_read+0x174>
  408e8e:	79a3      	ldrb	r3, [r4, #6]
  408e90:	f063 037f 	orn	r3, r3, #127	; 0x7f
  408e94:	71a3      	strb	r3, [r4, #6]
  408e96:	2301      	movs	r3, #1
  408e98:	9301      	str	r3, [sp, #4]
  408e9a:	e073      	b.n	408f84 <f_read+0x174>
  408e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
  408ea0:	3134      	adds	r1, #52	; 0x34
  408ea2:	eb09 2040 	add.w	r0, r9, r0, lsl #9
  408ea6:	4b3b      	ldr	r3, [pc, #236]	; (408f94 <f_read+0x184>)
  408ea8:	4798      	blx	r3
  408eaa:	e05f      	b.n	408f6c <f_read+0x15c>
  408eac:	61a5      	str	r5, [r4, #24]
  408eae:	68a5      	ldr	r5, [r4, #8]
  408eb0:	f3c5 0508 	ubfx	r5, r5, #0, #9
  408eb4:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
  408eb8:	42b5      	cmp	r5, r6
  408eba:	bf28      	it	cs
  408ebc:	4635      	movcs	r5, r6
  408ebe:	69a1      	ldr	r1, [r4, #24]
  408ec0:	6820      	ldr	r0, [r4, #0]
  408ec2:	4b35      	ldr	r3, [pc, #212]	; (408f98 <f_read+0x188>)
  408ec4:	4798      	blx	r3
  408ec6:	2800      	cmp	r0, #0
  408ec8:	d153      	bne.n	408f72 <f_read+0x162>
  408eca:	68a1      	ldr	r1, [r4, #8]
  408ecc:	f3c1 0108 	ubfx	r1, r1, #0, #9
  408ed0:	3134      	adds	r1, #52	; 0x34
  408ed2:	6823      	ldr	r3, [r4, #0]
  408ed4:	462a      	mov	r2, r5
  408ed6:	4419      	add	r1, r3
  408ed8:	4648      	mov	r0, r9
  408eda:	4b2e      	ldr	r3, [pc, #184]	; (408f94 <f_read+0x184>)
  408edc:	4798      	blx	r3
  408ede:	44a9      	add	r9, r5
  408ee0:	68a3      	ldr	r3, [r4, #8]
  408ee2:	442b      	add	r3, r5
  408ee4:	60a3      	str	r3, [r4, #8]
  408ee6:	f8d8 3000 	ldr.w	r3, [r8]
  408eea:	442b      	add	r3, r5
  408eec:	f8c8 3000 	str.w	r3, [r8]
  408ef0:	1b76      	subs	r6, r6, r5
  408ef2:	d047      	beq.n	408f84 <f_read+0x174>
  408ef4:	68a2      	ldr	r2, [r4, #8]
  408ef6:	f3c2 0308 	ubfx	r3, r2, #0, #9
  408efa:	2b00      	cmp	r3, #0
  408efc:	d1d7      	bne.n	408eae <f_read+0x9e>
  408efe:	6820      	ldr	r0, [r4, #0]
  408f00:	7883      	ldrb	r3, [r0, #2]
  408f02:	3b01      	subs	r3, #1
  408f04:	ea03 2352 	and.w	r3, r3, r2, lsr #9
  408f08:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
  408f0c:	d108      	bne.n	408f20 <f_read+0x110>
  408f0e:	2a00      	cmp	r2, #0
  408f10:	d1a4      	bne.n	408e5c <f_read+0x4c>
  408f12:	6920      	ldr	r0, [r4, #16]
  408f14:	2801      	cmp	r0, #1
  408f16:	d9a5      	bls.n	408e64 <f_read+0x54>
  408f18:	f1b0 3fff 	cmp.w	r0, #4294967295
  408f1c:	d0a9      	beq.n	408e72 <f_read+0x62>
  408f1e:	6160      	str	r0, [r4, #20]
  408f20:	f8d4 a000 	ldr.w	sl, [r4]
  408f24:	6961      	ldr	r1, [r4, #20]
  408f26:	4650      	mov	r0, sl
  408f28:	4b1c      	ldr	r3, [pc, #112]	; (408f9c <f_read+0x18c>)
  408f2a:	4798      	blx	r3
  408f2c:	4605      	mov	r5, r0
  408f2e:	2800      	cmp	r0, #0
  408f30:	d0a6      	beq.n	408e80 <f_read+0x70>
  408f32:	443d      	add	r5, r7
  408f34:	ea5f 2b56 	movs.w	fp, r6, lsr #9
  408f38:	d0b8      	beq.n	408eac <f_read+0x9c>
  408f3a:	f89a 3002 	ldrb.w	r3, [sl, #2]
  408f3e:	eb07 020b 	add.w	r2, r7, fp
  408f42:	429a      	cmp	r2, r3
  408f44:	bf88      	it	hi
  408f46:	eba3 0b07 	subhi.w	fp, r3, r7
  408f4a:	fa5f f38b 	uxtb.w	r3, fp
  408f4e:	462a      	mov	r2, r5
  408f50:	4649      	mov	r1, r9
  408f52:	f89a 0001 	ldrb.w	r0, [sl, #1]
  408f56:	4f12      	ldr	r7, [pc, #72]	; (408fa0 <f_read+0x190>)
  408f58:	47b8      	blx	r7
  408f5a:	2800      	cmp	r0, #0
  408f5c:	d197      	bne.n	408e8e <f_read+0x7e>
  408f5e:	6821      	ldr	r1, [r4, #0]
  408f60:	790b      	ldrb	r3, [r1, #4]
  408f62:	b11b      	cbz	r3, 408f6c <f_read+0x15c>
  408f64:	6b08      	ldr	r0, [r1, #48]	; 0x30
  408f66:	1b40      	subs	r0, r0, r5
  408f68:	4583      	cmp	fp, r0
  408f6a:	d897      	bhi.n	408e9c <f_read+0x8c>
  408f6c:	ea4f 254b 	mov.w	r5, fp, lsl #9
  408f70:	e7b5      	b.n	408ede <f_read+0xce>
  408f72:	79a3      	ldrb	r3, [r4, #6]
  408f74:	f063 037f 	orn	r3, r3, #127	; 0x7f
  408f78:	71a3      	strb	r3, [r4, #6]
  408f7a:	2301      	movs	r3, #1
  408f7c:	9301      	str	r3, [sp, #4]
  408f7e:	e001      	b.n	408f84 <f_read+0x174>
  408f80:	2302      	movs	r3, #2
  408f82:	9301      	str	r3, [sp, #4]
  408f84:	9801      	ldr	r0, [sp, #4]
  408f86:	b003      	add	sp, #12
  408f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408f8c:	004076b5 	.word	0x004076b5
  408f90:	00407cb5 	.word	0x00407cb5
  408f94:	0040765d 	.word	0x0040765d
  408f98:	00407c25 	.word	0x00407c25
  408f9c:	0040767f 	.word	0x0040767f
  408fa0:	004074b5 	.word	0x004074b5

00408fa4 <f_write>:
  408fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408fa8:	b083      	sub	sp, #12
  408faa:	4604      	mov	r4, r0
  408fac:	4689      	mov	r9, r1
  408fae:	4616      	mov	r6, r2
  408fb0:	4698      	mov	r8, r3
  408fb2:	2300      	movs	r3, #0
  408fb4:	f8c8 3000 	str.w	r3, [r8]
  408fb8:	8881      	ldrh	r1, [r0, #4]
  408fba:	6800      	ldr	r0, [r0, #0]
  408fbc:	4b75      	ldr	r3, [pc, #468]	; (409194 <f_write+0x1f0>)
  408fbe:	4798      	blx	r3
  408fc0:	9001      	str	r0, [sp, #4]
  408fc2:	2800      	cmp	r0, #0
  408fc4:	f040 80e2 	bne.w	40918c <f_write+0x1e8>
  408fc8:	79a3      	ldrb	r3, [r4, #6]
  408fca:	f013 0f80 	tst.w	r3, #128	; 0x80
  408fce:	f040 80db 	bne.w	409188 <f_write+0x1e4>
  408fd2:	f013 0f02 	tst.w	r3, #2
  408fd6:	d102      	bne.n	408fde <f_write+0x3a>
  408fd8:	2307      	movs	r3, #7
  408fda:	9301      	str	r3, [sp, #4]
  408fdc:	e0d6      	b.n	40918c <f_write+0x1e8>
  408fde:	68e3      	ldr	r3, [r4, #12]
  408fe0:	42f3      	cmn	r3, r6
  408fe2:	d20e      	bcs.n	409002 <f_write+0x5e>
  408fe4:	2e00      	cmp	r6, #0
  408fe6:	d174      	bne.n	4090d2 <f_write+0x12e>
  408fe8:	e00b      	b.n	409002 <f_write+0x5e>
  408fea:	2100      	movs	r1, #0
  408fec:	4b6a      	ldr	r3, [pc, #424]	; (409198 <f_write+0x1f4>)
  408fee:	4798      	blx	r3
  408ff0:	4603      	mov	r3, r0
  408ff2:	6120      	str	r0, [r4, #16]
  408ff4:	e003      	b.n	408ffe <f_write+0x5a>
  408ff6:	6961      	ldr	r1, [r4, #20]
  408ff8:	4b67      	ldr	r3, [pc, #412]	; (409198 <f_write+0x1f4>)
  408ffa:	4798      	blx	r3
  408ffc:	4603      	mov	r3, r0
  408ffe:	2b00      	cmp	r3, #0
  409000:	d17a      	bne.n	4090f8 <f_write+0x154>
  409002:	68a3      	ldr	r3, [r4, #8]
  409004:	68e2      	ldr	r2, [r4, #12]
  409006:	4293      	cmp	r3, r2
  409008:	bf88      	it	hi
  40900a:	60e3      	strhi	r3, [r4, #12]
  40900c:	79a3      	ldrb	r3, [r4, #6]
  40900e:	f043 0320 	orr.w	r3, r3, #32
  409012:	71a3      	strb	r3, [r4, #6]
  409014:	e0ba      	b.n	40918c <f_write+0x1e8>
  409016:	79a3      	ldrb	r3, [r4, #6]
  409018:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40901c:	71a3      	strb	r3, [r4, #6]
  40901e:	2302      	movs	r3, #2
  409020:	9301      	str	r3, [sp, #4]
  409022:	e0b3      	b.n	40918c <f_write+0x1e8>
  409024:	79a3      	ldrb	r3, [r4, #6]
  409026:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40902a:	71a3      	strb	r3, [r4, #6]
  40902c:	2301      	movs	r3, #1
  40902e:	9301      	str	r3, [sp, #4]
  409030:	e0ac      	b.n	40918c <f_write+0x1e8>
  409032:	2100      	movs	r1, #0
  409034:	4b59      	ldr	r3, [pc, #356]	; (40919c <f_write+0x1f8>)
  409036:	4798      	blx	r3
  409038:	2800      	cmp	r0, #0
  40903a:	d068      	beq.n	40910e <f_write+0x16a>
  40903c:	79a3      	ldrb	r3, [r4, #6]
  40903e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  409042:	71a3      	strb	r3, [r4, #6]
  409044:	2301      	movs	r3, #1
  409046:	9301      	str	r3, [sp, #4]
  409048:	e0a0      	b.n	40918c <f_write+0x1e8>
  40904a:	79a3      	ldrb	r3, [r4, #6]
  40904c:	f063 037f 	orn	r3, r3, #127	; 0x7f
  409050:	71a3      	strb	r3, [r4, #6]
  409052:	2302      	movs	r3, #2
  409054:	9301      	str	r3, [sp, #4]
  409056:	e099      	b.n	40918c <f_write+0x1e8>
  409058:	79a3      	ldrb	r3, [r4, #6]
  40905a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40905e:	71a3      	strb	r3, [r4, #6]
  409060:	2301      	movs	r3, #1
  409062:	9301      	str	r3, [sp, #4]
  409064:	e092      	b.n	40918c <f_write+0x1e8>
  409066:	f44f 7200 	mov.w	r2, #512	; 0x200
  40906a:	eb09 2141 	add.w	r1, r9, r1, lsl #9
  40906e:	3034      	adds	r0, #52	; 0x34
  409070:	4b4b      	ldr	r3, [pc, #300]	; (4091a0 <f_write+0x1fc>)
  409072:	4798      	blx	r3
  409074:	6823      	ldr	r3, [r4, #0]
  409076:	2200      	movs	r2, #0
  409078:	711a      	strb	r2, [r3, #4]
  40907a:	e06c      	b.n	409156 <f_write+0x1b2>
  40907c:	68a2      	ldr	r2, [r4, #8]
  40907e:	68e3      	ldr	r3, [r4, #12]
  409080:	429a      	cmp	r2, r3
  409082:	d26b      	bcs.n	40915c <f_write+0x1b8>
  409084:	61a5      	str	r5, [r4, #24]
  409086:	68a5      	ldr	r5, [r4, #8]
  409088:	f3c5 0508 	ubfx	r5, r5, #0, #9
  40908c:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
  409090:	42b5      	cmp	r5, r6
  409092:	bf28      	it	cs
  409094:	4635      	movcs	r5, r6
  409096:	69a1      	ldr	r1, [r4, #24]
  409098:	6820      	ldr	r0, [r4, #0]
  40909a:	4b40      	ldr	r3, [pc, #256]	; (40919c <f_write+0x1f8>)
  40909c:	4798      	blx	r3
  40909e:	2800      	cmp	r0, #0
  4090a0:	d16b      	bne.n	40917a <f_write+0x1d6>
  4090a2:	68a0      	ldr	r0, [r4, #8]
  4090a4:	f3c0 0008 	ubfx	r0, r0, #0, #9
  4090a8:	3034      	adds	r0, #52	; 0x34
  4090aa:	6823      	ldr	r3, [r4, #0]
  4090ac:	462a      	mov	r2, r5
  4090ae:	4649      	mov	r1, r9
  4090b0:	4418      	add	r0, r3
  4090b2:	4b3b      	ldr	r3, [pc, #236]	; (4091a0 <f_write+0x1fc>)
  4090b4:	4798      	blx	r3
  4090b6:	6823      	ldr	r3, [r4, #0]
  4090b8:	2201      	movs	r2, #1
  4090ba:	711a      	strb	r2, [r3, #4]
  4090bc:	44a9      	add	r9, r5
  4090be:	68a3      	ldr	r3, [r4, #8]
  4090c0:	442b      	add	r3, r5
  4090c2:	60a3      	str	r3, [r4, #8]
  4090c4:	f8d8 3000 	ldr.w	r3, [r8]
  4090c8:	442b      	add	r3, r5
  4090ca:	f8c8 3000 	str.w	r3, [r8]
  4090ce:	1b76      	subs	r6, r6, r5
  4090d0:	d097      	beq.n	409002 <f_write+0x5e>
  4090d2:	68a2      	ldr	r2, [r4, #8]
  4090d4:	f3c2 0308 	ubfx	r3, r2, #0, #9
  4090d8:	2b00      	cmp	r3, #0
  4090da:	d1d4      	bne.n	409086 <f_write+0xe2>
  4090dc:	6820      	ldr	r0, [r4, #0]
  4090de:	7883      	ldrb	r3, [r0, #2]
  4090e0:	3b01      	subs	r3, #1
  4090e2:	ea03 2352 	and.w	r3, r3, r2, lsr #9
  4090e6:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
  4090ea:	d10b      	bne.n	409104 <f_write+0x160>
  4090ec:	2a00      	cmp	r2, #0
  4090ee:	d182      	bne.n	408ff6 <f_write+0x52>
  4090f0:	6923      	ldr	r3, [r4, #16]
  4090f2:	2b00      	cmp	r3, #0
  4090f4:	f43f af79 	beq.w	408fea <f_write+0x46>
  4090f8:	2b01      	cmp	r3, #1
  4090fa:	d08c      	beq.n	409016 <f_write+0x72>
  4090fc:	f1b3 3fff 	cmp.w	r3, #4294967295
  409100:	d090      	beq.n	409024 <f_write+0x80>
  409102:	6163      	str	r3, [r4, #20]
  409104:	6820      	ldr	r0, [r4, #0]
  409106:	6b02      	ldr	r2, [r0, #48]	; 0x30
  409108:	69a3      	ldr	r3, [r4, #24]
  40910a:	429a      	cmp	r2, r3
  40910c:	d091      	beq.n	409032 <f_write+0x8e>
  40910e:	f8d4 a000 	ldr.w	sl, [r4]
  409112:	6961      	ldr	r1, [r4, #20]
  409114:	4650      	mov	r0, sl
  409116:	4b23      	ldr	r3, [pc, #140]	; (4091a4 <f_write+0x200>)
  409118:	4798      	blx	r3
  40911a:	4605      	mov	r5, r0
  40911c:	2800      	cmp	r0, #0
  40911e:	d094      	beq.n	40904a <f_write+0xa6>
  409120:	443d      	add	r5, r7
  409122:	ea5f 2b56 	movs.w	fp, r6, lsr #9
  409126:	d0a9      	beq.n	40907c <f_write+0xd8>
  409128:	f89a 3002 	ldrb.w	r3, [sl, #2]
  40912c:	eb07 020b 	add.w	r2, r7, fp
  409130:	429a      	cmp	r2, r3
  409132:	bf88      	it	hi
  409134:	eba3 0b07 	subhi.w	fp, r3, r7
  409138:	fa5f f38b 	uxtb.w	r3, fp
  40913c:	462a      	mov	r2, r5
  40913e:	4649      	mov	r1, r9
  409140:	f89a 0001 	ldrb.w	r0, [sl, #1]
  409144:	4f18      	ldr	r7, [pc, #96]	; (4091a8 <f_write+0x204>)
  409146:	47b8      	blx	r7
  409148:	2800      	cmp	r0, #0
  40914a:	d185      	bne.n	409058 <f_write+0xb4>
  40914c:	6820      	ldr	r0, [r4, #0]
  40914e:	6b01      	ldr	r1, [r0, #48]	; 0x30
  409150:	1b49      	subs	r1, r1, r5
  409152:	458b      	cmp	fp, r1
  409154:	d887      	bhi.n	409066 <f_write+0xc2>
  409156:	ea4f 254b 	mov.w	r5, fp, lsl #9
  40915a:	e7af      	b.n	4090bc <f_write+0x118>
  40915c:	2100      	movs	r1, #0
  40915e:	4650      	mov	r0, sl
  409160:	4b0e      	ldr	r3, [pc, #56]	; (40919c <f_write+0x1f8>)
  409162:	4798      	blx	r3
  409164:	b910      	cbnz	r0, 40916c <f_write+0x1c8>
  409166:	6823      	ldr	r3, [r4, #0]
  409168:	631d      	str	r5, [r3, #48]	; 0x30
  40916a:	e78b      	b.n	409084 <f_write+0xe0>
  40916c:	79a3      	ldrb	r3, [r4, #6]
  40916e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  409172:	71a3      	strb	r3, [r4, #6]
  409174:	2301      	movs	r3, #1
  409176:	9301      	str	r3, [sp, #4]
  409178:	e008      	b.n	40918c <f_write+0x1e8>
  40917a:	79a3      	ldrb	r3, [r4, #6]
  40917c:	f063 037f 	orn	r3, r3, #127	; 0x7f
  409180:	71a3      	strb	r3, [r4, #6]
  409182:	2301      	movs	r3, #1
  409184:	9301      	str	r3, [sp, #4]
  409186:	e001      	b.n	40918c <f_write+0x1e8>
  409188:	2302      	movs	r3, #2
  40918a:	9301      	str	r3, [sp, #4]
  40918c:	9801      	ldr	r0, [sp, #4]
  40918e:	b003      	add	sp, #12
  409190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409194:	004076b5 	.word	0x004076b5
  409198:	00407f75 	.word	0x00407f75
  40919c:	00407c25 	.word	0x00407c25
  4091a0:	0040765d 	.word	0x0040765d
  4091a4:	0040767f 	.word	0x0040767f
  4091a8:	00407525 	.word	0x00407525

004091ac <f_sync>:
  4091ac:	b538      	push	{r3, r4, r5, lr}
  4091ae:	4604      	mov	r4, r0
  4091b0:	8881      	ldrh	r1, [r0, #4]
  4091b2:	6800      	ldr	r0, [r0, #0]
  4091b4:	4b1f      	ldr	r3, [pc, #124]	; (409234 <f_sync+0x88>)
  4091b6:	4798      	blx	r3
  4091b8:	4603      	mov	r3, r0
  4091ba:	b918      	cbnz	r0, 4091c4 <f_sync+0x18>
  4091bc:	79a2      	ldrb	r2, [r4, #6]
  4091be:	f012 0f20 	tst.w	r2, #32
  4091c2:	d101      	bne.n	4091c8 <f_sync+0x1c>
  4091c4:	4618      	mov	r0, r3
  4091c6:	bd38      	pop	{r3, r4, r5, pc}
  4091c8:	69e1      	ldr	r1, [r4, #28]
  4091ca:	6820      	ldr	r0, [r4, #0]
  4091cc:	4b1a      	ldr	r3, [pc, #104]	; (409238 <f_sync+0x8c>)
  4091ce:	4798      	blx	r3
  4091d0:	4603      	mov	r3, r0
  4091d2:	2800      	cmp	r0, #0
  4091d4:	d1f6      	bne.n	4091c4 <f_sync+0x18>
  4091d6:	6a25      	ldr	r5, [r4, #32]
  4091d8:	7aeb      	ldrb	r3, [r5, #11]
  4091da:	f043 0320 	orr.w	r3, r3, #32
  4091de:	72eb      	strb	r3, [r5, #11]
  4091e0:	68e3      	ldr	r3, [r4, #12]
  4091e2:	772b      	strb	r3, [r5, #28]
  4091e4:	89a3      	ldrh	r3, [r4, #12]
  4091e6:	0a1b      	lsrs	r3, r3, #8
  4091e8:	776b      	strb	r3, [r5, #29]
  4091ea:	89e3      	ldrh	r3, [r4, #14]
  4091ec:	77ab      	strb	r3, [r5, #30]
  4091ee:	7be3      	ldrb	r3, [r4, #15]
  4091f0:	77eb      	strb	r3, [r5, #31]
  4091f2:	6923      	ldr	r3, [r4, #16]
  4091f4:	76ab      	strb	r3, [r5, #26]
  4091f6:	8a23      	ldrh	r3, [r4, #16]
  4091f8:	0a1b      	lsrs	r3, r3, #8
  4091fa:	76eb      	strb	r3, [r5, #27]
  4091fc:	8a63      	ldrh	r3, [r4, #18]
  4091fe:	752b      	strb	r3, [r5, #20]
  409200:	8a63      	ldrh	r3, [r4, #18]
  409202:	0a1b      	lsrs	r3, r3, #8
  409204:	756b      	strb	r3, [r5, #21]
  409206:	4b0d      	ldr	r3, [pc, #52]	; (40923c <f_sync+0x90>)
  409208:	4798      	blx	r3
  40920a:	75a8      	strb	r0, [r5, #22]
  40920c:	f3c0 2307 	ubfx	r3, r0, #8, #8
  409210:	75eb      	strb	r3, [r5, #23]
  409212:	0c03      	lsrs	r3, r0, #16
  409214:	762b      	strb	r3, [r5, #24]
  409216:	0e00      	lsrs	r0, r0, #24
  409218:	7668      	strb	r0, [r5, #25]
  40921a:	79a3      	ldrb	r3, [r4, #6]
  40921c:	f023 0320 	bic.w	r3, r3, #32
  409220:	71a3      	strb	r3, [r4, #6]
  409222:	6823      	ldr	r3, [r4, #0]
  409224:	2201      	movs	r2, #1
  409226:	711a      	strb	r2, [r3, #4]
  409228:	6820      	ldr	r0, [r4, #0]
  40922a:	4b05      	ldr	r3, [pc, #20]	; (409240 <f_sync+0x94>)
  40922c:	4798      	blx	r3
  40922e:	4603      	mov	r3, r0
  409230:	e7c8      	b.n	4091c4 <f_sync+0x18>
  409232:	bf00      	nop
  409234:	004076b5 	.word	0x004076b5
  409238:	00407c25 	.word	0x00407c25
  40923c:	00407605 	.word	0x00407605
  409240:	00408805 	.word	0x00408805

00409244 <f_close>:
  409244:	b510      	push	{r4, lr}
  409246:	4604      	mov	r4, r0
  409248:	4b03      	ldr	r3, [pc, #12]	; (409258 <f_close+0x14>)
  40924a:	4798      	blx	r3
  40924c:	4603      	mov	r3, r0
  40924e:	b908      	cbnz	r0, 409254 <f_close+0x10>
  409250:	2200      	movs	r2, #0
  409252:	6022      	str	r2, [r4, #0]
  409254:	4618      	mov	r0, r3
  409256:	bd10      	pop	{r4, pc}
  409258:	004091ad 	.word	0x004091ad

0040925c <f_lseek>:
  40925c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409260:	4604      	mov	r4, r0
  409262:	460d      	mov	r5, r1
  409264:	8881      	ldrh	r1, [r0, #4]
  409266:	6800      	ldr	r0, [r0, #0]
  409268:	4b4f      	ldr	r3, [pc, #316]	; (4093a8 <f_lseek+0x14c>)
  40926a:	4798      	blx	r3
  40926c:	4607      	mov	r7, r0
  40926e:	2800      	cmp	r0, #0
  409270:	f040 8096 	bne.w	4093a0 <f_lseek+0x144>
  409274:	79a3      	ldrb	r3, [r4, #6]
  409276:	f013 0f80 	tst.w	r3, #128	; 0x80
  40927a:	f040 8090 	bne.w	40939e <f_lseek+0x142>
  40927e:	68e2      	ldr	r2, [r4, #12]
  409280:	42aa      	cmp	r2, r5
  409282:	d204      	bcs.n	40928e <f_lseek+0x32>
  409284:	f003 0302 	and.w	r3, r3, #2
  409288:	2b00      	cmp	r3, #0
  40928a:	bf08      	it	eq
  40928c:	4615      	moveq	r5, r2
  40928e:	68a3      	ldr	r3, [r4, #8]
  409290:	2200      	movs	r2, #0
  409292:	60a2      	str	r2, [r4, #8]
  409294:	2d00      	cmp	r5, #0
  409296:	f000 8083 	beq.w	4093a0 <f_lseek+0x144>
  40929a:	6820      	ldr	r0, [r4, #0]
  40929c:	7886      	ldrb	r6, [r0, #2]
  40929e:	0276      	lsls	r6, r6, #9
  4092a0:	b16b      	cbz	r3, 4092be <f_lseek+0x62>
  4092a2:	3b01      	subs	r3, #1
  4092a4:	1e6a      	subs	r2, r5, #1
  4092a6:	fbb2 f2f6 	udiv	r2, r2, r6
  4092aa:	fbb3 f1f6 	udiv	r1, r3, r6
  4092ae:	428a      	cmp	r2, r1
  4092b0:	d305      	bcc.n	4092be <f_lseek+0x62>
  4092b2:	4272      	negs	r2, r6
  4092b4:	4013      	ands	r3, r2
  4092b6:	60a3      	str	r3, [r4, #8]
  4092b8:	1aed      	subs	r5, r5, r3
  4092ba:	6961      	ldr	r1, [r4, #20]
  4092bc:	e002      	b.n	4092c4 <f_lseek+0x68>
  4092be:	6921      	ldr	r1, [r4, #16]
  4092c0:	b149      	cbz	r1, 4092d6 <f_lseek+0x7a>
  4092c2:	6161      	str	r1, [r4, #20]
  4092c4:	2900      	cmp	r1, #0
  4092c6:	d059      	beq.n	40937c <f_lseek+0x120>
  4092c8:	42b5      	cmp	r5, r6
  4092ca:	d937      	bls.n	40933c <f_lseek+0xe0>
  4092cc:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 4093ac <f_lseek+0x150>
  4092d0:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 4093b4 <f_lseek+0x158>
  4092d4:	e028      	b.n	409328 <f_lseek+0xcc>
  4092d6:	4b35      	ldr	r3, [pc, #212]	; (4093ac <f_lseek+0x150>)
  4092d8:	4798      	blx	r3
  4092da:	4601      	mov	r1, r0
  4092dc:	2801      	cmp	r0, #1
  4092de:	d004      	beq.n	4092ea <f_lseek+0x8e>
  4092e0:	f1b0 3fff 	cmp.w	r0, #4294967295
  4092e4:	d007      	beq.n	4092f6 <f_lseek+0x9a>
  4092e6:	6120      	str	r0, [r4, #16]
  4092e8:	e7eb      	b.n	4092c2 <f_lseek+0x66>
  4092ea:	79a3      	ldrb	r3, [r4, #6]
  4092ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4092f0:	71a3      	strb	r3, [r4, #6]
  4092f2:	2702      	movs	r7, #2
  4092f4:	e054      	b.n	4093a0 <f_lseek+0x144>
  4092f6:	79a3      	ldrb	r3, [r4, #6]
  4092f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4092fc:	71a3      	strb	r3, [r4, #6]
  4092fe:	2701      	movs	r7, #1
  409300:	e04e      	b.n	4093a0 <f_lseek+0x144>
  409302:	6820      	ldr	r0, [r4, #0]
  409304:	47c0      	blx	r8
  409306:	4601      	mov	r1, r0
  409308:	f1b1 3fff 	cmp.w	r1, #4294967295
  40930c:	d026      	beq.n	40935c <f_lseek+0x100>
  40930e:	2901      	cmp	r1, #1
  409310:	d92a      	bls.n	409368 <f_lseek+0x10c>
  409312:	6823      	ldr	r3, [r4, #0]
  409314:	69db      	ldr	r3, [r3, #28]
  409316:	4299      	cmp	r1, r3
  409318:	d226      	bcs.n	409368 <f_lseek+0x10c>
  40931a:	6161      	str	r1, [r4, #20]
  40931c:	68a3      	ldr	r3, [r4, #8]
  40931e:	4433      	add	r3, r6
  409320:	60a3      	str	r3, [r4, #8]
  409322:	1bad      	subs	r5, r5, r6
  409324:	42ae      	cmp	r6, r5
  409326:	d209      	bcs.n	40933c <f_lseek+0xe0>
  409328:	79a3      	ldrb	r3, [r4, #6]
  40932a:	f013 0f02 	tst.w	r3, #2
  40932e:	d0e8      	beq.n	409302 <f_lseek+0xa6>
  409330:	6820      	ldr	r0, [r4, #0]
  409332:	47c8      	blx	r9
  409334:	4601      	mov	r1, r0
  409336:	2800      	cmp	r0, #0
  409338:	d1e6      	bne.n	409308 <f_lseek+0xac>
  40933a:	4635      	mov	r5, r6
  40933c:	68a3      	ldr	r3, [r4, #8]
  40933e:	442b      	add	r3, r5
  409340:	60a3      	str	r3, [r4, #8]
  409342:	f3c5 0308 	ubfx	r3, r5, #0, #9
  409346:	b1c3      	cbz	r3, 40937a <f_lseek+0x11e>
  409348:	6820      	ldr	r0, [r4, #0]
  40934a:	4b19      	ldr	r3, [pc, #100]	; (4093b0 <f_lseek+0x154>)
  40934c:	4798      	blx	r3
  40934e:	b988      	cbnz	r0, 409374 <f_lseek+0x118>
  409350:	79a3      	ldrb	r3, [r4, #6]
  409352:	f063 037f 	orn	r3, r3, #127	; 0x7f
  409356:	71a3      	strb	r3, [r4, #6]
  409358:	2702      	movs	r7, #2
  40935a:	e021      	b.n	4093a0 <f_lseek+0x144>
  40935c:	79a3      	ldrb	r3, [r4, #6]
  40935e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  409362:	71a3      	strb	r3, [r4, #6]
  409364:	2701      	movs	r7, #1
  409366:	e01b      	b.n	4093a0 <f_lseek+0x144>
  409368:	79a3      	ldrb	r3, [r4, #6]
  40936a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40936e:	71a3      	strb	r3, [r4, #6]
  409370:	2702      	movs	r7, #2
  409372:	e015      	b.n	4093a0 <f_lseek+0x144>
  409374:	eb00 2155 	add.w	r1, r0, r5, lsr #9
  409378:	e000      	b.n	40937c <f_lseek+0x120>
  40937a:	2100      	movs	r1, #0
  40937c:	68a3      	ldr	r3, [r4, #8]
  40937e:	f3c3 0208 	ubfx	r2, r3, #0, #9
  409382:	b11a      	cbz	r2, 40938c <f_lseek+0x130>
  409384:	69a2      	ldr	r2, [r4, #24]
  409386:	4291      	cmp	r1, r2
  409388:	bf18      	it	ne
  40938a:	61a1      	strne	r1, [r4, #24]
  40938c:	68e2      	ldr	r2, [r4, #12]
  40938e:	4293      	cmp	r3, r2
  409390:	d906      	bls.n	4093a0 <f_lseek+0x144>
  409392:	60e3      	str	r3, [r4, #12]
  409394:	79a3      	ldrb	r3, [r4, #6]
  409396:	f043 0320 	orr.w	r3, r3, #32
  40939a:	71a3      	strb	r3, [r4, #6]
  40939c:	e000      	b.n	4093a0 <f_lseek+0x144>
  40939e:	2702      	movs	r7, #2
  4093a0:	4638      	mov	r0, r7
  4093a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4093a6:	bf00      	nop
  4093a8:	004076b5 	.word	0x004076b5
  4093ac:	00407f75 	.word	0x00407f75
  4093b0:	0040767f 	.word	0x0040767f
  4093b4:	00407cb5 	.word	0x00407cb5

004093b8 <f_opendir>:
  4093b8:	b510      	push	{r4, lr}
  4093ba:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
  4093be:	4604      	mov	r4, r0
  4093c0:	9101      	str	r1, [sp, #4]
  4093c2:	2200      	movs	r2, #0
  4093c4:	4601      	mov	r1, r0
  4093c6:	a801      	add	r0, sp, #4
  4093c8:	4b18      	ldr	r3, [pc, #96]	; (40942c <f_opendir+0x74>)
  4093ca:	4798      	blx	r3
  4093cc:	4603      	mov	r3, r0
  4093ce:	b118      	cbz	r0, 4093d8 <f_opendir+0x20>
  4093d0:	4618      	mov	r0, r3
  4093d2:	f50d 7d06 	add.w	sp, sp, #536	; 0x218
  4093d6:	bd10      	pop	{r4, pc}
  4093d8:	ab83      	add	r3, sp, #524	; 0x20c
  4093da:	61a3      	str	r3, [r4, #24]
  4093dc:	ab03      	add	r3, sp, #12
  4093de:	61e3      	str	r3, [r4, #28]
  4093e0:	9901      	ldr	r1, [sp, #4]
  4093e2:	4620      	mov	r0, r4
  4093e4:	4b12      	ldr	r3, [pc, #72]	; (409430 <f_opendir+0x78>)
  4093e6:	4798      	blx	r3
  4093e8:	4603      	mov	r3, r0
  4093ea:	b9c0      	cbnz	r0, 40941e <f_opendir+0x66>
  4093ec:	6963      	ldr	r3, [r4, #20]
  4093ee:	b173      	cbz	r3, 40940e <f_opendir+0x56>
  4093f0:	7ada      	ldrb	r2, [r3, #11]
  4093f2:	f012 0f10 	tst.w	r2, #16
  4093f6:	d016      	beq.n	409426 <f_opendir+0x6e>
  4093f8:	7d59      	ldrb	r1, [r3, #21]
  4093fa:	7d1a      	ldrb	r2, [r3, #20]
  4093fc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  409400:	7ed9      	ldrb	r1, [r3, #27]
  409402:	7e9b      	ldrb	r3, [r3, #26]
  409404:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  409408:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40940c:	60a3      	str	r3, [r4, #8]
  40940e:	6823      	ldr	r3, [r4, #0]
  409410:	88db      	ldrh	r3, [r3, #6]
  409412:	80a3      	strh	r3, [r4, #4]
  409414:	2100      	movs	r1, #0
  409416:	4620      	mov	r0, r4
  409418:	4b06      	ldr	r3, [pc, #24]	; (409434 <f_opendir+0x7c>)
  40941a:	4798      	blx	r3
  40941c:	4603      	mov	r3, r0
  40941e:	2b04      	cmp	r3, #4
  409420:	bf08      	it	eq
  409422:	2305      	moveq	r3, #5
  409424:	e7d4      	b.n	4093d0 <f_opendir+0x18>
  409426:	2305      	movs	r3, #5
  409428:	e7d2      	b.n	4093d0 <f_opendir+0x18>
  40942a:	bf00      	nop
  40942c:	00407779 	.word	0x00407779
  409430:	004088d1 	.word	0x004088d1
  409434:	00407d9d 	.word	0x00407d9d

00409438 <f_readdir>:
  409438:	b570      	push	{r4, r5, r6, lr}
  40943a:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
  40943e:	4604      	mov	r4, r0
  409440:	460e      	mov	r6, r1
  409442:	8881      	ldrh	r1, [r0, #4]
  409444:	6800      	ldr	r0, [r0, #0]
  409446:	4b15      	ldr	r3, [pc, #84]	; (40949c <f_readdir+0x64>)
  409448:	4798      	blx	r3
  40944a:	4605      	mov	r5, r0
  40944c:	b958      	cbnz	r0, 409466 <f_readdir+0x2e>
  40944e:	b176      	cbz	r6, 40946e <f_readdir+0x36>
  409450:	ab81      	add	r3, sp, #516	; 0x204
  409452:	61a3      	str	r3, [r4, #24]
  409454:	ab01      	add	r3, sp, #4
  409456:	61e3      	str	r3, [r4, #28]
  409458:	4620      	mov	r0, r4
  40945a:	4b11      	ldr	r3, [pc, #68]	; (4094a0 <f_readdir+0x68>)
  40945c:	4798      	blx	r3
  40945e:	2804      	cmp	r0, #4
  409460:	d00b      	beq.n	40947a <f_readdir+0x42>
  409462:	b160      	cbz	r0, 40947e <f_readdir+0x46>
  409464:	4605      	mov	r5, r0
  409466:	4628      	mov	r0, r5
  409468:	f50d 7d04 	add.w	sp, sp, #528	; 0x210
  40946c:	bd70      	pop	{r4, r5, r6, pc}
  40946e:	2100      	movs	r1, #0
  409470:	4620      	mov	r0, r4
  409472:	4b0c      	ldr	r3, [pc, #48]	; (4094a4 <f_readdir+0x6c>)
  409474:	4798      	blx	r3
  409476:	4605      	mov	r5, r0
  409478:	e7f5      	b.n	409466 <f_readdir+0x2e>
  40947a:	2300      	movs	r3, #0
  40947c:	6123      	str	r3, [r4, #16]
  40947e:	4631      	mov	r1, r6
  409480:	4620      	mov	r0, r4
  409482:	4b09      	ldr	r3, [pc, #36]	; (4094a8 <f_readdir+0x70>)
  409484:	4798      	blx	r3
  409486:	2100      	movs	r1, #0
  409488:	4620      	mov	r0, r4
  40948a:	4b08      	ldr	r3, [pc, #32]	; (4094ac <f_readdir+0x74>)
  40948c:	4798      	blx	r3
  40948e:	2804      	cmp	r0, #4
  409490:	d001      	beq.n	409496 <f_readdir+0x5e>
  409492:	4605      	mov	r5, r0
  409494:	e7e7      	b.n	409466 <f_readdir+0x2e>
  409496:	2300      	movs	r3, #0
  409498:	6123      	str	r3, [r4, #16]
  40949a:	e7e4      	b.n	409466 <f_readdir+0x2e>
  40949c:	004076b5 	.word	0x004076b5
  4094a0:	00408681 	.word	0x00408681
  4094a4:	00407d9d 	.word	0x00407d9d
  4094a8:	00407aed 	.word	0x00407aed
  4094ac:	004080b1 	.word	0x004080b1

004094b0 <f_stat>:
  4094b0:	b530      	push	{r4, r5, lr}
  4094b2:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
  4094b6:	9001      	str	r0, [sp, #4]
  4094b8:	460d      	mov	r5, r1
  4094ba:	2200      	movs	r2, #0
  4094bc:	a985      	add	r1, sp, #532	; 0x214
  4094be:	a801      	add	r0, sp, #4
  4094c0:	4b0d      	ldr	r3, [pc, #52]	; (4094f8 <f_stat+0x48>)
  4094c2:	4798      	blx	r3
  4094c4:	4604      	mov	r4, r0
  4094c6:	b118      	cbz	r0, 4094d0 <f_stat+0x20>
  4094c8:	4620      	mov	r0, r4
  4094ca:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
  4094ce:	bd30      	pop	{r4, r5, pc}
  4094d0:	ab82      	add	r3, sp, #520	; 0x208
  4094d2:	938b      	str	r3, [sp, #556]	; 0x22c
  4094d4:	ab02      	add	r3, sp, #8
  4094d6:	938c      	str	r3, [sp, #560]	; 0x230
  4094d8:	9901      	ldr	r1, [sp, #4]
  4094da:	a885      	add	r0, sp, #532	; 0x214
  4094dc:	4b07      	ldr	r3, [pc, #28]	; (4094fc <f_stat+0x4c>)
  4094de:	4798      	blx	r3
  4094e0:	4604      	mov	r4, r0
  4094e2:	2800      	cmp	r0, #0
  4094e4:	d1f0      	bne.n	4094c8 <f_stat+0x18>
  4094e6:	9b8a      	ldr	r3, [sp, #552]	; 0x228
  4094e8:	b123      	cbz	r3, 4094f4 <f_stat+0x44>
  4094ea:	4629      	mov	r1, r5
  4094ec:	a885      	add	r0, sp, #532	; 0x214
  4094ee:	4b04      	ldr	r3, [pc, #16]	; (409500 <f_stat+0x50>)
  4094f0:	4798      	blx	r3
  4094f2:	e7e9      	b.n	4094c8 <f_stat+0x18>
  4094f4:	2406      	movs	r4, #6
  4094f6:	e7e7      	b.n	4094c8 <f_stat+0x18>
  4094f8:	00407779 	.word	0x00407779
  4094fc:	004088d1 	.word	0x004088d1
  409500:	00407aed 	.word	0x00407aed

00409504 <f_getfree>:
  409504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409508:	b083      	sub	sp, #12
  40950a:	ab02      	add	r3, sp, #8
  40950c:	f843 0d04 	str.w	r0, [r3, #-4]!
  409510:	468a      	mov	sl, r1
  409512:	4615      	mov	r5, r2
  409514:	2200      	movs	r2, #0
  409516:	4629      	mov	r1, r5
  409518:	4618      	mov	r0, r3
  40951a:	4b39      	ldr	r3, [pc, #228]	; (409600 <f_getfree+0xfc>)
  40951c:	4798      	blx	r3
  40951e:	4680      	mov	r8, r0
  409520:	2800      	cmp	r0, #0
  409522:	d15d      	bne.n	4095e0 <f_getfree+0xdc>
  409524:	682b      	ldr	r3, [r5, #0]
  409526:	691a      	ldr	r2, [r3, #16]
  409528:	69dc      	ldr	r4, [r3, #28]
  40952a:	1ea1      	subs	r1, r4, #2
  40952c:	428a      	cmp	r2, r1
  40952e:	d909      	bls.n	409544 <f_getfree+0x40>
  409530:	781f      	ldrb	r7, [r3, #0]
  409532:	2f01      	cmp	r7, #1
  409534:	d009      	beq.n	40954a <f_getfree+0x46>
  409536:	6a59      	ldr	r1, [r3, #36]	; 0x24
  409538:	2200      	movs	r2, #0
  40953a:	4610      	mov	r0, r2
  40953c:	4616      	mov	r6, r2
  40953e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 409608 <f_getfree+0x104>
  409542:	e02f      	b.n	4095a4 <f_getfree+0xa0>
  409544:	f8ca 2000 	str.w	r2, [sl]
  409548:	e04a      	b.n	4095e0 <f_getfree+0xdc>
  40954a:	2402      	movs	r4, #2
  40954c:	2600      	movs	r6, #0
  40954e:	4f2d      	ldr	r7, [pc, #180]	; (409604 <f_getfree+0x100>)
  409550:	e004      	b.n	40955c <f_getfree+0x58>
  409552:	3401      	adds	r4, #1
  409554:	682b      	ldr	r3, [r5, #0]
  409556:	69db      	ldr	r3, [r3, #28]
  409558:	429c      	cmp	r4, r3
  40955a:	d24b      	bcs.n	4095f4 <f_getfree+0xf0>
  40955c:	4621      	mov	r1, r4
  40955e:	6828      	ldr	r0, [r5, #0]
  409560:	47b8      	blx	r7
  409562:	f1b0 3fff 	cmp.w	r0, #4294967295
  409566:	d043      	beq.n	4095f0 <f_getfree+0xec>
  409568:	2801      	cmp	r0, #1
  40956a:	d046      	beq.n	4095fa <f_getfree+0xf6>
  40956c:	2800      	cmp	r0, #0
  40956e:	d1f0      	bne.n	409552 <f_getfree+0x4e>
  409570:	3601      	adds	r6, #1
  409572:	e7ee      	b.n	409552 <f_getfree+0x4e>
  409574:	2f02      	cmp	r7, #2
  409576:	d022      	beq.n	4095be <f_getfree+0xba>
  409578:	f892 e003 	ldrb.w	lr, [r2, #3]
  40957c:	7893      	ldrb	r3, [r2, #2]
  40957e:	041b      	lsls	r3, r3, #16
  409580:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
  409584:	f892 e000 	ldrb.w	lr, [r2]
  409588:	ea43 030e 	orr.w	r3, r3, lr
  40958c:	f892 e001 	ldrb.w	lr, [r2, #1]
  409590:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
  409594:	f033 4370 	bics.w	r3, r3, #4026531840	; 0xf0000000
  409598:	bf08      	it	eq
  40959a:	3601      	addeq	r6, #1
  40959c:	3204      	adds	r2, #4
  40959e:	3804      	subs	r0, #4
  4095a0:	3c01      	subs	r4, #1
  4095a2:	d017      	beq.n	4095d4 <f_getfree+0xd0>
  4095a4:	2800      	cmp	r0, #0
  4095a6:	d1e5      	bne.n	409574 <f_getfree+0x70>
  4095a8:	f101 0b01 	add.w	fp, r1, #1
  4095ac:	6828      	ldr	r0, [r5, #0]
  4095ae:	47c8      	blx	r9
  4095b0:	b978      	cbnz	r0, 4095d2 <f_getfree+0xce>
  4095b2:	682a      	ldr	r2, [r5, #0]
  4095b4:	3234      	adds	r2, #52	; 0x34
  4095b6:	4659      	mov	r1, fp
  4095b8:	f44f 7000 	mov.w	r0, #512	; 0x200
  4095bc:	e7da      	b.n	409574 <f_getfree+0x70>
  4095be:	f892 e001 	ldrb.w	lr, [r2, #1]
  4095c2:	7813      	ldrb	r3, [r2, #0]
  4095c4:	ea53 230e 	orrs.w	r3, r3, lr, lsl #8
  4095c8:	bf08      	it	eq
  4095ca:	3601      	addeq	r6, #1
  4095cc:	3202      	adds	r2, #2
  4095ce:	3802      	subs	r0, #2
  4095d0:	e7e6      	b.n	4095a0 <f_getfree+0x9c>
  4095d2:	4680      	mov	r8, r0
  4095d4:	682b      	ldr	r3, [r5, #0]
  4095d6:	611e      	str	r6, [r3, #16]
  4095d8:	2f03      	cmp	r7, #3
  4095da:	d005      	beq.n	4095e8 <f_getfree+0xe4>
  4095dc:	f8ca 6000 	str.w	r6, [sl]
  4095e0:	4640      	mov	r0, r8
  4095e2:	b003      	add	sp, #12
  4095e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4095e8:	682b      	ldr	r3, [r5, #0]
  4095ea:	2201      	movs	r2, #1
  4095ec:	715a      	strb	r2, [r3, #5]
  4095ee:	e7f5      	b.n	4095dc <f_getfree+0xd8>
  4095f0:	f04f 0801 	mov.w	r8, #1
  4095f4:	682b      	ldr	r3, [r5, #0]
  4095f6:	611e      	str	r6, [r3, #16]
  4095f8:	e7f0      	b.n	4095dc <f_getfree+0xd8>
  4095fa:	f04f 0802 	mov.w	r8, #2
  4095fe:	e7f9      	b.n	4095f4 <f_getfree+0xf0>
  409600:	00407779 	.word	0x00407779
  409604:	00407cb5 	.word	0x00407cb5
  409608:	00407c25 	.word	0x00407c25

0040960c <f_unlink>:
  40960c:	b510      	push	{r4, lr}
  40960e:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
  409612:	9001      	str	r0, [sp, #4]
  409614:	2201      	movs	r2, #1
  409616:	a98f      	add	r1, sp, #572	; 0x23c
  409618:	a801      	add	r0, sp, #4
  40961a:	4b34      	ldr	r3, [pc, #208]	; (4096ec <f_unlink+0xe0>)
  40961c:	4798      	blx	r3
  40961e:	4603      	mov	r3, r0
  409620:	b118      	cbz	r0, 40962a <f_unlink+0x1e>
  409622:	4618      	mov	r0, r3
  409624:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
  409628:	bd10      	pop	{r4, pc}
  40962a:	ab83      	add	r3, sp, #524	; 0x20c
  40962c:	9395      	str	r3, [sp, #596]	; 0x254
  40962e:	ab03      	add	r3, sp, #12
  409630:	9396      	str	r3, [sp, #600]	; 0x258
  409632:	9901      	ldr	r1, [sp, #4]
  409634:	a88f      	add	r0, sp, #572	; 0x23c
  409636:	4b2e      	ldr	r3, [pc, #184]	; (4096f0 <f_unlink+0xe4>)
  409638:	4798      	blx	r3
  40963a:	4603      	mov	r3, r0
  40963c:	2800      	cmp	r0, #0
  40963e:	d1f0      	bne.n	409622 <f_unlink+0x16>
  409640:	9b95      	ldr	r3, [sp, #596]	; 0x254
  409642:	7adb      	ldrb	r3, [r3, #11]
  409644:	f013 0f20 	tst.w	r3, #32
  409648:	d143      	bne.n	4096d2 <f_unlink+0xc6>
  40964a:	9b94      	ldr	r3, [sp, #592]	; 0x250
  40964c:	2b00      	cmp	r3, #0
  40964e:	d046      	beq.n	4096de <f_unlink+0xd2>
  409650:	7ada      	ldrb	r2, [r3, #11]
  409652:	f012 0f01 	tst.w	r2, #1
  409656:	d140      	bne.n	4096da <f_unlink+0xce>
  409658:	7d5a      	ldrb	r2, [r3, #21]
  40965a:	7d1c      	ldrb	r4, [r3, #20]
  40965c:	ea44 2202 	orr.w	r2, r4, r2, lsl #8
  409660:	7ed9      	ldrb	r1, [r3, #27]
  409662:	7e9c      	ldrb	r4, [r3, #26]
  409664:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
  409668:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
  40966c:	7adb      	ldrb	r3, [r3, #11]
  40966e:	f013 0f10 	tst.w	r3, #16
  409672:	d10b      	bne.n	40968c <f_unlink+0x80>
  409674:	a88f      	add	r0, sp, #572	; 0x23c
  409676:	4b1f      	ldr	r3, [pc, #124]	; (4096f4 <f_unlink+0xe8>)
  409678:	4798      	blx	r3
  40967a:	4603      	mov	r3, r0
  40967c:	2800      	cmp	r0, #0
  40967e:	d1d0      	bne.n	409622 <f_unlink+0x16>
  409680:	b9fc      	cbnz	r4, 4096c2 <f_unlink+0xb6>
  409682:	988f      	ldr	r0, [sp, #572]	; 0x23c
  409684:	4b1c      	ldr	r3, [pc, #112]	; (4096f8 <f_unlink+0xec>)
  409686:	4798      	blx	r3
  409688:	4603      	mov	r3, r0
  40968a:	e7ca      	b.n	409622 <f_unlink+0x16>
  40968c:	2c01      	cmp	r4, #1
  40968e:	d922      	bls.n	4096d6 <f_unlink+0xca>
  409690:	2224      	movs	r2, #36	; 0x24
  409692:	a98f      	add	r1, sp, #572	; 0x23c
  409694:	a886      	add	r0, sp, #536	; 0x218
  409696:	4b19      	ldr	r3, [pc, #100]	; (4096fc <f_unlink+0xf0>)
  409698:	4798      	blx	r3
  40969a:	9488      	str	r4, [sp, #544]	; 0x220
  40969c:	2102      	movs	r1, #2
  40969e:	a886      	add	r0, sp, #536	; 0x218
  4096a0:	4b17      	ldr	r3, [pc, #92]	; (409700 <f_unlink+0xf4>)
  4096a2:	4798      	blx	r3
  4096a4:	4603      	mov	r3, r0
  4096a6:	2800      	cmp	r0, #0
  4096a8:	d1bb      	bne.n	409622 <f_unlink+0x16>
  4096aa:	a886      	add	r0, sp, #536	; 0x218
  4096ac:	4b15      	ldr	r3, [pc, #84]	; (409704 <f_unlink+0xf8>)
  4096ae:	4798      	blx	r3
  4096b0:	4603      	mov	r3, r0
  4096b2:	b1b0      	cbz	r0, 4096e2 <f_unlink+0xd6>
  4096b4:	9a86      	ldr	r2, [sp, #536]	; 0x218
  4096b6:	6992      	ldr	r2, [r2, #24]
  4096b8:	4294      	cmp	r4, r2
  4096ba:	d014      	beq.n	4096e6 <f_unlink+0xda>
  4096bc:	2804      	cmp	r0, #4
  4096be:	d0d9      	beq.n	409674 <f_unlink+0x68>
  4096c0:	e7af      	b.n	409622 <f_unlink+0x16>
  4096c2:	4621      	mov	r1, r4
  4096c4:	988f      	ldr	r0, [sp, #572]	; 0x23c
  4096c6:	4b10      	ldr	r3, [pc, #64]	; (409708 <f_unlink+0xfc>)
  4096c8:	4798      	blx	r3
  4096ca:	4603      	mov	r3, r0
  4096cc:	2800      	cmp	r0, #0
  4096ce:	d1a8      	bne.n	409622 <f_unlink+0x16>
  4096d0:	e7d7      	b.n	409682 <f_unlink+0x76>
  4096d2:	2306      	movs	r3, #6
  4096d4:	e7a5      	b.n	409622 <f_unlink+0x16>
  4096d6:	2302      	movs	r3, #2
  4096d8:	e7a3      	b.n	409622 <f_unlink+0x16>
  4096da:	2307      	movs	r3, #7
  4096dc:	e7a1      	b.n	409622 <f_unlink+0x16>
  4096de:	2306      	movs	r3, #6
  4096e0:	e79f      	b.n	409622 <f_unlink+0x16>
  4096e2:	2307      	movs	r3, #7
  4096e4:	e79d      	b.n	409622 <f_unlink+0x16>
  4096e6:	2307      	movs	r3, #7
  4096e8:	e79b      	b.n	409622 <f_unlink+0x16>
  4096ea:	bf00      	nop
  4096ec:	00407779 	.word	0x00407779
  4096f0:	004088d1 	.word	0x004088d1
  4096f4:	004087a1 	.word	0x004087a1
  4096f8:	00408805 	.word	0x00408805
  4096fc:	0040765d 	.word	0x0040765d
  409700:	00407d9d 	.word	0x00407d9d
  409704:	00408681 	.word	0x00408681
  409708:	00408035 	.word	0x00408035

0040970c <f_mkdir>:
  40970c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409710:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
  409714:	9001      	str	r0, [sp, #4]
  409716:	4b6e      	ldr	r3, [pc, #440]	; (4098d0 <f_mkdir+0x1c4>)
  409718:	4798      	blx	r3
  40971a:	4605      	mov	r5, r0
  40971c:	2201      	movs	r2, #1
  40971e:	a985      	add	r1, sp, #532	; 0x214
  409720:	a801      	add	r0, sp, #4
  409722:	4b6c      	ldr	r3, [pc, #432]	; (4098d4 <f_mkdir+0x1c8>)
  409724:	4798      	blx	r3
  409726:	4604      	mov	r4, r0
  409728:	b120      	cbz	r0, 409734 <f_mkdir+0x28>
  40972a:	4620      	mov	r0, r4
  40972c:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
  409730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409734:	ab82      	add	r3, sp, #520	; 0x208
  409736:	938b      	str	r3, [sp, #556]	; 0x22c
  409738:	ab02      	add	r3, sp, #8
  40973a:	938c      	str	r3, [sp, #560]	; 0x230
  40973c:	9901      	ldr	r1, [sp, #4]
  40973e:	a885      	add	r0, sp, #532	; 0x214
  409740:	4b65      	ldr	r3, [pc, #404]	; (4098d8 <f_mkdir+0x1cc>)
  409742:	4798      	blx	r3
  409744:	4603      	mov	r3, r0
  409746:	2800      	cmp	r0, #0
  409748:	f000 80bc 	beq.w	4098c4 <f_mkdir+0x1b8>
  40974c:	2804      	cmp	r0, #4
  40974e:	f040 80bc 	bne.w	4098ca <f_mkdir+0x1be>
  409752:	9b8b      	ldr	r3, [sp, #556]	; 0x22c
  409754:	7adb      	ldrb	r3, [r3, #11]
  409756:	f013 0f20 	tst.w	r3, #32
  40975a:	f040 80b5 	bne.w	4098c8 <f_mkdir+0x1bc>
  40975e:	2100      	movs	r1, #0
  409760:	9885      	ldr	r0, [sp, #532]	; 0x214
  409762:	4b5e      	ldr	r3, [pc, #376]	; (4098dc <f_mkdir+0x1d0>)
  409764:	4798      	blx	r3
  409766:	4607      	mov	r7, r0
  409768:	b150      	cbz	r0, 409780 <f_mkdir+0x74>
  40976a:	2801      	cmp	r0, #1
  40976c:	d101      	bne.n	409772 <f_mkdir+0x66>
  40976e:	2402      	movs	r4, #2
  409770:	e007      	b.n	409782 <f_mkdir+0x76>
  409772:	f1b0 3fff 	cmp.w	r0, #4294967295
  409776:	bf08      	it	eq
  409778:	2401      	moveq	r4, #1
  40977a:	f000 8081 	beq.w	409880 <f_mkdir+0x174>
  40977e:	e000      	b.n	409782 <f_mkdir+0x76>
  409780:	2407      	movs	r4, #7
  409782:	b124      	cbz	r4, 40978e <f_mkdir+0x82>
  409784:	4639      	mov	r1, r7
  409786:	9885      	ldr	r0, [sp, #532]	; 0x214
  409788:	4b55      	ldr	r3, [pc, #340]	; (4098e0 <f_mkdir+0x1d4>)
  40978a:	4798      	blx	r3
  40978c:	e7cd      	b.n	40972a <f_mkdir+0x1e>
  40978e:	2100      	movs	r1, #0
  409790:	9885      	ldr	r0, [sp, #532]	; 0x214
  409792:	4b54      	ldr	r3, [pc, #336]	; (4098e4 <f_mkdir+0x1d8>)
  409794:	4798      	blx	r3
  409796:	4604      	mov	r4, r0
  409798:	2800      	cmp	r0, #0
  40979a:	d1f3      	bne.n	409784 <f_mkdir+0x78>
  40979c:	9e85      	ldr	r6, [sp, #532]	; 0x214
  40979e:	4639      	mov	r1, r7
  4097a0:	4630      	mov	r0, r6
  4097a2:	4b51      	ldr	r3, [pc, #324]	; (4098e8 <f_mkdir+0x1dc>)
  4097a4:	4798      	blx	r3
  4097a6:	4604      	mov	r4, r0
  4097a8:	f106 0334 	add.w	r3, r6, #52	; 0x34
  4097ac:	9300      	str	r3, [sp, #0]
  4097ae:	f44f 7200 	mov.w	r2, #512	; 0x200
  4097b2:	2100      	movs	r1, #0
  4097b4:	4699      	mov	r9, r3
  4097b6:	4618      	mov	r0, r3
  4097b8:	f8df 813c 	ldr.w	r8, [pc, #316]	; 4098f8 <f_mkdir+0x1ec>
  4097bc:	47c0      	blx	r8
  4097be:	220b      	movs	r2, #11
  4097c0:	2120      	movs	r1, #32
  4097c2:	4648      	mov	r0, r9
  4097c4:	47c0      	blx	r8
  4097c6:	f04f 082e 	mov.w	r8, #46	; 0x2e
  4097ca:	f886 8034 	strb.w	r8, [r6, #52]	; 0x34
  4097ce:	2310      	movs	r3, #16
  4097d0:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f
  4097d4:	f886 504a 	strb.w	r5, [r6, #74]	; 0x4a
  4097d8:	f3c5 2307 	ubfx	r3, r5, #8, #8
  4097dc:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
  4097e0:	0c2b      	lsrs	r3, r5, #16
  4097e2:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
  4097e6:	0e2b      	lsrs	r3, r5, #24
  4097e8:	f886 304d 	strb.w	r3, [r6, #77]	; 0x4d
  4097ec:	f886 704e 	strb.w	r7, [r6, #78]	; 0x4e
  4097f0:	f3c7 2307 	ubfx	r3, r7, #8, #8
  4097f4:	f886 304f 	strb.w	r3, [r6, #79]	; 0x4f
  4097f8:	0c3b      	lsrs	r3, r7, #16
  4097fa:	f886 3048 	strb.w	r3, [r6, #72]	; 0x48
  4097fe:	0a1b      	lsrs	r3, r3, #8
  409800:	f886 3049 	strb.w	r3, [r6, #73]	; 0x49
  409804:	2220      	movs	r2, #32
  409806:	4649      	mov	r1, r9
  409808:	f106 0054 	add.w	r0, r6, #84	; 0x54
  40980c:	4b37      	ldr	r3, [pc, #220]	; (4098ec <f_mkdir+0x1e0>)
  40980e:	4798      	blx	r3
  409810:	f886 8055 	strb.w	r8, [r6, #85]	; 0x55
  409814:	9b87      	ldr	r3, [sp, #540]	; 0x21c
  409816:	9a85      	ldr	r2, [sp, #532]	; 0x214
  409818:	7811      	ldrb	r1, [r2, #0]
  40981a:	2903      	cmp	r1, #3
  40981c:	d04d      	beq.n	4098ba <f_mkdir+0x1ae>
  40981e:	f886 306e 	strb.w	r3, [r6, #110]	; 0x6e
  409822:	f3c3 2107 	ubfx	r1, r3, #8, #8
  409826:	f886 106f 	strb.w	r1, [r6, #111]	; 0x6f
  40982a:	0c1b      	lsrs	r3, r3, #16
  40982c:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
  409830:	0a1b      	lsrs	r3, r3, #8
  409832:	f886 3069 	strb.w	r3, [r6, #105]	; 0x69
  409836:	7893      	ldrb	r3, [r2, #2]
  409838:	b1f3      	cbz	r3, 409878 <f_mkdir+0x16c>
  40983a:	f103 38ff 	add.w	r8, r3, #4294967295
  40983e:	fa5f f888 	uxtb.w	r8, r8
  409842:	f108 0801 	add.w	r8, r8, #1
  409846:	44a0      	add	r8, r4
  409848:	f04f 0a01 	mov.w	sl, #1
  40984c:	f8df 9094 	ldr.w	r9, [pc, #148]	; 4098e4 <f_mkdir+0x1d8>
  409850:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 4098f8 <f_mkdir+0x1ec>
  409854:	9885      	ldr	r0, [sp, #532]	; 0x214
  409856:	1c66      	adds	r6, r4, #1
  409858:	6304      	str	r4, [r0, #48]	; 0x30
  40985a:	f880 a004 	strb.w	sl, [r0, #4]
  40985e:	2100      	movs	r1, #0
  409860:	47c8      	blx	r9
  409862:	4604      	mov	r4, r0
  409864:	2800      	cmp	r0, #0
  409866:	d18d      	bne.n	409784 <f_mkdir+0x78>
  409868:	f44f 7200 	mov.w	r2, #512	; 0x200
  40986c:	2100      	movs	r1, #0
  40986e:	9800      	ldr	r0, [sp, #0]
  409870:	47d8      	blx	fp
  409872:	4634      	mov	r4, r6
  409874:	4546      	cmp	r6, r8
  409876:	d1ed      	bne.n	409854 <f_mkdir+0x148>
  409878:	a885      	add	r0, sp, #532	; 0x214
  40987a:	4b1d      	ldr	r3, [pc, #116]	; (4098f0 <f_mkdir+0x1e4>)
  40987c:	4798      	blx	r3
  40987e:	4604      	mov	r4, r0
  409880:	2c00      	cmp	r4, #0
  409882:	f47f af7f 	bne.w	409784 <f_mkdir+0x78>
  409886:	9b8a      	ldr	r3, [sp, #552]	; 0x228
  409888:	2210      	movs	r2, #16
  40988a:	72da      	strb	r2, [r3, #11]
  40988c:	759d      	strb	r5, [r3, #22]
  40988e:	f3c5 2207 	ubfx	r2, r5, #8, #8
  409892:	75da      	strb	r2, [r3, #23]
  409894:	0c2a      	lsrs	r2, r5, #16
  409896:	761a      	strb	r2, [r3, #24]
  409898:	0e2d      	lsrs	r5, r5, #24
  40989a:	765d      	strb	r5, [r3, #25]
  40989c:	769f      	strb	r7, [r3, #26]
  40989e:	f3c7 2207 	ubfx	r2, r7, #8, #8
  4098a2:	76da      	strb	r2, [r3, #27]
  4098a4:	0c3f      	lsrs	r7, r7, #16
  4098a6:	751f      	strb	r7, [r3, #20]
  4098a8:	0a3f      	lsrs	r7, r7, #8
  4098aa:	755f      	strb	r7, [r3, #21]
  4098ac:	9885      	ldr	r0, [sp, #532]	; 0x214
  4098ae:	2301      	movs	r3, #1
  4098b0:	7103      	strb	r3, [r0, #4]
  4098b2:	4b10      	ldr	r3, [pc, #64]	; (4098f4 <f_mkdir+0x1e8>)
  4098b4:	4798      	blx	r3
  4098b6:	4604      	mov	r4, r0
  4098b8:	e737      	b.n	40972a <f_mkdir+0x1e>
  4098ba:	6a91      	ldr	r1, [r2, #40]	; 0x28
  4098bc:	428b      	cmp	r3, r1
  4098be:	bf08      	it	eq
  4098c0:	2300      	moveq	r3, #0
  4098c2:	e7ac      	b.n	40981e <f_mkdir+0x112>
  4098c4:	2408      	movs	r4, #8
  4098c6:	e730      	b.n	40972a <f_mkdir+0x1e>
  4098c8:	2306      	movs	r3, #6
  4098ca:	461c      	mov	r4, r3
  4098cc:	e72d      	b.n	40972a <f_mkdir+0x1e>
  4098ce:	bf00      	nop
  4098d0:	00407605 	.word	0x00407605
  4098d4:	00407779 	.word	0x00407779
  4098d8:	004088d1 	.word	0x004088d1
  4098dc:	00407f75 	.word	0x00407f75
  4098e0:	00408035 	.word	0x00408035
  4098e4:	00407c25 	.word	0x00407c25
  4098e8:	0040767f 	.word	0x0040767f
  4098ec:	0040765d 	.word	0x0040765d
  4098f0:	00408395 	.word	0x00408395
  4098f4:	00408805 	.word	0x00408805
  4098f8:	00407671 	.word	0x00407671

004098fc <f_gets>:
  4098fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  409900:	b083      	sub	sp, #12
  409902:	4681      	mov	r9, r0
  409904:	4690      	mov	r8, r2
  409906:	4605      	mov	r5, r0
  409908:	2400      	movs	r4, #0
  40990a:	1e4e      	subs	r6, r1, #1
  40990c:	4f0d      	ldr	r7, [pc, #52]	; (409944 <f_gets+0x48>)
  40990e:	42b4      	cmp	r4, r6
  409910:	da0e      	bge.n	409930 <f_gets+0x34>
  409912:	466b      	mov	r3, sp
  409914:	2201      	movs	r2, #1
  409916:	a901      	add	r1, sp, #4
  409918:	4640      	mov	r0, r8
  40991a:	47b8      	blx	r7
  40991c:	9b00      	ldr	r3, [sp, #0]
  40991e:	2b01      	cmp	r3, #1
  409920:	d106      	bne.n	409930 <f_gets+0x34>
  409922:	f89d 3004 	ldrb.w	r3, [sp, #4]
  409926:	f805 3b01 	strb.w	r3, [r5], #1
  40992a:	3401      	adds	r4, #1
  40992c:	2b0a      	cmp	r3, #10
  40992e:	d1ee      	bne.n	40990e <f_gets+0x12>
  409930:	2300      	movs	r3, #0
  409932:	702b      	strb	r3, [r5, #0]
  409934:	429c      	cmp	r4, r3
  409936:	bf14      	ite	ne
  409938:	4648      	movne	r0, r9
  40993a:	4618      	moveq	r0, r3
  40993c:	b003      	add	sp, #12
  40993e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  409942:	bf00      	nop
  409944:	00408e11 	.word	0x00408e11

00409948 <f_putc>:
  409948:	b510      	push	{r4, lr}
  40994a:	b082      	sub	sp, #8
  40994c:	460c      	mov	r4, r1
  40994e:	f88d 0000 	strb.w	r0, [sp]
  409952:	ab01      	add	r3, sp, #4
  409954:	2201      	movs	r2, #1
  409956:	4669      	mov	r1, sp
  409958:	4620      	mov	r0, r4
  40995a:	4c05      	ldr	r4, [pc, #20]	; (409970 <f_putc+0x28>)
  40995c:	47a0      	blx	r4
  40995e:	9b01      	ldr	r3, [sp, #4]
  409960:	2b01      	cmp	r3, #1
  409962:	bf0c      	ite	eq
  409964:	2001      	moveq	r0, #1
  409966:	f04f 30ff 	movne.w	r0, #4294967295
  40996a:	b002      	add	sp, #8
  40996c:	bd10      	pop	{r4, pc}
  40996e:	bf00      	nop
  409970:	00408fa5 	.word	0x00408fa5

00409974 <f_puts>:
  409974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409976:	7803      	ldrb	r3, [r0, #0]
  409978:	b17b      	cbz	r3, 40999a <f_puts+0x26>
  40997a:	460e      	mov	r6, r1
  40997c:	4605      	mov	r5, r0
  40997e:	1c44      	adds	r4, r0, #1
  409980:	4f07      	ldr	r7, [pc, #28]	; (4099a0 <f_puts+0x2c>)
  409982:	4631      	mov	r1, r6
  409984:	4618      	mov	r0, r3
  409986:	47b8      	blx	r7
  409988:	f1b0 3fff 	cmp.w	r0, #4294967295
  40998c:	d006      	beq.n	40999c <f_puts+0x28>
  40998e:	1b60      	subs	r0, r4, r5
  409990:	f814 3b01 	ldrb.w	r3, [r4], #1
  409994:	2b00      	cmp	r3, #0
  409996:	d1f4      	bne.n	409982 <f_puts+0xe>
  409998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40999a:	2000      	movs	r0, #0
  40999c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40999e:	bf00      	nop
  4099a0:	00409949 	.word	0x00409949

004099a4 <f_printf>:
  4099a4:	b40e      	push	{r1, r2, r3}
  4099a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4099aa:	b088      	sub	sp, #32
  4099ac:	9001      	str	r0, [sp, #4]
  4099ae:	ab11      	add	r3, sp, #68	; 0x44
  4099b0:	f853 7b04 	ldr.w	r7, [r3], #4
  4099b4:	9307      	str	r3, [sp, #28]
  4099b6:	7838      	ldrb	r0, [r7, #0]
  4099b8:	2800      	cmp	r0, #0
  4099ba:	f000 814e 	beq.w	409c5a <f_printf+0x2b6>
  4099be:	1c7c      	adds	r4, r7, #1
  4099c0:	2500      	movs	r5, #0
  4099c2:	462e      	mov	r6, r5
  4099c4:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 409ca4 <f_printf+0x300>
  4099c8:	e11c      	b.n	409c04 <f_printf+0x260>
  4099ca:	7878      	ldrb	r0, [r7, #1]
  4099cc:	2830      	cmp	r0, #48	; 0x30
  4099ce:	d043      	beq.n	409a58 <f_printf+0xb4>
  4099d0:	282d      	cmp	r0, #45	; 0x2d
  4099d2:	d046      	beq.n	409a62 <f_printf+0xbe>
  4099d4:	3702      	adds	r7, #2
  4099d6:	f04f 0e00 	mov.w	lr, #0
  4099da:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  4099de:	b2db      	uxtb	r3, r3
  4099e0:	2b09      	cmp	r3, #9
  4099e2:	d843      	bhi.n	409a6c <f_printf+0xc8>
  4099e4:	2400      	movs	r4, #0
  4099e6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4099ea:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4099ee:	3c30      	subs	r4, #48	; 0x30
  4099f0:	f817 0b01 	ldrb.w	r0, [r7], #1
  4099f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  4099f8:	b2db      	uxtb	r3, r3
  4099fa:	2b09      	cmp	r3, #9
  4099fc:	d9f3      	bls.n	4099e6 <f_printf+0x42>
  4099fe:	f000 03df 	and.w	r3, r0, #223	; 0xdf
  409a02:	2b4c      	cmp	r3, #76	; 0x4c
  409a04:	d034      	beq.n	409a70 <f_printf+0xcc>
  409a06:	2800      	cmp	r0, #0
  409a08:	f000 8110 	beq.w	409c2c <f_printf+0x288>
  409a0c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
  409a10:	b2db      	uxtb	r3, r3
  409a12:	2b19      	cmp	r3, #25
  409a14:	bf9a      	itte	ls
  409a16:	f1a0 0320 	subls.w	r3, r0, #32
  409a1a:	b2db      	uxtbls	r3, r3
  409a1c:	4603      	movhi	r3, r0
  409a1e:	f1a3 0242 	sub.w	r2, r3, #66	; 0x42
  409a22:	2a16      	cmp	r2, #22
  409a24:	d87d      	bhi.n	409b22 <f_printf+0x17e>
  409a26:	e8df f012 	tbh	[pc, r2, lsl #1]
  409a2a:	0120      	.short	0x0120
  409a2c:	00800074 	.word	0x00800074
  409a30:	007c007c 	.word	0x007c007c
  409a34:	007c007c 	.word	0x007c007c
  409a38:	007c007c 	.word	0x007c007c
  409a3c:	007c007c 	.word	0x007c007c
  409a40:	007c007c 	.word	0x007c007c
  409a44:	007c0136 	.word	0x007c0136
  409a48:	007c007c 	.word	0x007c007c
  409a4c:	007c0028 	.word	0x007c0028
  409a50:	007c0080 	.word	0x007c0080
  409a54:	0106007c 	.word	0x0106007c
  409a58:	78b8      	ldrb	r0, [r7, #2]
  409a5a:	3703      	adds	r7, #3
  409a5c:	f04f 0e01 	mov.w	lr, #1
  409a60:	e7bb      	b.n	4099da <f_printf+0x36>
  409a62:	78b8      	ldrb	r0, [r7, #2]
  409a64:	3703      	adds	r7, #3
  409a66:	f04f 0e02 	mov.w	lr, #2
  409a6a:	e7b6      	b.n	4099da <f_printf+0x36>
  409a6c:	2400      	movs	r4, #0
  409a6e:	e7c6      	b.n	4099fe <f_printf+0x5a>
  409a70:	f04e 0e04 	orr.w	lr, lr, #4
  409a74:	7838      	ldrb	r0, [r7, #0]
  409a76:	3701      	adds	r7, #1
  409a78:	e7c5      	b.n	409a06 <f_printf+0x62>
  409a7a:	9b07      	ldr	r3, [sp, #28]
  409a7c:	1d1a      	adds	r2, r3, #4
  409a7e:	9207      	str	r2, [sp, #28]
  409a80:	f8d3 b000 	ldr.w	fp, [r3]
  409a84:	f89b 3000 	ldrb.w	r3, [fp]
  409a88:	b1eb      	cbz	r3, 409ac6 <f_printf+0x122>
  409a8a:	465b      	mov	r3, fp
  409a8c:	f04f 0900 	mov.w	r9, #0
  409a90:	f109 0901 	add.w	r9, r9, #1
  409a94:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  409a98:	2a00      	cmp	r2, #0
  409a9a:	d1f9      	bne.n	409a90 <f_printf+0xec>
  409a9c:	f01e 0f02 	tst.w	lr, #2
  409aa0:	d114      	bne.n	409acc <f_printf+0x128>
  409aa2:	f109 0a01 	add.w	sl, r9, #1
  409aa6:	45a1      	cmp	r9, r4
  409aa8:	d230      	bcs.n	409b0c <f_printf+0x168>
  409aaa:	f104 0901 	add.w	r9, r4, #1
  409aae:	2500      	movs	r5, #0
  409ab0:	9901      	ldr	r1, [sp, #4]
  409ab2:	2020      	movs	r0, #32
  409ab4:	47c0      	blx	r8
  409ab6:	4405      	add	r5, r0
  409ab8:	f10a 0a01 	add.w	sl, sl, #1
  409abc:	45ca      	cmp	sl, r9
  409abe:	d1f7      	bne.n	409ab0 <f_printf+0x10c>
  409ac0:	f104 0901 	add.w	r9, r4, #1
  409ac4:	e003      	b.n	409ace <f_printf+0x12a>
  409ac6:	f04f 0900 	mov.w	r9, #0
  409aca:	e7e7      	b.n	409a9c <f_printf+0xf8>
  409acc:	2500      	movs	r5, #0
  409ace:	9901      	ldr	r1, [sp, #4]
  409ad0:	4658      	mov	r0, fp
  409ad2:	4b73      	ldr	r3, [pc, #460]	; (409ca0 <f_printf+0x2fc>)
  409ad4:	4798      	blx	r3
  409ad6:	4405      	add	r5, r0
  409ad8:	f109 0a01 	add.w	sl, r9, #1
  409adc:	45a1      	cmp	r9, r4
  409ade:	d20a      	bcs.n	409af6 <f_printf+0x152>
  409ae0:	3401      	adds	r4, #1
  409ae2:	f04f 0920 	mov.w	r9, #32
  409ae6:	9901      	ldr	r1, [sp, #4]
  409ae8:	4648      	mov	r0, r9
  409aea:	47c0      	blx	r8
  409aec:	4405      	add	r5, r0
  409aee:	f10a 0a01 	add.w	sl, sl, #1
  409af2:	45a2      	cmp	sl, r4
  409af4:	d1f7      	bne.n	409ae6 <f_printf+0x142>
  409af6:	f1b0 3fff 	cmp.w	r0, #4294967295
  409afa:	d17a      	bne.n	409bf2 <f_printf+0x24e>
  409afc:	f04f 36ff 	mov.w	r6, #4294967295
  409b00:	4630      	mov	r0, r6
  409b02:	b008      	add	sp, #32
  409b04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409b08:	b003      	add	sp, #12
  409b0a:	4770      	bx	lr
  409b0c:	46d1      	mov	r9, sl
  409b0e:	2500      	movs	r5, #0
  409b10:	e7dd      	b.n	409ace <f_printf+0x12a>
  409b12:	9b07      	ldr	r3, [sp, #28]
  409b14:	1d1a      	adds	r2, r3, #4
  409b16:	9207      	str	r2, [sp, #28]
  409b18:	9901      	ldr	r1, [sp, #4]
  409b1a:	7818      	ldrb	r0, [r3, #0]
  409b1c:	47c0      	blx	r8
  409b1e:	4605      	mov	r5, r0
  409b20:	e067      	b.n	409bf2 <f_printf+0x24e>
  409b22:	9901      	ldr	r1, [sp, #4]
  409b24:	47c0      	blx	r8
  409b26:	4605      	mov	r5, r0
  409b28:	e063      	b.n	409bf2 <f_printf+0x24e>
  409b2a:	f01e 0f04 	tst.w	lr, #4
  409b2e:	d101      	bne.n	409b34 <f_printf+0x190>
  409b30:	250a      	movs	r5, #10
  409b32:	e09e      	b.n	409c72 <f_printf+0x2ce>
  409b34:	250a      	movs	r5, #10
  409b36:	9a07      	ldr	r2, [sp, #28]
  409b38:	1d11      	adds	r1, r2, #4
  409b3a:	9107      	str	r1, [sp, #28]
  409b3c:	6812      	ldr	r2, [r2, #0]
  409b3e:	2b44      	cmp	r3, #68	; 0x44
  409b40:	f000 809d 	beq.w	409c7e <f_printf+0x2da>
  409b44:	e07f      	b.n	409c46 <f_printf+0x2a2>
  409b46:	2510      	movs	r5, #16
  409b48:	e7f5      	b.n	409b36 <f_printf+0x192>
  409b4a:	464e      	mov	r6, r9
  409b4c:	fbb2 f1f5 	udiv	r1, r2, r5
  409b50:	fb05 2311 	mls	r3, r5, r1, r2
  409b54:	b2db      	uxtb	r3, r3
  409b56:	460a      	mov	r2, r1
  409b58:	2b09      	cmp	r3, #9
  409b5a:	bf84      	itt	hi
  409b5c:	4463      	addhi	r3, ip
  409b5e:	b2db      	uxtbhi	r3, r3
  409b60:	f106 0901 	add.w	r9, r6, #1
  409b64:	3330      	adds	r3, #48	; 0x30
  409b66:	f800 3f01 	strb.w	r3, [r0, #1]!
  409b6a:	b111      	cbz	r1, 409b72 <f_printf+0x1ce>
  409b6c:	f1b9 0f10 	cmp.w	r9, #16
  409b70:	d1eb      	bne.n	409b4a <f_printf+0x1a6>
  409b72:	f01e 0f08 	tst.w	lr, #8
  409b76:	d006      	beq.n	409b86 <f_printf+0x1e2>
  409b78:	ab08      	add	r3, sp, #32
  409b7a:	4499      	add	r9, r3
  409b7c:	232d      	movs	r3, #45	; 0x2d
  409b7e:	f809 3c14 	strb.w	r3, [r9, #-20]
  409b82:	f106 0902 	add.w	r9, r6, #2
  409b86:	f00e 0301 	and.w	r3, lr, #1
  409b8a:	2b00      	cmp	r3, #0
  409b8c:	bf14      	ite	ne
  409b8e:	f04f 0a30 	movne.w	sl, #48	; 0x30
  409b92:	f04f 0a20 	moveq.w	sl, #32
  409b96:	f01e 0f02 	tst.w	lr, #2
  409b9a:	d140      	bne.n	409c1e <f_printf+0x27a>
  409b9c:	f109 0501 	add.w	r5, r9, #1
  409ba0:	45a1      	cmp	r9, r4
  409ba2:	d23f      	bcs.n	409c24 <f_printf+0x280>
  409ba4:	f104 0b01 	add.w	fp, r4, #1
  409ba8:	2600      	movs	r6, #0
  409baa:	9901      	ldr	r1, [sp, #4]
  409bac:	4650      	mov	r0, sl
  409bae:	47c0      	blx	r8
  409bb0:	4406      	add	r6, r0
  409bb2:	3501      	adds	r5, #1
  409bb4:	455d      	cmp	r5, fp
  409bb6:	d1f8      	bne.n	409baa <f_printf+0x206>
  409bb8:	1c65      	adds	r5, r4, #1
  409bba:	ab03      	add	r3, sp, #12
  409bbc:	4499      	add	r9, r3
  409bbe:	469a      	mov	sl, r3
  409bc0:	9901      	ldr	r1, [sp, #4]
  409bc2:	f819 0d01 	ldrb.w	r0, [r9, #-1]!
  409bc6:	47c0      	blx	r8
  409bc8:	4406      	add	r6, r0
  409bca:	45d1      	cmp	r9, sl
  409bcc:	d1f8      	bne.n	409bc0 <f_printf+0x21c>
  409bce:	f105 0901 	add.w	r9, r5, #1
  409bd2:	42a5      	cmp	r5, r4
  409bd4:	d209      	bcs.n	409bea <f_printf+0x246>
  409bd6:	3401      	adds	r4, #1
  409bd8:	2520      	movs	r5, #32
  409bda:	9901      	ldr	r1, [sp, #4]
  409bdc:	4628      	mov	r0, r5
  409bde:	47c0      	blx	r8
  409be0:	4406      	add	r6, r0
  409be2:	f109 0901 	add.w	r9, r9, #1
  409be6:	45a1      	cmp	r9, r4
  409be8:	d1f7      	bne.n	409bda <f_printf+0x236>
  409bea:	f1b0 3fff 	cmp.w	r0, #4294967295
  409bee:	d085      	beq.n	409afc <f_printf+0x158>
  409bf0:	4635      	mov	r5, r6
  409bf2:	442e      	add	r6, r5
  409bf4:	f1b5 3fff 	cmp.w	r5, #4294967295
  409bf8:	d016      	beq.n	409c28 <f_printf+0x284>
  409bfa:	1c7c      	adds	r4, r7, #1
  409bfc:	7838      	ldrb	r0, [r7, #0]
  409bfe:	2800      	cmp	r0, #0
  409c00:	f43f af7e 	beq.w	409b00 <f_printf+0x15c>
  409c04:	2825      	cmp	r0, #37	; 0x25
  409c06:	f43f aee0 	beq.w	4099ca <f_printf+0x26>
  409c0a:	9901      	ldr	r1, [sp, #4]
  409c0c:	47c0      	blx	r8
  409c0e:	f1b0 3fff 	cmp.w	r0, #4294967295
  409c12:	f43f af73 	beq.w	409afc <f_printf+0x158>
  409c16:	3601      	adds	r6, #1
  409c18:	4627      	mov	r7, r4
  409c1a:	2501      	movs	r5, #1
  409c1c:	e7ed      	b.n	409bfa <f_printf+0x256>
  409c1e:	464d      	mov	r5, r9
  409c20:	2600      	movs	r6, #0
  409c22:	e7ca      	b.n	409bba <f_printf+0x216>
  409c24:	2600      	movs	r6, #0
  409c26:	e7c8      	b.n	409bba <f_printf+0x216>
  409c28:	462e      	mov	r6, r5
  409c2a:	e769      	b.n	409b00 <f_printf+0x15c>
  409c2c:	f1b5 3fff 	cmp.w	r5, #4294967295
  409c30:	bf08      	it	eq
  409c32:	462e      	moveq	r6, r5
  409c34:	e764      	b.n	409b00 <f_printf+0x15c>
  409c36:	f01e 0f04 	tst.w	lr, #4
  409c3a:	d184      	bne.n	409b46 <f_printf+0x1a2>
  409c3c:	2510      	movs	r5, #16
  409c3e:	9b07      	ldr	r3, [sp, #28]
  409c40:	1d1a      	adds	r2, r3, #4
  409c42:	9207      	str	r2, [sp, #28]
  409c44:	681a      	ldr	r2, [r3, #0]
  409c46:	2878      	cmp	r0, #120	; 0x78
  409c48:	bf0c      	ite	eq
  409c4a:	f04f 0c27 	moveq.w	ip, #39	; 0x27
  409c4e:	f04f 0c07 	movne.w	ip, #7
  409c52:	f10d 000b 	add.w	r0, sp, #11
  409c56:	2600      	movs	r6, #0
  409c58:	e778      	b.n	409b4c <f_printf+0x1a8>
  409c5a:	2600      	movs	r6, #0
  409c5c:	e750      	b.n	409b00 <f_printf+0x15c>
  409c5e:	9b07      	ldr	r3, [sp, #28]
  409c60:	1d1a      	adds	r2, r3, #4
  409c62:	9207      	str	r2, [sp, #28]
  409c64:	681a      	ldr	r2, [r3, #0]
  409c66:	2502      	movs	r5, #2
  409c68:	e7ed      	b.n	409c46 <f_printf+0x2a2>
  409c6a:	f01e 0f04 	tst.w	lr, #4
  409c6e:	d1f6      	bne.n	409c5e <f_printf+0x2ba>
  409c70:	2502      	movs	r5, #2
  409c72:	2b44      	cmp	r3, #68	; 0x44
  409c74:	d1e3      	bne.n	409c3e <f_printf+0x29a>
  409c76:	9b07      	ldr	r3, [sp, #28]
  409c78:	1d1a      	adds	r2, r3, #4
  409c7a:	9207      	str	r2, [sp, #28]
  409c7c:	681a      	ldr	r2, [r3, #0]
  409c7e:	2a00      	cmp	r2, #0
  409c80:	bfbc      	itt	lt
  409c82:	4252      	neglt	r2, r2
  409c84:	f04e 0e08 	orrlt.w	lr, lr, #8
  409c88:	e7dd      	b.n	409c46 <f_printf+0x2a2>
  409c8a:	9b07      	ldr	r3, [sp, #28]
  409c8c:	1d1a      	adds	r2, r3, #4
  409c8e:	9207      	str	r2, [sp, #28]
  409c90:	681a      	ldr	r2, [r3, #0]
  409c92:	2508      	movs	r5, #8
  409c94:	e7d7      	b.n	409c46 <f_printf+0x2a2>
  409c96:	f01e 0f04 	tst.w	lr, #4
  409c9a:	d1f6      	bne.n	409c8a <f_printf+0x2e6>
  409c9c:	2508      	movs	r5, #8
  409c9e:	e7ce      	b.n	409c3e <f_printf+0x29a>
  409ca0:	00409975 	.word	0x00409975
  409ca4:	00409949 	.word	0x00409949

00409ca8 <ff_convert>:
)
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
  409ca8:	287f      	cmp	r0, #127	; 0x7f
  409caa:	d919      	bls.n	409ce0 <ff_convert+0x38>
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
  409cac:	b971      	cbnz	r1, 409ccc <ff_convert+0x24>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
  409cae:	28c7      	cmp	r0, #199	; 0xc7
  409cb0:	d013      	beq.n	409cda <ff_convert+0x32>
  409cb2:	4a0c      	ldr	r2, [pc, #48]	; (409ce4 <ff_convert+0x3c>)
			for (c = 0; c < 0x80; c++) {
  409cb4:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
  409cb6:	f832 1f02 	ldrh.w	r1, [r2, #2]!
  409cba:	4281      	cmp	r1, r0
  409cbc:	d003      	beq.n	409cc6 <ff_convert+0x1e>
			for (c = 0; c < 0x80; c++) {
  409cbe:	3301      	adds	r3, #1
  409cc0:	b29b      	uxth	r3, r3
  409cc2:	2b80      	cmp	r3, #128	; 0x80
  409cc4:	d1f7      	bne.n	409cb6 <ff_convert+0xe>
			}
			c = (c + 0x80) & 0xFF;
  409cc6:	3380      	adds	r3, #128	; 0x80
  409cc8:	b2d8      	uxtb	r0, r3
  409cca:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  409ccc:	28ff      	cmp	r0, #255	; 0xff
  409cce:	d806      	bhi.n	409cde <ff_convert+0x36>
  409cd0:	3880      	subs	r0, #128	; 0x80
  409cd2:	4b04      	ldr	r3, [pc, #16]	; (409ce4 <ff_convert+0x3c>)
  409cd4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
  409cd8:	4770      	bx	lr
				if (src == Tbl[c]) break;
  409cda:	2300      	movs	r3, #0
  409cdc:	e7f3      	b.n	409cc6 <ff_convert+0x1e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  409cde:	2000      	movs	r0, #0
		}
	}

	return c;
}
  409ce0:	4770      	bx	lr
  409ce2:	bf00      	nop
  409ce4:	00410eac 	.word	0x00410eac

00409ce8 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  409ce8:	2861      	cmp	r0, #97	; 0x61
  409cea:	d010      	beq.n	409d0e <ff_wtoupper+0x26>
  409cec:	4909      	ldr	r1, [pc, #36]	; (409d14 <ff_wtoupper+0x2c>)
  409cee:	2201      	movs	r2, #1
  409cf0:	2362      	movs	r3, #98	; 0x62
  409cf2:	4298      	cmp	r0, r3
  409cf4:	d005      	beq.n	409d02 <ff_wtoupper+0x1a>
  409cf6:	3201      	adds	r2, #1
  409cf8:	f831 3f02 	ldrh.w	r3, [r1, #2]!
  409cfc:	2b00      	cmp	r3, #0
  409cfe:	d1f8      	bne.n	409cf2 <ff_wtoupper+0xa>
  409d00:	e003      	b.n	409d0a <ff_wtoupper+0x22>

	return tbl_lower[i] ? tbl_upper[i] : chr;
  409d02:	b118      	cbz	r0, 409d0c <ff_wtoupper+0x24>
  409d04:	4b04      	ldr	r3, [pc, #16]	; (409d18 <ff_wtoupper+0x30>)
  409d06:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
}
  409d0a:	4770      	bx	lr
  409d0c:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  409d0e:	2200      	movs	r2, #0
  409d10:	e7f8      	b.n	409d04 <ff_wtoupper+0x1c>
  409d12:	bf00      	nop
  409d14:	00410fae 	.word	0x00410fae
  409d18:	0041118c 	.word	0x0041118c

00409d1c <main>:
/*************************** GLOBAL FUNCTIONS ********************************/

///@brief 	Main function.
///@details Application entry point.
int main(void)
{
  409d1c:	b508      	push	{r3, lr}
	
	// Initialization
	system_init();
  409d1e:	4b14      	ldr	r3, [pc, #80]	; (409d70 <main+0x54>)
  409d20:	4798      	blx	r3
	bootloader_init();
  409d22:	4b14      	ldr	r3, [pc, #80]	; (409d74 <main+0x58>)
  409d24:	4798      	blx	r3
	unit_config_and_calibration_init();
  409d26:	4b14      	ldr	r3, [pc, #80]	; (409d78 <main+0x5c>)
  409d28:	4798      	blx	r3
	comm_init();
  409d2a:	4b14      	ldr	r3, [pc, #80]	; (409d7c <main+0x60>)
  409d2c:	4798      	blx	r3
	
	// system ready
	system_ready();
  409d2e:	4b14      	ldr	r3, [pc, #80]	; (409d80 <main+0x64>)
  409d30:	4798      	blx	r3
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  409d32:	4b14      	ldr	r3, [pc, #80]	; (409d84 <main+0x68>)
  409d34:	f642 62df 	movw	r2, #11999	; 0x2edf
  409d38:	605a      	str	r2, [r3, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  409d3a:	21f0      	movs	r1, #240	; 0xf0
  409d3c:	4a12      	ldr	r2, [pc, #72]	; (409d88 <main+0x6c>)
  409d3e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  409d42:	2200      	movs	r2, #0
  409d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  409d46:	2207      	movs	r2, #7
  409d48:	601a      	str	r2, [r3, #0]
	SysTick_Config( sysclk_get_cpu_hz()/SETTINGS_ARM_TIMER_FREQ_HZ ); // set clock timer and enable interrupt
	system_enable_interrupt();
  409d4a:	4b10      	ldr	r3, [pc, #64]	; (409d8c <main+0x70>)
  409d4c:	4798      	blx	r3
	
	while(1) {
	
		sdcard_background();
  409d4e:	4e10      	ldr	r6, [pc, #64]	; (409d90 <main+0x74>)
		delay_ms(500);
  409d50:	4d10      	ldr	r5, [pc, #64]	; (409d94 <main+0x78>)
  409d52:	4c11      	ldr	r4, [pc, #68]	; (409d98 <main+0x7c>)
		sdcard_background();
  409d54:	47b0      	blx	r6
		delay_ms(500);
  409d56:	4628      	mov	r0, r5
  409d58:	47a0      	blx	r4
		gpio_set_pin_high(LED0_GPIO);
  409d5a:	200f      	movs	r0, #15
  409d5c:	4b0f      	ldr	r3, [pc, #60]	; (409d9c <main+0x80>)
  409d5e:	4798      	blx	r3
		delay_ms(500);
  409d60:	4628      	mov	r0, r5
  409d62:	47a0      	blx	r4
		gpio_set_pin_low(LED0_GPIO);
  409d64:	200f      	movs	r0, #15
  409d66:	4b0e      	ldr	r3, [pc, #56]	; (409da0 <main+0x84>)
  409d68:	4798      	blx	r3
		comm_background();
  409d6a:	4b0e      	ldr	r3, [pc, #56]	; (409da4 <main+0x88>)
  409d6c:	4798      	blx	r3
  409d6e:	e7f1      	b.n	409d54 <main+0x38>
  409d70:	00405305 	.word	0x00405305
  409d74:	00402e59 	.word	0x00402e59
  409d78:	0040484d 	.word	0x0040484d
  409d7c:	00404f7d 	.word	0x00404f7d
  409d80:	00405581 	.word	0x00405581
  409d84:	e000e010 	.word	0xe000e010
  409d88:	e000ed00 	.word	0xe000ed00
  409d8c:	004055c9 	.word	0x004055c9
  409d90:	004044a9 	.word	0x004044a9
  409d94:	00416513 	.word	0x00416513
  409d98:	20000089 	.word	0x20000089
  409d9c:	0040698b 	.word	0x0040698b
  409da0:	004069a5 	.word	0x004069a5
  409da4:	00404fd5 	.word	0x00404fd5

00409da8 <coreio_push_button_1_isr>:
///@brief Push Button Interrupt Service Routine.
///@details Enable/Disable the detection of SD-Card. Set this flag force
///         detection in background and clear this flag force a idle state
void coreio_push_button_1_isr(uint32_t id, uint32_t mask) {
	
	if ((PIN_PUSHBUTTON_1_ID == id) && (PIN_PUSHBUTTON_1_MASK == mask)) {
  409da8:	280b      	cmp	r0, #11
  409daa:	d000      	beq.n	409dae <coreio_push_button_1_isr+0x6>
  409dac:	4770      	bx	lr
  409dae:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  409db2:	d1fb      	bne.n	409dac <coreio_push_button_1_isr+0x4>
		if (sdcard_flags_status & SDCARD_FLAGS_STATUS_ENABLE_SDCARD )
  409db4:	4b08      	ldr	r3, [pc, #32]	; (409dd8 <coreio_push_button_1_isr+0x30>)
  409db6:	781b      	ldrb	r3, [r3, #0]
  409db8:	f013 0f01 	tst.w	r3, #1
  409dbc:	d105      	bne.n	409dca <coreio_push_button_1_isr+0x22>
			sdcard_flags_status &= ~SDCARD_FLAGS_STATUS_ENABLE_SDCARD;
		else
			sdcard_flags_status |= SDCARD_FLAGS_STATUS_ENABLE_SDCARD;
  409dbe:	4a06      	ldr	r2, [pc, #24]	; (409dd8 <coreio_push_button_1_isr+0x30>)
  409dc0:	7813      	ldrb	r3, [r2, #0]
  409dc2:	f043 0301 	orr.w	r3, r3, #1
  409dc6:	7013      	strb	r3, [r2, #0]
	}
}
  409dc8:	e7f0      	b.n	409dac <coreio_push_button_1_isr+0x4>
			sdcard_flags_status &= ~SDCARD_FLAGS_STATUS_ENABLE_SDCARD;
  409dca:	4a03      	ldr	r2, [pc, #12]	; (409dd8 <coreio_push_button_1_isr+0x30>)
  409dcc:	7813      	ldrb	r3, [r2, #0]
  409dce:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  409dd2:	7013      	strb	r3, [r2, #0]
  409dd4:	4770      	bx	lr
  409dd6:	bf00      	nop
  409dd8:	20001cc8 	.word	0x20001cc8

00409ddc <coreio_push_button_2_isr>:
///@details Enable/Disable the detection of SD-Card. Set this flag force
///         detection in background and clear this flag force a idle state
///@note Other action can be assigned in a following revision
void coreio_push_button_2_isr(uint32_t id, uint32_t mask) {
	
	if ((PIN_PUSHBUTTON_2_ID == id) && (PIN_PUSHBUTTON_2_MASK == mask)) {
  409ddc:	280b      	cmp	r0, #11
  409dde:	d000      	beq.n	409de2 <coreio_push_button_2_isr+0x6>
  409de0:	4770      	bx	lr
  409de2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
  409de6:	d1fb      	bne.n	409de0 <coreio_push_button_2_isr+0x4>
				
		if (sdcard_flags_status & SDCARD_FLAGS_STATUS_ENABLE_SDCARD )
  409de8:	4b08      	ldr	r3, [pc, #32]	; (409e0c <coreio_push_button_2_isr+0x30>)
  409dea:	781b      	ldrb	r3, [r3, #0]
  409dec:	f013 0f01 	tst.w	r3, #1
  409df0:	d105      	bne.n	409dfe <coreio_push_button_2_isr+0x22>
			sdcard_flags_status &= ~SDCARD_FLAGS_STATUS_ENABLE_SDCARD;
		else
			sdcard_flags_status |= SDCARD_FLAGS_STATUS_ENABLE_SDCARD;
  409df2:	4a06      	ldr	r2, [pc, #24]	; (409e0c <coreio_push_button_2_isr+0x30>)
  409df4:	7813      	ldrb	r3, [r2, #0]
  409df6:	f043 0301 	orr.w	r3, r3, #1
  409dfa:	7013      	strb	r3, [r2, #0]
	}
}
  409dfc:	e7f0      	b.n	409de0 <coreio_push_button_2_isr+0x4>
			sdcard_flags_status &= ~SDCARD_FLAGS_STATUS_ENABLE_SDCARD;
  409dfe:	4a03      	ldr	r2, [pc, #12]	; (409e0c <coreio_push_button_2_isr+0x30>)
  409e00:	7813      	ldrb	r3, [r2, #0]
  409e02:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  409e06:	7013      	strb	r3, [r2, #0]
  409e08:	4770      	bx	lr
  409e0a:	bf00      	nop
  409e0c:	20001cc8 	.word	0x20001cc8

00409e10 <SysTick_Handler>:

///@brief Handler for System Tick interrupt.
///@details Process System Tick Event. Update counters.
void SysTick_Handler(void) {
  409e10:	b508      	push	{r3, lr}
	
	comm_counters_update();
  409e12:	4b01      	ldr	r3, [pc, #4]	; (409e18 <SysTick_Handler+0x8>)
  409e14:	4798      	blx	r3
  409e16:	bd08      	pop	{r3, pc}
  409e18:	00405095 	.word	0x00405095

00409e1c <UART0_Handler>:
	
}

///@brief Handler for UART 0.
void UART0_Handler(void) {
  409e1c:	b508      	push	{r3, lr}
	comm_preprocess_uart_DSP_RX();
  409e1e:	4b01      	ldr	r3, [pc, #4]	; (409e24 <UART0_Handler+0x8>)
  409e20:	4798      	blx	r3
  409e22:	bd08      	pop	{r3, pc}
  409e24:	00405101 	.word	0x00405101

00409e28 <UART1_Handler>:
}

///@brief Handler for UART 1.
void UART1_Handler(void) {
  409e28:	b508      	push	{r3, lr}
	comm_preprocess_uart_RPI_RX();
  409e2a:	4b01      	ldr	r3, [pc, #4]	; (409e30 <UART1_Handler+0x8>)
  409e2c:	4798      	blx	r3
  409e2e:	bd08      	pop	{r3, pc}
  409e30:	00405115 	.word	0x00405115

00409e34 <SUPC_Handler>:

///@brief Interrupt Handler for Supply monitor (SUPC)
///@details It is executed when a supply monitor detection occurs.
///         Go to backup model.
void SUPC_Handler(void)
{
  409e34:	b508      	push	{r3, lr}

	uint32_t supc_sr_value = 0;
	
	supc_sr_value = SUPC->SUPC_SR;
  409e36:	4b05      	ldr	r3, [pc, #20]	; (409e4c <SUPC_Handler+0x18>)
  409e38:	695b      	ldr	r3, [r3, #20]
	
	if (supc_sr_value & SUPC_SR_SMS)
  409e3a:	f013 0f20 	tst.w	r3, #32
  409e3e:	d100      	bne.n	409e42 <SUPC_Handler+0xe>
  409e40:	bd08      	pop	{r3, pc}
	{
 		
 		// Disable clocks and correctly configure I/Os to reduce power consumption.
 		backup_mode_prepare();
  409e42:	4b03      	ldr	r3, [pc, #12]	; (409e50 <SUPC_Handler+0x1c>)
  409e44:	4798      	blx	r3
		
 		// Enter in back up mode till power is over threshold again
 		enter_backup_mode();
  409e46:	4b03      	ldr	r3, [pc, #12]	; (409e54 <SUPC_Handler+0x20>)
  409e48:	4798      	blx	r3
	}
}
  409e4a:	e7f9      	b.n	409e40 <SUPC_Handler+0xc>
  409e4c:	400e1410 	.word	0x400e1410
  409e50:	00404699 	.word	0x00404699
  409e54:	00404739 	.word	0x00404739

00409e58 <atan2>:
  409e58:	f000 b85e 	b.w	409f18 <__ieee754_atan2>

00409e5c <sqrt>:
  409e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409e60:	b08b      	sub	sp, #44	; 0x2c
  409e62:	4604      	mov	r4, r0
  409e64:	460d      	mov	r5, r1
  409e66:	f000 f941 	bl	40a0ec <__ieee754_sqrt>
  409e6a:	4b29      	ldr	r3, [pc, #164]	; (409f10 <sqrt+0xb4>)
  409e6c:	f993 a000 	ldrsb.w	sl, [r3]
  409e70:	f1ba 3fff 	cmp.w	sl, #4294967295
  409e74:	4606      	mov	r6, r0
  409e76:	460f      	mov	r7, r1
  409e78:	d012      	beq.n	409ea0 <sqrt+0x44>
  409e7a:	4622      	mov	r2, r4
  409e7c:	462b      	mov	r3, r5
  409e7e:	4620      	mov	r0, r4
  409e80:	4629      	mov	r1, r5
  409e82:	f000 ffeb 	bl	40ae5c <__aeabi_dcmpun>
  409e86:	4683      	mov	fp, r0
  409e88:	b950      	cbnz	r0, 409ea0 <sqrt+0x44>
  409e8a:	f04f 0800 	mov.w	r8, #0
  409e8e:	f04f 0900 	mov.w	r9, #0
  409e92:	4642      	mov	r2, r8
  409e94:	464b      	mov	r3, r9
  409e96:	4620      	mov	r0, r4
  409e98:	4629      	mov	r1, r5
  409e9a:	f000 ffb7 	bl	40ae0c <__aeabi_dcmplt>
  409e9e:	b920      	cbnz	r0, 409eaa <sqrt+0x4e>
  409ea0:	4630      	mov	r0, r6
  409ea2:	4639      	mov	r1, r7
  409ea4:	b00b      	add	sp, #44	; 0x2c
  409ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409eaa:	4b1a      	ldr	r3, [pc, #104]	; (409f14 <sqrt+0xb8>)
  409eac:	f8cd b020 	str.w	fp, [sp, #32]
  409eb0:	2201      	movs	r2, #1
  409eb2:	e9cd 4504 	strd	r4, r5, [sp, #16]
  409eb6:	e9cd 4502 	strd	r4, r5, [sp, #8]
  409eba:	e88d 000c 	stmia.w	sp, {r2, r3}
  409ebe:	f1ba 0f00 	cmp.w	sl, #0
  409ec2:	d017      	beq.n	409ef4 <sqrt+0x98>
  409ec4:	4642      	mov	r2, r8
  409ec6:	464b      	mov	r3, r9
  409ec8:	4640      	mov	r0, r8
  409eca:	4649      	mov	r1, r9
  409ecc:	f000 fe56 	bl	40ab7c <__aeabi_ddiv>
  409ed0:	f1ba 0f02 	cmp.w	sl, #2
  409ed4:	e9cd 0106 	strd	r0, r1, [sp, #24]
  409ed8:	d10e      	bne.n	409ef8 <sqrt+0x9c>
  409eda:	f001 fad1 	bl	40b480 <__errno>
  409ede:	2321      	movs	r3, #33	; 0x21
  409ee0:	6003      	str	r3, [r0, #0]
  409ee2:	9b08      	ldr	r3, [sp, #32]
  409ee4:	b973      	cbnz	r3, 409f04 <sqrt+0xa8>
  409ee6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
  409eea:	4630      	mov	r0, r6
  409eec:	4639      	mov	r1, r7
  409eee:	b00b      	add	sp, #44	; 0x2c
  409ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409ef4:	e9cd 8906 	strd	r8, r9, [sp, #24]
  409ef8:	4668      	mov	r0, sp
  409efa:	f000 fb5b 	bl	40a5b4 <matherr>
  409efe:	2800      	cmp	r0, #0
  409f00:	d1ef      	bne.n	409ee2 <sqrt+0x86>
  409f02:	e7ea      	b.n	409eda <sqrt+0x7e>
  409f04:	f001 fabc 	bl	40b480 <__errno>
  409f08:	9b08      	ldr	r3, [sp, #32]
  409f0a:	6003      	str	r3, [r0, #0]
  409f0c:	e7eb      	b.n	409ee6 <sqrt+0x8a>
  409f0e:	bf00      	nop
  409f10:	200000c0 	.word	0x200000c0
  409f14:	0041136c 	.word	0x0041136c

00409f18 <__ieee754_atan2>:
  409f18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409f1c:	4254      	negs	r4, r2
  409f1e:	4314      	orrs	r4, r2
  409f20:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
  409f24:	4e70      	ldr	r6, [pc, #448]	; (40a0e8 <__ieee754_atan2+0x1d0>)
  409f26:	ea49 74d4 	orr.w	r4, r9, r4, lsr #31
  409f2a:	42b4      	cmp	r4, r6
  409f2c:	4686      	mov	lr, r0
  409f2e:	460f      	mov	r7, r1
  409f30:	d840      	bhi.n	409fb4 <__ieee754_atan2+0x9c>
  409f32:	4244      	negs	r4, r0
  409f34:	4304      	orrs	r4, r0
  409f36:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
  409f3a:	ea4b 74d4 	orr.w	r4, fp, r4, lsr #31
  409f3e:	42b4      	cmp	r4, r6
  409f40:	468a      	mov	sl, r1
  409f42:	d837      	bhi.n	409fb4 <__ieee754_atan2+0x9c>
  409f44:	f103 4440 	add.w	r4, r3, #3221225472	; 0xc0000000
  409f48:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
  409f4c:	4314      	orrs	r4, r2
  409f4e:	d04a      	beq.n	409fe6 <__ieee754_atan2+0xce>
  409f50:	179c      	asrs	r4, r3, #30
  409f52:	f004 0402 	and.w	r4, r4, #2
  409f56:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
  409f5a:	ea50 010b 	orrs.w	r1, r0, fp
  409f5e:	d031      	beq.n	409fc4 <__ieee754_atan2+0xac>
  409f60:	ea52 0109 	orrs.w	r1, r2, r9
  409f64:	d037      	beq.n	409fd6 <__ieee754_atan2+0xbe>
  409f66:	45b1      	cmp	r9, r6
  409f68:	d052      	beq.n	40a010 <__ieee754_atan2+0xf8>
  409f6a:	45b3      	cmp	fp, r6
  409f6c:	d033      	beq.n	409fd6 <__ieee754_atan2+0xbe>
  409f6e:	ebab 0909 	sub.w	r9, fp, r9
  409f72:	ea4f 5929 	mov.w	r9, r9, asr #20
  409f76:	f1b9 0f3c 	cmp.w	r9, #60	; 0x3c
  409f7a:	dc3b      	bgt.n	409ff4 <__ieee754_atan2+0xdc>
  409f7c:	2b00      	cmp	r3, #0
  409f7e:	db66      	blt.n	40a04e <__ieee754_atan2+0x136>
  409f80:	4670      	mov	r0, lr
  409f82:	4639      	mov	r1, r7
  409f84:	f000 fdfa 	bl	40ab7c <__aeabi_ddiv>
  409f88:	f000 fb10 	bl	40a5ac <fabs>
  409f8c:	f000 f96c 	bl	40a268 <atan>
  409f90:	2c01      	cmp	r4, #1
  409f92:	d058      	beq.n	40a046 <__ieee754_atan2+0x12e>
  409f94:	2c02      	cmp	r4, #2
  409f96:	d048      	beq.n	40a02a <__ieee754_atan2+0x112>
  409f98:	2c00      	cmp	r4, #0
  409f9a:	d05e      	beq.n	40a05a <__ieee754_atan2+0x142>
  409f9c:	a340      	add	r3, pc, #256	; (adr r3, 40a0a0 <__ieee754_atan2+0x188>)
  409f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
  409fa2:	f000 fb0d 	bl	40a5c0 <__aeabi_dsub>
  409fa6:	a340      	add	r3, pc, #256	; (adr r3, 40a0a8 <__ieee754_atan2+0x190>)
  409fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
  409fac:	f000 fb08 	bl	40a5c0 <__aeabi_dsub>
  409fb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409fb4:	4610      	mov	r0, r2
  409fb6:	4619      	mov	r1, r3
  409fb8:	4672      	mov	r2, lr
  409fba:	463b      	mov	r3, r7
  409fbc:	f000 fb02 	bl	40a5c4 <__adddf3>
  409fc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409fc4:	2c02      	cmp	r4, #2
  409fc6:	d019      	beq.n	409ffc <__ieee754_atan2+0xe4>
  409fc8:	2c03      	cmp	r4, #3
  409fca:	d110      	bne.n	409fee <__ieee754_atan2+0xd6>
  409fcc:	a138      	add	r1, pc, #224	; (adr r1, 40a0b0 <__ieee754_atan2+0x198>)
  409fce:	e9d1 0100 	ldrd	r0, r1, [r1]
  409fd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409fd6:	f1ba 0f00 	cmp.w	sl, #0
  409fda:	db14      	blt.n	40a006 <__ieee754_atan2+0xee>
  409fdc:	a136      	add	r1, pc, #216	; (adr r1, 40a0b8 <__ieee754_atan2+0x1a0>)
  409fde:	e9d1 0100 	ldrd	r0, r1, [r1]
  409fe2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409fe6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409fea:	f000 b93d 	b.w	40a268 <atan>
  409fee:	4639      	mov	r1, r7
  409ff0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409ff4:	a130      	add	r1, pc, #192	; (adr r1, 40a0b8 <__ieee754_atan2+0x1a0>)
  409ff6:	e9d1 0100 	ldrd	r0, r1, [r1]
  409ffa:	e7c9      	b.n	409f90 <__ieee754_atan2+0x78>
  409ffc:	a12a      	add	r1, pc, #168	; (adr r1, 40a0a8 <__ieee754_atan2+0x190>)
  409ffe:	e9d1 0100 	ldrd	r0, r1, [r1]
  40a002:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a006:	a12e      	add	r1, pc, #184	; (adr r1, 40a0c0 <__ieee754_atan2+0x1a8>)
  40a008:	e9d1 0100 	ldrd	r0, r1, [r1]
  40a00c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a010:	45cb      	cmp	fp, r9
  40a012:	d024      	beq.n	40a05e <__ieee754_atan2+0x146>
  40a014:	2c02      	cmp	r4, #2
  40a016:	d0f1      	beq.n	409ffc <__ieee754_atan2+0xe4>
  40a018:	2c03      	cmp	r4, #3
  40a01a:	d0d7      	beq.n	409fcc <__ieee754_atan2+0xb4>
  40a01c:	2c01      	cmp	r4, #1
  40a01e:	f04f 0000 	mov.w	r0, #0
  40a022:	d027      	beq.n	40a074 <__ieee754_atan2+0x15c>
  40a024:	2100      	movs	r1, #0
  40a026:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a02a:	a31d      	add	r3, pc, #116	; (adr r3, 40a0a0 <__ieee754_atan2+0x188>)
  40a02c:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a030:	f000 fac6 	bl	40a5c0 <__aeabi_dsub>
  40a034:	4602      	mov	r2, r0
  40a036:	460b      	mov	r3, r1
  40a038:	a11b      	add	r1, pc, #108	; (adr r1, 40a0a8 <__ieee754_atan2+0x190>)
  40a03a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40a03e:	f000 fabf 	bl	40a5c0 <__aeabi_dsub>
  40a042:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a046:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  40a04a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a04e:	f119 0f3c 	cmn.w	r9, #60	; 0x3c
  40a052:	da95      	bge.n	409f80 <__ieee754_atan2+0x68>
  40a054:	2000      	movs	r0, #0
  40a056:	2100      	movs	r1, #0
  40a058:	e79a      	b.n	409f90 <__ieee754_atan2+0x78>
  40a05a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a05e:	2c02      	cmp	r4, #2
  40a060:	d016      	beq.n	40a090 <__ieee754_atan2+0x178>
  40a062:	2c03      	cmp	r4, #3
  40a064:	d00f      	beq.n	40a086 <__ieee754_atan2+0x16e>
  40a066:	2c01      	cmp	r4, #1
  40a068:	d008      	beq.n	40a07c <__ieee754_atan2+0x164>
  40a06a:	a117      	add	r1, pc, #92	; (adr r1, 40a0c8 <__ieee754_atan2+0x1b0>)
  40a06c:	e9d1 0100 	ldrd	r0, r1, [r1]
  40a070:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a074:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40a078:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a07c:	a114      	add	r1, pc, #80	; (adr r1, 40a0d0 <__ieee754_atan2+0x1b8>)
  40a07e:	e9d1 0100 	ldrd	r0, r1, [r1]
  40a082:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a086:	a114      	add	r1, pc, #80	; (adr r1, 40a0d8 <__ieee754_atan2+0x1c0>)
  40a088:	e9d1 0100 	ldrd	r0, r1, [r1]
  40a08c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a090:	a113      	add	r1, pc, #76	; (adr r1, 40a0e0 <__ieee754_atan2+0x1c8>)
  40a092:	e9d1 0100 	ldrd	r0, r1, [r1]
  40a096:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a09a:	bf00      	nop
  40a09c:	f3af 8000 	nop.w
  40a0a0:	33145c07 	.word	0x33145c07
  40a0a4:	3ca1a626 	.word	0x3ca1a626
  40a0a8:	54442d18 	.word	0x54442d18
  40a0ac:	400921fb 	.word	0x400921fb
  40a0b0:	54442d18 	.word	0x54442d18
  40a0b4:	c00921fb 	.word	0xc00921fb
  40a0b8:	54442d18 	.word	0x54442d18
  40a0bc:	3ff921fb 	.word	0x3ff921fb
  40a0c0:	54442d18 	.word	0x54442d18
  40a0c4:	bff921fb 	.word	0xbff921fb
  40a0c8:	54442d18 	.word	0x54442d18
  40a0cc:	3fe921fb 	.word	0x3fe921fb
  40a0d0:	54442d18 	.word	0x54442d18
  40a0d4:	bfe921fb 	.word	0xbfe921fb
  40a0d8:	7f3321d2 	.word	0x7f3321d2
  40a0dc:	c002d97c 	.word	0xc002d97c
  40a0e0:	7f3321d2 	.word	0x7f3321d2
  40a0e4:	4002d97c 	.word	0x4002d97c
  40a0e8:	7ff00000 	.word	0x7ff00000

0040a0ec <__ieee754_sqrt>:
  40a0ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40a0f0:	4f5b      	ldr	r7, [pc, #364]	; (40a260 <__ieee754_sqrt+0x174>)
  40a0f2:	438f      	bics	r7, r1
  40a0f4:	4605      	mov	r5, r0
  40a0f6:	460c      	mov	r4, r1
  40a0f8:	f000 8092 	beq.w	40a220 <__ieee754_sqrt+0x134>
  40a0fc:	2900      	cmp	r1, #0
  40a0fe:	460b      	mov	r3, r1
  40a100:	4602      	mov	r2, r0
  40a102:	dd6f      	ble.n	40a1e4 <__ieee754_sqrt+0xf8>
  40a104:	150f      	asrs	r7, r1, #20
  40a106:	d07b      	beq.n	40a200 <__ieee754_sqrt+0x114>
  40a108:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  40a10c:	f3c3 0313 	ubfx	r3, r3, #0, #20
  40a110:	07f8      	lsls	r0, r7, #31
  40a112:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40a116:	d45c      	bmi.n	40a1d2 <__ieee754_sqrt+0xe6>
  40a118:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  40a11c:	2600      	movs	r6, #0
  40a11e:	440b      	add	r3, r1
  40a120:	107f      	asrs	r7, r7, #1
  40a122:	0052      	lsls	r2, r2, #1
  40a124:	46b6      	mov	lr, r6
  40a126:	2016      	movs	r0, #22
  40a128:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  40a12c:	eb0e 0401 	add.w	r4, lr, r1
  40a130:	429c      	cmp	r4, r3
  40a132:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  40a136:	ea4f 0242 	mov.w	r2, r2, lsl #1
  40a13a:	dc03      	bgt.n	40a144 <__ieee754_sqrt+0x58>
  40a13c:	1b1b      	subs	r3, r3, r4
  40a13e:	eb04 0e01 	add.w	lr, r4, r1
  40a142:	440e      	add	r6, r1
  40a144:	3801      	subs	r0, #1
  40a146:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  40a14a:	ea4f 0151 	mov.w	r1, r1, lsr #1
  40a14e:	d1ed      	bne.n	40a12c <__ieee754_sqrt+0x40>
  40a150:	4684      	mov	ip, r0
  40a152:	2420      	movs	r4, #32
  40a154:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40a158:	e009      	b.n	40a16e <__ieee754_sqrt+0x82>
  40a15a:	d020      	beq.n	40a19e <__ieee754_sqrt+0xb2>
  40a15c:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  40a160:	3c01      	subs	r4, #1
  40a162:	ea4f 0151 	mov.w	r1, r1, lsr #1
  40a166:	442b      	add	r3, r5
  40a168:	ea4f 0242 	mov.w	r2, r2, lsl #1
  40a16c:	d020      	beq.n	40a1b0 <__ieee754_sqrt+0xc4>
  40a16e:	4573      	cmp	r3, lr
  40a170:	eb01 050c 	add.w	r5, r1, ip
  40a174:	ddf1      	ble.n	40a15a <__ieee754_sqrt+0x6e>
  40a176:	2d00      	cmp	r5, #0
  40a178:	eb05 0c01 	add.w	ip, r5, r1
  40a17c:	db09      	blt.n	40a192 <__ieee754_sqrt+0xa6>
  40a17e:	46f0      	mov	r8, lr
  40a180:	4295      	cmp	r5, r2
  40a182:	eba3 030e 	sub.w	r3, r3, lr
  40a186:	d900      	bls.n	40a18a <__ieee754_sqrt+0x9e>
  40a188:	3b01      	subs	r3, #1
  40a18a:	1b52      	subs	r2, r2, r5
  40a18c:	4408      	add	r0, r1
  40a18e:	46c6      	mov	lr, r8
  40a190:	e7e4      	b.n	40a15c <__ieee754_sqrt+0x70>
  40a192:	f1bc 0f00 	cmp.w	ip, #0
  40a196:	dbf2      	blt.n	40a17e <__ieee754_sqrt+0x92>
  40a198:	f10e 0801 	add.w	r8, lr, #1
  40a19c:	e7f0      	b.n	40a180 <__ieee754_sqrt+0x94>
  40a19e:	4295      	cmp	r5, r2
  40a1a0:	d8dc      	bhi.n	40a15c <__ieee754_sqrt+0x70>
  40a1a2:	2d00      	cmp	r5, #0
  40a1a4:	eb05 0c01 	add.w	ip, r5, r1
  40a1a8:	db44      	blt.n	40a234 <__ieee754_sqrt+0x148>
  40a1aa:	4698      	mov	r8, r3
  40a1ac:	2300      	movs	r3, #0
  40a1ae:	e7ec      	b.n	40a18a <__ieee754_sqrt+0x9e>
  40a1b0:	4313      	orrs	r3, r2
  40a1b2:	d113      	bne.n	40a1dc <__ieee754_sqrt+0xf0>
  40a1b4:	0840      	lsrs	r0, r0, #1
  40a1b6:	1073      	asrs	r3, r6, #1
  40a1b8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  40a1bc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40a1c0:	07f2      	lsls	r2, r6, #31
  40a1c2:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  40a1c6:	bf48      	it	mi
  40a1c8:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  40a1cc:	4649      	mov	r1, r9
  40a1ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a1d2:	005b      	lsls	r3, r3, #1
  40a1d4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  40a1d8:	0052      	lsls	r2, r2, #1
  40a1da:	e79d      	b.n	40a118 <__ieee754_sqrt+0x2c>
  40a1dc:	1c41      	adds	r1, r0, #1
  40a1de:	d02d      	beq.n	40a23c <__ieee754_sqrt+0x150>
  40a1e0:	3001      	adds	r0, #1
  40a1e2:	e7e7      	b.n	40a1b4 <__ieee754_sqrt+0xc8>
  40a1e4:	4606      	mov	r6, r0
  40a1e6:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  40a1ea:	433e      	orrs	r6, r7
  40a1ec:	d0ef      	beq.n	40a1ce <__ieee754_sqrt+0xe2>
  40a1ee:	bb69      	cbnz	r1, 40a24c <__ieee754_sqrt+0x160>
  40a1f0:	460f      	mov	r7, r1
  40a1f2:	0ad3      	lsrs	r3, r2, #11
  40a1f4:	3f15      	subs	r7, #21
  40a1f6:	0552      	lsls	r2, r2, #21
  40a1f8:	2b00      	cmp	r3, #0
  40a1fa:	d0fa      	beq.n	40a1f2 <__ieee754_sqrt+0x106>
  40a1fc:	02de      	lsls	r6, r3, #11
  40a1fe:	d420      	bmi.n	40a242 <__ieee754_sqrt+0x156>
  40a200:	2400      	movs	r4, #0
  40a202:	e000      	b.n	40a206 <__ieee754_sqrt+0x11a>
  40a204:	4604      	mov	r4, r0
  40a206:	005b      	lsls	r3, r3, #1
  40a208:	02dd      	lsls	r5, r3, #11
  40a20a:	f104 0001 	add.w	r0, r4, #1
  40a20e:	d5f9      	bpl.n	40a204 <__ieee754_sqrt+0x118>
  40a210:	f1c0 0120 	rsb	r1, r0, #32
  40a214:	fa22 f101 	lsr.w	r1, r2, r1
  40a218:	430b      	orrs	r3, r1
  40a21a:	1b3f      	subs	r7, r7, r4
  40a21c:	4082      	lsls	r2, r0
  40a21e:	e773      	b.n	40a108 <__ieee754_sqrt+0x1c>
  40a220:	4602      	mov	r2, r0
  40a222:	460b      	mov	r3, r1
  40a224:	f000 fb80 	bl	40a928 <__aeabi_dmul>
  40a228:	462a      	mov	r2, r5
  40a22a:	4623      	mov	r3, r4
  40a22c:	f000 f9ca 	bl	40a5c4 <__adddf3>
  40a230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a234:	f1bc 0f00 	cmp.w	ip, #0
  40a238:	daae      	bge.n	40a198 <__ieee754_sqrt+0xac>
  40a23a:	e7b6      	b.n	40a1aa <__ieee754_sqrt+0xbe>
  40a23c:	3601      	adds	r6, #1
  40a23e:	4620      	mov	r0, r4
  40a240:	e7b9      	b.n	40a1b6 <__ieee754_sqrt+0xca>
  40a242:	2000      	movs	r0, #0
  40a244:	2120      	movs	r1, #32
  40a246:	f04f 34ff 	mov.w	r4, #4294967295
  40a24a:	e7e3      	b.n	40a214 <__ieee754_sqrt+0x128>
  40a24c:	4602      	mov	r2, r0
  40a24e:	460b      	mov	r3, r1
  40a250:	f000 f9b6 	bl	40a5c0 <__aeabi_dsub>
  40a254:	4602      	mov	r2, r0
  40a256:	460b      	mov	r3, r1
  40a258:	f000 fc90 	bl	40ab7c <__aeabi_ddiv>
  40a25c:	e7b7      	b.n	40a1ce <__ieee754_sqrt+0xe2>
  40a25e:	bf00      	nop
  40a260:	7ff00000 	.word	0x7ff00000
  40a264:	00000000 	.word	0x00000000

0040a268 <atan>:
  40a268:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a26c:	4bc2      	ldr	r3, [pc, #776]	; (40a578 <atan+0x310>)
  40a26e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  40a272:	429e      	cmp	r6, r3
  40a274:	460d      	mov	r5, r1
  40a276:	468a      	mov	sl, r1
  40a278:	4604      	mov	r4, r0
  40a27a:	dd10      	ble.n	40a29e <atan+0x36>
  40a27c:	4bbf      	ldr	r3, [pc, #764]	; (40a57c <atan+0x314>)
  40a27e:	429e      	cmp	r6, r3
  40a280:	f300 80b5 	bgt.w	40a3ee <atan+0x186>
  40a284:	f000 80b0 	beq.w	40a3e8 <atan+0x180>
  40a288:	4bbd      	ldr	r3, [pc, #756]	; (40a580 <atan+0x318>)
  40a28a:	49be      	ldr	r1, [pc, #760]	; (40a584 <atan+0x31c>)
  40a28c:	4cbe      	ldr	r4, [pc, #760]	; (40a588 <atan+0x320>)
  40a28e:	f1ba 0f00 	cmp.w	sl, #0
  40a292:	bfd8      	it	le
  40a294:	460b      	movle	r3, r1
  40a296:	4620      	mov	r0, r4
  40a298:	4619      	mov	r1, r3
  40a29a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a29e:	4bbb      	ldr	r3, [pc, #748]	; (40a58c <atan+0x324>)
  40a2a0:	429e      	cmp	r6, r3
  40a2a2:	f300 80c1 	bgt.w	40a428 <atan+0x1c0>
  40a2a6:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
  40a2aa:	429e      	cmp	r6, r3
  40a2ac:	f340 80ab 	ble.w	40a406 <atan+0x19e>
  40a2b0:	f04f 3bff 	mov.w	fp, #4294967295
  40a2b4:	4622      	mov	r2, r4
  40a2b6:	462b      	mov	r3, r5
  40a2b8:	4620      	mov	r0, r4
  40a2ba:	4629      	mov	r1, r5
  40a2bc:	f000 fb34 	bl	40a928 <__aeabi_dmul>
  40a2c0:	4602      	mov	r2, r0
  40a2c2:	460b      	mov	r3, r1
  40a2c4:	4680      	mov	r8, r0
  40a2c6:	4689      	mov	r9, r1
  40a2c8:	f000 fb2e 	bl	40a928 <__aeabi_dmul>
  40a2cc:	a392      	add	r3, pc, #584	; (adr r3, 40a518 <atan+0x2b0>)
  40a2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a2d2:	4606      	mov	r6, r0
  40a2d4:	460f      	mov	r7, r1
  40a2d6:	f000 fb27 	bl	40a928 <__aeabi_dmul>
  40a2da:	a391      	add	r3, pc, #580	; (adr r3, 40a520 <atan+0x2b8>)
  40a2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a2e0:	f000 f970 	bl	40a5c4 <__adddf3>
  40a2e4:	4632      	mov	r2, r6
  40a2e6:	463b      	mov	r3, r7
  40a2e8:	f000 fb1e 	bl	40a928 <__aeabi_dmul>
  40a2ec:	a38e      	add	r3, pc, #568	; (adr r3, 40a528 <atan+0x2c0>)
  40a2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a2f2:	f000 f967 	bl	40a5c4 <__adddf3>
  40a2f6:	4632      	mov	r2, r6
  40a2f8:	463b      	mov	r3, r7
  40a2fa:	f000 fb15 	bl	40a928 <__aeabi_dmul>
  40a2fe:	a38c      	add	r3, pc, #560	; (adr r3, 40a530 <atan+0x2c8>)
  40a300:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a304:	f000 f95e 	bl	40a5c4 <__adddf3>
  40a308:	4632      	mov	r2, r6
  40a30a:	463b      	mov	r3, r7
  40a30c:	f000 fb0c 	bl	40a928 <__aeabi_dmul>
  40a310:	a389      	add	r3, pc, #548	; (adr r3, 40a538 <atan+0x2d0>)
  40a312:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a316:	f000 f955 	bl	40a5c4 <__adddf3>
  40a31a:	4632      	mov	r2, r6
  40a31c:	463b      	mov	r3, r7
  40a31e:	f000 fb03 	bl	40a928 <__aeabi_dmul>
  40a322:	a387      	add	r3, pc, #540	; (adr r3, 40a540 <atan+0x2d8>)
  40a324:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a328:	f000 f94c 	bl	40a5c4 <__adddf3>
  40a32c:	4642      	mov	r2, r8
  40a32e:	464b      	mov	r3, r9
  40a330:	f000 fafa 	bl	40a928 <__aeabi_dmul>
  40a334:	a384      	add	r3, pc, #528	; (adr r3, 40a548 <atan+0x2e0>)
  40a336:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a33a:	4680      	mov	r8, r0
  40a33c:	4689      	mov	r9, r1
  40a33e:	4630      	mov	r0, r6
  40a340:	4639      	mov	r1, r7
  40a342:	f000 faf1 	bl	40a928 <__aeabi_dmul>
  40a346:	a382      	add	r3, pc, #520	; (adr r3, 40a550 <atan+0x2e8>)
  40a348:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a34c:	f000 f938 	bl	40a5c0 <__aeabi_dsub>
  40a350:	4632      	mov	r2, r6
  40a352:	463b      	mov	r3, r7
  40a354:	f000 fae8 	bl	40a928 <__aeabi_dmul>
  40a358:	a37f      	add	r3, pc, #508	; (adr r3, 40a558 <atan+0x2f0>)
  40a35a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a35e:	f000 f92f 	bl	40a5c0 <__aeabi_dsub>
  40a362:	4632      	mov	r2, r6
  40a364:	463b      	mov	r3, r7
  40a366:	f000 fadf 	bl	40a928 <__aeabi_dmul>
  40a36a:	a37d      	add	r3, pc, #500	; (adr r3, 40a560 <atan+0x2f8>)
  40a36c:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a370:	f000 f926 	bl	40a5c0 <__aeabi_dsub>
  40a374:	4632      	mov	r2, r6
  40a376:	463b      	mov	r3, r7
  40a378:	f000 fad6 	bl	40a928 <__aeabi_dmul>
  40a37c:	a37a      	add	r3, pc, #488	; (adr r3, 40a568 <atan+0x300>)
  40a37e:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a382:	f000 f91d 	bl	40a5c0 <__aeabi_dsub>
  40a386:	4632      	mov	r2, r6
  40a388:	463b      	mov	r3, r7
  40a38a:	f000 facd 	bl	40a928 <__aeabi_dmul>
  40a38e:	f1bb 3fff 	cmp.w	fp, #4294967295
  40a392:	4602      	mov	r2, r0
  40a394:	460b      	mov	r3, r1
  40a396:	d06e      	beq.n	40a476 <atan+0x20e>
  40a398:	4640      	mov	r0, r8
  40a39a:	4649      	mov	r1, r9
  40a39c:	f000 f912 	bl	40a5c4 <__adddf3>
  40a3a0:	4622      	mov	r2, r4
  40a3a2:	462b      	mov	r3, r5
  40a3a4:	f000 fac0 	bl	40a928 <__aeabi_dmul>
  40a3a8:	4e79      	ldr	r6, [pc, #484]	; (40a590 <atan+0x328>)
  40a3aa:	4b7a      	ldr	r3, [pc, #488]	; (40a594 <atan+0x32c>)
  40a3ac:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
  40a3b0:	445e      	add	r6, fp
  40a3b2:	449b      	add	fp, r3
  40a3b4:	e9db 2300 	ldrd	r2, r3, [fp]
  40a3b8:	f000 f902 	bl	40a5c0 <__aeabi_dsub>
  40a3bc:	4622      	mov	r2, r4
  40a3be:	462b      	mov	r3, r5
  40a3c0:	f000 f8fe 	bl	40a5c0 <__aeabi_dsub>
  40a3c4:	460b      	mov	r3, r1
  40a3c6:	4602      	mov	r2, r0
  40a3c8:	e9d6 0100 	ldrd	r0, r1, [r6]
  40a3cc:	f000 f8f8 	bl	40a5c0 <__aeabi_dsub>
  40a3d0:	f1ba 0f00 	cmp.w	sl, #0
  40a3d4:	4604      	mov	r4, r0
  40a3d6:	460b      	mov	r3, r1
  40a3d8:	f6bf af5d 	bge.w	40a296 <atan+0x2e>
  40a3dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
  40a3e0:	4620      	mov	r0, r4
  40a3e2:	4619      	mov	r1, r3
  40a3e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a3e8:	2800      	cmp	r0, #0
  40a3ea:	f43f af4d 	beq.w	40a288 <atan+0x20>
  40a3ee:	4622      	mov	r2, r4
  40a3f0:	462b      	mov	r3, r5
  40a3f2:	4620      	mov	r0, r4
  40a3f4:	4629      	mov	r1, r5
  40a3f6:	f000 f8e5 	bl	40a5c4 <__adddf3>
  40a3fa:	4604      	mov	r4, r0
  40a3fc:	460b      	mov	r3, r1
  40a3fe:	4620      	mov	r0, r4
  40a400:	4619      	mov	r1, r3
  40a402:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a406:	a35a      	add	r3, pc, #360	; (adr r3, 40a570 <atan+0x308>)
  40a408:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a40c:	f000 f8da 	bl	40a5c4 <__adddf3>
  40a410:	2200      	movs	r2, #0
  40a412:	4b61      	ldr	r3, [pc, #388]	; (40a598 <atan+0x330>)
  40a414:	f000 fd18 	bl	40ae48 <__aeabi_dcmpgt>
  40a418:	2800      	cmp	r0, #0
  40a41a:	f43f af49 	beq.w	40a2b0 <atan+0x48>
  40a41e:	462b      	mov	r3, r5
  40a420:	4620      	mov	r0, r4
  40a422:	4619      	mov	r1, r3
  40a424:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a428:	f000 f8c0 	bl	40a5ac <fabs>
  40a42c:	4b5b      	ldr	r3, [pc, #364]	; (40a59c <atan+0x334>)
  40a42e:	429e      	cmp	r6, r3
  40a430:	4604      	mov	r4, r0
  40a432:	460d      	mov	r5, r1
  40a434:	dc30      	bgt.n	40a498 <atan+0x230>
  40a436:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
  40a43a:	429e      	cmp	r6, r3
  40a43c:	dc55      	bgt.n	40a4ea <atan+0x282>
  40a43e:	4602      	mov	r2, r0
  40a440:	460b      	mov	r3, r1
  40a442:	f000 f8bf 	bl	40a5c4 <__adddf3>
  40a446:	2200      	movs	r2, #0
  40a448:	4b53      	ldr	r3, [pc, #332]	; (40a598 <atan+0x330>)
  40a44a:	f000 f8b9 	bl	40a5c0 <__aeabi_dsub>
  40a44e:	2200      	movs	r2, #0
  40a450:	4606      	mov	r6, r0
  40a452:	460f      	mov	r7, r1
  40a454:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40a458:	4620      	mov	r0, r4
  40a45a:	4629      	mov	r1, r5
  40a45c:	f000 f8b2 	bl	40a5c4 <__adddf3>
  40a460:	4602      	mov	r2, r0
  40a462:	460b      	mov	r3, r1
  40a464:	4630      	mov	r0, r6
  40a466:	4639      	mov	r1, r7
  40a468:	f000 fb88 	bl	40ab7c <__aeabi_ddiv>
  40a46c:	f04f 0b00 	mov.w	fp, #0
  40a470:	4604      	mov	r4, r0
  40a472:	460d      	mov	r5, r1
  40a474:	e71e      	b.n	40a2b4 <atan+0x4c>
  40a476:	4640      	mov	r0, r8
  40a478:	4649      	mov	r1, r9
  40a47a:	f000 f8a3 	bl	40a5c4 <__adddf3>
  40a47e:	4622      	mov	r2, r4
  40a480:	462b      	mov	r3, r5
  40a482:	f000 fa51 	bl	40a928 <__aeabi_dmul>
  40a486:	460b      	mov	r3, r1
  40a488:	4602      	mov	r2, r0
  40a48a:	4629      	mov	r1, r5
  40a48c:	4620      	mov	r0, r4
  40a48e:	f000 f897 	bl	40a5c0 <__aeabi_dsub>
  40a492:	4604      	mov	r4, r0
  40a494:	460b      	mov	r3, r1
  40a496:	e6fe      	b.n	40a296 <atan+0x2e>
  40a498:	4b41      	ldr	r3, [pc, #260]	; (40a5a0 <atan+0x338>)
  40a49a:	429e      	cmp	r6, r3
  40a49c:	dc1a      	bgt.n	40a4d4 <atan+0x26c>
  40a49e:	2200      	movs	r2, #0
  40a4a0:	4b40      	ldr	r3, [pc, #256]	; (40a5a4 <atan+0x33c>)
  40a4a2:	f000 f88d 	bl	40a5c0 <__aeabi_dsub>
  40a4a6:	2200      	movs	r2, #0
  40a4a8:	4606      	mov	r6, r0
  40a4aa:	460f      	mov	r7, r1
  40a4ac:	4b3d      	ldr	r3, [pc, #244]	; (40a5a4 <atan+0x33c>)
  40a4ae:	4620      	mov	r0, r4
  40a4b0:	4629      	mov	r1, r5
  40a4b2:	f000 fa39 	bl	40a928 <__aeabi_dmul>
  40a4b6:	2200      	movs	r2, #0
  40a4b8:	4b37      	ldr	r3, [pc, #220]	; (40a598 <atan+0x330>)
  40a4ba:	f000 f883 	bl	40a5c4 <__adddf3>
  40a4be:	4602      	mov	r2, r0
  40a4c0:	460b      	mov	r3, r1
  40a4c2:	4630      	mov	r0, r6
  40a4c4:	4639      	mov	r1, r7
  40a4c6:	f000 fb59 	bl	40ab7c <__aeabi_ddiv>
  40a4ca:	f04f 0b02 	mov.w	fp, #2
  40a4ce:	4604      	mov	r4, r0
  40a4d0:	460d      	mov	r5, r1
  40a4d2:	e6ef      	b.n	40a2b4 <atan+0x4c>
  40a4d4:	4602      	mov	r2, r0
  40a4d6:	460b      	mov	r3, r1
  40a4d8:	2000      	movs	r0, #0
  40a4da:	4933      	ldr	r1, [pc, #204]	; (40a5a8 <atan+0x340>)
  40a4dc:	f000 fb4e 	bl	40ab7c <__aeabi_ddiv>
  40a4e0:	f04f 0b03 	mov.w	fp, #3
  40a4e4:	4604      	mov	r4, r0
  40a4e6:	460d      	mov	r5, r1
  40a4e8:	e6e4      	b.n	40a2b4 <atan+0x4c>
  40a4ea:	2200      	movs	r2, #0
  40a4ec:	4b2a      	ldr	r3, [pc, #168]	; (40a598 <atan+0x330>)
  40a4ee:	f000 f867 	bl	40a5c0 <__aeabi_dsub>
  40a4f2:	2200      	movs	r2, #0
  40a4f4:	4606      	mov	r6, r0
  40a4f6:	460f      	mov	r7, r1
  40a4f8:	4b27      	ldr	r3, [pc, #156]	; (40a598 <atan+0x330>)
  40a4fa:	4620      	mov	r0, r4
  40a4fc:	4629      	mov	r1, r5
  40a4fe:	f000 f861 	bl	40a5c4 <__adddf3>
  40a502:	4602      	mov	r2, r0
  40a504:	460b      	mov	r3, r1
  40a506:	4630      	mov	r0, r6
  40a508:	4639      	mov	r1, r7
  40a50a:	f000 fb37 	bl	40ab7c <__aeabi_ddiv>
  40a50e:	f04f 0b01 	mov.w	fp, #1
  40a512:	4604      	mov	r4, r0
  40a514:	460d      	mov	r5, r1
  40a516:	e6cd      	b.n	40a2b4 <atan+0x4c>
  40a518:	e322da11 	.word	0xe322da11
  40a51c:	3f90ad3a 	.word	0x3f90ad3a
  40a520:	24760deb 	.word	0x24760deb
  40a524:	3fa97b4b 	.word	0x3fa97b4b
  40a528:	a0d03d51 	.word	0xa0d03d51
  40a52c:	3fb10d66 	.word	0x3fb10d66
  40a530:	c54c206e 	.word	0xc54c206e
  40a534:	3fb745cd 	.word	0x3fb745cd
  40a538:	920083ff 	.word	0x920083ff
  40a53c:	3fc24924 	.word	0x3fc24924
  40a540:	5555550d 	.word	0x5555550d
  40a544:	3fd55555 	.word	0x3fd55555
  40a548:	2c6a6c2f 	.word	0x2c6a6c2f
  40a54c:	bfa2b444 	.word	0xbfa2b444
  40a550:	52defd9a 	.word	0x52defd9a
  40a554:	3fadde2d 	.word	0x3fadde2d
  40a558:	af749a6d 	.word	0xaf749a6d
  40a55c:	3fb3b0f2 	.word	0x3fb3b0f2
  40a560:	fe231671 	.word	0xfe231671
  40a564:	3fbc71c6 	.word	0x3fbc71c6
  40a568:	9998ebc4 	.word	0x9998ebc4
  40a56c:	3fc99999 	.word	0x3fc99999
  40a570:	8800759c 	.word	0x8800759c
  40a574:	7e37e43c 	.word	0x7e37e43c
  40a578:	440fffff 	.word	0x440fffff
  40a57c:	7ff00000 	.word	0x7ff00000
  40a580:	3ff921fb 	.word	0x3ff921fb
  40a584:	bff921fb 	.word	0xbff921fb
  40a588:	54442d18 	.word	0x54442d18
  40a58c:	3fdbffff 	.word	0x3fdbffff
  40a590:	00411378 	.word	0x00411378
  40a594:	00411398 	.word	0x00411398
  40a598:	3ff00000 	.word	0x3ff00000
  40a59c:	3ff2ffff 	.word	0x3ff2ffff
  40a5a0:	40037fff 	.word	0x40037fff
  40a5a4:	3ff80000 	.word	0x3ff80000
  40a5a8:	bff00000 	.word	0xbff00000

0040a5ac <fabs>:
  40a5ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40a5b0:	4770      	bx	lr
  40a5b2:	bf00      	nop

0040a5b4 <matherr>:
  40a5b4:	2000      	movs	r0, #0
  40a5b6:	4770      	bx	lr

0040a5b8 <__aeabi_drsub>:
  40a5b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40a5bc:	e002      	b.n	40a5c4 <__adddf3>
  40a5be:	bf00      	nop

0040a5c0 <__aeabi_dsub>:
  40a5c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040a5c4 <__adddf3>:
  40a5c4:	b530      	push	{r4, r5, lr}
  40a5c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40a5ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40a5ce:	ea94 0f05 	teq	r4, r5
  40a5d2:	bf08      	it	eq
  40a5d4:	ea90 0f02 	teqeq	r0, r2
  40a5d8:	bf1f      	itttt	ne
  40a5da:	ea54 0c00 	orrsne.w	ip, r4, r0
  40a5de:	ea55 0c02 	orrsne.w	ip, r5, r2
  40a5e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40a5e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40a5ea:	f000 80e2 	beq.w	40a7b2 <__adddf3+0x1ee>
  40a5ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40a5f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40a5f6:	bfb8      	it	lt
  40a5f8:	426d      	neglt	r5, r5
  40a5fa:	dd0c      	ble.n	40a616 <__adddf3+0x52>
  40a5fc:	442c      	add	r4, r5
  40a5fe:	ea80 0202 	eor.w	r2, r0, r2
  40a602:	ea81 0303 	eor.w	r3, r1, r3
  40a606:	ea82 0000 	eor.w	r0, r2, r0
  40a60a:	ea83 0101 	eor.w	r1, r3, r1
  40a60e:	ea80 0202 	eor.w	r2, r0, r2
  40a612:	ea81 0303 	eor.w	r3, r1, r3
  40a616:	2d36      	cmp	r5, #54	; 0x36
  40a618:	bf88      	it	hi
  40a61a:	bd30      	pophi	{r4, r5, pc}
  40a61c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40a620:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40a624:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40a628:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40a62c:	d002      	beq.n	40a634 <__adddf3+0x70>
  40a62e:	4240      	negs	r0, r0
  40a630:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40a634:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40a638:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40a63c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40a640:	d002      	beq.n	40a648 <__adddf3+0x84>
  40a642:	4252      	negs	r2, r2
  40a644:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40a648:	ea94 0f05 	teq	r4, r5
  40a64c:	f000 80a7 	beq.w	40a79e <__adddf3+0x1da>
  40a650:	f1a4 0401 	sub.w	r4, r4, #1
  40a654:	f1d5 0e20 	rsbs	lr, r5, #32
  40a658:	db0d      	blt.n	40a676 <__adddf3+0xb2>
  40a65a:	fa02 fc0e 	lsl.w	ip, r2, lr
  40a65e:	fa22 f205 	lsr.w	r2, r2, r5
  40a662:	1880      	adds	r0, r0, r2
  40a664:	f141 0100 	adc.w	r1, r1, #0
  40a668:	fa03 f20e 	lsl.w	r2, r3, lr
  40a66c:	1880      	adds	r0, r0, r2
  40a66e:	fa43 f305 	asr.w	r3, r3, r5
  40a672:	4159      	adcs	r1, r3
  40a674:	e00e      	b.n	40a694 <__adddf3+0xd0>
  40a676:	f1a5 0520 	sub.w	r5, r5, #32
  40a67a:	f10e 0e20 	add.w	lr, lr, #32
  40a67e:	2a01      	cmp	r2, #1
  40a680:	fa03 fc0e 	lsl.w	ip, r3, lr
  40a684:	bf28      	it	cs
  40a686:	f04c 0c02 	orrcs.w	ip, ip, #2
  40a68a:	fa43 f305 	asr.w	r3, r3, r5
  40a68e:	18c0      	adds	r0, r0, r3
  40a690:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40a694:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a698:	d507      	bpl.n	40a6aa <__adddf3+0xe6>
  40a69a:	f04f 0e00 	mov.w	lr, #0
  40a69e:	f1dc 0c00 	rsbs	ip, ip, #0
  40a6a2:	eb7e 0000 	sbcs.w	r0, lr, r0
  40a6a6:	eb6e 0101 	sbc.w	r1, lr, r1
  40a6aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40a6ae:	d31b      	bcc.n	40a6e8 <__adddf3+0x124>
  40a6b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40a6b4:	d30c      	bcc.n	40a6d0 <__adddf3+0x10c>
  40a6b6:	0849      	lsrs	r1, r1, #1
  40a6b8:	ea5f 0030 	movs.w	r0, r0, rrx
  40a6bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40a6c0:	f104 0401 	add.w	r4, r4, #1
  40a6c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40a6c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40a6cc:	f080 809a 	bcs.w	40a804 <__adddf3+0x240>
  40a6d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40a6d4:	bf08      	it	eq
  40a6d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40a6da:	f150 0000 	adcs.w	r0, r0, #0
  40a6de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a6e2:	ea41 0105 	orr.w	r1, r1, r5
  40a6e6:	bd30      	pop	{r4, r5, pc}
  40a6e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40a6ec:	4140      	adcs	r0, r0
  40a6ee:	eb41 0101 	adc.w	r1, r1, r1
  40a6f2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40a6f6:	f1a4 0401 	sub.w	r4, r4, #1
  40a6fa:	d1e9      	bne.n	40a6d0 <__adddf3+0x10c>
  40a6fc:	f091 0f00 	teq	r1, #0
  40a700:	bf04      	itt	eq
  40a702:	4601      	moveq	r1, r0
  40a704:	2000      	moveq	r0, #0
  40a706:	fab1 f381 	clz	r3, r1
  40a70a:	bf08      	it	eq
  40a70c:	3320      	addeq	r3, #32
  40a70e:	f1a3 030b 	sub.w	r3, r3, #11
  40a712:	f1b3 0220 	subs.w	r2, r3, #32
  40a716:	da0c      	bge.n	40a732 <__adddf3+0x16e>
  40a718:	320c      	adds	r2, #12
  40a71a:	dd08      	ble.n	40a72e <__adddf3+0x16a>
  40a71c:	f102 0c14 	add.w	ip, r2, #20
  40a720:	f1c2 020c 	rsb	r2, r2, #12
  40a724:	fa01 f00c 	lsl.w	r0, r1, ip
  40a728:	fa21 f102 	lsr.w	r1, r1, r2
  40a72c:	e00c      	b.n	40a748 <__adddf3+0x184>
  40a72e:	f102 0214 	add.w	r2, r2, #20
  40a732:	bfd8      	it	le
  40a734:	f1c2 0c20 	rsble	ip, r2, #32
  40a738:	fa01 f102 	lsl.w	r1, r1, r2
  40a73c:	fa20 fc0c 	lsr.w	ip, r0, ip
  40a740:	bfdc      	itt	le
  40a742:	ea41 010c 	orrle.w	r1, r1, ip
  40a746:	4090      	lslle	r0, r2
  40a748:	1ae4      	subs	r4, r4, r3
  40a74a:	bfa2      	ittt	ge
  40a74c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40a750:	4329      	orrge	r1, r5
  40a752:	bd30      	popge	{r4, r5, pc}
  40a754:	ea6f 0404 	mvn.w	r4, r4
  40a758:	3c1f      	subs	r4, #31
  40a75a:	da1c      	bge.n	40a796 <__adddf3+0x1d2>
  40a75c:	340c      	adds	r4, #12
  40a75e:	dc0e      	bgt.n	40a77e <__adddf3+0x1ba>
  40a760:	f104 0414 	add.w	r4, r4, #20
  40a764:	f1c4 0220 	rsb	r2, r4, #32
  40a768:	fa20 f004 	lsr.w	r0, r0, r4
  40a76c:	fa01 f302 	lsl.w	r3, r1, r2
  40a770:	ea40 0003 	orr.w	r0, r0, r3
  40a774:	fa21 f304 	lsr.w	r3, r1, r4
  40a778:	ea45 0103 	orr.w	r1, r5, r3
  40a77c:	bd30      	pop	{r4, r5, pc}
  40a77e:	f1c4 040c 	rsb	r4, r4, #12
  40a782:	f1c4 0220 	rsb	r2, r4, #32
  40a786:	fa20 f002 	lsr.w	r0, r0, r2
  40a78a:	fa01 f304 	lsl.w	r3, r1, r4
  40a78e:	ea40 0003 	orr.w	r0, r0, r3
  40a792:	4629      	mov	r1, r5
  40a794:	bd30      	pop	{r4, r5, pc}
  40a796:	fa21 f004 	lsr.w	r0, r1, r4
  40a79a:	4629      	mov	r1, r5
  40a79c:	bd30      	pop	{r4, r5, pc}
  40a79e:	f094 0f00 	teq	r4, #0
  40a7a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40a7a6:	bf06      	itte	eq
  40a7a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40a7ac:	3401      	addeq	r4, #1
  40a7ae:	3d01      	subne	r5, #1
  40a7b0:	e74e      	b.n	40a650 <__adddf3+0x8c>
  40a7b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40a7b6:	bf18      	it	ne
  40a7b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40a7bc:	d029      	beq.n	40a812 <__adddf3+0x24e>
  40a7be:	ea94 0f05 	teq	r4, r5
  40a7c2:	bf08      	it	eq
  40a7c4:	ea90 0f02 	teqeq	r0, r2
  40a7c8:	d005      	beq.n	40a7d6 <__adddf3+0x212>
  40a7ca:	ea54 0c00 	orrs.w	ip, r4, r0
  40a7ce:	bf04      	itt	eq
  40a7d0:	4619      	moveq	r1, r3
  40a7d2:	4610      	moveq	r0, r2
  40a7d4:	bd30      	pop	{r4, r5, pc}
  40a7d6:	ea91 0f03 	teq	r1, r3
  40a7da:	bf1e      	ittt	ne
  40a7dc:	2100      	movne	r1, #0
  40a7de:	2000      	movne	r0, #0
  40a7e0:	bd30      	popne	{r4, r5, pc}
  40a7e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40a7e6:	d105      	bne.n	40a7f4 <__adddf3+0x230>
  40a7e8:	0040      	lsls	r0, r0, #1
  40a7ea:	4149      	adcs	r1, r1
  40a7ec:	bf28      	it	cs
  40a7ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40a7f2:	bd30      	pop	{r4, r5, pc}
  40a7f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40a7f8:	bf3c      	itt	cc
  40a7fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40a7fe:	bd30      	popcc	{r4, r5, pc}
  40a800:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a804:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40a808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40a80c:	f04f 0000 	mov.w	r0, #0
  40a810:	bd30      	pop	{r4, r5, pc}
  40a812:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40a816:	bf1a      	itte	ne
  40a818:	4619      	movne	r1, r3
  40a81a:	4610      	movne	r0, r2
  40a81c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40a820:	bf1c      	itt	ne
  40a822:	460b      	movne	r3, r1
  40a824:	4602      	movne	r2, r0
  40a826:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40a82a:	bf06      	itte	eq
  40a82c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40a830:	ea91 0f03 	teqeq	r1, r3
  40a834:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40a838:	bd30      	pop	{r4, r5, pc}
  40a83a:	bf00      	nop

0040a83c <__aeabi_ui2d>:
  40a83c:	f090 0f00 	teq	r0, #0
  40a840:	bf04      	itt	eq
  40a842:	2100      	moveq	r1, #0
  40a844:	4770      	bxeq	lr
  40a846:	b530      	push	{r4, r5, lr}
  40a848:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a84c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a850:	f04f 0500 	mov.w	r5, #0
  40a854:	f04f 0100 	mov.w	r1, #0
  40a858:	e750      	b.n	40a6fc <__adddf3+0x138>
  40a85a:	bf00      	nop

0040a85c <__aeabi_i2d>:
  40a85c:	f090 0f00 	teq	r0, #0
  40a860:	bf04      	itt	eq
  40a862:	2100      	moveq	r1, #0
  40a864:	4770      	bxeq	lr
  40a866:	b530      	push	{r4, r5, lr}
  40a868:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a86c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a870:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40a874:	bf48      	it	mi
  40a876:	4240      	negmi	r0, r0
  40a878:	f04f 0100 	mov.w	r1, #0
  40a87c:	e73e      	b.n	40a6fc <__adddf3+0x138>
  40a87e:	bf00      	nop

0040a880 <__aeabi_f2d>:
  40a880:	0042      	lsls	r2, r0, #1
  40a882:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40a886:	ea4f 0131 	mov.w	r1, r1, rrx
  40a88a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40a88e:	bf1f      	itttt	ne
  40a890:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40a894:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40a898:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40a89c:	4770      	bxne	lr
  40a89e:	f092 0f00 	teq	r2, #0
  40a8a2:	bf14      	ite	ne
  40a8a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40a8a8:	4770      	bxeq	lr
  40a8aa:	b530      	push	{r4, r5, lr}
  40a8ac:	f44f 7460 	mov.w	r4, #896	; 0x380
  40a8b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40a8b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40a8b8:	e720      	b.n	40a6fc <__adddf3+0x138>
  40a8ba:	bf00      	nop

0040a8bc <__aeabi_ul2d>:
  40a8bc:	ea50 0201 	orrs.w	r2, r0, r1
  40a8c0:	bf08      	it	eq
  40a8c2:	4770      	bxeq	lr
  40a8c4:	b530      	push	{r4, r5, lr}
  40a8c6:	f04f 0500 	mov.w	r5, #0
  40a8ca:	e00a      	b.n	40a8e2 <__aeabi_l2d+0x16>

0040a8cc <__aeabi_l2d>:
  40a8cc:	ea50 0201 	orrs.w	r2, r0, r1
  40a8d0:	bf08      	it	eq
  40a8d2:	4770      	bxeq	lr
  40a8d4:	b530      	push	{r4, r5, lr}
  40a8d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40a8da:	d502      	bpl.n	40a8e2 <__aeabi_l2d+0x16>
  40a8dc:	4240      	negs	r0, r0
  40a8de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40a8e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40a8e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40a8ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40a8ee:	f43f aedc 	beq.w	40a6aa <__adddf3+0xe6>
  40a8f2:	f04f 0203 	mov.w	r2, #3
  40a8f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40a8fa:	bf18      	it	ne
  40a8fc:	3203      	addne	r2, #3
  40a8fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40a902:	bf18      	it	ne
  40a904:	3203      	addne	r2, #3
  40a906:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40a90a:	f1c2 0320 	rsb	r3, r2, #32
  40a90e:	fa00 fc03 	lsl.w	ip, r0, r3
  40a912:	fa20 f002 	lsr.w	r0, r0, r2
  40a916:	fa01 fe03 	lsl.w	lr, r1, r3
  40a91a:	ea40 000e 	orr.w	r0, r0, lr
  40a91e:	fa21 f102 	lsr.w	r1, r1, r2
  40a922:	4414      	add	r4, r2
  40a924:	e6c1      	b.n	40a6aa <__adddf3+0xe6>
  40a926:	bf00      	nop

0040a928 <__aeabi_dmul>:
  40a928:	b570      	push	{r4, r5, r6, lr}
  40a92a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40a92e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40a932:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40a936:	bf1d      	ittte	ne
  40a938:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40a93c:	ea94 0f0c 	teqne	r4, ip
  40a940:	ea95 0f0c 	teqne	r5, ip
  40a944:	f000 f8de 	bleq	40ab04 <__aeabi_dmul+0x1dc>
  40a948:	442c      	add	r4, r5
  40a94a:	ea81 0603 	eor.w	r6, r1, r3
  40a94e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40a952:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40a956:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40a95a:	bf18      	it	ne
  40a95c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40a960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40a964:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40a968:	d038      	beq.n	40a9dc <__aeabi_dmul+0xb4>
  40a96a:	fba0 ce02 	umull	ip, lr, r0, r2
  40a96e:	f04f 0500 	mov.w	r5, #0
  40a972:	fbe1 e502 	umlal	lr, r5, r1, r2
  40a976:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40a97a:	fbe0 e503 	umlal	lr, r5, r0, r3
  40a97e:	f04f 0600 	mov.w	r6, #0
  40a982:	fbe1 5603 	umlal	r5, r6, r1, r3
  40a986:	f09c 0f00 	teq	ip, #0
  40a98a:	bf18      	it	ne
  40a98c:	f04e 0e01 	orrne.w	lr, lr, #1
  40a990:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40a994:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40a998:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40a99c:	d204      	bcs.n	40a9a8 <__aeabi_dmul+0x80>
  40a99e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40a9a2:	416d      	adcs	r5, r5
  40a9a4:	eb46 0606 	adc.w	r6, r6, r6
  40a9a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40a9ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40a9b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40a9b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40a9b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40a9bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40a9c0:	bf88      	it	hi
  40a9c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40a9c6:	d81e      	bhi.n	40aa06 <__aeabi_dmul+0xde>
  40a9c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40a9cc:	bf08      	it	eq
  40a9ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40a9d2:	f150 0000 	adcs.w	r0, r0, #0
  40a9d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40a9da:	bd70      	pop	{r4, r5, r6, pc}
  40a9dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40a9e0:	ea46 0101 	orr.w	r1, r6, r1
  40a9e4:	ea40 0002 	orr.w	r0, r0, r2
  40a9e8:	ea81 0103 	eor.w	r1, r1, r3
  40a9ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40a9f0:	bfc2      	ittt	gt
  40a9f2:	ebd4 050c 	rsbsgt	r5, r4, ip
  40a9f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40a9fa:	bd70      	popgt	{r4, r5, r6, pc}
  40a9fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40aa00:	f04f 0e00 	mov.w	lr, #0
  40aa04:	3c01      	subs	r4, #1
  40aa06:	f300 80ab 	bgt.w	40ab60 <__aeabi_dmul+0x238>
  40aa0a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40aa0e:	bfde      	ittt	le
  40aa10:	2000      	movle	r0, #0
  40aa12:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40aa16:	bd70      	pople	{r4, r5, r6, pc}
  40aa18:	f1c4 0400 	rsb	r4, r4, #0
  40aa1c:	3c20      	subs	r4, #32
  40aa1e:	da35      	bge.n	40aa8c <__aeabi_dmul+0x164>
  40aa20:	340c      	adds	r4, #12
  40aa22:	dc1b      	bgt.n	40aa5c <__aeabi_dmul+0x134>
  40aa24:	f104 0414 	add.w	r4, r4, #20
  40aa28:	f1c4 0520 	rsb	r5, r4, #32
  40aa2c:	fa00 f305 	lsl.w	r3, r0, r5
  40aa30:	fa20 f004 	lsr.w	r0, r0, r4
  40aa34:	fa01 f205 	lsl.w	r2, r1, r5
  40aa38:	ea40 0002 	orr.w	r0, r0, r2
  40aa3c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40aa40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40aa44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40aa48:	fa21 f604 	lsr.w	r6, r1, r4
  40aa4c:	eb42 0106 	adc.w	r1, r2, r6
  40aa50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40aa54:	bf08      	it	eq
  40aa56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40aa5a:	bd70      	pop	{r4, r5, r6, pc}
  40aa5c:	f1c4 040c 	rsb	r4, r4, #12
  40aa60:	f1c4 0520 	rsb	r5, r4, #32
  40aa64:	fa00 f304 	lsl.w	r3, r0, r4
  40aa68:	fa20 f005 	lsr.w	r0, r0, r5
  40aa6c:	fa01 f204 	lsl.w	r2, r1, r4
  40aa70:	ea40 0002 	orr.w	r0, r0, r2
  40aa74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40aa78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40aa7c:	f141 0100 	adc.w	r1, r1, #0
  40aa80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40aa84:	bf08      	it	eq
  40aa86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40aa8a:	bd70      	pop	{r4, r5, r6, pc}
  40aa8c:	f1c4 0520 	rsb	r5, r4, #32
  40aa90:	fa00 f205 	lsl.w	r2, r0, r5
  40aa94:	ea4e 0e02 	orr.w	lr, lr, r2
  40aa98:	fa20 f304 	lsr.w	r3, r0, r4
  40aa9c:	fa01 f205 	lsl.w	r2, r1, r5
  40aaa0:	ea43 0302 	orr.w	r3, r3, r2
  40aaa4:	fa21 f004 	lsr.w	r0, r1, r4
  40aaa8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40aaac:	fa21 f204 	lsr.w	r2, r1, r4
  40aab0:	ea20 0002 	bic.w	r0, r0, r2
  40aab4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40aab8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40aabc:	bf08      	it	eq
  40aabe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40aac2:	bd70      	pop	{r4, r5, r6, pc}
  40aac4:	f094 0f00 	teq	r4, #0
  40aac8:	d10f      	bne.n	40aaea <__aeabi_dmul+0x1c2>
  40aaca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40aace:	0040      	lsls	r0, r0, #1
  40aad0:	eb41 0101 	adc.w	r1, r1, r1
  40aad4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40aad8:	bf08      	it	eq
  40aada:	3c01      	subeq	r4, #1
  40aadc:	d0f7      	beq.n	40aace <__aeabi_dmul+0x1a6>
  40aade:	ea41 0106 	orr.w	r1, r1, r6
  40aae2:	f095 0f00 	teq	r5, #0
  40aae6:	bf18      	it	ne
  40aae8:	4770      	bxne	lr
  40aaea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40aaee:	0052      	lsls	r2, r2, #1
  40aaf0:	eb43 0303 	adc.w	r3, r3, r3
  40aaf4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40aaf8:	bf08      	it	eq
  40aafa:	3d01      	subeq	r5, #1
  40aafc:	d0f7      	beq.n	40aaee <__aeabi_dmul+0x1c6>
  40aafe:	ea43 0306 	orr.w	r3, r3, r6
  40ab02:	4770      	bx	lr
  40ab04:	ea94 0f0c 	teq	r4, ip
  40ab08:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40ab0c:	bf18      	it	ne
  40ab0e:	ea95 0f0c 	teqne	r5, ip
  40ab12:	d00c      	beq.n	40ab2e <__aeabi_dmul+0x206>
  40ab14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40ab18:	bf18      	it	ne
  40ab1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40ab1e:	d1d1      	bne.n	40aac4 <__aeabi_dmul+0x19c>
  40ab20:	ea81 0103 	eor.w	r1, r1, r3
  40ab24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40ab28:	f04f 0000 	mov.w	r0, #0
  40ab2c:	bd70      	pop	{r4, r5, r6, pc}
  40ab2e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40ab32:	bf06      	itte	eq
  40ab34:	4610      	moveq	r0, r2
  40ab36:	4619      	moveq	r1, r3
  40ab38:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40ab3c:	d019      	beq.n	40ab72 <__aeabi_dmul+0x24a>
  40ab3e:	ea94 0f0c 	teq	r4, ip
  40ab42:	d102      	bne.n	40ab4a <__aeabi_dmul+0x222>
  40ab44:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40ab48:	d113      	bne.n	40ab72 <__aeabi_dmul+0x24a>
  40ab4a:	ea95 0f0c 	teq	r5, ip
  40ab4e:	d105      	bne.n	40ab5c <__aeabi_dmul+0x234>
  40ab50:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40ab54:	bf1c      	itt	ne
  40ab56:	4610      	movne	r0, r2
  40ab58:	4619      	movne	r1, r3
  40ab5a:	d10a      	bne.n	40ab72 <__aeabi_dmul+0x24a>
  40ab5c:	ea81 0103 	eor.w	r1, r1, r3
  40ab60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40ab64:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40ab68:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40ab6c:	f04f 0000 	mov.w	r0, #0
  40ab70:	bd70      	pop	{r4, r5, r6, pc}
  40ab72:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40ab76:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40ab7a:	bd70      	pop	{r4, r5, r6, pc}

0040ab7c <__aeabi_ddiv>:
  40ab7c:	b570      	push	{r4, r5, r6, lr}
  40ab7e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40ab82:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40ab86:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40ab8a:	bf1d      	ittte	ne
  40ab8c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40ab90:	ea94 0f0c 	teqne	r4, ip
  40ab94:	ea95 0f0c 	teqne	r5, ip
  40ab98:	f000 f8a7 	bleq	40acea <__aeabi_ddiv+0x16e>
  40ab9c:	eba4 0405 	sub.w	r4, r4, r5
  40aba0:	ea81 0e03 	eor.w	lr, r1, r3
  40aba4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40aba8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40abac:	f000 8088 	beq.w	40acc0 <__aeabi_ddiv+0x144>
  40abb0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40abb4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40abb8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40abbc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40abc0:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40abc4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40abc8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40abcc:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40abd0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40abd4:	429d      	cmp	r5, r3
  40abd6:	bf08      	it	eq
  40abd8:	4296      	cmpeq	r6, r2
  40abda:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40abde:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40abe2:	d202      	bcs.n	40abea <__aeabi_ddiv+0x6e>
  40abe4:	085b      	lsrs	r3, r3, #1
  40abe6:	ea4f 0232 	mov.w	r2, r2, rrx
  40abea:	1ab6      	subs	r6, r6, r2
  40abec:	eb65 0503 	sbc.w	r5, r5, r3
  40abf0:	085b      	lsrs	r3, r3, #1
  40abf2:	ea4f 0232 	mov.w	r2, r2, rrx
  40abf6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40abfa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40abfe:	ebb6 0e02 	subs.w	lr, r6, r2
  40ac02:	eb75 0e03 	sbcs.w	lr, r5, r3
  40ac06:	bf22      	ittt	cs
  40ac08:	1ab6      	subcs	r6, r6, r2
  40ac0a:	4675      	movcs	r5, lr
  40ac0c:	ea40 000c 	orrcs.w	r0, r0, ip
  40ac10:	085b      	lsrs	r3, r3, #1
  40ac12:	ea4f 0232 	mov.w	r2, r2, rrx
  40ac16:	ebb6 0e02 	subs.w	lr, r6, r2
  40ac1a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40ac1e:	bf22      	ittt	cs
  40ac20:	1ab6      	subcs	r6, r6, r2
  40ac22:	4675      	movcs	r5, lr
  40ac24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40ac28:	085b      	lsrs	r3, r3, #1
  40ac2a:	ea4f 0232 	mov.w	r2, r2, rrx
  40ac2e:	ebb6 0e02 	subs.w	lr, r6, r2
  40ac32:	eb75 0e03 	sbcs.w	lr, r5, r3
  40ac36:	bf22      	ittt	cs
  40ac38:	1ab6      	subcs	r6, r6, r2
  40ac3a:	4675      	movcs	r5, lr
  40ac3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40ac40:	085b      	lsrs	r3, r3, #1
  40ac42:	ea4f 0232 	mov.w	r2, r2, rrx
  40ac46:	ebb6 0e02 	subs.w	lr, r6, r2
  40ac4a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40ac4e:	bf22      	ittt	cs
  40ac50:	1ab6      	subcs	r6, r6, r2
  40ac52:	4675      	movcs	r5, lr
  40ac54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40ac58:	ea55 0e06 	orrs.w	lr, r5, r6
  40ac5c:	d018      	beq.n	40ac90 <__aeabi_ddiv+0x114>
  40ac5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40ac62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40ac66:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40ac6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40ac6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40ac72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40ac76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40ac7a:	d1c0      	bne.n	40abfe <__aeabi_ddiv+0x82>
  40ac7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40ac80:	d10b      	bne.n	40ac9a <__aeabi_ddiv+0x11e>
  40ac82:	ea41 0100 	orr.w	r1, r1, r0
  40ac86:	f04f 0000 	mov.w	r0, #0
  40ac8a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40ac8e:	e7b6      	b.n	40abfe <__aeabi_ddiv+0x82>
  40ac90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40ac94:	bf04      	itt	eq
  40ac96:	4301      	orreq	r1, r0
  40ac98:	2000      	moveq	r0, #0
  40ac9a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40ac9e:	bf88      	it	hi
  40aca0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40aca4:	f63f aeaf 	bhi.w	40aa06 <__aeabi_dmul+0xde>
  40aca8:	ebb5 0c03 	subs.w	ip, r5, r3
  40acac:	bf04      	itt	eq
  40acae:	ebb6 0c02 	subseq.w	ip, r6, r2
  40acb2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40acb6:	f150 0000 	adcs.w	r0, r0, #0
  40acba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40acbe:	bd70      	pop	{r4, r5, r6, pc}
  40acc0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40acc4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40acc8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40accc:	bfc2      	ittt	gt
  40acce:	ebd4 050c 	rsbsgt	r5, r4, ip
  40acd2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40acd6:	bd70      	popgt	{r4, r5, r6, pc}
  40acd8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40acdc:	f04f 0e00 	mov.w	lr, #0
  40ace0:	3c01      	subs	r4, #1
  40ace2:	e690      	b.n	40aa06 <__aeabi_dmul+0xde>
  40ace4:	ea45 0e06 	orr.w	lr, r5, r6
  40ace8:	e68d      	b.n	40aa06 <__aeabi_dmul+0xde>
  40acea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40acee:	ea94 0f0c 	teq	r4, ip
  40acf2:	bf08      	it	eq
  40acf4:	ea95 0f0c 	teqeq	r5, ip
  40acf8:	f43f af3b 	beq.w	40ab72 <__aeabi_dmul+0x24a>
  40acfc:	ea94 0f0c 	teq	r4, ip
  40ad00:	d10a      	bne.n	40ad18 <__aeabi_ddiv+0x19c>
  40ad02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40ad06:	f47f af34 	bne.w	40ab72 <__aeabi_dmul+0x24a>
  40ad0a:	ea95 0f0c 	teq	r5, ip
  40ad0e:	f47f af25 	bne.w	40ab5c <__aeabi_dmul+0x234>
  40ad12:	4610      	mov	r0, r2
  40ad14:	4619      	mov	r1, r3
  40ad16:	e72c      	b.n	40ab72 <__aeabi_dmul+0x24a>
  40ad18:	ea95 0f0c 	teq	r5, ip
  40ad1c:	d106      	bne.n	40ad2c <__aeabi_ddiv+0x1b0>
  40ad1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40ad22:	f43f aefd 	beq.w	40ab20 <__aeabi_dmul+0x1f8>
  40ad26:	4610      	mov	r0, r2
  40ad28:	4619      	mov	r1, r3
  40ad2a:	e722      	b.n	40ab72 <__aeabi_dmul+0x24a>
  40ad2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40ad30:	bf18      	it	ne
  40ad32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40ad36:	f47f aec5 	bne.w	40aac4 <__aeabi_dmul+0x19c>
  40ad3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40ad3e:	f47f af0d 	bne.w	40ab5c <__aeabi_dmul+0x234>
  40ad42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40ad46:	f47f aeeb 	bne.w	40ab20 <__aeabi_dmul+0x1f8>
  40ad4a:	e712      	b.n	40ab72 <__aeabi_dmul+0x24a>

0040ad4c <__gedf2>:
  40ad4c:	f04f 3cff 	mov.w	ip, #4294967295
  40ad50:	e006      	b.n	40ad60 <__cmpdf2+0x4>
  40ad52:	bf00      	nop

0040ad54 <__ledf2>:
  40ad54:	f04f 0c01 	mov.w	ip, #1
  40ad58:	e002      	b.n	40ad60 <__cmpdf2+0x4>
  40ad5a:	bf00      	nop

0040ad5c <__cmpdf2>:
  40ad5c:	f04f 0c01 	mov.w	ip, #1
  40ad60:	f84d cd04 	str.w	ip, [sp, #-4]!
  40ad64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40ad68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ad6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40ad70:	bf18      	it	ne
  40ad72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40ad76:	d01b      	beq.n	40adb0 <__cmpdf2+0x54>
  40ad78:	b001      	add	sp, #4
  40ad7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40ad7e:	bf0c      	ite	eq
  40ad80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40ad84:	ea91 0f03 	teqne	r1, r3
  40ad88:	bf02      	ittt	eq
  40ad8a:	ea90 0f02 	teqeq	r0, r2
  40ad8e:	2000      	moveq	r0, #0
  40ad90:	4770      	bxeq	lr
  40ad92:	f110 0f00 	cmn.w	r0, #0
  40ad96:	ea91 0f03 	teq	r1, r3
  40ad9a:	bf58      	it	pl
  40ad9c:	4299      	cmppl	r1, r3
  40ad9e:	bf08      	it	eq
  40ada0:	4290      	cmpeq	r0, r2
  40ada2:	bf2c      	ite	cs
  40ada4:	17d8      	asrcs	r0, r3, #31
  40ada6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40adaa:	f040 0001 	orr.w	r0, r0, #1
  40adae:	4770      	bx	lr
  40adb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40adb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40adb8:	d102      	bne.n	40adc0 <__cmpdf2+0x64>
  40adba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40adbe:	d107      	bne.n	40add0 <__cmpdf2+0x74>
  40adc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40adc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40adc8:	d1d6      	bne.n	40ad78 <__cmpdf2+0x1c>
  40adca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40adce:	d0d3      	beq.n	40ad78 <__cmpdf2+0x1c>
  40add0:	f85d 0b04 	ldr.w	r0, [sp], #4
  40add4:	4770      	bx	lr
  40add6:	bf00      	nop

0040add8 <__aeabi_cdrcmple>:
  40add8:	4684      	mov	ip, r0
  40adda:	4610      	mov	r0, r2
  40addc:	4662      	mov	r2, ip
  40adde:	468c      	mov	ip, r1
  40ade0:	4619      	mov	r1, r3
  40ade2:	4663      	mov	r3, ip
  40ade4:	e000      	b.n	40ade8 <__aeabi_cdcmpeq>
  40ade6:	bf00      	nop

0040ade8 <__aeabi_cdcmpeq>:
  40ade8:	b501      	push	{r0, lr}
  40adea:	f7ff ffb7 	bl	40ad5c <__cmpdf2>
  40adee:	2800      	cmp	r0, #0
  40adf0:	bf48      	it	mi
  40adf2:	f110 0f00 	cmnmi.w	r0, #0
  40adf6:	bd01      	pop	{r0, pc}

0040adf8 <__aeabi_dcmpeq>:
  40adf8:	f84d ed08 	str.w	lr, [sp, #-8]!
  40adfc:	f7ff fff4 	bl	40ade8 <__aeabi_cdcmpeq>
  40ae00:	bf0c      	ite	eq
  40ae02:	2001      	moveq	r0, #1
  40ae04:	2000      	movne	r0, #0
  40ae06:	f85d fb08 	ldr.w	pc, [sp], #8
  40ae0a:	bf00      	nop

0040ae0c <__aeabi_dcmplt>:
  40ae0c:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ae10:	f7ff ffea 	bl	40ade8 <__aeabi_cdcmpeq>
  40ae14:	bf34      	ite	cc
  40ae16:	2001      	movcc	r0, #1
  40ae18:	2000      	movcs	r0, #0
  40ae1a:	f85d fb08 	ldr.w	pc, [sp], #8
  40ae1e:	bf00      	nop

0040ae20 <__aeabi_dcmple>:
  40ae20:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ae24:	f7ff ffe0 	bl	40ade8 <__aeabi_cdcmpeq>
  40ae28:	bf94      	ite	ls
  40ae2a:	2001      	movls	r0, #1
  40ae2c:	2000      	movhi	r0, #0
  40ae2e:	f85d fb08 	ldr.w	pc, [sp], #8
  40ae32:	bf00      	nop

0040ae34 <__aeabi_dcmpge>:
  40ae34:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ae38:	f7ff ffce 	bl	40add8 <__aeabi_cdrcmple>
  40ae3c:	bf94      	ite	ls
  40ae3e:	2001      	movls	r0, #1
  40ae40:	2000      	movhi	r0, #0
  40ae42:	f85d fb08 	ldr.w	pc, [sp], #8
  40ae46:	bf00      	nop

0040ae48 <__aeabi_dcmpgt>:
  40ae48:	f84d ed08 	str.w	lr, [sp, #-8]!
  40ae4c:	f7ff ffc4 	bl	40add8 <__aeabi_cdrcmple>
  40ae50:	bf34      	ite	cc
  40ae52:	2001      	movcc	r0, #1
  40ae54:	2000      	movcs	r0, #0
  40ae56:	f85d fb08 	ldr.w	pc, [sp], #8
  40ae5a:	bf00      	nop

0040ae5c <__aeabi_dcmpun>:
  40ae5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40ae60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ae64:	d102      	bne.n	40ae6c <__aeabi_dcmpun+0x10>
  40ae66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40ae6a:	d10a      	bne.n	40ae82 <__aeabi_dcmpun+0x26>
  40ae6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40ae70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40ae74:	d102      	bne.n	40ae7c <__aeabi_dcmpun+0x20>
  40ae76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40ae7a:	d102      	bne.n	40ae82 <__aeabi_dcmpun+0x26>
  40ae7c:	f04f 0000 	mov.w	r0, #0
  40ae80:	4770      	bx	lr
  40ae82:	f04f 0001 	mov.w	r0, #1
  40ae86:	4770      	bx	lr

0040ae88 <__aeabi_d2iz>:
  40ae88:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40ae8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40ae90:	d215      	bcs.n	40aebe <__aeabi_d2iz+0x36>
  40ae92:	d511      	bpl.n	40aeb8 <__aeabi_d2iz+0x30>
  40ae94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40ae98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40ae9c:	d912      	bls.n	40aec4 <__aeabi_d2iz+0x3c>
  40ae9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40aea2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40aea6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40aeaa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40aeae:	fa23 f002 	lsr.w	r0, r3, r2
  40aeb2:	bf18      	it	ne
  40aeb4:	4240      	negne	r0, r0
  40aeb6:	4770      	bx	lr
  40aeb8:	f04f 0000 	mov.w	r0, #0
  40aebc:	4770      	bx	lr
  40aebe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40aec2:	d105      	bne.n	40aed0 <__aeabi_d2iz+0x48>
  40aec4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40aec8:	bf08      	it	eq
  40aeca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40aece:	4770      	bx	lr
  40aed0:	f04f 0000 	mov.w	r0, #0
  40aed4:	4770      	bx	lr
  40aed6:	bf00      	nop

0040aed8 <__aeabi_d2f>:
  40aed8:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40aedc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  40aee0:	bf24      	itt	cs
  40aee2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40aee6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  40aeea:	d90d      	bls.n	40af08 <__aeabi_d2f+0x30>
  40aeec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40aef0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  40aef4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  40aef8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  40aefc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  40af00:	bf08      	it	eq
  40af02:	f020 0001 	biceq.w	r0, r0, #1
  40af06:	4770      	bx	lr
  40af08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  40af0c:	d121      	bne.n	40af52 <__aeabi_d2f+0x7a>
  40af0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  40af12:	bfbc      	itt	lt
  40af14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  40af18:	4770      	bxlt	lr
  40af1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40af1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
  40af22:	f1c2 0218 	rsb	r2, r2, #24
  40af26:	f1c2 0c20 	rsb	ip, r2, #32
  40af2a:	fa10 f30c 	lsls.w	r3, r0, ip
  40af2e:	fa20 f002 	lsr.w	r0, r0, r2
  40af32:	bf18      	it	ne
  40af34:	f040 0001 	orrne.w	r0, r0, #1
  40af38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40af3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  40af40:	fa03 fc0c 	lsl.w	ip, r3, ip
  40af44:	ea40 000c 	orr.w	r0, r0, ip
  40af48:	fa23 f302 	lsr.w	r3, r3, r2
  40af4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
  40af50:	e7cc      	b.n	40aeec <__aeabi_d2f+0x14>
  40af52:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40af56:	d107      	bne.n	40af68 <__aeabi_d2f+0x90>
  40af58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  40af5c:	bf1e      	ittt	ne
  40af5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  40af62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  40af66:	4770      	bxne	lr
  40af68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  40af6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40af70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40af74:	4770      	bx	lr
  40af76:	bf00      	nop

0040af78 <__aeabi_frsub>:
  40af78:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  40af7c:	e002      	b.n	40af84 <__addsf3>
  40af7e:	bf00      	nop

0040af80 <__aeabi_fsub>:
  40af80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0040af84 <__addsf3>:
  40af84:	0042      	lsls	r2, r0, #1
  40af86:	bf1f      	itttt	ne
  40af88:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  40af8c:	ea92 0f03 	teqne	r2, r3
  40af90:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  40af94:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40af98:	d06a      	beq.n	40b070 <__addsf3+0xec>
  40af9a:	ea4f 6212 	mov.w	r2, r2, lsr #24
  40af9e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  40afa2:	bfc1      	itttt	gt
  40afa4:	18d2      	addgt	r2, r2, r3
  40afa6:	4041      	eorgt	r1, r0
  40afa8:	4048      	eorgt	r0, r1
  40afaa:	4041      	eorgt	r1, r0
  40afac:	bfb8      	it	lt
  40afae:	425b      	neglt	r3, r3
  40afb0:	2b19      	cmp	r3, #25
  40afb2:	bf88      	it	hi
  40afb4:	4770      	bxhi	lr
  40afb6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  40afba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40afbe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  40afc2:	bf18      	it	ne
  40afc4:	4240      	negne	r0, r0
  40afc6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40afca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  40afce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  40afd2:	bf18      	it	ne
  40afd4:	4249      	negne	r1, r1
  40afd6:	ea92 0f03 	teq	r2, r3
  40afda:	d03f      	beq.n	40b05c <__addsf3+0xd8>
  40afdc:	f1a2 0201 	sub.w	r2, r2, #1
  40afe0:	fa41 fc03 	asr.w	ip, r1, r3
  40afe4:	eb10 000c 	adds.w	r0, r0, ip
  40afe8:	f1c3 0320 	rsb	r3, r3, #32
  40afec:	fa01 f103 	lsl.w	r1, r1, r3
  40aff0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  40aff4:	d502      	bpl.n	40affc <__addsf3+0x78>
  40aff6:	4249      	negs	r1, r1
  40aff8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  40affc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  40b000:	d313      	bcc.n	40b02a <__addsf3+0xa6>
  40b002:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  40b006:	d306      	bcc.n	40b016 <__addsf3+0x92>
  40b008:	0840      	lsrs	r0, r0, #1
  40b00a:	ea4f 0131 	mov.w	r1, r1, rrx
  40b00e:	f102 0201 	add.w	r2, r2, #1
  40b012:	2afe      	cmp	r2, #254	; 0xfe
  40b014:	d251      	bcs.n	40b0ba <__addsf3+0x136>
  40b016:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  40b01a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40b01e:	bf08      	it	eq
  40b020:	f020 0001 	biceq.w	r0, r0, #1
  40b024:	ea40 0003 	orr.w	r0, r0, r3
  40b028:	4770      	bx	lr
  40b02a:	0049      	lsls	r1, r1, #1
  40b02c:	eb40 0000 	adc.w	r0, r0, r0
  40b030:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  40b034:	f1a2 0201 	sub.w	r2, r2, #1
  40b038:	d1ed      	bne.n	40b016 <__addsf3+0x92>
  40b03a:	fab0 fc80 	clz	ip, r0
  40b03e:	f1ac 0c08 	sub.w	ip, ip, #8
  40b042:	ebb2 020c 	subs.w	r2, r2, ip
  40b046:	fa00 f00c 	lsl.w	r0, r0, ip
  40b04a:	bfaa      	itet	ge
  40b04c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  40b050:	4252      	neglt	r2, r2
  40b052:	4318      	orrge	r0, r3
  40b054:	bfbc      	itt	lt
  40b056:	40d0      	lsrlt	r0, r2
  40b058:	4318      	orrlt	r0, r3
  40b05a:	4770      	bx	lr
  40b05c:	f092 0f00 	teq	r2, #0
  40b060:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  40b064:	bf06      	itte	eq
  40b066:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  40b06a:	3201      	addeq	r2, #1
  40b06c:	3b01      	subne	r3, #1
  40b06e:	e7b5      	b.n	40afdc <__addsf3+0x58>
  40b070:	ea4f 0341 	mov.w	r3, r1, lsl #1
  40b074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  40b078:	bf18      	it	ne
  40b07a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40b07e:	d021      	beq.n	40b0c4 <__addsf3+0x140>
  40b080:	ea92 0f03 	teq	r2, r3
  40b084:	d004      	beq.n	40b090 <__addsf3+0x10c>
  40b086:	f092 0f00 	teq	r2, #0
  40b08a:	bf08      	it	eq
  40b08c:	4608      	moveq	r0, r1
  40b08e:	4770      	bx	lr
  40b090:	ea90 0f01 	teq	r0, r1
  40b094:	bf1c      	itt	ne
  40b096:	2000      	movne	r0, #0
  40b098:	4770      	bxne	lr
  40b09a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  40b09e:	d104      	bne.n	40b0aa <__addsf3+0x126>
  40b0a0:	0040      	lsls	r0, r0, #1
  40b0a2:	bf28      	it	cs
  40b0a4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  40b0a8:	4770      	bx	lr
  40b0aa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  40b0ae:	bf3c      	itt	cc
  40b0b0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  40b0b4:	4770      	bxcc	lr
  40b0b6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  40b0ba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  40b0be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40b0c2:	4770      	bx	lr
  40b0c4:	ea7f 6222 	mvns.w	r2, r2, asr #24
  40b0c8:	bf16      	itet	ne
  40b0ca:	4608      	movne	r0, r1
  40b0cc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  40b0d0:	4601      	movne	r1, r0
  40b0d2:	0242      	lsls	r2, r0, #9
  40b0d4:	bf06      	itte	eq
  40b0d6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  40b0da:	ea90 0f01 	teqeq	r0, r1
  40b0de:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  40b0e2:	4770      	bx	lr

0040b0e4 <__aeabi_ui2f>:
  40b0e4:	f04f 0300 	mov.w	r3, #0
  40b0e8:	e004      	b.n	40b0f4 <__aeabi_i2f+0x8>
  40b0ea:	bf00      	nop

0040b0ec <__aeabi_i2f>:
  40b0ec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  40b0f0:	bf48      	it	mi
  40b0f2:	4240      	negmi	r0, r0
  40b0f4:	ea5f 0c00 	movs.w	ip, r0
  40b0f8:	bf08      	it	eq
  40b0fa:	4770      	bxeq	lr
  40b0fc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  40b100:	4601      	mov	r1, r0
  40b102:	f04f 0000 	mov.w	r0, #0
  40b106:	e01c      	b.n	40b142 <__aeabi_l2f+0x2a>

0040b108 <__aeabi_ul2f>:
  40b108:	ea50 0201 	orrs.w	r2, r0, r1
  40b10c:	bf08      	it	eq
  40b10e:	4770      	bxeq	lr
  40b110:	f04f 0300 	mov.w	r3, #0
  40b114:	e00a      	b.n	40b12c <__aeabi_l2f+0x14>
  40b116:	bf00      	nop

0040b118 <__aeabi_l2f>:
  40b118:	ea50 0201 	orrs.w	r2, r0, r1
  40b11c:	bf08      	it	eq
  40b11e:	4770      	bxeq	lr
  40b120:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  40b124:	d502      	bpl.n	40b12c <__aeabi_l2f+0x14>
  40b126:	4240      	negs	r0, r0
  40b128:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40b12c:	ea5f 0c01 	movs.w	ip, r1
  40b130:	bf02      	ittt	eq
  40b132:	4684      	moveq	ip, r0
  40b134:	4601      	moveq	r1, r0
  40b136:	2000      	moveq	r0, #0
  40b138:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  40b13c:	bf08      	it	eq
  40b13e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  40b142:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  40b146:	fabc f28c 	clz	r2, ip
  40b14a:	3a08      	subs	r2, #8
  40b14c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  40b150:	db10      	blt.n	40b174 <__aeabi_l2f+0x5c>
  40b152:	fa01 fc02 	lsl.w	ip, r1, r2
  40b156:	4463      	add	r3, ip
  40b158:	fa00 fc02 	lsl.w	ip, r0, r2
  40b15c:	f1c2 0220 	rsb	r2, r2, #32
  40b160:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40b164:	fa20 f202 	lsr.w	r2, r0, r2
  40b168:	eb43 0002 	adc.w	r0, r3, r2
  40b16c:	bf08      	it	eq
  40b16e:	f020 0001 	biceq.w	r0, r0, #1
  40b172:	4770      	bx	lr
  40b174:	f102 0220 	add.w	r2, r2, #32
  40b178:	fa01 fc02 	lsl.w	ip, r1, r2
  40b17c:	f1c2 0220 	rsb	r2, r2, #32
  40b180:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  40b184:	fa21 f202 	lsr.w	r2, r1, r2
  40b188:	eb43 0002 	adc.w	r0, r3, r2
  40b18c:	bf08      	it	eq
  40b18e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  40b192:	4770      	bx	lr

0040b194 <__aeabi_fmul>:
  40b194:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40b198:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  40b19c:	bf1e      	ittt	ne
  40b19e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  40b1a2:	ea92 0f0c 	teqne	r2, ip
  40b1a6:	ea93 0f0c 	teqne	r3, ip
  40b1aa:	d06f      	beq.n	40b28c <__aeabi_fmul+0xf8>
  40b1ac:	441a      	add	r2, r3
  40b1ae:	ea80 0c01 	eor.w	ip, r0, r1
  40b1b2:	0240      	lsls	r0, r0, #9
  40b1b4:	bf18      	it	ne
  40b1b6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  40b1ba:	d01e      	beq.n	40b1fa <__aeabi_fmul+0x66>
  40b1bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  40b1c0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  40b1c4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  40b1c8:	fba0 3101 	umull	r3, r1, r0, r1
  40b1cc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  40b1d0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  40b1d4:	bf3e      	ittt	cc
  40b1d6:	0049      	lslcc	r1, r1, #1
  40b1d8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  40b1dc:	005b      	lslcc	r3, r3, #1
  40b1de:	ea40 0001 	orr.w	r0, r0, r1
  40b1e2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  40b1e6:	2afd      	cmp	r2, #253	; 0xfd
  40b1e8:	d81d      	bhi.n	40b226 <__aeabi_fmul+0x92>
  40b1ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  40b1ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40b1f2:	bf08      	it	eq
  40b1f4:	f020 0001 	biceq.w	r0, r0, #1
  40b1f8:	4770      	bx	lr
  40b1fa:	f090 0f00 	teq	r0, #0
  40b1fe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  40b202:	bf08      	it	eq
  40b204:	0249      	lsleq	r1, r1, #9
  40b206:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  40b20a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  40b20e:	3a7f      	subs	r2, #127	; 0x7f
  40b210:	bfc2      	ittt	gt
  40b212:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  40b216:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  40b21a:	4770      	bxgt	lr
  40b21c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40b220:	f04f 0300 	mov.w	r3, #0
  40b224:	3a01      	subs	r2, #1
  40b226:	dc5d      	bgt.n	40b2e4 <__aeabi_fmul+0x150>
  40b228:	f112 0f19 	cmn.w	r2, #25
  40b22c:	bfdc      	itt	le
  40b22e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  40b232:	4770      	bxle	lr
  40b234:	f1c2 0200 	rsb	r2, r2, #0
  40b238:	0041      	lsls	r1, r0, #1
  40b23a:	fa21 f102 	lsr.w	r1, r1, r2
  40b23e:	f1c2 0220 	rsb	r2, r2, #32
  40b242:	fa00 fc02 	lsl.w	ip, r0, r2
  40b246:	ea5f 0031 	movs.w	r0, r1, rrx
  40b24a:	f140 0000 	adc.w	r0, r0, #0
  40b24e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  40b252:	bf08      	it	eq
  40b254:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  40b258:	4770      	bx	lr
  40b25a:	f092 0f00 	teq	r2, #0
  40b25e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  40b262:	bf02      	ittt	eq
  40b264:	0040      	lsleq	r0, r0, #1
  40b266:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  40b26a:	3a01      	subeq	r2, #1
  40b26c:	d0f9      	beq.n	40b262 <__aeabi_fmul+0xce>
  40b26e:	ea40 000c 	orr.w	r0, r0, ip
  40b272:	f093 0f00 	teq	r3, #0
  40b276:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40b27a:	bf02      	ittt	eq
  40b27c:	0049      	lsleq	r1, r1, #1
  40b27e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  40b282:	3b01      	subeq	r3, #1
  40b284:	d0f9      	beq.n	40b27a <__aeabi_fmul+0xe6>
  40b286:	ea41 010c 	orr.w	r1, r1, ip
  40b28a:	e78f      	b.n	40b1ac <__aeabi_fmul+0x18>
  40b28c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  40b290:	ea92 0f0c 	teq	r2, ip
  40b294:	bf18      	it	ne
  40b296:	ea93 0f0c 	teqne	r3, ip
  40b29a:	d00a      	beq.n	40b2b2 <__aeabi_fmul+0x11e>
  40b29c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  40b2a0:	bf18      	it	ne
  40b2a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  40b2a6:	d1d8      	bne.n	40b25a <__aeabi_fmul+0xc6>
  40b2a8:	ea80 0001 	eor.w	r0, r0, r1
  40b2ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  40b2b0:	4770      	bx	lr
  40b2b2:	f090 0f00 	teq	r0, #0
  40b2b6:	bf17      	itett	ne
  40b2b8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  40b2bc:	4608      	moveq	r0, r1
  40b2be:	f091 0f00 	teqne	r1, #0
  40b2c2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  40b2c6:	d014      	beq.n	40b2f2 <__aeabi_fmul+0x15e>
  40b2c8:	ea92 0f0c 	teq	r2, ip
  40b2cc:	d101      	bne.n	40b2d2 <__aeabi_fmul+0x13e>
  40b2ce:	0242      	lsls	r2, r0, #9
  40b2d0:	d10f      	bne.n	40b2f2 <__aeabi_fmul+0x15e>
  40b2d2:	ea93 0f0c 	teq	r3, ip
  40b2d6:	d103      	bne.n	40b2e0 <__aeabi_fmul+0x14c>
  40b2d8:	024b      	lsls	r3, r1, #9
  40b2da:	bf18      	it	ne
  40b2dc:	4608      	movne	r0, r1
  40b2de:	d108      	bne.n	40b2f2 <__aeabi_fmul+0x15e>
  40b2e0:	ea80 0001 	eor.w	r0, r0, r1
  40b2e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  40b2e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40b2ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40b2f0:	4770      	bx	lr
  40b2f2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40b2f6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  40b2fa:	4770      	bx	lr

0040b2fc <__aeabi_fdiv>:
  40b2fc:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40b300:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  40b304:	bf1e      	ittt	ne
  40b306:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  40b30a:	ea92 0f0c 	teqne	r2, ip
  40b30e:	ea93 0f0c 	teqne	r3, ip
  40b312:	d069      	beq.n	40b3e8 <__aeabi_fdiv+0xec>
  40b314:	eba2 0203 	sub.w	r2, r2, r3
  40b318:	ea80 0c01 	eor.w	ip, r0, r1
  40b31c:	0249      	lsls	r1, r1, #9
  40b31e:	ea4f 2040 	mov.w	r0, r0, lsl #9
  40b322:	d037      	beq.n	40b394 <__aeabi_fdiv+0x98>
  40b324:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40b328:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  40b32c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  40b330:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  40b334:	428b      	cmp	r3, r1
  40b336:	bf38      	it	cc
  40b338:	005b      	lslcc	r3, r3, #1
  40b33a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  40b33e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  40b342:	428b      	cmp	r3, r1
  40b344:	bf24      	itt	cs
  40b346:	1a5b      	subcs	r3, r3, r1
  40b348:	ea40 000c 	orrcs.w	r0, r0, ip
  40b34c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  40b350:	bf24      	itt	cs
  40b352:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  40b356:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40b35a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  40b35e:	bf24      	itt	cs
  40b360:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  40b364:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40b368:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  40b36c:	bf24      	itt	cs
  40b36e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  40b372:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40b376:	011b      	lsls	r3, r3, #4
  40b378:	bf18      	it	ne
  40b37a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  40b37e:	d1e0      	bne.n	40b342 <__aeabi_fdiv+0x46>
  40b380:	2afd      	cmp	r2, #253	; 0xfd
  40b382:	f63f af50 	bhi.w	40b226 <__aeabi_fmul+0x92>
  40b386:	428b      	cmp	r3, r1
  40b388:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40b38c:	bf08      	it	eq
  40b38e:	f020 0001 	biceq.w	r0, r0, #1
  40b392:	4770      	bx	lr
  40b394:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  40b398:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  40b39c:	327f      	adds	r2, #127	; 0x7f
  40b39e:	bfc2      	ittt	gt
  40b3a0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  40b3a4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  40b3a8:	4770      	bxgt	lr
  40b3aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40b3ae:	f04f 0300 	mov.w	r3, #0
  40b3b2:	3a01      	subs	r2, #1
  40b3b4:	e737      	b.n	40b226 <__aeabi_fmul+0x92>
  40b3b6:	f092 0f00 	teq	r2, #0
  40b3ba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  40b3be:	bf02      	ittt	eq
  40b3c0:	0040      	lsleq	r0, r0, #1
  40b3c2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  40b3c6:	3a01      	subeq	r2, #1
  40b3c8:	d0f9      	beq.n	40b3be <__aeabi_fdiv+0xc2>
  40b3ca:	ea40 000c 	orr.w	r0, r0, ip
  40b3ce:	f093 0f00 	teq	r3, #0
  40b3d2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40b3d6:	bf02      	ittt	eq
  40b3d8:	0049      	lsleq	r1, r1, #1
  40b3da:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  40b3de:	3b01      	subeq	r3, #1
  40b3e0:	d0f9      	beq.n	40b3d6 <__aeabi_fdiv+0xda>
  40b3e2:	ea41 010c 	orr.w	r1, r1, ip
  40b3e6:	e795      	b.n	40b314 <__aeabi_fdiv+0x18>
  40b3e8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  40b3ec:	ea92 0f0c 	teq	r2, ip
  40b3f0:	d108      	bne.n	40b404 <__aeabi_fdiv+0x108>
  40b3f2:	0242      	lsls	r2, r0, #9
  40b3f4:	f47f af7d 	bne.w	40b2f2 <__aeabi_fmul+0x15e>
  40b3f8:	ea93 0f0c 	teq	r3, ip
  40b3fc:	f47f af70 	bne.w	40b2e0 <__aeabi_fmul+0x14c>
  40b400:	4608      	mov	r0, r1
  40b402:	e776      	b.n	40b2f2 <__aeabi_fmul+0x15e>
  40b404:	ea93 0f0c 	teq	r3, ip
  40b408:	d104      	bne.n	40b414 <__aeabi_fdiv+0x118>
  40b40a:	024b      	lsls	r3, r1, #9
  40b40c:	f43f af4c 	beq.w	40b2a8 <__aeabi_fmul+0x114>
  40b410:	4608      	mov	r0, r1
  40b412:	e76e      	b.n	40b2f2 <__aeabi_fmul+0x15e>
  40b414:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  40b418:	bf18      	it	ne
  40b41a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  40b41e:	d1ca      	bne.n	40b3b6 <__aeabi_fdiv+0xba>
  40b420:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  40b424:	f47f af5c 	bne.w	40b2e0 <__aeabi_fmul+0x14c>
  40b428:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  40b42c:	f47f af3c 	bne.w	40b2a8 <__aeabi_fmul+0x114>
  40b430:	e75f      	b.n	40b2f2 <__aeabi_fmul+0x15e>
  40b432:	bf00      	nop

0040b434 <__aeabi_f2iz>:
  40b434:	ea4f 0240 	mov.w	r2, r0, lsl #1
  40b438:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  40b43c:	d30f      	bcc.n	40b45e <__aeabi_f2iz+0x2a>
  40b43e:	f04f 039e 	mov.w	r3, #158	; 0x9e
  40b442:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  40b446:	d90d      	bls.n	40b464 <__aeabi_f2iz+0x30>
  40b448:	ea4f 2300 	mov.w	r3, r0, lsl #8
  40b44c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40b450:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  40b454:	fa23 f002 	lsr.w	r0, r3, r2
  40b458:	bf18      	it	ne
  40b45a:	4240      	negne	r0, r0
  40b45c:	4770      	bx	lr
  40b45e:	f04f 0000 	mov.w	r0, #0
  40b462:	4770      	bx	lr
  40b464:	f112 0f61 	cmn.w	r2, #97	; 0x61
  40b468:	d101      	bne.n	40b46e <__aeabi_f2iz+0x3a>
  40b46a:	0242      	lsls	r2, r0, #9
  40b46c:	d105      	bne.n	40b47a <__aeabi_f2iz+0x46>
  40b46e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  40b472:	bf08      	it	eq
  40b474:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40b478:	4770      	bx	lr
  40b47a:	f04f 0000 	mov.w	r0, #0
  40b47e:	4770      	bx	lr

0040b480 <__errno>:
  40b480:	4b01      	ldr	r3, [pc, #4]	; (40b488 <__errno+0x8>)
  40b482:	6818      	ldr	r0, [r3, #0]
  40b484:	4770      	bx	lr
  40b486:	bf00      	nop
  40b488:	200000c4 	.word	0x200000c4

0040b48c <__libc_init_array>:
  40b48c:	b570      	push	{r4, r5, r6, lr}
  40b48e:	4e0f      	ldr	r6, [pc, #60]	; (40b4cc <__libc_init_array+0x40>)
  40b490:	4d0f      	ldr	r5, [pc, #60]	; (40b4d0 <__libc_init_array+0x44>)
  40b492:	1b76      	subs	r6, r6, r5
  40b494:	10b6      	asrs	r6, r6, #2
  40b496:	bf18      	it	ne
  40b498:	2400      	movne	r4, #0
  40b49a:	d005      	beq.n	40b4a8 <__libc_init_array+0x1c>
  40b49c:	3401      	adds	r4, #1
  40b49e:	f855 3b04 	ldr.w	r3, [r5], #4
  40b4a2:	4798      	blx	r3
  40b4a4:	42a6      	cmp	r6, r4
  40b4a6:	d1f9      	bne.n	40b49c <__libc_init_array+0x10>
  40b4a8:	4e0a      	ldr	r6, [pc, #40]	; (40b4d4 <__libc_init_array+0x48>)
  40b4aa:	4d0b      	ldr	r5, [pc, #44]	; (40b4d8 <__libc_init_array+0x4c>)
  40b4ac:	1b76      	subs	r6, r6, r5
  40b4ae:	f006 f8c7 	bl	411640 <_init>
  40b4b2:	10b6      	asrs	r6, r6, #2
  40b4b4:	bf18      	it	ne
  40b4b6:	2400      	movne	r4, #0
  40b4b8:	d006      	beq.n	40b4c8 <__libc_init_array+0x3c>
  40b4ba:	3401      	adds	r4, #1
  40b4bc:	f855 3b04 	ldr.w	r3, [r5], #4
  40b4c0:	4798      	blx	r3
  40b4c2:	42a6      	cmp	r6, r4
  40b4c4:	d1f9      	bne.n	40b4ba <__libc_init_array+0x2e>
  40b4c6:	bd70      	pop	{r4, r5, r6, pc}
  40b4c8:	bd70      	pop	{r4, r5, r6, pc}
  40b4ca:	bf00      	nop
  40b4cc:	0041164c 	.word	0x0041164c
  40b4d0:	0041164c 	.word	0x0041164c
  40b4d4:	00411654 	.word	0x00411654
  40b4d8:	0041164c 	.word	0x0041164c

0040b4dc <memcmp>:
  40b4dc:	2a03      	cmp	r2, #3
  40b4de:	b470      	push	{r4, r5, r6}
  40b4e0:	d922      	bls.n	40b528 <memcmp+0x4c>
  40b4e2:	ea40 0301 	orr.w	r3, r0, r1
  40b4e6:	079b      	lsls	r3, r3, #30
  40b4e8:	d011      	beq.n	40b50e <memcmp+0x32>
  40b4ea:	7803      	ldrb	r3, [r0, #0]
  40b4ec:	780c      	ldrb	r4, [r1, #0]
  40b4ee:	42a3      	cmp	r3, r4
  40b4f0:	d11d      	bne.n	40b52e <memcmp+0x52>
  40b4f2:	440a      	add	r2, r1
  40b4f4:	3101      	adds	r1, #1
  40b4f6:	e005      	b.n	40b504 <memcmp+0x28>
  40b4f8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  40b4fc:	f811 4b01 	ldrb.w	r4, [r1], #1
  40b500:	42a3      	cmp	r3, r4
  40b502:	d114      	bne.n	40b52e <memcmp+0x52>
  40b504:	4291      	cmp	r1, r2
  40b506:	d1f7      	bne.n	40b4f8 <memcmp+0x1c>
  40b508:	2000      	movs	r0, #0
  40b50a:	bc70      	pop	{r4, r5, r6}
  40b50c:	4770      	bx	lr
  40b50e:	680d      	ldr	r5, [r1, #0]
  40b510:	6806      	ldr	r6, [r0, #0]
  40b512:	42ae      	cmp	r6, r5
  40b514:	460c      	mov	r4, r1
  40b516:	4603      	mov	r3, r0
  40b518:	f101 0104 	add.w	r1, r1, #4
  40b51c:	f100 0004 	add.w	r0, r0, #4
  40b520:	d108      	bne.n	40b534 <memcmp+0x58>
  40b522:	3a04      	subs	r2, #4
  40b524:	2a03      	cmp	r2, #3
  40b526:	d8f2      	bhi.n	40b50e <memcmp+0x32>
  40b528:	2a00      	cmp	r2, #0
  40b52a:	d1de      	bne.n	40b4ea <memcmp+0xe>
  40b52c:	e7ec      	b.n	40b508 <memcmp+0x2c>
  40b52e:	1b18      	subs	r0, r3, r4
  40b530:	bc70      	pop	{r4, r5, r6}
  40b532:	4770      	bx	lr
  40b534:	4621      	mov	r1, r4
  40b536:	4618      	mov	r0, r3
  40b538:	e7d7      	b.n	40b4ea <memcmp+0xe>
  40b53a:	bf00      	nop

0040b53c <memcpy>:
  40b53c:	4684      	mov	ip, r0
  40b53e:	ea41 0300 	orr.w	r3, r1, r0
  40b542:	f013 0303 	ands.w	r3, r3, #3
  40b546:	d16d      	bne.n	40b624 <memcpy+0xe8>
  40b548:	3a40      	subs	r2, #64	; 0x40
  40b54a:	d341      	bcc.n	40b5d0 <memcpy+0x94>
  40b54c:	f851 3b04 	ldr.w	r3, [r1], #4
  40b550:	f840 3b04 	str.w	r3, [r0], #4
  40b554:	f851 3b04 	ldr.w	r3, [r1], #4
  40b558:	f840 3b04 	str.w	r3, [r0], #4
  40b55c:	f851 3b04 	ldr.w	r3, [r1], #4
  40b560:	f840 3b04 	str.w	r3, [r0], #4
  40b564:	f851 3b04 	ldr.w	r3, [r1], #4
  40b568:	f840 3b04 	str.w	r3, [r0], #4
  40b56c:	f851 3b04 	ldr.w	r3, [r1], #4
  40b570:	f840 3b04 	str.w	r3, [r0], #4
  40b574:	f851 3b04 	ldr.w	r3, [r1], #4
  40b578:	f840 3b04 	str.w	r3, [r0], #4
  40b57c:	f851 3b04 	ldr.w	r3, [r1], #4
  40b580:	f840 3b04 	str.w	r3, [r0], #4
  40b584:	f851 3b04 	ldr.w	r3, [r1], #4
  40b588:	f840 3b04 	str.w	r3, [r0], #4
  40b58c:	f851 3b04 	ldr.w	r3, [r1], #4
  40b590:	f840 3b04 	str.w	r3, [r0], #4
  40b594:	f851 3b04 	ldr.w	r3, [r1], #4
  40b598:	f840 3b04 	str.w	r3, [r0], #4
  40b59c:	f851 3b04 	ldr.w	r3, [r1], #4
  40b5a0:	f840 3b04 	str.w	r3, [r0], #4
  40b5a4:	f851 3b04 	ldr.w	r3, [r1], #4
  40b5a8:	f840 3b04 	str.w	r3, [r0], #4
  40b5ac:	f851 3b04 	ldr.w	r3, [r1], #4
  40b5b0:	f840 3b04 	str.w	r3, [r0], #4
  40b5b4:	f851 3b04 	ldr.w	r3, [r1], #4
  40b5b8:	f840 3b04 	str.w	r3, [r0], #4
  40b5bc:	f851 3b04 	ldr.w	r3, [r1], #4
  40b5c0:	f840 3b04 	str.w	r3, [r0], #4
  40b5c4:	f851 3b04 	ldr.w	r3, [r1], #4
  40b5c8:	f840 3b04 	str.w	r3, [r0], #4
  40b5cc:	3a40      	subs	r2, #64	; 0x40
  40b5ce:	d2bd      	bcs.n	40b54c <memcpy+0x10>
  40b5d0:	3230      	adds	r2, #48	; 0x30
  40b5d2:	d311      	bcc.n	40b5f8 <memcpy+0xbc>
  40b5d4:	f851 3b04 	ldr.w	r3, [r1], #4
  40b5d8:	f840 3b04 	str.w	r3, [r0], #4
  40b5dc:	f851 3b04 	ldr.w	r3, [r1], #4
  40b5e0:	f840 3b04 	str.w	r3, [r0], #4
  40b5e4:	f851 3b04 	ldr.w	r3, [r1], #4
  40b5e8:	f840 3b04 	str.w	r3, [r0], #4
  40b5ec:	f851 3b04 	ldr.w	r3, [r1], #4
  40b5f0:	f840 3b04 	str.w	r3, [r0], #4
  40b5f4:	3a10      	subs	r2, #16
  40b5f6:	d2ed      	bcs.n	40b5d4 <memcpy+0x98>
  40b5f8:	320c      	adds	r2, #12
  40b5fa:	d305      	bcc.n	40b608 <memcpy+0xcc>
  40b5fc:	f851 3b04 	ldr.w	r3, [r1], #4
  40b600:	f840 3b04 	str.w	r3, [r0], #4
  40b604:	3a04      	subs	r2, #4
  40b606:	d2f9      	bcs.n	40b5fc <memcpy+0xc0>
  40b608:	3204      	adds	r2, #4
  40b60a:	d008      	beq.n	40b61e <memcpy+0xe2>
  40b60c:	07d2      	lsls	r2, r2, #31
  40b60e:	bf1c      	itt	ne
  40b610:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40b614:	f800 3b01 	strbne.w	r3, [r0], #1
  40b618:	d301      	bcc.n	40b61e <memcpy+0xe2>
  40b61a:	880b      	ldrh	r3, [r1, #0]
  40b61c:	8003      	strh	r3, [r0, #0]
  40b61e:	4660      	mov	r0, ip
  40b620:	4770      	bx	lr
  40b622:	bf00      	nop
  40b624:	2a08      	cmp	r2, #8
  40b626:	d313      	bcc.n	40b650 <memcpy+0x114>
  40b628:	078b      	lsls	r3, r1, #30
  40b62a:	d08d      	beq.n	40b548 <memcpy+0xc>
  40b62c:	f010 0303 	ands.w	r3, r0, #3
  40b630:	d08a      	beq.n	40b548 <memcpy+0xc>
  40b632:	f1c3 0304 	rsb	r3, r3, #4
  40b636:	1ad2      	subs	r2, r2, r3
  40b638:	07db      	lsls	r3, r3, #31
  40b63a:	bf1c      	itt	ne
  40b63c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40b640:	f800 3b01 	strbne.w	r3, [r0], #1
  40b644:	d380      	bcc.n	40b548 <memcpy+0xc>
  40b646:	f831 3b02 	ldrh.w	r3, [r1], #2
  40b64a:	f820 3b02 	strh.w	r3, [r0], #2
  40b64e:	e77b      	b.n	40b548 <memcpy+0xc>
  40b650:	3a04      	subs	r2, #4
  40b652:	d3d9      	bcc.n	40b608 <memcpy+0xcc>
  40b654:	3a01      	subs	r2, #1
  40b656:	f811 3b01 	ldrb.w	r3, [r1], #1
  40b65a:	f800 3b01 	strb.w	r3, [r0], #1
  40b65e:	d2f9      	bcs.n	40b654 <memcpy+0x118>
  40b660:	780b      	ldrb	r3, [r1, #0]
  40b662:	7003      	strb	r3, [r0, #0]
  40b664:	784b      	ldrb	r3, [r1, #1]
  40b666:	7043      	strb	r3, [r0, #1]
  40b668:	788b      	ldrb	r3, [r1, #2]
  40b66a:	7083      	strb	r3, [r0, #2]
  40b66c:	4660      	mov	r0, ip
  40b66e:	4770      	bx	lr

0040b670 <memset>:
  40b670:	b470      	push	{r4, r5, r6}
  40b672:	0786      	lsls	r6, r0, #30
  40b674:	d046      	beq.n	40b704 <memset+0x94>
  40b676:	1e54      	subs	r4, r2, #1
  40b678:	2a00      	cmp	r2, #0
  40b67a:	d041      	beq.n	40b700 <memset+0x90>
  40b67c:	b2ca      	uxtb	r2, r1
  40b67e:	4603      	mov	r3, r0
  40b680:	e002      	b.n	40b688 <memset+0x18>
  40b682:	f114 34ff 	adds.w	r4, r4, #4294967295
  40b686:	d33b      	bcc.n	40b700 <memset+0x90>
  40b688:	f803 2b01 	strb.w	r2, [r3], #1
  40b68c:	079d      	lsls	r5, r3, #30
  40b68e:	d1f8      	bne.n	40b682 <memset+0x12>
  40b690:	2c03      	cmp	r4, #3
  40b692:	d92e      	bls.n	40b6f2 <memset+0x82>
  40b694:	b2cd      	uxtb	r5, r1
  40b696:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40b69a:	2c0f      	cmp	r4, #15
  40b69c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40b6a0:	d919      	bls.n	40b6d6 <memset+0x66>
  40b6a2:	f103 0210 	add.w	r2, r3, #16
  40b6a6:	4626      	mov	r6, r4
  40b6a8:	3e10      	subs	r6, #16
  40b6aa:	2e0f      	cmp	r6, #15
  40b6ac:	f842 5c10 	str.w	r5, [r2, #-16]
  40b6b0:	f842 5c0c 	str.w	r5, [r2, #-12]
  40b6b4:	f842 5c08 	str.w	r5, [r2, #-8]
  40b6b8:	f842 5c04 	str.w	r5, [r2, #-4]
  40b6bc:	f102 0210 	add.w	r2, r2, #16
  40b6c0:	d8f2      	bhi.n	40b6a8 <memset+0x38>
  40b6c2:	f1a4 0210 	sub.w	r2, r4, #16
  40b6c6:	f022 020f 	bic.w	r2, r2, #15
  40b6ca:	f004 040f 	and.w	r4, r4, #15
  40b6ce:	3210      	adds	r2, #16
  40b6d0:	2c03      	cmp	r4, #3
  40b6d2:	4413      	add	r3, r2
  40b6d4:	d90d      	bls.n	40b6f2 <memset+0x82>
  40b6d6:	461e      	mov	r6, r3
  40b6d8:	4622      	mov	r2, r4
  40b6da:	3a04      	subs	r2, #4
  40b6dc:	2a03      	cmp	r2, #3
  40b6de:	f846 5b04 	str.w	r5, [r6], #4
  40b6e2:	d8fa      	bhi.n	40b6da <memset+0x6a>
  40b6e4:	1f22      	subs	r2, r4, #4
  40b6e6:	f022 0203 	bic.w	r2, r2, #3
  40b6ea:	3204      	adds	r2, #4
  40b6ec:	4413      	add	r3, r2
  40b6ee:	f004 0403 	and.w	r4, r4, #3
  40b6f2:	b12c      	cbz	r4, 40b700 <memset+0x90>
  40b6f4:	b2c9      	uxtb	r1, r1
  40b6f6:	441c      	add	r4, r3
  40b6f8:	f803 1b01 	strb.w	r1, [r3], #1
  40b6fc:	429c      	cmp	r4, r3
  40b6fe:	d1fb      	bne.n	40b6f8 <memset+0x88>
  40b700:	bc70      	pop	{r4, r5, r6}
  40b702:	4770      	bx	lr
  40b704:	4614      	mov	r4, r2
  40b706:	4603      	mov	r3, r0
  40b708:	e7c2      	b.n	40b690 <memset+0x20>
  40b70a:	bf00      	nop

0040b70c <sprintf>:
  40b70c:	b40e      	push	{r1, r2, r3}
  40b70e:	b5f0      	push	{r4, r5, r6, r7, lr}
  40b710:	b09c      	sub	sp, #112	; 0x70
  40b712:	ab21      	add	r3, sp, #132	; 0x84
  40b714:	490f      	ldr	r1, [pc, #60]	; (40b754 <sprintf+0x48>)
  40b716:	f853 2b04 	ldr.w	r2, [r3], #4
  40b71a:	9301      	str	r3, [sp, #4]
  40b71c:	4605      	mov	r5, r0
  40b71e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40b722:	6808      	ldr	r0, [r1, #0]
  40b724:	9502      	str	r5, [sp, #8]
  40b726:	f44f 7702 	mov.w	r7, #520	; 0x208
  40b72a:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40b72e:	a902      	add	r1, sp, #8
  40b730:	9506      	str	r5, [sp, #24]
  40b732:	f8ad 7014 	strh.w	r7, [sp, #20]
  40b736:	9404      	str	r4, [sp, #16]
  40b738:	9407      	str	r4, [sp, #28]
  40b73a:	f8ad 6016 	strh.w	r6, [sp, #22]
  40b73e:	f000 f80b 	bl	40b758 <_svfprintf_r>
  40b742:	9b02      	ldr	r3, [sp, #8]
  40b744:	2200      	movs	r2, #0
  40b746:	701a      	strb	r2, [r3, #0]
  40b748:	b01c      	add	sp, #112	; 0x70
  40b74a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40b74e:	b003      	add	sp, #12
  40b750:	4770      	bx	lr
  40b752:	bf00      	nop
  40b754:	200000c4 	.word	0x200000c4

0040b758 <_svfprintf_r>:
  40b758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b75c:	b0c3      	sub	sp, #268	; 0x10c
  40b75e:	460c      	mov	r4, r1
  40b760:	910b      	str	r1, [sp, #44]	; 0x2c
  40b762:	4692      	mov	sl, r2
  40b764:	930f      	str	r3, [sp, #60]	; 0x3c
  40b766:	900c      	str	r0, [sp, #48]	; 0x30
  40b768:	f002 fb44 	bl	40ddf4 <_localeconv_r>
  40b76c:	6803      	ldr	r3, [r0, #0]
  40b76e:	931a      	str	r3, [sp, #104]	; 0x68
  40b770:	4618      	mov	r0, r3
  40b772:	f003 fba5 	bl	40eec0 <strlen>
  40b776:	89a3      	ldrh	r3, [r4, #12]
  40b778:	9019      	str	r0, [sp, #100]	; 0x64
  40b77a:	0619      	lsls	r1, r3, #24
  40b77c:	d503      	bpl.n	40b786 <_svfprintf_r+0x2e>
  40b77e:	6923      	ldr	r3, [r4, #16]
  40b780:	2b00      	cmp	r3, #0
  40b782:	f001 8003 	beq.w	40c78c <_svfprintf_r+0x1034>
  40b786:	2300      	movs	r3, #0
  40b788:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  40b78c:	9313      	str	r3, [sp, #76]	; 0x4c
  40b78e:	9315      	str	r3, [sp, #84]	; 0x54
  40b790:	9314      	str	r3, [sp, #80]	; 0x50
  40b792:	9327      	str	r3, [sp, #156]	; 0x9c
  40b794:	9326      	str	r3, [sp, #152]	; 0x98
  40b796:	9318      	str	r3, [sp, #96]	; 0x60
  40b798:	931b      	str	r3, [sp, #108]	; 0x6c
  40b79a:	9309      	str	r3, [sp, #36]	; 0x24
  40b79c:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  40b7a0:	46c8      	mov	r8, r9
  40b7a2:	9316      	str	r3, [sp, #88]	; 0x58
  40b7a4:	9317      	str	r3, [sp, #92]	; 0x5c
  40b7a6:	f89a 3000 	ldrb.w	r3, [sl]
  40b7aa:	4654      	mov	r4, sl
  40b7ac:	b1e3      	cbz	r3, 40b7e8 <_svfprintf_r+0x90>
  40b7ae:	2b25      	cmp	r3, #37	; 0x25
  40b7b0:	d102      	bne.n	40b7b8 <_svfprintf_r+0x60>
  40b7b2:	e019      	b.n	40b7e8 <_svfprintf_r+0x90>
  40b7b4:	2b25      	cmp	r3, #37	; 0x25
  40b7b6:	d003      	beq.n	40b7c0 <_svfprintf_r+0x68>
  40b7b8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40b7bc:	2b00      	cmp	r3, #0
  40b7be:	d1f9      	bne.n	40b7b4 <_svfprintf_r+0x5c>
  40b7c0:	eba4 050a 	sub.w	r5, r4, sl
  40b7c4:	b185      	cbz	r5, 40b7e8 <_svfprintf_r+0x90>
  40b7c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40b7c8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40b7ca:	f8c8 a000 	str.w	sl, [r8]
  40b7ce:	3301      	adds	r3, #1
  40b7d0:	442a      	add	r2, r5
  40b7d2:	2b07      	cmp	r3, #7
  40b7d4:	f8c8 5004 	str.w	r5, [r8, #4]
  40b7d8:	9227      	str	r2, [sp, #156]	; 0x9c
  40b7da:	9326      	str	r3, [sp, #152]	; 0x98
  40b7dc:	dc7f      	bgt.n	40b8de <_svfprintf_r+0x186>
  40b7de:	f108 0808 	add.w	r8, r8, #8
  40b7e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b7e4:	442b      	add	r3, r5
  40b7e6:	9309      	str	r3, [sp, #36]	; 0x24
  40b7e8:	7823      	ldrb	r3, [r4, #0]
  40b7ea:	2b00      	cmp	r3, #0
  40b7ec:	d07f      	beq.n	40b8ee <_svfprintf_r+0x196>
  40b7ee:	2300      	movs	r3, #0
  40b7f0:	461a      	mov	r2, r3
  40b7f2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40b7f6:	4619      	mov	r1, r3
  40b7f8:	930d      	str	r3, [sp, #52]	; 0x34
  40b7fa:	469b      	mov	fp, r3
  40b7fc:	f04f 30ff 	mov.w	r0, #4294967295
  40b800:	7863      	ldrb	r3, [r4, #1]
  40b802:	900a      	str	r0, [sp, #40]	; 0x28
  40b804:	f104 0a01 	add.w	sl, r4, #1
  40b808:	f10a 0a01 	add.w	sl, sl, #1
  40b80c:	f1a3 0020 	sub.w	r0, r3, #32
  40b810:	2858      	cmp	r0, #88	; 0x58
  40b812:	f200 83c1 	bhi.w	40bf98 <_svfprintf_r+0x840>
  40b816:	e8df f010 	tbh	[pc, r0, lsl #1]
  40b81a:	0238      	.short	0x0238
  40b81c:	03bf03bf 	.word	0x03bf03bf
  40b820:	03bf0240 	.word	0x03bf0240
  40b824:	03bf03bf 	.word	0x03bf03bf
  40b828:	03bf03bf 	.word	0x03bf03bf
  40b82c:	024503bf 	.word	0x024503bf
  40b830:	03bf0203 	.word	0x03bf0203
  40b834:	026b005d 	.word	0x026b005d
  40b838:	028603bf 	.word	0x028603bf
  40b83c:	039d039d 	.word	0x039d039d
  40b840:	039d039d 	.word	0x039d039d
  40b844:	039d039d 	.word	0x039d039d
  40b848:	039d039d 	.word	0x039d039d
  40b84c:	03bf039d 	.word	0x03bf039d
  40b850:	03bf03bf 	.word	0x03bf03bf
  40b854:	03bf03bf 	.word	0x03bf03bf
  40b858:	03bf03bf 	.word	0x03bf03bf
  40b85c:	03bf03bf 	.word	0x03bf03bf
  40b860:	033703bf 	.word	0x033703bf
  40b864:	03bf0357 	.word	0x03bf0357
  40b868:	03bf0357 	.word	0x03bf0357
  40b86c:	03bf03bf 	.word	0x03bf03bf
  40b870:	039803bf 	.word	0x039803bf
  40b874:	03bf03bf 	.word	0x03bf03bf
  40b878:	03bf03ad 	.word	0x03bf03ad
  40b87c:	03bf03bf 	.word	0x03bf03bf
  40b880:	03bf03bf 	.word	0x03bf03bf
  40b884:	03bf0259 	.word	0x03bf0259
  40b888:	031e03bf 	.word	0x031e03bf
  40b88c:	03bf03bf 	.word	0x03bf03bf
  40b890:	03bf03bf 	.word	0x03bf03bf
  40b894:	03bf03bf 	.word	0x03bf03bf
  40b898:	03bf03bf 	.word	0x03bf03bf
  40b89c:	03bf03bf 	.word	0x03bf03bf
  40b8a0:	02db02c6 	.word	0x02db02c6
  40b8a4:	03570357 	.word	0x03570357
  40b8a8:	028b0357 	.word	0x028b0357
  40b8ac:	03bf02db 	.word	0x03bf02db
  40b8b0:	029003bf 	.word	0x029003bf
  40b8b4:	029d03bf 	.word	0x029d03bf
  40b8b8:	02b401cc 	.word	0x02b401cc
  40b8bc:	03bf0208 	.word	0x03bf0208
  40b8c0:	03bf01e1 	.word	0x03bf01e1
  40b8c4:	03bf007e 	.word	0x03bf007e
  40b8c8:	020d03bf 	.word	0x020d03bf
  40b8cc:	980d      	ldr	r0, [sp, #52]	; 0x34
  40b8ce:	930f      	str	r3, [sp, #60]	; 0x3c
  40b8d0:	4240      	negs	r0, r0
  40b8d2:	900d      	str	r0, [sp, #52]	; 0x34
  40b8d4:	f04b 0b04 	orr.w	fp, fp, #4
  40b8d8:	f89a 3000 	ldrb.w	r3, [sl]
  40b8dc:	e794      	b.n	40b808 <_svfprintf_r+0xb0>
  40b8de:	aa25      	add	r2, sp, #148	; 0x94
  40b8e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b8e2:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b8e4:	f003 fb5a 	bl	40ef9c <__ssprint_r>
  40b8e8:	b940      	cbnz	r0, 40b8fc <_svfprintf_r+0x1a4>
  40b8ea:	46c8      	mov	r8, r9
  40b8ec:	e779      	b.n	40b7e2 <_svfprintf_r+0x8a>
  40b8ee:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40b8f0:	b123      	cbz	r3, 40b8fc <_svfprintf_r+0x1a4>
  40b8f2:	980c      	ldr	r0, [sp, #48]	; 0x30
  40b8f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40b8f6:	aa25      	add	r2, sp, #148	; 0x94
  40b8f8:	f003 fb50 	bl	40ef9c <__ssprint_r>
  40b8fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40b8fe:	899b      	ldrh	r3, [r3, #12]
  40b900:	f013 0f40 	tst.w	r3, #64	; 0x40
  40b904:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b906:	bf18      	it	ne
  40b908:	f04f 33ff 	movne.w	r3, #4294967295
  40b90c:	9309      	str	r3, [sp, #36]	; 0x24
  40b90e:	9809      	ldr	r0, [sp, #36]	; 0x24
  40b910:	b043      	add	sp, #268	; 0x10c
  40b912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b916:	f01b 0f20 	tst.w	fp, #32
  40b91a:	9311      	str	r3, [sp, #68]	; 0x44
  40b91c:	f040 81dd 	bne.w	40bcda <_svfprintf_r+0x582>
  40b920:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40b922:	f01b 0f10 	tst.w	fp, #16
  40b926:	4613      	mov	r3, r2
  40b928:	f040 856e 	bne.w	40c408 <_svfprintf_r+0xcb0>
  40b92c:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40b930:	f000 856a 	beq.w	40c408 <_svfprintf_r+0xcb0>
  40b934:	8814      	ldrh	r4, [r2, #0]
  40b936:	3204      	adds	r2, #4
  40b938:	2500      	movs	r5, #0
  40b93a:	2301      	movs	r3, #1
  40b93c:	920f      	str	r2, [sp, #60]	; 0x3c
  40b93e:	2700      	movs	r7, #0
  40b940:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40b944:	990a      	ldr	r1, [sp, #40]	; 0x28
  40b946:	1c4a      	adds	r2, r1, #1
  40b948:	f000 8265 	beq.w	40be16 <_svfprintf_r+0x6be>
  40b94c:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  40b950:	9207      	str	r2, [sp, #28]
  40b952:	ea54 0205 	orrs.w	r2, r4, r5
  40b956:	f040 8264 	bne.w	40be22 <_svfprintf_r+0x6ca>
  40b95a:	2900      	cmp	r1, #0
  40b95c:	f040 843c 	bne.w	40c1d8 <_svfprintf_r+0xa80>
  40b960:	2b00      	cmp	r3, #0
  40b962:	f040 84d7 	bne.w	40c314 <_svfprintf_r+0xbbc>
  40b966:	f01b 0301 	ands.w	r3, fp, #1
  40b96a:	930e      	str	r3, [sp, #56]	; 0x38
  40b96c:	f000 8604 	beq.w	40c578 <_svfprintf_r+0xe20>
  40b970:	ae42      	add	r6, sp, #264	; 0x108
  40b972:	2330      	movs	r3, #48	; 0x30
  40b974:	f806 3d41 	strb.w	r3, [r6, #-65]!
  40b978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b97a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40b97c:	4293      	cmp	r3, r2
  40b97e:	bfb8      	it	lt
  40b980:	4613      	movlt	r3, r2
  40b982:	9308      	str	r3, [sp, #32]
  40b984:	2300      	movs	r3, #0
  40b986:	9312      	str	r3, [sp, #72]	; 0x48
  40b988:	b117      	cbz	r7, 40b990 <_svfprintf_r+0x238>
  40b98a:	9b08      	ldr	r3, [sp, #32]
  40b98c:	3301      	adds	r3, #1
  40b98e:	9308      	str	r3, [sp, #32]
  40b990:	9b07      	ldr	r3, [sp, #28]
  40b992:	f013 0302 	ands.w	r3, r3, #2
  40b996:	9310      	str	r3, [sp, #64]	; 0x40
  40b998:	d002      	beq.n	40b9a0 <_svfprintf_r+0x248>
  40b99a:	9b08      	ldr	r3, [sp, #32]
  40b99c:	3302      	adds	r3, #2
  40b99e:	9308      	str	r3, [sp, #32]
  40b9a0:	9b07      	ldr	r3, [sp, #28]
  40b9a2:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  40b9a6:	f040 830e 	bne.w	40bfc6 <_svfprintf_r+0x86e>
  40b9aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40b9ac:	9a08      	ldr	r2, [sp, #32]
  40b9ae:	eba3 0b02 	sub.w	fp, r3, r2
  40b9b2:	f1bb 0f00 	cmp.w	fp, #0
  40b9b6:	f340 8306 	ble.w	40bfc6 <_svfprintf_r+0x86e>
  40b9ba:	f1bb 0f10 	cmp.w	fp, #16
  40b9be:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40b9c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40b9c2:	dd29      	ble.n	40ba18 <_svfprintf_r+0x2c0>
  40b9c4:	4643      	mov	r3, r8
  40b9c6:	4621      	mov	r1, r4
  40b9c8:	46a8      	mov	r8, r5
  40b9ca:	2710      	movs	r7, #16
  40b9cc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40b9ce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40b9d0:	e006      	b.n	40b9e0 <_svfprintf_r+0x288>
  40b9d2:	f1ab 0b10 	sub.w	fp, fp, #16
  40b9d6:	f1bb 0f10 	cmp.w	fp, #16
  40b9da:	f103 0308 	add.w	r3, r3, #8
  40b9de:	dd18      	ble.n	40ba12 <_svfprintf_r+0x2ba>
  40b9e0:	3201      	adds	r2, #1
  40b9e2:	48b7      	ldr	r0, [pc, #732]	; (40bcc0 <_svfprintf_r+0x568>)
  40b9e4:	9226      	str	r2, [sp, #152]	; 0x98
  40b9e6:	3110      	adds	r1, #16
  40b9e8:	2a07      	cmp	r2, #7
  40b9ea:	9127      	str	r1, [sp, #156]	; 0x9c
  40b9ec:	e883 0081 	stmia.w	r3, {r0, r7}
  40b9f0:	ddef      	ble.n	40b9d2 <_svfprintf_r+0x27a>
  40b9f2:	aa25      	add	r2, sp, #148	; 0x94
  40b9f4:	4629      	mov	r1, r5
  40b9f6:	4620      	mov	r0, r4
  40b9f8:	f003 fad0 	bl	40ef9c <__ssprint_r>
  40b9fc:	2800      	cmp	r0, #0
  40b9fe:	f47f af7d 	bne.w	40b8fc <_svfprintf_r+0x1a4>
  40ba02:	f1ab 0b10 	sub.w	fp, fp, #16
  40ba06:	f1bb 0f10 	cmp.w	fp, #16
  40ba0a:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40ba0c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40ba0e:	464b      	mov	r3, r9
  40ba10:	dce6      	bgt.n	40b9e0 <_svfprintf_r+0x288>
  40ba12:	4645      	mov	r5, r8
  40ba14:	460c      	mov	r4, r1
  40ba16:	4698      	mov	r8, r3
  40ba18:	3201      	adds	r2, #1
  40ba1a:	4ba9      	ldr	r3, [pc, #676]	; (40bcc0 <_svfprintf_r+0x568>)
  40ba1c:	9226      	str	r2, [sp, #152]	; 0x98
  40ba1e:	445c      	add	r4, fp
  40ba20:	2a07      	cmp	r2, #7
  40ba22:	9427      	str	r4, [sp, #156]	; 0x9c
  40ba24:	e888 0808 	stmia.w	r8, {r3, fp}
  40ba28:	f300 8498 	bgt.w	40c35c <_svfprintf_r+0xc04>
  40ba2c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40ba30:	f108 0808 	add.w	r8, r8, #8
  40ba34:	b177      	cbz	r7, 40ba54 <_svfprintf_r+0x2fc>
  40ba36:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40ba38:	3301      	adds	r3, #1
  40ba3a:	3401      	adds	r4, #1
  40ba3c:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  40ba40:	2201      	movs	r2, #1
  40ba42:	2b07      	cmp	r3, #7
  40ba44:	9427      	str	r4, [sp, #156]	; 0x9c
  40ba46:	9326      	str	r3, [sp, #152]	; 0x98
  40ba48:	e888 0006 	stmia.w	r8, {r1, r2}
  40ba4c:	f300 83db 	bgt.w	40c206 <_svfprintf_r+0xaae>
  40ba50:	f108 0808 	add.w	r8, r8, #8
  40ba54:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40ba56:	b16b      	cbz	r3, 40ba74 <_svfprintf_r+0x31c>
  40ba58:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40ba5a:	3301      	adds	r3, #1
  40ba5c:	3402      	adds	r4, #2
  40ba5e:	a91e      	add	r1, sp, #120	; 0x78
  40ba60:	2202      	movs	r2, #2
  40ba62:	2b07      	cmp	r3, #7
  40ba64:	9427      	str	r4, [sp, #156]	; 0x9c
  40ba66:	9326      	str	r3, [sp, #152]	; 0x98
  40ba68:	e888 0006 	stmia.w	r8, {r1, r2}
  40ba6c:	f300 83d6 	bgt.w	40c21c <_svfprintf_r+0xac4>
  40ba70:	f108 0808 	add.w	r8, r8, #8
  40ba74:	2d80      	cmp	r5, #128	; 0x80
  40ba76:	f000 8315 	beq.w	40c0a4 <_svfprintf_r+0x94c>
  40ba7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40ba7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40ba7e:	1a9f      	subs	r7, r3, r2
  40ba80:	2f00      	cmp	r7, #0
  40ba82:	dd36      	ble.n	40baf2 <_svfprintf_r+0x39a>
  40ba84:	2f10      	cmp	r7, #16
  40ba86:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40ba88:	4d8e      	ldr	r5, [pc, #568]	; (40bcc4 <_svfprintf_r+0x56c>)
  40ba8a:	dd27      	ble.n	40badc <_svfprintf_r+0x384>
  40ba8c:	4642      	mov	r2, r8
  40ba8e:	4621      	mov	r1, r4
  40ba90:	46b0      	mov	r8, r6
  40ba92:	f04f 0b10 	mov.w	fp, #16
  40ba96:	462e      	mov	r6, r5
  40ba98:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40ba9a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40ba9c:	e004      	b.n	40baa8 <_svfprintf_r+0x350>
  40ba9e:	3f10      	subs	r7, #16
  40baa0:	2f10      	cmp	r7, #16
  40baa2:	f102 0208 	add.w	r2, r2, #8
  40baa6:	dd15      	ble.n	40bad4 <_svfprintf_r+0x37c>
  40baa8:	3301      	adds	r3, #1
  40baaa:	3110      	adds	r1, #16
  40baac:	2b07      	cmp	r3, #7
  40baae:	9127      	str	r1, [sp, #156]	; 0x9c
  40bab0:	9326      	str	r3, [sp, #152]	; 0x98
  40bab2:	e882 0840 	stmia.w	r2, {r6, fp}
  40bab6:	ddf2      	ble.n	40ba9e <_svfprintf_r+0x346>
  40bab8:	aa25      	add	r2, sp, #148	; 0x94
  40baba:	4629      	mov	r1, r5
  40babc:	4620      	mov	r0, r4
  40babe:	f003 fa6d 	bl	40ef9c <__ssprint_r>
  40bac2:	2800      	cmp	r0, #0
  40bac4:	f47f af1a 	bne.w	40b8fc <_svfprintf_r+0x1a4>
  40bac8:	3f10      	subs	r7, #16
  40baca:	2f10      	cmp	r7, #16
  40bacc:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40bace:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40bad0:	464a      	mov	r2, r9
  40bad2:	dce9      	bgt.n	40baa8 <_svfprintf_r+0x350>
  40bad4:	4635      	mov	r5, r6
  40bad6:	460c      	mov	r4, r1
  40bad8:	4646      	mov	r6, r8
  40bada:	4690      	mov	r8, r2
  40badc:	3301      	adds	r3, #1
  40bade:	443c      	add	r4, r7
  40bae0:	2b07      	cmp	r3, #7
  40bae2:	9427      	str	r4, [sp, #156]	; 0x9c
  40bae4:	9326      	str	r3, [sp, #152]	; 0x98
  40bae6:	e888 00a0 	stmia.w	r8, {r5, r7}
  40baea:	f300 8381 	bgt.w	40c1f0 <_svfprintf_r+0xa98>
  40baee:	f108 0808 	add.w	r8, r8, #8
  40baf2:	9b07      	ldr	r3, [sp, #28]
  40baf4:	05df      	lsls	r7, r3, #23
  40baf6:	f100 8268 	bmi.w	40bfca <_svfprintf_r+0x872>
  40bafa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40bafc:	990e      	ldr	r1, [sp, #56]	; 0x38
  40bafe:	f8c8 6000 	str.w	r6, [r8]
  40bb02:	3301      	adds	r3, #1
  40bb04:	440c      	add	r4, r1
  40bb06:	2b07      	cmp	r3, #7
  40bb08:	9427      	str	r4, [sp, #156]	; 0x9c
  40bb0a:	f8c8 1004 	str.w	r1, [r8, #4]
  40bb0e:	9326      	str	r3, [sp, #152]	; 0x98
  40bb10:	f300 834d 	bgt.w	40c1ae <_svfprintf_r+0xa56>
  40bb14:	f108 0808 	add.w	r8, r8, #8
  40bb18:	9b07      	ldr	r3, [sp, #28]
  40bb1a:	075b      	lsls	r3, r3, #29
  40bb1c:	d53a      	bpl.n	40bb94 <_svfprintf_r+0x43c>
  40bb1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40bb20:	9a08      	ldr	r2, [sp, #32]
  40bb22:	1a9d      	subs	r5, r3, r2
  40bb24:	2d00      	cmp	r5, #0
  40bb26:	dd35      	ble.n	40bb94 <_svfprintf_r+0x43c>
  40bb28:	2d10      	cmp	r5, #16
  40bb2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40bb2c:	dd20      	ble.n	40bb70 <_svfprintf_r+0x418>
  40bb2e:	2610      	movs	r6, #16
  40bb30:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40bb32:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  40bb36:	e004      	b.n	40bb42 <_svfprintf_r+0x3ea>
  40bb38:	3d10      	subs	r5, #16
  40bb3a:	2d10      	cmp	r5, #16
  40bb3c:	f108 0808 	add.w	r8, r8, #8
  40bb40:	dd16      	ble.n	40bb70 <_svfprintf_r+0x418>
  40bb42:	3301      	adds	r3, #1
  40bb44:	4a5e      	ldr	r2, [pc, #376]	; (40bcc0 <_svfprintf_r+0x568>)
  40bb46:	9326      	str	r3, [sp, #152]	; 0x98
  40bb48:	3410      	adds	r4, #16
  40bb4a:	2b07      	cmp	r3, #7
  40bb4c:	9427      	str	r4, [sp, #156]	; 0x9c
  40bb4e:	e888 0044 	stmia.w	r8, {r2, r6}
  40bb52:	ddf1      	ble.n	40bb38 <_svfprintf_r+0x3e0>
  40bb54:	aa25      	add	r2, sp, #148	; 0x94
  40bb56:	4659      	mov	r1, fp
  40bb58:	4638      	mov	r0, r7
  40bb5a:	f003 fa1f 	bl	40ef9c <__ssprint_r>
  40bb5e:	2800      	cmp	r0, #0
  40bb60:	f47f aecc 	bne.w	40b8fc <_svfprintf_r+0x1a4>
  40bb64:	3d10      	subs	r5, #16
  40bb66:	2d10      	cmp	r5, #16
  40bb68:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40bb6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40bb6c:	46c8      	mov	r8, r9
  40bb6e:	dce8      	bgt.n	40bb42 <_svfprintf_r+0x3ea>
  40bb70:	3301      	adds	r3, #1
  40bb72:	4a53      	ldr	r2, [pc, #332]	; (40bcc0 <_svfprintf_r+0x568>)
  40bb74:	9326      	str	r3, [sp, #152]	; 0x98
  40bb76:	442c      	add	r4, r5
  40bb78:	2b07      	cmp	r3, #7
  40bb7a:	9427      	str	r4, [sp, #156]	; 0x9c
  40bb7c:	e888 0024 	stmia.w	r8, {r2, r5}
  40bb80:	dd08      	ble.n	40bb94 <_svfprintf_r+0x43c>
  40bb82:	aa25      	add	r2, sp, #148	; 0x94
  40bb84:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40bb86:	980c      	ldr	r0, [sp, #48]	; 0x30
  40bb88:	f003 fa08 	bl	40ef9c <__ssprint_r>
  40bb8c:	2800      	cmp	r0, #0
  40bb8e:	f47f aeb5 	bne.w	40b8fc <_svfprintf_r+0x1a4>
  40bb92:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40bb94:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40bb96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40bb98:	9908      	ldr	r1, [sp, #32]
  40bb9a:	428a      	cmp	r2, r1
  40bb9c:	bfac      	ite	ge
  40bb9e:	189b      	addge	r3, r3, r2
  40bba0:	185b      	addlt	r3, r3, r1
  40bba2:	9309      	str	r3, [sp, #36]	; 0x24
  40bba4:	2c00      	cmp	r4, #0
  40bba6:	f040 830d 	bne.w	40c1c4 <_svfprintf_r+0xa6c>
  40bbaa:	2300      	movs	r3, #0
  40bbac:	9326      	str	r3, [sp, #152]	; 0x98
  40bbae:	46c8      	mov	r8, r9
  40bbb0:	e5f9      	b.n	40b7a6 <_svfprintf_r+0x4e>
  40bbb2:	9311      	str	r3, [sp, #68]	; 0x44
  40bbb4:	f01b 0320 	ands.w	r3, fp, #32
  40bbb8:	f040 81e3 	bne.w	40bf82 <_svfprintf_r+0x82a>
  40bbbc:	f01b 0210 	ands.w	r2, fp, #16
  40bbc0:	f040 842e 	bne.w	40c420 <_svfprintf_r+0xcc8>
  40bbc4:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  40bbc8:	f000 842a 	beq.w	40c420 <_svfprintf_r+0xcc8>
  40bbcc:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40bbce:	4613      	mov	r3, r2
  40bbd0:	460a      	mov	r2, r1
  40bbd2:	3204      	adds	r2, #4
  40bbd4:	880c      	ldrh	r4, [r1, #0]
  40bbd6:	920f      	str	r2, [sp, #60]	; 0x3c
  40bbd8:	2500      	movs	r5, #0
  40bbda:	e6b0      	b.n	40b93e <_svfprintf_r+0x1e6>
  40bbdc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40bbde:	9311      	str	r3, [sp, #68]	; 0x44
  40bbe0:	6816      	ldr	r6, [r2, #0]
  40bbe2:	2400      	movs	r4, #0
  40bbe4:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  40bbe8:	1d15      	adds	r5, r2, #4
  40bbea:	2e00      	cmp	r6, #0
  40bbec:	f000 86a7 	beq.w	40c93e <_svfprintf_r+0x11e6>
  40bbf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40bbf2:	1c53      	adds	r3, r2, #1
  40bbf4:	f000 8609 	beq.w	40c80a <_svfprintf_r+0x10b2>
  40bbf8:	4621      	mov	r1, r4
  40bbfa:	4630      	mov	r0, r6
  40bbfc:	f002 fbd8 	bl	40e3b0 <memchr>
  40bc00:	2800      	cmp	r0, #0
  40bc02:	f000 86e1 	beq.w	40c9c8 <_svfprintf_r+0x1270>
  40bc06:	1b83      	subs	r3, r0, r6
  40bc08:	930e      	str	r3, [sp, #56]	; 0x38
  40bc0a:	940a      	str	r4, [sp, #40]	; 0x28
  40bc0c:	950f      	str	r5, [sp, #60]	; 0x3c
  40bc0e:	f8cd b01c 	str.w	fp, [sp, #28]
  40bc12:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40bc16:	9308      	str	r3, [sp, #32]
  40bc18:	9412      	str	r4, [sp, #72]	; 0x48
  40bc1a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40bc1e:	e6b3      	b.n	40b988 <_svfprintf_r+0x230>
  40bc20:	f89a 3000 	ldrb.w	r3, [sl]
  40bc24:	2201      	movs	r2, #1
  40bc26:	212b      	movs	r1, #43	; 0x2b
  40bc28:	e5ee      	b.n	40b808 <_svfprintf_r+0xb0>
  40bc2a:	f04b 0b20 	orr.w	fp, fp, #32
  40bc2e:	f89a 3000 	ldrb.w	r3, [sl]
  40bc32:	e5e9      	b.n	40b808 <_svfprintf_r+0xb0>
  40bc34:	9311      	str	r3, [sp, #68]	; 0x44
  40bc36:	2a00      	cmp	r2, #0
  40bc38:	f040 8795 	bne.w	40cb66 <_svfprintf_r+0x140e>
  40bc3c:	4b22      	ldr	r3, [pc, #136]	; (40bcc8 <_svfprintf_r+0x570>)
  40bc3e:	9318      	str	r3, [sp, #96]	; 0x60
  40bc40:	f01b 0f20 	tst.w	fp, #32
  40bc44:	f040 8111 	bne.w	40be6a <_svfprintf_r+0x712>
  40bc48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40bc4a:	f01b 0f10 	tst.w	fp, #16
  40bc4e:	4613      	mov	r3, r2
  40bc50:	f040 83e1 	bne.w	40c416 <_svfprintf_r+0xcbe>
  40bc54:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40bc58:	f000 83dd 	beq.w	40c416 <_svfprintf_r+0xcbe>
  40bc5c:	3304      	adds	r3, #4
  40bc5e:	8814      	ldrh	r4, [r2, #0]
  40bc60:	930f      	str	r3, [sp, #60]	; 0x3c
  40bc62:	2500      	movs	r5, #0
  40bc64:	f01b 0f01 	tst.w	fp, #1
  40bc68:	f000 810c 	beq.w	40be84 <_svfprintf_r+0x72c>
  40bc6c:	ea54 0305 	orrs.w	r3, r4, r5
  40bc70:	f000 8108 	beq.w	40be84 <_svfprintf_r+0x72c>
  40bc74:	2330      	movs	r3, #48	; 0x30
  40bc76:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40bc7a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  40bc7e:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  40bc82:	f04b 0b02 	orr.w	fp, fp, #2
  40bc86:	2302      	movs	r3, #2
  40bc88:	e659      	b.n	40b93e <_svfprintf_r+0x1e6>
  40bc8a:	f89a 3000 	ldrb.w	r3, [sl]
  40bc8e:	2900      	cmp	r1, #0
  40bc90:	f47f adba 	bne.w	40b808 <_svfprintf_r+0xb0>
  40bc94:	2201      	movs	r2, #1
  40bc96:	2120      	movs	r1, #32
  40bc98:	e5b6      	b.n	40b808 <_svfprintf_r+0xb0>
  40bc9a:	f04b 0b01 	orr.w	fp, fp, #1
  40bc9e:	f89a 3000 	ldrb.w	r3, [sl]
  40bca2:	e5b1      	b.n	40b808 <_svfprintf_r+0xb0>
  40bca4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40bca6:	6823      	ldr	r3, [r4, #0]
  40bca8:	930d      	str	r3, [sp, #52]	; 0x34
  40bcaa:	4618      	mov	r0, r3
  40bcac:	2800      	cmp	r0, #0
  40bcae:	4623      	mov	r3, r4
  40bcb0:	f103 0304 	add.w	r3, r3, #4
  40bcb4:	f6ff ae0a 	blt.w	40b8cc <_svfprintf_r+0x174>
  40bcb8:	930f      	str	r3, [sp, #60]	; 0x3c
  40bcba:	f89a 3000 	ldrb.w	r3, [sl]
  40bcbe:	e5a3      	b.n	40b808 <_svfprintf_r+0xb0>
  40bcc0:	00411400 	.word	0x00411400
  40bcc4:	00411410 	.word	0x00411410
  40bcc8:	004113e0 	.word	0x004113e0
  40bccc:	f04b 0b10 	orr.w	fp, fp, #16
  40bcd0:	f01b 0f20 	tst.w	fp, #32
  40bcd4:	9311      	str	r3, [sp, #68]	; 0x44
  40bcd6:	f43f ae23 	beq.w	40b920 <_svfprintf_r+0x1c8>
  40bcda:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40bcdc:	3507      	adds	r5, #7
  40bcde:	f025 0307 	bic.w	r3, r5, #7
  40bce2:	f103 0208 	add.w	r2, r3, #8
  40bce6:	e9d3 4500 	ldrd	r4, r5, [r3]
  40bcea:	920f      	str	r2, [sp, #60]	; 0x3c
  40bcec:	2301      	movs	r3, #1
  40bcee:	e626      	b.n	40b93e <_svfprintf_r+0x1e6>
  40bcf0:	f89a 3000 	ldrb.w	r3, [sl]
  40bcf4:	2b2a      	cmp	r3, #42	; 0x2a
  40bcf6:	f10a 0401 	add.w	r4, sl, #1
  40bcfa:	f000 8727 	beq.w	40cb4c <_svfprintf_r+0x13f4>
  40bcfe:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40bd02:	2809      	cmp	r0, #9
  40bd04:	46a2      	mov	sl, r4
  40bd06:	f200 86ad 	bhi.w	40ca64 <_svfprintf_r+0x130c>
  40bd0a:	2300      	movs	r3, #0
  40bd0c:	461c      	mov	r4, r3
  40bd0e:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40bd12:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40bd16:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40bd1a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40bd1e:	2809      	cmp	r0, #9
  40bd20:	d9f5      	bls.n	40bd0e <_svfprintf_r+0x5b6>
  40bd22:	940a      	str	r4, [sp, #40]	; 0x28
  40bd24:	e572      	b.n	40b80c <_svfprintf_r+0xb4>
  40bd26:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  40bd2a:	f89a 3000 	ldrb.w	r3, [sl]
  40bd2e:	e56b      	b.n	40b808 <_svfprintf_r+0xb0>
  40bd30:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  40bd34:	f89a 3000 	ldrb.w	r3, [sl]
  40bd38:	e566      	b.n	40b808 <_svfprintf_r+0xb0>
  40bd3a:	f89a 3000 	ldrb.w	r3, [sl]
  40bd3e:	2b6c      	cmp	r3, #108	; 0x6c
  40bd40:	bf03      	ittte	eq
  40bd42:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  40bd46:	f04b 0b20 	orreq.w	fp, fp, #32
  40bd4a:	f10a 0a01 	addeq.w	sl, sl, #1
  40bd4e:	f04b 0b10 	orrne.w	fp, fp, #16
  40bd52:	e559      	b.n	40b808 <_svfprintf_r+0xb0>
  40bd54:	2a00      	cmp	r2, #0
  40bd56:	f040 8711 	bne.w	40cb7c <_svfprintf_r+0x1424>
  40bd5a:	f01b 0f20 	tst.w	fp, #32
  40bd5e:	f040 84f9 	bne.w	40c754 <_svfprintf_r+0xffc>
  40bd62:	f01b 0f10 	tst.w	fp, #16
  40bd66:	f040 84ac 	bne.w	40c6c2 <_svfprintf_r+0xf6a>
  40bd6a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40bd6e:	f000 84a8 	beq.w	40c6c2 <_svfprintf_r+0xf6a>
  40bd72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40bd74:	6813      	ldr	r3, [r2, #0]
  40bd76:	3204      	adds	r2, #4
  40bd78:	920f      	str	r2, [sp, #60]	; 0x3c
  40bd7a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  40bd7e:	801a      	strh	r2, [r3, #0]
  40bd80:	e511      	b.n	40b7a6 <_svfprintf_r+0x4e>
  40bd82:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40bd84:	4bb3      	ldr	r3, [pc, #716]	; (40c054 <_svfprintf_r+0x8fc>)
  40bd86:	680c      	ldr	r4, [r1, #0]
  40bd88:	9318      	str	r3, [sp, #96]	; 0x60
  40bd8a:	2230      	movs	r2, #48	; 0x30
  40bd8c:	2378      	movs	r3, #120	; 0x78
  40bd8e:	3104      	adds	r1, #4
  40bd90:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  40bd94:	9311      	str	r3, [sp, #68]	; 0x44
  40bd96:	f04b 0b02 	orr.w	fp, fp, #2
  40bd9a:	910f      	str	r1, [sp, #60]	; 0x3c
  40bd9c:	2500      	movs	r5, #0
  40bd9e:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  40bda2:	2302      	movs	r3, #2
  40bda4:	e5cb      	b.n	40b93e <_svfprintf_r+0x1e6>
  40bda6:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40bda8:	9311      	str	r3, [sp, #68]	; 0x44
  40bdaa:	680a      	ldr	r2, [r1, #0]
  40bdac:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  40bdb0:	2300      	movs	r3, #0
  40bdb2:	460a      	mov	r2, r1
  40bdb4:	461f      	mov	r7, r3
  40bdb6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40bdba:	3204      	adds	r2, #4
  40bdbc:	2301      	movs	r3, #1
  40bdbe:	9308      	str	r3, [sp, #32]
  40bdc0:	f8cd b01c 	str.w	fp, [sp, #28]
  40bdc4:	970a      	str	r7, [sp, #40]	; 0x28
  40bdc6:	9712      	str	r7, [sp, #72]	; 0x48
  40bdc8:	920f      	str	r2, [sp, #60]	; 0x3c
  40bdca:	930e      	str	r3, [sp, #56]	; 0x38
  40bdcc:	ae28      	add	r6, sp, #160	; 0xa0
  40bdce:	e5df      	b.n	40b990 <_svfprintf_r+0x238>
  40bdd0:	9311      	str	r3, [sp, #68]	; 0x44
  40bdd2:	2a00      	cmp	r2, #0
  40bdd4:	f040 86ea 	bne.w	40cbac <_svfprintf_r+0x1454>
  40bdd8:	f01b 0f20 	tst.w	fp, #32
  40bddc:	d15d      	bne.n	40be9a <_svfprintf_r+0x742>
  40bdde:	f01b 0f10 	tst.w	fp, #16
  40bde2:	f040 8308 	bne.w	40c3f6 <_svfprintf_r+0xc9e>
  40bde6:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40bdea:	f000 8304 	beq.w	40c3f6 <_svfprintf_r+0xc9e>
  40bdee:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40bdf0:	f9b1 4000 	ldrsh.w	r4, [r1]
  40bdf4:	3104      	adds	r1, #4
  40bdf6:	17e5      	asrs	r5, r4, #31
  40bdf8:	4622      	mov	r2, r4
  40bdfa:	462b      	mov	r3, r5
  40bdfc:	910f      	str	r1, [sp, #60]	; 0x3c
  40bdfe:	2a00      	cmp	r2, #0
  40be00:	f173 0300 	sbcs.w	r3, r3, #0
  40be04:	db58      	blt.n	40beb8 <_svfprintf_r+0x760>
  40be06:	990a      	ldr	r1, [sp, #40]	; 0x28
  40be08:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40be0c:	1c4a      	adds	r2, r1, #1
  40be0e:	f04f 0301 	mov.w	r3, #1
  40be12:	f47f ad9b 	bne.w	40b94c <_svfprintf_r+0x1f4>
  40be16:	ea54 0205 	orrs.w	r2, r4, r5
  40be1a:	f000 81df 	beq.w	40c1dc <_svfprintf_r+0xa84>
  40be1e:	f8cd b01c 	str.w	fp, [sp, #28]
  40be22:	2b01      	cmp	r3, #1
  40be24:	f000 827b 	beq.w	40c31e <_svfprintf_r+0xbc6>
  40be28:	2b02      	cmp	r3, #2
  40be2a:	f040 8206 	bne.w	40c23a <_svfprintf_r+0xae2>
  40be2e:	9818      	ldr	r0, [sp, #96]	; 0x60
  40be30:	464e      	mov	r6, r9
  40be32:	0923      	lsrs	r3, r4, #4
  40be34:	f004 010f 	and.w	r1, r4, #15
  40be38:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  40be3c:	092a      	lsrs	r2, r5, #4
  40be3e:	461c      	mov	r4, r3
  40be40:	4615      	mov	r5, r2
  40be42:	5c43      	ldrb	r3, [r0, r1]
  40be44:	f806 3d01 	strb.w	r3, [r6, #-1]!
  40be48:	ea54 0305 	orrs.w	r3, r4, r5
  40be4c:	d1f1      	bne.n	40be32 <_svfprintf_r+0x6da>
  40be4e:	eba9 0306 	sub.w	r3, r9, r6
  40be52:	930e      	str	r3, [sp, #56]	; 0x38
  40be54:	e590      	b.n	40b978 <_svfprintf_r+0x220>
  40be56:	9311      	str	r3, [sp, #68]	; 0x44
  40be58:	2a00      	cmp	r2, #0
  40be5a:	f040 86a3 	bne.w	40cba4 <_svfprintf_r+0x144c>
  40be5e:	4b7e      	ldr	r3, [pc, #504]	; (40c058 <_svfprintf_r+0x900>)
  40be60:	9318      	str	r3, [sp, #96]	; 0x60
  40be62:	f01b 0f20 	tst.w	fp, #32
  40be66:	f43f aeef 	beq.w	40bc48 <_svfprintf_r+0x4f0>
  40be6a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40be6c:	3507      	adds	r5, #7
  40be6e:	f025 0307 	bic.w	r3, r5, #7
  40be72:	f103 0208 	add.w	r2, r3, #8
  40be76:	f01b 0f01 	tst.w	fp, #1
  40be7a:	920f      	str	r2, [sp, #60]	; 0x3c
  40be7c:	e9d3 4500 	ldrd	r4, r5, [r3]
  40be80:	f47f aef4 	bne.w	40bc6c <_svfprintf_r+0x514>
  40be84:	2302      	movs	r3, #2
  40be86:	e55a      	b.n	40b93e <_svfprintf_r+0x1e6>
  40be88:	9311      	str	r3, [sp, #68]	; 0x44
  40be8a:	2a00      	cmp	r2, #0
  40be8c:	f040 8686 	bne.w	40cb9c <_svfprintf_r+0x1444>
  40be90:	f04b 0b10 	orr.w	fp, fp, #16
  40be94:	f01b 0f20 	tst.w	fp, #32
  40be98:	d0a1      	beq.n	40bdde <_svfprintf_r+0x686>
  40be9a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40be9c:	3507      	adds	r5, #7
  40be9e:	f025 0507 	bic.w	r5, r5, #7
  40bea2:	e9d5 2300 	ldrd	r2, r3, [r5]
  40bea6:	2a00      	cmp	r2, #0
  40bea8:	f105 0108 	add.w	r1, r5, #8
  40beac:	461d      	mov	r5, r3
  40beae:	f173 0300 	sbcs.w	r3, r3, #0
  40beb2:	910f      	str	r1, [sp, #60]	; 0x3c
  40beb4:	4614      	mov	r4, r2
  40beb6:	daa6      	bge.n	40be06 <_svfprintf_r+0x6ae>
  40beb8:	272d      	movs	r7, #45	; 0x2d
  40beba:	4264      	negs	r4, r4
  40bebc:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40bec0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40bec4:	2301      	movs	r3, #1
  40bec6:	e53d      	b.n	40b944 <_svfprintf_r+0x1ec>
  40bec8:	9311      	str	r3, [sp, #68]	; 0x44
  40beca:	2a00      	cmp	r2, #0
  40becc:	f040 8662 	bne.w	40cb94 <_svfprintf_r+0x143c>
  40bed0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40bed2:	3507      	adds	r5, #7
  40bed4:	f025 0307 	bic.w	r3, r5, #7
  40bed8:	f103 0208 	add.w	r2, r3, #8
  40bedc:	920f      	str	r2, [sp, #60]	; 0x3c
  40bede:	681a      	ldr	r2, [r3, #0]
  40bee0:	9215      	str	r2, [sp, #84]	; 0x54
  40bee2:	685b      	ldr	r3, [r3, #4]
  40bee4:	9314      	str	r3, [sp, #80]	; 0x50
  40bee6:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40bee8:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40beea:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  40beee:	4628      	mov	r0, r5
  40bef0:	4621      	mov	r1, r4
  40bef2:	f04f 32ff 	mov.w	r2, #4294967295
  40bef6:	4b59      	ldr	r3, [pc, #356]	; (40c05c <_svfprintf_r+0x904>)
  40bef8:	f7fe ffb0 	bl	40ae5c <__aeabi_dcmpun>
  40befc:	2800      	cmp	r0, #0
  40befe:	f040 834a 	bne.w	40c596 <_svfprintf_r+0xe3e>
  40bf02:	4628      	mov	r0, r5
  40bf04:	4621      	mov	r1, r4
  40bf06:	f04f 32ff 	mov.w	r2, #4294967295
  40bf0a:	4b54      	ldr	r3, [pc, #336]	; (40c05c <_svfprintf_r+0x904>)
  40bf0c:	f7fe ff88 	bl	40ae20 <__aeabi_dcmple>
  40bf10:	2800      	cmp	r0, #0
  40bf12:	f040 8340 	bne.w	40c596 <_svfprintf_r+0xe3e>
  40bf16:	a815      	add	r0, sp, #84	; 0x54
  40bf18:	c80d      	ldmia	r0, {r0, r2, r3}
  40bf1a:	9914      	ldr	r1, [sp, #80]	; 0x50
  40bf1c:	f7fe ff76 	bl	40ae0c <__aeabi_dcmplt>
  40bf20:	2800      	cmp	r0, #0
  40bf22:	f040 8530 	bne.w	40c986 <_svfprintf_r+0x122e>
  40bf26:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40bf2a:	4e4d      	ldr	r6, [pc, #308]	; (40c060 <_svfprintf_r+0x908>)
  40bf2c:	4b4d      	ldr	r3, [pc, #308]	; (40c064 <_svfprintf_r+0x90c>)
  40bf2e:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  40bf32:	9007      	str	r0, [sp, #28]
  40bf34:	9811      	ldr	r0, [sp, #68]	; 0x44
  40bf36:	2203      	movs	r2, #3
  40bf38:	2100      	movs	r1, #0
  40bf3a:	9208      	str	r2, [sp, #32]
  40bf3c:	910a      	str	r1, [sp, #40]	; 0x28
  40bf3e:	2847      	cmp	r0, #71	; 0x47
  40bf40:	bfd8      	it	le
  40bf42:	461e      	movle	r6, r3
  40bf44:	920e      	str	r2, [sp, #56]	; 0x38
  40bf46:	9112      	str	r1, [sp, #72]	; 0x48
  40bf48:	e51e      	b.n	40b988 <_svfprintf_r+0x230>
  40bf4a:	f04b 0b08 	orr.w	fp, fp, #8
  40bf4e:	f89a 3000 	ldrb.w	r3, [sl]
  40bf52:	e459      	b.n	40b808 <_svfprintf_r+0xb0>
  40bf54:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40bf58:	2300      	movs	r3, #0
  40bf5a:	461c      	mov	r4, r3
  40bf5c:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40bf60:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40bf64:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  40bf68:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40bf6c:	2809      	cmp	r0, #9
  40bf6e:	d9f5      	bls.n	40bf5c <_svfprintf_r+0x804>
  40bf70:	940d      	str	r4, [sp, #52]	; 0x34
  40bf72:	e44b      	b.n	40b80c <_svfprintf_r+0xb4>
  40bf74:	f04b 0b10 	orr.w	fp, fp, #16
  40bf78:	9311      	str	r3, [sp, #68]	; 0x44
  40bf7a:	f01b 0320 	ands.w	r3, fp, #32
  40bf7e:	f43f ae1d 	beq.w	40bbbc <_svfprintf_r+0x464>
  40bf82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40bf84:	3507      	adds	r5, #7
  40bf86:	f025 0307 	bic.w	r3, r5, #7
  40bf8a:	f103 0208 	add.w	r2, r3, #8
  40bf8e:	e9d3 4500 	ldrd	r4, r5, [r3]
  40bf92:	920f      	str	r2, [sp, #60]	; 0x3c
  40bf94:	2300      	movs	r3, #0
  40bf96:	e4d2      	b.n	40b93e <_svfprintf_r+0x1e6>
  40bf98:	9311      	str	r3, [sp, #68]	; 0x44
  40bf9a:	2a00      	cmp	r2, #0
  40bf9c:	f040 85e7 	bne.w	40cb6e <_svfprintf_r+0x1416>
  40bfa0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40bfa2:	2a00      	cmp	r2, #0
  40bfa4:	f43f aca3 	beq.w	40b8ee <_svfprintf_r+0x196>
  40bfa8:	2300      	movs	r3, #0
  40bfaa:	2101      	movs	r1, #1
  40bfac:	461f      	mov	r7, r3
  40bfae:	9108      	str	r1, [sp, #32]
  40bfb0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  40bfb4:	f8cd b01c 	str.w	fp, [sp, #28]
  40bfb8:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40bfbc:	930a      	str	r3, [sp, #40]	; 0x28
  40bfbe:	9312      	str	r3, [sp, #72]	; 0x48
  40bfc0:	910e      	str	r1, [sp, #56]	; 0x38
  40bfc2:	ae28      	add	r6, sp, #160	; 0xa0
  40bfc4:	e4e4      	b.n	40b990 <_svfprintf_r+0x238>
  40bfc6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40bfc8:	e534      	b.n	40ba34 <_svfprintf_r+0x2dc>
  40bfca:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40bfcc:	2b65      	cmp	r3, #101	; 0x65
  40bfce:	f340 80a7 	ble.w	40c120 <_svfprintf_r+0x9c8>
  40bfd2:	a815      	add	r0, sp, #84	; 0x54
  40bfd4:	c80d      	ldmia	r0, {r0, r2, r3}
  40bfd6:	9914      	ldr	r1, [sp, #80]	; 0x50
  40bfd8:	f7fe ff0e 	bl	40adf8 <__aeabi_dcmpeq>
  40bfdc:	2800      	cmp	r0, #0
  40bfde:	f000 8150 	beq.w	40c282 <_svfprintf_r+0xb2a>
  40bfe2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40bfe4:	4a20      	ldr	r2, [pc, #128]	; (40c068 <_svfprintf_r+0x910>)
  40bfe6:	f8c8 2000 	str.w	r2, [r8]
  40bfea:	3301      	adds	r3, #1
  40bfec:	3401      	adds	r4, #1
  40bfee:	2201      	movs	r2, #1
  40bff0:	2b07      	cmp	r3, #7
  40bff2:	9427      	str	r4, [sp, #156]	; 0x9c
  40bff4:	9326      	str	r3, [sp, #152]	; 0x98
  40bff6:	f8c8 2004 	str.w	r2, [r8, #4]
  40bffa:	f300 836a 	bgt.w	40c6d2 <_svfprintf_r+0xf7a>
  40bffe:	f108 0808 	add.w	r8, r8, #8
  40c002:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40c004:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40c006:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40c008:	4293      	cmp	r3, r2
  40c00a:	db03      	blt.n	40c014 <_svfprintf_r+0x8bc>
  40c00c:	9b07      	ldr	r3, [sp, #28]
  40c00e:	07dd      	lsls	r5, r3, #31
  40c010:	f57f ad82 	bpl.w	40bb18 <_svfprintf_r+0x3c0>
  40c014:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40c016:	9919      	ldr	r1, [sp, #100]	; 0x64
  40c018:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40c01a:	f8c8 2000 	str.w	r2, [r8]
  40c01e:	3301      	adds	r3, #1
  40c020:	440c      	add	r4, r1
  40c022:	2b07      	cmp	r3, #7
  40c024:	f8c8 1004 	str.w	r1, [r8, #4]
  40c028:	9427      	str	r4, [sp, #156]	; 0x9c
  40c02a:	9326      	str	r3, [sp, #152]	; 0x98
  40c02c:	f300 839e 	bgt.w	40c76c <_svfprintf_r+0x1014>
  40c030:	f108 0808 	add.w	r8, r8, #8
  40c034:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40c036:	1e5e      	subs	r6, r3, #1
  40c038:	2e00      	cmp	r6, #0
  40c03a:	f77f ad6d 	ble.w	40bb18 <_svfprintf_r+0x3c0>
  40c03e:	2e10      	cmp	r6, #16
  40c040:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40c042:	4d0a      	ldr	r5, [pc, #40]	; (40c06c <_svfprintf_r+0x914>)
  40c044:	f340 81f5 	ble.w	40c432 <_svfprintf_r+0xcda>
  40c048:	4622      	mov	r2, r4
  40c04a:	2710      	movs	r7, #16
  40c04c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40c050:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40c052:	e013      	b.n	40c07c <_svfprintf_r+0x924>
  40c054:	004113e0 	.word	0x004113e0
  40c058:	004113cc 	.word	0x004113cc
  40c05c:	7fefffff 	.word	0x7fefffff
  40c060:	004113c0 	.word	0x004113c0
  40c064:	004113bc 	.word	0x004113bc
  40c068:	004113fc 	.word	0x004113fc
  40c06c:	00411410 	.word	0x00411410
  40c070:	f108 0808 	add.w	r8, r8, #8
  40c074:	3e10      	subs	r6, #16
  40c076:	2e10      	cmp	r6, #16
  40c078:	f340 81da 	ble.w	40c430 <_svfprintf_r+0xcd8>
  40c07c:	3301      	adds	r3, #1
  40c07e:	3210      	adds	r2, #16
  40c080:	2b07      	cmp	r3, #7
  40c082:	9227      	str	r2, [sp, #156]	; 0x9c
  40c084:	9326      	str	r3, [sp, #152]	; 0x98
  40c086:	e888 00a0 	stmia.w	r8, {r5, r7}
  40c08a:	ddf1      	ble.n	40c070 <_svfprintf_r+0x918>
  40c08c:	aa25      	add	r2, sp, #148	; 0x94
  40c08e:	4621      	mov	r1, r4
  40c090:	4658      	mov	r0, fp
  40c092:	f002 ff83 	bl	40ef9c <__ssprint_r>
  40c096:	2800      	cmp	r0, #0
  40c098:	f47f ac30 	bne.w	40b8fc <_svfprintf_r+0x1a4>
  40c09c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40c09e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40c0a0:	46c8      	mov	r8, r9
  40c0a2:	e7e7      	b.n	40c074 <_svfprintf_r+0x91c>
  40c0a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40c0a6:	9a08      	ldr	r2, [sp, #32]
  40c0a8:	1a9f      	subs	r7, r3, r2
  40c0aa:	2f00      	cmp	r7, #0
  40c0ac:	f77f ace5 	ble.w	40ba7a <_svfprintf_r+0x322>
  40c0b0:	2f10      	cmp	r7, #16
  40c0b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40c0b4:	4db6      	ldr	r5, [pc, #728]	; (40c390 <_svfprintf_r+0xc38>)
  40c0b6:	dd27      	ble.n	40c108 <_svfprintf_r+0x9b0>
  40c0b8:	4642      	mov	r2, r8
  40c0ba:	4621      	mov	r1, r4
  40c0bc:	46b0      	mov	r8, r6
  40c0be:	f04f 0b10 	mov.w	fp, #16
  40c0c2:	462e      	mov	r6, r5
  40c0c4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40c0c6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40c0c8:	e004      	b.n	40c0d4 <_svfprintf_r+0x97c>
  40c0ca:	3f10      	subs	r7, #16
  40c0cc:	2f10      	cmp	r7, #16
  40c0ce:	f102 0208 	add.w	r2, r2, #8
  40c0d2:	dd15      	ble.n	40c100 <_svfprintf_r+0x9a8>
  40c0d4:	3301      	adds	r3, #1
  40c0d6:	3110      	adds	r1, #16
  40c0d8:	2b07      	cmp	r3, #7
  40c0da:	9127      	str	r1, [sp, #156]	; 0x9c
  40c0dc:	9326      	str	r3, [sp, #152]	; 0x98
  40c0de:	e882 0840 	stmia.w	r2, {r6, fp}
  40c0e2:	ddf2      	ble.n	40c0ca <_svfprintf_r+0x972>
  40c0e4:	aa25      	add	r2, sp, #148	; 0x94
  40c0e6:	4629      	mov	r1, r5
  40c0e8:	4620      	mov	r0, r4
  40c0ea:	f002 ff57 	bl	40ef9c <__ssprint_r>
  40c0ee:	2800      	cmp	r0, #0
  40c0f0:	f47f ac04 	bne.w	40b8fc <_svfprintf_r+0x1a4>
  40c0f4:	3f10      	subs	r7, #16
  40c0f6:	2f10      	cmp	r7, #16
  40c0f8:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40c0fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40c0fc:	464a      	mov	r2, r9
  40c0fe:	dce9      	bgt.n	40c0d4 <_svfprintf_r+0x97c>
  40c100:	4635      	mov	r5, r6
  40c102:	460c      	mov	r4, r1
  40c104:	4646      	mov	r6, r8
  40c106:	4690      	mov	r8, r2
  40c108:	3301      	adds	r3, #1
  40c10a:	443c      	add	r4, r7
  40c10c:	2b07      	cmp	r3, #7
  40c10e:	9427      	str	r4, [sp, #156]	; 0x9c
  40c110:	9326      	str	r3, [sp, #152]	; 0x98
  40c112:	e888 00a0 	stmia.w	r8, {r5, r7}
  40c116:	f300 8232 	bgt.w	40c57e <_svfprintf_r+0xe26>
  40c11a:	f108 0808 	add.w	r8, r8, #8
  40c11e:	e4ac      	b.n	40ba7a <_svfprintf_r+0x322>
  40c120:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40c122:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40c124:	2b01      	cmp	r3, #1
  40c126:	f340 81fe 	ble.w	40c526 <_svfprintf_r+0xdce>
  40c12a:	3701      	adds	r7, #1
  40c12c:	3401      	adds	r4, #1
  40c12e:	2301      	movs	r3, #1
  40c130:	2f07      	cmp	r7, #7
  40c132:	9427      	str	r4, [sp, #156]	; 0x9c
  40c134:	9726      	str	r7, [sp, #152]	; 0x98
  40c136:	f8c8 6000 	str.w	r6, [r8]
  40c13a:	f8c8 3004 	str.w	r3, [r8, #4]
  40c13e:	f300 8203 	bgt.w	40c548 <_svfprintf_r+0xdf0>
  40c142:	f108 0808 	add.w	r8, r8, #8
  40c146:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40c148:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40c14a:	f8c8 3000 	str.w	r3, [r8]
  40c14e:	3701      	adds	r7, #1
  40c150:	4414      	add	r4, r2
  40c152:	2f07      	cmp	r7, #7
  40c154:	9427      	str	r4, [sp, #156]	; 0x9c
  40c156:	9726      	str	r7, [sp, #152]	; 0x98
  40c158:	f8c8 2004 	str.w	r2, [r8, #4]
  40c15c:	f300 8200 	bgt.w	40c560 <_svfprintf_r+0xe08>
  40c160:	f108 0808 	add.w	r8, r8, #8
  40c164:	a815      	add	r0, sp, #84	; 0x54
  40c166:	c80d      	ldmia	r0, {r0, r2, r3}
  40c168:	9914      	ldr	r1, [sp, #80]	; 0x50
  40c16a:	f7fe fe45 	bl	40adf8 <__aeabi_dcmpeq>
  40c16e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40c170:	2800      	cmp	r0, #0
  40c172:	f040 8101 	bne.w	40c378 <_svfprintf_r+0xc20>
  40c176:	3b01      	subs	r3, #1
  40c178:	3701      	adds	r7, #1
  40c17a:	3601      	adds	r6, #1
  40c17c:	441c      	add	r4, r3
  40c17e:	2f07      	cmp	r7, #7
  40c180:	9726      	str	r7, [sp, #152]	; 0x98
  40c182:	9427      	str	r4, [sp, #156]	; 0x9c
  40c184:	f8c8 6000 	str.w	r6, [r8]
  40c188:	f8c8 3004 	str.w	r3, [r8, #4]
  40c18c:	f300 8127 	bgt.w	40c3de <_svfprintf_r+0xc86>
  40c190:	f108 0808 	add.w	r8, r8, #8
  40c194:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40c196:	f8c8 2004 	str.w	r2, [r8, #4]
  40c19a:	3701      	adds	r7, #1
  40c19c:	4414      	add	r4, r2
  40c19e:	ab21      	add	r3, sp, #132	; 0x84
  40c1a0:	2f07      	cmp	r7, #7
  40c1a2:	9427      	str	r4, [sp, #156]	; 0x9c
  40c1a4:	9726      	str	r7, [sp, #152]	; 0x98
  40c1a6:	f8c8 3000 	str.w	r3, [r8]
  40c1aa:	f77f acb3 	ble.w	40bb14 <_svfprintf_r+0x3bc>
  40c1ae:	aa25      	add	r2, sp, #148	; 0x94
  40c1b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40c1b2:	980c      	ldr	r0, [sp, #48]	; 0x30
  40c1b4:	f002 fef2 	bl	40ef9c <__ssprint_r>
  40c1b8:	2800      	cmp	r0, #0
  40c1ba:	f47f ab9f 	bne.w	40b8fc <_svfprintf_r+0x1a4>
  40c1be:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40c1c0:	46c8      	mov	r8, r9
  40c1c2:	e4a9      	b.n	40bb18 <_svfprintf_r+0x3c0>
  40c1c4:	aa25      	add	r2, sp, #148	; 0x94
  40c1c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40c1c8:	980c      	ldr	r0, [sp, #48]	; 0x30
  40c1ca:	f002 fee7 	bl	40ef9c <__ssprint_r>
  40c1ce:	2800      	cmp	r0, #0
  40c1d0:	f43f aceb 	beq.w	40bbaa <_svfprintf_r+0x452>
  40c1d4:	f7ff bb92 	b.w	40b8fc <_svfprintf_r+0x1a4>
  40c1d8:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40c1dc:	2b01      	cmp	r3, #1
  40c1de:	f000 8134 	beq.w	40c44a <_svfprintf_r+0xcf2>
  40c1e2:	2b02      	cmp	r3, #2
  40c1e4:	d125      	bne.n	40c232 <_svfprintf_r+0xada>
  40c1e6:	f8cd b01c 	str.w	fp, [sp, #28]
  40c1ea:	2400      	movs	r4, #0
  40c1ec:	2500      	movs	r5, #0
  40c1ee:	e61e      	b.n	40be2e <_svfprintf_r+0x6d6>
  40c1f0:	aa25      	add	r2, sp, #148	; 0x94
  40c1f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40c1f4:	980c      	ldr	r0, [sp, #48]	; 0x30
  40c1f6:	f002 fed1 	bl	40ef9c <__ssprint_r>
  40c1fa:	2800      	cmp	r0, #0
  40c1fc:	f47f ab7e 	bne.w	40b8fc <_svfprintf_r+0x1a4>
  40c200:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40c202:	46c8      	mov	r8, r9
  40c204:	e475      	b.n	40baf2 <_svfprintf_r+0x39a>
  40c206:	aa25      	add	r2, sp, #148	; 0x94
  40c208:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40c20a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40c20c:	f002 fec6 	bl	40ef9c <__ssprint_r>
  40c210:	2800      	cmp	r0, #0
  40c212:	f47f ab73 	bne.w	40b8fc <_svfprintf_r+0x1a4>
  40c216:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40c218:	46c8      	mov	r8, r9
  40c21a:	e41b      	b.n	40ba54 <_svfprintf_r+0x2fc>
  40c21c:	aa25      	add	r2, sp, #148	; 0x94
  40c21e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40c220:	980c      	ldr	r0, [sp, #48]	; 0x30
  40c222:	f002 febb 	bl	40ef9c <__ssprint_r>
  40c226:	2800      	cmp	r0, #0
  40c228:	f47f ab68 	bne.w	40b8fc <_svfprintf_r+0x1a4>
  40c22c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40c22e:	46c8      	mov	r8, r9
  40c230:	e420      	b.n	40ba74 <_svfprintf_r+0x31c>
  40c232:	f8cd b01c 	str.w	fp, [sp, #28]
  40c236:	2400      	movs	r4, #0
  40c238:	2500      	movs	r5, #0
  40c23a:	4649      	mov	r1, r9
  40c23c:	e000      	b.n	40c240 <_svfprintf_r+0xae8>
  40c23e:	4631      	mov	r1, r6
  40c240:	08e2      	lsrs	r2, r4, #3
  40c242:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40c246:	08e8      	lsrs	r0, r5, #3
  40c248:	f004 0307 	and.w	r3, r4, #7
  40c24c:	4605      	mov	r5, r0
  40c24e:	4614      	mov	r4, r2
  40c250:	3330      	adds	r3, #48	; 0x30
  40c252:	ea54 0205 	orrs.w	r2, r4, r5
  40c256:	f801 3c01 	strb.w	r3, [r1, #-1]
  40c25a:	f101 36ff 	add.w	r6, r1, #4294967295
  40c25e:	d1ee      	bne.n	40c23e <_svfprintf_r+0xae6>
  40c260:	9a07      	ldr	r2, [sp, #28]
  40c262:	07d2      	lsls	r2, r2, #31
  40c264:	f57f adf3 	bpl.w	40be4e <_svfprintf_r+0x6f6>
  40c268:	2b30      	cmp	r3, #48	; 0x30
  40c26a:	f43f adf0 	beq.w	40be4e <_svfprintf_r+0x6f6>
  40c26e:	3902      	subs	r1, #2
  40c270:	2330      	movs	r3, #48	; 0x30
  40c272:	f806 3c01 	strb.w	r3, [r6, #-1]
  40c276:	eba9 0301 	sub.w	r3, r9, r1
  40c27a:	930e      	str	r3, [sp, #56]	; 0x38
  40c27c:	460e      	mov	r6, r1
  40c27e:	f7ff bb7b 	b.w	40b978 <_svfprintf_r+0x220>
  40c282:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40c284:	2900      	cmp	r1, #0
  40c286:	f340 822e 	ble.w	40c6e6 <_svfprintf_r+0xf8e>
  40c28a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40c28c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40c28e:	4293      	cmp	r3, r2
  40c290:	bfa8      	it	ge
  40c292:	4613      	movge	r3, r2
  40c294:	2b00      	cmp	r3, #0
  40c296:	461f      	mov	r7, r3
  40c298:	dd0d      	ble.n	40c2b6 <_svfprintf_r+0xb5e>
  40c29a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40c29c:	f8c8 6000 	str.w	r6, [r8]
  40c2a0:	3301      	adds	r3, #1
  40c2a2:	443c      	add	r4, r7
  40c2a4:	2b07      	cmp	r3, #7
  40c2a6:	9427      	str	r4, [sp, #156]	; 0x9c
  40c2a8:	f8c8 7004 	str.w	r7, [r8, #4]
  40c2ac:	9326      	str	r3, [sp, #152]	; 0x98
  40c2ae:	f300 831f 	bgt.w	40c8f0 <_svfprintf_r+0x1198>
  40c2b2:	f108 0808 	add.w	r8, r8, #8
  40c2b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40c2b8:	2f00      	cmp	r7, #0
  40c2ba:	bfa8      	it	ge
  40c2bc:	1bdb      	subge	r3, r3, r7
  40c2be:	2b00      	cmp	r3, #0
  40c2c0:	461f      	mov	r7, r3
  40c2c2:	f340 80d6 	ble.w	40c472 <_svfprintf_r+0xd1a>
  40c2c6:	2f10      	cmp	r7, #16
  40c2c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40c2ca:	4d31      	ldr	r5, [pc, #196]	; (40c390 <_svfprintf_r+0xc38>)
  40c2cc:	f340 81ed 	ble.w	40c6aa <_svfprintf_r+0xf52>
  40c2d0:	4642      	mov	r2, r8
  40c2d2:	4621      	mov	r1, r4
  40c2d4:	46b0      	mov	r8, r6
  40c2d6:	f04f 0b10 	mov.w	fp, #16
  40c2da:	462e      	mov	r6, r5
  40c2dc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40c2de:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40c2e0:	e004      	b.n	40c2ec <_svfprintf_r+0xb94>
  40c2e2:	3208      	adds	r2, #8
  40c2e4:	3f10      	subs	r7, #16
  40c2e6:	2f10      	cmp	r7, #16
  40c2e8:	f340 81db 	ble.w	40c6a2 <_svfprintf_r+0xf4a>
  40c2ec:	3301      	adds	r3, #1
  40c2ee:	3110      	adds	r1, #16
  40c2f0:	2b07      	cmp	r3, #7
  40c2f2:	9127      	str	r1, [sp, #156]	; 0x9c
  40c2f4:	9326      	str	r3, [sp, #152]	; 0x98
  40c2f6:	e882 0840 	stmia.w	r2, {r6, fp}
  40c2fa:	ddf2      	ble.n	40c2e2 <_svfprintf_r+0xb8a>
  40c2fc:	aa25      	add	r2, sp, #148	; 0x94
  40c2fe:	4629      	mov	r1, r5
  40c300:	4620      	mov	r0, r4
  40c302:	f002 fe4b 	bl	40ef9c <__ssprint_r>
  40c306:	2800      	cmp	r0, #0
  40c308:	f47f aaf8 	bne.w	40b8fc <_svfprintf_r+0x1a4>
  40c30c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40c30e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40c310:	464a      	mov	r2, r9
  40c312:	e7e7      	b.n	40c2e4 <_svfprintf_r+0xb8c>
  40c314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c316:	930e      	str	r3, [sp, #56]	; 0x38
  40c318:	464e      	mov	r6, r9
  40c31a:	f7ff bb2d 	b.w	40b978 <_svfprintf_r+0x220>
  40c31e:	2d00      	cmp	r5, #0
  40c320:	bf08      	it	eq
  40c322:	2c0a      	cmpeq	r4, #10
  40c324:	f0c0 808f 	bcc.w	40c446 <_svfprintf_r+0xcee>
  40c328:	464e      	mov	r6, r9
  40c32a:	4620      	mov	r0, r4
  40c32c:	4629      	mov	r1, r5
  40c32e:	220a      	movs	r2, #10
  40c330:	2300      	movs	r3, #0
  40c332:	f002 ff51 	bl	40f1d8 <__aeabi_uldivmod>
  40c336:	3230      	adds	r2, #48	; 0x30
  40c338:	f806 2d01 	strb.w	r2, [r6, #-1]!
  40c33c:	4620      	mov	r0, r4
  40c33e:	4629      	mov	r1, r5
  40c340:	2300      	movs	r3, #0
  40c342:	220a      	movs	r2, #10
  40c344:	f002 ff48 	bl	40f1d8 <__aeabi_uldivmod>
  40c348:	4604      	mov	r4, r0
  40c34a:	460d      	mov	r5, r1
  40c34c:	ea54 0305 	orrs.w	r3, r4, r5
  40c350:	d1eb      	bne.n	40c32a <_svfprintf_r+0xbd2>
  40c352:	eba9 0306 	sub.w	r3, r9, r6
  40c356:	930e      	str	r3, [sp, #56]	; 0x38
  40c358:	f7ff bb0e 	b.w	40b978 <_svfprintf_r+0x220>
  40c35c:	aa25      	add	r2, sp, #148	; 0x94
  40c35e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40c360:	980c      	ldr	r0, [sp, #48]	; 0x30
  40c362:	f002 fe1b 	bl	40ef9c <__ssprint_r>
  40c366:	2800      	cmp	r0, #0
  40c368:	f47f aac8 	bne.w	40b8fc <_svfprintf_r+0x1a4>
  40c36c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40c370:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40c372:	46c8      	mov	r8, r9
  40c374:	f7ff bb5e 	b.w	40ba34 <_svfprintf_r+0x2dc>
  40c378:	1e5e      	subs	r6, r3, #1
  40c37a:	2e00      	cmp	r6, #0
  40c37c:	f77f af0a 	ble.w	40c194 <_svfprintf_r+0xa3c>
  40c380:	2e10      	cmp	r6, #16
  40c382:	4d03      	ldr	r5, [pc, #12]	; (40c390 <_svfprintf_r+0xc38>)
  40c384:	dd22      	ble.n	40c3cc <_svfprintf_r+0xc74>
  40c386:	4622      	mov	r2, r4
  40c388:	f04f 0b10 	mov.w	fp, #16
  40c38c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40c38e:	e006      	b.n	40c39e <_svfprintf_r+0xc46>
  40c390:	00411410 	.word	0x00411410
  40c394:	3e10      	subs	r6, #16
  40c396:	2e10      	cmp	r6, #16
  40c398:	f108 0808 	add.w	r8, r8, #8
  40c39c:	dd15      	ble.n	40c3ca <_svfprintf_r+0xc72>
  40c39e:	3701      	adds	r7, #1
  40c3a0:	3210      	adds	r2, #16
  40c3a2:	2f07      	cmp	r7, #7
  40c3a4:	9227      	str	r2, [sp, #156]	; 0x9c
  40c3a6:	9726      	str	r7, [sp, #152]	; 0x98
  40c3a8:	e888 0820 	stmia.w	r8, {r5, fp}
  40c3ac:	ddf2      	ble.n	40c394 <_svfprintf_r+0xc3c>
  40c3ae:	aa25      	add	r2, sp, #148	; 0x94
  40c3b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40c3b2:	4620      	mov	r0, r4
  40c3b4:	f002 fdf2 	bl	40ef9c <__ssprint_r>
  40c3b8:	2800      	cmp	r0, #0
  40c3ba:	f47f aa9f 	bne.w	40b8fc <_svfprintf_r+0x1a4>
  40c3be:	3e10      	subs	r6, #16
  40c3c0:	2e10      	cmp	r6, #16
  40c3c2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40c3c4:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40c3c6:	46c8      	mov	r8, r9
  40c3c8:	dce9      	bgt.n	40c39e <_svfprintf_r+0xc46>
  40c3ca:	4614      	mov	r4, r2
  40c3cc:	3701      	adds	r7, #1
  40c3ce:	4434      	add	r4, r6
  40c3d0:	2f07      	cmp	r7, #7
  40c3d2:	9427      	str	r4, [sp, #156]	; 0x9c
  40c3d4:	9726      	str	r7, [sp, #152]	; 0x98
  40c3d6:	e888 0060 	stmia.w	r8, {r5, r6}
  40c3da:	f77f aed9 	ble.w	40c190 <_svfprintf_r+0xa38>
  40c3de:	aa25      	add	r2, sp, #148	; 0x94
  40c3e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40c3e2:	980c      	ldr	r0, [sp, #48]	; 0x30
  40c3e4:	f002 fdda 	bl	40ef9c <__ssprint_r>
  40c3e8:	2800      	cmp	r0, #0
  40c3ea:	f47f aa87 	bne.w	40b8fc <_svfprintf_r+0x1a4>
  40c3ee:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40c3f0:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40c3f2:	46c8      	mov	r8, r9
  40c3f4:	e6ce      	b.n	40c194 <_svfprintf_r+0xa3c>
  40c3f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40c3f8:	6814      	ldr	r4, [r2, #0]
  40c3fa:	4613      	mov	r3, r2
  40c3fc:	3304      	adds	r3, #4
  40c3fe:	17e5      	asrs	r5, r4, #31
  40c400:	930f      	str	r3, [sp, #60]	; 0x3c
  40c402:	4622      	mov	r2, r4
  40c404:	462b      	mov	r3, r5
  40c406:	e4fa      	b.n	40bdfe <_svfprintf_r+0x6a6>
  40c408:	3204      	adds	r2, #4
  40c40a:	681c      	ldr	r4, [r3, #0]
  40c40c:	920f      	str	r2, [sp, #60]	; 0x3c
  40c40e:	2301      	movs	r3, #1
  40c410:	2500      	movs	r5, #0
  40c412:	f7ff ba94 	b.w	40b93e <_svfprintf_r+0x1e6>
  40c416:	681c      	ldr	r4, [r3, #0]
  40c418:	3304      	adds	r3, #4
  40c41a:	930f      	str	r3, [sp, #60]	; 0x3c
  40c41c:	2500      	movs	r5, #0
  40c41e:	e421      	b.n	40bc64 <_svfprintf_r+0x50c>
  40c420:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40c422:	460a      	mov	r2, r1
  40c424:	3204      	adds	r2, #4
  40c426:	680c      	ldr	r4, [r1, #0]
  40c428:	920f      	str	r2, [sp, #60]	; 0x3c
  40c42a:	2500      	movs	r5, #0
  40c42c:	f7ff ba87 	b.w	40b93e <_svfprintf_r+0x1e6>
  40c430:	4614      	mov	r4, r2
  40c432:	3301      	adds	r3, #1
  40c434:	4434      	add	r4, r6
  40c436:	2b07      	cmp	r3, #7
  40c438:	9427      	str	r4, [sp, #156]	; 0x9c
  40c43a:	9326      	str	r3, [sp, #152]	; 0x98
  40c43c:	e888 0060 	stmia.w	r8, {r5, r6}
  40c440:	f77f ab68 	ble.w	40bb14 <_svfprintf_r+0x3bc>
  40c444:	e6b3      	b.n	40c1ae <_svfprintf_r+0xa56>
  40c446:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40c44a:	f8cd b01c 	str.w	fp, [sp, #28]
  40c44e:	ae42      	add	r6, sp, #264	; 0x108
  40c450:	3430      	adds	r4, #48	; 0x30
  40c452:	2301      	movs	r3, #1
  40c454:	f806 4d41 	strb.w	r4, [r6, #-65]!
  40c458:	930e      	str	r3, [sp, #56]	; 0x38
  40c45a:	f7ff ba8d 	b.w	40b978 <_svfprintf_r+0x220>
  40c45e:	aa25      	add	r2, sp, #148	; 0x94
  40c460:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40c462:	980c      	ldr	r0, [sp, #48]	; 0x30
  40c464:	f002 fd9a 	bl	40ef9c <__ssprint_r>
  40c468:	2800      	cmp	r0, #0
  40c46a:	f47f aa47 	bne.w	40b8fc <_svfprintf_r+0x1a4>
  40c46e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40c470:	46c8      	mov	r8, r9
  40c472:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40c474:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40c476:	429a      	cmp	r2, r3
  40c478:	db44      	blt.n	40c504 <_svfprintf_r+0xdac>
  40c47a:	9b07      	ldr	r3, [sp, #28]
  40c47c:	07d9      	lsls	r1, r3, #31
  40c47e:	d441      	bmi.n	40c504 <_svfprintf_r+0xdac>
  40c480:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40c482:	9812      	ldr	r0, [sp, #72]	; 0x48
  40c484:	1a9a      	subs	r2, r3, r2
  40c486:	1a1d      	subs	r5, r3, r0
  40c488:	4295      	cmp	r5, r2
  40c48a:	bfa8      	it	ge
  40c48c:	4615      	movge	r5, r2
  40c48e:	2d00      	cmp	r5, #0
  40c490:	dd0e      	ble.n	40c4b0 <_svfprintf_r+0xd58>
  40c492:	9926      	ldr	r1, [sp, #152]	; 0x98
  40c494:	f8c8 5004 	str.w	r5, [r8, #4]
  40c498:	3101      	adds	r1, #1
  40c49a:	4406      	add	r6, r0
  40c49c:	442c      	add	r4, r5
  40c49e:	2907      	cmp	r1, #7
  40c4a0:	f8c8 6000 	str.w	r6, [r8]
  40c4a4:	9427      	str	r4, [sp, #156]	; 0x9c
  40c4a6:	9126      	str	r1, [sp, #152]	; 0x98
  40c4a8:	f300 823b 	bgt.w	40c922 <_svfprintf_r+0x11ca>
  40c4ac:	f108 0808 	add.w	r8, r8, #8
  40c4b0:	2d00      	cmp	r5, #0
  40c4b2:	bfac      	ite	ge
  40c4b4:	1b56      	subge	r6, r2, r5
  40c4b6:	4616      	movlt	r6, r2
  40c4b8:	2e00      	cmp	r6, #0
  40c4ba:	f77f ab2d 	ble.w	40bb18 <_svfprintf_r+0x3c0>
  40c4be:	2e10      	cmp	r6, #16
  40c4c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40c4c2:	4db0      	ldr	r5, [pc, #704]	; (40c784 <_svfprintf_r+0x102c>)
  40c4c4:	ddb5      	ble.n	40c432 <_svfprintf_r+0xcda>
  40c4c6:	4622      	mov	r2, r4
  40c4c8:	2710      	movs	r7, #16
  40c4ca:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40c4ce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40c4d0:	e004      	b.n	40c4dc <_svfprintf_r+0xd84>
  40c4d2:	f108 0808 	add.w	r8, r8, #8
  40c4d6:	3e10      	subs	r6, #16
  40c4d8:	2e10      	cmp	r6, #16
  40c4da:	dda9      	ble.n	40c430 <_svfprintf_r+0xcd8>
  40c4dc:	3301      	adds	r3, #1
  40c4de:	3210      	adds	r2, #16
  40c4e0:	2b07      	cmp	r3, #7
  40c4e2:	9227      	str	r2, [sp, #156]	; 0x9c
  40c4e4:	9326      	str	r3, [sp, #152]	; 0x98
  40c4e6:	e888 00a0 	stmia.w	r8, {r5, r7}
  40c4ea:	ddf2      	ble.n	40c4d2 <_svfprintf_r+0xd7a>
  40c4ec:	aa25      	add	r2, sp, #148	; 0x94
  40c4ee:	4621      	mov	r1, r4
  40c4f0:	4658      	mov	r0, fp
  40c4f2:	f002 fd53 	bl	40ef9c <__ssprint_r>
  40c4f6:	2800      	cmp	r0, #0
  40c4f8:	f47f aa00 	bne.w	40b8fc <_svfprintf_r+0x1a4>
  40c4fc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40c4fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40c500:	46c8      	mov	r8, r9
  40c502:	e7e8      	b.n	40c4d6 <_svfprintf_r+0xd7e>
  40c504:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40c506:	9819      	ldr	r0, [sp, #100]	; 0x64
  40c508:	991a      	ldr	r1, [sp, #104]	; 0x68
  40c50a:	f8c8 1000 	str.w	r1, [r8]
  40c50e:	3301      	adds	r3, #1
  40c510:	4404      	add	r4, r0
  40c512:	2b07      	cmp	r3, #7
  40c514:	9427      	str	r4, [sp, #156]	; 0x9c
  40c516:	f8c8 0004 	str.w	r0, [r8, #4]
  40c51a:	9326      	str	r3, [sp, #152]	; 0x98
  40c51c:	f300 81f5 	bgt.w	40c90a <_svfprintf_r+0x11b2>
  40c520:	f108 0808 	add.w	r8, r8, #8
  40c524:	e7ac      	b.n	40c480 <_svfprintf_r+0xd28>
  40c526:	9b07      	ldr	r3, [sp, #28]
  40c528:	07da      	lsls	r2, r3, #31
  40c52a:	f53f adfe 	bmi.w	40c12a <_svfprintf_r+0x9d2>
  40c52e:	3701      	adds	r7, #1
  40c530:	3401      	adds	r4, #1
  40c532:	2301      	movs	r3, #1
  40c534:	2f07      	cmp	r7, #7
  40c536:	9427      	str	r4, [sp, #156]	; 0x9c
  40c538:	9726      	str	r7, [sp, #152]	; 0x98
  40c53a:	f8c8 6000 	str.w	r6, [r8]
  40c53e:	f8c8 3004 	str.w	r3, [r8, #4]
  40c542:	f77f ae25 	ble.w	40c190 <_svfprintf_r+0xa38>
  40c546:	e74a      	b.n	40c3de <_svfprintf_r+0xc86>
  40c548:	aa25      	add	r2, sp, #148	; 0x94
  40c54a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40c54c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40c54e:	f002 fd25 	bl	40ef9c <__ssprint_r>
  40c552:	2800      	cmp	r0, #0
  40c554:	f47f a9d2 	bne.w	40b8fc <_svfprintf_r+0x1a4>
  40c558:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40c55a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40c55c:	46c8      	mov	r8, r9
  40c55e:	e5f2      	b.n	40c146 <_svfprintf_r+0x9ee>
  40c560:	aa25      	add	r2, sp, #148	; 0x94
  40c562:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40c564:	980c      	ldr	r0, [sp, #48]	; 0x30
  40c566:	f002 fd19 	bl	40ef9c <__ssprint_r>
  40c56a:	2800      	cmp	r0, #0
  40c56c:	f47f a9c6 	bne.w	40b8fc <_svfprintf_r+0x1a4>
  40c570:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40c572:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40c574:	46c8      	mov	r8, r9
  40c576:	e5f5      	b.n	40c164 <_svfprintf_r+0xa0c>
  40c578:	464e      	mov	r6, r9
  40c57a:	f7ff b9fd 	b.w	40b978 <_svfprintf_r+0x220>
  40c57e:	aa25      	add	r2, sp, #148	; 0x94
  40c580:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40c582:	980c      	ldr	r0, [sp, #48]	; 0x30
  40c584:	f002 fd0a 	bl	40ef9c <__ssprint_r>
  40c588:	2800      	cmp	r0, #0
  40c58a:	f47f a9b7 	bne.w	40b8fc <_svfprintf_r+0x1a4>
  40c58e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40c590:	46c8      	mov	r8, r9
  40c592:	f7ff ba72 	b.w	40ba7a <_svfprintf_r+0x322>
  40c596:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40c598:	4622      	mov	r2, r4
  40c59a:	4620      	mov	r0, r4
  40c59c:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40c59e:	4623      	mov	r3, r4
  40c5a0:	4621      	mov	r1, r4
  40c5a2:	f7fe fc5b 	bl	40ae5c <__aeabi_dcmpun>
  40c5a6:	2800      	cmp	r0, #0
  40c5a8:	f040 8286 	bne.w	40cab8 <_svfprintf_r+0x1360>
  40c5ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c5ae:	3301      	adds	r3, #1
  40c5b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40c5b2:	f023 0320 	bic.w	r3, r3, #32
  40c5b6:	930e      	str	r3, [sp, #56]	; 0x38
  40c5b8:	f000 81e2 	beq.w	40c980 <_svfprintf_r+0x1228>
  40c5bc:	2b47      	cmp	r3, #71	; 0x47
  40c5be:	f000 811e 	beq.w	40c7fe <_svfprintf_r+0x10a6>
  40c5c2:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40c5c6:	9307      	str	r3, [sp, #28]
  40c5c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40c5ca:	1e1f      	subs	r7, r3, #0
  40c5cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40c5ce:	9308      	str	r3, [sp, #32]
  40c5d0:	bfbb      	ittet	lt
  40c5d2:	463b      	movlt	r3, r7
  40c5d4:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  40c5d8:	2300      	movge	r3, #0
  40c5da:	232d      	movlt	r3, #45	; 0x2d
  40c5dc:	9310      	str	r3, [sp, #64]	; 0x40
  40c5de:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40c5e0:	2b66      	cmp	r3, #102	; 0x66
  40c5e2:	f000 81bb 	beq.w	40c95c <_svfprintf_r+0x1204>
  40c5e6:	2b46      	cmp	r3, #70	; 0x46
  40c5e8:	f000 80df 	beq.w	40c7aa <_svfprintf_r+0x1052>
  40c5ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40c5ee:	9a08      	ldr	r2, [sp, #32]
  40c5f0:	2b45      	cmp	r3, #69	; 0x45
  40c5f2:	bf0c      	ite	eq
  40c5f4:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  40c5f6:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  40c5f8:	a823      	add	r0, sp, #140	; 0x8c
  40c5fa:	a920      	add	r1, sp, #128	; 0x80
  40c5fc:	bf08      	it	eq
  40c5fe:	1c5d      	addeq	r5, r3, #1
  40c600:	9004      	str	r0, [sp, #16]
  40c602:	9103      	str	r1, [sp, #12]
  40c604:	a81f      	add	r0, sp, #124	; 0x7c
  40c606:	2102      	movs	r1, #2
  40c608:	463b      	mov	r3, r7
  40c60a:	9002      	str	r0, [sp, #8]
  40c60c:	9501      	str	r5, [sp, #4]
  40c60e:	9100      	str	r1, [sp, #0]
  40c610:	980c      	ldr	r0, [sp, #48]	; 0x30
  40c612:	f000 fb75 	bl	40cd00 <_dtoa_r>
  40c616:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40c618:	2b67      	cmp	r3, #103	; 0x67
  40c61a:	4606      	mov	r6, r0
  40c61c:	f040 81e0 	bne.w	40c9e0 <_svfprintf_r+0x1288>
  40c620:	f01b 0f01 	tst.w	fp, #1
  40c624:	f000 8246 	beq.w	40cab4 <_svfprintf_r+0x135c>
  40c628:	1974      	adds	r4, r6, r5
  40c62a:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40c62c:	9808      	ldr	r0, [sp, #32]
  40c62e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40c630:	4639      	mov	r1, r7
  40c632:	f7fe fbe1 	bl	40adf8 <__aeabi_dcmpeq>
  40c636:	2800      	cmp	r0, #0
  40c638:	f040 8165 	bne.w	40c906 <_svfprintf_r+0x11ae>
  40c63c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40c63e:	42a3      	cmp	r3, r4
  40c640:	d206      	bcs.n	40c650 <_svfprintf_r+0xef8>
  40c642:	2130      	movs	r1, #48	; 0x30
  40c644:	1c5a      	adds	r2, r3, #1
  40c646:	9223      	str	r2, [sp, #140]	; 0x8c
  40c648:	7019      	strb	r1, [r3, #0]
  40c64a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40c64c:	429c      	cmp	r4, r3
  40c64e:	d8f9      	bhi.n	40c644 <_svfprintf_r+0xeec>
  40c650:	1b9b      	subs	r3, r3, r6
  40c652:	9313      	str	r3, [sp, #76]	; 0x4c
  40c654:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40c656:	2b47      	cmp	r3, #71	; 0x47
  40c658:	f000 80e9 	beq.w	40c82e <_svfprintf_r+0x10d6>
  40c65c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40c65e:	2b65      	cmp	r3, #101	; 0x65
  40c660:	f340 81cd 	ble.w	40c9fe <_svfprintf_r+0x12a6>
  40c664:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40c666:	2b66      	cmp	r3, #102	; 0x66
  40c668:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40c66a:	9312      	str	r3, [sp, #72]	; 0x48
  40c66c:	f000 819e 	beq.w	40c9ac <_svfprintf_r+0x1254>
  40c670:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40c672:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40c674:	4619      	mov	r1, r3
  40c676:	4291      	cmp	r1, r2
  40c678:	f300 818a 	bgt.w	40c990 <_svfprintf_r+0x1238>
  40c67c:	f01b 0f01 	tst.w	fp, #1
  40c680:	f040 8213 	bne.w	40caaa <_svfprintf_r+0x1352>
  40c684:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40c688:	9308      	str	r3, [sp, #32]
  40c68a:	2367      	movs	r3, #103	; 0x67
  40c68c:	920e      	str	r2, [sp, #56]	; 0x38
  40c68e:	9311      	str	r3, [sp, #68]	; 0x44
  40c690:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40c692:	2b00      	cmp	r3, #0
  40c694:	f040 80c4 	bne.w	40c820 <_svfprintf_r+0x10c8>
  40c698:	930a      	str	r3, [sp, #40]	; 0x28
  40c69a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40c69e:	f7ff b973 	b.w	40b988 <_svfprintf_r+0x230>
  40c6a2:	4635      	mov	r5, r6
  40c6a4:	460c      	mov	r4, r1
  40c6a6:	4646      	mov	r6, r8
  40c6a8:	4690      	mov	r8, r2
  40c6aa:	3301      	adds	r3, #1
  40c6ac:	443c      	add	r4, r7
  40c6ae:	2b07      	cmp	r3, #7
  40c6b0:	9427      	str	r4, [sp, #156]	; 0x9c
  40c6b2:	9326      	str	r3, [sp, #152]	; 0x98
  40c6b4:	e888 00a0 	stmia.w	r8, {r5, r7}
  40c6b8:	f73f aed1 	bgt.w	40c45e <_svfprintf_r+0xd06>
  40c6bc:	f108 0808 	add.w	r8, r8, #8
  40c6c0:	e6d7      	b.n	40c472 <_svfprintf_r+0xd1a>
  40c6c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40c6c4:	6813      	ldr	r3, [r2, #0]
  40c6c6:	3204      	adds	r2, #4
  40c6c8:	920f      	str	r2, [sp, #60]	; 0x3c
  40c6ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40c6cc:	601a      	str	r2, [r3, #0]
  40c6ce:	f7ff b86a 	b.w	40b7a6 <_svfprintf_r+0x4e>
  40c6d2:	aa25      	add	r2, sp, #148	; 0x94
  40c6d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40c6d6:	980c      	ldr	r0, [sp, #48]	; 0x30
  40c6d8:	f002 fc60 	bl	40ef9c <__ssprint_r>
  40c6dc:	2800      	cmp	r0, #0
  40c6de:	f47f a90d 	bne.w	40b8fc <_svfprintf_r+0x1a4>
  40c6e2:	46c8      	mov	r8, r9
  40c6e4:	e48d      	b.n	40c002 <_svfprintf_r+0x8aa>
  40c6e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40c6e8:	4a27      	ldr	r2, [pc, #156]	; (40c788 <_svfprintf_r+0x1030>)
  40c6ea:	f8c8 2000 	str.w	r2, [r8]
  40c6ee:	3301      	adds	r3, #1
  40c6f0:	3401      	adds	r4, #1
  40c6f2:	2201      	movs	r2, #1
  40c6f4:	2b07      	cmp	r3, #7
  40c6f6:	9427      	str	r4, [sp, #156]	; 0x9c
  40c6f8:	9326      	str	r3, [sp, #152]	; 0x98
  40c6fa:	f8c8 2004 	str.w	r2, [r8, #4]
  40c6fe:	dc72      	bgt.n	40c7e6 <_svfprintf_r+0x108e>
  40c700:	f108 0808 	add.w	r8, r8, #8
  40c704:	b929      	cbnz	r1, 40c712 <_svfprintf_r+0xfba>
  40c706:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40c708:	b91b      	cbnz	r3, 40c712 <_svfprintf_r+0xfba>
  40c70a:	9b07      	ldr	r3, [sp, #28]
  40c70c:	07d8      	lsls	r0, r3, #31
  40c70e:	f57f aa03 	bpl.w	40bb18 <_svfprintf_r+0x3c0>
  40c712:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40c714:	9819      	ldr	r0, [sp, #100]	; 0x64
  40c716:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40c718:	f8c8 2000 	str.w	r2, [r8]
  40c71c:	3301      	adds	r3, #1
  40c71e:	4602      	mov	r2, r0
  40c720:	4422      	add	r2, r4
  40c722:	2b07      	cmp	r3, #7
  40c724:	9227      	str	r2, [sp, #156]	; 0x9c
  40c726:	f8c8 0004 	str.w	r0, [r8, #4]
  40c72a:	9326      	str	r3, [sp, #152]	; 0x98
  40c72c:	f300 818d 	bgt.w	40ca4a <_svfprintf_r+0x12f2>
  40c730:	f108 0808 	add.w	r8, r8, #8
  40c734:	2900      	cmp	r1, #0
  40c736:	f2c0 8165 	blt.w	40ca04 <_svfprintf_r+0x12ac>
  40c73a:	9913      	ldr	r1, [sp, #76]	; 0x4c
  40c73c:	f8c8 6000 	str.w	r6, [r8]
  40c740:	3301      	adds	r3, #1
  40c742:	188c      	adds	r4, r1, r2
  40c744:	2b07      	cmp	r3, #7
  40c746:	9427      	str	r4, [sp, #156]	; 0x9c
  40c748:	9326      	str	r3, [sp, #152]	; 0x98
  40c74a:	f8c8 1004 	str.w	r1, [r8, #4]
  40c74e:	f77f a9e1 	ble.w	40bb14 <_svfprintf_r+0x3bc>
  40c752:	e52c      	b.n	40c1ae <_svfprintf_r+0xa56>
  40c754:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40c756:	9909      	ldr	r1, [sp, #36]	; 0x24
  40c758:	6813      	ldr	r3, [r2, #0]
  40c75a:	17cd      	asrs	r5, r1, #31
  40c75c:	4608      	mov	r0, r1
  40c75e:	3204      	adds	r2, #4
  40c760:	4629      	mov	r1, r5
  40c762:	920f      	str	r2, [sp, #60]	; 0x3c
  40c764:	e9c3 0100 	strd	r0, r1, [r3]
  40c768:	f7ff b81d 	b.w	40b7a6 <_svfprintf_r+0x4e>
  40c76c:	aa25      	add	r2, sp, #148	; 0x94
  40c76e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40c770:	980c      	ldr	r0, [sp, #48]	; 0x30
  40c772:	f002 fc13 	bl	40ef9c <__ssprint_r>
  40c776:	2800      	cmp	r0, #0
  40c778:	f47f a8c0 	bne.w	40b8fc <_svfprintf_r+0x1a4>
  40c77c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40c77e:	46c8      	mov	r8, r9
  40c780:	e458      	b.n	40c034 <_svfprintf_r+0x8dc>
  40c782:	bf00      	nop
  40c784:	00411410 	.word	0x00411410
  40c788:	004113fc 	.word	0x004113fc
  40c78c:	2140      	movs	r1, #64	; 0x40
  40c78e:	980c      	ldr	r0, [sp, #48]	; 0x30
  40c790:	f001 fb42 	bl	40de18 <_malloc_r>
  40c794:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40c796:	6010      	str	r0, [r2, #0]
  40c798:	6110      	str	r0, [r2, #16]
  40c79a:	2800      	cmp	r0, #0
  40c79c:	f000 81f2 	beq.w	40cb84 <_svfprintf_r+0x142c>
  40c7a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40c7a2:	2340      	movs	r3, #64	; 0x40
  40c7a4:	6153      	str	r3, [r2, #20]
  40c7a6:	f7fe bfee 	b.w	40b786 <_svfprintf_r+0x2e>
  40c7aa:	a823      	add	r0, sp, #140	; 0x8c
  40c7ac:	a920      	add	r1, sp, #128	; 0x80
  40c7ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40c7b0:	9004      	str	r0, [sp, #16]
  40c7b2:	9103      	str	r1, [sp, #12]
  40c7b4:	a81f      	add	r0, sp, #124	; 0x7c
  40c7b6:	2103      	movs	r1, #3
  40c7b8:	9002      	str	r0, [sp, #8]
  40c7ba:	9a08      	ldr	r2, [sp, #32]
  40c7bc:	9401      	str	r4, [sp, #4]
  40c7be:	463b      	mov	r3, r7
  40c7c0:	9100      	str	r1, [sp, #0]
  40c7c2:	980c      	ldr	r0, [sp, #48]	; 0x30
  40c7c4:	f000 fa9c 	bl	40cd00 <_dtoa_r>
  40c7c8:	4625      	mov	r5, r4
  40c7ca:	4606      	mov	r6, r0
  40c7cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40c7ce:	2b46      	cmp	r3, #70	; 0x46
  40c7d0:	eb06 0405 	add.w	r4, r6, r5
  40c7d4:	f47f af29 	bne.w	40c62a <_svfprintf_r+0xed2>
  40c7d8:	7833      	ldrb	r3, [r6, #0]
  40c7da:	2b30      	cmp	r3, #48	; 0x30
  40c7dc:	f000 8178 	beq.w	40cad0 <_svfprintf_r+0x1378>
  40c7e0:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  40c7e2:	442c      	add	r4, r5
  40c7e4:	e721      	b.n	40c62a <_svfprintf_r+0xed2>
  40c7e6:	aa25      	add	r2, sp, #148	; 0x94
  40c7e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40c7ea:	980c      	ldr	r0, [sp, #48]	; 0x30
  40c7ec:	f002 fbd6 	bl	40ef9c <__ssprint_r>
  40c7f0:	2800      	cmp	r0, #0
  40c7f2:	f47f a883 	bne.w	40b8fc <_svfprintf_r+0x1a4>
  40c7f6:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40c7f8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40c7fa:	46c8      	mov	r8, r9
  40c7fc:	e782      	b.n	40c704 <_svfprintf_r+0xfac>
  40c7fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c800:	2b00      	cmp	r3, #0
  40c802:	bf08      	it	eq
  40c804:	2301      	moveq	r3, #1
  40c806:	930a      	str	r3, [sp, #40]	; 0x28
  40c808:	e6db      	b.n	40c5c2 <_svfprintf_r+0xe6a>
  40c80a:	4630      	mov	r0, r6
  40c80c:	940a      	str	r4, [sp, #40]	; 0x28
  40c80e:	f002 fb57 	bl	40eec0 <strlen>
  40c812:	950f      	str	r5, [sp, #60]	; 0x3c
  40c814:	900e      	str	r0, [sp, #56]	; 0x38
  40c816:	f8cd b01c 	str.w	fp, [sp, #28]
  40c81a:	4603      	mov	r3, r0
  40c81c:	f7ff b9f9 	b.w	40bc12 <_svfprintf_r+0x4ba>
  40c820:	272d      	movs	r7, #45	; 0x2d
  40c822:	2300      	movs	r3, #0
  40c824:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40c828:	930a      	str	r3, [sp, #40]	; 0x28
  40c82a:	f7ff b8ae 	b.w	40b98a <_svfprintf_r+0x232>
  40c82e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40c830:	9312      	str	r3, [sp, #72]	; 0x48
  40c832:	461a      	mov	r2, r3
  40c834:	3303      	adds	r3, #3
  40c836:	db04      	blt.n	40c842 <_svfprintf_r+0x10ea>
  40c838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c83a:	4619      	mov	r1, r3
  40c83c:	4291      	cmp	r1, r2
  40c83e:	f6bf af17 	bge.w	40c670 <_svfprintf_r+0xf18>
  40c842:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40c844:	3b02      	subs	r3, #2
  40c846:	9311      	str	r3, [sp, #68]	; 0x44
  40c848:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  40c84c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  40c850:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40c852:	3b01      	subs	r3, #1
  40c854:	2b00      	cmp	r3, #0
  40c856:	931f      	str	r3, [sp, #124]	; 0x7c
  40c858:	bfbd      	ittte	lt
  40c85a:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  40c85c:	f1c3 0301 	rsblt	r3, r3, #1
  40c860:	222d      	movlt	r2, #45	; 0x2d
  40c862:	222b      	movge	r2, #43	; 0x2b
  40c864:	2b09      	cmp	r3, #9
  40c866:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  40c86a:	f340 8116 	ble.w	40ca9a <_svfprintf_r+0x1342>
  40c86e:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  40c872:	4620      	mov	r0, r4
  40c874:	4dab      	ldr	r5, [pc, #684]	; (40cb24 <_svfprintf_r+0x13cc>)
  40c876:	e000      	b.n	40c87a <_svfprintf_r+0x1122>
  40c878:	4610      	mov	r0, r2
  40c87a:	fb85 1203 	smull	r1, r2, r5, r3
  40c87e:	17d9      	asrs	r1, r3, #31
  40c880:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  40c884:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40c888:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  40c88c:	3230      	adds	r2, #48	; 0x30
  40c88e:	2909      	cmp	r1, #9
  40c890:	f800 2c01 	strb.w	r2, [r0, #-1]
  40c894:	460b      	mov	r3, r1
  40c896:	f100 32ff 	add.w	r2, r0, #4294967295
  40c89a:	dced      	bgt.n	40c878 <_svfprintf_r+0x1120>
  40c89c:	3330      	adds	r3, #48	; 0x30
  40c89e:	3802      	subs	r0, #2
  40c8a0:	b2d9      	uxtb	r1, r3
  40c8a2:	4284      	cmp	r4, r0
  40c8a4:	f802 1c01 	strb.w	r1, [r2, #-1]
  40c8a8:	f240 8165 	bls.w	40cb76 <_svfprintf_r+0x141e>
  40c8ac:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  40c8b0:	4613      	mov	r3, r2
  40c8b2:	e001      	b.n	40c8b8 <_svfprintf_r+0x1160>
  40c8b4:	f813 1b01 	ldrb.w	r1, [r3], #1
  40c8b8:	f800 1b01 	strb.w	r1, [r0], #1
  40c8bc:	42a3      	cmp	r3, r4
  40c8be:	d1f9      	bne.n	40c8b4 <_svfprintf_r+0x115c>
  40c8c0:	3301      	adds	r3, #1
  40c8c2:	1a9b      	subs	r3, r3, r2
  40c8c4:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  40c8c8:	4413      	add	r3, r2
  40c8ca:	aa21      	add	r2, sp, #132	; 0x84
  40c8cc:	1a9b      	subs	r3, r3, r2
  40c8ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40c8d0:	931b      	str	r3, [sp, #108]	; 0x6c
  40c8d2:	2a01      	cmp	r2, #1
  40c8d4:	4413      	add	r3, r2
  40c8d6:	930e      	str	r3, [sp, #56]	; 0x38
  40c8d8:	f340 8119 	ble.w	40cb0e <_svfprintf_r+0x13b6>
  40c8dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40c8de:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40c8e0:	4413      	add	r3, r2
  40c8e2:	930e      	str	r3, [sp, #56]	; 0x38
  40c8e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40c8e8:	9308      	str	r3, [sp, #32]
  40c8ea:	2300      	movs	r3, #0
  40c8ec:	9312      	str	r3, [sp, #72]	; 0x48
  40c8ee:	e6cf      	b.n	40c690 <_svfprintf_r+0xf38>
  40c8f0:	aa25      	add	r2, sp, #148	; 0x94
  40c8f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40c8f4:	980c      	ldr	r0, [sp, #48]	; 0x30
  40c8f6:	f002 fb51 	bl	40ef9c <__ssprint_r>
  40c8fa:	2800      	cmp	r0, #0
  40c8fc:	f47e affe 	bne.w	40b8fc <_svfprintf_r+0x1a4>
  40c900:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40c902:	46c8      	mov	r8, r9
  40c904:	e4d7      	b.n	40c2b6 <_svfprintf_r+0xb5e>
  40c906:	4623      	mov	r3, r4
  40c908:	e6a2      	b.n	40c650 <_svfprintf_r+0xef8>
  40c90a:	aa25      	add	r2, sp, #148	; 0x94
  40c90c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40c90e:	980c      	ldr	r0, [sp, #48]	; 0x30
  40c910:	f002 fb44 	bl	40ef9c <__ssprint_r>
  40c914:	2800      	cmp	r0, #0
  40c916:	f47e aff1 	bne.w	40b8fc <_svfprintf_r+0x1a4>
  40c91a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40c91c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40c91e:	46c8      	mov	r8, r9
  40c920:	e5ae      	b.n	40c480 <_svfprintf_r+0xd28>
  40c922:	aa25      	add	r2, sp, #148	; 0x94
  40c924:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40c926:	980c      	ldr	r0, [sp, #48]	; 0x30
  40c928:	f002 fb38 	bl	40ef9c <__ssprint_r>
  40c92c:	2800      	cmp	r0, #0
  40c92e:	f47e afe5 	bne.w	40b8fc <_svfprintf_r+0x1a4>
  40c932:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40c934:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40c936:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40c938:	1a9a      	subs	r2, r3, r2
  40c93a:	46c8      	mov	r8, r9
  40c93c:	e5b8      	b.n	40c4b0 <_svfprintf_r+0xd58>
  40c93e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c940:	9612      	str	r6, [sp, #72]	; 0x48
  40c942:	2b06      	cmp	r3, #6
  40c944:	bf28      	it	cs
  40c946:	2306      	movcs	r3, #6
  40c948:	960a      	str	r6, [sp, #40]	; 0x28
  40c94a:	4637      	mov	r7, r6
  40c94c:	9308      	str	r3, [sp, #32]
  40c94e:	950f      	str	r5, [sp, #60]	; 0x3c
  40c950:	f8cd b01c 	str.w	fp, [sp, #28]
  40c954:	930e      	str	r3, [sp, #56]	; 0x38
  40c956:	4e74      	ldr	r6, [pc, #464]	; (40cb28 <_svfprintf_r+0x13d0>)
  40c958:	f7ff b816 	b.w	40b988 <_svfprintf_r+0x230>
  40c95c:	a823      	add	r0, sp, #140	; 0x8c
  40c95e:	a920      	add	r1, sp, #128	; 0x80
  40c960:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40c962:	9004      	str	r0, [sp, #16]
  40c964:	9103      	str	r1, [sp, #12]
  40c966:	a81f      	add	r0, sp, #124	; 0x7c
  40c968:	2103      	movs	r1, #3
  40c96a:	9002      	str	r0, [sp, #8]
  40c96c:	9a08      	ldr	r2, [sp, #32]
  40c96e:	9501      	str	r5, [sp, #4]
  40c970:	463b      	mov	r3, r7
  40c972:	9100      	str	r1, [sp, #0]
  40c974:	980c      	ldr	r0, [sp, #48]	; 0x30
  40c976:	f000 f9c3 	bl	40cd00 <_dtoa_r>
  40c97a:	4606      	mov	r6, r0
  40c97c:	1944      	adds	r4, r0, r5
  40c97e:	e72b      	b.n	40c7d8 <_svfprintf_r+0x1080>
  40c980:	2306      	movs	r3, #6
  40c982:	930a      	str	r3, [sp, #40]	; 0x28
  40c984:	e61d      	b.n	40c5c2 <_svfprintf_r+0xe6a>
  40c986:	272d      	movs	r7, #45	; 0x2d
  40c988:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40c98c:	f7ff bacd 	b.w	40bf2a <_svfprintf_r+0x7d2>
  40c990:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40c992:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40c994:	4413      	add	r3, r2
  40c996:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40c998:	930e      	str	r3, [sp, #56]	; 0x38
  40c99a:	2a00      	cmp	r2, #0
  40c99c:	f340 80b0 	ble.w	40cb00 <_svfprintf_r+0x13a8>
  40c9a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40c9a4:	9308      	str	r3, [sp, #32]
  40c9a6:	2367      	movs	r3, #103	; 0x67
  40c9a8:	9311      	str	r3, [sp, #68]	; 0x44
  40c9aa:	e671      	b.n	40c690 <_svfprintf_r+0xf38>
  40c9ac:	2b00      	cmp	r3, #0
  40c9ae:	f340 80c3 	ble.w	40cb38 <_svfprintf_r+0x13e0>
  40c9b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c9b4:	2a00      	cmp	r2, #0
  40c9b6:	f040 8099 	bne.w	40caec <_svfprintf_r+0x1394>
  40c9ba:	f01b 0f01 	tst.w	fp, #1
  40c9be:	f040 8095 	bne.w	40caec <_svfprintf_r+0x1394>
  40c9c2:	9308      	str	r3, [sp, #32]
  40c9c4:	930e      	str	r3, [sp, #56]	; 0x38
  40c9c6:	e663      	b.n	40c690 <_svfprintf_r+0xf38>
  40c9c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c9ca:	9308      	str	r3, [sp, #32]
  40c9cc:	930e      	str	r3, [sp, #56]	; 0x38
  40c9ce:	900a      	str	r0, [sp, #40]	; 0x28
  40c9d0:	950f      	str	r5, [sp, #60]	; 0x3c
  40c9d2:	f8cd b01c 	str.w	fp, [sp, #28]
  40c9d6:	9012      	str	r0, [sp, #72]	; 0x48
  40c9d8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40c9dc:	f7fe bfd4 	b.w	40b988 <_svfprintf_r+0x230>
  40c9e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40c9e2:	2b47      	cmp	r3, #71	; 0x47
  40c9e4:	f47f ae20 	bne.w	40c628 <_svfprintf_r+0xed0>
  40c9e8:	f01b 0f01 	tst.w	fp, #1
  40c9ec:	f47f aeee 	bne.w	40c7cc <_svfprintf_r+0x1074>
  40c9f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40c9f2:	1b9b      	subs	r3, r3, r6
  40c9f4:	9313      	str	r3, [sp, #76]	; 0x4c
  40c9f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40c9f8:	2b47      	cmp	r3, #71	; 0x47
  40c9fa:	f43f af18 	beq.w	40c82e <_svfprintf_r+0x10d6>
  40c9fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40ca00:	9312      	str	r3, [sp, #72]	; 0x48
  40ca02:	e721      	b.n	40c848 <_svfprintf_r+0x10f0>
  40ca04:	424f      	negs	r7, r1
  40ca06:	3110      	adds	r1, #16
  40ca08:	4d48      	ldr	r5, [pc, #288]	; (40cb2c <_svfprintf_r+0x13d4>)
  40ca0a:	da2f      	bge.n	40ca6c <_svfprintf_r+0x1314>
  40ca0c:	2410      	movs	r4, #16
  40ca0e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40ca12:	e004      	b.n	40ca1e <_svfprintf_r+0x12c6>
  40ca14:	f108 0808 	add.w	r8, r8, #8
  40ca18:	3f10      	subs	r7, #16
  40ca1a:	2f10      	cmp	r7, #16
  40ca1c:	dd26      	ble.n	40ca6c <_svfprintf_r+0x1314>
  40ca1e:	3301      	adds	r3, #1
  40ca20:	3210      	adds	r2, #16
  40ca22:	2b07      	cmp	r3, #7
  40ca24:	9227      	str	r2, [sp, #156]	; 0x9c
  40ca26:	9326      	str	r3, [sp, #152]	; 0x98
  40ca28:	f8c8 5000 	str.w	r5, [r8]
  40ca2c:	f8c8 4004 	str.w	r4, [r8, #4]
  40ca30:	ddf0      	ble.n	40ca14 <_svfprintf_r+0x12bc>
  40ca32:	aa25      	add	r2, sp, #148	; 0x94
  40ca34:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40ca36:	4658      	mov	r0, fp
  40ca38:	f002 fab0 	bl	40ef9c <__ssprint_r>
  40ca3c:	2800      	cmp	r0, #0
  40ca3e:	f47e af5d 	bne.w	40b8fc <_svfprintf_r+0x1a4>
  40ca42:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40ca44:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40ca46:	46c8      	mov	r8, r9
  40ca48:	e7e6      	b.n	40ca18 <_svfprintf_r+0x12c0>
  40ca4a:	aa25      	add	r2, sp, #148	; 0x94
  40ca4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40ca4e:	980c      	ldr	r0, [sp, #48]	; 0x30
  40ca50:	f002 faa4 	bl	40ef9c <__ssprint_r>
  40ca54:	2800      	cmp	r0, #0
  40ca56:	f47e af51 	bne.w	40b8fc <_svfprintf_r+0x1a4>
  40ca5a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40ca5c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40ca5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40ca60:	46c8      	mov	r8, r9
  40ca62:	e667      	b.n	40c734 <_svfprintf_r+0xfdc>
  40ca64:	2000      	movs	r0, #0
  40ca66:	900a      	str	r0, [sp, #40]	; 0x28
  40ca68:	f7fe bed0 	b.w	40b80c <_svfprintf_r+0xb4>
  40ca6c:	3301      	adds	r3, #1
  40ca6e:	443a      	add	r2, r7
  40ca70:	2b07      	cmp	r3, #7
  40ca72:	e888 00a0 	stmia.w	r8, {r5, r7}
  40ca76:	9227      	str	r2, [sp, #156]	; 0x9c
  40ca78:	9326      	str	r3, [sp, #152]	; 0x98
  40ca7a:	f108 0808 	add.w	r8, r8, #8
  40ca7e:	f77f ae5c 	ble.w	40c73a <_svfprintf_r+0xfe2>
  40ca82:	aa25      	add	r2, sp, #148	; 0x94
  40ca84:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40ca86:	980c      	ldr	r0, [sp, #48]	; 0x30
  40ca88:	f002 fa88 	bl	40ef9c <__ssprint_r>
  40ca8c:	2800      	cmp	r0, #0
  40ca8e:	f47e af35 	bne.w	40b8fc <_svfprintf_r+0x1a4>
  40ca92:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40ca94:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40ca96:	46c8      	mov	r8, r9
  40ca98:	e64f      	b.n	40c73a <_svfprintf_r+0xfe2>
  40ca9a:	3330      	adds	r3, #48	; 0x30
  40ca9c:	2230      	movs	r2, #48	; 0x30
  40ca9e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  40caa2:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  40caa6:	ab22      	add	r3, sp, #136	; 0x88
  40caa8:	e70f      	b.n	40c8ca <_svfprintf_r+0x1172>
  40caaa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40caac:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40caae:	4413      	add	r3, r2
  40cab0:	930e      	str	r3, [sp, #56]	; 0x38
  40cab2:	e775      	b.n	40c9a0 <_svfprintf_r+0x1248>
  40cab4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40cab6:	e5cb      	b.n	40c650 <_svfprintf_r+0xef8>
  40cab8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40caba:	4e1d      	ldr	r6, [pc, #116]	; (40cb30 <_svfprintf_r+0x13d8>)
  40cabc:	2b00      	cmp	r3, #0
  40cabe:	bfb6      	itet	lt
  40cac0:	272d      	movlt	r7, #45	; 0x2d
  40cac2:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  40cac6:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  40caca:	4b1a      	ldr	r3, [pc, #104]	; (40cb34 <_svfprintf_r+0x13dc>)
  40cacc:	f7ff ba2f 	b.w	40bf2e <_svfprintf_r+0x7d6>
  40cad0:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40cad2:	9808      	ldr	r0, [sp, #32]
  40cad4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40cad6:	4639      	mov	r1, r7
  40cad8:	f7fe f98e 	bl	40adf8 <__aeabi_dcmpeq>
  40cadc:	2800      	cmp	r0, #0
  40cade:	f47f ae7f 	bne.w	40c7e0 <_svfprintf_r+0x1088>
  40cae2:	f1c5 0501 	rsb	r5, r5, #1
  40cae6:	951f      	str	r5, [sp, #124]	; 0x7c
  40cae8:	442c      	add	r4, r5
  40caea:	e59e      	b.n	40c62a <_svfprintf_r+0xed2>
  40caec:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40caee:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40caf0:	4413      	add	r3, r2
  40caf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40caf4:	441a      	add	r2, r3
  40caf6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40cafa:	920e      	str	r2, [sp, #56]	; 0x38
  40cafc:	9308      	str	r3, [sp, #32]
  40cafe:	e5c7      	b.n	40c690 <_svfprintf_r+0xf38>
  40cb00:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40cb02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40cb04:	f1c3 0301 	rsb	r3, r3, #1
  40cb08:	441a      	add	r2, r3
  40cb0a:	4613      	mov	r3, r2
  40cb0c:	e7d0      	b.n	40cab0 <_svfprintf_r+0x1358>
  40cb0e:	f01b 0301 	ands.w	r3, fp, #1
  40cb12:	9312      	str	r3, [sp, #72]	; 0x48
  40cb14:	f47f aee2 	bne.w	40c8dc <_svfprintf_r+0x1184>
  40cb18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40cb1a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40cb1e:	9308      	str	r3, [sp, #32]
  40cb20:	e5b6      	b.n	40c690 <_svfprintf_r+0xf38>
  40cb22:	bf00      	nop
  40cb24:	66666667 	.word	0x66666667
  40cb28:	004113f4 	.word	0x004113f4
  40cb2c:	00411410 	.word	0x00411410
  40cb30:	004113c8 	.word	0x004113c8
  40cb34:	004113c4 	.word	0x004113c4
  40cb38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40cb3a:	b913      	cbnz	r3, 40cb42 <_svfprintf_r+0x13ea>
  40cb3c:	f01b 0f01 	tst.w	fp, #1
  40cb40:	d002      	beq.n	40cb48 <_svfprintf_r+0x13f0>
  40cb42:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40cb44:	3301      	adds	r3, #1
  40cb46:	e7d4      	b.n	40caf2 <_svfprintf_r+0x139a>
  40cb48:	2301      	movs	r3, #1
  40cb4a:	e73a      	b.n	40c9c2 <_svfprintf_r+0x126a>
  40cb4c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40cb4e:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40cb52:	6828      	ldr	r0, [r5, #0]
  40cb54:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  40cb58:	900a      	str	r0, [sp, #40]	; 0x28
  40cb5a:	4628      	mov	r0, r5
  40cb5c:	3004      	adds	r0, #4
  40cb5e:	46a2      	mov	sl, r4
  40cb60:	900f      	str	r0, [sp, #60]	; 0x3c
  40cb62:	f7fe be51 	b.w	40b808 <_svfprintf_r+0xb0>
  40cb66:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40cb6a:	f7ff b867 	b.w	40bc3c <_svfprintf_r+0x4e4>
  40cb6e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40cb72:	f7ff ba15 	b.w	40bfa0 <_svfprintf_r+0x848>
  40cb76:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  40cb7a:	e6a6      	b.n	40c8ca <_svfprintf_r+0x1172>
  40cb7c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40cb80:	f7ff b8eb 	b.w	40bd5a <_svfprintf_r+0x602>
  40cb84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40cb86:	230c      	movs	r3, #12
  40cb88:	6013      	str	r3, [r2, #0]
  40cb8a:	f04f 33ff 	mov.w	r3, #4294967295
  40cb8e:	9309      	str	r3, [sp, #36]	; 0x24
  40cb90:	f7fe bebd 	b.w	40b90e <_svfprintf_r+0x1b6>
  40cb94:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40cb98:	f7ff b99a 	b.w	40bed0 <_svfprintf_r+0x778>
  40cb9c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40cba0:	f7ff b976 	b.w	40be90 <_svfprintf_r+0x738>
  40cba4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40cba8:	f7ff b959 	b.w	40be5e <_svfprintf_r+0x706>
  40cbac:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40cbb0:	f7ff b912 	b.w	40bdd8 <_svfprintf_r+0x680>

0040cbb4 <register_fini>:
  40cbb4:	4b02      	ldr	r3, [pc, #8]	; (40cbc0 <register_fini+0xc>)
  40cbb6:	b113      	cbz	r3, 40cbbe <register_fini+0xa>
  40cbb8:	4802      	ldr	r0, [pc, #8]	; (40cbc4 <register_fini+0x10>)
  40cbba:	f000 b805 	b.w	40cbc8 <atexit>
  40cbbe:	4770      	bx	lr
  40cbc0:	00000000 	.word	0x00000000
  40cbc4:	0040db55 	.word	0x0040db55

0040cbc8 <atexit>:
  40cbc8:	2300      	movs	r3, #0
  40cbca:	4601      	mov	r1, r0
  40cbcc:	461a      	mov	r2, r3
  40cbce:	4618      	mov	r0, r3
  40cbd0:	f002 ba70 	b.w	40f0b4 <__register_exitproc>

0040cbd4 <quorem>:
  40cbd4:	6902      	ldr	r2, [r0, #16]
  40cbd6:	690b      	ldr	r3, [r1, #16]
  40cbd8:	4293      	cmp	r3, r2
  40cbda:	f300 808d 	bgt.w	40ccf8 <quorem+0x124>
  40cbde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40cbe2:	f103 38ff 	add.w	r8, r3, #4294967295
  40cbe6:	f101 0714 	add.w	r7, r1, #20
  40cbea:	f100 0b14 	add.w	fp, r0, #20
  40cbee:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40cbf2:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  40cbf6:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40cbfa:	b083      	sub	sp, #12
  40cbfc:	3201      	adds	r2, #1
  40cbfe:	fbb3 f9f2 	udiv	r9, r3, r2
  40cc02:	eb0b 0304 	add.w	r3, fp, r4
  40cc06:	9400      	str	r4, [sp, #0]
  40cc08:	eb07 0a04 	add.w	sl, r7, r4
  40cc0c:	9301      	str	r3, [sp, #4]
  40cc0e:	f1b9 0f00 	cmp.w	r9, #0
  40cc12:	d039      	beq.n	40cc88 <quorem+0xb4>
  40cc14:	2500      	movs	r5, #0
  40cc16:	462e      	mov	r6, r5
  40cc18:	46bc      	mov	ip, r7
  40cc1a:	46de      	mov	lr, fp
  40cc1c:	f85c 4b04 	ldr.w	r4, [ip], #4
  40cc20:	f8de 3000 	ldr.w	r3, [lr]
  40cc24:	b2a2      	uxth	r2, r4
  40cc26:	fb09 5502 	mla	r5, r9, r2, r5
  40cc2a:	0c22      	lsrs	r2, r4, #16
  40cc2c:	0c2c      	lsrs	r4, r5, #16
  40cc2e:	fb09 4202 	mla	r2, r9, r2, r4
  40cc32:	b2ad      	uxth	r5, r5
  40cc34:	1b75      	subs	r5, r6, r5
  40cc36:	b296      	uxth	r6, r2
  40cc38:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  40cc3c:	fa15 f383 	uxtah	r3, r5, r3
  40cc40:	eb06 4623 	add.w	r6, r6, r3, asr #16
  40cc44:	b29b      	uxth	r3, r3
  40cc46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40cc4a:	45e2      	cmp	sl, ip
  40cc4c:	ea4f 4512 	mov.w	r5, r2, lsr #16
  40cc50:	f84e 3b04 	str.w	r3, [lr], #4
  40cc54:	ea4f 4626 	mov.w	r6, r6, asr #16
  40cc58:	d2e0      	bcs.n	40cc1c <quorem+0x48>
  40cc5a:	9b00      	ldr	r3, [sp, #0]
  40cc5c:	f85b 3003 	ldr.w	r3, [fp, r3]
  40cc60:	b993      	cbnz	r3, 40cc88 <quorem+0xb4>
  40cc62:	9c01      	ldr	r4, [sp, #4]
  40cc64:	1f23      	subs	r3, r4, #4
  40cc66:	459b      	cmp	fp, r3
  40cc68:	d20c      	bcs.n	40cc84 <quorem+0xb0>
  40cc6a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40cc6e:	b94b      	cbnz	r3, 40cc84 <quorem+0xb0>
  40cc70:	f1a4 0308 	sub.w	r3, r4, #8
  40cc74:	e002      	b.n	40cc7c <quorem+0xa8>
  40cc76:	681a      	ldr	r2, [r3, #0]
  40cc78:	3b04      	subs	r3, #4
  40cc7a:	b91a      	cbnz	r2, 40cc84 <quorem+0xb0>
  40cc7c:	459b      	cmp	fp, r3
  40cc7e:	f108 38ff 	add.w	r8, r8, #4294967295
  40cc82:	d3f8      	bcc.n	40cc76 <quorem+0xa2>
  40cc84:	f8c0 8010 	str.w	r8, [r0, #16]
  40cc88:	4604      	mov	r4, r0
  40cc8a:	f001 fe4f 	bl	40e92c <__mcmp>
  40cc8e:	2800      	cmp	r0, #0
  40cc90:	db2e      	blt.n	40ccf0 <quorem+0x11c>
  40cc92:	f109 0901 	add.w	r9, r9, #1
  40cc96:	465d      	mov	r5, fp
  40cc98:	2300      	movs	r3, #0
  40cc9a:	f857 1b04 	ldr.w	r1, [r7], #4
  40cc9e:	6828      	ldr	r0, [r5, #0]
  40cca0:	b28a      	uxth	r2, r1
  40cca2:	1a9a      	subs	r2, r3, r2
  40cca4:	0c0b      	lsrs	r3, r1, #16
  40cca6:	fa12 f280 	uxtah	r2, r2, r0
  40ccaa:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  40ccae:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40ccb2:	b292      	uxth	r2, r2
  40ccb4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40ccb8:	45ba      	cmp	sl, r7
  40ccba:	f845 2b04 	str.w	r2, [r5], #4
  40ccbe:	ea4f 4323 	mov.w	r3, r3, asr #16
  40ccc2:	d2ea      	bcs.n	40cc9a <quorem+0xc6>
  40ccc4:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  40ccc8:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  40cccc:	b982      	cbnz	r2, 40ccf0 <quorem+0x11c>
  40ccce:	1f1a      	subs	r2, r3, #4
  40ccd0:	4593      	cmp	fp, r2
  40ccd2:	d20b      	bcs.n	40ccec <quorem+0x118>
  40ccd4:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40ccd8:	b942      	cbnz	r2, 40ccec <quorem+0x118>
  40ccda:	3b08      	subs	r3, #8
  40ccdc:	e002      	b.n	40cce4 <quorem+0x110>
  40ccde:	681a      	ldr	r2, [r3, #0]
  40cce0:	3b04      	subs	r3, #4
  40cce2:	b91a      	cbnz	r2, 40ccec <quorem+0x118>
  40cce4:	459b      	cmp	fp, r3
  40cce6:	f108 38ff 	add.w	r8, r8, #4294967295
  40ccea:	d3f8      	bcc.n	40ccde <quorem+0x10a>
  40ccec:	f8c4 8010 	str.w	r8, [r4, #16]
  40ccf0:	4648      	mov	r0, r9
  40ccf2:	b003      	add	sp, #12
  40ccf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ccf8:	2000      	movs	r0, #0
  40ccfa:	4770      	bx	lr
  40ccfc:	0000      	movs	r0, r0
	...

0040cd00 <_dtoa_r>:
  40cd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40cd04:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40cd06:	b09b      	sub	sp, #108	; 0x6c
  40cd08:	4604      	mov	r4, r0
  40cd0a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  40cd0c:	4692      	mov	sl, r2
  40cd0e:	469b      	mov	fp, r3
  40cd10:	b141      	cbz	r1, 40cd24 <_dtoa_r+0x24>
  40cd12:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40cd14:	604a      	str	r2, [r1, #4]
  40cd16:	2301      	movs	r3, #1
  40cd18:	4093      	lsls	r3, r2
  40cd1a:	608b      	str	r3, [r1, #8]
  40cd1c:	f001 fc2e 	bl	40e57c <_Bfree>
  40cd20:	2300      	movs	r3, #0
  40cd22:	6423      	str	r3, [r4, #64]	; 0x40
  40cd24:	f1bb 0f00 	cmp.w	fp, #0
  40cd28:	465d      	mov	r5, fp
  40cd2a:	db35      	blt.n	40cd98 <_dtoa_r+0x98>
  40cd2c:	2300      	movs	r3, #0
  40cd2e:	6033      	str	r3, [r6, #0]
  40cd30:	4b9d      	ldr	r3, [pc, #628]	; (40cfa8 <_dtoa_r+0x2a8>)
  40cd32:	43ab      	bics	r3, r5
  40cd34:	d015      	beq.n	40cd62 <_dtoa_r+0x62>
  40cd36:	4650      	mov	r0, sl
  40cd38:	4659      	mov	r1, fp
  40cd3a:	2200      	movs	r2, #0
  40cd3c:	2300      	movs	r3, #0
  40cd3e:	f7fe f85b 	bl	40adf8 <__aeabi_dcmpeq>
  40cd42:	4680      	mov	r8, r0
  40cd44:	2800      	cmp	r0, #0
  40cd46:	d02d      	beq.n	40cda4 <_dtoa_r+0xa4>
  40cd48:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40cd4a:	2301      	movs	r3, #1
  40cd4c:	6013      	str	r3, [r2, #0]
  40cd4e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40cd50:	2b00      	cmp	r3, #0
  40cd52:	f000 80bd 	beq.w	40ced0 <_dtoa_r+0x1d0>
  40cd56:	4895      	ldr	r0, [pc, #596]	; (40cfac <_dtoa_r+0x2ac>)
  40cd58:	6018      	str	r0, [r3, #0]
  40cd5a:	3801      	subs	r0, #1
  40cd5c:	b01b      	add	sp, #108	; 0x6c
  40cd5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cd62:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40cd64:	f242 730f 	movw	r3, #9999	; 0x270f
  40cd68:	6013      	str	r3, [r2, #0]
  40cd6a:	f1ba 0f00 	cmp.w	sl, #0
  40cd6e:	d10d      	bne.n	40cd8c <_dtoa_r+0x8c>
  40cd70:	f3c5 0513 	ubfx	r5, r5, #0, #20
  40cd74:	b955      	cbnz	r5, 40cd8c <_dtoa_r+0x8c>
  40cd76:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40cd78:	488d      	ldr	r0, [pc, #564]	; (40cfb0 <_dtoa_r+0x2b0>)
  40cd7a:	2b00      	cmp	r3, #0
  40cd7c:	d0ee      	beq.n	40cd5c <_dtoa_r+0x5c>
  40cd7e:	f100 0308 	add.w	r3, r0, #8
  40cd82:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  40cd84:	6013      	str	r3, [r2, #0]
  40cd86:	b01b      	add	sp, #108	; 0x6c
  40cd88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cd8c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40cd8e:	4889      	ldr	r0, [pc, #548]	; (40cfb4 <_dtoa_r+0x2b4>)
  40cd90:	2b00      	cmp	r3, #0
  40cd92:	d0e3      	beq.n	40cd5c <_dtoa_r+0x5c>
  40cd94:	1cc3      	adds	r3, r0, #3
  40cd96:	e7f4      	b.n	40cd82 <_dtoa_r+0x82>
  40cd98:	2301      	movs	r3, #1
  40cd9a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  40cd9e:	6033      	str	r3, [r6, #0]
  40cda0:	46ab      	mov	fp, r5
  40cda2:	e7c5      	b.n	40cd30 <_dtoa_r+0x30>
  40cda4:	aa18      	add	r2, sp, #96	; 0x60
  40cda6:	ab19      	add	r3, sp, #100	; 0x64
  40cda8:	9201      	str	r2, [sp, #4]
  40cdaa:	9300      	str	r3, [sp, #0]
  40cdac:	4652      	mov	r2, sl
  40cdae:	465b      	mov	r3, fp
  40cdb0:	4620      	mov	r0, r4
  40cdb2:	f001 fe5b 	bl	40ea6c <__d2b>
  40cdb6:	0d2b      	lsrs	r3, r5, #20
  40cdb8:	4681      	mov	r9, r0
  40cdba:	d071      	beq.n	40cea0 <_dtoa_r+0x1a0>
  40cdbc:	f3cb 0213 	ubfx	r2, fp, #0, #20
  40cdc0:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  40cdc4:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40cdc6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  40cdca:	4650      	mov	r0, sl
  40cdcc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  40cdd0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40cdd4:	2200      	movs	r2, #0
  40cdd6:	4b78      	ldr	r3, [pc, #480]	; (40cfb8 <_dtoa_r+0x2b8>)
  40cdd8:	f7fd fbf2 	bl	40a5c0 <__aeabi_dsub>
  40cddc:	a36c      	add	r3, pc, #432	; (adr r3, 40cf90 <_dtoa_r+0x290>)
  40cdde:	e9d3 2300 	ldrd	r2, r3, [r3]
  40cde2:	f7fd fda1 	bl	40a928 <__aeabi_dmul>
  40cde6:	a36c      	add	r3, pc, #432	; (adr r3, 40cf98 <_dtoa_r+0x298>)
  40cde8:	e9d3 2300 	ldrd	r2, r3, [r3]
  40cdec:	f7fd fbea 	bl	40a5c4 <__adddf3>
  40cdf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40cdf4:	4630      	mov	r0, r6
  40cdf6:	f7fd fd31 	bl	40a85c <__aeabi_i2d>
  40cdfa:	a369      	add	r3, pc, #420	; (adr r3, 40cfa0 <_dtoa_r+0x2a0>)
  40cdfc:	e9d3 2300 	ldrd	r2, r3, [r3]
  40ce00:	f7fd fd92 	bl	40a928 <__aeabi_dmul>
  40ce04:	4602      	mov	r2, r0
  40ce06:	460b      	mov	r3, r1
  40ce08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40ce0c:	f7fd fbda 	bl	40a5c4 <__adddf3>
  40ce10:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40ce14:	f7fe f838 	bl	40ae88 <__aeabi_d2iz>
  40ce18:	2200      	movs	r2, #0
  40ce1a:	9002      	str	r0, [sp, #8]
  40ce1c:	2300      	movs	r3, #0
  40ce1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40ce22:	f7fd fff3 	bl	40ae0c <__aeabi_dcmplt>
  40ce26:	2800      	cmp	r0, #0
  40ce28:	f040 8173 	bne.w	40d112 <_dtoa_r+0x412>
  40ce2c:	9d02      	ldr	r5, [sp, #8]
  40ce2e:	2d16      	cmp	r5, #22
  40ce30:	f200 815d 	bhi.w	40d0ee <_dtoa_r+0x3ee>
  40ce34:	4b61      	ldr	r3, [pc, #388]	; (40cfbc <_dtoa_r+0x2bc>)
  40ce36:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40ce3a:	e9d3 0100 	ldrd	r0, r1, [r3]
  40ce3e:	4652      	mov	r2, sl
  40ce40:	465b      	mov	r3, fp
  40ce42:	f7fe f801 	bl	40ae48 <__aeabi_dcmpgt>
  40ce46:	2800      	cmp	r0, #0
  40ce48:	f000 81c5 	beq.w	40d1d6 <_dtoa_r+0x4d6>
  40ce4c:	1e6b      	subs	r3, r5, #1
  40ce4e:	9302      	str	r3, [sp, #8]
  40ce50:	2300      	movs	r3, #0
  40ce52:	930e      	str	r3, [sp, #56]	; 0x38
  40ce54:	1bbf      	subs	r7, r7, r6
  40ce56:	1e7b      	subs	r3, r7, #1
  40ce58:	9306      	str	r3, [sp, #24]
  40ce5a:	f100 8154 	bmi.w	40d106 <_dtoa_r+0x406>
  40ce5e:	2300      	movs	r3, #0
  40ce60:	9308      	str	r3, [sp, #32]
  40ce62:	9b02      	ldr	r3, [sp, #8]
  40ce64:	2b00      	cmp	r3, #0
  40ce66:	f2c0 8145 	blt.w	40d0f4 <_dtoa_r+0x3f4>
  40ce6a:	9a06      	ldr	r2, [sp, #24]
  40ce6c:	930d      	str	r3, [sp, #52]	; 0x34
  40ce6e:	4611      	mov	r1, r2
  40ce70:	4419      	add	r1, r3
  40ce72:	2300      	movs	r3, #0
  40ce74:	9106      	str	r1, [sp, #24]
  40ce76:	930c      	str	r3, [sp, #48]	; 0x30
  40ce78:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40ce7a:	2b09      	cmp	r3, #9
  40ce7c:	d82a      	bhi.n	40ced4 <_dtoa_r+0x1d4>
  40ce7e:	2b05      	cmp	r3, #5
  40ce80:	f340 865b 	ble.w	40db3a <_dtoa_r+0xe3a>
  40ce84:	3b04      	subs	r3, #4
  40ce86:	9324      	str	r3, [sp, #144]	; 0x90
  40ce88:	2500      	movs	r5, #0
  40ce8a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40ce8c:	3b02      	subs	r3, #2
  40ce8e:	2b03      	cmp	r3, #3
  40ce90:	f200 8642 	bhi.w	40db18 <_dtoa_r+0xe18>
  40ce94:	e8df f013 	tbh	[pc, r3, lsl #1]
  40ce98:	02c903d4 	.word	0x02c903d4
  40ce9c:	046103df 	.word	0x046103df
  40cea0:	9f18      	ldr	r7, [sp, #96]	; 0x60
  40cea2:	9e19      	ldr	r6, [sp, #100]	; 0x64
  40cea4:	443e      	add	r6, r7
  40cea6:	f206 4332 	addw	r3, r6, #1074	; 0x432
  40ceaa:	2b20      	cmp	r3, #32
  40ceac:	f340 818e 	ble.w	40d1cc <_dtoa_r+0x4cc>
  40ceb0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  40ceb4:	f206 4012 	addw	r0, r6, #1042	; 0x412
  40ceb8:	409d      	lsls	r5, r3
  40ceba:	fa2a f000 	lsr.w	r0, sl, r0
  40cebe:	4328      	orrs	r0, r5
  40cec0:	f7fd fcbc 	bl	40a83c <__aeabi_ui2d>
  40cec4:	2301      	movs	r3, #1
  40cec6:	3e01      	subs	r6, #1
  40cec8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40cecc:	9314      	str	r3, [sp, #80]	; 0x50
  40cece:	e781      	b.n	40cdd4 <_dtoa_r+0xd4>
  40ced0:	483b      	ldr	r0, [pc, #236]	; (40cfc0 <_dtoa_r+0x2c0>)
  40ced2:	e743      	b.n	40cd5c <_dtoa_r+0x5c>
  40ced4:	2100      	movs	r1, #0
  40ced6:	6461      	str	r1, [r4, #68]	; 0x44
  40ced8:	4620      	mov	r0, r4
  40ceda:	9125      	str	r1, [sp, #148]	; 0x94
  40cedc:	f001 fb28 	bl	40e530 <_Balloc>
  40cee0:	f04f 33ff 	mov.w	r3, #4294967295
  40cee4:	930a      	str	r3, [sp, #40]	; 0x28
  40cee6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40cee8:	930f      	str	r3, [sp, #60]	; 0x3c
  40ceea:	2301      	movs	r3, #1
  40ceec:	9004      	str	r0, [sp, #16]
  40ceee:	6420      	str	r0, [r4, #64]	; 0x40
  40cef0:	9224      	str	r2, [sp, #144]	; 0x90
  40cef2:	930b      	str	r3, [sp, #44]	; 0x2c
  40cef4:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40cef6:	2b00      	cmp	r3, #0
  40cef8:	f2c0 80d9 	blt.w	40d0ae <_dtoa_r+0x3ae>
  40cefc:	9a02      	ldr	r2, [sp, #8]
  40cefe:	2a0e      	cmp	r2, #14
  40cf00:	f300 80d5 	bgt.w	40d0ae <_dtoa_r+0x3ae>
  40cf04:	4b2d      	ldr	r3, [pc, #180]	; (40cfbc <_dtoa_r+0x2bc>)
  40cf06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40cf0a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40cf0e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40cf12:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40cf14:	2b00      	cmp	r3, #0
  40cf16:	f2c0 83ba 	blt.w	40d68e <_dtoa_r+0x98e>
  40cf1a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  40cf1e:	4650      	mov	r0, sl
  40cf20:	462a      	mov	r2, r5
  40cf22:	4633      	mov	r3, r6
  40cf24:	4659      	mov	r1, fp
  40cf26:	f7fd fe29 	bl	40ab7c <__aeabi_ddiv>
  40cf2a:	f7fd ffad 	bl	40ae88 <__aeabi_d2iz>
  40cf2e:	4680      	mov	r8, r0
  40cf30:	f7fd fc94 	bl	40a85c <__aeabi_i2d>
  40cf34:	462a      	mov	r2, r5
  40cf36:	4633      	mov	r3, r6
  40cf38:	f7fd fcf6 	bl	40a928 <__aeabi_dmul>
  40cf3c:	460b      	mov	r3, r1
  40cf3e:	4602      	mov	r2, r0
  40cf40:	4659      	mov	r1, fp
  40cf42:	4650      	mov	r0, sl
  40cf44:	f7fd fb3c 	bl	40a5c0 <__aeabi_dsub>
  40cf48:	9d04      	ldr	r5, [sp, #16]
  40cf4a:	f108 0330 	add.w	r3, r8, #48	; 0x30
  40cf4e:	702b      	strb	r3, [r5, #0]
  40cf50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40cf52:	2b01      	cmp	r3, #1
  40cf54:	4606      	mov	r6, r0
  40cf56:	460f      	mov	r7, r1
  40cf58:	f105 0501 	add.w	r5, r5, #1
  40cf5c:	d068      	beq.n	40d030 <_dtoa_r+0x330>
  40cf5e:	2200      	movs	r2, #0
  40cf60:	4b18      	ldr	r3, [pc, #96]	; (40cfc4 <_dtoa_r+0x2c4>)
  40cf62:	f7fd fce1 	bl	40a928 <__aeabi_dmul>
  40cf66:	2200      	movs	r2, #0
  40cf68:	2300      	movs	r3, #0
  40cf6a:	4606      	mov	r6, r0
  40cf6c:	460f      	mov	r7, r1
  40cf6e:	f7fd ff43 	bl	40adf8 <__aeabi_dcmpeq>
  40cf72:	2800      	cmp	r0, #0
  40cf74:	f040 8088 	bne.w	40d088 <_dtoa_r+0x388>
  40cf78:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  40cf7c:	f04f 0a00 	mov.w	sl, #0
  40cf80:	f8df b040 	ldr.w	fp, [pc, #64]	; 40cfc4 <_dtoa_r+0x2c4>
  40cf84:	940c      	str	r4, [sp, #48]	; 0x30
  40cf86:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  40cf8a:	e028      	b.n	40cfde <_dtoa_r+0x2de>
  40cf8c:	f3af 8000 	nop.w
  40cf90:	636f4361 	.word	0x636f4361
  40cf94:	3fd287a7 	.word	0x3fd287a7
  40cf98:	8b60c8b3 	.word	0x8b60c8b3
  40cf9c:	3fc68a28 	.word	0x3fc68a28
  40cfa0:	509f79fb 	.word	0x509f79fb
  40cfa4:	3fd34413 	.word	0x3fd34413
  40cfa8:	7ff00000 	.word	0x7ff00000
  40cfac:	004113fd 	.word	0x004113fd
  40cfb0:	00411420 	.word	0x00411420
  40cfb4:	0041142c 	.word	0x0041142c
  40cfb8:	3ff80000 	.word	0x3ff80000
  40cfbc:	00411468 	.word	0x00411468
  40cfc0:	004113fc 	.word	0x004113fc
  40cfc4:	40240000 	.word	0x40240000
  40cfc8:	f7fd fcae 	bl	40a928 <__aeabi_dmul>
  40cfcc:	2200      	movs	r2, #0
  40cfce:	2300      	movs	r3, #0
  40cfd0:	4606      	mov	r6, r0
  40cfd2:	460f      	mov	r7, r1
  40cfd4:	f7fd ff10 	bl	40adf8 <__aeabi_dcmpeq>
  40cfd8:	2800      	cmp	r0, #0
  40cfda:	f040 83c1 	bne.w	40d760 <_dtoa_r+0xa60>
  40cfde:	4642      	mov	r2, r8
  40cfe0:	464b      	mov	r3, r9
  40cfe2:	4630      	mov	r0, r6
  40cfe4:	4639      	mov	r1, r7
  40cfe6:	f7fd fdc9 	bl	40ab7c <__aeabi_ddiv>
  40cfea:	f7fd ff4d 	bl	40ae88 <__aeabi_d2iz>
  40cfee:	4604      	mov	r4, r0
  40cff0:	f7fd fc34 	bl	40a85c <__aeabi_i2d>
  40cff4:	4642      	mov	r2, r8
  40cff6:	464b      	mov	r3, r9
  40cff8:	f7fd fc96 	bl	40a928 <__aeabi_dmul>
  40cffc:	4602      	mov	r2, r0
  40cffe:	460b      	mov	r3, r1
  40d000:	4630      	mov	r0, r6
  40d002:	4639      	mov	r1, r7
  40d004:	f7fd fadc 	bl	40a5c0 <__aeabi_dsub>
  40d008:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  40d00c:	9e04      	ldr	r6, [sp, #16]
  40d00e:	f805 eb01 	strb.w	lr, [r5], #1
  40d012:	eba5 0e06 	sub.w	lr, r5, r6
  40d016:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40d018:	45b6      	cmp	lr, r6
  40d01a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40d01e:	4652      	mov	r2, sl
  40d020:	465b      	mov	r3, fp
  40d022:	d1d1      	bne.n	40cfc8 <_dtoa_r+0x2c8>
  40d024:	46a0      	mov	r8, r4
  40d026:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40d02a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40d02c:	4606      	mov	r6, r0
  40d02e:	460f      	mov	r7, r1
  40d030:	4632      	mov	r2, r6
  40d032:	463b      	mov	r3, r7
  40d034:	4630      	mov	r0, r6
  40d036:	4639      	mov	r1, r7
  40d038:	f7fd fac4 	bl	40a5c4 <__adddf3>
  40d03c:	4606      	mov	r6, r0
  40d03e:	460f      	mov	r7, r1
  40d040:	4602      	mov	r2, r0
  40d042:	460b      	mov	r3, r1
  40d044:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40d048:	f7fd fee0 	bl	40ae0c <__aeabi_dcmplt>
  40d04c:	b948      	cbnz	r0, 40d062 <_dtoa_r+0x362>
  40d04e:	4632      	mov	r2, r6
  40d050:	463b      	mov	r3, r7
  40d052:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40d056:	f7fd fecf 	bl	40adf8 <__aeabi_dcmpeq>
  40d05a:	b1a8      	cbz	r0, 40d088 <_dtoa_r+0x388>
  40d05c:	f018 0f01 	tst.w	r8, #1
  40d060:	d012      	beq.n	40d088 <_dtoa_r+0x388>
  40d062:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40d066:	9a04      	ldr	r2, [sp, #16]
  40d068:	1e6b      	subs	r3, r5, #1
  40d06a:	e004      	b.n	40d076 <_dtoa_r+0x376>
  40d06c:	429a      	cmp	r2, r3
  40d06e:	f000 8401 	beq.w	40d874 <_dtoa_r+0xb74>
  40d072:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40d076:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  40d07a:	f103 0501 	add.w	r5, r3, #1
  40d07e:	d0f5      	beq.n	40d06c <_dtoa_r+0x36c>
  40d080:	f108 0801 	add.w	r8, r8, #1
  40d084:	f883 8000 	strb.w	r8, [r3]
  40d088:	4649      	mov	r1, r9
  40d08a:	4620      	mov	r0, r4
  40d08c:	f001 fa76 	bl	40e57c <_Bfree>
  40d090:	2200      	movs	r2, #0
  40d092:	9b02      	ldr	r3, [sp, #8]
  40d094:	702a      	strb	r2, [r5, #0]
  40d096:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40d098:	3301      	adds	r3, #1
  40d09a:	6013      	str	r3, [r2, #0]
  40d09c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  40d09e:	2b00      	cmp	r3, #0
  40d0a0:	f000 839e 	beq.w	40d7e0 <_dtoa_r+0xae0>
  40d0a4:	9804      	ldr	r0, [sp, #16]
  40d0a6:	601d      	str	r5, [r3, #0]
  40d0a8:	b01b      	add	sp, #108	; 0x6c
  40d0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d0ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40d0b0:	2a00      	cmp	r2, #0
  40d0b2:	d03e      	beq.n	40d132 <_dtoa_r+0x432>
  40d0b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40d0b6:	2a01      	cmp	r2, #1
  40d0b8:	f340 8311 	ble.w	40d6de <_dtoa_r+0x9de>
  40d0bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d0be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40d0c0:	1e5f      	subs	r7, r3, #1
  40d0c2:	42ba      	cmp	r2, r7
  40d0c4:	f2c0 838f 	blt.w	40d7e6 <_dtoa_r+0xae6>
  40d0c8:	1bd7      	subs	r7, r2, r7
  40d0ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d0cc:	2b00      	cmp	r3, #0
  40d0ce:	f2c0 848b 	blt.w	40d9e8 <_dtoa_r+0xce8>
  40d0d2:	9d08      	ldr	r5, [sp, #32]
  40d0d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d0d6:	9a08      	ldr	r2, [sp, #32]
  40d0d8:	441a      	add	r2, r3
  40d0da:	9208      	str	r2, [sp, #32]
  40d0dc:	9a06      	ldr	r2, [sp, #24]
  40d0de:	2101      	movs	r1, #1
  40d0e0:	441a      	add	r2, r3
  40d0e2:	4620      	mov	r0, r4
  40d0e4:	9206      	str	r2, [sp, #24]
  40d0e6:	f001 fae3 	bl	40e6b0 <__i2b>
  40d0ea:	4606      	mov	r6, r0
  40d0ec:	e024      	b.n	40d138 <_dtoa_r+0x438>
  40d0ee:	2301      	movs	r3, #1
  40d0f0:	930e      	str	r3, [sp, #56]	; 0x38
  40d0f2:	e6af      	b.n	40ce54 <_dtoa_r+0x154>
  40d0f4:	9a08      	ldr	r2, [sp, #32]
  40d0f6:	9b02      	ldr	r3, [sp, #8]
  40d0f8:	1ad2      	subs	r2, r2, r3
  40d0fa:	425b      	negs	r3, r3
  40d0fc:	930c      	str	r3, [sp, #48]	; 0x30
  40d0fe:	2300      	movs	r3, #0
  40d100:	9208      	str	r2, [sp, #32]
  40d102:	930d      	str	r3, [sp, #52]	; 0x34
  40d104:	e6b8      	b.n	40ce78 <_dtoa_r+0x178>
  40d106:	f1c7 0301 	rsb	r3, r7, #1
  40d10a:	9308      	str	r3, [sp, #32]
  40d10c:	2300      	movs	r3, #0
  40d10e:	9306      	str	r3, [sp, #24]
  40d110:	e6a7      	b.n	40ce62 <_dtoa_r+0x162>
  40d112:	9d02      	ldr	r5, [sp, #8]
  40d114:	4628      	mov	r0, r5
  40d116:	f7fd fba1 	bl	40a85c <__aeabi_i2d>
  40d11a:	4602      	mov	r2, r0
  40d11c:	460b      	mov	r3, r1
  40d11e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40d122:	f7fd fe69 	bl	40adf8 <__aeabi_dcmpeq>
  40d126:	2800      	cmp	r0, #0
  40d128:	f47f ae80 	bne.w	40ce2c <_dtoa_r+0x12c>
  40d12c:	1e6b      	subs	r3, r5, #1
  40d12e:	9302      	str	r3, [sp, #8]
  40d130:	e67c      	b.n	40ce2c <_dtoa_r+0x12c>
  40d132:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40d134:	9d08      	ldr	r5, [sp, #32]
  40d136:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  40d138:	2d00      	cmp	r5, #0
  40d13a:	dd0c      	ble.n	40d156 <_dtoa_r+0x456>
  40d13c:	9906      	ldr	r1, [sp, #24]
  40d13e:	2900      	cmp	r1, #0
  40d140:	460b      	mov	r3, r1
  40d142:	dd08      	ble.n	40d156 <_dtoa_r+0x456>
  40d144:	42a9      	cmp	r1, r5
  40d146:	9a08      	ldr	r2, [sp, #32]
  40d148:	bfa8      	it	ge
  40d14a:	462b      	movge	r3, r5
  40d14c:	1ad2      	subs	r2, r2, r3
  40d14e:	1aed      	subs	r5, r5, r3
  40d150:	1acb      	subs	r3, r1, r3
  40d152:	9208      	str	r2, [sp, #32]
  40d154:	9306      	str	r3, [sp, #24]
  40d156:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40d158:	b1d3      	cbz	r3, 40d190 <_dtoa_r+0x490>
  40d15a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40d15c:	2b00      	cmp	r3, #0
  40d15e:	f000 82b7 	beq.w	40d6d0 <_dtoa_r+0x9d0>
  40d162:	2f00      	cmp	r7, #0
  40d164:	dd10      	ble.n	40d188 <_dtoa_r+0x488>
  40d166:	4631      	mov	r1, r6
  40d168:	463a      	mov	r2, r7
  40d16a:	4620      	mov	r0, r4
  40d16c:	f001 fb3c 	bl	40e7e8 <__pow5mult>
  40d170:	464a      	mov	r2, r9
  40d172:	4601      	mov	r1, r0
  40d174:	4606      	mov	r6, r0
  40d176:	4620      	mov	r0, r4
  40d178:	f001 faa4 	bl	40e6c4 <__multiply>
  40d17c:	4649      	mov	r1, r9
  40d17e:	4680      	mov	r8, r0
  40d180:	4620      	mov	r0, r4
  40d182:	f001 f9fb 	bl	40e57c <_Bfree>
  40d186:	46c1      	mov	r9, r8
  40d188:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40d18a:	1bda      	subs	r2, r3, r7
  40d18c:	f040 82a1 	bne.w	40d6d2 <_dtoa_r+0x9d2>
  40d190:	2101      	movs	r1, #1
  40d192:	4620      	mov	r0, r4
  40d194:	f001 fa8c 	bl	40e6b0 <__i2b>
  40d198:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40d19a:	2b00      	cmp	r3, #0
  40d19c:	4680      	mov	r8, r0
  40d19e:	dd1c      	ble.n	40d1da <_dtoa_r+0x4da>
  40d1a0:	4601      	mov	r1, r0
  40d1a2:	461a      	mov	r2, r3
  40d1a4:	4620      	mov	r0, r4
  40d1a6:	f001 fb1f 	bl	40e7e8 <__pow5mult>
  40d1aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40d1ac:	2b01      	cmp	r3, #1
  40d1ae:	4680      	mov	r8, r0
  40d1b0:	f340 8254 	ble.w	40d65c <_dtoa_r+0x95c>
  40d1b4:	2300      	movs	r3, #0
  40d1b6:	930c      	str	r3, [sp, #48]	; 0x30
  40d1b8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40d1bc:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  40d1c0:	6918      	ldr	r0, [r3, #16]
  40d1c2:	f001 fa25 	bl	40e610 <__hi0bits>
  40d1c6:	f1c0 0020 	rsb	r0, r0, #32
  40d1ca:	e010      	b.n	40d1ee <_dtoa_r+0x4ee>
  40d1cc:	f1c3 0520 	rsb	r5, r3, #32
  40d1d0:	fa0a f005 	lsl.w	r0, sl, r5
  40d1d4:	e674      	b.n	40cec0 <_dtoa_r+0x1c0>
  40d1d6:	900e      	str	r0, [sp, #56]	; 0x38
  40d1d8:	e63c      	b.n	40ce54 <_dtoa_r+0x154>
  40d1da:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40d1dc:	2b01      	cmp	r3, #1
  40d1de:	f340 8287 	ble.w	40d6f0 <_dtoa_r+0x9f0>
  40d1e2:	2300      	movs	r3, #0
  40d1e4:	930c      	str	r3, [sp, #48]	; 0x30
  40d1e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40d1e8:	2001      	movs	r0, #1
  40d1ea:	2b00      	cmp	r3, #0
  40d1ec:	d1e4      	bne.n	40d1b8 <_dtoa_r+0x4b8>
  40d1ee:	9a06      	ldr	r2, [sp, #24]
  40d1f0:	4410      	add	r0, r2
  40d1f2:	f010 001f 	ands.w	r0, r0, #31
  40d1f6:	f000 80a1 	beq.w	40d33c <_dtoa_r+0x63c>
  40d1fa:	f1c0 0320 	rsb	r3, r0, #32
  40d1fe:	2b04      	cmp	r3, #4
  40d200:	f340 849e 	ble.w	40db40 <_dtoa_r+0xe40>
  40d204:	9b08      	ldr	r3, [sp, #32]
  40d206:	f1c0 001c 	rsb	r0, r0, #28
  40d20a:	4403      	add	r3, r0
  40d20c:	9308      	str	r3, [sp, #32]
  40d20e:	4613      	mov	r3, r2
  40d210:	4403      	add	r3, r0
  40d212:	4405      	add	r5, r0
  40d214:	9306      	str	r3, [sp, #24]
  40d216:	9b08      	ldr	r3, [sp, #32]
  40d218:	2b00      	cmp	r3, #0
  40d21a:	dd05      	ble.n	40d228 <_dtoa_r+0x528>
  40d21c:	4649      	mov	r1, r9
  40d21e:	461a      	mov	r2, r3
  40d220:	4620      	mov	r0, r4
  40d222:	f001 fb31 	bl	40e888 <__lshift>
  40d226:	4681      	mov	r9, r0
  40d228:	9b06      	ldr	r3, [sp, #24]
  40d22a:	2b00      	cmp	r3, #0
  40d22c:	dd05      	ble.n	40d23a <_dtoa_r+0x53a>
  40d22e:	4641      	mov	r1, r8
  40d230:	461a      	mov	r2, r3
  40d232:	4620      	mov	r0, r4
  40d234:	f001 fb28 	bl	40e888 <__lshift>
  40d238:	4680      	mov	r8, r0
  40d23a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40d23c:	2b00      	cmp	r3, #0
  40d23e:	f040 8086 	bne.w	40d34e <_dtoa_r+0x64e>
  40d242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d244:	2b00      	cmp	r3, #0
  40d246:	f340 8266 	ble.w	40d716 <_dtoa_r+0xa16>
  40d24a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40d24c:	2b00      	cmp	r3, #0
  40d24e:	f000 8098 	beq.w	40d382 <_dtoa_r+0x682>
  40d252:	2d00      	cmp	r5, #0
  40d254:	dd05      	ble.n	40d262 <_dtoa_r+0x562>
  40d256:	4631      	mov	r1, r6
  40d258:	462a      	mov	r2, r5
  40d25a:	4620      	mov	r0, r4
  40d25c:	f001 fb14 	bl	40e888 <__lshift>
  40d260:	4606      	mov	r6, r0
  40d262:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40d264:	2b00      	cmp	r3, #0
  40d266:	f040 8337 	bne.w	40d8d8 <_dtoa_r+0xbd8>
  40d26a:	9606      	str	r6, [sp, #24]
  40d26c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d26e:	9a04      	ldr	r2, [sp, #16]
  40d270:	f8dd b018 	ldr.w	fp, [sp, #24]
  40d274:	3b01      	subs	r3, #1
  40d276:	18d3      	adds	r3, r2, r3
  40d278:	930b      	str	r3, [sp, #44]	; 0x2c
  40d27a:	f00a 0301 	and.w	r3, sl, #1
  40d27e:	930c      	str	r3, [sp, #48]	; 0x30
  40d280:	4617      	mov	r7, r2
  40d282:	46c2      	mov	sl, r8
  40d284:	4651      	mov	r1, sl
  40d286:	4648      	mov	r0, r9
  40d288:	f7ff fca4 	bl	40cbd4 <quorem>
  40d28c:	4631      	mov	r1, r6
  40d28e:	4605      	mov	r5, r0
  40d290:	4648      	mov	r0, r9
  40d292:	f001 fb4b 	bl	40e92c <__mcmp>
  40d296:	465a      	mov	r2, fp
  40d298:	900a      	str	r0, [sp, #40]	; 0x28
  40d29a:	4651      	mov	r1, sl
  40d29c:	4620      	mov	r0, r4
  40d29e:	f001 fb61 	bl	40e964 <__mdiff>
  40d2a2:	68c2      	ldr	r2, [r0, #12]
  40d2a4:	4680      	mov	r8, r0
  40d2a6:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40d2aa:	2a00      	cmp	r2, #0
  40d2ac:	f040 822b 	bne.w	40d706 <_dtoa_r+0xa06>
  40d2b0:	4601      	mov	r1, r0
  40d2b2:	4648      	mov	r0, r9
  40d2b4:	9308      	str	r3, [sp, #32]
  40d2b6:	f001 fb39 	bl	40e92c <__mcmp>
  40d2ba:	4641      	mov	r1, r8
  40d2bc:	9006      	str	r0, [sp, #24]
  40d2be:	4620      	mov	r0, r4
  40d2c0:	f001 f95c 	bl	40e57c <_Bfree>
  40d2c4:	9a06      	ldr	r2, [sp, #24]
  40d2c6:	9b08      	ldr	r3, [sp, #32]
  40d2c8:	b932      	cbnz	r2, 40d2d8 <_dtoa_r+0x5d8>
  40d2ca:	9924      	ldr	r1, [sp, #144]	; 0x90
  40d2cc:	b921      	cbnz	r1, 40d2d8 <_dtoa_r+0x5d8>
  40d2ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40d2d0:	2a00      	cmp	r2, #0
  40d2d2:	f000 83ef 	beq.w	40dab4 <_dtoa_r+0xdb4>
  40d2d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40d2d8:	990a      	ldr	r1, [sp, #40]	; 0x28
  40d2da:	2900      	cmp	r1, #0
  40d2dc:	f2c0 829f 	blt.w	40d81e <_dtoa_r+0xb1e>
  40d2e0:	d105      	bne.n	40d2ee <_dtoa_r+0x5ee>
  40d2e2:	9924      	ldr	r1, [sp, #144]	; 0x90
  40d2e4:	b919      	cbnz	r1, 40d2ee <_dtoa_r+0x5ee>
  40d2e6:	990c      	ldr	r1, [sp, #48]	; 0x30
  40d2e8:	2900      	cmp	r1, #0
  40d2ea:	f000 8298 	beq.w	40d81e <_dtoa_r+0xb1e>
  40d2ee:	2a00      	cmp	r2, #0
  40d2f0:	f300 8306 	bgt.w	40d900 <_dtoa_r+0xc00>
  40d2f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40d2f6:	703b      	strb	r3, [r7, #0]
  40d2f8:	f107 0801 	add.w	r8, r7, #1
  40d2fc:	4297      	cmp	r7, r2
  40d2fe:	4645      	mov	r5, r8
  40d300:	f000 830c 	beq.w	40d91c <_dtoa_r+0xc1c>
  40d304:	4649      	mov	r1, r9
  40d306:	2300      	movs	r3, #0
  40d308:	220a      	movs	r2, #10
  40d30a:	4620      	mov	r0, r4
  40d30c:	f001 f940 	bl	40e590 <__multadd>
  40d310:	455e      	cmp	r6, fp
  40d312:	4681      	mov	r9, r0
  40d314:	4631      	mov	r1, r6
  40d316:	f04f 0300 	mov.w	r3, #0
  40d31a:	f04f 020a 	mov.w	r2, #10
  40d31e:	4620      	mov	r0, r4
  40d320:	f000 81eb 	beq.w	40d6fa <_dtoa_r+0x9fa>
  40d324:	f001 f934 	bl	40e590 <__multadd>
  40d328:	4659      	mov	r1, fp
  40d32a:	4606      	mov	r6, r0
  40d32c:	2300      	movs	r3, #0
  40d32e:	220a      	movs	r2, #10
  40d330:	4620      	mov	r0, r4
  40d332:	f001 f92d 	bl	40e590 <__multadd>
  40d336:	4647      	mov	r7, r8
  40d338:	4683      	mov	fp, r0
  40d33a:	e7a3      	b.n	40d284 <_dtoa_r+0x584>
  40d33c:	201c      	movs	r0, #28
  40d33e:	9b08      	ldr	r3, [sp, #32]
  40d340:	4403      	add	r3, r0
  40d342:	9308      	str	r3, [sp, #32]
  40d344:	9b06      	ldr	r3, [sp, #24]
  40d346:	4403      	add	r3, r0
  40d348:	4405      	add	r5, r0
  40d34a:	9306      	str	r3, [sp, #24]
  40d34c:	e763      	b.n	40d216 <_dtoa_r+0x516>
  40d34e:	4641      	mov	r1, r8
  40d350:	4648      	mov	r0, r9
  40d352:	f001 faeb 	bl	40e92c <__mcmp>
  40d356:	2800      	cmp	r0, #0
  40d358:	f6bf af73 	bge.w	40d242 <_dtoa_r+0x542>
  40d35c:	9f02      	ldr	r7, [sp, #8]
  40d35e:	4649      	mov	r1, r9
  40d360:	2300      	movs	r3, #0
  40d362:	220a      	movs	r2, #10
  40d364:	4620      	mov	r0, r4
  40d366:	3f01      	subs	r7, #1
  40d368:	9702      	str	r7, [sp, #8]
  40d36a:	f001 f911 	bl	40e590 <__multadd>
  40d36e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40d370:	4681      	mov	r9, r0
  40d372:	2b00      	cmp	r3, #0
  40d374:	f040 83b6 	bne.w	40dae4 <_dtoa_r+0xde4>
  40d378:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40d37a:	2b00      	cmp	r3, #0
  40d37c:	f340 83bf 	ble.w	40dafe <_dtoa_r+0xdfe>
  40d380:	930a      	str	r3, [sp, #40]	; 0x28
  40d382:	f8dd b010 	ldr.w	fp, [sp, #16]
  40d386:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40d388:	465d      	mov	r5, fp
  40d38a:	e002      	b.n	40d392 <_dtoa_r+0x692>
  40d38c:	f001 f900 	bl	40e590 <__multadd>
  40d390:	4681      	mov	r9, r0
  40d392:	4641      	mov	r1, r8
  40d394:	4648      	mov	r0, r9
  40d396:	f7ff fc1d 	bl	40cbd4 <quorem>
  40d39a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40d39e:	f805 ab01 	strb.w	sl, [r5], #1
  40d3a2:	eba5 030b 	sub.w	r3, r5, fp
  40d3a6:	42bb      	cmp	r3, r7
  40d3a8:	f04f 020a 	mov.w	r2, #10
  40d3ac:	f04f 0300 	mov.w	r3, #0
  40d3b0:	4649      	mov	r1, r9
  40d3b2:	4620      	mov	r0, r4
  40d3b4:	dbea      	blt.n	40d38c <_dtoa_r+0x68c>
  40d3b6:	9b04      	ldr	r3, [sp, #16]
  40d3b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40d3ba:	2a01      	cmp	r2, #1
  40d3bc:	bfac      	ite	ge
  40d3be:	189b      	addge	r3, r3, r2
  40d3c0:	3301      	addlt	r3, #1
  40d3c2:	461d      	mov	r5, r3
  40d3c4:	f04f 0b00 	mov.w	fp, #0
  40d3c8:	4649      	mov	r1, r9
  40d3ca:	2201      	movs	r2, #1
  40d3cc:	4620      	mov	r0, r4
  40d3ce:	f001 fa5b 	bl	40e888 <__lshift>
  40d3d2:	4641      	mov	r1, r8
  40d3d4:	4681      	mov	r9, r0
  40d3d6:	f001 faa9 	bl	40e92c <__mcmp>
  40d3da:	2800      	cmp	r0, #0
  40d3dc:	f340 823d 	ble.w	40d85a <_dtoa_r+0xb5a>
  40d3e0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40d3e4:	9904      	ldr	r1, [sp, #16]
  40d3e6:	1e6b      	subs	r3, r5, #1
  40d3e8:	e004      	b.n	40d3f4 <_dtoa_r+0x6f4>
  40d3ea:	428b      	cmp	r3, r1
  40d3ec:	f000 81ae 	beq.w	40d74c <_dtoa_r+0xa4c>
  40d3f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40d3f4:	2a39      	cmp	r2, #57	; 0x39
  40d3f6:	f103 0501 	add.w	r5, r3, #1
  40d3fa:	d0f6      	beq.n	40d3ea <_dtoa_r+0x6ea>
  40d3fc:	3201      	adds	r2, #1
  40d3fe:	701a      	strb	r2, [r3, #0]
  40d400:	4641      	mov	r1, r8
  40d402:	4620      	mov	r0, r4
  40d404:	f001 f8ba 	bl	40e57c <_Bfree>
  40d408:	2e00      	cmp	r6, #0
  40d40a:	f43f ae3d 	beq.w	40d088 <_dtoa_r+0x388>
  40d40e:	f1bb 0f00 	cmp.w	fp, #0
  40d412:	d005      	beq.n	40d420 <_dtoa_r+0x720>
  40d414:	45b3      	cmp	fp, r6
  40d416:	d003      	beq.n	40d420 <_dtoa_r+0x720>
  40d418:	4659      	mov	r1, fp
  40d41a:	4620      	mov	r0, r4
  40d41c:	f001 f8ae 	bl	40e57c <_Bfree>
  40d420:	4631      	mov	r1, r6
  40d422:	4620      	mov	r0, r4
  40d424:	f001 f8aa 	bl	40e57c <_Bfree>
  40d428:	e62e      	b.n	40d088 <_dtoa_r+0x388>
  40d42a:	2300      	movs	r3, #0
  40d42c:	930b      	str	r3, [sp, #44]	; 0x2c
  40d42e:	9b02      	ldr	r3, [sp, #8]
  40d430:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40d432:	4413      	add	r3, r2
  40d434:	930f      	str	r3, [sp, #60]	; 0x3c
  40d436:	3301      	adds	r3, #1
  40d438:	2b01      	cmp	r3, #1
  40d43a:	461f      	mov	r7, r3
  40d43c:	461e      	mov	r6, r3
  40d43e:	930a      	str	r3, [sp, #40]	; 0x28
  40d440:	bfb8      	it	lt
  40d442:	2701      	movlt	r7, #1
  40d444:	2100      	movs	r1, #0
  40d446:	2f17      	cmp	r7, #23
  40d448:	6461      	str	r1, [r4, #68]	; 0x44
  40d44a:	d90a      	bls.n	40d462 <_dtoa_r+0x762>
  40d44c:	2201      	movs	r2, #1
  40d44e:	2304      	movs	r3, #4
  40d450:	005b      	lsls	r3, r3, #1
  40d452:	f103 0014 	add.w	r0, r3, #20
  40d456:	4287      	cmp	r7, r0
  40d458:	4611      	mov	r1, r2
  40d45a:	f102 0201 	add.w	r2, r2, #1
  40d45e:	d2f7      	bcs.n	40d450 <_dtoa_r+0x750>
  40d460:	6461      	str	r1, [r4, #68]	; 0x44
  40d462:	4620      	mov	r0, r4
  40d464:	f001 f864 	bl	40e530 <_Balloc>
  40d468:	2e0e      	cmp	r6, #14
  40d46a:	9004      	str	r0, [sp, #16]
  40d46c:	6420      	str	r0, [r4, #64]	; 0x40
  40d46e:	f63f ad41 	bhi.w	40cef4 <_dtoa_r+0x1f4>
  40d472:	2d00      	cmp	r5, #0
  40d474:	f43f ad3e 	beq.w	40cef4 <_dtoa_r+0x1f4>
  40d478:	9902      	ldr	r1, [sp, #8]
  40d47a:	2900      	cmp	r1, #0
  40d47c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  40d480:	f340 8202 	ble.w	40d888 <_dtoa_r+0xb88>
  40d484:	4bb8      	ldr	r3, [pc, #736]	; (40d768 <_dtoa_r+0xa68>)
  40d486:	f001 020f 	and.w	r2, r1, #15
  40d48a:	110d      	asrs	r5, r1, #4
  40d48c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40d490:	06e9      	lsls	r1, r5, #27
  40d492:	e9d3 6700 	ldrd	r6, r7, [r3]
  40d496:	f140 81ae 	bpl.w	40d7f6 <_dtoa_r+0xaf6>
  40d49a:	4bb4      	ldr	r3, [pc, #720]	; (40d76c <_dtoa_r+0xa6c>)
  40d49c:	4650      	mov	r0, sl
  40d49e:	4659      	mov	r1, fp
  40d4a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40d4a4:	f7fd fb6a 	bl	40ab7c <__aeabi_ddiv>
  40d4a8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40d4ac:	f005 050f 	and.w	r5, r5, #15
  40d4b0:	f04f 0a03 	mov.w	sl, #3
  40d4b4:	b18d      	cbz	r5, 40d4da <_dtoa_r+0x7da>
  40d4b6:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 40d76c <_dtoa_r+0xa6c>
  40d4ba:	07ea      	lsls	r2, r5, #31
  40d4bc:	d509      	bpl.n	40d4d2 <_dtoa_r+0x7d2>
  40d4be:	4630      	mov	r0, r6
  40d4c0:	4639      	mov	r1, r7
  40d4c2:	e9d8 2300 	ldrd	r2, r3, [r8]
  40d4c6:	f7fd fa2f 	bl	40a928 <__aeabi_dmul>
  40d4ca:	f10a 0a01 	add.w	sl, sl, #1
  40d4ce:	4606      	mov	r6, r0
  40d4d0:	460f      	mov	r7, r1
  40d4d2:	106d      	asrs	r5, r5, #1
  40d4d4:	f108 0808 	add.w	r8, r8, #8
  40d4d8:	d1ef      	bne.n	40d4ba <_dtoa_r+0x7ba>
  40d4da:	463b      	mov	r3, r7
  40d4dc:	4632      	mov	r2, r6
  40d4de:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40d4e2:	f7fd fb4b 	bl	40ab7c <__aeabi_ddiv>
  40d4e6:	4607      	mov	r7, r0
  40d4e8:	4688      	mov	r8, r1
  40d4ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40d4ec:	b143      	cbz	r3, 40d500 <_dtoa_r+0x800>
  40d4ee:	2200      	movs	r2, #0
  40d4f0:	4b9f      	ldr	r3, [pc, #636]	; (40d770 <_dtoa_r+0xa70>)
  40d4f2:	4638      	mov	r0, r7
  40d4f4:	4641      	mov	r1, r8
  40d4f6:	f7fd fc89 	bl	40ae0c <__aeabi_dcmplt>
  40d4fa:	2800      	cmp	r0, #0
  40d4fc:	f040 8286 	bne.w	40da0c <_dtoa_r+0xd0c>
  40d500:	4650      	mov	r0, sl
  40d502:	f7fd f9ab 	bl	40a85c <__aeabi_i2d>
  40d506:	463a      	mov	r2, r7
  40d508:	4643      	mov	r3, r8
  40d50a:	f7fd fa0d 	bl	40a928 <__aeabi_dmul>
  40d50e:	4b99      	ldr	r3, [pc, #612]	; (40d774 <_dtoa_r+0xa74>)
  40d510:	2200      	movs	r2, #0
  40d512:	f7fd f857 	bl	40a5c4 <__adddf3>
  40d516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d518:	4605      	mov	r5, r0
  40d51a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40d51e:	2b00      	cmp	r3, #0
  40d520:	f000 813e 	beq.w	40d7a0 <_dtoa_r+0xaa0>
  40d524:	9b02      	ldr	r3, [sp, #8]
  40d526:	9315      	str	r3, [sp, #84]	; 0x54
  40d528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d52a:	9312      	str	r3, [sp, #72]	; 0x48
  40d52c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40d52e:	2b00      	cmp	r3, #0
  40d530:	f000 81fa 	beq.w	40d928 <_dtoa_r+0xc28>
  40d534:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40d536:	4b8c      	ldr	r3, [pc, #560]	; (40d768 <_dtoa_r+0xa68>)
  40d538:	498f      	ldr	r1, [pc, #572]	; (40d778 <_dtoa_r+0xa78>)
  40d53a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40d53e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40d542:	2000      	movs	r0, #0
  40d544:	f7fd fb1a 	bl	40ab7c <__aeabi_ddiv>
  40d548:	462a      	mov	r2, r5
  40d54a:	4633      	mov	r3, r6
  40d54c:	f7fd f838 	bl	40a5c0 <__aeabi_dsub>
  40d550:	4682      	mov	sl, r0
  40d552:	468b      	mov	fp, r1
  40d554:	4638      	mov	r0, r7
  40d556:	4641      	mov	r1, r8
  40d558:	f7fd fc96 	bl	40ae88 <__aeabi_d2iz>
  40d55c:	4605      	mov	r5, r0
  40d55e:	f7fd f97d 	bl	40a85c <__aeabi_i2d>
  40d562:	4602      	mov	r2, r0
  40d564:	460b      	mov	r3, r1
  40d566:	4638      	mov	r0, r7
  40d568:	4641      	mov	r1, r8
  40d56a:	f7fd f829 	bl	40a5c0 <__aeabi_dsub>
  40d56e:	3530      	adds	r5, #48	; 0x30
  40d570:	fa5f f885 	uxtb.w	r8, r5
  40d574:	9d04      	ldr	r5, [sp, #16]
  40d576:	4606      	mov	r6, r0
  40d578:	460f      	mov	r7, r1
  40d57a:	f885 8000 	strb.w	r8, [r5]
  40d57e:	4602      	mov	r2, r0
  40d580:	460b      	mov	r3, r1
  40d582:	4650      	mov	r0, sl
  40d584:	4659      	mov	r1, fp
  40d586:	3501      	adds	r5, #1
  40d588:	f7fd fc5e 	bl	40ae48 <__aeabi_dcmpgt>
  40d58c:	2800      	cmp	r0, #0
  40d58e:	d154      	bne.n	40d63a <_dtoa_r+0x93a>
  40d590:	4632      	mov	r2, r6
  40d592:	463b      	mov	r3, r7
  40d594:	2000      	movs	r0, #0
  40d596:	4976      	ldr	r1, [pc, #472]	; (40d770 <_dtoa_r+0xa70>)
  40d598:	f7fd f812 	bl	40a5c0 <__aeabi_dsub>
  40d59c:	4602      	mov	r2, r0
  40d59e:	460b      	mov	r3, r1
  40d5a0:	4650      	mov	r0, sl
  40d5a2:	4659      	mov	r1, fp
  40d5a4:	f7fd fc50 	bl	40ae48 <__aeabi_dcmpgt>
  40d5a8:	2800      	cmp	r0, #0
  40d5aa:	f040 8270 	bne.w	40da8e <_dtoa_r+0xd8e>
  40d5ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40d5b0:	2a01      	cmp	r2, #1
  40d5b2:	f000 8111 	beq.w	40d7d8 <_dtoa_r+0xad8>
  40d5b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40d5b8:	9a04      	ldr	r2, [sp, #16]
  40d5ba:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40d5be:	4413      	add	r3, r2
  40d5c0:	4699      	mov	r9, r3
  40d5c2:	e00d      	b.n	40d5e0 <_dtoa_r+0x8e0>
  40d5c4:	2000      	movs	r0, #0
  40d5c6:	496a      	ldr	r1, [pc, #424]	; (40d770 <_dtoa_r+0xa70>)
  40d5c8:	f7fc fffa 	bl	40a5c0 <__aeabi_dsub>
  40d5cc:	4652      	mov	r2, sl
  40d5ce:	465b      	mov	r3, fp
  40d5d0:	f7fd fc1c 	bl	40ae0c <__aeabi_dcmplt>
  40d5d4:	2800      	cmp	r0, #0
  40d5d6:	f040 8258 	bne.w	40da8a <_dtoa_r+0xd8a>
  40d5da:	454d      	cmp	r5, r9
  40d5dc:	f000 80fa 	beq.w	40d7d4 <_dtoa_r+0xad4>
  40d5e0:	4650      	mov	r0, sl
  40d5e2:	4659      	mov	r1, fp
  40d5e4:	2200      	movs	r2, #0
  40d5e6:	4b65      	ldr	r3, [pc, #404]	; (40d77c <_dtoa_r+0xa7c>)
  40d5e8:	f7fd f99e 	bl	40a928 <__aeabi_dmul>
  40d5ec:	2200      	movs	r2, #0
  40d5ee:	4b63      	ldr	r3, [pc, #396]	; (40d77c <_dtoa_r+0xa7c>)
  40d5f0:	4682      	mov	sl, r0
  40d5f2:	468b      	mov	fp, r1
  40d5f4:	4630      	mov	r0, r6
  40d5f6:	4639      	mov	r1, r7
  40d5f8:	f7fd f996 	bl	40a928 <__aeabi_dmul>
  40d5fc:	460f      	mov	r7, r1
  40d5fe:	4606      	mov	r6, r0
  40d600:	f7fd fc42 	bl	40ae88 <__aeabi_d2iz>
  40d604:	4680      	mov	r8, r0
  40d606:	f7fd f929 	bl	40a85c <__aeabi_i2d>
  40d60a:	4602      	mov	r2, r0
  40d60c:	460b      	mov	r3, r1
  40d60e:	4630      	mov	r0, r6
  40d610:	4639      	mov	r1, r7
  40d612:	f7fc ffd5 	bl	40a5c0 <__aeabi_dsub>
  40d616:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40d61a:	fa5f f888 	uxtb.w	r8, r8
  40d61e:	4652      	mov	r2, sl
  40d620:	465b      	mov	r3, fp
  40d622:	f805 8b01 	strb.w	r8, [r5], #1
  40d626:	4606      	mov	r6, r0
  40d628:	460f      	mov	r7, r1
  40d62a:	f7fd fbef 	bl	40ae0c <__aeabi_dcmplt>
  40d62e:	4632      	mov	r2, r6
  40d630:	463b      	mov	r3, r7
  40d632:	2800      	cmp	r0, #0
  40d634:	d0c6      	beq.n	40d5c4 <_dtoa_r+0x8c4>
  40d636:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40d63a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40d63c:	9302      	str	r3, [sp, #8]
  40d63e:	e523      	b.n	40d088 <_dtoa_r+0x388>
  40d640:	2300      	movs	r3, #0
  40d642:	930b      	str	r3, [sp, #44]	; 0x2c
  40d644:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40d646:	2b00      	cmp	r3, #0
  40d648:	f340 80dc 	ble.w	40d804 <_dtoa_r+0xb04>
  40d64c:	461f      	mov	r7, r3
  40d64e:	461e      	mov	r6, r3
  40d650:	930f      	str	r3, [sp, #60]	; 0x3c
  40d652:	930a      	str	r3, [sp, #40]	; 0x28
  40d654:	e6f6      	b.n	40d444 <_dtoa_r+0x744>
  40d656:	2301      	movs	r3, #1
  40d658:	930b      	str	r3, [sp, #44]	; 0x2c
  40d65a:	e7f3      	b.n	40d644 <_dtoa_r+0x944>
  40d65c:	f1ba 0f00 	cmp.w	sl, #0
  40d660:	f47f ada8 	bne.w	40d1b4 <_dtoa_r+0x4b4>
  40d664:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40d668:	2b00      	cmp	r3, #0
  40d66a:	f47f adba 	bne.w	40d1e2 <_dtoa_r+0x4e2>
  40d66e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40d672:	0d3f      	lsrs	r7, r7, #20
  40d674:	053f      	lsls	r7, r7, #20
  40d676:	2f00      	cmp	r7, #0
  40d678:	f000 820d 	beq.w	40da96 <_dtoa_r+0xd96>
  40d67c:	9b08      	ldr	r3, [sp, #32]
  40d67e:	3301      	adds	r3, #1
  40d680:	9308      	str	r3, [sp, #32]
  40d682:	9b06      	ldr	r3, [sp, #24]
  40d684:	3301      	adds	r3, #1
  40d686:	9306      	str	r3, [sp, #24]
  40d688:	2301      	movs	r3, #1
  40d68a:	930c      	str	r3, [sp, #48]	; 0x30
  40d68c:	e5ab      	b.n	40d1e6 <_dtoa_r+0x4e6>
  40d68e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d690:	2b00      	cmp	r3, #0
  40d692:	f73f ac42 	bgt.w	40cf1a <_dtoa_r+0x21a>
  40d696:	f040 8221 	bne.w	40dadc <_dtoa_r+0xddc>
  40d69a:	2200      	movs	r2, #0
  40d69c:	4b38      	ldr	r3, [pc, #224]	; (40d780 <_dtoa_r+0xa80>)
  40d69e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40d6a2:	f7fd f941 	bl	40a928 <__aeabi_dmul>
  40d6a6:	4652      	mov	r2, sl
  40d6a8:	465b      	mov	r3, fp
  40d6aa:	f7fd fbc3 	bl	40ae34 <__aeabi_dcmpge>
  40d6ae:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  40d6b2:	4646      	mov	r6, r8
  40d6b4:	2800      	cmp	r0, #0
  40d6b6:	d041      	beq.n	40d73c <_dtoa_r+0xa3c>
  40d6b8:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40d6ba:	9d04      	ldr	r5, [sp, #16]
  40d6bc:	43db      	mvns	r3, r3
  40d6be:	9302      	str	r3, [sp, #8]
  40d6c0:	4641      	mov	r1, r8
  40d6c2:	4620      	mov	r0, r4
  40d6c4:	f000 ff5a 	bl	40e57c <_Bfree>
  40d6c8:	2e00      	cmp	r6, #0
  40d6ca:	f43f acdd 	beq.w	40d088 <_dtoa_r+0x388>
  40d6ce:	e6a7      	b.n	40d420 <_dtoa_r+0x720>
  40d6d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40d6d2:	4649      	mov	r1, r9
  40d6d4:	4620      	mov	r0, r4
  40d6d6:	f001 f887 	bl	40e7e8 <__pow5mult>
  40d6da:	4681      	mov	r9, r0
  40d6dc:	e558      	b.n	40d190 <_dtoa_r+0x490>
  40d6de:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40d6e0:	2a00      	cmp	r2, #0
  40d6e2:	f000 8187 	beq.w	40d9f4 <_dtoa_r+0xcf4>
  40d6e6:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40d6ea:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40d6ec:	9d08      	ldr	r5, [sp, #32]
  40d6ee:	e4f2      	b.n	40d0d6 <_dtoa_r+0x3d6>
  40d6f0:	f1ba 0f00 	cmp.w	sl, #0
  40d6f4:	f47f ad75 	bne.w	40d1e2 <_dtoa_r+0x4e2>
  40d6f8:	e7b4      	b.n	40d664 <_dtoa_r+0x964>
  40d6fa:	f000 ff49 	bl	40e590 <__multadd>
  40d6fe:	4647      	mov	r7, r8
  40d700:	4606      	mov	r6, r0
  40d702:	4683      	mov	fp, r0
  40d704:	e5be      	b.n	40d284 <_dtoa_r+0x584>
  40d706:	4601      	mov	r1, r0
  40d708:	4620      	mov	r0, r4
  40d70a:	9306      	str	r3, [sp, #24]
  40d70c:	f000 ff36 	bl	40e57c <_Bfree>
  40d710:	2201      	movs	r2, #1
  40d712:	9b06      	ldr	r3, [sp, #24]
  40d714:	e5e0      	b.n	40d2d8 <_dtoa_r+0x5d8>
  40d716:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40d718:	2b02      	cmp	r3, #2
  40d71a:	f77f ad96 	ble.w	40d24a <_dtoa_r+0x54a>
  40d71e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d720:	2b00      	cmp	r3, #0
  40d722:	d1c9      	bne.n	40d6b8 <_dtoa_r+0x9b8>
  40d724:	4641      	mov	r1, r8
  40d726:	2205      	movs	r2, #5
  40d728:	4620      	mov	r0, r4
  40d72a:	f000 ff31 	bl	40e590 <__multadd>
  40d72e:	4601      	mov	r1, r0
  40d730:	4680      	mov	r8, r0
  40d732:	4648      	mov	r0, r9
  40d734:	f001 f8fa 	bl	40e92c <__mcmp>
  40d738:	2800      	cmp	r0, #0
  40d73a:	ddbd      	ble.n	40d6b8 <_dtoa_r+0x9b8>
  40d73c:	9a02      	ldr	r2, [sp, #8]
  40d73e:	9904      	ldr	r1, [sp, #16]
  40d740:	2331      	movs	r3, #49	; 0x31
  40d742:	3201      	adds	r2, #1
  40d744:	9202      	str	r2, [sp, #8]
  40d746:	700b      	strb	r3, [r1, #0]
  40d748:	1c4d      	adds	r5, r1, #1
  40d74a:	e7b9      	b.n	40d6c0 <_dtoa_r+0x9c0>
  40d74c:	9a02      	ldr	r2, [sp, #8]
  40d74e:	3201      	adds	r2, #1
  40d750:	9202      	str	r2, [sp, #8]
  40d752:	9a04      	ldr	r2, [sp, #16]
  40d754:	2331      	movs	r3, #49	; 0x31
  40d756:	7013      	strb	r3, [r2, #0]
  40d758:	e652      	b.n	40d400 <_dtoa_r+0x700>
  40d75a:	2301      	movs	r3, #1
  40d75c:	930b      	str	r3, [sp, #44]	; 0x2c
  40d75e:	e666      	b.n	40d42e <_dtoa_r+0x72e>
  40d760:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  40d764:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40d766:	e48f      	b.n	40d088 <_dtoa_r+0x388>
  40d768:	00411468 	.word	0x00411468
  40d76c:	00411440 	.word	0x00411440
  40d770:	3ff00000 	.word	0x3ff00000
  40d774:	401c0000 	.word	0x401c0000
  40d778:	3fe00000 	.word	0x3fe00000
  40d77c:	40240000 	.word	0x40240000
  40d780:	40140000 	.word	0x40140000
  40d784:	4650      	mov	r0, sl
  40d786:	f7fd f869 	bl	40a85c <__aeabi_i2d>
  40d78a:	463a      	mov	r2, r7
  40d78c:	4643      	mov	r3, r8
  40d78e:	f7fd f8cb 	bl	40a928 <__aeabi_dmul>
  40d792:	2200      	movs	r2, #0
  40d794:	4bc1      	ldr	r3, [pc, #772]	; (40da9c <_dtoa_r+0xd9c>)
  40d796:	f7fc ff15 	bl	40a5c4 <__adddf3>
  40d79a:	4605      	mov	r5, r0
  40d79c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40d7a0:	4641      	mov	r1, r8
  40d7a2:	2200      	movs	r2, #0
  40d7a4:	4bbe      	ldr	r3, [pc, #760]	; (40daa0 <_dtoa_r+0xda0>)
  40d7a6:	4638      	mov	r0, r7
  40d7a8:	f7fc ff0a 	bl	40a5c0 <__aeabi_dsub>
  40d7ac:	462a      	mov	r2, r5
  40d7ae:	4633      	mov	r3, r6
  40d7b0:	4682      	mov	sl, r0
  40d7b2:	468b      	mov	fp, r1
  40d7b4:	f7fd fb48 	bl	40ae48 <__aeabi_dcmpgt>
  40d7b8:	4680      	mov	r8, r0
  40d7ba:	2800      	cmp	r0, #0
  40d7bc:	f040 8110 	bne.w	40d9e0 <_dtoa_r+0xce0>
  40d7c0:	462a      	mov	r2, r5
  40d7c2:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  40d7c6:	4650      	mov	r0, sl
  40d7c8:	4659      	mov	r1, fp
  40d7ca:	f7fd fb1f 	bl	40ae0c <__aeabi_dcmplt>
  40d7ce:	b118      	cbz	r0, 40d7d8 <_dtoa_r+0xad8>
  40d7d0:	4646      	mov	r6, r8
  40d7d2:	e771      	b.n	40d6b8 <_dtoa_r+0x9b8>
  40d7d4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40d7d8:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40d7dc:	f7ff bb8a 	b.w	40cef4 <_dtoa_r+0x1f4>
  40d7e0:	9804      	ldr	r0, [sp, #16]
  40d7e2:	f7ff babb 	b.w	40cd5c <_dtoa_r+0x5c>
  40d7e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40d7e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40d7ea:	970c      	str	r7, [sp, #48]	; 0x30
  40d7ec:	1afb      	subs	r3, r7, r3
  40d7ee:	441a      	add	r2, r3
  40d7f0:	920d      	str	r2, [sp, #52]	; 0x34
  40d7f2:	2700      	movs	r7, #0
  40d7f4:	e469      	b.n	40d0ca <_dtoa_r+0x3ca>
  40d7f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40d7fa:	f04f 0a02 	mov.w	sl, #2
  40d7fe:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40d802:	e657      	b.n	40d4b4 <_dtoa_r+0x7b4>
  40d804:	2100      	movs	r1, #0
  40d806:	2301      	movs	r3, #1
  40d808:	6461      	str	r1, [r4, #68]	; 0x44
  40d80a:	4620      	mov	r0, r4
  40d80c:	9325      	str	r3, [sp, #148]	; 0x94
  40d80e:	f000 fe8f 	bl	40e530 <_Balloc>
  40d812:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40d814:	9004      	str	r0, [sp, #16]
  40d816:	6420      	str	r0, [r4, #64]	; 0x40
  40d818:	930a      	str	r3, [sp, #40]	; 0x28
  40d81a:	930f      	str	r3, [sp, #60]	; 0x3c
  40d81c:	e629      	b.n	40d472 <_dtoa_r+0x772>
  40d81e:	2a00      	cmp	r2, #0
  40d820:	46d0      	mov	r8, sl
  40d822:	f8cd b018 	str.w	fp, [sp, #24]
  40d826:	469a      	mov	sl, r3
  40d828:	dd11      	ble.n	40d84e <_dtoa_r+0xb4e>
  40d82a:	4649      	mov	r1, r9
  40d82c:	2201      	movs	r2, #1
  40d82e:	4620      	mov	r0, r4
  40d830:	f001 f82a 	bl	40e888 <__lshift>
  40d834:	4641      	mov	r1, r8
  40d836:	4681      	mov	r9, r0
  40d838:	f001 f878 	bl	40e92c <__mcmp>
  40d83c:	2800      	cmp	r0, #0
  40d83e:	f340 8146 	ble.w	40dace <_dtoa_r+0xdce>
  40d842:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40d846:	f000 8106 	beq.w	40da56 <_dtoa_r+0xd56>
  40d84a:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  40d84e:	46b3      	mov	fp, r6
  40d850:	f887 a000 	strb.w	sl, [r7]
  40d854:	1c7d      	adds	r5, r7, #1
  40d856:	9e06      	ldr	r6, [sp, #24]
  40d858:	e5d2      	b.n	40d400 <_dtoa_r+0x700>
  40d85a:	d104      	bne.n	40d866 <_dtoa_r+0xb66>
  40d85c:	f01a 0f01 	tst.w	sl, #1
  40d860:	d001      	beq.n	40d866 <_dtoa_r+0xb66>
  40d862:	e5bd      	b.n	40d3e0 <_dtoa_r+0x6e0>
  40d864:	4615      	mov	r5, r2
  40d866:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40d86a:	2b30      	cmp	r3, #48	; 0x30
  40d86c:	f105 32ff 	add.w	r2, r5, #4294967295
  40d870:	d0f8      	beq.n	40d864 <_dtoa_r+0xb64>
  40d872:	e5c5      	b.n	40d400 <_dtoa_r+0x700>
  40d874:	9904      	ldr	r1, [sp, #16]
  40d876:	2230      	movs	r2, #48	; 0x30
  40d878:	700a      	strb	r2, [r1, #0]
  40d87a:	9a02      	ldr	r2, [sp, #8]
  40d87c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40d880:	3201      	adds	r2, #1
  40d882:	9202      	str	r2, [sp, #8]
  40d884:	f7ff bbfc 	b.w	40d080 <_dtoa_r+0x380>
  40d888:	f000 80bb 	beq.w	40da02 <_dtoa_r+0xd02>
  40d88c:	9b02      	ldr	r3, [sp, #8]
  40d88e:	425d      	negs	r5, r3
  40d890:	4b84      	ldr	r3, [pc, #528]	; (40daa4 <_dtoa_r+0xda4>)
  40d892:	f005 020f 	and.w	r2, r5, #15
  40d896:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40d89a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40d89e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40d8a2:	f7fd f841 	bl	40a928 <__aeabi_dmul>
  40d8a6:	112d      	asrs	r5, r5, #4
  40d8a8:	4607      	mov	r7, r0
  40d8aa:	4688      	mov	r8, r1
  40d8ac:	f000 812c 	beq.w	40db08 <_dtoa_r+0xe08>
  40d8b0:	4e7d      	ldr	r6, [pc, #500]	; (40daa8 <_dtoa_r+0xda8>)
  40d8b2:	f04f 0a02 	mov.w	sl, #2
  40d8b6:	07eb      	lsls	r3, r5, #31
  40d8b8:	d509      	bpl.n	40d8ce <_dtoa_r+0xbce>
  40d8ba:	4638      	mov	r0, r7
  40d8bc:	4641      	mov	r1, r8
  40d8be:	e9d6 2300 	ldrd	r2, r3, [r6]
  40d8c2:	f7fd f831 	bl	40a928 <__aeabi_dmul>
  40d8c6:	f10a 0a01 	add.w	sl, sl, #1
  40d8ca:	4607      	mov	r7, r0
  40d8cc:	4688      	mov	r8, r1
  40d8ce:	106d      	asrs	r5, r5, #1
  40d8d0:	f106 0608 	add.w	r6, r6, #8
  40d8d4:	d1ef      	bne.n	40d8b6 <_dtoa_r+0xbb6>
  40d8d6:	e608      	b.n	40d4ea <_dtoa_r+0x7ea>
  40d8d8:	6871      	ldr	r1, [r6, #4]
  40d8da:	4620      	mov	r0, r4
  40d8dc:	f000 fe28 	bl	40e530 <_Balloc>
  40d8e0:	6933      	ldr	r3, [r6, #16]
  40d8e2:	3302      	adds	r3, #2
  40d8e4:	009a      	lsls	r2, r3, #2
  40d8e6:	4605      	mov	r5, r0
  40d8e8:	f106 010c 	add.w	r1, r6, #12
  40d8ec:	300c      	adds	r0, #12
  40d8ee:	f7fd fe25 	bl	40b53c <memcpy>
  40d8f2:	4629      	mov	r1, r5
  40d8f4:	2201      	movs	r2, #1
  40d8f6:	4620      	mov	r0, r4
  40d8f8:	f000 ffc6 	bl	40e888 <__lshift>
  40d8fc:	9006      	str	r0, [sp, #24]
  40d8fe:	e4b5      	b.n	40d26c <_dtoa_r+0x56c>
  40d900:	2b39      	cmp	r3, #57	; 0x39
  40d902:	f8cd b018 	str.w	fp, [sp, #24]
  40d906:	46d0      	mov	r8, sl
  40d908:	f000 80a5 	beq.w	40da56 <_dtoa_r+0xd56>
  40d90c:	f103 0a01 	add.w	sl, r3, #1
  40d910:	46b3      	mov	fp, r6
  40d912:	f887 a000 	strb.w	sl, [r7]
  40d916:	1c7d      	adds	r5, r7, #1
  40d918:	9e06      	ldr	r6, [sp, #24]
  40d91a:	e571      	b.n	40d400 <_dtoa_r+0x700>
  40d91c:	465a      	mov	r2, fp
  40d91e:	46d0      	mov	r8, sl
  40d920:	46b3      	mov	fp, r6
  40d922:	469a      	mov	sl, r3
  40d924:	4616      	mov	r6, r2
  40d926:	e54f      	b.n	40d3c8 <_dtoa_r+0x6c8>
  40d928:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40d92a:	495e      	ldr	r1, [pc, #376]	; (40daa4 <_dtoa_r+0xda4>)
  40d92c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  40d930:	462a      	mov	r2, r5
  40d932:	4633      	mov	r3, r6
  40d934:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  40d938:	f7fc fff6 	bl	40a928 <__aeabi_dmul>
  40d93c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  40d940:	4638      	mov	r0, r7
  40d942:	4641      	mov	r1, r8
  40d944:	f7fd faa0 	bl	40ae88 <__aeabi_d2iz>
  40d948:	4605      	mov	r5, r0
  40d94a:	f7fc ff87 	bl	40a85c <__aeabi_i2d>
  40d94e:	460b      	mov	r3, r1
  40d950:	4602      	mov	r2, r0
  40d952:	4641      	mov	r1, r8
  40d954:	4638      	mov	r0, r7
  40d956:	f7fc fe33 	bl	40a5c0 <__aeabi_dsub>
  40d95a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40d95c:	460f      	mov	r7, r1
  40d95e:	9904      	ldr	r1, [sp, #16]
  40d960:	3530      	adds	r5, #48	; 0x30
  40d962:	2b01      	cmp	r3, #1
  40d964:	700d      	strb	r5, [r1, #0]
  40d966:	4606      	mov	r6, r0
  40d968:	f101 0501 	add.w	r5, r1, #1
  40d96c:	d026      	beq.n	40d9bc <_dtoa_r+0xcbc>
  40d96e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40d970:	9a04      	ldr	r2, [sp, #16]
  40d972:	f8df b13c 	ldr.w	fp, [pc, #316]	; 40dab0 <_dtoa_r+0xdb0>
  40d976:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40d97a:	4413      	add	r3, r2
  40d97c:	f04f 0a00 	mov.w	sl, #0
  40d980:	4699      	mov	r9, r3
  40d982:	4652      	mov	r2, sl
  40d984:	465b      	mov	r3, fp
  40d986:	4630      	mov	r0, r6
  40d988:	4639      	mov	r1, r7
  40d98a:	f7fc ffcd 	bl	40a928 <__aeabi_dmul>
  40d98e:	460f      	mov	r7, r1
  40d990:	4606      	mov	r6, r0
  40d992:	f7fd fa79 	bl	40ae88 <__aeabi_d2iz>
  40d996:	4680      	mov	r8, r0
  40d998:	f7fc ff60 	bl	40a85c <__aeabi_i2d>
  40d99c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40d9a0:	4602      	mov	r2, r0
  40d9a2:	460b      	mov	r3, r1
  40d9a4:	4630      	mov	r0, r6
  40d9a6:	4639      	mov	r1, r7
  40d9a8:	f7fc fe0a 	bl	40a5c0 <__aeabi_dsub>
  40d9ac:	f805 8b01 	strb.w	r8, [r5], #1
  40d9b0:	454d      	cmp	r5, r9
  40d9b2:	4606      	mov	r6, r0
  40d9b4:	460f      	mov	r7, r1
  40d9b6:	d1e4      	bne.n	40d982 <_dtoa_r+0xc82>
  40d9b8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40d9bc:	4b3b      	ldr	r3, [pc, #236]	; (40daac <_dtoa_r+0xdac>)
  40d9be:	2200      	movs	r2, #0
  40d9c0:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40d9c4:	f7fc fdfe 	bl	40a5c4 <__adddf3>
  40d9c8:	4632      	mov	r2, r6
  40d9ca:	463b      	mov	r3, r7
  40d9cc:	f7fd fa1e 	bl	40ae0c <__aeabi_dcmplt>
  40d9d0:	2800      	cmp	r0, #0
  40d9d2:	d046      	beq.n	40da62 <_dtoa_r+0xd62>
  40d9d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40d9d6:	9302      	str	r3, [sp, #8]
  40d9d8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40d9dc:	f7ff bb43 	b.w	40d066 <_dtoa_r+0x366>
  40d9e0:	f04f 0800 	mov.w	r8, #0
  40d9e4:	4646      	mov	r6, r8
  40d9e6:	e6a9      	b.n	40d73c <_dtoa_r+0xa3c>
  40d9e8:	9b08      	ldr	r3, [sp, #32]
  40d9ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40d9ec:	1a9d      	subs	r5, r3, r2
  40d9ee:	2300      	movs	r3, #0
  40d9f0:	f7ff bb71 	b.w	40d0d6 <_dtoa_r+0x3d6>
  40d9f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40d9f6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40d9f8:	9d08      	ldr	r5, [sp, #32]
  40d9fa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40d9fe:	f7ff bb6a 	b.w	40d0d6 <_dtoa_r+0x3d6>
  40da02:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  40da06:	f04f 0a02 	mov.w	sl, #2
  40da0a:	e56e      	b.n	40d4ea <_dtoa_r+0x7ea>
  40da0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40da0e:	2b00      	cmp	r3, #0
  40da10:	f43f aeb8 	beq.w	40d784 <_dtoa_r+0xa84>
  40da14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40da16:	2b00      	cmp	r3, #0
  40da18:	f77f aede 	ble.w	40d7d8 <_dtoa_r+0xad8>
  40da1c:	2200      	movs	r2, #0
  40da1e:	4b24      	ldr	r3, [pc, #144]	; (40dab0 <_dtoa_r+0xdb0>)
  40da20:	4638      	mov	r0, r7
  40da22:	4641      	mov	r1, r8
  40da24:	f7fc ff80 	bl	40a928 <__aeabi_dmul>
  40da28:	4607      	mov	r7, r0
  40da2a:	4688      	mov	r8, r1
  40da2c:	f10a 0001 	add.w	r0, sl, #1
  40da30:	f7fc ff14 	bl	40a85c <__aeabi_i2d>
  40da34:	463a      	mov	r2, r7
  40da36:	4643      	mov	r3, r8
  40da38:	f7fc ff76 	bl	40a928 <__aeabi_dmul>
  40da3c:	2200      	movs	r2, #0
  40da3e:	4b17      	ldr	r3, [pc, #92]	; (40da9c <_dtoa_r+0xd9c>)
  40da40:	f7fc fdc0 	bl	40a5c4 <__adddf3>
  40da44:	9a02      	ldr	r2, [sp, #8]
  40da46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40da48:	9312      	str	r3, [sp, #72]	; 0x48
  40da4a:	3a01      	subs	r2, #1
  40da4c:	4605      	mov	r5, r0
  40da4e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40da52:	9215      	str	r2, [sp, #84]	; 0x54
  40da54:	e56a      	b.n	40d52c <_dtoa_r+0x82c>
  40da56:	2239      	movs	r2, #57	; 0x39
  40da58:	46b3      	mov	fp, r6
  40da5a:	703a      	strb	r2, [r7, #0]
  40da5c:	9e06      	ldr	r6, [sp, #24]
  40da5e:	1c7d      	adds	r5, r7, #1
  40da60:	e4c0      	b.n	40d3e4 <_dtoa_r+0x6e4>
  40da62:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40da66:	2000      	movs	r0, #0
  40da68:	4910      	ldr	r1, [pc, #64]	; (40daac <_dtoa_r+0xdac>)
  40da6a:	f7fc fda9 	bl	40a5c0 <__aeabi_dsub>
  40da6e:	4632      	mov	r2, r6
  40da70:	463b      	mov	r3, r7
  40da72:	f7fd f9e9 	bl	40ae48 <__aeabi_dcmpgt>
  40da76:	b908      	cbnz	r0, 40da7c <_dtoa_r+0xd7c>
  40da78:	e6ae      	b.n	40d7d8 <_dtoa_r+0xad8>
  40da7a:	4615      	mov	r5, r2
  40da7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40da80:	2b30      	cmp	r3, #48	; 0x30
  40da82:	f105 32ff 	add.w	r2, r5, #4294967295
  40da86:	d0f8      	beq.n	40da7a <_dtoa_r+0xd7a>
  40da88:	e5d7      	b.n	40d63a <_dtoa_r+0x93a>
  40da8a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40da8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40da90:	9302      	str	r3, [sp, #8]
  40da92:	f7ff bae8 	b.w	40d066 <_dtoa_r+0x366>
  40da96:	970c      	str	r7, [sp, #48]	; 0x30
  40da98:	f7ff bba5 	b.w	40d1e6 <_dtoa_r+0x4e6>
  40da9c:	401c0000 	.word	0x401c0000
  40daa0:	40140000 	.word	0x40140000
  40daa4:	00411468 	.word	0x00411468
  40daa8:	00411440 	.word	0x00411440
  40daac:	3fe00000 	.word	0x3fe00000
  40dab0:	40240000 	.word	0x40240000
  40dab4:	2b39      	cmp	r3, #57	; 0x39
  40dab6:	f8cd b018 	str.w	fp, [sp, #24]
  40daba:	46d0      	mov	r8, sl
  40dabc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40dac0:	469a      	mov	sl, r3
  40dac2:	d0c8      	beq.n	40da56 <_dtoa_r+0xd56>
  40dac4:	f1bb 0f00 	cmp.w	fp, #0
  40dac8:	f73f aebf 	bgt.w	40d84a <_dtoa_r+0xb4a>
  40dacc:	e6bf      	b.n	40d84e <_dtoa_r+0xb4e>
  40dace:	f47f aebe 	bne.w	40d84e <_dtoa_r+0xb4e>
  40dad2:	f01a 0f01 	tst.w	sl, #1
  40dad6:	f43f aeba 	beq.w	40d84e <_dtoa_r+0xb4e>
  40dada:	e6b2      	b.n	40d842 <_dtoa_r+0xb42>
  40dadc:	f04f 0800 	mov.w	r8, #0
  40dae0:	4646      	mov	r6, r8
  40dae2:	e5e9      	b.n	40d6b8 <_dtoa_r+0x9b8>
  40dae4:	4631      	mov	r1, r6
  40dae6:	2300      	movs	r3, #0
  40dae8:	220a      	movs	r2, #10
  40daea:	4620      	mov	r0, r4
  40daec:	f000 fd50 	bl	40e590 <__multadd>
  40daf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40daf2:	2b00      	cmp	r3, #0
  40daf4:	4606      	mov	r6, r0
  40daf6:	dd0a      	ble.n	40db0e <_dtoa_r+0xe0e>
  40daf8:	930a      	str	r3, [sp, #40]	; 0x28
  40dafa:	f7ff bbaa 	b.w	40d252 <_dtoa_r+0x552>
  40dafe:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40db00:	2b02      	cmp	r3, #2
  40db02:	dc23      	bgt.n	40db4c <_dtoa_r+0xe4c>
  40db04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40db06:	e43b      	b.n	40d380 <_dtoa_r+0x680>
  40db08:	f04f 0a02 	mov.w	sl, #2
  40db0c:	e4ed      	b.n	40d4ea <_dtoa_r+0x7ea>
  40db0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40db10:	2b02      	cmp	r3, #2
  40db12:	dc1b      	bgt.n	40db4c <_dtoa_r+0xe4c>
  40db14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40db16:	e7ef      	b.n	40daf8 <_dtoa_r+0xdf8>
  40db18:	2500      	movs	r5, #0
  40db1a:	6465      	str	r5, [r4, #68]	; 0x44
  40db1c:	4629      	mov	r1, r5
  40db1e:	4620      	mov	r0, r4
  40db20:	f000 fd06 	bl	40e530 <_Balloc>
  40db24:	f04f 33ff 	mov.w	r3, #4294967295
  40db28:	930a      	str	r3, [sp, #40]	; 0x28
  40db2a:	930f      	str	r3, [sp, #60]	; 0x3c
  40db2c:	2301      	movs	r3, #1
  40db2e:	9004      	str	r0, [sp, #16]
  40db30:	9525      	str	r5, [sp, #148]	; 0x94
  40db32:	6420      	str	r0, [r4, #64]	; 0x40
  40db34:	930b      	str	r3, [sp, #44]	; 0x2c
  40db36:	f7ff b9dd 	b.w	40cef4 <_dtoa_r+0x1f4>
  40db3a:	2501      	movs	r5, #1
  40db3c:	f7ff b9a5 	b.w	40ce8a <_dtoa_r+0x18a>
  40db40:	f43f ab69 	beq.w	40d216 <_dtoa_r+0x516>
  40db44:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  40db48:	f7ff bbf9 	b.w	40d33e <_dtoa_r+0x63e>
  40db4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40db4e:	930a      	str	r3, [sp, #40]	; 0x28
  40db50:	e5e5      	b.n	40d71e <_dtoa_r+0xa1e>
  40db52:	bf00      	nop

0040db54 <__libc_fini_array>:
  40db54:	b538      	push	{r3, r4, r5, lr}
  40db56:	4c0a      	ldr	r4, [pc, #40]	; (40db80 <__libc_fini_array+0x2c>)
  40db58:	4d0a      	ldr	r5, [pc, #40]	; (40db84 <__libc_fini_array+0x30>)
  40db5a:	1b64      	subs	r4, r4, r5
  40db5c:	10a4      	asrs	r4, r4, #2
  40db5e:	d00a      	beq.n	40db76 <__libc_fini_array+0x22>
  40db60:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40db64:	3b01      	subs	r3, #1
  40db66:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40db6a:	3c01      	subs	r4, #1
  40db6c:	f855 3904 	ldr.w	r3, [r5], #-4
  40db70:	4798      	blx	r3
  40db72:	2c00      	cmp	r4, #0
  40db74:	d1f9      	bne.n	40db6a <__libc_fini_array+0x16>
  40db76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40db7a:	f003 bd6b 	b.w	411654 <_fini>
  40db7e:	bf00      	nop
  40db80:	00411664 	.word	0x00411664
  40db84:	00411660 	.word	0x00411660

0040db88 <_malloc_trim_r>:
  40db88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40db8a:	4f24      	ldr	r7, [pc, #144]	; (40dc1c <_malloc_trim_r+0x94>)
  40db8c:	460c      	mov	r4, r1
  40db8e:	4606      	mov	r6, r0
  40db90:	f000 fcc2 	bl	40e518 <__malloc_lock>
  40db94:	68bb      	ldr	r3, [r7, #8]
  40db96:	685d      	ldr	r5, [r3, #4]
  40db98:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40db9c:	310f      	adds	r1, #15
  40db9e:	f025 0503 	bic.w	r5, r5, #3
  40dba2:	4429      	add	r1, r5
  40dba4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40dba8:	f021 010f 	bic.w	r1, r1, #15
  40dbac:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40dbb0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40dbb4:	db07      	blt.n	40dbc6 <_malloc_trim_r+0x3e>
  40dbb6:	2100      	movs	r1, #0
  40dbb8:	4630      	mov	r0, r6
  40dbba:	f001 f959 	bl	40ee70 <_sbrk_r>
  40dbbe:	68bb      	ldr	r3, [r7, #8]
  40dbc0:	442b      	add	r3, r5
  40dbc2:	4298      	cmp	r0, r3
  40dbc4:	d004      	beq.n	40dbd0 <_malloc_trim_r+0x48>
  40dbc6:	4630      	mov	r0, r6
  40dbc8:	f000 fcac 	bl	40e524 <__malloc_unlock>
  40dbcc:	2000      	movs	r0, #0
  40dbce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40dbd0:	4261      	negs	r1, r4
  40dbd2:	4630      	mov	r0, r6
  40dbd4:	f001 f94c 	bl	40ee70 <_sbrk_r>
  40dbd8:	3001      	adds	r0, #1
  40dbda:	d00d      	beq.n	40dbf8 <_malloc_trim_r+0x70>
  40dbdc:	4b10      	ldr	r3, [pc, #64]	; (40dc20 <_malloc_trim_r+0x98>)
  40dbde:	68ba      	ldr	r2, [r7, #8]
  40dbe0:	6819      	ldr	r1, [r3, #0]
  40dbe2:	1b2d      	subs	r5, r5, r4
  40dbe4:	f045 0501 	orr.w	r5, r5, #1
  40dbe8:	4630      	mov	r0, r6
  40dbea:	1b09      	subs	r1, r1, r4
  40dbec:	6055      	str	r5, [r2, #4]
  40dbee:	6019      	str	r1, [r3, #0]
  40dbf0:	f000 fc98 	bl	40e524 <__malloc_unlock>
  40dbf4:	2001      	movs	r0, #1
  40dbf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40dbf8:	2100      	movs	r1, #0
  40dbfa:	4630      	mov	r0, r6
  40dbfc:	f001 f938 	bl	40ee70 <_sbrk_r>
  40dc00:	68ba      	ldr	r2, [r7, #8]
  40dc02:	1a83      	subs	r3, r0, r2
  40dc04:	2b0f      	cmp	r3, #15
  40dc06:	ddde      	ble.n	40dbc6 <_malloc_trim_r+0x3e>
  40dc08:	4c06      	ldr	r4, [pc, #24]	; (40dc24 <_malloc_trim_r+0x9c>)
  40dc0a:	4905      	ldr	r1, [pc, #20]	; (40dc20 <_malloc_trim_r+0x98>)
  40dc0c:	6824      	ldr	r4, [r4, #0]
  40dc0e:	f043 0301 	orr.w	r3, r3, #1
  40dc12:	1b00      	subs	r0, r0, r4
  40dc14:	6053      	str	r3, [r2, #4]
  40dc16:	6008      	str	r0, [r1, #0]
  40dc18:	e7d5      	b.n	40dbc6 <_malloc_trim_r+0x3e>
  40dc1a:	bf00      	nop
  40dc1c:	20000660 	.word	0x20000660
  40dc20:	20000eb4 	.word	0x20000eb4
  40dc24:	20000a68 	.word	0x20000a68

0040dc28 <_free_r>:
  40dc28:	2900      	cmp	r1, #0
  40dc2a:	d044      	beq.n	40dcb6 <_free_r+0x8e>
  40dc2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40dc30:	460d      	mov	r5, r1
  40dc32:	4680      	mov	r8, r0
  40dc34:	f000 fc70 	bl	40e518 <__malloc_lock>
  40dc38:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40dc3c:	4969      	ldr	r1, [pc, #420]	; (40dde4 <_free_r+0x1bc>)
  40dc3e:	f027 0301 	bic.w	r3, r7, #1
  40dc42:	f1a5 0408 	sub.w	r4, r5, #8
  40dc46:	18e2      	adds	r2, r4, r3
  40dc48:	688e      	ldr	r6, [r1, #8]
  40dc4a:	6850      	ldr	r0, [r2, #4]
  40dc4c:	42b2      	cmp	r2, r6
  40dc4e:	f020 0003 	bic.w	r0, r0, #3
  40dc52:	d05e      	beq.n	40dd12 <_free_r+0xea>
  40dc54:	07fe      	lsls	r6, r7, #31
  40dc56:	6050      	str	r0, [r2, #4]
  40dc58:	d40b      	bmi.n	40dc72 <_free_r+0x4a>
  40dc5a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40dc5e:	1be4      	subs	r4, r4, r7
  40dc60:	f101 0e08 	add.w	lr, r1, #8
  40dc64:	68a5      	ldr	r5, [r4, #8]
  40dc66:	4575      	cmp	r5, lr
  40dc68:	443b      	add	r3, r7
  40dc6a:	d06d      	beq.n	40dd48 <_free_r+0x120>
  40dc6c:	68e7      	ldr	r7, [r4, #12]
  40dc6e:	60ef      	str	r7, [r5, #12]
  40dc70:	60bd      	str	r5, [r7, #8]
  40dc72:	1815      	adds	r5, r2, r0
  40dc74:	686d      	ldr	r5, [r5, #4]
  40dc76:	07ed      	lsls	r5, r5, #31
  40dc78:	d53e      	bpl.n	40dcf8 <_free_r+0xd0>
  40dc7a:	f043 0201 	orr.w	r2, r3, #1
  40dc7e:	6062      	str	r2, [r4, #4]
  40dc80:	50e3      	str	r3, [r4, r3]
  40dc82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40dc86:	d217      	bcs.n	40dcb8 <_free_r+0x90>
  40dc88:	08db      	lsrs	r3, r3, #3
  40dc8a:	1c58      	adds	r0, r3, #1
  40dc8c:	109a      	asrs	r2, r3, #2
  40dc8e:	684d      	ldr	r5, [r1, #4]
  40dc90:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40dc94:	60a7      	str	r7, [r4, #8]
  40dc96:	2301      	movs	r3, #1
  40dc98:	4093      	lsls	r3, r2
  40dc9a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40dc9e:	432b      	orrs	r3, r5
  40dca0:	3a08      	subs	r2, #8
  40dca2:	60e2      	str	r2, [r4, #12]
  40dca4:	604b      	str	r3, [r1, #4]
  40dca6:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40dcaa:	60fc      	str	r4, [r7, #12]
  40dcac:	4640      	mov	r0, r8
  40dcae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40dcb2:	f000 bc37 	b.w	40e524 <__malloc_unlock>
  40dcb6:	4770      	bx	lr
  40dcb8:	0a5a      	lsrs	r2, r3, #9
  40dcba:	2a04      	cmp	r2, #4
  40dcbc:	d852      	bhi.n	40dd64 <_free_r+0x13c>
  40dcbe:	099a      	lsrs	r2, r3, #6
  40dcc0:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40dcc4:	00ff      	lsls	r7, r7, #3
  40dcc6:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40dcca:	19c8      	adds	r0, r1, r7
  40dccc:	59ca      	ldr	r2, [r1, r7]
  40dcce:	3808      	subs	r0, #8
  40dcd0:	4290      	cmp	r0, r2
  40dcd2:	d04f      	beq.n	40dd74 <_free_r+0x14c>
  40dcd4:	6851      	ldr	r1, [r2, #4]
  40dcd6:	f021 0103 	bic.w	r1, r1, #3
  40dcda:	428b      	cmp	r3, r1
  40dcdc:	d232      	bcs.n	40dd44 <_free_r+0x11c>
  40dcde:	6892      	ldr	r2, [r2, #8]
  40dce0:	4290      	cmp	r0, r2
  40dce2:	d1f7      	bne.n	40dcd4 <_free_r+0xac>
  40dce4:	68c3      	ldr	r3, [r0, #12]
  40dce6:	60a0      	str	r0, [r4, #8]
  40dce8:	60e3      	str	r3, [r4, #12]
  40dcea:	609c      	str	r4, [r3, #8]
  40dcec:	60c4      	str	r4, [r0, #12]
  40dcee:	4640      	mov	r0, r8
  40dcf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40dcf4:	f000 bc16 	b.w	40e524 <__malloc_unlock>
  40dcf8:	6895      	ldr	r5, [r2, #8]
  40dcfa:	4f3b      	ldr	r7, [pc, #236]	; (40dde8 <_free_r+0x1c0>)
  40dcfc:	42bd      	cmp	r5, r7
  40dcfe:	4403      	add	r3, r0
  40dd00:	d040      	beq.n	40dd84 <_free_r+0x15c>
  40dd02:	68d0      	ldr	r0, [r2, #12]
  40dd04:	60e8      	str	r0, [r5, #12]
  40dd06:	f043 0201 	orr.w	r2, r3, #1
  40dd0a:	6085      	str	r5, [r0, #8]
  40dd0c:	6062      	str	r2, [r4, #4]
  40dd0e:	50e3      	str	r3, [r4, r3]
  40dd10:	e7b7      	b.n	40dc82 <_free_r+0x5a>
  40dd12:	07ff      	lsls	r7, r7, #31
  40dd14:	4403      	add	r3, r0
  40dd16:	d407      	bmi.n	40dd28 <_free_r+0x100>
  40dd18:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40dd1c:	1aa4      	subs	r4, r4, r2
  40dd1e:	4413      	add	r3, r2
  40dd20:	68a0      	ldr	r0, [r4, #8]
  40dd22:	68e2      	ldr	r2, [r4, #12]
  40dd24:	60c2      	str	r2, [r0, #12]
  40dd26:	6090      	str	r0, [r2, #8]
  40dd28:	4a30      	ldr	r2, [pc, #192]	; (40ddec <_free_r+0x1c4>)
  40dd2a:	6812      	ldr	r2, [r2, #0]
  40dd2c:	f043 0001 	orr.w	r0, r3, #1
  40dd30:	4293      	cmp	r3, r2
  40dd32:	6060      	str	r0, [r4, #4]
  40dd34:	608c      	str	r4, [r1, #8]
  40dd36:	d3b9      	bcc.n	40dcac <_free_r+0x84>
  40dd38:	4b2d      	ldr	r3, [pc, #180]	; (40ddf0 <_free_r+0x1c8>)
  40dd3a:	4640      	mov	r0, r8
  40dd3c:	6819      	ldr	r1, [r3, #0]
  40dd3e:	f7ff ff23 	bl	40db88 <_malloc_trim_r>
  40dd42:	e7b3      	b.n	40dcac <_free_r+0x84>
  40dd44:	4610      	mov	r0, r2
  40dd46:	e7cd      	b.n	40dce4 <_free_r+0xbc>
  40dd48:	1811      	adds	r1, r2, r0
  40dd4a:	6849      	ldr	r1, [r1, #4]
  40dd4c:	07c9      	lsls	r1, r1, #31
  40dd4e:	d444      	bmi.n	40ddda <_free_r+0x1b2>
  40dd50:	6891      	ldr	r1, [r2, #8]
  40dd52:	68d2      	ldr	r2, [r2, #12]
  40dd54:	60ca      	str	r2, [r1, #12]
  40dd56:	4403      	add	r3, r0
  40dd58:	f043 0001 	orr.w	r0, r3, #1
  40dd5c:	6091      	str	r1, [r2, #8]
  40dd5e:	6060      	str	r0, [r4, #4]
  40dd60:	50e3      	str	r3, [r4, r3]
  40dd62:	e7a3      	b.n	40dcac <_free_r+0x84>
  40dd64:	2a14      	cmp	r2, #20
  40dd66:	d816      	bhi.n	40dd96 <_free_r+0x16e>
  40dd68:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40dd6c:	00ff      	lsls	r7, r7, #3
  40dd6e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40dd72:	e7aa      	b.n	40dcca <_free_r+0xa2>
  40dd74:	10aa      	asrs	r2, r5, #2
  40dd76:	2301      	movs	r3, #1
  40dd78:	684d      	ldr	r5, [r1, #4]
  40dd7a:	4093      	lsls	r3, r2
  40dd7c:	432b      	orrs	r3, r5
  40dd7e:	604b      	str	r3, [r1, #4]
  40dd80:	4603      	mov	r3, r0
  40dd82:	e7b0      	b.n	40dce6 <_free_r+0xbe>
  40dd84:	f043 0201 	orr.w	r2, r3, #1
  40dd88:	614c      	str	r4, [r1, #20]
  40dd8a:	610c      	str	r4, [r1, #16]
  40dd8c:	60e5      	str	r5, [r4, #12]
  40dd8e:	60a5      	str	r5, [r4, #8]
  40dd90:	6062      	str	r2, [r4, #4]
  40dd92:	50e3      	str	r3, [r4, r3]
  40dd94:	e78a      	b.n	40dcac <_free_r+0x84>
  40dd96:	2a54      	cmp	r2, #84	; 0x54
  40dd98:	d806      	bhi.n	40dda8 <_free_r+0x180>
  40dd9a:	0b1a      	lsrs	r2, r3, #12
  40dd9c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40dda0:	00ff      	lsls	r7, r7, #3
  40dda2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40dda6:	e790      	b.n	40dcca <_free_r+0xa2>
  40dda8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40ddac:	d806      	bhi.n	40ddbc <_free_r+0x194>
  40ddae:	0bda      	lsrs	r2, r3, #15
  40ddb0:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40ddb4:	00ff      	lsls	r7, r7, #3
  40ddb6:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40ddba:	e786      	b.n	40dcca <_free_r+0xa2>
  40ddbc:	f240 5054 	movw	r0, #1364	; 0x554
  40ddc0:	4282      	cmp	r2, r0
  40ddc2:	d806      	bhi.n	40ddd2 <_free_r+0x1aa>
  40ddc4:	0c9a      	lsrs	r2, r3, #18
  40ddc6:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40ddca:	00ff      	lsls	r7, r7, #3
  40ddcc:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40ddd0:	e77b      	b.n	40dcca <_free_r+0xa2>
  40ddd2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40ddd6:	257e      	movs	r5, #126	; 0x7e
  40ddd8:	e777      	b.n	40dcca <_free_r+0xa2>
  40ddda:	f043 0101 	orr.w	r1, r3, #1
  40ddde:	6061      	str	r1, [r4, #4]
  40dde0:	6013      	str	r3, [r2, #0]
  40dde2:	e763      	b.n	40dcac <_free_r+0x84>
  40dde4:	20000660 	.word	0x20000660
  40dde8:	20000668 	.word	0x20000668
  40ddec:	20000a6c 	.word	0x20000a6c
  40ddf0:	20000ee4 	.word	0x20000ee4

0040ddf4 <_localeconv_r>:
  40ddf4:	4a04      	ldr	r2, [pc, #16]	; (40de08 <_localeconv_r+0x14>)
  40ddf6:	4b05      	ldr	r3, [pc, #20]	; (40de0c <_localeconv_r+0x18>)
  40ddf8:	6812      	ldr	r2, [r2, #0]
  40ddfa:	6b50      	ldr	r0, [r2, #52]	; 0x34
  40ddfc:	2800      	cmp	r0, #0
  40ddfe:	bf08      	it	eq
  40de00:	4618      	moveq	r0, r3
  40de02:	30f0      	adds	r0, #240	; 0xf0
  40de04:	4770      	bx	lr
  40de06:	bf00      	nop
  40de08:	200000c4 	.word	0x200000c4
  40de0c:	200004f4 	.word	0x200004f4

0040de10 <__retarget_lock_acquire_recursive>:
  40de10:	4770      	bx	lr
  40de12:	bf00      	nop

0040de14 <__retarget_lock_release_recursive>:
  40de14:	4770      	bx	lr
  40de16:	bf00      	nop

0040de18 <_malloc_r>:
  40de18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40de1c:	f101 060b 	add.w	r6, r1, #11
  40de20:	2e16      	cmp	r6, #22
  40de22:	b083      	sub	sp, #12
  40de24:	4605      	mov	r5, r0
  40de26:	f240 809e 	bls.w	40df66 <_malloc_r+0x14e>
  40de2a:	f036 0607 	bics.w	r6, r6, #7
  40de2e:	f100 80bd 	bmi.w	40dfac <_malloc_r+0x194>
  40de32:	42b1      	cmp	r1, r6
  40de34:	f200 80ba 	bhi.w	40dfac <_malloc_r+0x194>
  40de38:	f000 fb6e 	bl	40e518 <__malloc_lock>
  40de3c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40de40:	f0c0 8293 	bcc.w	40e36a <_malloc_r+0x552>
  40de44:	0a73      	lsrs	r3, r6, #9
  40de46:	f000 80b8 	beq.w	40dfba <_malloc_r+0x1a2>
  40de4a:	2b04      	cmp	r3, #4
  40de4c:	f200 8179 	bhi.w	40e142 <_malloc_r+0x32a>
  40de50:	09b3      	lsrs	r3, r6, #6
  40de52:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40de56:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40de5a:	00c3      	lsls	r3, r0, #3
  40de5c:	4fbf      	ldr	r7, [pc, #764]	; (40e15c <_malloc_r+0x344>)
  40de5e:	443b      	add	r3, r7
  40de60:	f1a3 0108 	sub.w	r1, r3, #8
  40de64:	685c      	ldr	r4, [r3, #4]
  40de66:	42a1      	cmp	r1, r4
  40de68:	d106      	bne.n	40de78 <_malloc_r+0x60>
  40de6a:	e00c      	b.n	40de86 <_malloc_r+0x6e>
  40de6c:	2a00      	cmp	r2, #0
  40de6e:	f280 80aa 	bge.w	40dfc6 <_malloc_r+0x1ae>
  40de72:	68e4      	ldr	r4, [r4, #12]
  40de74:	42a1      	cmp	r1, r4
  40de76:	d006      	beq.n	40de86 <_malloc_r+0x6e>
  40de78:	6863      	ldr	r3, [r4, #4]
  40de7a:	f023 0303 	bic.w	r3, r3, #3
  40de7e:	1b9a      	subs	r2, r3, r6
  40de80:	2a0f      	cmp	r2, #15
  40de82:	ddf3      	ble.n	40de6c <_malloc_r+0x54>
  40de84:	4670      	mov	r0, lr
  40de86:	693c      	ldr	r4, [r7, #16]
  40de88:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40e170 <_malloc_r+0x358>
  40de8c:	4574      	cmp	r4, lr
  40de8e:	f000 81ab 	beq.w	40e1e8 <_malloc_r+0x3d0>
  40de92:	6863      	ldr	r3, [r4, #4]
  40de94:	f023 0303 	bic.w	r3, r3, #3
  40de98:	1b9a      	subs	r2, r3, r6
  40de9a:	2a0f      	cmp	r2, #15
  40de9c:	f300 8190 	bgt.w	40e1c0 <_malloc_r+0x3a8>
  40dea0:	2a00      	cmp	r2, #0
  40dea2:	f8c7 e014 	str.w	lr, [r7, #20]
  40dea6:	f8c7 e010 	str.w	lr, [r7, #16]
  40deaa:	f280 809d 	bge.w	40dfe8 <_malloc_r+0x1d0>
  40deae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40deb2:	f080 8161 	bcs.w	40e178 <_malloc_r+0x360>
  40deb6:	08db      	lsrs	r3, r3, #3
  40deb8:	f103 0c01 	add.w	ip, r3, #1
  40debc:	1099      	asrs	r1, r3, #2
  40debe:	687a      	ldr	r2, [r7, #4]
  40dec0:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40dec4:	f8c4 8008 	str.w	r8, [r4, #8]
  40dec8:	2301      	movs	r3, #1
  40deca:	408b      	lsls	r3, r1
  40decc:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40ded0:	4313      	orrs	r3, r2
  40ded2:	3908      	subs	r1, #8
  40ded4:	60e1      	str	r1, [r4, #12]
  40ded6:	607b      	str	r3, [r7, #4]
  40ded8:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40dedc:	f8c8 400c 	str.w	r4, [r8, #12]
  40dee0:	1082      	asrs	r2, r0, #2
  40dee2:	2401      	movs	r4, #1
  40dee4:	4094      	lsls	r4, r2
  40dee6:	429c      	cmp	r4, r3
  40dee8:	f200 808b 	bhi.w	40e002 <_malloc_r+0x1ea>
  40deec:	421c      	tst	r4, r3
  40deee:	d106      	bne.n	40defe <_malloc_r+0xe6>
  40def0:	f020 0003 	bic.w	r0, r0, #3
  40def4:	0064      	lsls	r4, r4, #1
  40def6:	421c      	tst	r4, r3
  40def8:	f100 0004 	add.w	r0, r0, #4
  40defc:	d0fa      	beq.n	40def4 <_malloc_r+0xdc>
  40defe:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40df02:	46cc      	mov	ip, r9
  40df04:	4680      	mov	r8, r0
  40df06:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40df0a:	459c      	cmp	ip, r3
  40df0c:	d107      	bne.n	40df1e <_malloc_r+0x106>
  40df0e:	e16d      	b.n	40e1ec <_malloc_r+0x3d4>
  40df10:	2a00      	cmp	r2, #0
  40df12:	f280 817b 	bge.w	40e20c <_malloc_r+0x3f4>
  40df16:	68db      	ldr	r3, [r3, #12]
  40df18:	459c      	cmp	ip, r3
  40df1a:	f000 8167 	beq.w	40e1ec <_malloc_r+0x3d4>
  40df1e:	6859      	ldr	r1, [r3, #4]
  40df20:	f021 0103 	bic.w	r1, r1, #3
  40df24:	1b8a      	subs	r2, r1, r6
  40df26:	2a0f      	cmp	r2, #15
  40df28:	ddf2      	ble.n	40df10 <_malloc_r+0xf8>
  40df2a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40df2e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40df32:	9300      	str	r3, [sp, #0]
  40df34:	199c      	adds	r4, r3, r6
  40df36:	4628      	mov	r0, r5
  40df38:	f046 0601 	orr.w	r6, r6, #1
  40df3c:	f042 0501 	orr.w	r5, r2, #1
  40df40:	605e      	str	r6, [r3, #4]
  40df42:	f8c8 c00c 	str.w	ip, [r8, #12]
  40df46:	f8cc 8008 	str.w	r8, [ip, #8]
  40df4a:	617c      	str	r4, [r7, #20]
  40df4c:	613c      	str	r4, [r7, #16]
  40df4e:	f8c4 e00c 	str.w	lr, [r4, #12]
  40df52:	f8c4 e008 	str.w	lr, [r4, #8]
  40df56:	6065      	str	r5, [r4, #4]
  40df58:	505a      	str	r2, [r3, r1]
  40df5a:	f000 fae3 	bl	40e524 <__malloc_unlock>
  40df5e:	9b00      	ldr	r3, [sp, #0]
  40df60:	f103 0408 	add.w	r4, r3, #8
  40df64:	e01e      	b.n	40dfa4 <_malloc_r+0x18c>
  40df66:	2910      	cmp	r1, #16
  40df68:	d820      	bhi.n	40dfac <_malloc_r+0x194>
  40df6a:	f000 fad5 	bl	40e518 <__malloc_lock>
  40df6e:	2610      	movs	r6, #16
  40df70:	2318      	movs	r3, #24
  40df72:	2002      	movs	r0, #2
  40df74:	4f79      	ldr	r7, [pc, #484]	; (40e15c <_malloc_r+0x344>)
  40df76:	443b      	add	r3, r7
  40df78:	f1a3 0208 	sub.w	r2, r3, #8
  40df7c:	685c      	ldr	r4, [r3, #4]
  40df7e:	4294      	cmp	r4, r2
  40df80:	f000 813d 	beq.w	40e1fe <_malloc_r+0x3e6>
  40df84:	6863      	ldr	r3, [r4, #4]
  40df86:	68e1      	ldr	r1, [r4, #12]
  40df88:	68a6      	ldr	r6, [r4, #8]
  40df8a:	f023 0303 	bic.w	r3, r3, #3
  40df8e:	4423      	add	r3, r4
  40df90:	4628      	mov	r0, r5
  40df92:	685a      	ldr	r2, [r3, #4]
  40df94:	60f1      	str	r1, [r6, #12]
  40df96:	f042 0201 	orr.w	r2, r2, #1
  40df9a:	608e      	str	r6, [r1, #8]
  40df9c:	605a      	str	r2, [r3, #4]
  40df9e:	f000 fac1 	bl	40e524 <__malloc_unlock>
  40dfa2:	3408      	adds	r4, #8
  40dfa4:	4620      	mov	r0, r4
  40dfa6:	b003      	add	sp, #12
  40dfa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40dfac:	2400      	movs	r4, #0
  40dfae:	230c      	movs	r3, #12
  40dfb0:	4620      	mov	r0, r4
  40dfb2:	602b      	str	r3, [r5, #0]
  40dfb4:	b003      	add	sp, #12
  40dfb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40dfba:	2040      	movs	r0, #64	; 0x40
  40dfbc:	f44f 7300 	mov.w	r3, #512	; 0x200
  40dfc0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40dfc4:	e74a      	b.n	40de5c <_malloc_r+0x44>
  40dfc6:	4423      	add	r3, r4
  40dfc8:	68e1      	ldr	r1, [r4, #12]
  40dfca:	685a      	ldr	r2, [r3, #4]
  40dfcc:	68a6      	ldr	r6, [r4, #8]
  40dfce:	f042 0201 	orr.w	r2, r2, #1
  40dfd2:	60f1      	str	r1, [r6, #12]
  40dfd4:	4628      	mov	r0, r5
  40dfd6:	608e      	str	r6, [r1, #8]
  40dfd8:	605a      	str	r2, [r3, #4]
  40dfda:	f000 faa3 	bl	40e524 <__malloc_unlock>
  40dfde:	3408      	adds	r4, #8
  40dfe0:	4620      	mov	r0, r4
  40dfe2:	b003      	add	sp, #12
  40dfe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40dfe8:	4423      	add	r3, r4
  40dfea:	4628      	mov	r0, r5
  40dfec:	685a      	ldr	r2, [r3, #4]
  40dfee:	f042 0201 	orr.w	r2, r2, #1
  40dff2:	605a      	str	r2, [r3, #4]
  40dff4:	f000 fa96 	bl	40e524 <__malloc_unlock>
  40dff8:	3408      	adds	r4, #8
  40dffa:	4620      	mov	r0, r4
  40dffc:	b003      	add	sp, #12
  40dffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e002:	68bc      	ldr	r4, [r7, #8]
  40e004:	6863      	ldr	r3, [r4, #4]
  40e006:	f023 0803 	bic.w	r8, r3, #3
  40e00a:	45b0      	cmp	r8, r6
  40e00c:	d304      	bcc.n	40e018 <_malloc_r+0x200>
  40e00e:	eba8 0306 	sub.w	r3, r8, r6
  40e012:	2b0f      	cmp	r3, #15
  40e014:	f300 8085 	bgt.w	40e122 <_malloc_r+0x30a>
  40e018:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40e174 <_malloc_r+0x35c>
  40e01c:	4b50      	ldr	r3, [pc, #320]	; (40e160 <_malloc_r+0x348>)
  40e01e:	f8d9 2000 	ldr.w	r2, [r9]
  40e022:	681b      	ldr	r3, [r3, #0]
  40e024:	3201      	adds	r2, #1
  40e026:	4433      	add	r3, r6
  40e028:	eb04 0a08 	add.w	sl, r4, r8
  40e02c:	f000 8155 	beq.w	40e2da <_malloc_r+0x4c2>
  40e030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40e034:	330f      	adds	r3, #15
  40e036:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40e03a:	f02b 0b0f 	bic.w	fp, fp, #15
  40e03e:	4659      	mov	r1, fp
  40e040:	4628      	mov	r0, r5
  40e042:	f000 ff15 	bl	40ee70 <_sbrk_r>
  40e046:	1c41      	adds	r1, r0, #1
  40e048:	4602      	mov	r2, r0
  40e04a:	f000 80fc 	beq.w	40e246 <_malloc_r+0x42e>
  40e04e:	4582      	cmp	sl, r0
  40e050:	f200 80f7 	bhi.w	40e242 <_malloc_r+0x42a>
  40e054:	4b43      	ldr	r3, [pc, #268]	; (40e164 <_malloc_r+0x34c>)
  40e056:	6819      	ldr	r1, [r3, #0]
  40e058:	4459      	add	r1, fp
  40e05a:	6019      	str	r1, [r3, #0]
  40e05c:	f000 814d 	beq.w	40e2fa <_malloc_r+0x4e2>
  40e060:	f8d9 0000 	ldr.w	r0, [r9]
  40e064:	3001      	adds	r0, #1
  40e066:	bf1b      	ittet	ne
  40e068:	eba2 0a0a 	subne.w	sl, r2, sl
  40e06c:	4451      	addne	r1, sl
  40e06e:	f8c9 2000 	streq.w	r2, [r9]
  40e072:	6019      	strne	r1, [r3, #0]
  40e074:	f012 0107 	ands.w	r1, r2, #7
  40e078:	f000 8115 	beq.w	40e2a6 <_malloc_r+0x48e>
  40e07c:	f1c1 0008 	rsb	r0, r1, #8
  40e080:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40e084:	4402      	add	r2, r0
  40e086:	3108      	adds	r1, #8
  40e088:	eb02 090b 	add.w	r9, r2, fp
  40e08c:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40e090:	eba1 0909 	sub.w	r9, r1, r9
  40e094:	4649      	mov	r1, r9
  40e096:	4628      	mov	r0, r5
  40e098:	9301      	str	r3, [sp, #4]
  40e09a:	9200      	str	r2, [sp, #0]
  40e09c:	f000 fee8 	bl	40ee70 <_sbrk_r>
  40e0a0:	1c43      	adds	r3, r0, #1
  40e0a2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40e0a6:	f000 8143 	beq.w	40e330 <_malloc_r+0x518>
  40e0aa:	1a80      	subs	r0, r0, r2
  40e0ac:	4448      	add	r0, r9
  40e0ae:	f040 0001 	orr.w	r0, r0, #1
  40e0b2:	6819      	ldr	r1, [r3, #0]
  40e0b4:	60ba      	str	r2, [r7, #8]
  40e0b6:	4449      	add	r1, r9
  40e0b8:	42bc      	cmp	r4, r7
  40e0ba:	6050      	str	r0, [r2, #4]
  40e0bc:	6019      	str	r1, [r3, #0]
  40e0be:	d017      	beq.n	40e0f0 <_malloc_r+0x2d8>
  40e0c0:	f1b8 0f0f 	cmp.w	r8, #15
  40e0c4:	f240 80fb 	bls.w	40e2be <_malloc_r+0x4a6>
  40e0c8:	6860      	ldr	r0, [r4, #4]
  40e0ca:	f1a8 020c 	sub.w	r2, r8, #12
  40e0ce:	f022 0207 	bic.w	r2, r2, #7
  40e0d2:	eb04 0e02 	add.w	lr, r4, r2
  40e0d6:	f000 0001 	and.w	r0, r0, #1
  40e0da:	f04f 0c05 	mov.w	ip, #5
  40e0de:	4310      	orrs	r0, r2
  40e0e0:	2a0f      	cmp	r2, #15
  40e0e2:	6060      	str	r0, [r4, #4]
  40e0e4:	f8ce c004 	str.w	ip, [lr, #4]
  40e0e8:	f8ce c008 	str.w	ip, [lr, #8]
  40e0ec:	f200 8117 	bhi.w	40e31e <_malloc_r+0x506>
  40e0f0:	4b1d      	ldr	r3, [pc, #116]	; (40e168 <_malloc_r+0x350>)
  40e0f2:	68bc      	ldr	r4, [r7, #8]
  40e0f4:	681a      	ldr	r2, [r3, #0]
  40e0f6:	4291      	cmp	r1, r2
  40e0f8:	bf88      	it	hi
  40e0fa:	6019      	strhi	r1, [r3, #0]
  40e0fc:	4b1b      	ldr	r3, [pc, #108]	; (40e16c <_malloc_r+0x354>)
  40e0fe:	681a      	ldr	r2, [r3, #0]
  40e100:	4291      	cmp	r1, r2
  40e102:	6862      	ldr	r2, [r4, #4]
  40e104:	bf88      	it	hi
  40e106:	6019      	strhi	r1, [r3, #0]
  40e108:	f022 0203 	bic.w	r2, r2, #3
  40e10c:	4296      	cmp	r6, r2
  40e10e:	eba2 0306 	sub.w	r3, r2, r6
  40e112:	d801      	bhi.n	40e118 <_malloc_r+0x300>
  40e114:	2b0f      	cmp	r3, #15
  40e116:	dc04      	bgt.n	40e122 <_malloc_r+0x30a>
  40e118:	4628      	mov	r0, r5
  40e11a:	f000 fa03 	bl	40e524 <__malloc_unlock>
  40e11e:	2400      	movs	r4, #0
  40e120:	e740      	b.n	40dfa4 <_malloc_r+0x18c>
  40e122:	19a2      	adds	r2, r4, r6
  40e124:	f043 0301 	orr.w	r3, r3, #1
  40e128:	f046 0601 	orr.w	r6, r6, #1
  40e12c:	6066      	str	r6, [r4, #4]
  40e12e:	4628      	mov	r0, r5
  40e130:	60ba      	str	r2, [r7, #8]
  40e132:	6053      	str	r3, [r2, #4]
  40e134:	f000 f9f6 	bl	40e524 <__malloc_unlock>
  40e138:	3408      	adds	r4, #8
  40e13a:	4620      	mov	r0, r4
  40e13c:	b003      	add	sp, #12
  40e13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e142:	2b14      	cmp	r3, #20
  40e144:	d971      	bls.n	40e22a <_malloc_r+0x412>
  40e146:	2b54      	cmp	r3, #84	; 0x54
  40e148:	f200 80a3 	bhi.w	40e292 <_malloc_r+0x47a>
  40e14c:	0b33      	lsrs	r3, r6, #12
  40e14e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40e152:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40e156:	00c3      	lsls	r3, r0, #3
  40e158:	e680      	b.n	40de5c <_malloc_r+0x44>
  40e15a:	bf00      	nop
  40e15c:	20000660 	.word	0x20000660
  40e160:	20000ee4 	.word	0x20000ee4
  40e164:	20000eb4 	.word	0x20000eb4
  40e168:	20000edc 	.word	0x20000edc
  40e16c:	20000ee0 	.word	0x20000ee0
  40e170:	20000668 	.word	0x20000668
  40e174:	20000a68 	.word	0x20000a68
  40e178:	0a5a      	lsrs	r2, r3, #9
  40e17a:	2a04      	cmp	r2, #4
  40e17c:	d95b      	bls.n	40e236 <_malloc_r+0x41e>
  40e17e:	2a14      	cmp	r2, #20
  40e180:	f200 80ae 	bhi.w	40e2e0 <_malloc_r+0x4c8>
  40e184:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40e188:	00c9      	lsls	r1, r1, #3
  40e18a:	325b      	adds	r2, #91	; 0x5b
  40e18c:	eb07 0c01 	add.w	ip, r7, r1
  40e190:	5879      	ldr	r1, [r7, r1]
  40e192:	f1ac 0c08 	sub.w	ip, ip, #8
  40e196:	458c      	cmp	ip, r1
  40e198:	f000 8088 	beq.w	40e2ac <_malloc_r+0x494>
  40e19c:	684a      	ldr	r2, [r1, #4]
  40e19e:	f022 0203 	bic.w	r2, r2, #3
  40e1a2:	4293      	cmp	r3, r2
  40e1a4:	d273      	bcs.n	40e28e <_malloc_r+0x476>
  40e1a6:	6889      	ldr	r1, [r1, #8]
  40e1a8:	458c      	cmp	ip, r1
  40e1aa:	d1f7      	bne.n	40e19c <_malloc_r+0x384>
  40e1ac:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40e1b0:	687b      	ldr	r3, [r7, #4]
  40e1b2:	60e2      	str	r2, [r4, #12]
  40e1b4:	f8c4 c008 	str.w	ip, [r4, #8]
  40e1b8:	6094      	str	r4, [r2, #8]
  40e1ba:	f8cc 400c 	str.w	r4, [ip, #12]
  40e1be:	e68f      	b.n	40dee0 <_malloc_r+0xc8>
  40e1c0:	19a1      	adds	r1, r4, r6
  40e1c2:	f046 0c01 	orr.w	ip, r6, #1
  40e1c6:	f042 0601 	orr.w	r6, r2, #1
  40e1ca:	f8c4 c004 	str.w	ip, [r4, #4]
  40e1ce:	4628      	mov	r0, r5
  40e1d0:	6179      	str	r1, [r7, #20]
  40e1d2:	6139      	str	r1, [r7, #16]
  40e1d4:	f8c1 e00c 	str.w	lr, [r1, #12]
  40e1d8:	f8c1 e008 	str.w	lr, [r1, #8]
  40e1dc:	604e      	str	r6, [r1, #4]
  40e1de:	50e2      	str	r2, [r4, r3]
  40e1e0:	f000 f9a0 	bl	40e524 <__malloc_unlock>
  40e1e4:	3408      	adds	r4, #8
  40e1e6:	e6dd      	b.n	40dfa4 <_malloc_r+0x18c>
  40e1e8:	687b      	ldr	r3, [r7, #4]
  40e1ea:	e679      	b.n	40dee0 <_malloc_r+0xc8>
  40e1ec:	f108 0801 	add.w	r8, r8, #1
  40e1f0:	f018 0f03 	tst.w	r8, #3
  40e1f4:	f10c 0c08 	add.w	ip, ip, #8
  40e1f8:	f47f ae85 	bne.w	40df06 <_malloc_r+0xee>
  40e1fc:	e02d      	b.n	40e25a <_malloc_r+0x442>
  40e1fe:	68dc      	ldr	r4, [r3, #12]
  40e200:	42a3      	cmp	r3, r4
  40e202:	bf08      	it	eq
  40e204:	3002      	addeq	r0, #2
  40e206:	f43f ae3e 	beq.w	40de86 <_malloc_r+0x6e>
  40e20a:	e6bb      	b.n	40df84 <_malloc_r+0x16c>
  40e20c:	4419      	add	r1, r3
  40e20e:	461c      	mov	r4, r3
  40e210:	684a      	ldr	r2, [r1, #4]
  40e212:	68db      	ldr	r3, [r3, #12]
  40e214:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40e218:	f042 0201 	orr.w	r2, r2, #1
  40e21c:	604a      	str	r2, [r1, #4]
  40e21e:	4628      	mov	r0, r5
  40e220:	60f3      	str	r3, [r6, #12]
  40e222:	609e      	str	r6, [r3, #8]
  40e224:	f000 f97e 	bl	40e524 <__malloc_unlock>
  40e228:	e6bc      	b.n	40dfa4 <_malloc_r+0x18c>
  40e22a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40e22e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40e232:	00c3      	lsls	r3, r0, #3
  40e234:	e612      	b.n	40de5c <_malloc_r+0x44>
  40e236:	099a      	lsrs	r2, r3, #6
  40e238:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40e23c:	00c9      	lsls	r1, r1, #3
  40e23e:	3238      	adds	r2, #56	; 0x38
  40e240:	e7a4      	b.n	40e18c <_malloc_r+0x374>
  40e242:	42bc      	cmp	r4, r7
  40e244:	d054      	beq.n	40e2f0 <_malloc_r+0x4d8>
  40e246:	68bc      	ldr	r4, [r7, #8]
  40e248:	6862      	ldr	r2, [r4, #4]
  40e24a:	f022 0203 	bic.w	r2, r2, #3
  40e24e:	e75d      	b.n	40e10c <_malloc_r+0x2f4>
  40e250:	f859 3908 	ldr.w	r3, [r9], #-8
  40e254:	4599      	cmp	r9, r3
  40e256:	f040 8086 	bne.w	40e366 <_malloc_r+0x54e>
  40e25a:	f010 0f03 	tst.w	r0, #3
  40e25e:	f100 30ff 	add.w	r0, r0, #4294967295
  40e262:	d1f5      	bne.n	40e250 <_malloc_r+0x438>
  40e264:	687b      	ldr	r3, [r7, #4]
  40e266:	ea23 0304 	bic.w	r3, r3, r4
  40e26a:	607b      	str	r3, [r7, #4]
  40e26c:	0064      	lsls	r4, r4, #1
  40e26e:	429c      	cmp	r4, r3
  40e270:	f63f aec7 	bhi.w	40e002 <_malloc_r+0x1ea>
  40e274:	2c00      	cmp	r4, #0
  40e276:	f43f aec4 	beq.w	40e002 <_malloc_r+0x1ea>
  40e27a:	421c      	tst	r4, r3
  40e27c:	4640      	mov	r0, r8
  40e27e:	f47f ae3e 	bne.w	40defe <_malloc_r+0xe6>
  40e282:	0064      	lsls	r4, r4, #1
  40e284:	421c      	tst	r4, r3
  40e286:	f100 0004 	add.w	r0, r0, #4
  40e28a:	d0fa      	beq.n	40e282 <_malloc_r+0x46a>
  40e28c:	e637      	b.n	40defe <_malloc_r+0xe6>
  40e28e:	468c      	mov	ip, r1
  40e290:	e78c      	b.n	40e1ac <_malloc_r+0x394>
  40e292:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40e296:	d815      	bhi.n	40e2c4 <_malloc_r+0x4ac>
  40e298:	0bf3      	lsrs	r3, r6, #15
  40e29a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40e29e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40e2a2:	00c3      	lsls	r3, r0, #3
  40e2a4:	e5da      	b.n	40de5c <_malloc_r+0x44>
  40e2a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40e2aa:	e6ed      	b.n	40e088 <_malloc_r+0x270>
  40e2ac:	687b      	ldr	r3, [r7, #4]
  40e2ae:	1092      	asrs	r2, r2, #2
  40e2b0:	2101      	movs	r1, #1
  40e2b2:	fa01 f202 	lsl.w	r2, r1, r2
  40e2b6:	4313      	orrs	r3, r2
  40e2b8:	607b      	str	r3, [r7, #4]
  40e2ba:	4662      	mov	r2, ip
  40e2bc:	e779      	b.n	40e1b2 <_malloc_r+0x39a>
  40e2be:	2301      	movs	r3, #1
  40e2c0:	6053      	str	r3, [r2, #4]
  40e2c2:	e729      	b.n	40e118 <_malloc_r+0x300>
  40e2c4:	f240 5254 	movw	r2, #1364	; 0x554
  40e2c8:	4293      	cmp	r3, r2
  40e2ca:	d822      	bhi.n	40e312 <_malloc_r+0x4fa>
  40e2cc:	0cb3      	lsrs	r3, r6, #18
  40e2ce:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40e2d2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40e2d6:	00c3      	lsls	r3, r0, #3
  40e2d8:	e5c0      	b.n	40de5c <_malloc_r+0x44>
  40e2da:	f103 0b10 	add.w	fp, r3, #16
  40e2de:	e6ae      	b.n	40e03e <_malloc_r+0x226>
  40e2e0:	2a54      	cmp	r2, #84	; 0x54
  40e2e2:	d829      	bhi.n	40e338 <_malloc_r+0x520>
  40e2e4:	0b1a      	lsrs	r2, r3, #12
  40e2e6:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40e2ea:	00c9      	lsls	r1, r1, #3
  40e2ec:	326e      	adds	r2, #110	; 0x6e
  40e2ee:	e74d      	b.n	40e18c <_malloc_r+0x374>
  40e2f0:	4b20      	ldr	r3, [pc, #128]	; (40e374 <_malloc_r+0x55c>)
  40e2f2:	6819      	ldr	r1, [r3, #0]
  40e2f4:	4459      	add	r1, fp
  40e2f6:	6019      	str	r1, [r3, #0]
  40e2f8:	e6b2      	b.n	40e060 <_malloc_r+0x248>
  40e2fa:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40e2fe:	2800      	cmp	r0, #0
  40e300:	f47f aeae 	bne.w	40e060 <_malloc_r+0x248>
  40e304:	eb08 030b 	add.w	r3, r8, fp
  40e308:	68ba      	ldr	r2, [r7, #8]
  40e30a:	f043 0301 	orr.w	r3, r3, #1
  40e30e:	6053      	str	r3, [r2, #4]
  40e310:	e6ee      	b.n	40e0f0 <_malloc_r+0x2d8>
  40e312:	207f      	movs	r0, #127	; 0x7f
  40e314:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40e318:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40e31c:	e59e      	b.n	40de5c <_malloc_r+0x44>
  40e31e:	f104 0108 	add.w	r1, r4, #8
  40e322:	4628      	mov	r0, r5
  40e324:	9300      	str	r3, [sp, #0]
  40e326:	f7ff fc7f 	bl	40dc28 <_free_r>
  40e32a:	9b00      	ldr	r3, [sp, #0]
  40e32c:	6819      	ldr	r1, [r3, #0]
  40e32e:	e6df      	b.n	40e0f0 <_malloc_r+0x2d8>
  40e330:	2001      	movs	r0, #1
  40e332:	f04f 0900 	mov.w	r9, #0
  40e336:	e6bc      	b.n	40e0b2 <_malloc_r+0x29a>
  40e338:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40e33c:	d805      	bhi.n	40e34a <_malloc_r+0x532>
  40e33e:	0bda      	lsrs	r2, r3, #15
  40e340:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40e344:	00c9      	lsls	r1, r1, #3
  40e346:	3277      	adds	r2, #119	; 0x77
  40e348:	e720      	b.n	40e18c <_malloc_r+0x374>
  40e34a:	f240 5154 	movw	r1, #1364	; 0x554
  40e34e:	428a      	cmp	r2, r1
  40e350:	d805      	bhi.n	40e35e <_malloc_r+0x546>
  40e352:	0c9a      	lsrs	r2, r3, #18
  40e354:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40e358:	00c9      	lsls	r1, r1, #3
  40e35a:	327c      	adds	r2, #124	; 0x7c
  40e35c:	e716      	b.n	40e18c <_malloc_r+0x374>
  40e35e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40e362:	227e      	movs	r2, #126	; 0x7e
  40e364:	e712      	b.n	40e18c <_malloc_r+0x374>
  40e366:	687b      	ldr	r3, [r7, #4]
  40e368:	e780      	b.n	40e26c <_malloc_r+0x454>
  40e36a:	08f0      	lsrs	r0, r6, #3
  40e36c:	f106 0308 	add.w	r3, r6, #8
  40e370:	e600      	b.n	40df74 <_malloc_r+0x15c>
  40e372:	bf00      	nop
  40e374:	20000eb4 	.word	0x20000eb4

0040e378 <__ascii_mbtowc>:
  40e378:	b082      	sub	sp, #8
  40e37a:	b149      	cbz	r1, 40e390 <__ascii_mbtowc+0x18>
  40e37c:	b15a      	cbz	r2, 40e396 <__ascii_mbtowc+0x1e>
  40e37e:	b16b      	cbz	r3, 40e39c <__ascii_mbtowc+0x24>
  40e380:	7813      	ldrb	r3, [r2, #0]
  40e382:	600b      	str	r3, [r1, #0]
  40e384:	7812      	ldrb	r2, [r2, #0]
  40e386:	1c10      	adds	r0, r2, #0
  40e388:	bf18      	it	ne
  40e38a:	2001      	movne	r0, #1
  40e38c:	b002      	add	sp, #8
  40e38e:	4770      	bx	lr
  40e390:	a901      	add	r1, sp, #4
  40e392:	2a00      	cmp	r2, #0
  40e394:	d1f3      	bne.n	40e37e <__ascii_mbtowc+0x6>
  40e396:	4610      	mov	r0, r2
  40e398:	b002      	add	sp, #8
  40e39a:	4770      	bx	lr
  40e39c:	f06f 0001 	mvn.w	r0, #1
  40e3a0:	e7f4      	b.n	40e38c <__ascii_mbtowc+0x14>
  40e3a2:	bf00      	nop
	...

0040e3b0 <memchr>:
  40e3b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40e3b4:	2a10      	cmp	r2, #16
  40e3b6:	db2b      	blt.n	40e410 <memchr+0x60>
  40e3b8:	f010 0f07 	tst.w	r0, #7
  40e3bc:	d008      	beq.n	40e3d0 <memchr+0x20>
  40e3be:	f810 3b01 	ldrb.w	r3, [r0], #1
  40e3c2:	3a01      	subs	r2, #1
  40e3c4:	428b      	cmp	r3, r1
  40e3c6:	d02d      	beq.n	40e424 <memchr+0x74>
  40e3c8:	f010 0f07 	tst.w	r0, #7
  40e3cc:	b342      	cbz	r2, 40e420 <memchr+0x70>
  40e3ce:	d1f6      	bne.n	40e3be <memchr+0xe>
  40e3d0:	b4f0      	push	{r4, r5, r6, r7}
  40e3d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40e3d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40e3da:	f022 0407 	bic.w	r4, r2, #7
  40e3de:	f07f 0700 	mvns.w	r7, #0
  40e3e2:	2300      	movs	r3, #0
  40e3e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40e3e8:	3c08      	subs	r4, #8
  40e3ea:	ea85 0501 	eor.w	r5, r5, r1
  40e3ee:	ea86 0601 	eor.w	r6, r6, r1
  40e3f2:	fa85 f547 	uadd8	r5, r5, r7
  40e3f6:	faa3 f587 	sel	r5, r3, r7
  40e3fa:	fa86 f647 	uadd8	r6, r6, r7
  40e3fe:	faa5 f687 	sel	r6, r5, r7
  40e402:	b98e      	cbnz	r6, 40e428 <memchr+0x78>
  40e404:	d1ee      	bne.n	40e3e4 <memchr+0x34>
  40e406:	bcf0      	pop	{r4, r5, r6, r7}
  40e408:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40e40c:	f002 0207 	and.w	r2, r2, #7
  40e410:	b132      	cbz	r2, 40e420 <memchr+0x70>
  40e412:	f810 3b01 	ldrb.w	r3, [r0], #1
  40e416:	3a01      	subs	r2, #1
  40e418:	ea83 0301 	eor.w	r3, r3, r1
  40e41c:	b113      	cbz	r3, 40e424 <memchr+0x74>
  40e41e:	d1f8      	bne.n	40e412 <memchr+0x62>
  40e420:	2000      	movs	r0, #0
  40e422:	4770      	bx	lr
  40e424:	3801      	subs	r0, #1
  40e426:	4770      	bx	lr
  40e428:	2d00      	cmp	r5, #0
  40e42a:	bf06      	itte	eq
  40e42c:	4635      	moveq	r5, r6
  40e42e:	3803      	subeq	r0, #3
  40e430:	3807      	subne	r0, #7
  40e432:	f015 0f01 	tst.w	r5, #1
  40e436:	d107      	bne.n	40e448 <memchr+0x98>
  40e438:	3001      	adds	r0, #1
  40e43a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40e43e:	bf02      	ittt	eq
  40e440:	3001      	addeq	r0, #1
  40e442:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40e446:	3001      	addeq	r0, #1
  40e448:	bcf0      	pop	{r4, r5, r6, r7}
  40e44a:	3801      	subs	r0, #1
  40e44c:	4770      	bx	lr
  40e44e:	bf00      	nop

0040e450 <memmove>:
  40e450:	4288      	cmp	r0, r1
  40e452:	b5f0      	push	{r4, r5, r6, r7, lr}
  40e454:	d90d      	bls.n	40e472 <memmove+0x22>
  40e456:	188b      	adds	r3, r1, r2
  40e458:	4298      	cmp	r0, r3
  40e45a:	d20a      	bcs.n	40e472 <memmove+0x22>
  40e45c:	1884      	adds	r4, r0, r2
  40e45e:	2a00      	cmp	r2, #0
  40e460:	d051      	beq.n	40e506 <memmove+0xb6>
  40e462:	4622      	mov	r2, r4
  40e464:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40e468:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40e46c:	4299      	cmp	r1, r3
  40e46e:	d1f9      	bne.n	40e464 <memmove+0x14>
  40e470:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40e472:	2a0f      	cmp	r2, #15
  40e474:	d948      	bls.n	40e508 <memmove+0xb8>
  40e476:	ea41 0300 	orr.w	r3, r1, r0
  40e47a:	079b      	lsls	r3, r3, #30
  40e47c:	d146      	bne.n	40e50c <memmove+0xbc>
  40e47e:	f100 0410 	add.w	r4, r0, #16
  40e482:	f101 0310 	add.w	r3, r1, #16
  40e486:	4615      	mov	r5, r2
  40e488:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40e48c:	f844 6c10 	str.w	r6, [r4, #-16]
  40e490:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40e494:	f844 6c0c 	str.w	r6, [r4, #-12]
  40e498:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40e49c:	f844 6c08 	str.w	r6, [r4, #-8]
  40e4a0:	3d10      	subs	r5, #16
  40e4a2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40e4a6:	f844 6c04 	str.w	r6, [r4, #-4]
  40e4aa:	2d0f      	cmp	r5, #15
  40e4ac:	f103 0310 	add.w	r3, r3, #16
  40e4b0:	f104 0410 	add.w	r4, r4, #16
  40e4b4:	d8e8      	bhi.n	40e488 <memmove+0x38>
  40e4b6:	f1a2 0310 	sub.w	r3, r2, #16
  40e4ba:	f023 030f 	bic.w	r3, r3, #15
  40e4be:	f002 0e0f 	and.w	lr, r2, #15
  40e4c2:	3310      	adds	r3, #16
  40e4c4:	f1be 0f03 	cmp.w	lr, #3
  40e4c8:	4419      	add	r1, r3
  40e4ca:	4403      	add	r3, r0
  40e4cc:	d921      	bls.n	40e512 <memmove+0xc2>
  40e4ce:	1f1e      	subs	r6, r3, #4
  40e4d0:	460d      	mov	r5, r1
  40e4d2:	4674      	mov	r4, lr
  40e4d4:	3c04      	subs	r4, #4
  40e4d6:	f855 7b04 	ldr.w	r7, [r5], #4
  40e4da:	f846 7f04 	str.w	r7, [r6, #4]!
  40e4de:	2c03      	cmp	r4, #3
  40e4e0:	d8f8      	bhi.n	40e4d4 <memmove+0x84>
  40e4e2:	f1ae 0404 	sub.w	r4, lr, #4
  40e4e6:	f024 0403 	bic.w	r4, r4, #3
  40e4ea:	3404      	adds	r4, #4
  40e4ec:	4421      	add	r1, r4
  40e4ee:	4423      	add	r3, r4
  40e4f0:	f002 0203 	and.w	r2, r2, #3
  40e4f4:	b162      	cbz	r2, 40e510 <memmove+0xc0>
  40e4f6:	3b01      	subs	r3, #1
  40e4f8:	440a      	add	r2, r1
  40e4fa:	f811 4b01 	ldrb.w	r4, [r1], #1
  40e4fe:	f803 4f01 	strb.w	r4, [r3, #1]!
  40e502:	428a      	cmp	r2, r1
  40e504:	d1f9      	bne.n	40e4fa <memmove+0xaa>
  40e506:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40e508:	4603      	mov	r3, r0
  40e50a:	e7f3      	b.n	40e4f4 <memmove+0xa4>
  40e50c:	4603      	mov	r3, r0
  40e50e:	e7f2      	b.n	40e4f6 <memmove+0xa6>
  40e510:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40e512:	4672      	mov	r2, lr
  40e514:	e7ee      	b.n	40e4f4 <memmove+0xa4>
  40e516:	bf00      	nop

0040e518 <__malloc_lock>:
  40e518:	4801      	ldr	r0, [pc, #4]	; (40e520 <__malloc_lock+0x8>)
  40e51a:	f7ff bc79 	b.w	40de10 <__retarget_lock_acquire_recursive>
  40e51e:	bf00      	nop
  40e520:	20002024 	.word	0x20002024

0040e524 <__malloc_unlock>:
  40e524:	4801      	ldr	r0, [pc, #4]	; (40e52c <__malloc_unlock+0x8>)
  40e526:	f7ff bc75 	b.w	40de14 <__retarget_lock_release_recursive>
  40e52a:	bf00      	nop
  40e52c:	20002024 	.word	0x20002024

0040e530 <_Balloc>:
  40e530:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40e532:	b570      	push	{r4, r5, r6, lr}
  40e534:	4605      	mov	r5, r0
  40e536:	460c      	mov	r4, r1
  40e538:	b14b      	cbz	r3, 40e54e <_Balloc+0x1e>
  40e53a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40e53e:	b180      	cbz	r0, 40e562 <_Balloc+0x32>
  40e540:	6802      	ldr	r2, [r0, #0]
  40e542:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40e546:	2300      	movs	r3, #0
  40e548:	6103      	str	r3, [r0, #16]
  40e54a:	60c3      	str	r3, [r0, #12]
  40e54c:	bd70      	pop	{r4, r5, r6, pc}
  40e54e:	2221      	movs	r2, #33	; 0x21
  40e550:	2104      	movs	r1, #4
  40e552:	f000 fe11 	bl	40f178 <_calloc_r>
  40e556:	64e8      	str	r0, [r5, #76]	; 0x4c
  40e558:	4603      	mov	r3, r0
  40e55a:	2800      	cmp	r0, #0
  40e55c:	d1ed      	bne.n	40e53a <_Balloc+0xa>
  40e55e:	2000      	movs	r0, #0
  40e560:	bd70      	pop	{r4, r5, r6, pc}
  40e562:	2101      	movs	r1, #1
  40e564:	fa01 f604 	lsl.w	r6, r1, r4
  40e568:	1d72      	adds	r2, r6, #5
  40e56a:	4628      	mov	r0, r5
  40e56c:	0092      	lsls	r2, r2, #2
  40e56e:	f000 fe03 	bl	40f178 <_calloc_r>
  40e572:	2800      	cmp	r0, #0
  40e574:	d0f3      	beq.n	40e55e <_Balloc+0x2e>
  40e576:	6044      	str	r4, [r0, #4]
  40e578:	6086      	str	r6, [r0, #8]
  40e57a:	e7e4      	b.n	40e546 <_Balloc+0x16>

0040e57c <_Bfree>:
  40e57c:	b131      	cbz	r1, 40e58c <_Bfree+0x10>
  40e57e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40e580:	684a      	ldr	r2, [r1, #4]
  40e582:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40e586:	6008      	str	r0, [r1, #0]
  40e588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40e58c:	4770      	bx	lr
  40e58e:	bf00      	nop

0040e590 <__multadd>:
  40e590:	b5f0      	push	{r4, r5, r6, r7, lr}
  40e592:	690c      	ldr	r4, [r1, #16]
  40e594:	b083      	sub	sp, #12
  40e596:	460d      	mov	r5, r1
  40e598:	4606      	mov	r6, r0
  40e59a:	f101 0e14 	add.w	lr, r1, #20
  40e59e:	2700      	movs	r7, #0
  40e5a0:	f8de 0000 	ldr.w	r0, [lr]
  40e5a4:	b281      	uxth	r1, r0
  40e5a6:	fb02 3301 	mla	r3, r2, r1, r3
  40e5aa:	0c01      	lsrs	r1, r0, #16
  40e5ac:	0c18      	lsrs	r0, r3, #16
  40e5ae:	fb02 0101 	mla	r1, r2, r1, r0
  40e5b2:	b29b      	uxth	r3, r3
  40e5b4:	3701      	adds	r7, #1
  40e5b6:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  40e5ba:	42bc      	cmp	r4, r7
  40e5bc:	f84e 3b04 	str.w	r3, [lr], #4
  40e5c0:	ea4f 4311 	mov.w	r3, r1, lsr #16
  40e5c4:	dcec      	bgt.n	40e5a0 <__multadd+0x10>
  40e5c6:	b13b      	cbz	r3, 40e5d8 <__multadd+0x48>
  40e5c8:	68aa      	ldr	r2, [r5, #8]
  40e5ca:	4294      	cmp	r4, r2
  40e5cc:	da07      	bge.n	40e5de <__multadd+0x4e>
  40e5ce:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40e5d2:	3401      	adds	r4, #1
  40e5d4:	6153      	str	r3, [r2, #20]
  40e5d6:	612c      	str	r4, [r5, #16]
  40e5d8:	4628      	mov	r0, r5
  40e5da:	b003      	add	sp, #12
  40e5dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40e5de:	6869      	ldr	r1, [r5, #4]
  40e5e0:	9301      	str	r3, [sp, #4]
  40e5e2:	3101      	adds	r1, #1
  40e5e4:	4630      	mov	r0, r6
  40e5e6:	f7ff ffa3 	bl	40e530 <_Balloc>
  40e5ea:	692a      	ldr	r2, [r5, #16]
  40e5ec:	3202      	adds	r2, #2
  40e5ee:	f105 010c 	add.w	r1, r5, #12
  40e5f2:	4607      	mov	r7, r0
  40e5f4:	0092      	lsls	r2, r2, #2
  40e5f6:	300c      	adds	r0, #12
  40e5f8:	f7fc ffa0 	bl	40b53c <memcpy>
  40e5fc:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40e5fe:	6869      	ldr	r1, [r5, #4]
  40e600:	9b01      	ldr	r3, [sp, #4]
  40e602:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40e606:	6028      	str	r0, [r5, #0]
  40e608:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40e60c:	463d      	mov	r5, r7
  40e60e:	e7de      	b.n	40e5ce <__multadd+0x3e>

0040e610 <__hi0bits>:
  40e610:	0c02      	lsrs	r2, r0, #16
  40e612:	0412      	lsls	r2, r2, #16
  40e614:	4603      	mov	r3, r0
  40e616:	b9b2      	cbnz	r2, 40e646 <__hi0bits+0x36>
  40e618:	0403      	lsls	r3, r0, #16
  40e61a:	2010      	movs	r0, #16
  40e61c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40e620:	bf04      	itt	eq
  40e622:	021b      	lsleq	r3, r3, #8
  40e624:	3008      	addeq	r0, #8
  40e626:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  40e62a:	bf04      	itt	eq
  40e62c:	011b      	lsleq	r3, r3, #4
  40e62e:	3004      	addeq	r0, #4
  40e630:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40e634:	bf04      	itt	eq
  40e636:	009b      	lsleq	r3, r3, #2
  40e638:	3002      	addeq	r0, #2
  40e63a:	2b00      	cmp	r3, #0
  40e63c:	db02      	blt.n	40e644 <__hi0bits+0x34>
  40e63e:	005b      	lsls	r3, r3, #1
  40e640:	d403      	bmi.n	40e64a <__hi0bits+0x3a>
  40e642:	2020      	movs	r0, #32
  40e644:	4770      	bx	lr
  40e646:	2000      	movs	r0, #0
  40e648:	e7e8      	b.n	40e61c <__hi0bits+0xc>
  40e64a:	3001      	adds	r0, #1
  40e64c:	4770      	bx	lr
  40e64e:	bf00      	nop

0040e650 <__lo0bits>:
  40e650:	6803      	ldr	r3, [r0, #0]
  40e652:	f013 0207 	ands.w	r2, r3, #7
  40e656:	4601      	mov	r1, r0
  40e658:	d007      	beq.n	40e66a <__lo0bits+0x1a>
  40e65a:	07da      	lsls	r2, r3, #31
  40e65c:	d421      	bmi.n	40e6a2 <__lo0bits+0x52>
  40e65e:	0798      	lsls	r0, r3, #30
  40e660:	d421      	bmi.n	40e6a6 <__lo0bits+0x56>
  40e662:	089b      	lsrs	r3, r3, #2
  40e664:	600b      	str	r3, [r1, #0]
  40e666:	2002      	movs	r0, #2
  40e668:	4770      	bx	lr
  40e66a:	b298      	uxth	r0, r3
  40e66c:	b198      	cbz	r0, 40e696 <__lo0bits+0x46>
  40e66e:	4610      	mov	r0, r2
  40e670:	f013 0fff 	tst.w	r3, #255	; 0xff
  40e674:	bf04      	itt	eq
  40e676:	0a1b      	lsreq	r3, r3, #8
  40e678:	3008      	addeq	r0, #8
  40e67a:	071a      	lsls	r2, r3, #28
  40e67c:	bf04      	itt	eq
  40e67e:	091b      	lsreq	r3, r3, #4
  40e680:	3004      	addeq	r0, #4
  40e682:	079a      	lsls	r2, r3, #30
  40e684:	bf04      	itt	eq
  40e686:	089b      	lsreq	r3, r3, #2
  40e688:	3002      	addeq	r0, #2
  40e68a:	07da      	lsls	r2, r3, #31
  40e68c:	d407      	bmi.n	40e69e <__lo0bits+0x4e>
  40e68e:	085b      	lsrs	r3, r3, #1
  40e690:	d104      	bne.n	40e69c <__lo0bits+0x4c>
  40e692:	2020      	movs	r0, #32
  40e694:	4770      	bx	lr
  40e696:	0c1b      	lsrs	r3, r3, #16
  40e698:	2010      	movs	r0, #16
  40e69a:	e7e9      	b.n	40e670 <__lo0bits+0x20>
  40e69c:	3001      	adds	r0, #1
  40e69e:	600b      	str	r3, [r1, #0]
  40e6a0:	4770      	bx	lr
  40e6a2:	2000      	movs	r0, #0
  40e6a4:	4770      	bx	lr
  40e6a6:	085b      	lsrs	r3, r3, #1
  40e6a8:	600b      	str	r3, [r1, #0]
  40e6aa:	2001      	movs	r0, #1
  40e6ac:	4770      	bx	lr
  40e6ae:	bf00      	nop

0040e6b0 <__i2b>:
  40e6b0:	b510      	push	{r4, lr}
  40e6b2:	460c      	mov	r4, r1
  40e6b4:	2101      	movs	r1, #1
  40e6b6:	f7ff ff3b 	bl	40e530 <_Balloc>
  40e6ba:	2201      	movs	r2, #1
  40e6bc:	6144      	str	r4, [r0, #20]
  40e6be:	6102      	str	r2, [r0, #16]
  40e6c0:	bd10      	pop	{r4, pc}
  40e6c2:	bf00      	nop

0040e6c4 <__multiply>:
  40e6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e6c8:	690c      	ldr	r4, [r1, #16]
  40e6ca:	6915      	ldr	r5, [r2, #16]
  40e6cc:	42ac      	cmp	r4, r5
  40e6ce:	b083      	sub	sp, #12
  40e6d0:	468b      	mov	fp, r1
  40e6d2:	4616      	mov	r6, r2
  40e6d4:	da04      	bge.n	40e6e0 <__multiply+0x1c>
  40e6d6:	4622      	mov	r2, r4
  40e6d8:	46b3      	mov	fp, r6
  40e6da:	462c      	mov	r4, r5
  40e6dc:	460e      	mov	r6, r1
  40e6de:	4615      	mov	r5, r2
  40e6e0:	f8db 3008 	ldr.w	r3, [fp, #8]
  40e6e4:	f8db 1004 	ldr.w	r1, [fp, #4]
  40e6e8:	eb04 0805 	add.w	r8, r4, r5
  40e6ec:	4598      	cmp	r8, r3
  40e6ee:	bfc8      	it	gt
  40e6f0:	3101      	addgt	r1, #1
  40e6f2:	f7ff ff1d 	bl	40e530 <_Balloc>
  40e6f6:	f100 0914 	add.w	r9, r0, #20
  40e6fa:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40e6fe:	45d1      	cmp	r9, sl
  40e700:	9000      	str	r0, [sp, #0]
  40e702:	d205      	bcs.n	40e710 <__multiply+0x4c>
  40e704:	464b      	mov	r3, r9
  40e706:	2100      	movs	r1, #0
  40e708:	f843 1b04 	str.w	r1, [r3], #4
  40e70c:	459a      	cmp	sl, r3
  40e70e:	d8fb      	bhi.n	40e708 <__multiply+0x44>
  40e710:	f106 0c14 	add.w	ip, r6, #20
  40e714:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  40e718:	f10b 0b14 	add.w	fp, fp, #20
  40e71c:	459c      	cmp	ip, r3
  40e71e:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40e722:	d24c      	bcs.n	40e7be <__multiply+0xfa>
  40e724:	f8cd a004 	str.w	sl, [sp, #4]
  40e728:	469a      	mov	sl, r3
  40e72a:	f8dc 5000 	ldr.w	r5, [ip]
  40e72e:	b2af      	uxth	r7, r5
  40e730:	b1ef      	cbz	r7, 40e76e <__multiply+0xaa>
  40e732:	2100      	movs	r1, #0
  40e734:	464d      	mov	r5, r9
  40e736:	465e      	mov	r6, fp
  40e738:	460c      	mov	r4, r1
  40e73a:	f856 2b04 	ldr.w	r2, [r6], #4
  40e73e:	6828      	ldr	r0, [r5, #0]
  40e740:	b293      	uxth	r3, r2
  40e742:	b281      	uxth	r1, r0
  40e744:	fb07 1303 	mla	r3, r7, r3, r1
  40e748:	0c12      	lsrs	r2, r2, #16
  40e74a:	0c01      	lsrs	r1, r0, #16
  40e74c:	4423      	add	r3, r4
  40e74e:	fb07 1102 	mla	r1, r7, r2, r1
  40e752:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40e756:	b29b      	uxth	r3, r3
  40e758:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40e75c:	45b6      	cmp	lr, r6
  40e75e:	f845 3b04 	str.w	r3, [r5], #4
  40e762:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40e766:	d8e8      	bhi.n	40e73a <__multiply+0x76>
  40e768:	602c      	str	r4, [r5, #0]
  40e76a:	f8dc 5000 	ldr.w	r5, [ip]
  40e76e:	0c2d      	lsrs	r5, r5, #16
  40e770:	d01d      	beq.n	40e7ae <__multiply+0xea>
  40e772:	f8d9 3000 	ldr.w	r3, [r9]
  40e776:	4648      	mov	r0, r9
  40e778:	461c      	mov	r4, r3
  40e77a:	4659      	mov	r1, fp
  40e77c:	2200      	movs	r2, #0
  40e77e:	880e      	ldrh	r6, [r1, #0]
  40e780:	0c24      	lsrs	r4, r4, #16
  40e782:	fb05 4406 	mla	r4, r5, r6, r4
  40e786:	4422      	add	r2, r4
  40e788:	b29b      	uxth	r3, r3
  40e78a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40e78e:	f840 3b04 	str.w	r3, [r0], #4
  40e792:	f851 3b04 	ldr.w	r3, [r1], #4
  40e796:	6804      	ldr	r4, [r0, #0]
  40e798:	0c1b      	lsrs	r3, r3, #16
  40e79a:	b2a6      	uxth	r6, r4
  40e79c:	fb05 6303 	mla	r3, r5, r3, r6
  40e7a0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40e7a4:	458e      	cmp	lr, r1
  40e7a6:	ea4f 4213 	mov.w	r2, r3, lsr #16
  40e7aa:	d8e8      	bhi.n	40e77e <__multiply+0xba>
  40e7ac:	6003      	str	r3, [r0, #0]
  40e7ae:	f10c 0c04 	add.w	ip, ip, #4
  40e7b2:	45e2      	cmp	sl, ip
  40e7b4:	f109 0904 	add.w	r9, r9, #4
  40e7b8:	d8b7      	bhi.n	40e72a <__multiply+0x66>
  40e7ba:	f8dd a004 	ldr.w	sl, [sp, #4]
  40e7be:	f1b8 0f00 	cmp.w	r8, #0
  40e7c2:	dd0b      	ble.n	40e7dc <__multiply+0x118>
  40e7c4:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  40e7c8:	f1aa 0a04 	sub.w	sl, sl, #4
  40e7cc:	b11b      	cbz	r3, 40e7d6 <__multiply+0x112>
  40e7ce:	e005      	b.n	40e7dc <__multiply+0x118>
  40e7d0:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  40e7d4:	b913      	cbnz	r3, 40e7dc <__multiply+0x118>
  40e7d6:	f1b8 0801 	subs.w	r8, r8, #1
  40e7da:	d1f9      	bne.n	40e7d0 <__multiply+0x10c>
  40e7dc:	9800      	ldr	r0, [sp, #0]
  40e7de:	f8c0 8010 	str.w	r8, [r0, #16]
  40e7e2:	b003      	add	sp, #12
  40e7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040e7e8 <__pow5mult>:
  40e7e8:	f012 0303 	ands.w	r3, r2, #3
  40e7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40e7f0:	4614      	mov	r4, r2
  40e7f2:	4607      	mov	r7, r0
  40e7f4:	d12e      	bne.n	40e854 <__pow5mult+0x6c>
  40e7f6:	460d      	mov	r5, r1
  40e7f8:	10a4      	asrs	r4, r4, #2
  40e7fa:	d01c      	beq.n	40e836 <__pow5mult+0x4e>
  40e7fc:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40e7fe:	b396      	cbz	r6, 40e866 <__pow5mult+0x7e>
  40e800:	07e3      	lsls	r3, r4, #31
  40e802:	f04f 0800 	mov.w	r8, #0
  40e806:	d406      	bmi.n	40e816 <__pow5mult+0x2e>
  40e808:	1064      	asrs	r4, r4, #1
  40e80a:	d014      	beq.n	40e836 <__pow5mult+0x4e>
  40e80c:	6830      	ldr	r0, [r6, #0]
  40e80e:	b1a8      	cbz	r0, 40e83c <__pow5mult+0x54>
  40e810:	4606      	mov	r6, r0
  40e812:	07e3      	lsls	r3, r4, #31
  40e814:	d5f8      	bpl.n	40e808 <__pow5mult+0x20>
  40e816:	4632      	mov	r2, r6
  40e818:	4629      	mov	r1, r5
  40e81a:	4638      	mov	r0, r7
  40e81c:	f7ff ff52 	bl	40e6c4 <__multiply>
  40e820:	b1b5      	cbz	r5, 40e850 <__pow5mult+0x68>
  40e822:	686a      	ldr	r2, [r5, #4]
  40e824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40e826:	1064      	asrs	r4, r4, #1
  40e828:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40e82c:	6029      	str	r1, [r5, #0]
  40e82e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40e832:	4605      	mov	r5, r0
  40e834:	d1ea      	bne.n	40e80c <__pow5mult+0x24>
  40e836:	4628      	mov	r0, r5
  40e838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e83c:	4632      	mov	r2, r6
  40e83e:	4631      	mov	r1, r6
  40e840:	4638      	mov	r0, r7
  40e842:	f7ff ff3f 	bl	40e6c4 <__multiply>
  40e846:	6030      	str	r0, [r6, #0]
  40e848:	f8c0 8000 	str.w	r8, [r0]
  40e84c:	4606      	mov	r6, r0
  40e84e:	e7e0      	b.n	40e812 <__pow5mult+0x2a>
  40e850:	4605      	mov	r5, r0
  40e852:	e7d9      	b.n	40e808 <__pow5mult+0x20>
  40e854:	1e5a      	subs	r2, r3, #1
  40e856:	4d0b      	ldr	r5, [pc, #44]	; (40e884 <__pow5mult+0x9c>)
  40e858:	2300      	movs	r3, #0
  40e85a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40e85e:	f7ff fe97 	bl	40e590 <__multadd>
  40e862:	4605      	mov	r5, r0
  40e864:	e7c8      	b.n	40e7f8 <__pow5mult+0x10>
  40e866:	2101      	movs	r1, #1
  40e868:	4638      	mov	r0, r7
  40e86a:	f7ff fe61 	bl	40e530 <_Balloc>
  40e86e:	f240 2171 	movw	r1, #625	; 0x271
  40e872:	2201      	movs	r2, #1
  40e874:	2300      	movs	r3, #0
  40e876:	6141      	str	r1, [r0, #20]
  40e878:	6102      	str	r2, [r0, #16]
  40e87a:	4606      	mov	r6, r0
  40e87c:	64b8      	str	r0, [r7, #72]	; 0x48
  40e87e:	6003      	str	r3, [r0, #0]
  40e880:	e7be      	b.n	40e800 <__pow5mult+0x18>
  40e882:	bf00      	nop
  40e884:	00411530 	.word	0x00411530

0040e888 <__lshift>:
  40e888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40e88c:	4691      	mov	r9, r2
  40e88e:	690a      	ldr	r2, [r1, #16]
  40e890:	688b      	ldr	r3, [r1, #8]
  40e892:	ea4f 1469 	mov.w	r4, r9, asr #5
  40e896:	eb04 0802 	add.w	r8, r4, r2
  40e89a:	f108 0501 	add.w	r5, r8, #1
  40e89e:	429d      	cmp	r5, r3
  40e8a0:	460e      	mov	r6, r1
  40e8a2:	4607      	mov	r7, r0
  40e8a4:	6849      	ldr	r1, [r1, #4]
  40e8a6:	dd04      	ble.n	40e8b2 <__lshift+0x2a>
  40e8a8:	005b      	lsls	r3, r3, #1
  40e8aa:	429d      	cmp	r5, r3
  40e8ac:	f101 0101 	add.w	r1, r1, #1
  40e8b0:	dcfa      	bgt.n	40e8a8 <__lshift+0x20>
  40e8b2:	4638      	mov	r0, r7
  40e8b4:	f7ff fe3c 	bl	40e530 <_Balloc>
  40e8b8:	2c00      	cmp	r4, #0
  40e8ba:	f100 0314 	add.w	r3, r0, #20
  40e8be:	dd06      	ble.n	40e8ce <__lshift+0x46>
  40e8c0:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  40e8c4:	2100      	movs	r1, #0
  40e8c6:	f843 1b04 	str.w	r1, [r3], #4
  40e8ca:	429a      	cmp	r2, r3
  40e8cc:	d1fb      	bne.n	40e8c6 <__lshift+0x3e>
  40e8ce:	6934      	ldr	r4, [r6, #16]
  40e8d0:	f106 0114 	add.w	r1, r6, #20
  40e8d4:	f019 091f 	ands.w	r9, r9, #31
  40e8d8:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  40e8dc:	d01d      	beq.n	40e91a <__lshift+0x92>
  40e8de:	f1c9 0c20 	rsb	ip, r9, #32
  40e8e2:	2200      	movs	r2, #0
  40e8e4:	680c      	ldr	r4, [r1, #0]
  40e8e6:	fa04 f409 	lsl.w	r4, r4, r9
  40e8ea:	4314      	orrs	r4, r2
  40e8ec:	f843 4b04 	str.w	r4, [r3], #4
  40e8f0:	f851 2b04 	ldr.w	r2, [r1], #4
  40e8f4:	458e      	cmp	lr, r1
  40e8f6:	fa22 f20c 	lsr.w	r2, r2, ip
  40e8fa:	d8f3      	bhi.n	40e8e4 <__lshift+0x5c>
  40e8fc:	601a      	str	r2, [r3, #0]
  40e8fe:	b10a      	cbz	r2, 40e904 <__lshift+0x7c>
  40e900:	f108 0502 	add.w	r5, r8, #2
  40e904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40e906:	6872      	ldr	r2, [r6, #4]
  40e908:	3d01      	subs	r5, #1
  40e90a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40e90e:	6105      	str	r5, [r0, #16]
  40e910:	6031      	str	r1, [r6, #0]
  40e912:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40e916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40e91a:	3b04      	subs	r3, #4
  40e91c:	f851 2b04 	ldr.w	r2, [r1], #4
  40e920:	f843 2f04 	str.w	r2, [r3, #4]!
  40e924:	458e      	cmp	lr, r1
  40e926:	d8f9      	bhi.n	40e91c <__lshift+0x94>
  40e928:	e7ec      	b.n	40e904 <__lshift+0x7c>
  40e92a:	bf00      	nop

0040e92c <__mcmp>:
  40e92c:	b430      	push	{r4, r5}
  40e92e:	690b      	ldr	r3, [r1, #16]
  40e930:	4605      	mov	r5, r0
  40e932:	6900      	ldr	r0, [r0, #16]
  40e934:	1ac0      	subs	r0, r0, r3
  40e936:	d10f      	bne.n	40e958 <__mcmp+0x2c>
  40e938:	009b      	lsls	r3, r3, #2
  40e93a:	3514      	adds	r5, #20
  40e93c:	3114      	adds	r1, #20
  40e93e:	4419      	add	r1, r3
  40e940:	442b      	add	r3, r5
  40e942:	e001      	b.n	40e948 <__mcmp+0x1c>
  40e944:	429d      	cmp	r5, r3
  40e946:	d207      	bcs.n	40e958 <__mcmp+0x2c>
  40e948:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40e94c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40e950:	4294      	cmp	r4, r2
  40e952:	d0f7      	beq.n	40e944 <__mcmp+0x18>
  40e954:	d302      	bcc.n	40e95c <__mcmp+0x30>
  40e956:	2001      	movs	r0, #1
  40e958:	bc30      	pop	{r4, r5}
  40e95a:	4770      	bx	lr
  40e95c:	f04f 30ff 	mov.w	r0, #4294967295
  40e960:	e7fa      	b.n	40e958 <__mcmp+0x2c>
  40e962:	bf00      	nop

0040e964 <__mdiff>:
  40e964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40e968:	690f      	ldr	r7, [r1, #16]
  40e96a:	460e      	mov	r6, r1
  40e96c:	6911      	ldr	r1, [r2, #16]
  40e96e:	1a7f      	subs	r7, r7, r1
  40e970:	2f00      	cmp	r7, #0
  40e972:	4690      	mov	r8, r2
  40e974:	d117      	bne.n	40e9a6 <__mdiff+0x42>
  40e976:	0089      	lsls	r1, r1, #2
  40e978:	f106 0514 	add.w	r5, r6, #20
  40e97c:	f102 0e14 	add.w	lr, r2, #20
  40e980:	186b      	adds	r3, r5, r1
  40e982:	4471      	add	r1, lr
  40e984:	e001      	b.n	40e98a <__mdiff+0x26>
  40e986:	429d      	cmp	r5, r3
  40e988:	d25c      	bcs.n	40ea44 <__mdiff+0xe0>
  40e98a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40e98e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40e992:	42a2      	cmp	r2, r4
  40e994:	d0f7      	beq.n	40e986 <__mdiff+0x22>
  40e996:	d25e      	bcs.n	40ea56 <__mdiff+0xf2>
  40e998:	4633      	mov	r3, r6
  40e99a:	462c      	mov	r4, r5
  40e99c:	4646      	mov	r6, r8
  40e99e:	4675      	mov	r5, lr
  40e9a0:	4698      	mov	r8, r3
  40e9a2:	2701      	movs	r7, #1
  40e9a4:	e005      	b.n	40e9b2 <__mdiff+0x4e>
  40e9a6:	db58      	blt.n	40ea5a <__mdiff+0xf6>
  40e9a8:	f106 0514 	add.w	r5, r6, #20
  40e9ac:	f108 0414 	add.w	r4, r8, #20
  40e9b0:	2700      	movs	r7, #0
  40e9b2:	6871      	ldr	r1, [r6, #4]
  40e9b4:	f7ff fdbc 	bl	40e530 <_Balloc>
  40e9b8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40e9bc:	6936      	ldr	r6, [r6, #16]
  40e9be:	60c7      	str	r7, [r0, #12]
  40e9c0:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40e9c4:	46a6      	mov	lr, r4
  40e9c6:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  40e9ca:	f100 0414 	add.w	r4, r0, #20
  40e9ce:	2300      	movs	r3, #0
  40e9d0:	f85e 1b04 	ldr.w	r1, [lr], #4
  40e9d4:	f855 8b04 	ldr.w	r8, [r5], #4
  40e9d8:	b28a      	uxth	r2, r1
  40e9da:	fa13 f388 	uxtah	r3, r3, r8
  40e9de:	0c09      	lsrs	r1, r1, #16
  40e9e0:	1a9a      	subs	r2, r3, r2
  40e9e2:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40e9e6:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40e9ea:	b292      	uxth	r2, r2
  40e9ec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40e9f0:	45f4      	cmp	ip, lr
  40e9f2:	f844 2b04 	str.w	r2, [r4], #4
  40e9f6:	ea4f 4323 	mov.w	r3, r3, asr #16
  40e9fa:	d8e9      	bhi.n	40e9d0 <__mdiff+0x6c>
  40e9fc:	42af      	cmp	r7, r5
  40e9fe:	d917      	bls.n	40ea30 <__mdiff+0xcc>
  40ea00:	46a4      	mov	ip, r4
  40ea02:	46ae      	mov	lr, r5
  40ea04:	f85e 2b04 	ldr.w	r2, [lr], #4
  40ea08:	fa13 f382 	uxtah	r3, r3, r2
  40ea0c:	1419      	asrs	r1, r3, #16
  40ea0e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40ea12:	b29b      	uxth	r3, r3
  40ea14:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  40ea18:	4577      	cmp	r7, lr
  40ea1a:	f84c 2b04 	str.w	r2, [ip], #4
  40ea1e:	ea4f 4321 	mov.w	r3, r1, asr #16
  40ea22:	d8ef      	bhi.n	40ea04 <__mdiff+0xa0>
  40ea24:	43ed      	mvns	r5, r5
  40ea26:	442f      	add	r7, r5
  40ea28:	f027 0703 	bic.w	r7, r7, #3
  40ea2c:	3704      	adds	r7, #4
  40ea2e:	443c      	add	r4, r7
  40ea30:	3c04      	subs	r4, #4
  40ea32:	b922      	cbnz	r2, 40ea3e <__mdiff+0xda>
  40ea34:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40ea38:	3e01      	subs	r6, #1
  40ea3a:	2b00      	cmp	r3, #0
  40ea3c:	d0fa      	beq.n	40ea34 <__mdiff+0xd0>
  40ea3e:	6106      	str	r6, [r0, #16]
  40ea40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ea44:	2100      	movs	r1, #0
  40ea46:	f7ff fd73 	bl	40e530 <_Balloc>
  40ea4a:	2201      	movs	r2, #1
  40ea4c:	2300      	movs	r3, #0
  40ea4e:	6102      	str	r2, [r0, #16]
  40ea50:	6143      	str	r3, [r0, #20]
  40ea52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ea56:	4674      	mov	r4, lr
  40ea58:	e7ab      	b.n	40e9b2 <__mdiff+0x4e>
  40ea5a:	4633      	mov	r3, r6
  40ea5c:	f106 0414 	add.w	r4, r6, #20
  40ea60:	f102 0514 	add.w	r5, r2, #20
  40ea64:	4616      	mov	r6, r2
  40ea66:	2701      	movs	r7, #1
  40ea68:	4698      	mov	r8, r3
  40ea6a:	e7a2      	b.n	40e9b2 <__mdiff+0x4e>

0040ea6c <__d2b>:
  40ea6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ea70:	b082      	sub	sp, #8
  40ea72:	2101      	movs	r1, #1
  40ea74:	461c      	mov	r4, r3
  40ea76:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40ea7a:	4615      	mov	r5, r2
  40ea7c:	9e08      	ldr	r6, [sp, #32]
  40ea7e:	f7ff fd57 	bl	40e530 <_Balloc>
  40ea82:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40ea86:	4680      	mov	r8, r0
  40ea88:	b10f      	cbz	r7, 40ea8e <__d2b+0x22>
  40ea8a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40ea8e:	9401      	str	r4, [sp, #4]
  40ea90:	b31d      	cbz	r5, 40eada <__d2b+0x6e>
  40ea92:	a802      	add	r0, sp, #8
  40ea94:	f840 5d08 	str.w	r5, [r0, #-8]!
  40ea98:	f7ff fdda 	bl	40e650 <__lo0bits>
  40ea9c:	2800      	cmp	r0, #0
  40ea9e:	d134      	bne.n	40eb0a <__d2b+0x9e>
  40eaa0:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40eaa4:	f8c8 2014 	str.w	r2, [r8, #20]
  40eaa8:	2b00      	cmp	r3, #0
  40eaaa:	bf0c      	ite	eq
  40eaac:	2101      	moveq	r1, #1
  40eaae:	2102      	movne	r1, #2
  40eab0:	f8c8 3018 	str.w	r3, [r8, #24]
  40eab4:	f8c8 1010 	str.w	r1, [r8, #16]
  40eab8:	b9df      	cbnz	r7, 40eaf2 <__d2b+0x86>
  40eaba:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40eabe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40eac2:	6030      	str	r0, [r6, #0]
  40eac4:	6918      	ldr	r0, [r3, #16]
  40eac6:	f7ff fda3 	bl	40e610 <__hi0bits>
  40eaca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40eacc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40ead0:	6018      	str	r0, [r3, #0]
  40ead2:	4640      	mov	r0, r8
  40ead4:	b002      	add	sp, #8
  40ead6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40eada:	a801      	add	r0, sp, #4
  40eadc:	f7ff fdb8 	bl	40e650 <__lo0bits>
  40eae0:	9b01      	ldr	r3, [sp, #4]
  40eae2:	f8c8 3014 	str.w	r3, [r8, #20]
  40eae6:	2101      	movs	r1, #1
  40eae8:	3020      	adds	r0, #32
  40eaea:	f8c8 1010 	str.w	r1, [r8, #16]
  40eaee:	2f00      	cmp	r7, #0
  40eaf0:	d0e3      	beq.n	40eaba <__d2b+0x4e>
  40eaf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40eaf4:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40eaf8:	4407      	add	r7, r0
  40eafa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40eafe:	6037      	str	r7, [r6, #0]
  40eb00:	6018      	str	r0, [r3, #0]
  40eb02:	4640      	mov	r0, r8
  40eb04:	b002      	add	sp, #8
  40eb06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40eb0a:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40eb0e:	f1c0 0220 	rsb	r2, r0, #32
  40eb12:	fa03 f202 	lsl.w	r2, r3, r2
  40eb16:	430a      	orrs	r2, r1
  40eb18:	40c3      	lsrs	r3, r0
  40eb1a:	9301      	str	r3, [sp, #4]
  40eb1c:	f8c8 2014 	str.w	r2, [r8, #20]
  40eb20:	e7c2      	b.n	40eaa8 <__d2b+0x3c>
  40eb22:	bf00      	nop

0040eb24 <_realloc_r>:
  40eb24:	2900      	cmp	r1, #0
  40eb26:	f000 8095 	beq.w	40ec54 <_realloc_r+0x130>
  40eb2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40eb2e:	460d      	mov	r5, r1
  40eb30:	4616      	mov	r6, r2
  40eb32:	b083      	sub	sp, #12
  40eb34:	4680      	mov	r8, r0
  40eb36:	f106 070b 	add.w	r7, r6, #11
  40eb3a:	f7ff fced 	bl	40e518 <__malloc_lock>
  40eb3e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40eb42:	2f16      	cmp	r7, #22
  40eb44:	f02e 0403 	bic.w	r4, lr, #3
  40eb48:	f1a5 0908 	sub.w	r9, r5, #8
  40eb4c:	d83c      	bhi.n	40ebc8 <_realloc_r+0xa4>
  40eb4e:	2210      	movs	r2, #16
  40eb50:	4617      	mov	r7, r2
  40eb52:	42be      	cmp	r6, r7
  40eb54:	d83d      	bhi.n	40ebd2 <_realloc_r+0xae>
  40eb56:	4294      	cmp	r4, r2
  40eb58:	da43      	bge.n	40ebe2 <_realloc_r+0xbe>
  40eb5a:	4bc4      	ldr	r3, [pc, #784]	; (40ee6c <_realloc_r+0x348>)
  40eb5c:	6899      	ldr	r1, [r3, #8]
  40eb5e:	eb09 0004 	add.w	r0, r9, r4
  40eb62:	4288      	cmp	r0, r1
  40eb64:	f000 80b4 	beq.w	40ecd0 <_realloc_r+0x1ac>
  40eb68:	6843      	ldr	r3, [r0, #4]
  40eb6a:	f023 0101 	bic.w	r1, r3, #1
  40eb6e:	4401      	add	r1, r0
  40eb70:	6849      	ldr	r1, [r1, #4]
  40eb72:	07c9      	lsls	r1, r1, #31
  40eb74:	d54c      	bpl.n	40ec10 <_realloc_r+0xec>
  40eb76:	f01e 0f01 	tst.w	lr, #1
  40eb7a:	f000 809b 	beq.w	40ecb4 <_realloc_r+0x190>
  40eb7e:	4631      	mov	r1, r6
  40eb80:	4640      	mov	r0, r8
  40eb82:	f7ff f949 	bl	40de18 <_malloc_r>
  40eb86:	4606      	mov	r6, r0
  40eb88:	2800      	cmp	r0, #0
  40eb8a:	d03a      	beq.n	40ec02 <_realloc_r+0xde>
  40eb8c:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40eb90:	f023 0301 	bic.w	r3, r3, #1
  40eb94:	444b      	add	r3, r9
  40eb96:	f1a0 0208 	sub.w	r2, r0, #8
  40eb9a:	429a      	cmp	r2, r3
  40eb9c:	f000 8121 	beq.w	40ede2 <_realloc_r+0x2be>
  40eba0:	1f22      	subs	r2, r4, #4
  40eba2:	2a24      	cmp	r2, #36	; 0x24
  40eba4:	f200 8107 	bhi.w	40edb6 <_realloc_r+0x292>
  40eba8:	2a13      	cmp	r2, #19
  40ebaa:	f200 80db 	bhi.w	40ed64 <_realloc_r+0x240>
  40ebae:	4603      	mov	r3, r0
  40ebb0:	462a      	mov	r2, r5
  40ebb2:	6811      	ldr	r1, [r2, #0]
  40ebb4:	6019      	str	r1, [r3, #0]
  40ebb6:	6851      	ldr	r1, [r2, #4]
  40ebb8:	6059      	str	r1, [r3, #4]
  40ebba:	6892      	ldr	r2, [r2, #8]
  40ebbc:	609a      	str	r2, [r3, #8]
  40ebbe:	4629      	mov	r1, r5
  40ebc0:	4640      	mov	r0, r8
  40ebc2:	f7ff f831 	bl	40dc28 <_free_r>
  40ebc6:	e01c      	b.n	40ec02 <_realloc_r+0xde>
  40ebc8:	f027 0707 	bic.w	r7, r7, #7
  40ebcc:	2f00      	cmp	r7, #0
  40ebce:	463a      	mov	r2, r7
  40ebd0:	dabf      	bge.n	40eb52 <_realloc_r+0x2e>
  40ebd2:	2600      	movs	r6, #0
  40ebd4:	230c      	movs	r3, #12
  40ebd6:	4630      	mov	r0, r6
  40ebd8:	f8c8 3000 	str.w	r3, [r8]
  40ebdc:	b003      	add	sp, #12
  40ebde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ebe2:	462e      	mov	r6, r5
  40ebe4:	1be3      	subs	r3, r4, r7
  40ebe6:	2b0f      	cmp	r3, #15
  40ebe8:	d81e      	bhi.n	40ec28 <_realloc_r+0x104>
  40ebea:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40ebee:	f003 0301 	and.w	r3, r3, #1
  40ebf2:	4323      	orrs	r3, r4
  40ebf4:	444c      	add	r4, r9
  40ebf6:	f8c9 3004 	str.w	r3, [r9, #4]
  40ebfa:	6863      	ldr	r3, [r4, #4]
  40ebfc:	f043 0301 	orr.w	r3, r3, #1
  40ec00:	6063      	str	r3, [r4, #4]
  40ec02:	4640      	mov	r0, r8
  40ec04:	f7ff fc8e 	bl	40e524 <__malloc_unlock>
  40ec08:	4630      	mov	r0, r6
  40ec0a:	b003      	add	sp, #12
  40ec0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ec10:	f023 0303 	bic.w	r3, r3, #3
  40ec14:	18e1      	adds	r1, r4, r3
  40ec16:	4291      	cmp	r1, r2
  40ec18:	db1f      	blt.n	40ec5a <_realloc_r+0x136>
  40ec1a:	68c3      	ldr	r3, [r0, #12]
  40ec1c:	6882      	ldr	r2, [r0, #8]
  40ec1e:	462e      	mov	r6, r5
  40ec20:	60d3      	str	r3, [r2, #12]
  40ec22:	460c      	mov	r4, r1
  40ec24:	609a      	str	r2, [r3, #8]
  40ec26:	e7dd      	b.n	40ebe4 <_realloc_r+0xc0>
  40ec28:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40ec2c:	eb09 0107 	add.w	r1, r9, r7
  40ec30:	f002 0201 	and.w	r2, r2, #1
  40ec34:	444c      	add	r4, r9
  40ec36:	f043 0301 	orr.w	r3, r3, #1
  40ec3a:	4317      	orrs	r7, r2
  40ec3c:	f8c9 7004 	str.w	r7, [r9, #4]
  40ec40:	604b      	str	r3, [r1, #4]
  40ec42:	6863      	ldr	r3, [r4, #4]
  40ec44:	f043 0301 	orr.w	r3, r3, #1
  40ec48:	3108      	adds	r1, #8
  40ec4a:	6063      	str	r3, [r4, #4]
  40ec4c:	4640      	mov	r0, r8
  40ec4e:	f7fe ffeb 	bl	40dc28 <_free_r>
  40ec52:	e7d6      	b.n	40ec02 <_realloc_r+0xde>
  40ec54:	4611      	mov	r1, r2
  40ec56:	f7ff b8df 	b.w	40de18 <_malloc_r>
  40ec5a:	f01e 0f01 	tst.w	lr, #1
  40ec5e:	d18e      	bne.n	40eb7e <_realloc_r+0x5a>
  40ec60:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40ec64:	eba9 0a01 	sub.w	sl, r9, r1
  40ec68:	f8da 1004 	ldr.w	r1, [sl, #4]
  40ec6c:	f021 0103 	bic.w	r1, r1, #3
  40ec70:	440b      	add	r3, r1
  40ec72:	4423      	add	r3, r4
  40ec74:	4293      	cmp	r3, r2
  40ec76:	db25      	blt.n	40ecc4 <_realloc_r+0x1a0>
  40ec78:	68c2      	ldr	r2, [r0, #12]
  40ec7a:	6881      	ldr	r1, [r0, #8]
  40ec7c:	4656      	mov	r6, sl
  40ec7e:	60ca      	str	r2, [r1, #12]
  40ec80:	6091      	str	r1, [r2, #8]
  40ec82:	f8da 100c 	ldr.w	r1, [sl, #12]
  40ec86:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40ec8a:	1f22      	subs	r2, r4, #4
  40ec8c:	2a24      	cmp	r2, #36	; 0x24
  40ec8e:	60c1      	str	r1, [r0, #12]
  40ec90:	6088      	str	r0, [r1, #8]
  40ec92:	f200 8094 	bhi.w	40edbe <_realloc_r+0x29a>
  40ec96:	2a13      	cmp	r2, #19
  40ec98:	d96f      	bls.n	40ed7a <_realloc_r+0x256>
  40ec9a:	6829      	ldr	r1, [r5, #0]
  40ec9c:	f8ca 1008 	str.w	r1, [sl, #8]
  40eca0:	6869      	ldr	r1, [r5, #4]
  40eca2:	f8ca 100c 	str.w	r1, [sl, #12]
  40eca6:	2a1b      	cmp	r2, #27
  40eca8:	f200 80a2 	bhi.w	40edf0 <_realloc_r+0x2cc>
  40ecac:	3508      	adds	r5, #8
  40ecae:	f10a 0210 	add.w	r2, sl, #16
  40ecb2:	e063      	b.n	40ed7c <_realloc_r+0x258>
  40ecb4:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40ecb8:	eba9 0a03 	sub.w	sl, r9, r3
  40ecbc:	f8da 1004 	ldr.w	r1, [sl, #4]
  40ecc0:	f021 0103 	bic.w	r1, r1, #3
  40ecc4:	1863      	adds	r3, r4, r1
  40ecc6:	4293      	cmp	r3, r2
  40ecc8:	f6ff af59 	blt.w	40eb7e <_realloc_r+0x5a>
  40eccc:	4656      	mov	r6, sl
  40ecce:	e7d8      	b.n	40ec82 <_realloc_r+0x15e>
  40ecd0:	6841      	ldr	r1, [r0, #4]
  40ecd2:	f021 0b03 	bic.w	fp, r1, #3
  40ecd6:	44a3      	add	fp, r4
  40ecd8:	f107 0010 	add.w	r0, r7, #16
  40ecdc:	4583      	cmp	fp, r0
  40ecde:	da56      	bge.n	40ed8e <_realloc_r+0x26a>
  40ece0:	f01e 0f01 	tst.w	lr, #1
  40ece4:	f47f af4b 	bne.w	40eb7e <_realloc_r+0x5a>
  40ece8:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40ecec:	eba9 0a01 	sub.w	sl, r9, r1
  40ecf0:	f8da 1004 	ldr.w	r1, [sl, #4]
  40ecf4:	f021 0103 	bic.w	r1, r1, #3
  40ecf8:	448b      	add	fp, r1
  40ecfa:	4558      	cmp	r0, fp
  40ecfc:	dce2      	bgt.n	40ecc4 <_realloc_r+0x1a0>
  40ecfe:	4656      	mov	r6, sl
  40ed00:	f8da 100c 	ldr.w	r1, [sl, #12]
  40ed04:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40ed08:	1f22      	subs	r2, r4, #4
  40ed0a:	2a24      	cmp	r2, #36	; 0x24
  40ed0c:	60c1      	str	r1, [r0, #12]
  40ed0e:	6088      	str	r0, [r1, #8]
  40ed10:	f200 808f 	bhi.w	40ee32 <_realloc_r+0x30e>
  40ed14:	2a13      	cmp	r2, #19
  40ed16:	f240 808a 	bls.w	40ee2e <_realloc_r+0x30a>
  40ed1a:	6829      	ldr	r1, [r5, #0]
  40ed1c:	f8ca 1008 	str.w	r1, [sl, #8]
  40ed20:	6869      	ldr	r1, [r5, #4]
  40ed22:	f8ca 100c 	str.w	r1, [sl, #12]
  40ed26:	2a1b      	cmp	r2, #27
  40ed28:	f200 808a 	bhi.w	40ee40 <_realloc_r+0x31c>
  40ed2c:	3508      	adds	r5, #8
  40ed2e:	f10a 0210 	add.w	r2, sl, #16
  40ed32:	6829      	ldr	r1, [r5, #0]
  40ed34:	6011      	str	r1, [r2, #0]
  40ed36:	6869      	ldr	r1, [r5, #4]
  40ed38:	6051      	str	r1, [r2, #4]
  40ed3a:	68a9      	ldr	r1, [r5, #8]
  40ed3c:	6091      	str	r1, [r2, #8]
  40ed3e:	eb0a 0107 	add.w	r1, sl, r7
  40ed42:	ebab 0207 	sub.w	r2, fp, r7
  40ed46:	f042 0201 	orr.w	r2, r2, #1
  40ed4a:	6099      	str	r1, [r3, #8]
  40ed4c:	604a      	str	r2, [r1, #4]
  40ed4e:	f8da 3004 	ldr.w	r3, [sl, #4]
  40ed52:	f003 0301 	and.w	r3, r3, #1
  40ed56:	431f      	orrs	r7, r3
  40ed58:	4640      	mov	r0, r8
  40ed5a:	f8ca 7004 	str.w	r7, [sl, #4]
  40ed5e:	f7ff fbe1 	bl	40e524 <__malloc_unlock>
  40ed62:	e751      	b.n	40ec08 <_realloc_r+0xe4>
  40ed64:	682b      	ldr	r3, [r5, #0]
  40ed66:	6003      	str	r3, [r0, #0]
  40ed68:	686b      	ldr	r3, [r5, #4]
  40ed6a:	6043      	str	r3, [r0, #4]
  40ed6c:	2a1b      	cmp	r2, #27
  40ed6e:	d82d      	bhi.n	40edcc <_realloc_r+0x2a8>
  40ed70:	f100 0308 	add.w	r3, r0, #8
  40ed74:	f105 0208 	add.w	r2, r5, #8
  40ed78:	e71b      	b.n	40ebb2 <_realloc_r+0x8e>
  40ed7a:	4632      	mov	r2, r6
  40ed7c:	6829      	ldr	r1, [r5, #0]
  40ed7e:	6011      	str	r1, [r2, #0]
  40ed80:	6869      	ldr	r1, [r5, #4]
  40ed82:	6051      	str	r1, [r2, #4]
  40ed84:	68a9      	ldr	r1, [r5, #8]
  40ed86:	6091      	str	r1, [r2, #8]
  40ed88:	461c      	mov	r4, r3
  40ed8a:	46d1      	mov	r9, sl
  40ed8c:	e72a      	b.n	40ebe4 <_realloc_r+0xc0>
  40ed8e:	eb09 0107 	add.w	r1, r9, r7
  40ed92:	ebab 0b07 	sub.w	fp, fp, r7
  40ed96:	f04b 0201 	orr.w	r2, fp, #1
  40ed9a:	6099      	str	r1, [r3, #8]
  40ed9c:	604a      	str	r2, [r1, #4]
  40ed9e:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40eda2:	f003 0301 	and.w	r3, r3, #1
  40eda6:	431f      	orrs	r7, r3
  40eda8:	4640      	mov	r0, r8
  40edaa:	f845 7c04 	str.w	r7, [r5, #-4]
  40edae:	f7ff fbb9 	bl	40e524 <__malloc_unlock>
  40edb2:	462e      	mov	r6, r5
  40edb4:	e728      	b.n	40ec08 <_realloc_r+0xe4>
  40edb6:	4629      	mov	r1, r5
  40edb8:	f7ff fb4a 	bl	40e450 <memmove>
  40edbc:	e6ff      	b.n	40ebbe <_realloc_r+0x9a>
  40edbe:	4629      	mov	r1, r5
  40edc0:	4630      	mov	r0, r6
  40edc2:	461c      	mov	r4, r3
  40edc4:	46d1      	mov	r9, sl
  40edc6:	f7ff fb43 	bl	40e450 <memmove>
  40edca:	e70b      	b.n	40ebe4 <_realloc_r+0xc0>
  40edcc:	68ab      	ldr	r3, [r5, #8]
  40edce:	6083      	str	r3, [r0, #8]
  40edd0:	68eb      	ldr	r3, [r5, #12]
  40edd2:	60c3      	str	r3, [r0, #12]
  40edd4:	2a24      	cmp	r2, #36	; 0x24
  40edd6:	d017      	beq.n	40ee08 <_realloc_r+0x2e4>
  40edd8:	f100 0310 	add.w	r3, r0, #16
  40eddc:	f105 0210 	add.w	r2, r5, #16
  40ede0:	e6e7      	b.n	40ebb2 <_realloc_r+0x8e>
  40ede2:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40ede6:	f023 0303 	bic.w	r3, r3, #3
  40edea:	441c      	add	r4, r3
  40edec:	462e      	mov	r6, r5
  40edee:	e6f9      	b.n	40ebe4 <_realloc_r+0xc0>
  40edf0:	68a9      	ldr	r1, [r5, #8]
  40edf2:	f8ca 1010 	str.w	r1, [sl, #16]
  40edf6:	68e9      	ldr	r1, [r5, #12]
  40edf8:	f8ca 1014 	str.w	r1, [sl, #20]
  40edfc:	2a24      	cmp	r2, #36	; 0x24
  40edfe:	d00c      	beq.n	40ee1a <_realloc_r+0x2f6>
  40ee00:	3510      	adds	r5, #16
  40ee02:	f10a 0218 	add.w	r2, sl, #24
  40ee06:	e7b9      	b.n	40ed7c <_realloc_r+0x258>
  40ee08:	692b      	ldr	r3, [r5, #16]
  40ee0a:	6103      	str	r3, [r0, #16]
  40ee0c:	696b      	ldr	r3, [r5, #20]
  40ee0e:	6143      	str	r3, [r0, #20]
  40ee10:	f105 0218 	add.w	r2, r5, #24
  40ee14:	f100 0318 	add.w	r3, r0, #24
  40ee18:	e6cb      	b.n	40ebb2 <_realloc_r+0x8e>
  40ee1a:	692a      	ldr	r2, [r5, #16]
  40ee1c:	f8ca 2018 	str.w	r2, [sl, #24]
  40ee20:	696a      	ldr	r2, [r5, #20]
  40ee22:	f8ca 201c 	str.w	r2, [sl, #28]
  40ee26:	3518      	adds	r5, #24
  40ee28:	f10a 0220 	add.w	r2, sl, #32
  40ee2c:	e7a6      	b.n	40ed7c <_realloc_r+0x258>
  40ee2e:	4632      	mov	r2, r6
  40ee30:	e77f      	b.n	40ed32 <_realloc_r+0x20e>
  40ee32:	4629      	mov	r1, r5
  40ee34:	4630      	mov	r0, r6
  40ee36:	9301      	str	r3, [sp, #4]
  40ee38:	f7ff fb0a 	bl	40e450 <memmove>
  40ee3c:	9b01      	ldr	r3, [sp, #4]
  40ee3e:	e77e      	b.n	40ed3e <_realloc_r+0x21a>
  40ee40:	68a9      	ldr	r1, [r5, #8]
  40ee42:	f8ca 1010 	str.w	r1, [sl, #16]
  40ee46:	68e9      	ldr	r1, [r5, #12]
  40ee48:	f8ca 1014 	str.w	r1, [sl, #20]
  40ee4c:	2a24      	cmp	r2, #36	; 0x24
  40ee4e:	d003      	beq.n	40ee58 <_realloc_r+0x334>
  40ee50:	3510      	adds	r5, #16
  40ee52:	f10a 0218 	add.w	r2, sl, #24
  40ee56:	e76c      	b.n	40ed32 <_realloc_r+0x20e>
  40ee58:	692a      	ldr	r2, [r5, #16]
  40ee5a:	f8ca 2018 	str.w	r2, [sl, #24]
  40ee5e:	696a      	ldr	r2, [r5, #20]
  40ee60:	f8ca 201c 	str.w	r2, [sl, #28]
  40ee64:	3518      	adds	r5, #24
  40ee66:	f10a 0220 	add.w	r2, sl, #32
  40ee6a:	e762      	b.n	40ed32 <_realloc_r+0x20e>
  40ee6c:	20000660 	.word	0x20000660

0040ee70 <_sbrk_r>:
  40ee70:	b538      	push	{r3, r4, r5, lr}
  40ee72:	4c07      	ldr	r4, [pc, #28]	; (40ee90 <_sbrk_r+0x20>)
  40ee74:	2300      	movs	r3, #0
  40ee76:	4605      	mov	r5, r0
  40ee78:	4608      	mov	r0, r1
  40ee7a:	6023      	str	r3, [r4, #0]
  40ee7c:	f7f8 fac6 	bl	40740c <_sbrk>
  40ee80:	1c43      	adds	r3, r0, #1
  40ee82:	d000      	beq.n	40ee86 <_sbrk_r+0x16>
  40ee84:	bd38      	pop	{r3, r4, r5, pc}
  40ee86:	6823      	ldr	r3, [r4, #0]
  40ee88:	2b00      	cmp	r3, #0
  40ee8a:	d0fb      	beq.n	40ee84 <_sbrk_r+0x14>
  40ee8c:	602b      	str	r3, [r5, #0]
  40ee8e:	bd38      	pop	{r3, r4, r5, pc}
  40ee90:	20002038 	.word	0x20002038
	...

0040eec0 <strlen>:
  40eec0:	f890 f000 	pld	[r0]
  40eec4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  40eec8:	f020 0107 	bic.w	r1, r0, #7
  40eecc:	f06f 0c00 	mvn.w	ip, #0
  40eed0:	f010 0407 	ands.w	r4, r0, #7
  40eed4:	f891 f020 	pld	[r1, #32]
  40eed8:	f040 8049 	bne.w	40ef6e <strlen+0xae>
  40eedc:	f04f 0400 	mov.w	r4, #0
  40eee0:	f06f 0007 	mvn.w	r0, #7
  40eee4:	e9d1 2300 	ldrd	r2, r3, [r1]
  40eee8:	f891 f040 	pld	[r1, #64]	; 0x40
  40eeec:	f100 0008 	add.w	r0, r0, #8
  40eef0:	fa82 f24c 	uadd8	r2, r2, ip
  40eef4:	faa4 f28c 	sel	r2, r4, ip
  40eef8:	fa83 f34c 	uadd8	r3, r3, ip
  40eefc:	faa2 f38c 	sel	r3, r2, ip
  40ef00:	bb4b      	cbnz	r3, 40ef56 <strlen+0x96>
  40ef02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  40ef06:	fa82 f24c 	uadd8	r2, r2, ip
  40ef0a:	f100 0008 	add.w	r0, r0, #8
  40ef0e:	faa4 f28c 	sel	r2, r4, ip
  40ef12:	fa83 f34c 	uadd8	r3, r3, ip
  40ef16:	faa2 f38c 	sel	r3, r2, ip
  40ef1a:	b9e3      	cbnz	r3, 40ef56 <strlen+0x96>
  40ef1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  40ef20:	fa82 f24c 	uadd8	r2, r2, ip
  40ef24:	f100 0008 	add.w	r0, r0, #8
  40ef28:	faa4 f28c 	sel	r2, r4, ip
  40ef2c:	fa83 f34c 	uadd8	r3, r3, ip
  40ef30:	faa2 f38c 	sel	r3, r2, ip
  40ef34:	b97b      	cbnz	r3, 40ef56 <strlen+0x96>
  40ef36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40ef3a:	f101 0120 	add.w	r1, r1, #32
  40ef3e:	fa82 f24c 	uadd8	r2, r2, ip
  40ef42:	f100 0008 	add.w	r0, r0, #8
  40ef46:	faa4 f28c 	sel	r2, r4, ip
  40ef4a:	fa83 f34c 	uadd8	r3, r3, ip
  40ef4e:	faa2 f38c 	sel	r3, r2, ip
  40ef52:	2b00      	cmp	r3, #0
  40ef54:	d0c6      	beq.n	40eee4 <strlen+0x24>
  40ef56:	2a00      	cmp	r2, #0
  40ef58:	bf04      	itt	eq
  40ef5a:	3004      	addeq	r0, #4
  40ef5c:	461a      	moveq	r2, r3
  40ef5e:	ba12      	rev	r2, r2
  40ef60:	fab2 f282 	clz	r2, r2
  40ef64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  40ef68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40ef6c:	4770      	bx	lr
  40ef6e:	e9d1 2300 	ldrd	r2, r3, [r1]
  40ef72:	f004 0503 	and.w	r5, r4, #3
  40ef76:	f1c4 0000 	rsb	r0, r4, #0
  40ef7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40ef7e:	f014 0f04 	tst.w	r4, #4
  40ef82:	f891 f040 	pld	[r1, #64]	; 0x40
  40ef86:	fa0c f505 	lsl.w	r5, ip, r5
  40ef8a:	ea62 0205 	orn	r2, r2, r5
  40ef8e:	bf1c      	itt	ne
  40ef90:	ea63 0305 	ornne	r3, r3, r5
  40ef94:	4662      	movne	r2, ip
  40ef96:	f04f 0400 	mov.w	r4, #0
  40ef9a:	e7a9      	b.n	40eef0 <strlen+0x30>

0040ef9c <__ssprint_r>:
  40ef9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40efa0:	6893      	ldr	r3, [r2, #8]
  40efa2:	b083      	sub	sp, #12
  40efa4:	4690      	mov	r8, r2
  40efa6:	2b00      	cmp	r3, #0
  40efa8:	d070      	beq.n	40f08c <__ssprint_r+0xf0>
  40efaa:	4682      	mov	sl, r0
  40efac:	460c      	mov	r4, r1
  40efae:	6817      	ldr	r7, [r2, #0]
  40efb0:	688d      	ldr	r5, [r1, #8]
  40efb2:	6808      	ldr	r0, [r1, #0]
  40efb4:	e042      	b.n	40f03c <__ssprint_r+0xa0>
  40efb6:	89a3      	ldrh	r3, [r4, #12]
  40efb8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40efbc:	d02e      	beq.n	40f01c <__ssprint_r+0x80>
  40efbe:	6965      	ldr	r5, [r4, #20]
  40efc0:	6921      	ldr	r1, [r4, #16]
  40efc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  40efc6:	eba0 0b01 	sub.w	fp, r0, r1
  40efca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40efce:	f10b 0001 	add.w	r0, fp, #1
  40efd2:	106d      	asrs	r5, r5, #1
  40efd4:	4430      	add	r0, r6
  40efd6:	42a8      	cmp	r0, r5
  40efd8:	462a      	mov	r2, r5
  40efda:	bf84      	itt	hi
  40efdc:	4605      	movhi	r5, r0
  40efde:	462a      	movhi	r2, r5
  40efe0:	055b      	lsls	r3, r3, #21
  40efe2:	d538      	bpl.n	40f056 <__ssprint_r+0xba>
  40efe4:	4611      	mov	r1, r2
  40efe6:	4650      	mov	r0, sl
  40efe8:	f7fe ff16 	bl	40de18 <_malloc_r>
  40efec:	2800      	cmp	r0, #0
  40efee:	d03c      	beq.n	40f06a <__ssprint_r+0xce>
  40eff0:	465a      	mov	r2, fp
  40eff2:	6921      	ldr	r1, [r4, #16]
  40eff4:	9001      	str	r0, [sp, #4]
  40eff6:	f7fc faa1 	bl	40b53c <memcpy>
  40effa:	89a2      	ldrh	r2, [r4, #12]
  40effc:	9b01      	ldr	r3, [sp, #4]
  40effe:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40f002:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40f006:	81a2      	strh	r2, [r4, #12]
  40f008:	eba5 020b 	sub.w	r2, r5, fp
  40f00c:	eb03 000b 	add.w	r0, r3, fp
  40f010:	6165      	str	r5, [r4, #20]
  40f012:	6123      	str	r3, [r4, #16]
  40f014:	6020      	str	r0, [r4, #0]
  40f016:	60a2      	str	r2, [r4, #8]
  40f018:	4635      	mov	r5, r6
  40f01a:	46b3      	mov	fp, r6
  40f01c:	465a      	mov	r2, fp
  40f01e:	4649      	mov	r1, r9
  40f020:	f7ff fa16 	bl	40e450 <memmove>
  40f024:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40f028:	68a2      	ldr	r2, [r4, #8]
  40f02a:	6820      	ldr	r0, [r4, #0]
  40f02c:	1b55      	subs	r5, r2, r5
  40f02e:	4458      	add	r0, fp
  40f030:	1b9e      	subs	r6, r3, r6
  40f032:	60a5      	str	r5, [r4, #8]
  40f034:	6020      	str	r0, [r4, #0]
  40f036:	f8c8 6008 	str.w	r6, [r8, #8]
  40f03a:	b33e      	cbz	r6, 40f08c <__ssprint_r+0xf0>
  40f03c:	687e      	ldr	r6, [r7, #4]
  40f03e:	463b      	mov	r3, r7
  40f040:	3708      	adds	r7, #8
  40f042:	2e00      	cmp	r6, #0
  40f044:	d0fa      	beq.n	40f03c <__ssprint_r+0xa0>
  40f046:	42ae      	cmp	r6, r5
  40f048:	f8d3 9000 	ldr.w	r9, [r3]
  40f04c:	46ab      	mov	fp, r5
  40f04e:	d2b2      	bcs.n	40efb6 <__ssprint_r+0x1a>
  40f050:	4635      	mov	r5, r6
  40f052:	46b3      	mov	fp, r6
  40f054:	e7e2      	b.n	40f01c <__ssprint_r+0x80>
  40f056:	4650      	mov	r0, sl
  40f058:	f7ff fd64 	bl	40eb24 <_realloc_r>
  40f05c:	4603      	mov	r3, r0
  40f05e:	2800      	cmp	r0, #0
  40f060:	d1d2      	bne.n	40f008 <__ssprint_r+0x6c>
  40f062:	6921      	ldr	r1, [r4, #16]
  40f064:	4650      	mov	r0, sl
  40f066:	f7fe fddf 	bl	40dc28 <_free_r>
  40f06a:	230c      	movs	r3, #12
  40f06c:	f8ca 3000 	str.w	r3, [sl]
  40f070:	89a3      	ldrh	r3, [r4, #12]
  40f072:	2200      	movs	r2, #0
  40f074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40f078:	f04f 30ff 	mov.w	r0, #4294967295
  40f07c:	81a3      	strh	r3, [r4, #12]
  40f07e:	f8c8 2008 	str.w	r2, [r8, #8]
  40f082:	f8c8 2004 	str.w	r2, [r8, #4]
  40f086:	b003      	add	sp, #12
  40f088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f08c:	2000      	movs	r0, #0
  40f08e:	f8c8 0004 	str.w	r0, [r8, #4]
  40f092:	b003      	add	sp, #12
  40f094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040f098 <__ascii_wctomb>:
  40f098:	b121      	cbz	r1, 40f0a4 <__ascii_wctomb+0xc>
  40f09a:	2aff      	cmp	r2, #255	; 0xff
  40f09c:	d804      	bhi.n	40f0a8 <__ascii_wctomb+0x10>
  40f09e:	700a      	strb	r2, [r1, #0]
  40f0a0:	2001      	movs	r0, #1
  40f0a2:	4770      	bx	lr
  40f0a4:	4608      	mov	r0, r1
  40f0a6:	4770      	bx	lr
  40f0a8:	238a      	movs	r3, #138	; 0x8a
  40f0aa:	6003      	str	r3, [r0, #0]
  40f0ac:	f04f 30ff 	mov.w	r0, #4294967295
  40f0b0:	4770      	bx	lr
  40f0b2:	bf00      	nop

0040f0b4 <__register_exitproc>:
  40f0b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40f0b8:	4d2c      	ldr	r5, [pc, #176]	; (40f16c <__register_exitproc+0xb8>)
  40f0ba:	4606      	mov	r6, r0
  40f0bc:	6828      	ldr	r0, [r5, #0]
  40f0be:	4698      	mov	r8, r3
  40f0c0:	460f      	mov	r7, r1
  40f0c2:	4691      	mov	r9, r2
  40f0c4:	f7fe fea4 	bl	40de10 <__retarget_lock_acquire_recursive>
  40f0c8:	4b29      	ldr	r3, [pc, #164]	; (40f170 <__register_exitproc+0xbc>)
  40f0ca:	681c      	ldr	r4, [r3, #0]
  40f0cc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40f0d0:	2b00      	cmp	r3, #0
  40f0d2:	d03e      	beq.n	40f152 <__register_exitproc+0x9e>
  40f0d4:	685a      	ldr	r2, [r3, #4]
  40f0d6:	2a1f      	cmp	r2, #31
  40f0d8:	dc1c      	bgt.n	40f114 <__register_exitproc+0x60>
  40f0da:	f102 0e01 	add.w	lr, r2, #1
  40f0de:	b176      	cbz	r6, 40f0fe <__register_exitproc+0x4a>
  40f0e0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40f0e4:	2401      	movs	r4, #1
  40f0e6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40f0ea:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40f0ee:	4094      	lsls	r4, r2
  40f0f0:	4320      	orrs	r0, r4
  40f0f2:	2e02      	cmp	r6, #2
  40f0f4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40f0f8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40f0fc:	d023      	beq.n	40f146 <__register_exitproc+0x92>
  40f0fe:	3202      	adds	r2, #2
  40f100:	f8c3 e004 	str.w	lr, [r3, #4]
  40f104:	6828      	ldr	r0, [r5, #0]
  40f106:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40f10a:	f7fe fe83 	bl	40de14 <__retarget_lock_release_recursive>
  40f10e:	2000      	movs	r0, #0
  40f110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40f114:	4b17      	ldr	r3, [pc, #92]	; (40f174 <__register_exitproc+0xc0>)
  40f116:	b30b      	cbz	r3, 40f15c <__register_exitproc+0xa8>
  40f118:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40f11c:	f3af 8000 	nop.w
  40f120:	4603      	mov	r3, r0
  40f122:	b1d8      	cbz	r0, 40f15c <__register_exitproc+0xa8>
  40f124:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40f128:	6002      	str	r2, [r0, #0]
  40f12a:	2100      	movs	r1, #0
  40f12c:	6041      	str	r1, [r0, #4]
  40f12e:	460a      	mov	r2, r1
  40f130:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40f134:	f04f 0e01 	mov.w	lr, #1
  40f138:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40f13c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40f140:	2e00      	cmp	r6, #0
  40f142:	d0dc      	beq.n	40f0fe <__register_exitproc+0x4a>
  40f144:	e7cc      	b.n	40f0e0 <__register_exitproc+0x2c>
  40f146:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40f14a:	430c      	orrs	r4, r1
  40f14c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40f150:	e7d5      	b.n	40f0fe <__register_exitproc+0x4a>
  40f152:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40f156:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40f15a:	e7bb      	b.n	40f0d4 <__register_exitproc+0x20>
  40f15c:	6828      	ldr	r0, [r5, #0]
  40f15e:	f7fe fe59 	bl	40de14 <__retarget_lock_release_recursive>
  40f162:	f04f 30ff 	mov.w	r0, #4294967295
  40f166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40f16a:	bf00      	nop
  40f16c:	200004f0 	.word	0x200004f0
  40f170:	004113b8 	.word	0x004113b8
  40f174:	00000000 	.word	0x00000000

0040f178 <_calloc_r>:
  40f178:	b510      	push	{r4, lr}
  40f17a:	fb02 f101 	mul.w	r1, r2, r1
  40f17e:	f7fe fe4b 	bl	40de18 <_malloc_r>
  40f182:	4604      	mov	r4, r0
  40f184:	b1d8      	cbz	r0, 40f1be <_calloc_r+0x46>
  40f186:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40f18a:	f022 0203 	bic.w	r2, r2, #3
  40f18e:	3a04      	subs	r2, #4
  40f190:	2a24      	cmp	r2, #36	; 0x24
  40f192:	d818      	bhi.n	40f1c6 <_calloc_r+0x4e>
  40f194:	2a13      	cmp	r2, #19
  40f196:	d914      	bls.n	40f1c2 <_calloc_r+0x4a>
  40f198:	2300      	movs	r3, #0
  40f19a:	2a1b      	cmp	r2, #27
  40f19c:	6003      	str	r3, [r0, #0]
  40f19e:	6043      	str	r3, [r0, #4]
  40f1a0:	d916      	bls.n	40f1d0 <_calloc_r+0x58>
  40f1a2:	2a24      	cmp	r2, #36	; 0x24
  40f1a4:	6083      	str	r3, [r0, #8]
  40f1a6:	60c3      	str	r3, [r0, #12]
  40f1a8:	bf11      	iteee	ne
  40f1aa:	f100 0210 	addne.w	r2, r0, #16
  40f1ae:	6103      	streq	r3, [r0, #16]
  40f1b0:	6143      	streq	r3, [r0, #20]
  40f1b2:	f100 0218 	addeq.w	r2, r0, #24
  40f1b6:	2300      	movs	r3, #0
  40f1b8:	6013      	str	r3, [r2, #0]
  40f1ba:	6053      	str	r3, [r2, #4]
  40f1bc:	6093      	str	r3, [r2, #8]
  40f1be:	4620      	mov	r0, r4
  40f1c0:	bd10      	pop	{r4, pc}
  40f1c2:	4602      	mov	r2, r0
  40f1c4:	e7f7      	b.n	40f1b6 <_calloc_r+0x3e>
  40f1c6:	2100      	movs	r1, #0
  40f1c8:	f7fc fa52 	bl	40b670 <memset>
  40f1cc:	4620      	mov	r0, r4
  40f1ce:	bd10      	pop	{r4, pc}
  40f1d0:	f100 0208 	add.w	r2, r0, #8
  40f1d4:	e7ef      	b.n	40f1b6 <_calloc_r+0x3e>
  40f1d6:	bf00      	nop

0040f1d8 <__aeabi_uldivmod>:
  40f1d8:	b953      	cbnz	r3, 40f1f0 <__aeabi_uldivmod+0x18>
  40f1da:	b94a      	cbnz	r2, 40f1f0 <__aeabi_uldivmod+0x18>
  40f1dc:	2900      	cmp	r1, #0
  40f1de:	bf08      	it	eq
  40f1e0:	2800      	cmpeq	r0, #0
  40f1e2:	bf1c      	itt	ne
  40f1e4:	f04f 31ff 	movne.w	r1, #4294967295
  40f1e8:	f04f 30ff 	movne.w	r0, #4294967295
  40f1ec:	f000 b97a 	b.w	40f4e4 <__aeabi_idiv0>
  40f1f0:	f1ad 0c08 	sub.w	ip, sp, #8
  40f1f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40f1f8:	f000 f806 	bl	40f208 <__udivmoddi4>
  40f1fc:	f8dd e004 	ldr.w	lr, [sp, #4]
  40f200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40f204:	b004      	add	sp, #16
  40f206:	4770      	bx	lr

0040f208 <__udivmoddi4>:
  40f208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40f20c:	468c      	mov	ip, r1
  40f20e:	460d      	mov	r5, r1
  40f210:	4604      	mov	r4, r0
  40f212:	9e08      	ldr	r6, [sp, #32]
  40f214:	2b00      	cmp	r3, #0
  40f216:	d151      	bne.n	40f2bc <__udivmoddi4+0xb4>
  40f218:	428a      	cmp	r2, r1
  40f21a:	4617      	mov	r7, r2
  40f21c:	d96d      	bls.n	40f2fa <__udivmoddi4+0xf2>
  40f21e:	fab2 fe82 	clz	lr, r2
  40f222:	f1be 0f00 	cmp.w	lr, #0
  40f226:	d00b      	beq.n	40f240 <__udivmoddi4+0x38>
  40f228:	f1ce 0c20 	rsb	ip, lr, #32
  40f22c:	fa01 f50e 	lsl.w	r5, r1, lr
  40f230:	fa20 fc0c 	lsr.w	ip, r0, ip
  40f234:	fa02 f70e 	lsl.w	r7, r2, lr
  40f238:	ea4c 0c05 	orr.w	ip, ip, r5
  40f23c:	fa00 f40e 	lsl.w	r4, r0, lr
  40f240:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40f244:	0c25      	lsrs	r5, r4, #16
  40f246:	fbbc f8fa 	udiv	r8, ip, sl
  40f24a:	fa1f f987 	uxth.w	r9, r7
  40f24e:	fb0a cc18 	mls	ip, sl, r8, ip
  40f252:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40f256:	fb08 f309 	mul.w	r3, r8, r9
  40f25a:	42ab      	cmp	r3, r5
  40f25c:	d90a      	bls.n	40f274 <__udivmoddi4+0x6c>
  40f25e:	19ed      	adds	r5, r5, r7
  40f260:	f108 32ff 	add.w	r2, r8, #4294967295
  40f264:	f080 8123 	bcs.w	40f4ae <__udivmoddi4+0x2a6>
  40f268:	42ab      	cmp	r3, r5
  40f26a:	f240 8120 	bls.w	40f4ae <__udivmoddi4+0x2a6>
  40f26e:	f1a8 0802 	sub.w	r8, r8, #2
  40f272:	443d      	add	r5, r7
  40f274:	1aed      	subs	r5, r5, r3
  40f276:	b2a4      	uxth	r4, r4
  40f278:	fbb5 f0fa 	udiv	r0, r5, sl
  40f27c:	fb0a 5510 	mls	r5, sl, r0, r5
  40f280:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40f284:	fb00 f909 	mul.w	r9, r0, r9
  40f288:	45a1      	cmp	r9, r4
  40f28a:	d909      	bls.n	40f2a0 <__udivmoddi4+0x98>
  40f28c:	19e4      	adds	r4, r4, r7
  40f28e:	f100 33ff 	add.w	r3, r0, #4294967295
  40f292:	f080 810a 	bcs.w	40f4aa <__udivmoddi4+0x2a2>
  40f296:	45a1      	cmp	r9, r4
  40f298:	f240 8107 	bls.w	40f4aa <__udivmoddi4+0x2a2>
  40f29c:	3802      	subs	r0, #2
  40f29e:	443c      	add	r4, r7
  40f2a0:	eba4 0409 	sub.w	r4, r4, r9
  40f2a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40f2a8:	2100      	movs	r1, #0
  40f2aa:	2e00      	cmp	r6, #0
  40f2ac:	d061      	beq.n	40f372 <__udivmoddi4+0x16a>
  40f2ae:	fa24 f40e 	lsr.w	r4, r4, lr
  40f2b2:	2300      	movs	r3, #0
  40f2b4:	6034      	str	r4, [r6, #0]
  40f2b6:	6073      	str	r3, [r6, #4]
  40f2b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40f2bc:	428b      	cmp	r3, r1
  40f2be:	d907      	bls.n	40f2d0 <__udivmoddi4+0xc8>
  40f2c0:	2e00      	cmp	r6, #0
  40f2c2:	d054      	beq.n	40f36e <__udivmoddi4+0x166>
  40f2c4:	2100      	movs	r1, #0
  40f2c6:	e886 0021 	stmia.w	r6, {r0, r5}
  40f2ca:	4608      	mov	r0, r1
  40f2cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40f2d0:	fab3 f183 	clz	r1, r3
  40f2d4:	2900      	cmp	r1, #0
  40f2d6:	f040 808e 	bne.w	40f3f6 <__udivmoddi4+0x1ee>
  40f2da:	42ab      	cmp	r3, r5
  40f2dc:	d302      	bcc.n	40f2e4 <__udivmoddi4+0xdc>
  40f2de:	4282      	cmp	r2, r0
  40f2e0:	f200 80fa 	bhi.w	40f4d8 <__udivmoddi4+0x2d0>
  40f2e4:	1a84      	subs	r4, r0, r2
  40f2e6:	eb65 0503 	sbc.w	r5, r5, r3
  40f2ea:	2001      	movs	r0, #1
  40f2ec:	46ac      	mov	ip, r5
  40f2ee:	2e00      	cmp	r6, #0
  40f2f0:	d03f      	beq.n	40f372 <__udivmoddi4+0x16a>
  40f2f2:	e886 1010 	stmia.w	r6, {r4, ip}
  40f2f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40f2fa:	b912      	cbnz	r2, 40f302 <__udivmoddi4+0xfa>
  40f2fc:	2701      	movs	r7, #1
  40f2fe:	fbb7 f7f2 	udiv	r7, r7, r2
  40f302:	fab7 fe87 	clz	lr, r7
  40f306:	f1be 0f00 	cmp.w	lr, #0
  40f30a:	d134      	bne.n	40f376 <__udivmoddi4+0x16e>
  40f30c:	1beb      	subs	r3, r5, r7
  40f30e:	0c3a      	lsrs	r2, r7, #16
  40f310:	fa1f fc87 	uxth.w	ip, r7
  40f314:	2101      	movs	r1, #1
  40f316:	fbb3 f8f2 	udiv	r8, r3, r2
  40f31a:	0c25      	lsrs	r5, r4, #16
  40f31c:	fb02 3318 	mls	r3, r2, r8, r3
  40f320:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40f324:	fb0c f308 	mul.w	r3, ip, r8
  40f328:	42ab      	cmp	r3, r5
  40f32a:	d907      	bls.n	40f33c <__udivmoddi4+0x134>
  40f32c:	19ed      	adds	r5, r5, r7
  40f32e:	f108 30ff 	add.w	r0, r8, #4294967295
  40f332:	d202      	bcs.n	40f33a <__udivmoddi4+0x132>
  40f334:	42ab      	cmp	r3, r5
  40f336:	f200 80d1 	bhi.w	40f4dc <__udivmoddi4+0x2d4>
  40f33a:	4680      	mov	r8, r0
  40f33c:	1aed      	subs	r5, r5, r3
  40f33e:	b2a3      	uxth	r3, r4
  40f340:	fbb5 f0f2 	udiv	r0, r5, r2
  40f344:	fb02 5510 	mls	r5, r2, r0, r5
  40f348:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40f34c:	fb0c fc00 	mul.w	ip, ip, r0
  40f350:	45a4      	cmp	ip, r4
  40f352:	d907      	bls.n	40f364 <__udivmoddi4+0x15c>
  40f354:	19e4      	adds	r4, r4, r7
  40f356:	f100 33ff 	add.w	r3, r0, #4294967295
  40f35a:	d202      	bcs.n	40f362 <__udivmoddi4+0x15a>
  40f35c:	45a4      	cmp	ip, r4
  40f35e:	f200 80b8 	bhi.w	40f4d2 <__udivmoddi4+0x2ca>
  40f362:	4618      	mov	r0, r3
  40f364:	eba4 040c 	sub.w	r4, r4, ip
  40f368:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40f36c:	e79d      	b.n	40f2aa <__udivmoddi4+0xa2>
  40f36e:	4631      	mov	r1, r6
  40f370:	4630      	mov	r0, r6
  40f372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40f376:	f1ce 0420 	rsb	r4, lr, #32
  40f37a:	fa05 f30e 	lsl.w	r3, r5, lr
  40f37e:	fa07 f70e 	lsl.w	r7, r7, lr
  40f382:	fa20 f804 	lsr.w	r8, r0, r4
  40f386:	0c3a      	lsrs	r2, r7, #16
  40f388:	fa25 f404 	lsr.w	r4, r5, r4
  40f38c:	ea48 0803 	orr.w	r8, r8, r3
  40f390:	fbb4 f1f2 	udiv	r1, r4, r2
  40f394:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40f398:	fb02 4411 	mls	r4, r2, r1, r4
  40f39c:	fa1f fc87 	uxth.w	ip, r7
  40f3a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40f3a4:	fb01 f30c 	mul.w	r3, r1, ip
  40f3a8:	42ab      	cmp	r3, r5
  40f3aa:	fa00 f40e 	lsl.w	r4, r0, lr
  40f3ae:	d909      	bls.n	40f3c4 <__udivmoddi4+0x1bc>
  40f3b0:	19ed      	adds	r5, r5, r7
  40f3b2:	f101 30ff 	add.w	r0, r1, #4294967295
  40f3b6:	f080 808a 	bcs.w	40f4ce <__udivmoddi4+0x2c6>
  40f3ba:	42ab      	cmp	r3, r5
  40f3bc:	f240 8087 	bls.w	40f4ce <__udivmoddi4+0x2c6>
  40f3c0:	3902      	subs	r1, #2
  40f3c2:	443d      	add	r5, r7
  40f3c4:	1aeb      	subs	r3, r5, r3
  40f3c6:	fa1f f588 	uxth.w	r5, r8
  40f3ca:	fbb3 f0f2 	udiv	r0, r3, r2
  40f3ce:	fb02 3310 	mls	r3, r2, r0, r3
  40f3d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40f3d6:	fb00 f30c 	mul.w	r3, r0, ip
  40f3da:	42ab      	cmp	r3, r5
  40f3dc:	d907      	bls.n	40f3ee <__udivmoddi4+0x1e6>
  40f3de:	19ed      	adds	r5, r5, r7
  40f3e0:	f100 38ff 	add.w	r8, r0, #4294967295
  40f3e4:	d26f      	bcs.n	40f4c6 <__udivmoddi4+0x2be>
  40f3e6:	42ab      	cmp	r3, r5
  40f3e8:	d96d      	bls.n	40f4c6 <__udivmoddi4+0x2be>
  40f3ea:	3802      	subs	r0, #2
  40f3ec:	443d      	add	r5, r7
  40f3ee:	1aeb      	subs	r3, r5, r3
  40f3f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40f3f4:	e78f      	b.n	40f316 <__udivmoddi4+0x10e>
  40f3f6:	f1c1 0720 	rsb	r7, r1, #32
  40f3fa:	fa22 f807 	lsr.w	r8, r2, r7
  40f3fe:	408b      	lsls	r3, r1
  40f400:	fa05 f401 	lsl.w	r4, r5, r1
  40f404:	ea48 0303 	orr.w	r3, r8, r3
  40f408:	fa20 fe07 	lsr.w	lr, r0, r7
  40f40c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40f410:	40fd      	lsrs	r5, r7
  40f412:	ea4e 0e04 	orr.w	lr, lr, r4
  40f416:	fbb5 f9fc 	udiv	r9, r5, ip
  40f41a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40f41e:	fb0c 5519 	mls	r5, ip, r9, r5
  40f422:	fa1f f883 	uxth.w	r8, r3
  40f426:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40f42a:	fb09 f408 	mul.w	r4, r9, r8
  40f42e:	42ac      	cmp	r4, r5
  40f430:	fa02 f201 	lsl.w	r2, r2, r1
  40f434:	fa00 fa01 	lsl.w	sl, r0, r1
  40f438:	d908      	bls.n	40f44c <__udivmoddi4+0x244>
  40f43a:	18ed      	adds	r5, r5, r3
  40f43c:	f109 30ff 	add.w	r0, r9, #4294967295
  40f440:	d243      	bcs.n	40f4ca <__udivmoddi4+0x2c2>
  40f442:	42ac      	cmp	r4, r5
  40f444:	d941      	bls.n	40f4ca <__udivmoddi4+0x2c2>
  40f446:	f1a9 0902 	sub.w	r9, r9, #2
  40f44a:	441d      	add	r5, r3
  40f44c:	1b2d      	subs	r5, r5, r4
  40f44e:	fa1f fe8e 	uxth.w	lr, lr
  40f452:	fbb5 f0fc 	udiv	r0, r5, ip
  40f456:	fb0c 5510 	mls	r5, ip, r0, r5
  40f45a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40f45e:	fb00 f808 	mul.w	r8, r0, r8
  40f462:	45a0      	cmp	r8, r4
  40f464:	d907      	bls.n	40f476 <__udivmoddi4+0x26e>
  40f466:	18e4      	adds	r4, r4, r3
  40f468:	f100 35ff 	add.w	r5, r0, #4294967295
  40f46c:	d229      	bcs.n	40f4c2 <__udivmoddi4+0x2ba>
  40f46e:	45a0      	cmp	r8, r4
  40f470:	d927      	bls.n	40f4c2 <__udivmoddi4+0x2ba>
  40f472:	3802      	subs	r0, #2
  40f474:	441c      	add	r4, r3
  40f476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40f47a:	eba4 0408 	sub.w	r4, r4, r8
  40f47e:	fba0 8902 	umull	r8, r9, r0, r2
  40f482:	454c      	cmp	r4, r9
  40f484:	46c6      	mov	lr, r8
  40f486:	464d      	mov	r5, r9
  40f488:	d315      	bcc.n	40f4b6 <__udivmoddi4+0x2ae>
  40f48a:	d012      	beq.n	40f4b2 <__udivmoddi4+0x2aa>
  40f48c:	b156      	cbz	r6, 40f4a4 <__udivmoddi4+0x29c>
  40f48e:	ebba 030e 	subs.w	r3, sl, lr
  40f492:	eb64 0405 	sbc.w	r4, r4, r5
  40f496:	fa04 f707 	lsl.w	r7, r4, r7
  40f49a:	40cb      	lsrs	r3, r1
  40f49c:	431f      	orrs	r7, r3
  40f49e:	40cc      	lsrs	r4, r1
  40f4a0:	6037      	str	r7, [r6, #0]
  40f4a2:	6074      	str	r4, [r6, #4]
  40f4a4:	2100      	movs	r1, #0
  40f4a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40f4aa:	4618      	mov	r0, r3
  40f4ac:	e6f8      	b.n	40f2a0 <__udivmoddi4+0x98>
  40f4ae:	4690      	mov	r8, r2
  40f4b0:	e6e0      	b.n	40f274 <__udivmoddi4+0x6c>
  40f4b2:	45c2      	cmp	sl, r8
  40f4b4:	d2ea      	bcs.n	40f48c <__udivmoddi4+0x284>
  40f4b6:	ebb8 0e02 	subs.w	lr, r8, r2
  40f4ba:	eb69 0503 	sbc.w	r5, r9, r3
  40f4be:	3801      	subs	r0, #1
  40f4c0:	e7e4      	b.n	40f48c <__udivmoddi4+0x284>
  40f4c2:	4628      	mov	r0, r5
  40f4c4:	e7d7      	b.n	40f476 <__udivmoddi4+0x26e>
  40f4c6:	4640      	mov	r0, r8
  40f4c8:	e791      	b.n	40f3ee <__udivmoddi4+0x1e6>
  40f4ca:	4681      	mov	r9, r0
  40f4cc:	e7be      	b.n	40f44c <__udivmoddi4+0x244>
  40f4ce:	4601      	mov	r1, r0
  40f4d0:	e778      	b.n	40f3c4 <__udivmoddi4+0x1bc>
  40f4d2:	3802      	subs	r0, #2
  40f4d4:	443c      	add	r4, r7
  40f4d6:	e745      	b.n	40f364 <__udivmoddi4+0x15c>
  40f4d8:	4608      	mov	r0, r1
  40f4da:	e708      	b.n	40f2ee <__udivmoddi4+0xe6>
  40f4dc:	f1a8 0802 	sub.w	r8, r8, #2
  40f4e0:	443d      	add	r5, r7
  40f4e2:	e72b      	b.n	40f33c <__udivmoddi4+0x134>

0040f4e4 <__aeabi_idiv0>:
  40f4e4:	4770      	bx	lr
  40f4e6:	bf00      	nop
  40f4e8:	002f3a30 	.word	0x002f3a30

0040f4ec <file_name_cal>:
  40f4ec:	61633a30 7262696c 6f697461 6e692e6e     0:calibration.in
  40f4fc:	00000069                                i...

0040f500 <file_name_conf>:
  40f500:	6f633a30 6769666e 696e692e 00000000     0:config.ini....
  40f510:	65776f50 654d2072 20726574 00003256     Power Meter V2..
  40f520:	28207325 6a6f7250 20746365 303d4449     %s (Project ID=0
  40f530:	32302578 000a2978 204d5241 76205746     x%02x)..ARM FW v
  40f540:	69737265 3d206e6f 2e642520 000a6425     ersion = %d.%d..
  40f550:	20505344 76205746 69737265 3d206e6f     DSP FW version =
  40f560:	2e642520 000a6425 61636f4c 6e6f6974      %d.%d..Location
  40f570:	6d616e20 203d2065 656e6f6e 0000000a      name = none....
  40f580:	69766544 6e206563 20656d61 6f6e203d     Device name = no
  40f590:	000a656e 65746f4e 3d20315f 6e6f6e20     ne..Note_1 = non
  40f5a0:	00000a65 65746f4e 3d20325f 6e6f6e20     e...Note_2 = non
  40f5b0:	00000a65 65776f50 6f632072 6769666e     e...Power config
  40f5c0:	74617275 206e6f69 7957203d 74532f65     uration = Wye/St
  40f5d0:	000a7261 696d6f4e 206c616e 656e694c     ar..Nominal Line
  40f5e0:	2d6f742d 656e694c 6c6f5620 65676174     -to-Line Voltage
  40f5f0:	33203d20 0a563038 00000000 696d6f4e      = 380V.....Nomi
  40f600:	206c616e 656e694c 2d6f742d 7475654e     nal Line-to-Neut
  40f610:	206c6172 746c6f56 20656761 3232203d     ral Voltage = 22
  40f620:	0a0a5630 00000000 252e6425 00643330     0V......%d.%03d.
  40f630:	2e64252c 64333025 00000000 6174530a     ,%d.%03d.....Sta
  40f640:	69207472 7865646e 25203d20 00000a64     rt index = %d...
  40f650:	706f7453 646e6920 3d207865 0a642520     Stop index = %d.
  40f660:	00000000 66667542 64207265 64697669     ....Buffer divid
  40f670:	0a0a6465 00000000 66667542 6e207265     ed......Buffer n
  40f680:	6420746f 64697669 0a0a6465 00000000     ot divided......
  40f690:	6e756f43 2c726574 565b3156 32562c5d     Counter,V1[V],V2
  40f6a0:	2c5d565b 565b3356 45562c5d 2c5d565b     [V],V3[V],VE[V],
  40f6b0:	415b3149 32492c5d 2c5d415b 415b3349     I1[A],I2[A],I3[A
  40f6c0:	4e492c5d 0a5d415b 00000000 002c6425     ],IN[A].....%d,.
  40f6d0:	252e6425 2c643230 00000000 43494c2f     %d.%02d,..../LIC
  40f6e0:	5f324d50 5f643425 64323025 3230255f     PM2_%4d_%02d_%02
  40f6f0:	76455f64 5f746e65 64323025 3230255f     d_Event_%02d_%02
  40f700:	30255f64 742e6432 00007478 6e657645     d_%02d.txt..Even
  40f710:	61772074 6f666576 000a6d72 4f203156     t waveform..V1 O
  40f720:	20726576 746c6f76 00656761 4f203256     ver voltage.V2 O
  40f730:	20726576 746c6f76 00656761 4f203356     ver voltage.V3 O
  40f740:	20726576 746c6f76 00656761 55203156     ver voltage.V1 U
  40f750:	7265646e 6c6f7620 65676174 00000000     nder voltage....
  40f760:	55203256 7265646e 6c6f7620 65676174     V2 Under voltage
  40f770:	00000000 55203356 7265646e 6c6f7620     ....V3 Under vol
  40f780:	65676174 00000000 4f203149 20726576     tage....I1 Over 
  40f790:	72727563 00746e65 4f203249 20726576     current.I2 Over 
  40f7a0:	72727563 00746e65 4f203349 20726576     current.I3 Over 
  40f7b0:	72727563 00746e65 65646e55 72662072     current.Under fr
  40f7c0:	65757165 0079636e 7265764f 65726620     equency.Over fre
  40f7d0:	6e657571 00007963 6e6b6e55 006e776f     quency..Unknown.
  40f7e0:	7275440a 6f697461 203d206e 252e6425     .Duration = %d.%
  40f7f0:	20643330 00636573 6c6f560a 65676174     03d sec..Voltage
  40f800:	78614d20 00203d20 560a5620 61746c6f      Max = . V.Volta
  40f810:	4d206567 3d206e69 00000020 430a5620     ge Min = ... V.C
  40f820:	65727275 4d20746e 3d207861 00000020     urrent Max = ...
  40f830:	000a4120 67697254 20726567 65746144      A..Trigger Date
  40f840:	25203d20 252f6434 2f643230 64323025      = %4d/%02d/%02d
  40f850:	0000000a 67697254 20726567 656d6954     ....Trigger Time
  40f860:	25203d20 3a643230 64323025 3230253a      = %02d:%02d:%02
  40f870:	00000a64 43494c2f 5f324d50 5f643425     d.../LICPM2_%4d_
  40f880:	64323025 3230255f 6f6c5f64 78742e67     %02d_%02d_log.tx
  40f890:	00000074 64323025 3230253a 30253a64     t...%02d:%02d:%0
  40f8a0:	00206432 36313025 00002062 62383025     2d .%016b ..%08b
  40f8b0:	00000a20 00643425 6e6f4d2f 255f6874      ...%4d./Month_%
  40f8c0:	00643230 7961442f 3230255f 00000064     02d./Day_%02d...
  40f8d0:	43494c2f 5f324d50 5f643425 64323025     /LICPM2_%4d_%02d
  40f8e0:	3230255f 61445f64 54796c69 646e6572     _%02d_DailyTrend
  40f8f0:	2e73335f 00747874 43494c2f 5f324d50     _3s.txt./LICPM2_
  40f900:	5f643425 64323025 3230255f 61445f64     %4d_%02d_%02d_Da
  40f910:	54796c69 646e6572 2e6d355f 00747874     ilyTrend_5m.txt.
  40f920:	6c696144 72542079 0a646e65 00000000     Daily Trend.....
  40f930:	65707954 00203d20 65732033 646e6f63     Type = .3 second
  40f940:	00000073 696d2035 6574756e 00000073     s...5 minutes...
  40f950:	7461440a 203d2065 2f643425 64323025     .Date = %4d/%02d
  40f960:	3230252f 000a0a64 5f4d5241 656d6974     /%02d...ARM_time
  40f970:	5053442c 6d69745f 6c662c65 2c736761     ,DSP_time,flags,
  40f980:	656d6974 6974755f 617a696c 6e6f6974     time_utilization
  40f990:	5f73542c 615f7375 542c6776 73755f73     ,Ts_us_avg,Ts_us
  40f9a0:	78616d5f 5f73542c 6d5f7375 662c6e69     _max,Ts_us_min,f
  40f9b0:	7a485f4c 6776615f 5f4c662c 6d5f7a48     L_Hz_avg,fL_Hz_m
  40f9c0:	662c7861 7a485f4c 6e696d5f 5f31562c     ax,fL_Hz_min,V1_
  40f9d0:	5f534d52 2c677661 525f3156 6d5f534d     RMS_avg,V1_RMS_m
  40f9e0:	562c7861 4d525f31 696d5f53 31562c6e     ax,V1_RMS_min,V1
  40f9f0:	6d5f3048 615f646f 562c6776 5f304831     H0_mod_avg,V1H0_
  40fa00:	5f646f6d 2c78616d 30483156 646f6d5f     mod_max,V1H0_mod
  40fa10:	6e696d5f 4831562c 6e615f30 5f656c67     _min,V1H0_angle_
  40fa20:	2c677661 30483156 676e615f 6d5f656c     avg,V1H0_angle_m
  40fa30:	562c7861 5f304831 6c676e61 696d5f65     ax,V1H0_angle_mi
  40fa40:	31562c6e 6d5f3148 615f646f 562c6776     n,V1H1_mod_avg,V
  40fa50:	5f314831 5f646f6d 2c78616d 31483156     1H1_mod_max,V1H1
  40fa60:	646f6d5f 6e696d5f 4831562c 6e615f31     _mod_min,V1H1_an
  40fa70:	5f656c67 2c677661 31483156 676e615f     gle_avg,V1H1_ang
  40fa80:	6d5f656c 562c7861 5f314831 6c676e61     le_max,V1H1_angl
  40fa90:	696d5f65 31562c6e 6d5f3348 615f646f     e_min,V1H3_mod_a
  40faa0:	562c6776 5f334831 5f646f6d 2c78616d     vg,V1H3_mod_max,
  40fab0:	33483156 646f6d5f 6e696d5f 4831562c     V1H3_mod_min,V1H
  40fac0:	6e615f33 5f656c67 2c677661 33483156     3_angle_avg,V1H3
  40fad0:	676e615f 6d5f656c 562c7861 5f334831     _angle_max,V1H3_
  40fae0:	6c676e61 696d5f65 31562c6e 6d5f3548     angle_min,V1H5_m
  40faf0:	615f646f 562c6776 5f354831 5f646f6d     od_avg,V1H5_mod_
  40fb00:	2c78616d 35483156 646f6d5f 6e696d5f     max,V1H5_mod_min
  40fb10:	4831562c 6e615f35 5f656c67 2c677661     ,V1H5_angle_avg,
  40fb20:	35483156 676e615f 6d5f656c 562c7861     V1H5_angle_max,V
  40fb30:	5f354831 6c676e61 696d5f65 31562c6e     1H5_angle_min,V1
  40fb40:	6d5f3748 615f646f 562c6776 5f374831     H7_mod_avg,V1H7_
  40fb50:	5f646f6d 2c78616d 37483156 646f6d5f     mod_max,V1H7_mod
  40fb60:	6e696d5f 4831562c 6e615f37 5f656c67     _min,V1H7_angle_
  40fb70:	2c677661 37483156 676e615f 6d5f656c     avg,V1H7_angle_m
  40fb80:	562c7861 5f374831 6c676e61 696d5f65     ax,V1H7_angle_mi
  40fb90:	31562c6e 4457545f 6776615f 5f31562c     n,V1_TWD_avg,V1_
  40fba0:	5f445754 2c78616d 545f3156 6d5f4457     TWD_max,V1_TWD_m
  40fbb0:	562c6e69 4d525f32 76615f53 32562c67     in,V2_RMS_avg,V2
  40fbc0:	534d525f 78616d5f 5f32562c 5f534d52     _RMS_max,V2_RMS_
  40fbd0:	2c6e696d 30483256 646f6d5f 6776615f     min,V2H0_mod_avg
  40fbe0:	4832562c 6f6d5f30 616d5f64 32562c78     ,V2H0_mod_max,V2
  40fbf0:	6d5f3048 6d5f646f 562c6e69 5f304832     H0_mod_min,V2H0_
  40fc00:	6c676e61 76615f65 32562c67 615f3048     angle_avg,V2H0_a
  40fc10:	656c676e 78616d5f 4832562c 6e615f30     ngle_max,V2H0_an
  40fc20:	5f656c67 2c6e696d 31483256 646f6d5f     gle_min,V2H1_mod
  40fc30:	6776615f 4832562c 6f6d5f31 616d5f64     _avg,V2H1_mod_ma
  40fc40:	32562c78 6d5f3148 6d5f646f 562c6e69     x,V2H1_mod_min,V
  40fc50:	5f314832 6c676e61 76615f65 32562c67     2H1_angle_avg,V2
  40fc60:	615f3148 656c676e 78616d5f 4832562c     H1_angle_max,V2H
  40fc70:	6e615f31 5f656c67 2c6e696d 33483256     1_angle_min,V2H3
  40fc80:	646f6d5f 6776615f 4832562c 6f6d5f33     _mod_avg,V2H3_mo
  40fc90:	616d5f64 32562c78 6d5f3348 6d5f646f     d_max,V2H3_mod_m
  40fca0:	562c6e69 5f334832 6c676e61 76615f65     in,V2H3_angle_av
  40fcb0:	32562c67 615f3348 656c676e 78616d5f     g,V2H3_angle_max
  40fcc0:	4832562c 6e615f33 5f656c67 2c6e696d     ,V2H3_angle_min,
  40fcd0:	35483256 646f6d5f 6776615f 4832562c     V2H5_mod_avg,V2H
  40fce0:	6f6d5f35 616d5f64 32562c78 6d5f3548     5_mod_max,V2H5_m
  40fcf0:	6d5f646f 562c6e69 5f354832 6c676e61     od_min,V2H5_angl
  40fd00:	76615f65 32562c67 615f3548 656c676e     e_avg,V2H5_angle
  40fd10:	78616d5f 4832562c 6e615f35 5f656c67     _max,V2H5_angle_
  40fd20:	2c6e696d 37483256 646f6d5f 6776615f     min,V2H7_mod_avg
  40fd30:	4832562c 6f6d5f37 616d5f64 32562c78     ,V2H7_mod_max,V2
  40fd40:	6d5f3748 6d5f646f 562c6e69 5f374832     H7_mod_min,V2H7_
  40fd50:	6c676e61 76615f65 32562c67 615f3748     angle_avg,V2H7_a
  40fd60:	656c676e 78616d5f 4832562c 6e615f37     ngle_max,V2H7_an
  40fd70:	5f656c67 2c6e696d 545f3256 615f4457     gle_min,V2_TWD_a
  40fd80:	562c6776 57545f32 616d5f44 32562c78     vg,V2_TWD_max,V2
  40fd90:	4457545f 6e696d5f 5f33562c 5f534d52     _TWD_min,V3_RMS_
  40fda0:	2c677661 525f3356 6d5f534d 562c7861     avg,V3_RMS_max,V
  40fdb0:	4d525f33 696d5f53 33562c6e 6d5f3048     3_RMS_min,V3H0_m
  40fdc0:	615f646f 562c6776 5f304833 5f646f6d     od_avg,V3H0_mod_
  40fdd0:	2c78616d 30483356 646f6d5f 6e696d5f     max,V3H0_mod_min
  40fde0:	4833562c 6e615f30 5f656c67 2c677661     ,V3H0_angle_avg,
  40fdf0:	30483356 676e615f 6d5f656c 562c7861     V3H0_angle_max,V
  40fe00:	5f304833 6c676e61 696d5f65 33562c6e     3H0_angle_min,V3
  40fe10:	6d5f3148 615f646f 562c6776 5f314833     H1_mod_avg,V3H1_
  40fe20:	5f646f6d 2c78616d 31483356 646f6d5f     mod_max,V3H1_mod
  40fe30:	6e696d5f 4833562c 6e615f31 5f656c67     _min,V3H1_angle_
  40fe40:	2c677661 31483356 676e615f 6d5f656c     avg,V3H1_angle_m
  40fe50:	562c7861 5f314833 6c676e61 696d5f65     ax,V3H1_angle_mi
  40fe60:	33562c6e 6d5f3348 615f646f 562c6776     n,V3H3_mod_avg,V
  40fe70:	5f334833 5f646f6d 2c78616d 33483356     3H3_mod_max,V3H3
  40fe80:	646f6d5f 6e696d5f 4833562c 6e615f33     _mod_min,V3H3_an
  40fe90:	5f656c67 2c677661 33483356 676e615f     gle_avg,V3H3_ang
  40fea0:	6d5f656c 562c7861 5f334833 6c676e61     le_max,V3H3_angl
  40feb0:	696d5f65 33562c6e 6d5f3548 615f646f     e_min,V3H5_mod_a
  40fec0:	562c6776 5f354833 5f646f6d 2c78616d     vg,V3H5_mod_max,
  40fed0:	35483356 646f6d5f 6e696d5f 4833562c     V3H5_mod_min,V3H
  40fee0:	6e615f35 5f656c67 2c677661 35483356     5_angle_avg,V3H5
  40fef0:	676e615f 6d5f656c 562c7861 5f354833     _angle_max,V3H5_
  40ff00:	6c676e61 696d5f65 33562c6e 6d5f3748     angle_min,V3H7_m
  40ff10:	615f646f 562c6776 5f374833 5f646f6d     od_avg,V3H7_mod_
  40ff20:	2c78616d 37483356 646f6d5f 6e696d5f     max,V3H7_mod_min
  40ff30:	4833562c 6e615f37 5f656c67 2c677661     ,V3H7_angle_avg,
  40ff40:	37483356 676e615f 6d5f656c 562c7861     V3H7_angle_max,V
  40ff50:	5f374833 6c676e61 696d5f65 33562c6e     3H7_angle_min,V3
  40ff60:	4457545f 6776615f 5f33562c 5f445754     _TWD_avg,V3_TWD_
  40ff70:	2c78616d 545f3356 6d5f4457 562c6e69     max,V3_TWD_min,V
  40ff80:	4d525f45 76615f53 45562c67 534d525f     E_RMS_avg,VE_RMS
  40ff90:	78616d5f 5f45562c 5f534d52 2c6e696d     _max,VE_RMS_min,
  40ffa0:	30484556 646f6d5f 6776615f 4845562c     VEH0_mod_avg,VEH
  40ffb0:	6f6d5f30 616d5f64 45562c78 6d5f3048     0_mod_max,VEH0_m
  40ffc0:	6d5f646f 562c6e69 5f304845 6c676e61     od_min,VEH0_angl
  40ffd0:	76615f65 45562c67 615f3048 656c676e     e_avg,VEH0_angle
  40ffe0:	78616d5f 4845562c 6e615f30 5f656c67     _max,VEH0_angle_
  40fff0:	2c6e696d 31484556 646f6d5f 6776615f     min,VEH1_mod_avg
  410000:	4845562c 6f6d5f31 616d5f64 45562c78     ,VEH1_mod_max,VE
  410010:	6d5f3148 6d5f646f 562c6e69 5f314845     H1_mod_min,VEH1_
  410020:	6c676e61 76615f65 45562c67 615f3148     angle_avg,VEH1_a
  410030:	656c676e 78616d5f 4845562c 6e615f31     ngle_max,VEH1_an
  410040:	5f656c67 2c6e696d 33484556 646f6d5f     gle_min,VEH3_mod
  410050:	6776615f 4845562c 6f6d5f33 616d5f64     _avg,VEH3_mod_ma
  410060:	45562c78 6d5f3348 6d5f646f 562c6e69     x,VEH3_mod_min,V
  410070:	5f334845 6c676e61 76615f65 45562c67     EH3_angle_avg,VE
  410080:	615f3348 656c676e 78616d5f 4845562c     H3_angle_max,VEH
  410090:	6e615f33 5f656c67 2c6e696d 35484556     3_angle_min,VEH5
  4100a0:	646f6d5f 6776615f 4845562c 6f6d5f35     _mod_avg,VEH5_mo
  4100b0:	616d5f64 45562c78 6d5f3548 6d5f646f     d_max,VEH5_mod_m
  4100c0:	562c6e69 5f354845 6c676e61 76615f65     in,VEH5_angle_av
  4100d0:	45562c67 615f3548 656c676e 78616d5f     g,VEH5_angle_max
  4100e0:	4845562c 6e615f35 5f656c67 2c6e696d     ,VEH5_angle_min,
  4100f0:	37484556 646f6d5f 6776615f 4845562c     VEH7_mod_avg,VEH
  410100:	6f6d5f37 616d5f64 45562c78 6d5f3748     7_mod_max,VEH7_m
  410110:	6d5f646f 562c6e69 5f374845 6c676e61     od_min,VEH7_angl
  410120:	76615f65 45562c67 615f3748 656c676e     e_avg,VEH7_angle
  410130:	78616d5f 4845562c 6e615f37 5f656c67     _max,VEH7_angle_
  410140:	2c6e696d 545f4556 615f4457 562c6776     min,VE_TWD_avg,V
  410150:	57545f45 616d5f44 45562c78 4457545f     E_TWD_max,VE_TWD
  410160:	6e696d5f 5f31492c 5f534d52 2c677661     _min,I1_RMS_avg,
  410170:	525f3149 6d5f534d 492c7861 4d525f31     I1_RMS_max,I1_RM
  410180:	696d5f53 31492c6e 6d5f3048 615f646f     S_min,I1H0_mod_a
  410190:	492c6776 5f304831 5f646f6d 2c78616d     vg,I1H0_mod_max,
  4101a0:	30483149 646f6d5f 6e696d5f 4831492c     I1H0_mod_min,I1H
  4101b0:	6e615f30 5f656c67 2c677661 30483149     0_angle_avg,I1H0
  4101c0:	676e615f 6d5f656c 492c7861 5f304831     _angle_max,I1H0_
  4101d0:	6c676e61 696d5f65 31492c6e 6d5f3148     angle_min,I1H1_m
  4101e0:	615f646f 492c6776 5f314831 5f646f6d     od_avg,I1H1_mod_
  4101f0:	2c78616d 31483149 646f6d5f 6e696d5f     max,I1H1_mod_min
  410200:	4831492c 6e615f31 5f656c67 2c677661     ,I1H1_angle_avg,
  410210:	31483149 676e615f 6d5f656c 492c7861     I1H1_angle_max,I
  410220:	5f314831 6c676e61 696d5f65 31492c6e     1H1_angle_min,I1
  410230:	6d5f3348 615f646f 492c6776 5f334831     H3_mod_avg,I1H3_
  410240:	5f646f6d 2c78616d 33483149 646f6d5f     mod_max,I1H3_mod
  410250:	6e696d5f 4831492c 6e615f33 5f656c67     _min,I1H3_angle_
  410260:	2c677661 33483149 676e615f 6d5f656c     avg,I1H3_angle_m
  410270:	492c7861 5f334831 6c676e61 696d5f65     ax,I1H3_angle_mi
  410280:	31492c6e 6d5f3548 615f646f 492c6776     n,I1H5_mod_avg,I
  410290:	5f354831 5f646f6d 2c78616d 35483149     1H5_mod_max,I1H5
  4102a0:	646f6d5f 6e696d5f 4831492c 6e615f35     _mod_min,I1H5_an
  4102b0:	5f656c67 2c677661 35483149 676e615f     gle_avg,I1H5_ang
  4102c0:	6d5f656c 492c7861 5f354831 6c676e61     le_max,I1H5_angl
  4102d0:	696d5f65 31492c6e 6d5f3748 615f646f     e_min,I1H7_mod_a
  4102e0:	492c6776 5f374831 5f646f6d 2c78616d     vg,I1H7_mod_max,
  4102f0:	37483149 646f6d5f 6e696d5f 4831492c     I1H7_mod_min,I1H
  410300:	6e615f37 5f656c67 2c677661 37483149     7_angle_avg,I1H7
  410310:	676e615f 6d5f656c 492c7861 5f374831     _angle_max,I1H7_
  410320:	6c676e61 696d5f65 31492c6e 4457545f     angle_min,I1_TWD
  410330:	6776615f 5f31492c 5f445754 2c78616d     _avg,I1_TWD_max,
  410340:	545f3149 6d5f4457 492c6e69 4d525f32     I1_TWD_min,I2_RM
  410350:	76615f53 32492c67 534d525f 78616d5f     S_avg,I2_RMS_max
  410360:	5f32492c 5f534d52 2c6e696d 30483249     ,I2_RMS_min,I2H0
  410370:	646f6d5f 6776615f 4832492c 6f6d5f30     _mod_avg,I2H0_mo
  410380:	616d5f64 32492c78 6d5f3048 6d5f646f     d_max,I2H0_mod_m
  410390:	492c6e69 5f304832 6c676e61 76615f65     in,I2H0_angle_av
  4103a0:	32492c67 615f3048 656c676e 78616d5f     g,I2H0_angle_max
  4103b0:	4832492c 6e615f30 5f656c67 2c6e696d     ,I2H0_angle_min,
  4103c0:	31483249 646f6d5f 6776615f 4832492c     I2H1_mod_avg,I2H
  4103d0:	6f6d5f31 616d5f64 32492c78 6d5f3148     1_mod_max,I2H1_m
  4103e0:	6d5f646f 492c6e69 5f314832 6c676e61     od_min,I2H1_angl
  4103f0:	76615f65 32492c67 615f3148 656c676e     e_avg,I2H1_angle
  410400:	78616d5f 4832492c 6e615f31 5f656c67     _max,I2H1_angle_
  410410:	2c6e696d 33483249 646f6d5f 6776615f     min,I2H3_mod_avg
  410420:	4832492c 6f6d5f33 616d5f64 32492c78     ,I2H3_mod_max,I2
  410430:	6d5f3348 6d5f646f 492c6e69 5f334832     H3_mod_min,I2H3_
  410440:	6c676e61 76615f65 32492c67 615f3348     angle_avg,I2H3_a
  410450:	656c676e 78616d5f 4832492c 6e615f33     ngle_max,I2H3_an
  410460:	5f656c67 2c6e696d 35483249 646f6d5f     gle_min,I2H5_mod
  410470:	6776615f 4832492c 6f6d5f35 616d5f64     _avg,I2H5_mod_ma
  410480:	32492c78 6d5f3548 6d5f646f 492c6e69     x,I2H5_mod_min,I
  410490:	5f354832 6c676e61 76615f65 32492c67     2H5_angle_avg,I2
  4104a0:	615f3548 656c676e 78616d5f 4832492c     H5_angle_max,I2H
  4104b0:	6e615f35 5f656c67 2c6e696d 37483249     5_angle_min,I2H7
  4104c0:	646f6d5f 6776615f 4832492c 6f6d5f37     _mod_avg,I2H7_mo
  4104d0:	616d5f64 32492c78 6d5f3748 6d5f646f     d_max,I2H7_mod_m
  4104e0:	492c6e69 5f374832 6c676e61 76615f65     in,I2H7_angle_av
  4104f0:	32492c67 615f3748 656c676e 78616d5f     g,I2H7_angle_max
  410500:	4832492c 6e615f37 5f656c67 2c6e696d     ,I2H7_angle_min,
  410510:	545f3249 615f4457 492c6776 57545f32     I2_TWD_avg,I2_TW
  410520:	616d5f44 32492c78 4457545f 6e696d5f     D_max,I2_TWD_min
  410530:	5f33492c 5f534d52 2c677661 525f3349     ,I3_RMS_avg,I3_R
  410540:	6d5f534d 492c7861 4d525f33 696d5f53     MS_max,I3_RMS_mi
  410550:	33492c6e 6d5f3048 615f646f 492c6776     n,I3H0_mod_avg,I
  410560:	5f304833 5f646f6d 2c78616d 30483349     3H0_mod_max,I3H0
  410570:	646f6d5f 6e696d5f 4833492c 6e615f30     _mod_min,I3H0_an
  410580:	5f656c67 2c677661 30483349 676e615f     gle_avg,I3H0_ang
  410590:	6d5f656c 492c7861 5f304833 6c676e61     le_max,I3H0_angl
  4105a0:	696d5f65 33492c6e 6d5f3148 615f646f     e_min,I3H1_mod_a
  4105b0:	492c6776 5f314833 5f646f6d 2c78616d     vg,I3H1_mod_max,
  4105c0:	31483349 646f6d5f 6e696d5f 4833492c     I3H1_mod_min,I3H
  4105d0:	6e615f31 5f656c67 2c677661 31483349     1_angle_avg,I3H1
  4105e0:	676e615f 6d5f656c 492c7861 5f314833     _angle_max,I3H1_
  4105f0:	6c676e61 696d5f65 33492c6e 6d5f3348     angle_min,I3H3_m
  410600:	615f646f 492c6776 5f334833 5f646f6d     od_avg,I3H3_mod_
  410610:	2c78616d 33483349 646f6d5f 6e696d5f     max,I3H3_mod_min
  410620:	4833492c 6e615f33 5f656c67 2c677661     ,I3H3_angle_avg,
  410630:	33483349 676e615f 6d5f656c 492c7861     I3H3_angle_max,I
  410640:	5f334833 6c676e61 696d5f65 33492c6e     3H3_angle_min,I3
  410650:	6d5f3548 615f646f 492c6776 5f354833     H5_mod_avg,I3H5_
  410660:	5f646f6d 2c78616d 35483349 646f6d5f     mod_max,I3H5_mod
  410670:	6e696d5f 4833492c 6e615f35 5f656c67     _min,I3H5_angle_
  410680:	2c677661 35483349 676e615f 6d5f656c     avg,I3H5_angle_m
  410690:	492c7861 5f354833 6c676e61 696d5f65     ax,I3H5_angle_mi
  4106a0:	33492c6e 6d5f3748 615f646f 492c6776     n,I3H7_mod_avg,I
  4106b0:	5f374833 5f646f6d 2c78616d 37483349     3H7_mod_max,I3H7
  4106c0:	646f6d5f 6e696d5f 4833492c 6e615f37     _mod_min,I3H7_an
  4106d0:	5f656c67 2c677661 37483349 676e615f     gle_avg,I3H7_ang
  4106e0:	6d5f656c 492c7861 5f374833 6c676e61     le_max,I3H7_angl
  4106f0:	696d5f65 33492c6e 4457545f 6776615f     e_min,I3_TWD_avg
  410700:	5f33492c 5f445754 2c78616d 545f3349     ,I3_TWD_max,I3_T
  410710:	6d5f4457 492c6e69 4d525f4e 76615f53     WD_min,IN_RMS_av
  410720:	4e492c67 534d525f 78616d5f 5f4e492c     g,IN_RMS_max,IN_
  410730:	5f534d52 2c6e696d 30484e49 646f6d5f     RMS_min,INH0_mod
  410740:	6776615f 484e492c 6f6d5f30 616d5f64     _avg,INH0_mod_ma
  410750:	4e492c78 6d5f3048 6d5f646f 492c6e69     x,INH0_mod_min,I
  410760:	5f30484e 6c676e61 76615f65 4e492c67     NH0_angle_avg,IN
  410770:	615f3048 656c676e 78616d5f 484e492c     H0_angle_max,INH
  410780:	6e615f30 5f656c67 2c6e696d 31484e49     0_angle_min,INH1
  410790:	646f6d5f 6776615f 484e492c 6f6d5f31     _mod_avg,INH1_mo
  4107a0:	616d5f64 4e492c78 6d5f3148 6d5f646f     d_max,INH1_mod_m
  4107b0:	492c6e69 5f31484e 6c676e61 76615f65     in,INH1_angle_av
  4107c0:	4e492c67 615f3148 656c676e 78616d5f     g,INH1_angle_max
  4107d0:	484e492c 6e615f31 5f656c67 2c6e696d     ,INH1_angle_min,
  4107e0:	33484e49 646f6d5f 6776615f 484e492c     INH3_mod_avg,INH
  4107f0:	6f6d5f33 616d5f64 4e492c78 6d5f3348     3_mod_max,INH3_m
  410800:	6d5f646f 492c6e69 5f33484e 6c676e61     od_min,INH3_angl
  410810:	76615f65 4e492c67 615f3348 656c676e     e_avg,INH3_angle
  410820:	78616d5f 484e492c 6e615f33 5f656c67     _max,INH3_angle_
  410830:	2c6e696d 35484e49 646f6d5f 6776615f     min,INH5_mod_avg
  410840:	484e492c 6f6d5f35 616d5f64 4e492c78     ,INH5_mod_max,IN
  410850:	6d5f3548 6d5f646f 492c6e69 5f35484e     H5_mod_min,INH5_
  410860:	6c676e61 76615f65 4e492c67 615f3548     angle_avg,INH5_a
  410870:	656c676e 78616d5f 484e492c 6e615f35     ngle_max,INH5_an
  410880:	5f656c67 2c6e696d 37484e49 646f6d5f     gle_min,INH7_mod
  410890:	6776615f 484e492c 6f6d5f37 616d5f64     _avg,INH7_mod_ma
  4108a0:	4e492c78 6d5f3748 6d5f646f 492c6e69     x,INH7_mod_min,I
  4108b0:	5f37484e 6c676e61 76615f65 4e492c67     NH7_angle_avg,IN
  4108c0:	615f3748 656c676e 78616d5f 484e492c     H7_angle_max,INH
  4108d0:	6e615f37 5f656c67 2c6e696d 545f4e49     7_angle_min,IN_T
  4108e0:	615f4457 492c6776 57545f4e 616d5f44     WD_avg,IN_TWD_ma
  4108f0:	4e492c78 4457545f 6e696d5f 4f50562c     x,IN_TWD_min,VPO
  410900:	6f6d5f53 76615f64 50562c67 6d5f534f     S_mod_avg,VPOS_m
  410910:	6d5f646f 562c7861 5f534f50 5f646f6d     od_max,VPOS_mod_
  410920:	2c6e696d 534f5056 676e615f 615f656c     min,VPOS_angle_a
  410930:	562c6776 5f534f50 6c676e61 616d5f65     vg,VPOS_angle_ma
  410940:	50562c78 615f534f 656c676e 6e696d5f     x,VPOS_angle_min
  410950:	454e562c 6f6d5f47 76615f64 4e562c67     ,VNEG_mod_avg,VN
  410960:	6d5f4745 6d5f646f 562c7861 5f47454e     EG_mod_max,VNEG_
  410970:	5f646f6d 2c6e696d 47454e56 676e615f     mod_min,VNEG_ang
  410980:	615f656c 562c6776 5f47454e 6c676e61     le_avg,VNEG_angl
  410990:	616d5f65 4e562c78 615f4745 656c676e     e_max,VNEG_angle
  4109a0:	6e696d5f 4f48562c 6f6d5f4d 76615f64     _min,VHOM_mod_av
  4109b0:	48562c67 6d5f4d4f 6d5f646f 562c7861     g,VHOM_mod_max,V
  4109c0:	5f4d4f48 5f646f6d 2c6e696d 4d4f4856     HOM_mod_min,VHOM
  4109d0:	676e615f 615f656c 562c6776 5f4d4f48     _angle_avg,VHOM_
  4109e0:	6c676e61 616d5f65 48562c78 615f4d4f     angle_max,VHOM_a
  4109f0:	656c676e 6e696d5f 4f50492c 6f6d5f53     ngle_min,IPOS_mo
  410a00:	76615f64 50492c67 6d5f534f 6d5f646f     d_avg,IPOS_mod_m
  410a10:	492c7861 5f534f50 5f646f6d 2c6e696d     ax,IPOS_mod_min,
  410a20:	534f5049 676e615f 615f656c 492c6776     IPOS_angle_avg,I
  410a30:	5f534f50 6c676e61 616d5f65 50492c78     POS_angle_max,IP
  410a40:	615f534f 656c676e 6e696d5f 454e492c     OS_angle_min,INE
  410a50:	6f6d5f47 76615f64 4e492c67 6d5f4745     G_mod_avg,INEG_m
  410a60:	6d5f646f 492c7861 5f47454e 5f646f6d     od_max,INEG_mod_
  410a70:	2c6e696d 47454e49 676e615f 615f656c     min,INEG_angle_a
  410a80:	492c6776 5f47454e 6c676e61 616d5f65     vg,INEG_angle_ma
  410a90:	4e492c78 615f4745 656c676e 6e696d5f     x,INEG_angle_min
  410aa0:	4f48492c 6f6d5f4d 76615f64 48492c67     ,IHOM_mod_avg,IH
  410ab0:	6d5f4d4f 6d5f646f 492c7861 5f4d4f48     OM_mod_max,IHOM_
  410ac0:	5f646f6d 2c6e696d 4d4f4849 676e615f     mod_min,IHOM_ang
  410ad0:	615f656c 492c6776 5f4d4f48 6c676e61     le_avg,IHOM_angl
  410ae0:	616d5f65 48492c78 615f4d4f 656c676e     e_max,IHOM_angle
  410af0:	6e696d5f 5345442c 47454e5f 6776615f     _min,DES_NEG_avg
  410b00:	5345442c 47454e5f 78616d5f 5345442c     ,DES_NEG_max,DES
  410b10:	47454e5f 6e696d5f 5345442c 4d4f485f     _NEG_min,DES_HOM
  410b20:	6776615f 5345442c 4d4f485f 78616d5f     _avg,DES_HOM_max
  410b30:	5345442c 4d4f485f 6e696d5f 5f31502c     ,DES_HOM_min,P1_
  410b40:	41505041 544e4552 6776615f 5f31502c     APPARENT_avg,P1_
  410b50:	41505041 544e4552 78616d5f 5f31502c     APPARENT_max,P1_
  410b60:	41505041 544e4552 6e696d5f 5f31502c     APPARENT_min,P1_
  410b70:	49544341 615f4556 502c6776 43415f31     ACTIVE_avg,P1_AC
  410b80:	45564954 78616d5f 5f31502c 49544341     TIVE_max,P1_ACTI
  410b90:	6d5f4556 502c6e69 4f4e5f31 49544341     VE_min,P1_NOACTI
  410ba0:	615f4556 502c6776 4f4e5f31 49544341     VE_avg,P1_NOACTI
  410bb0:	6d5f4556 502c7861 4f4e5f31 49544341     VE_max,P1_NOACTI
  410bc0:	6d5f4556 502c6e69 46505f31 6776615f     VE_min,P1_PF_avg
  410bd0:	5f31502c 6d5f4650 502c7861 46505f31     ,P1_PF_max,P1_PF
  410be0:	646f6d5f 6e696d5f 5f32502c 41505041     _mod_min,P2_APPA
  410bf0:	544e4552 6776615f 5f32502c 41505041     RENT_avg,P2_APPA
  410c00:	544e4552 78616d5f 5f32502c 41505041     RENT_max,P2_APPA
  410c10:	544e4552 6e696d5f 5f32502c 49544341     RENT_min,P2_ACTI
  410c20:	615f4556 502c6776 43415f32 45564954     VE_avg,P2_ACTIVE
  410c30:	78616d5f 5f32502c 49544341 6d5f4556     _max,P2_ACTIVE_m
  410c40:	502c6e69 4f4e5f32 49544341 615f4556     in,P2_NOACTIVE_a
  410c50:	502c6776 4f4e5f32 49544341 6d5f4556     vg,P2_NOACTIVE_m
  410c60:	502c7861 4f4e5f32 49544341 6d5f4556     ax,P2_NOACTIVE_m
  410c70:	502c6e69 46505f32 6776615f 5f32502c     in,P2_PF_avg,P2_
  410c80:	6d5f4650 502c7861 46505f32 646f6d5f     PF_max,P2_PF_mod
  410c90:	6e696d5f 5f33502c 41505041 544e4552     _min,P3_APPARENT
  410ca0:	6776615f 5f33502c 41505041 544e4552     _avg,P3_APPARENT
  410cb0:	78616d5f 5f33502c 41505041 544e4552     _max,P3_APPARENT
  410cc0:	6e696d5f 5f33502c 49544341 615f4556     _min,P3_ACTIVE_a
  410cd0:	502c6776 43415f33 45564954 78616d5f     vg,P3_ACTIVE_max
  410ce0:	5f33502c 49544341 6d5f4556 502c6e69     ,P3_ACTIVE_min,P
  410cf0:	4f4e5f33 49544341 615f4556 502c6776     3_NOACTIVE_avg,P
  410d00:	4f4e5f33 49544341 6d5f4556 502c7861     3_NOACTIVE_max,P
  410d10:	4f4e5f33 49544341 6d5f4556 502c6e69     3_NOACTIVE_min,P
  410d20:	46505f33 6776615f 5f33502c 6d5f4650     3_PF_avg,P3_PF_m
  410d30:	502c7861 46505f33 646f6d5f 6e696d5f     ax,P3_PF_mod_min
  410d40:	0000000a 64323025 3230253a 30253a64     ....%02d:%02d:%0
  410d50:	002c6432 64323025 3230253a 30253a64     2d,.%02d:%02d:%0
  410d60:	00006432 3130252c 00006236              2d..,%016b..

00410d6c <mmc_trans_multipliers>:
  410d6c:	00000000 0000000a 0000000c 0000000d     ................
  410d7c:	0000000f 00000014 0000001a 0000001e     ................
  410d8c:	00000023 00000028 0000002d 00000034     #...(...-...4...
  410d9c:	00000037 0000003c 00000046 00000050     7...<...F...P...

00410dac <sd_mmc_trans_units>:
  410dac:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00410dc8 <sd_trans_multipliers>:
  410dc8:	00000000 0000000a 0000000c 0000000d     ................
  410dd8:	0000000f 00000014 00000019 0000001e     ................
  410de8:	00000023 00000028 0000002d 00000032     #...(...-...2...
  410df8:	00000037 0000003c 00000046 00000050     7...<...F...P...

00410e08 <LfnOfs>:
  410e08:	07050301 12100e09 1c181614 0000001e     ................

00410e18 <excvt.4560>:
  410e18:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
  410e28:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
  410e38:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
  410e48:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
  410e58:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
  410e68:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
  410e78:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
  410e88:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
  410e98:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
  410ea8:	00005d5b                                []..

00410eac <Tbl>:
  410eac:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
  410ebc:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
  410ecc:	00e600c9 00f400c6 00f200f6 00f900fb     ................
  410edc:	00d600ff 00f800dc 00d800a3 019200d7     ................
  410eec:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
  410efc:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
  410f0c:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
  410f1c:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
  410f2c:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
  410f3c:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
  410f4c:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
  410f5c:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
  410f6c:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
  410f7c:	00da00de 00d900db 00dd00fd 00b400af     ................
  410f8c:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
  410f9c:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

00410fac <tbl_lower.4309>:
  410fac:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
  410fbc:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
  410fcc:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
  410fdc:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
  410fec:	00e100e0 00e300e2 00e500e4 00e700e6     ................
  410ffc:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
  41100c:	00f100f0 00f300f2 00f500f4 00f800f6     ................
  41101c:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
  41102c:	01050103 01090107 010d010b 0111010f     ................
  41103c:	01150113 01190117 011d011b 0121011f     ..............!.
  41104c:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
  41105c:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
  41106c:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
  41107c:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
  41108c:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
  41109c:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
  4110ac:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
  4110bc:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
  4110cc:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
  4110dc:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
  4110ec:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
  4110fc:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
  41110c:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
  41111c:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
  41112c:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
  41113c:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
  41114c:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
  41115c:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
  41116c:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
  41117c:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0041118c <tbl_upper.4310>:
  41118c:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
  41119c:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
  4111ac:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
  4111bc:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
  4111cc:	00c100c0 00c300c2 00c500c4 00c700c6     ................
  4111dc:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
  4111ec:	00d100d0 00d300d2 00d500d4 00d800d6     ................
  4111fc:	00da00d9 00dc00db 00de00dd 01000178     ............x...
  41120c:	01040102 01080106 010c010a 0110010e     ................
  41121c:	01140112 01180116 011c011a 0120011e     .............. .
  41122c:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
  41123c:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
  41124c:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
  41125c:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
  41126c:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
  41127c:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
  41128c:	03940393 03960395 03980397 039a0399     ................
  41129c:	039c039b 039e039d 03a0039f 03a303a1     ................
  4112ac:	03a503a4 03a703a6 03a903a8 041003aa     ................
  4112bc:	04120411 04140413 04160415 04180417     ................
  4112cc:	041a0419 041c041b 041e041d 0420041f     .............. .
  4112dc:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
  4112ec:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
  4112fc:	04030402 04050404 04070406 04090408     ................
  41130c:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
  41131c:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
  41132c:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
  41133c:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
  41134c:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
  41135c:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
  41136c:	74727173 00000000 00000000              sqrt........

00411378 <atanhi>:
  411378:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
  411388:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

00411398 <atanlo>:
  411398:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
  4113a8:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

004113b8 <_global_impure_ptr>:
  4113b8:	200000c8 00464e49 00666e69 004e414e     ... INF.inf.NAN.
  4113c8:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  4113d8:	46454443 00000000 33323130 37363534     CDEF....01234567
  4113e8:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  4113f8:	0000296c 00000030                       l)..0...

00411400 <blanks.7223>:
  411400:	20202020 20202020 20202020 20202020                     

00411410 <zeroes.7224>:
  411410:	30303030 30303030 30303030 30303030     0000000000000000
  411420:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  411430:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00411440 <__mprec_bigtens>:
  411440:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  411450:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  411460:	7f73bf3c 75154fdd                       <.s..O.u

00411468 <__mprec_tens>:
  411468:	00000000 3ff00000 00000000 40240000     .......?......$@
  411478:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  411488:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  411498:	00000000 412e8480 00000000 416312d0     .......A......cA
  4114a8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  4114b8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  4114c8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  4114d8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  4114e8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  4114f8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  411508:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  411518:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  411528:	79d99db4 44ea7843                       ...yCx.D

00411530 <p05.6055>:
  411530:	00000005 00000019 0000007d              ........}...

0041153c <_ctype_>:
  41153c:	20202000 20202020 28282020 20282828     .         ((((( 
  41154c:	20202020 20202020 20202020 20202020                     
  41155c:	10108820 10101010 10101010 10101010      ...............
  41156c:	04040410 04040404 10040404 10101010     ................
  41157c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  41158c:	01010101 01010101 01010101 10101010     ................
  41159c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4115ac:	02020202 02020202 02020202 10101010     ................
  4115bc:	00000020 00000000 00000000 00000000      ...............
	...

00411640 <_init>:
  411640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  411642:	bf00      	nop
  411644:	bcf8      	pop	{r3, r4, r5, r6, r7}
  411646:	bc08      	pop	{r3}
  411648:	469e      	mov	lr, r3
  41164a:	4770      	bx	lr

0041164c <__init_array_start>:
  41164c:	0040cbb5 	.word	0x0040cbb5

00411650 <__frame_dummy_init_array_entry>:
  411650:	004020f1                                . @.

00411654 <_fini>:
  411654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  411656:	bf00      	nop
  411658:	bcf8      	pop	{r3, r4, r5, r6, r7}
  41165a:	bc08      	pop	{r3}
  41165c:	469e      	mov	lr, r3
  41165e:	4770      	bx	lr

00411660 <__fini_array_start>:
  411660:	004020cd 	.word	0x004020cd

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b430      	push	{r4, r5}
20000002:	b082      	sub	sp, #8
20000004:	9d04      	ldr	r5, [sp, #16]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000006:	b35b      	cbz	r3, 20000060 <efc_perform_read_sequence+0x60>
20000008:	461c      	mov	r4, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000000a:	6803      	ldr	r3, [r0, #0]
2000000c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20000010:	6003      	str	r3, [r0, #0]

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20000012:	b2c9      	uxtb	r1, r1
20000014:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
20000018:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000001a:	6883      	ldr	r3, [r0, #8]
2000001c:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000001e:	9b01      	ldr	r3, [sp, #4]
20000020:	f013 0f01 	tst.w	r3, #1
20000024:	d1f9      	bne.n	2000001a <efc_perform_read_sequence+0x1a>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000026:	b14d      	cbz	r5, 2000003c <efc_perform_read_sequence+0x3c>
20000028:	4621      	mov	r1, r4
2000002a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
2000002e:	4c0d      	ldr	r4, [pc, #52]	; (20000064 <efc_perform_read_sequence+0x64>)
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20000030:	f854 5f04 	ldr.w	r5, [r4, #4]!
20000034:	f841 5b04 	str.w	r5, [r1], #4
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000038:	4299      	cmp	r1, r3
2000003a:	d1f9      	bne.n	20000030 <efc_perform_read_sequence+0x30>
	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000003c:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
2000003e:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000042:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000044:	6883      	ldr	r3, [r0, #8]
20000046:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000048:	9b01      	ldr	r3, [sp, #4]
2000004a:	f013 0f01 	tst.w	r3, #1
2000004e:	d0f9      	beq.n	20000044 <efc_perform_read_sequence+0x44>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20000050:	6803      	ldr	r3, [r0, #0]
20000052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20000056:	6003      	str	r3, [r0, #0]

	return EFC_RC_OK;
20000058:	2000      	movs	r0, #0
}
2000005a:	b002      	add	sp, #8
2000005c:	bc30      	pop	{r4, r5}
2000005e:	4770      	bx	lr
		return EFC_RC_INVALID;
20000060:	2002      	movs	r0, #2
20000062:	e7fa      	b.n	2000005a <efc_perform_read_sequence+0x5a>
20000064:	003ffffc 	.word	0x003ffffc

20000068 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20000068:	6001      	str	r1, [r0, #0]
2000006a:	4770      	bx	lr

2000006c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2000006c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2000006e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20000070:	6883      	ldr	r3, [r0, #8]
20000072:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000074:	9b01      	ldr	r3, [sp, #4]
20000076:	f013 0f01 	tst.w	r3, #1
2000007a:	d0f9      	beq.n	20000070 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
2000007c:	9801      	ldr	r0, [sp, #4]
}
2000007e:	f000 000e 	and.w	r0, r0, #14
20000082:	b002      	add	sp, #8
20000084:	4770      	bx	lr
20000086:	bf00      	nop

20000088 <portable_delay_cycles>:
20000088:	f3bf 8f5f 	dmb	sy
2000008c:	3801      	subs	r0, #1
2000008e:	d1fb      	bne.n	20000088 <portable_delay_cycles>
20000090:	4770      	bx	lr
20000092:	bf00      	nop

20000094 <sd_mmc_cards>:
	...
2000009c:	0019 0000 0000 0000 0000 0000 0000 0000     ................
	...

200000b8 <g_interrupt_enabled>:
200000b8:	0001 0000                                   ....

200000bc <SystemCoreClock>:
200000bc:	0900 003d                                   ..=.

200000c0 <__fdlib_version>:
200000c0:	0001 0000                                   ....

200000c4 <_impure_ptr>:
200000c4:	00c8 2000                                   ... 

200000c8 <impure_data>:
200000c8:	0000 0000 03b4 2000 041c 2000 0484 2000     ....... ... ... 
	...
20000170:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000180:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

200004f0 <__atexit_recursive_mutex>:
200004f0:	2014 2000                                   . . 

200004f4 <__global_locale>:
200004f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000514:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000534:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000554:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000574:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000594:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200005b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200005d4:	f099 0040 e379 0040 0000 0000 153c 0041     ..@.y.@.....<.A.
200005e4:	143c 0041 f624 0040 f624 0040 f624 0040     <.A.$.@.$.@.$.@.
200005f4:	f624 0040 f624 0040 f624 0040 f624 0040     $.@.$.@.$.@.$.@.
20000604:	f624 0040 f624 0040 ffff ffff ffff ffff     $.@.$.@.........
20000614:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2000063c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

20000660 <__malloc_av_>:
	...
20000668:	0660 2000 0660 2000 0668 2000 0668 2000     `.. `.. h.. h.. 
20000678:	0670 2000 0670 2000 0678 2000 0678 2000     p.. p.. x.. x.. 
20000688:	0680 2000 0680 2000 0688 2000 0688 2000     ... ... ... ... 
20000698:	0690 2000 0690 2000 0698 2000 0698 2000     ... ... ... ... 
200006a8:	06a0 2000 06a0 2000 06a8 2000 06a8 2000     ... ... ... ... 
200006b8:	06b0 2000 06b0 2000 06b8 2000 06b8 2000     ... ... ... ... 
200006c8:	06c0 2000 06c0 2000 06c8 2000 06c8 2000     ... ... ... ... 
200006d8:	06d0 2000 06d0 2000 06d8 2000 06d8 2000     ... ... ... ... 
200006e8:	06e0 2000 06e0 2000 06e8 2000 06e8 2000     ... ... ... ... 
200006f8:	06f0 2000 06f0 2000 06f8 2000 06f8 2000     ... ... ... ... 
20000708:	0700 2000 0700 2000 0708 2000 0708 2000     ... ... ... ... 
20000718:	0710 2000 0710 2000 0718 2000 0718 2000     ... ... ... ... 
20000728:	0720 2000 0720 2000 0728 2000 0728 2000      ..  .. (.. (.. 
20000738:	0730 2000 0730 2000 0738 2000 0738 2000     0.. 0.. 8.. 8.. 
20000748:	0740 2000 0740 2000 0748 2000 0748 2000     @.. @.. H.. H.. 
20000758:	0750 2000 0750 2000 0758 2000 0758 2000     P.. P.. X.. X.. 
20000768:	0760 2000 0760 2000 0768 2000 0768 2000     `.. `.. h.. h.. 
20000778:	0770 2000 0770 2000 0778 2000 0778 2000     p.. p.. x.. x.. 
20000788:	0780 2000 0780 2000 0788 2000 0788 2000     ... ... ... ... 
20000798:	0790 2000 0790 2000 0798 2000 0798 2000     ... ... ... ... 
200007a8:	07a0 2000 07a0 2000 07a8 2000 07a8 2000     ... ... ... ... 
200007b8:	07b0 2000 07b0 2000 07b8 2000 07b8 2000     ... ... ... ... 
200007c8:	07c0 2000 07c0 2000 07c8 2000 07c8 2000     ... ... ... ... 
200007d8:	07d0 2000 07d0 2000 07d8 2000 07d8 2000     ... ... ... ... 
200007e8:	07e0 2000 07e0 2000 07e8 2000 07e8 2000     ... ... ... ... 
200007f8:	07f0 2000 07f0 2000 07f8 2000 07f8 2000     ... ... ... ... 
20000808:	0800 2000 0800 2000 0808 2000 0808 2000     ... ... ... ... 
20000818:	0810 2000 0810 2000 0818 2000 0818 2000     ... ... ... ... 
20000828:	0820 2000 0820 2000 0828 2000 0828 2000      ..  .. (.. (.. 
20000838:	0830 2000 0830 2000 0838 2000 0838 2000     0.. 0.. 8.. 8.. 
20000848:	0840 2000 0840 2000 0848 2000 0848 2000     @.. @.. H.. H.. 
20000858:	0850 2000 0850 2000 0858 2000 0858 2000     P.. P.. X.. X.. 
20000868:	0860 2000 0860 2000 0868 2000 0868 2000     `.. `.. h.. h.. 
20000878:	0870 2000 0870 2000 0878 2000 0878 2000     p.. p.. x.. x.. 
20000888:	0880 2000 0880 2000 0888 2000 0888 2000     ... ... ... ... 
20000898:	0890 2000 0890 2000 0898 2000 0898 2000     ... ... ... ... 
200008a8:	08a0 2000 08a0 2000 08a8 2000 08a8 2000     ... ... ... ... 
200008b8:	08b0 2000 08b0 2000 08b8 2000 08b8 2000     ... ... ... ... 
200008c8:	08c0 2000 08c0 2000 08c8 2000 08c8 2000     ... ... ... ... 
200008d8:	08d0 2000 08d0 2000 08d8 2000 08d8 2000     ... ... ... ... 
200008e8:	08e0 2000 08e0 2000 08e8 2000 08e8 2000     ... ... ... ... 
200008f8:	08f0 2000 08f0 2000 08f8 2000 08f8 2000     ... ... ... ... 
20000908:	0900 2000 0900 2000 0908 2000 0908 2000     ... ... ... ... 
20000918:	0910 2000 0910 2000 0918 2000 0918 2000     ... ... ... ... 
20000928:	0920 2000 0920 2000 0928 2000 0928 2000      ..  .. (.. (.. 
20000938:	0930 2000 0930 2000 0938 2000 0938 2000     0.. 0.. 8.. 8.. 
20000948:	0940 2000 0940 2000 0948 2000 0948 2000     @.. @.. H.. H.. 
20000958:	0950 2000 0950 2000 0958 2000 0958 2000     P.. P.. X.. X.. 
20000968:	0960 2000 0960 2000 0968 2000 0968 2000     `.. `.. h.. h.. 
20000978:	0970 2000 0970 2000 0978 2000 0978 2000     p.. p.. x.. x.. 
20000988:	0980 2000 0980 2000 0988 2000 0988 2000     ... ... ... ... 
20000998:	0990 2000 0990 2000 0998 2000 0998 2000     ... ... ... ... 
200009a8:	09a0 2000 09a0 2000 09a8 2000 09a8 2000     ... ... ... ... 
200009b8:	09b0 2000 09b0 2000 09b8 2000 09b8 2000     ... ... ... ... 
200009c8:	09c0 2000 09c0 2000 09c8 2000 09c8 2000     ... ... ... ... 
200009d8:	09d0 2000 09d0 2000 09d8 2000 09d8 2000     ... ... ... ... 
200009e8:	09e0 2000 09e0 2000 09e8 2000 09e8 2000     ... ... ... ... 
200009f8:	09f0 2000 09f0 2000 09f8 2000 09f8 2000     ... ... ... ... 
20000a08:	0a00 2000 0a00 2000 0a08 2000 0a08 2000     ... ... ... ... 
20000a18:	0a10 2000 0a10 2000 0a18 2000 0a18 2000     ... ... ... ... 
20000a28:	0a20 2000 0a20 2000 0a28 2000 0a28 2000      ..  .. (.. (.. 
20000a38:	0a30 2000 0a30 2000 0a38 2000 0a38 2000     0.. 0.. 8.. 8.. 
20000a48:	0a40 2000 0a40 2000 0a48 2000 0a48 2000     @.. @.. H.. H.. 
20000a58:	0a50 2000 0a50 2000 0a58 2000 0a58 2000     P.. P.. X.. X.. 

20000a68 <__malloc_sbrk_base>:
20000a68:	ffff ffff                                   ....

20000a6c <__malloc_trim_threshold>:
20000a6c:	0000 0002                                   ....
