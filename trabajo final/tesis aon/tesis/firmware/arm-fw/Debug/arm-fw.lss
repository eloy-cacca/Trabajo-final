
arm-fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000092d0  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004092d0  004092d0  000192d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000053c  20000000  004092d8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000018d8  20000540  00409818  0002053c  2**3
                  ALLOC
  4 .stack        00003000  20001e18  0040b0f0  0002053c  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  0002053c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020566  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002bc79  00000000  00000000  000205bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004f89  00000000  00000000  0004c238  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000a04e  00000000  00000000  000511c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000012f8  00000000  00000000  0005b20f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000010d8  00000000  00000000  0005c507  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001c51f  00000000  00000000  0005d5df  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001e619  00000000  00000000  00079afe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005b7a8  00000000  00000000  00098117  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000050f0  00000000  00000000  000f38c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	18 4e 00 20 41 7a 40 00 09 7b 40 00 09 7b 40 00     .N. Az@..{@..{@.
  400010:	09 7b 40 00 09 7b 40 00 09 7b 40 00 00 00 00 00     .{@..{@..{@.....
	...
  40002c:	09 7b 40 00 09 7b 40 00 00 00 00 00 09 7b 40 00     .{@..{@......{@.
  40003c:	7d 7d 40 00 09 7b 40 00 09 7b 40 00 09 7b 40 00     }}@..{@..{@..{@.
  40004c:	09 7b 40 00 09 7b 40 00 09 7b 40 00 09 7b 40 00     .{@..{@..{@..{@.
  40005c:	00 00 00 00 09 7b 40 00 11 7e 40 00 00 00 00 00     .....{@..~@.....
  40006c:	69 3e 40 00 81 3e 40 00 00 00 00 00 09 7b 40 00     i>@..>@......{@.
  40007c:	09 7b 40 00 00 00 00 00 00 00 00 00 09 7b 40 00     .{@..........{@.
  40008c:	09 7b 40 00 09 7b 40 00 09 7b 40 00 09 7b 40 00     .{@..{@..{@..{@.
  40009c:	09 7b 40 00 09 7b 40 00 09 7b 40 00 00 00 00 00     .{@..{@..{@.....
	...
  4000b4:	9d 7d 40 00 09 7b 40 00 b5 7d 40 00 09 7b 40 00     .}@..{@..}@..{@.
  4000c4:	09 7b 40 00 e5 45 40 00                             .{@..E@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000540 	.word	0x20000540
  4000e8:	00000000 	.word	0x00000000
  4000ec:	004092d8 	.word	0x004092d8

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	004092d8 	.word	0x004092d8
  40012c:	20000544 	.word	0x20000544
  400130:	004092d8 	.word	0x004092d8
  400134:	00000000 	.word	0x00000000

00400138 <API_CONTROL_start_req>:
 * @brief   Response to CONTROL start request.
 * @details Enables ADC, PWM, control_update and control_background modules.
 * @param[in] msg_ptr Pointer to incoming message
 */
void API_CONTROL_start_req(msg_t *msg_ptr)
{
  400138:	b590      	push	{r4, r7, lr}
  40013a:	b085      	sub	sp, #20
  40013c:	af02      	add	r7, sp, #8
  40013e:	6078      	str	r0, [r7, #4]

    // enable control
    control_enable(1);
  400140:	2001      	movs	r0, #1
  400142:	4b0b      	ldr	r3, [pc, #44]	; (400170 <API_CONTROL_start_req+0x38>)
  400144:	4798      	blx	r3

    // return echo
    comm_send_msg(msg_ptr->uart_ptr,
  400146:	687b      	ldr	r3, [r7, #4]
  400148:	6818      	ldr	r0, [r3, #0]
  40014a:	687b      	ldr	r3, [r7, #4]
  40014c:	7b99      	ldrb	r1, [r3, #14]
                  msg_ptr->packet_in[msg_h_src_id],
                  msg_ptr->packet_in[msg_h_msg_id] + 1,
  40014e:	687b      	ldr	r3, [r7, #4]
  400150:	7c1b      	ldrb	r3, [r3, #16]
    comm_send_msg(msg_ptr->uart_ptr,
  400152:	3301      	adds	r3, #1
  400154:	b2da      	uxtb	r2, r3
  400156:	687b      	ldr	r3, [r7, #4]
  400158:	7c5c      	ldrb	r4, [r3, #17]
  40015a:	687b      	ldr	r3, [r7, #4]
  40015c:	3312      	adds	r3, #18
  40015e:	9300      	str	r3, [sp, #0]
  400160:	4623      	mov	r3, r4
  400162:	4c04      	ldr	r4, [pc, #16]	; (400174 <API_CONTROL_start_req+0x3c>)
  400164:	47a0      	blx	r4
                  msg_ptr->packet_in[msg_h_payload_len],
                  (uint8_t *)&msg_ptr->packet_in[msg_h_payload_1st_byte]);
}
  400166:	bf00      	nop
  400168:	370c      	adds	r7, #12
  40016a:	46bd      	mov	sp, r7
  40016c:	bd90      	pop	{r4, r7, pc}
  40016e:	bf00      	nop
  400170:	00400729 	.word	0x00400729
  400174:	00406a35 	.word	0x00406a35

00400178 <API_CONTROL_stop_req>:
 * @brief   Response to CONTROL stop request.
 * @details Disables ADC, PWM, control_update and control_background modules.
 * @param[in] msg_ptr Pointer to incoming message
 */
void API_CONTROL_stop_req(msg_t *msg_ptr)
{
  400178:	b590      	push	{r4, r7, lr}
  40017a:	b085      	sub	sp, #20
  40017c:	af02      	add	r7, sp, #8
  40017e:	6078      	str	r0, [r7, #4]

    // disable control
    control_enable(0);
  400180:	2000      	movs	r0, #0
  400182:	4b0b      	ldr	r3, [pc, #44]	; (4001b0 <API_CONTROL_stop_req+0x38>)
  400184:	4798      	blx	r3

    // return echo
    comm_send_msg(msg_ptr->uart_ptr,
  400186:	687b      	ldr	r3, [r7, #4]
  400188:	6818      	ldr	r0, [r3, #0]
  40018a:	687b      	ldr	r3, [r7, #4]
  40018c:	7b99      	ldrb	r1, [r3, #14]
                  msg_ptr->packet_in[msg_h_src_id],
                  msg_ptr->packet_in[msg_h_msg_id] + 1,
  40018e:	687b      	ldr	r3, [r7, #4]
  400190:	7c1b      	ldrb	r3, [r3, #16]
    comm_send_msg(msg_ptr->uart_ptr,
  400192:	3301      	adds	r3, #1
  400194:	b2da      	uxtb	r2, r3
  400196:	687b      	ldr	r3, [r7, #4]
  400198:	7c5c      	ldrb	r4, [r3, #17]
  40019a:	687b      	ldr	r3, [r7, #4]
  40019c:	3312      	adds	r3, #18
  40019e:	9300      	str	r3, [sp, #0]
  4001a0:	4623      	mov	r3, r4
  4001a2:	4c04      	ldr	r4, [pc, #16]	; (4001b4 <API_CONTROL_stop_req+0x3c>)
  4001a4:	47a0      	blx	r4
                  msg_ptr->packet_in[msg_h_payload_len],
                  (uint8_t *)&msg_ptr->packet_in[msg_h_payload_1st_byte]);
}
  4001a6:	bf00      	nop
  4001a8:	370c      	adds	r7, #12
  4001aa:	46bd      	mov	sp, r7
  4001ac:	bd90      	pop	{r4, r7, pc}
  4001ae:	bf00      	nop
  4001b0:	00400729 	.word	0x00400729
  4001b4:	00406a35 	.word	0x00406a35

004001b8 <API_CONTROL_set_signal_params_req>:
 *              0 if no error
 *              1 if param num wrong
 * @param[in] msg_ptr Pointer to incoming message
 */
void API_CONTROL_set_signal_params_req(msg_t *msg_ptr)
{
  4001b8:	b590      	push	{r4, r7, lr}
  4001ba:	b087      	sub	sp, #28
  4001bc:	af02      	add	r7, sp, #8
  4001be:	6078      	str	r0, [r7, #4]
    uint16_t amp;
    uint16_t freq;
    uint8_t ret_err;

    // Check if number of parameters is ok
    if (msg_ptr->packet_in[msg_h_payload_len] != 4)
  4001c0:	687b      	ldr	r3, [r7, #4]
  4001c2:	7c5b      	ldrb	r3, [r3, #17]
  4001c4:	2b04      	cmp	r3, #4
  4001c6:	d002      	beq.n	4001ce <API_CONTROL_set_signal_params_req+0x16>
    {
        ret_err = 1;
  4001c8:	2301      	movs	r3, #1
  4001ca:	72fb      	strb	r3, [r7, #11]
  4001cc:	e01b      	b.n	400206 <API_CONTROL_set_signal_params_req+0x4e>
    }
    else
    {
        ret_err = 0;
  4001ce:	2300      	movs	r3, #0
  4001d0:	72fb      	strb	r3, [r7, #11]
        amp = msg_ptr->packet_in[msg_h_payload_1st_byte] + (msg_ptr->packet_in[msg_h_payload_1st_byte + 1] << 8);
  4001d2:	687b      	ldr	r3, [r7, #4]
  4001d4:	7c9b      	ldrb	r3, [r3, #18]
  4001d6:	b29a      	uxth	r2, r3
  4001d8:	687b      	ldr	r3, [r7, #4]
  4001da:	7cdb      	ldrb	r3, [r3, #19]
  4001dc:	b29b      	uxth	r3, r3
  4001de:	021b      	lsls	r3, r3, #8
  4001e0:	b29b      	uxth	r3, r3
  4001e2:	4413      	add	r3, r2
  4001e4:	81fb      	strh	r3, [r7, #14]
        freq = msg_ptr->packet_in[msg_h_payload_1st_byte + 2] + (msg_ptr->packet_in[msg_h_payload_1st_byte + 3] << 8);
  4001e6:	687b      	ldr	r3, [r7, #4]
  4001e8:	7d1b      	ldrb	r3, [r3, #20]
  4001ea:	b29a      	uxth	r2, r3
  4001ec:	687b      	ldr	r3, [r7, #4]
  4001ee:	7d5b      	ldrb	r3, [r3, #21]
  4001f0:	b29b      	uxth	r3, r3
  4001f2:	021b      	lsls	r3, r3, #8
  4001f4:	b29b      	uxth	r3, r3
  4001f6:	4413      	add	r3, r2
  4001f8:	81bb      	strh	r3, [r7, #12]

        control_set_params(amp, freq);
  4001fa:	89ba      	ldrh	r2, [r7, #12]
  4001fc:	89fb      	ldrh	r3, [r7, #14]
  4001fe:	4611      	mov	r1, r2
  400200:	4618      	mov	r0, r3
  400202:	4b0a      	ldr	r3, [pc, #40]	; (40022c <API_CONTROL_set_signal_params_req+0x74>)
  400204:	4798      	blx	r3
    }
    comm_send_msg(msg_ptr->uart_ptr,
  400206:	687b      	ldr	r3, [r7, #4]
  400208:	6818      	ldr	r0, [r3, #0]
  40020a:	687b      	ldr	r3, [r7, #4]
  40020c:	7b99      	ldrb	r1, [r3, #14]
                  msg_ptr->packet_in[msg_h_src_id],
                  msg_ptr->packet_in[msg_h_msg_id] + 1,
  40020e:	687b      	ldr	r3, [r7, #4]
  400210:	7c1b      	ldrb	r3, [r3, #16]
    comm_send_msg(msg_ptr->uart_ptr,
  400212:	3301      	adds	r3, #1
  400214:	b2da      	uxtb	r2, r3
  400216:	f107 030b 	add.w	r3, r7, #11
  40021a:	9300      	str	r3, [sp, #0]
  40021c:	2301      	movs	r3, #1
  40021e:	4c04      	ldr	r4, [pc, #16]	; (400230 <API_CONTROL_set_signal_params_req+0x78>)
  400220:	47a0      	blx	r4
                  1,
                  (uint8_t *)&ret_err);
}
  400222:	bf00      	nop
  400224:	3714      	adds	r7, #20
  400226:	46bd      	mov	sp, r7
  400228:	bd90      	pop	{r4, r7, pc}
  40022a:	bf00      	nop
  40022c:	004006ed 	.word	0x004006ed
  400230:	00406a35 	.word	0x00406a35

00400234 <API_CONTROL_trend_req>:
 * @brief   Response to TREND request.
 * @details Sends back trends calculated so far.
 * @param[in] msg_ptr Pointer to incoming message
 */
void API_CONTROL_trend_req(msg_t *msg_ptr)
{
  400234:	b590      	push	{r4, r7, lr}
  400236:	b087      	sub	sp, #28
  400238:	af02      	add	r7, sp, #8
  40023a:	6078      	str	r0, [r7, #4]
    trend_result_t *trend;

    // get trend from control.c
    trend = control_get_trend();
  40023c:	4b2d      	ldr	r3, [pc, #180]	; (4002f4 <API_CONTROL_trend_req+0xc0>)
  40023e:	4798      	blx	r3
  400240:	60f8      	str	r0, [r7, #12]

    // send trend struct by parts, given msg length limitation
    comm_send_msg(msg_ptr->uart_ptr,
  400242:	687b      	ldr	r3, [r7, #4]
  400244:	6818      	ldr	r0, [r3, #0]
  400246:	687b      	ldr	r3, [r7, #4]
  400248:	7b99      	ldrb	r1, [r3, #14]
                  msg_ptr->packet_in[msg_h_src_id],
                  msg_ptr->packet_in[msg_h_msg_id] + 1,
  40024a:	687b      	ldr	r3, [r7, #4]
  40024c:	7c1b      	ldrb	r3, [r3, #16]
    comm_send_msg(msg_ptr->uart_ptr,
  40024e:	3301      	adds	r3, #1
  400250:	b2da      	uxtb	r2, r3
  400252:	68fb      	ldr	r3, [r7, #12]
  400254:	9300      	str	r3, [sp, #0]
  400256:	2301      	movs	r3, #1
  400258:	4c27      	ldr	r4, [pc, #156]	; (4002f8 <API_CONTROL_trend_req+0xc4>)
  40025a:	47a0      	blx	r4
                  sizeof(trend->flags),
                  (uint8_t *)&trend->flags);

    comm_send_msg(msg_ptr->uart_ptr,
  40025c:	687b      	ldr	r3, [r7, #4]
  40025e:	6818      	ldr	r0, [r3, #0]
  400260:	687b      	ldr	r3, [r7, #4]
  400262:	7b99      	ldrb	r1, [r3, #14]
                  msg_ptr->packet_in[msg_h_src_id],
                  msg_ptr->packet_in[msg_h_msg_id] + 1,
  400264:	687b      	ldr	r3, [r7, #4]
  400266:	7c1b      	ldrb	r3, [r3, #16]
    comm_send_msg(msg_ptr->uart_ptr,
  400268:	3301      	adds	r3, #1
  40026a:	b2da      	uxtb	r2, r3
                  sizeof(trend->params),
                  (uint8_t *)&trend->params);
  40026c:	68fb      	ldr	r3, [r7, #12]
  40026e:	3302      	adds	r3, #2
    comm_send_msg(msg_ptr->uart_ptr,
  400270:	9300      	str	r3, [sp, #0]
  400272:	2308      	movs	r3, #8
  400274:	4c20      	ldr	r4, [pc, #128]	; (4002f8 <API_CONTROL_trend_req+0xc4>)
  400276:	47a0      	blx	r4

    comm_send_msg(msg_ptr->uart_ptr,
  400278:	687b      	ldr	r3, [r7, #4]
  40027a:	6818      	ldr	r0, [r3, #0]
  40027c:	687b      	ldr	r3, [r7, #4]
  40027e:	7b99      	ldrb	r1, [r3, #14]
                  msg_ptr->packet_in[msg_h_src_id],
                  msg_ptr->packet_in[msg_h_msg_id] + 1,
  400280:	687b      	ldr	r3, [r7, #4]
  400282:	7c1b      	ldrb	r3, [r3, #16]
    comm_send_msg(msg_ptr->uart_ptr,
  400284:	3301      	adds	r3, #1
  400286:	b2da      	uxtb	r2, r3
                  sizeof(trend->ch[0]),
                  (uint8_t *)&trend->ch[0]);
  400288:	68fb      	ldr	r3, [r7, #12]
  40028a:	330c      	adds	r3, #12
    comm_send_msg(msg_ptr->uart_ptr,
  40028c:	9300      	str	r3, [sp, #0]
  40028e:	238c      	movs	r3, #140	; 0x8c
  400290:	4c19      	ldr	r4, [pc, #100]	; (4002f8 <API_CONTROL_trend_req+0xc4>)
  400292:	47a0      	blx	r4

    comm_send_msg(msg_ptr->uart_ptr,
  400294:	687b      	ldr	r3, [r7, #4]
  400296:	6818      	ldr	r0, [r3, #0]
  400298:	687b      	ldr	r3, [r7, #4]
  40029a:	7b99      	ldrb	r1, [r3, #14]
                  msg_ptr->packet_in[msg_h_src_id],
                  msg_ptr->packet_in[msg_h_msg_id] + 1,
  40029c:	687b      	ldr	r3, [r7, #4]
  40029e:	7c1b      	ldrb	r3, [r3, #16]
    comm_send_msg(msg_ptr->uart_ptr,
  4002a0:	3301      	adds	r3, #1
  4002a2:	b2da      	uxtb	r2, r3
                  sizeof(trend->ch[1]),
                  (uint8_t *)&trend->ch[1]);
  4002a4:	68fb      	ldr	r3, [r7, #12]
  4002a6:	3398      	adds	r3, #152	; 0x98
    comm_send_msg(msg_ptr->uart_ptr,
  4002a8:	9300      	str	r3, [sp, #0]
  4002aa:	238c      	movs	r3, #140	; 0x8c
  4002ac:	4c12      	ldr	r4, [pc, #72]	; (4002f8 <API_CONTROL_trend_req+0xc4>)
  4002ae:	47a0      	blx	r4

    comm_send_msg(msg_ptr->uart_ptr,
  4002b0:	687b      	ldr	r3, [r7, #4]
  4002b2:	6818      	ldr	r0, [r3, #0]
  4002b4:	687b      	ldr	r3, [r7, #4]
  4002b6:	7b99      	ldrb	r1, [r3, #14]
                  msg_ptr->packet_in[msg_h_src_id],
                  msg_ptr->packet_in[msg_h_msg_id] + 1,
  4002b8:	687b      	ldr	r3, [r7, #4]
  4002ba:	7c1b      	ldrb	r3, [r3, #16]
    comm_send_msg(msg_ptr->uart_ptr,
  4002bc:	3301      	adds	r3, #1
  4002be:	b2da      	uxtb	r2, r3
                  sizeof(trend->ch[2]),
                  (uint8_t *)&trend->ch[2]);
  4002c0:	68fb      	ldr	r3, [r7, #12]
  4002c2:	f503 7392 	add.w	r3, r3, #292	; 0x124
    comm_send_msg(msg_ptr->uart_ptr,
  4002c6:	9300      	str	r3, [sp, #0]
  4002c8:	238c      	movs	r3, #140	; 0x8c
  4002ca:	4c0b      	ldr	r4, [pc, #44]	; (4002f8 <API_CONTROL_trend_req+0xc4>)
  4002cc:	47a0      	blx	r4

    comm_send_msg(msg_ptr->uart_ptr,
  4002ce:	687b      	ldr	r3, [r7, #4]
  4002d0:	6818      	ldr	r0, [r3, #0]
  4002d2:	687b      	ldr	r3, [r7, #4]
  4002d4:	7b99      	ldrb	r1, [r3, #14]
                  msg_ptr->packet_in[msg_h_src_id],
                  msg_ptr->packet_in[msg_h_msg_id] + 1,
  4002d6:	687b      	ldr	r3, [r7, #4]
  4002d8:	7c1b      	ldrb	r3, [r3, #16]
    comm_send_msg(msg_ptr->uart_ptr,
  4002da:	3301      	adds	r3, #1
  4002dc:	b2da      	uxtb	r2, r3
                  sizeof(trend->ch[3]),
                  (uint8_t *)&trend->ch[3]);
  4002de:	68fb      	ldr	r3, [r7, #12]
  4002e0:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
    comm_send_msg(msg_ptr->uart_ptr,
  4002e4:	9300      	str	r3, [sp, #0]
  4002e6:	238c      	movs	r3, #140	; 0x8c
  4002e8:	4c03      	ldr	r4, [pc, #12]	; (4002f8 <API_CONTROL_trend_req+0xc4>)
  4002ea:	47a0      	blx	r4
}
  4002ec:	bf00      	nop
  4002ee:	3714      	adds	r7, #20
  4002f0:	46bd      	mov	sp, r7
  4002f2:	bd90      	pop	{r4, r7, pc}
  4002f4:	00400791 	.word	0x00400791
  4002f8:	00406a35 	.word	0x00406a35

004002fc <API_CONTROL_set_custom_lut_req>:
/**
 * @brief Change LUT custom table.
 * @param[in] msg_ptr Pointer to incoming message
 */
void API_CONTROL_set_custom_lut_req(msg_t *msg_ptr)
{
  4002fc:	b590      	push	{r4, r7, lr}
  4002fe:	b087      	sub	sp, #28
  400300:	af02      	add	r7, sp, #8
  400302:	6078      	str	r0, [r7, #4]
    uint8_t ret_err = 0;
  400304:	2300      	movs	r3, #0
  400306:	73fb      	strb	r3, [r7, #15]

    if (msg_ptr->rx_counter != (LUT_128_N * sizeof(int32_t)))
    {
        ret_err = 1;
  400308:	2301      	movs	r3, #1
  40030a:	73fb      	strb	r3, [r7, #15]
    else
    {
        set_custom_lut((int32_t *)&msg_ptr->packet_in);
    }

    comm_send_msg(msg_ptr->uart_ptr,
  40030c:	687b      	ldr	r3, [r7, #4]
  40030e:	6818      	ldr	r0, [r3, #0]
  400310:	687b      	ldr	r3, [r7, #4]
  400312:	7b99      	ldrb	r1, [r3, #14]
                  msg_ptr->packet_in[msg_h_src_id],
                  msg_ptr->packet_in[msg_h_msg_id] + 1,
  400314:	687b      	ldr	r3, [r7, #4]
  400316:	7c1b      	ldrb	r3, [r3, #16]
    comm_send_msg(msg_ptr->uart_ptr,
  400318:	3301      	adds	r3, #1
  40031a:	b2da      	uxtb	r2, r3
  40031c:	f107 030f 	add.w	r3, r7, #15
  400320:	9300      	str	r3, [sp, #0]
  400322:	2301      	movs	r3, #1
  400324:	4c02      	ldr	r4, [pc, #8]	; (400330 <API_CONTROL_set_custom_lut_req+0x34>)
  400326:	47a0      	blx	r4
                  1,
                  &ret_err);
} //TODO: test this
  400328:	bf00      	nop
  40032a:	3714      	adds	r7, #20
  40032c:	46bd      	mov	sp, r7
  40032e:	bd90      	pop	{r4, r7, pc}
  400330:	00406a35 	.word	0x00406a35

00400334 <API_CONTROL_use_custom_lut_req>:
/**
 * @brief Set LUT table usage.
 * @param[in] msg_ptr Pointer to incoming message
 */
void API_CONTROL_use_custom_lut_req(msg_t *msg_ptr)
{
  400334:	b590      	push	{r4, r7, lr}
  400336:	b087      	sub	sp, #28
  400338:	af02      	add	r7, sp, #8
  40033a:	6078      	str	r0, [r7, #4]
    uint8_t ret_err = 0;
  40033c:	2300      	movs	r3, #0
  40033e:	73fb      	strb	r3, [r7, #15]

    if ((msg_ptr->rx_counter != 1) || (msg_ptr->packet_in[0] != 1) || (msg_ptr->packet_in[0] != 0))
  400340:	687b      	ldr	r3, [r7, #4]
  400342:	791b      	ldrb	r3, [r3, #4]
  400344:	2b01      	cmp	r3, #1
  400346:	d107      	bne.n	400358 <API_CONTROL_use_custom_lut_req+0x24>
  400348:	687b      	ldr	r3, [r7, #4]
  40034a:	7b1b      	ldrb	r3, [r3, #12]
  40034c:	2b01      	cmp	r3, #1
  40034e:	d103      	bne.n	400358 <API_CONTROL_use_custom_lut_req+0x24>
  400350:	687b      	ldr	r3, [r7, #4]
  400352:	7b1b      	ldrb	r3, [r3, #12]
  400354:	2b00      	cmp	r3, #0
  400356:	d002      	beq.n	40035e <API_CONTROL_use_custom_lut_req+0x2a>
    {
        ret_err = 1;
  400358:	2301      	movs	r3, #1
  40035a:	73fb      	strb	r3, [r7, #15]
  40035c:	e004      	b.n	400368 <API_CONTROL_use_custom_lut_req+0x34>
    }
    else
    {
        control_use_custom_lut(msg_ptr->packet_in[0]);
  40035e:	687b      	ldr	r3, [r7, #4]
  400360:	7b1b      	ldrb	r3, [r3, #12]
  400362:	4618      	mov	r0, r3
  400364:	4b09      	ldr	r3, [pc, #36]	; (40038c <API_CONTROL_use_custom_lut_req+0x58>)
  400366:	4798      	blx	r3
    }

    comm_send_msg(msg_ptr->uart_ptr,
  400368:	687b      	ldr	r3, [r7, #4]
  40036a:	6818      	ldr	r0, [r3, #0]
  40036c:	687b      	ldr	r3, [r7, #4]
  40036e:	7b99      	ldrb	r1, [r3, #14]
                  msg_ptr->packet_in[msg_h_src_id],
                  msg_ptr->packet_in[msg_h_msg_id] + 1,
  400370:	687b      	ldr	r3, [r7, #4]
  400372:	7c1b      	ldrb	r3, [r3, #16]
    comm_send_msg(msg_ptr->uart_ptr,
  400374:	3301      	adds	r3, #1
  400376:	b2da      	uxtb	r2, r3
  400378:	f107 030f 	add.w	r3, r7, #15
  40037c:	9300      	str	r3, [sp, #0]
  40037e:	2301      	movs	r3, #1
  400380:	4c03      	ldr	r4, [pc, #12]	; (400390 <API_CONTROL_use_custom_lut_req+0x5c>)
  400382:	47a0      	blx	r4
                  1,
                  &ret_err);
} //TODO: test this
  400384:	bf00      	nop
  400386:	3714      	adds	r7, #20
  400388:	46bd      	mov	sp, r7
  40038a:	bd90      	pop	{r4, r7, pc}
  40038c:	00400881 	.word	0x00400881
  400390:	00406a35 	.word	0x00406a35

00400394 <API_CONTROL_telemetry_req>:
/**
 * @brief Send telemetry data.
 * @param[in] msg_ptr Pointer to incoming message
 */
void API_CONTROL_telemetry_req(msg_t *msg_ptr)
{
  400394:	b590      	push	{r4, r7, lr}
  400396:	b087      	sub	sp, #28
  400398:	af02      	add	r7, sp, #8
  40039a:	6078      	str	r0, [r7, #4]
    signal_params_t *params = control_get_params();
  40039c:	4b09      	ldr	r3, [pc, #36]	; (4003c4 <API_CONTROL_telemetry_req+0x30>)
  40039e:	4798      	blx	r3
  4003a0:	60f8      	str	r0, [r7, #12]

    comm_send_msg(msg_ptr->uart_ptr,
  4003a2:	687b      	ldr	r3, [r7, #4]
  4003a4:	6818      	ldr	r0, [r3, #0]
  4003a6:	687b      	ldr	r3, [r7, #4]
  4003a8:	7b99      	ldrb	r1, [r3, #14]
                  msg_ptr->packet_in[msg_h_src_id],
                  msg_ptr->packet_in[msg_h_msg_id] + 1,
  4003aa:	687b      	ldr	r3, [r7, #4]
  4003ac:	7c1b      	ldrb	r3, [r3, #16]
    comm_send_msg(msg_ptr->uart_ptr,
  4003ae:	3301      	adds	r3, #1
  4003b0:	b2da      	uxtb	r2, r3
  4003b2:	68fb      	ldr	r3, [r7, #12]
  4003b4:	9300      	str	r3, [sp, #0]
  4003b6:	2308      	movs	r3, #8
  4003b8:	4c03      	ldr	r4, [pc, #12]	; (4003c8 <API_CONTROL_telemetry_req+0x34>)
  4003ba:	47a0      	blx	r4
                  sizeof(signal_params_t),
                  (uint8_t *)params);
}
  4003bc:	bf00      	nop
  4003be:	3714      	adds	r7, #20
  4003c0:	46bd      	mov	sp, r7
  4003c2:	bd90      	pop	{r4, r7, pc}
  4003c4:	004007b9 	.word	0x004007b9
  4003c8:	00406a35 	.word	0x00406a35

004003cc <API_CONTROL_set_pwm_duty_req>:
/**
 * @brief Set PWM duty request.
 * @param[in] msg_ptr Pointer to incoming message
 */
void API_CONTROL_set_pwm_duty_req(msg_t *msg_ptr)
{
  4003cc:	b590      	push	{r4, r7, lr}
  4003ce:	b087      	sub	sp, #28
  4003d0:	af02      	add	r7, sp, #8
  4003d2:	6078      	str	r0, [r7, #4]
    uint8_t ret_err = 0;
  4003d4:	2300      	movs	r3, #0
  4003d6:	73bb      	strb	r3, [r7, #14]
    uint8_t duty = msg_ptr->packet_in[msg_h_payload_1st_byte];
  4003d8:	687b      	ldr	r3, [r7, #4]
  4003da:	7c9b      	ldrb	r3, [r3, #18]
  4003dc:	73fb      	strb	r3, [r7, #15]

    if (duty > 100)
  4003de:	7bfb      	ldrb	r3, [r7, #15]
  4003e0:	2b64      	cmp	r3, #100	; 0x64
  4003e2:	d902      	bls.n	4003ea <API_CONTROL_set_pwm_duty_req+0x1e>
        ret_err = 1;
  4003e4:	2301      	movs	r3, #1
  4003e6:	73bb      	strb	r3, [r7, #14]
  4003e8:	e003      	b.n	4003f2 <API_CONTROL_set_pwm_duty_req+0x26>
    else
        control_set_pwm_duty(duty);
  4003ea:	7bfb      	ldrb	r3, [r7, #15]
  4003ec:	4618      	mov	r0, r3
  4003ee:	4b0a      	ldr	r3, [pc, #40]	; (400418 <API_CONTROL_set_pwm_duty_req+0x4c>)
  4003f0:	4798      	blx	r3

    comm_send_msg(msg_ptr->uart_ptr,
  4003f2:	687b      	ldr	r3, [r7, #4]
  4003f4:	6818      	ldr	r0, [r3, #0]
  4003f6:	687b      	ldr	r3, [r7, #4]
  4003f8:	7b99      	ldrb	r1, [r3, #14]
                  msg_ptr->packet_in[msg_h_src_id],
                  msg_ptr->packet_in[msg_h_msg_id] + 1,
  4003fa:	687b      	ldr	r3, [r7, #4]
  4003fc:	7c1b      	ldrb	r3, [r3, #16]
    comm_send_msg(msg_ptr->uart_ptr,
  4003fe:	3301      	adds	r3, #1
  400400:	b2da      	uxtb	r2, r3
  400402:	f107 030e 	add.w	r3, r7, #14
  400406:	9300      	str	r3, [sp, #0]
  400408:	2301      	movs	r3, #1
  40040a:	4c04      	ldr	r4, [pc, #16]	; (40041c <API_CONTROL_set_pwm_duty_req+0x50>)
  40040c:	47a0      	blx	r4
                  1,
                  &ret_err);
}
  40040e:	bf00      	nop
  400410:	3714      	adds	r7, #20
  400412:	46bd      	mov	sp, r7
  400414:	bd90      	pop	{r4, r7, pc}
  400416:	bf00      	nop
  400418:	00400861 	.word	0x00400861
  40041c:	00406a35 	.word	0x00406a35

00400420 <API_FW_ARM_version_req>:
/**
 * @brief Response to FW version request.
 * @param[in] msg_ptr Pointer to incoming message
 */
void API_FW_ARM_version_req(msg_t *msg_ptr)
{
  400420:	b590      	push	{r4, r7, lr}
  400422:	b08b      	sub	sp, #44	; 0x2c
  400424:	af02      	add	r7, sp, #8
  400426:	6078      	str	r0, [r7, #4]

  // by default size = 2 + 12 + 9
  const uint8_t fw_version[2 + sizeof(__DATE__) + sizeof(__TIME__)] = {
  400428:	2301      	movs	r3, #1
  40042a:	723b      	strb	r3, [r7, #8]
  40042c:	2302      	movs	r3, #2
  40042e:	727b      	strb	r3, [r7, #9]
      SETTINGS_ARM_FW_VERSION, SETTINGS_ARM_FW_VERSION_ENG_BUILD,
      __DATE__[0], __DATE__[1], __DATE__[2], __DATE__[3], __DATE__[4], __DATE__[5], __DATE__[6], __DATE__[7], __DATE__[8], __DATE__[9], __DATE__[10], __DATE__[11],
  400430:	2353      	movs	r3, #83	; 0x53
  const uint8_t fw_version[2 + sizeof(__DATE__) + sizeof(__TIME__)] = {
  400432:	72bb      	strb	r3, [r7, #10]
      __DATE__[0], __DATE__[1], __DATE__[2], __DATE__[3], __DATE__[4], __DATE__[5], __DATE__[6], __DATE__[7], __DATE__[8], __DATE__[9], __DATE__[10], __DATE__[11],
  400434:	2365      	movs	r3, #101	; 0x65
  const uint8_t fw_version[2 + sizeof(__DATE__) + sizeof(__TIME__)] = {
  400436:	72fb      	strb	r3, [r7, #11]
      __DATE__[0], __DATE__[1], __DATE__[2], __DATE__[3], __DATE__[4], __DATE__[5], __DATE__[6], __DATE__[7], __DATE__[8], __DATE__[9], __DATE__[10], __DATE__[11],
  400438:	2370      	movs	r3, #112	; 0x70
  const uint8_t fw_version[2 + sizeof(__DATE__) + sizeof(__TIME__)] = {
  40043a:	733b      	strb	r3, [r7, #12]
      __DATE__[0], __DATE__[1], __DATE__[2], __DATE__[3], __DATE__[4], __DATE__[5], __DATE__[6], __DATE__[7], __DATE__[8], __DATE__[9], __DATE__[10], __DATE__[11],
  40043c:	2320      	movs	r3, #32
  const uint8_t fw_version[2 + sizeof(__DATE__) + sizeof(__TIME__)] = {
  40043e:	737b      	strb	r3, [r7, #13]
      __DATE__[0], __DATE__[1], __DATE__[2], __DATE__[3], __DATE__[4], __DATE__[5], __DATE__[6], __DATE__[7], __DATE__[8], __DATE__[9], __DATE__[10], __DATE__[11],
  400440:	2331      	movs	r3, #49	; 0x31
  const uint8_t fw_version[2 + sizeof(__DATE__) + sizeof(__TIME__)] = {
  400442:	73bb      	strb	r3, [r7, #14]
      __DATE__[0], __DATE__[1], __DATE__[2], __DATE__[3], __DATE__[4], __DATE__[5], __DATE__[6], __DATE__[7], __DATE__[8], __DATE__[9], __DATE__[10], __DATE__[11],
  400444:	2333      	movs	r3, #51	; 0x33
  const uint8_t fw_version[2 + sizeof(__DATE__) + sizeof(__TIME__)] = {
  400446:	73fb      	strb	r3, [r7, #15]
      __DATE__[0], __DATE__[1], __DATE__[2], __DATE__[3], __DATE__[4], __DATE__[5], __DATE__[6], __DATE__[7], __DATE__[8], __DATE__[9], __DATE__[10], __DATE__[11],
  400448:	2320      	movs	r3, #32
  const uint8_t fw_version[2 + sizeof(__DATE__) + sizeof(__TIME__)] = {
  40044a:	743b      	strb	r3, [r7, #16]
      __DATE__[0], __DATE__[1], __DATE__[2], __DATE__[3], __DATE__[4], __DATE__[5], __DATE__[6], __DATE__[7], __DATE__[8], __DATE__[9], __DATE__[10], __DATE__[11],
  40044c:	2332      	movs	r3, #50	; 0x32
  const uint8_t fw_version[2 + sizeof(__DATE__) + sizeof(__TIME__)] = {
  40044e:	747b      	strb	r3, [r7, #17]
      __DATE__[0], __DATE__[1], __DATE__[2], __DATE__[3], __DATE__[4], __DATE__[5], __DATE__[6], __DATE__[7], __DATE__[8], __DATE__[9], __DATE__[10], __DATE__[11],
  400450:	2330      	movs	r3, #48	; 0x30
  const uint8_t fw_version[2 + sizeof(__DATE__) + sizeof(__TIME__)] = {
  400452:	74bb      	strb	r3, [r7, #18]
      __DATE__[0], __DATE__[1], __DATE__[2], __DATE__[3], __DATE__[4], __DATE__[5], __DATE__[6], __DATE__[7], __DATE__[8], __DATE__[9], __DATE__[10], __DATE__[11],
  400454:	2332      	movs	r3, #50	; 0x32
  const uint8_t fw_version[2 + sizeof(__DATE__) + sizeof(__TIME__)] = {
  400456:	74fb      	strb	r3, [r7, #19]
      __DATE__[0], __DATE__[1], __DATE__[2], __DATE__[3], __DATE__[4], __DATE__[5], __DATE__[6], __DATE__[7], __DATE__[8], __DATE__[9], __DATE__[10], __DATE__[11],
  400458:	2331      	movs	r3, #49	; 0x31
  const uint8_t fw_version[2 + sizeof(__DATE__) + sizeof(__TIME__)] = {
  40045a:	753b      	strb	r3, [r7, #20]
      __DATE__[0], __DATE__[1], __DATE__[2], __DATE__[3], __DATE__[4], __DATE__[5], __DATE__[6], __DATE__[7], __DATE__[8], __DATE__[9], __DATE__[10], __DATE__[11],
  40045c:	2300      	movs	r3, #0
  const uint8_t fw_version[2 + sizeof(__DATE__) + sizeof(__TIME__)] = {
  40045e:	757b      	strb	r3, [r7, #21]
      __TIME__[0], __TIME__[1], __TIME__[2], __TIME__[3], __TIME__[4], __TIME__[5], __TIME__[6], __TIME__[7], __TIME__[8]};
  400460:	2331      	movs	r3, #49	; 0x31
  const uint8_t fw_version[2 + sizeof(__DATE__) + sizeof(__TIME__)] = {
  400462:	75bb      	strb	r3, [r7, #22]
      __TIME__[0], __TIME__[1], __TIME__[2], __TIME__[3], __TIME__[4], __TIME__[5], __TIME__[6], __TIME__[7], __TIME__[8]};
  400464:	2336      	movs	r3, #54	; 0x36
  const uint8_t fw_version[2 + sizeof(__DATE__) + sizeof(__TIME__)] = {
  400466:	75fb      	strb	r3, [r7, #23]
      __TIME__[0], __TIME__[1], __TIME__[2], __TIME__[3], __TIME__[4], __TIME__[5], __TIME__[6], __TIME__[7], __TIME__[8]};
  400468:	233a      	movs	r3, #58	; 0x3a
  const uint8_t fw_version[2 + sizeof(__DATE__) + sizeof(__TIME__)] = {
  40046a:	763b      	strb	r3, [r7, #24]
      __TIME__[0], __TIME__[1], __TIME__[2], __TIME__[3], __TIME__[4], __TIME__[5], __TIME__[6], __TIME__[7], __TIME__[8]};
  40046c:	2335      	movs	r3, #53	; 0x35
  const uint8_t fw_version[2 + sizeof(__DATE__) + sizeof(__TIME__)] = {
  40046e:	767b      	strb	r3, [r7, #25]
      __TIME__[0], __TIME__[1], __TIME__[2], __TIME__[3], __TIME__[4], __TIME__[5], __TIME__[6], __TIME__[7], __TIME__[8]};
  400470:	2337      	movs	r3, #55	; 0x37
  const uint8_t fw_version[2 + sizeof(__DATE__) + sizeof(__TIME__)] = {
  400472:	76bb      	strb	r3, [r7, #26]
      __TIME__[0], __TIME__[1], __TIME__[2], __TIME__[3], __TIME__[4], __TIME__[5], __TIME__[6], __TIME__[7], __TIME__[8]};
  400474:	233a      	movs	r3, #58	; 0x3a
  const uint8_t fw_version[2 + sizeof(__DATE__) + sizeof(__TIME__)] = {
  400476:	76fb      	strb	r3, [r7, #27]
      __TIME__[0], __TIME__[1], __TIME__[2], __TIME__[3], __TIME__[4], __TIME__[5], __TIME__[6], __TIME__[7], __TIME__[8]};
  400478:	2334      	movs	r3, #52	; 0x34
  const uint8_t fw_version[2 + sizeof(__DATE__) + sizeof(__TIME__)] = {
  40047a:	773b      	strb	r3, [r7, #28]
      __TIME__[0], __TIME__[1], __TIME__[2], __TIME__[3], __TIME__[4], __TIME__[5], __TIME__[6], __TIME__[7], __TIME__[8]};
  40047c:	2334      	movs	r3, #52	; 0x34
  const uint8_t fw_version[2 + sizeof(__DATE__) + sizeof(__TIME__)] = {
  40047e:	777b      	strb	r3, [r7, #29]
      __TIME__[0], __TIME__[1], __TIME__[2], __TIME__[3], __TIME__[4], __TIME__[5], __TIME__[6], __TIME__[7], __TIME__[8]};
  400480:	2300      	movs	r3, #0
  const uint8_t fw_version[2 + sizeof(__DATE__) + sizeof(__TIME__)] = {
  400482:	77bb      	strb	r3, [r7, #30]

  comm_send_msg(msg_ptr->uart_ptr,
  400484:	687b      	ldr	r3, [r7, #4]
  400486:	6818      	ldr	r0, [r3, #0]
  400488:	687b      	ldr	r3, [r7, #4]
  40048a:	7b99      	ldrb	r1, [r3, #14]
                msg_ptr->packet_in[msg_h_src_id],
                msg_ptr->packet_in[msg_h_msg_id] + 1,
  40048c:	687b      	ldr	r3, [r7, #4]
  40048e:	7c1b      	ldrb	r3, [r3, #16]
  comm_send_msg(msg_ptr->uart_ptr,
  400490:	3301      	adds	r3, #1
  400492:	b2da      	uxtb	r2, r3
  400494:	f107 0308 	add.w	r3, r7, #8
  400498:	9300      	str	r3, [sp, #0]
  40049a:	2317      	movs	r3, #23
  40049c:	4c02      	ldr	r4, [pc, #8]	; (4004a8 <API_FW_ARM_version_req+0x88>)
  40049e:	47a0      	blx	r4
                sizeof(fw_version),
                (uint8_t *)&fw_version[0]);
}
  4004a0:	bf00      	nop
  4004a2:	3724      	adds	r7, #36	; 0x24
  4004a4:	46bd      	mov	sp, r7
  4004a6:	bd90      	pop	{r4, r7, pc}
  4004a8:	00406a35 	.word	0x00406a35

004004ac <API_FW_ARM_echo_req>:
/**
 * @brief Send echo back to source.
 * @param[in] msg_ptr Pointer to incoming message
 */
void API_FW_ARM_echo_req(msg_t *msg_ptr)
{
  4004ac:	b590      	push	{r4, r7, lr}
  4004ae:	b085      	sub	sp, #20
  4004b0:	af02      	add	r7, sp, #8
  4004b2:	6078      	str	r0, [r7, #4]

  comm_send_msg(msg_ptr->uart_ptr,
  4004b4:	687b      	ldr	r3, [r7, #4]
  4004b6:	6818      	ldr	r0, [r3, #0]
  4004b8:	687b      	ldr	r3, [r7, #4]
  4004ba:	7b99      	ldrb	r1, [r3, #14]
                msg_ptr->packet_in[msg_h_src_id],
                msg_ptr->packet_in[msg_h_msg_id] + 1,
  4004bc:	687b      	ldr	r3, [r7, #4]
  4004be:	7c1b      	ldrb	r3, [r3, #16]
  comm_send_msg(msg_ptr->uart_ptr,
  4004c0:	3301      	adds	r3, #1
  4004c2:	b2da      	uxtb	r2, r3
  4004c4:	687b      	ldr	r3, [r7, #4]
  4004c6:	7c5c      	ldrb	r4, [r3, #17]
  4004c8:	687b      	ldr	r3, [r7, #4]
  4004ca:	3312      	adds	r3, #18
  4004cc:	9300      	str	r3, [sp, #0]
  4004ce:	4623      	mov	r3, r4
  4004d0:	4c02      	ldr	r4, [pc, #8]	; (4004dc <API_FW_ARM_echo_req+0x30>)
  4004d2:	47a0      	blx	r4
                msg_ptr->packet_in[msg_h_payload_len],
                (uint8_t *)&msg_ptr->packet_in[msg_h_payload_1st_byte]);
}
  4004d4:	bf00      	nop
  4004d6:	370c      	adds	r7, #12
  4004d8:	46bd      	mov	sp, r7
  4004da:	bd90      	pop	{r4, r7, pc}
  4004dc:	00406a35 	.word	0x00406a35

004004e0 <API_FW_ARM_unknow_msg_id>:
/**
 * @brief Msg ID unknown. Received ID is send in the payload.
 * @param[in] msp_ptr Pointer to incoming message
 */
void API_FW_ARM_unknow_msg_id(msg_t *msg_ptr)
{
  4004e0:	b590      	push	{r4, r7, lr}
  4004e2:	b085      	sub	sp, #20
  4004e4:	af02      	add	r7, sp, #8
  4004e6:	6078      	str	r0, [r7, #4]
  comm_send_msg(msg_ptr->uart_ptr,
  4004e8:	687b      	ldr	r3, [r7, #4]
  4004ea:	6818      	ldr	r0, [r3, #0]
  4004ec:	687b      	ldr	r3, [r7, #4]
  4004ee:	7b99      	ldrb	r1, [r3, #14]
  4004f0:	687b      	ldr	r3, [r7, #4]
  4004f2:	3310      	adds	r3, #16
  4004f4:	9300      	str	r3, [sp, #0]
  4004f6:	2301      	movs	r3, #1
  4004f8:	220f      	movs	r2, #15
  4004fa:	4c03      	ldr	r4, [pc, #12]	; (400508 <API_FW_ARM_unknow_msg_id+0x28>)
  4004fc:	47a0      	blx	r4
                msg_ptr->packet_in[msg_h_src_id],
                API_FW_ARM_UNKNOW_MSG_ID_RES,
                1,
                (uint8_t *)&msg_ptr->packet_in[msg_h_msg_id]);
  4004fe:	bf00      	nop
  400500:	370c      	adds	r7, #12
  400502:	46bd      	mov	sp, r7
  400504:	bd90      	pop	{r4, r7, pc}
  400506:	bf00      	nop
  400508:	00406a35 	.word	0x00406a35

0040050c <set_pwm_duty_buf>:

/**************************** LOCAL FUNCTIONS ********************************/

/** @brief Set PWM buffer from value. */
static void set_pwm_duty_buf(uint8_t duty)
{
  40050c:	b480      	push	{r7}
  40050e:	b085      	sub	sp, #20
  400510:	af00      	add	r7, sp, #0
  400512:	4603      	mov	r3, r0
  400514:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    for (i = 0; i < SETTINGS_PWM_BUF_LEN; i++)
  400516:	2300      	movs	r3, #0
  400518:	73fb      	strb	r3, [r7, #15]
  40051a:	e008      	b.n	40052e <set_pwm_duty_buf+0x22>
    {
        pwm_duty_buf[i] = (uint16_t) duty;
  40051c:	7bfb      	ldrb	r3, [r7, #15]
  40051e:	79fa      	ldrb	r2, [r7, #7]
  400520:	b291      	uxth	r1, r2
  400522:	4a07      	ldr	r2, [pc, #28]	; (400540 <set_pwm_duty_buf+0x34>)
  400524:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (i = 0; i < SETTINGS_PWM_BUF_LEN; i++)
  400528:	7bfb      	ldrb	r3, [r7, #15]
  40052a:	3301      	adds	r3, #1
  40052c:	73fb      	strb	r3, [r7, #15]
  40052e:	7bfb      	ldrb	r3, [r7, #15]
  400530:	2b01      	cmp	r3, #1
  400532:	d9f3      	bls.n	40051c <set_pwm_duty_buf+0x10>
    }
}
  400534:	bf00      	nop
  400536:	3714      	adds	r7, #20
  400538:	46bd      	mov	sp, r7
  40053a:	bc80      	pop	{r7}
  40053c:	4770      	bx	lr
  40053e:	bf00      	nop
  400540:	200019b4 	.word	0x200019b4

00400544 <control_init>:

/**************************** GLOBAL FUNCTIONS *******************************/

/** @brief Control module initialization. */
void control_init(void)
{
  400544:	b580      	push	{r7, lr}
  400546:	af00      	add	r7, sp, #0
    // clear variables
    memset((void *)&signals, 0, sizeof(signals));
  400548:	2210      	movs	r2, #16
  40054a:	2100      	movs	r1, #0
  40054c:	4812      	ldr	r0, [pc, #72]	; (400598 <control_init+0x54>)
  40054e:	4b13      	ldr	r3, [pc, #76]	; (40059c <control_init+0x58>)
  400550:	4798      	blx	r3
    memset((void *)&processed_signals, 0, sizeof(processed_signals));
  400552:	f44f 621c 	mov.w	r2, #2496	; 0x9c0
  400556:	2100      	movs	r1, #0
  400558:	4811      	ldr	r0, [pc, #68]	; (4005a0 <control_init+0x5c>)
  40055a:	4b10      	ldr	r3, [pc, #64]	; (40059c <control_init+0x58>)
  40055c:	4798      	blx	r3
    memset((void *)&signal_params, 0, sizeof(signal_params));
  40055e:	2208      	movs	r2, #8
  400560:	2100      	movs	r1, #0
  400562:	4810      	ldr	r0, [pc, #64]	; (4005a4 <control_init+0x60>)
  400564:	4b0d      	ldr	r3, [pc, #52]	; (40059c <control_init+0x58>)
  400566:	4798      	blx	r3

    // index
    memset((void *)&index_accum, 0, sizeof(index_accum));
  400568:	f44f 7238 	mov.w	r2, #736	; 0x2e0
  40056c:	2100      	movs	r1, #0
  40056e:	480e      	ldr	r0, [pc, #56]	; (4005a8 <control_init+0x64>)
  400570:	4b0a      	ldr	r3, [pc, #40]	; (40059c <control_init+0x58>)
  400572:	4798      	blx	r3
    memset((void *)&index_result, 0, sizeof(index_result));
  400574:	22cc      	movs	r2, #204	; 0xcc
  400576:	2100      	movs	r1, #0
  400578:	480c      	ldr	r0, [pc, #48]	; (4005ac <control_init+0x68>)
  40057a:	4b08      	ldr	r3, [pc, #32]	; (40059c <control_init+0x58>)
  40057c:	4798      	blx	r3

    // trend
    trend_reset_accum(&trend_accum);
  40057e:	480c      	ldr	r0, [pc, #48]	; (4005b0 <control_init+0x6c>)
  400580:	4b0c      	ldr	r3, [pc, #48]	; (4005b4 <control_init+0x70>)
  400582:	4798      	blx	r3
    trend_reset_result(&trend_result);
  400584:	480c      	ldr	r0, [pc, #48]	; (4005b8 <control_init+0x74>)
  400586:	4b0d      	ldr	r3, [pc, #52]	; (4005bc <control_init+0x78>)
  400588:	4798      	blx	r3

    // pwm buf
    memset((void *)&pwm_duty_buf[0], 0, sizeof(pwm_duty_buf));
  40058a:	2204      	movs	r2, #4
  40058c:	2100      	movs	r1, #0
  40058e:	480c      	ldr	r0, [pc, #48]	; (4005c0 <control_init+0x7c>)
  400590:	4b02      	ldr	r3, [pc, #8]	; (40059c <control_init+0x58>)
  400592:	4798      	blx	r3
}
  400594:	bf00      	nop
  400596:	bd80      	pop	{r7, pc}
  400598:	2000055c 	.word	0x2000055c
  40059c:	00408eb9 	.word	0x00408eb9
  4005a0:	20000570 	.word	0x20000570
  4005a4:	200019ac 	.word	0x200019ac
  4005a8:	20000f30 	.word	0x20000f30
  4005ac:	20001210 	.word	0x20001210
  4005b0:	200012e0 	.word	0x200012e0
  4005b4:	00401e3d 	.word	0x00401e3d
  4005b8:	20001770 	.word	0x20001770
  4005bc:	00401f05 	.word	0x00401f05
  4005c0:	200019b4 	.word	0x200019b4

004005c4 <control_update>:

/** @brief Control module routine. */
void control_update(void)
{
  4005c4:	b580      	push	{r7, lr}
  4005c6:	af00      	add	r7, sp, #0
    /***************** ADC ******************/
    signal_adc_update(&signals[0]);
  4005c8:	481d      	ldr	r0, [pc, #116]	; (400640 <control_update+0x7c>)
  4005ca:	4b1e      	ldr	r3, [pc, #120]	; (400644 <control_update+0x80>)
  4005cc:	4798      	blx	r3

    /************* CONTROLLER ***************/
    //loop_update(&signals[0], &control_signal);
    signal_process(&signals[0], &processed_signals);
  4005ce:	491e      	ldr	r1, [pc, #120]	; (400648 <control_update+0x84>)
  4005d0:	481b      	ldr	r0, [pc, #108]	; (400640 <control_update+0x7c>)
  4005d2:	4b1e      	ldr	r3, [pc, #120]	; (40064c <control_update+0x88>)
  4005d4:	4798      	blx	r3

    /**************** PWM ******************/
    set_pwm_duty_buf(pwm_duty);
  4005d6:	4b1e      	ldr	r3, [pc, #120]	; (400650 <control_update+0x8c>)
  4005d8:	781b      	ldrb	r3, [r3, #0]
  4005da:	4618      	mov	r0, r3
  4005dc:	4b1d      	ldr	r3, [pc, #116]	; (400654 <control_update+0x90>)
  4005de:	4798      	blx	r3

    /*********** INDEX & TREND **************/
    static uint8_t id = 0;

    // Select accumulator, so that it's always accumulating data
    if (index_accum[0].accum == SETTINGS_INDEX_ACCUM_MAX)
  4005e0:	4b1d      	ldr	r3, [pc, #116]	; (400658 <control_update+0x94>)
  4005e2:	885b      	ldrh	r3, [r3, #2]
  4005e4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
  4005e8:	d103      	bne.n	4005f2 <control_update+0x2e>
        id = 1;
  4005ea:	4b1c      	ldr	r3, [pc, #112]	; (40065c <control_update+0x98>)
  4005ec:	2201      	movs	r2, #1
  4005ee:	701a      	strb	r2, [r3, #0]
  4005f0:	e008      	b.n	400604 <control_update+0x40>
    else if (index_accum[1].accum == SETTINGS_INDEX_ACCUM_MAX)
  4005f2:	4b19      	ldr	r3, [pc, #100]	; (400658 <control_update+0x94>)
  4005f4:	f8b3 3172 	ldrh.w	r3, [r3, #370]	; 0x172
  4005f8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
  4005fc:	d102      	bne.n	400604 <control_update+0x40>
        id = 0;
  4005fe:	4b17      	ldr	r3, [pc, #92]	; (40065c <control_update+0x98>)
  400600:	2200      	movs	r2, #0
  400602:	701a      	strb	r2, [r3, #0]

    // Update index accumulators.
    // It should never execute if accum is full, but just in case.
    if (index_accum[id].accum < SETTINGS_INDEX_ACCUM_MAX)
  400604:	4b15      	ldr	r3, [pc, #84]	; (40065c <control_update+0x98>)
  400606:	781b      	ldrb	r3, [r3, #0]
  400608:	4619      	mov	r1, r3
  40060a:	4a13      	ldr	r2, [pc, #76]	; (400658 <control_update+0x94>)
  40060c:	f44f 73b8 	mov.w	r3, #368	; 0x170
  400610:	fb03 f301 	mul.w	r3, r3, r1
  400614:	4413      	add	r3, r2
  400616:	3302      	adds	r3, #2
  400618:	881b      	ldrh	r3, [r3, #0]
  40061a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
  40061e:	d20c      	bcs.n	40063a <control_update+0x76>
        index_update_accum(&processed_signals, &index_accum[id]);
  400620:	4b0e      	ldr	r3, [pc, #56]	; (40065c <control_update+0x98>)
  400622:	781b      	ldrb	r3, [r3, #0]
  400624:	461a      	mov	r2, r3
  400626:	f44f 73b8 	mov.w	r3, #368	; 0x170
  40062a:	fb03 f302 	mul.w	r3, r3, r2
  40062e:	4a0a      	ldr	r2, [pc, #40]	; (400658 <control_update+0x94>)
  400630:	4413      	add	r3, r2
  400632:	4619      	mov	r1, r3
  400634:	4804      	ldr	r0, [pc, #16]	; (400648 <control_update+0x84>)
  400636:	4b0a      	ldr	r3, [pc, #40]	; (400660 <control_update+0x9c>)
  400638:	4798      	blx	r3
}
  40063a:	bf00      	nop
  40063c:	bd80      	pop	{r7, pc}
  40063e:	bf00      	nop
  400640:	2000055c 	.word	0x2000055c
  400644:	00401635 	.word	0x00401635
  400648:	20000570 	.word	0x20000570
  40064c:	004019f1 	.word	0x004019f1
  400650:	2000000a 	.word	0x2000000a
  400654:	0040050d 	.word	0x0040050d
  400658:	20000f30 	.word	0x20000f30
  40065c:	200019b8 	.word	0x200019b8
  400660:	00401101 	.word	0x00401101

00400664 <control_background>:

/** @brief Control background routines */
void control_background(void)
{
  400664:	b580      	push	{r7, lr}
  400666:	af00      	add	r7, sp, #0
    // Check if control is enabled
    if (!signal_params.enabled)
  400668:	4b16      	ldr	r3, [pc, #88]	; (4006c4 <control_background+0x60>)
  40066a:	781b      	ldrb	r3, [r3, #0]
  40066c:	2b00      	cmp	r3, #0
  40066e:	d027      	beq.n	4006c0 <control_background+0x5c>
        return;

    // Update index result and trend accum
    if (index_accum[0].accum == SETTINGS_INDEX_ACCUM_MAX)
  400670:	4b15      	ldr	r3, [pc, #84]	; (4006c8 <control_background+0x64>)
  400672:	885b      	ldrh	r3, [r3, #2]
  400674:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
  400678:	d108      	bne.n	40068c <control_background+0x28>
    {
        index_update_result(&index_accum[0], &index_result);
  40067a:	4914      	ldr	r1, [pc, #80]	; (4006cc <control_background+0x68>)
  40067c:	4812      	ldr	r0, [pc, #72]	; (4006c8 <control_background+0x64>)
  40067e:	4b14      	ldr	r3, [pc, #80]	; (4006d0 <control_background+0x6c>)
  400680:	4798      	blx	r3
        trend_update_accum(&index_result, &trend_accum);
  400682:	4914      	ldr	r1, [pc, #80]	; (4006d4 <control_background+0x70>)
  400684:	4811      	ldr	r0, [pc, #68]	; (4006cc <control_background+0x68>)
  400686:	4b14      	ldr	r3, [pc, #80]	; (4006d8 <control_background+0x74>)
  400688:	4798      	blx	r3
  40068a:	e00d      	b.n	4006a8 <control_background+0x44>
    }
    else if (index_accum[1].accum == SETTINGS_INDEX_ACCUM_MAX)
  40068c:	4b0e      	ldr	r3, [pc, #56]	; (4006c8 <control_background+0x64>)
  40068e:	f8b3 3172 	ldrh.w	r3, [r3, #370]	; 0x172
  400692:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
  400696:	d107      	bne.n	4006a8 <control_background+0x44>
    {
        index_update_result(&index_accum[1], &index_result);
  400698:	490c      	ldr	r1, [pc, #48]	; (4006cc <control_background+0x68>)
  40069a:	4810      	ldr	r0, [pc, #64]	; (4006dc <control_background+0x78>)
  40069c:	4b0c      	ldr	r3, [pc, #48]	; (4006d0 <control_background+0x6c>)
  40069e:	4798      	blx	r3
        trend_update_accum(&index_result, &trend_accum);
  4006a0:	490c      	ldr	r1, [pc, #48]	; (4006d4 <control_background+0x70>)
  4006a2:	480a      	ldr	r0, [pc, #40]	; (4006cc <control_background+0x68>)
  4006a4:	4b0c      	ldr	r3, [pc, #48]	; (4006d8 <control_background+0x74>)
  4006a6:	4798      	blx	r3
    }

    // Update trend result if condition is met
    if (trend_accum.accum == SETTINGS_TREND_MAX)
  4006a8:	4b0a      	ldr	r3, [pc, #40]	; (4006d4 <control_background+0x70>)
  4006aa:	895b      	ldrh	r3, [r3, #10]
  4006ac:	2b0f      	cmp	r3, #15
  4006ae:	d108      	bne.n	4006c2 <control_background+0x5e>
    {
        trend_update_result(&trend_accum, &trend_result);
  4006b0:	490b      	ldr	r1, [pc, #44]	; (4006e0 <control_background+0x7c>)
  4006b2:	4808      	ldr	r0, [pc, #32]	; (4006d4 <control_background+0x70>)
  4006b4:	4b0b      	ldr	r3, [pc, #44]	; (4006e4 <control_background+0x80>)
  4006b6:	4798      	blx	r3
        trend_reset_accum(&trend_accum);
  4006b8:	4806      	ldr	r0, [pc, #24]	; (4006d4 <control_background+0x70>)
  4006ba:	4b0b      	ldr	r3, [pc, #44]	; (4006e8 <control_background+0x84>)
  4006bc:	4798      	blx	r3
  4006be:	e000      	b.n	4006c2 <control_background+0x5e>
        return;
  4006c0:	bf00      	nop
    }
}
  4006c2:	bd80      	pop	{r7, pc}
  4006c4:	200019ac 	.word	0x200019ac
  4006c8:	20000f30 	.word	0x20000f30
  4006cc:	20001210 	.word	0x20001210
  4006d0:	00401291 	.word	0x00401291
  4006d4:	200012e0 	.word	0x200012e0
  4006d8:	00401f25 	.word	0x00401f25
  4006dc:	200010a0 	.word	0x200010a0
  4006e0:	20001770 	.word	0x20001770
  4006e4:	004020b9 	.word	0x004020b9
  4006e8:	00401e3d 	.word	0x00401e3d

004006ec <control_set_params>:

/** @brief Set signal parameters */
void control_set_params(uint16_t amp, uint16_t fL)
{
  4006ec:	b580      	push	{r7, lr}
  4006ee:	b082      	sub	sp, #8
  4006f0:	af00      	add	r7, sp, #0
  4006f2:	4603      	mov	r3, r0
  4006f4:	460a      	mov	r2, r1
  4006f6:	80fb      	strh	r3, [r7, #6]
  4006f8:	4613      	mov	r3, r2
  4006fa:	80bb      	strh	r3, [r7, #4]
    signal_params.amp = amp;
  4006fc:	4a07      	ldr	r2, [pc, #28]	; (40071c <control_set_params+0x30>)
  4006fe:	88fb      	ldrh	r3, [r7, #6]
  400700:	8053      	strh	r3, [r2, #2]
    signal_params.fL = fL;
  400702:	4a06      	ldr	r2, [pc, #24]	; (40071c <control_set_params+0x30>)
  400704:	88bb      	ldrh	r3, [r7, #4]
  400706:	8093      	strh	r3, [r2, #4]

    // Reset mDFT buffer
    memset((void *)&processed_signals, 0, sizeof(processed_signals));
  400708:	f44f 621c 	mov.w	r2, #2496	; 0x9c0
  40070c:	2100      	movs	r1, #0
  40070e:	4804      	ldr	r0, [pc, #16]	; (400720 <control_set_params+0x34>)
  400710:	4b04      	ldr	r3, [pc, #16]	; (400724 <control_set_params+0x38>)
  400712:	4798      	blx	r3
}
  400714:	bf00      	nop
  400716:	3708      	adds	r7, #8
  400718:	46bd      	mov	sp, r7
  40071a:	bd80      	pop	{r7, pc}
  40071c:	200019ac 	.word	0x200019ac
  400720:	20000570 	.word	0x20000570
  400724:	00408eb9 	.word	0x00408eb9

00400728 <control_enable>:

/** @brief Enable/disable control routines */
void control_enable(uint8_t enable_b)
{
  400728:	b580      	push	{r7, lr}
  40072a:	b082      	sub	sp, #8
  40072c:	af00      	add	r7, sp, #0
  40072e:	4603      	mov	r3, r0
  400730:	71fb      	strb	r3, [r7, #7]
    control_init();
  400732:	4b12      	ldr	r3, [pc, #72]	; (40077c <control_enable+0x54>)
  400734:	4798      	blx	r3
    signal_params.enabled = enable_b;
  400736:	4a12      	ldr	r2, [pc, #72]	; (400780 <control_enable+0x58>)
  400738:	79fb      	ldrb	r3, [r7, #7]
  40073a:	7013      	strb	r3, [r2, #0]
    if (enable_b)
  40073c:	79fb      	ldrb	r3, [r7, #7]
  40073e:	2b00      	cmp	r3, #0
  400740:	d00c      	beq.n	40075c <control_enable+0x34>
    {
        led_red_on();
  400742:	2017      	movs	r0, #23
  400744:	4b0f      	ldr	r3, [pc, #60]	; (400784 <control_enable+0x5c>)
  400746:	4798      	blx	r3
        signal_pwm_enable(true);
  400748:	2001      	movs	r0, #1
  40074a:	4b0f      	ldr	r3, [pc, #60]	; (400788 <control_enable+0x60>)
  40074c:	4798      	blx	r3
        drv1_on();
  40074e:	201d      	movs	r0, #29
  400750:	4b0e      	ldr	r3, [pc, #56]	; (40078c <control_enable+0x64>)
  400752:	4798      	blx	r3
        drv2_on();
  400754:	2001      	movs	r0, #1
  400756:	4b0d      	ldr	r3, [pc, #52]	; (40078c <control_enable+0x64>)
  400758:	4798      	blx	r3
        led_red_off();
        signal_pwm_enable(false);
        drv1_off();
        drv2_off();
    }
}
  40075a:	e00b      	b.n	400774 <control_enable+0x4c>
        led_red_off();
  40075c:	2017      	movs	r0, #23
  40075e:	4b0b      	ldr	r3, [pc, #44]	; (40078c <control_enable+0x64>)
  400760:	4798      	blx	r3
        signal_pwm_enable(false);
  400762:	2000      	movs	r0, #0
  400764:	4b08      	ldr	r3, [pc, #32]	; (400788 <control_enable+0x60>)
  400766:	4798      	blx	r3
        drv1_off();
  400768:	201d      	movs	r0, #29
  40076a:	4b06      	ldr	r3, [pc, #24]	; (400784 <control_enable+0x5c>)
  40076c:	4798      	blx	r3
        drv2_off();
  40076e:	2001      	movs	r0, #1
  400770:	4b04      	ldr	r3, [pc, #16]	; (400784 <control_enable+0x5c>)
  400772:	4798      	blx	r3
}
  400774:	bf00      	nop
  400776:	3708      	adds	r7, #8
  400778:	46bd      	mov	sp, r7
  40077a:	bd80      	pop	{r7, pc}
  40077c:	00400545 	.word	0x00400545
  400780:	200019ac 	.word	0x200019ac
  400784:	004072fd 	.word	0x004072fd
  400788:	00400a85 	.word	0x00400a85
  40078c:	0040732d 	.word	0x0040732d

00400790 <control_get_trend>:

/** @brief Send trends calculated so far */
trend_result_t *control_get_trend()
{
  400790:	b480      	push	{r7}
  400792:	af00      	add	r7, sp, #0
    return &trend_result;
  400794:	4b02      	ldr	r3, [pc, #8]	; (4007a0 <control_get_trend+0x10>)
}
  400796:	4618      	mov	r0, r3
  400798:	46bd      	mov	sp, r7
  40079a:	bc80      	pop	{r7}
  40079c:	4770      	bx	lr
  40079e:	bf00      	nop
  4007a0:	20001770 	.word	0x20001770

004007a4 <control_is_enable>:

/** @brief Returns true or false depending if control is enabled. */
uint8_t control_is_enable(void)
{
  4007a4:	b480      	push	{r7}
  4007a6:	af00      	add	r7, sp, #0
    return signal_params.enabled;
  4007a8:	4b02      	ldr	r3, [pc, #8]	; (4007b4 <control_is_enable+0x10>)
  4007aa:	781b      	ldrb	r3, [r3, #0]
}
  4007ac:	4618      	mov	r0, r3
  4007ae:	46bd      	mov	sp, r7
  4007b0:	bc80      	pop	{r7}
  4007b2:	4770      	bx	lr
  4007b4:	200019ac 	.word	0x200019ac

004007b8 <control_get_params>:

/** @brief Return signal params */
signal_params_t *control_get_params()
{
  4007b8:	b480      	push	{r7}
  4007ba:	af00      	add	r7, sp, #0
    return &signal_params;
  4007bc:	4b02      	ldr	r3, [pc, #8]	; (4007c8 <control_get_params+0x10>)
}
  4007be:	4618      	mov	r0, r3
  4007c0:	46bd      	mov	sp, r7
  4007c2:	bc80      	pop	{r7}
  4007c4:	4770      	bx	lr
  4007c6:	bf00      	nop
  4007c8:	200019ac 	.word	0x200019ac

004007cc <control_check_param_change>:

/** @brief Check if the parameters changed and raised the appropriate flags. */
void control_check_param_change(uint8_t *flags_ptr, signal_params_t *sp)
{
  4007cc:	b480      	push	{r7}
  4007ce:	b083      	sub	sp, #12
  4007d0:	af00      	add	r7, sp, #0
  4007d2:	6078      	str	r0, [r7, #4]
  4007d4:	6039      	str	r1, [r7, #0]
    if (sp->fL != signal_params.fL)
  4007d6:	683b      	ldr	r3, [r7, #0]
  4007d8:	889a      	ldrh	r2, [r3, #4]
  4007da:	4b1b      	ldr	r3, [pc, #108]	; (400848 <control_check_param_change+0x7c>)
  4007dc:	889b      	ldrh	r3, [r3, #4]
  4007de:	429a      	cmp	r2, r3
  4007e0:	d006      	beq.n	4007f0 <control_check_param_change+0x24>
        SET_FLAG(*flags_ptr, SETTINGS_TRENDS_FREQ_CHANGED);
  4007e2:	687b      	ldr	r3, [r7, #4]
  4007e4:	781b      	ldrb	r3, [r3, #0]
  4007e6:	f043 0301 	orr.w	r3, r3, #1
  4007ea:	b2da      	uxtb	r2, r3
  4007ec:	687b      	ldr	r3, [r7, #4]
  4007ee:	701a      	strb	r2, [r3, #0]

    if (sp->amp != signal_params.amp)
  4007f0:	683b      	ldr	r3, [r7, #0]
  4007f2:	885a      	ldrh	r2, [r3, #2]
  4007f4:	4b14      	ldr	r3, [pc, #80]	; (400848 <control_check_param_change+0x7c>)
  4007f6:	885b      	ldrh	r3, [r3, #2]
  4007f8:	429a      	cmp	r2, r3
  4007fa:	d006      	beq.n	40080a <control_check_param_change+0x3e>
        SET_FLAG(*flags_ptr, SETTINGS_TRENDS_AMP_CHANGED);
  4007fc:	687b      	ldr	r3, [r7, #4]
  4007fe:	781b      	ldrb	r3, [r3, #0]
  400800:	f043 0302 	orr.w	r3, r3, #2
  400804:	b2da      	uxtb	r2, r3
  400806:	687b      	ldr	r3, [r7, #4]
  400808:	701a      	strb	r2, [r3, #0]

    if (sp->enabled != signal_params.enabled)
  40080a:	683b      	ldr	r3, [r7, #0]
  40080c:	781a      	ldrb	r2, [r3, #0]
  40080e:	4b0e      	ldr	r3, [pc, #56]	; (400848 <control_check_param_change+0x7c>)
  400810:	781b      	ldrb	r3, [r3, #0]
  400812:	429a      	cmp	r2, r3
  400814:	d006      	beq.n	400824 <control_check_param_change+0x58>
        SET_FLAG(*flags_ptr, SETTINGS_TRENDS_ENABLED_CHANGED);
  400816:	687b      	ldr	r3, [r7, #4]
  400818:	781b      	ldrb	r3, [r3, #0]
  40081a:	f043 0304 	orr.w	r3, r3, #4
  40081e:	b2da      	uxtb	r2, r3
  400820:	687b      	ldr	r3, [r7, #4]
  400822:	701a      	strb	r2, [r3, #0]

    if (sp->custom_waveform_b != signal_params.custom_waveform_b)
  400824:	683b      	ldr	r3, [r7, #0]
  400826:	799a      	ldrb	r2, [r3, #6]
  400828:	4b07      	ldr	r3, [pc, #28]	; (400848 <control_check_param_change+0x7c>)
  40082a:	799b      	ldrb	r3, [r3, #6]
  40082c:	429a      	cmp	r2, r3
  40082e:	d006      	beq.n	40083e <control_check_param_change+0x72>
        SET_FLAG(*flags_ptr, SETTINGS_TRENDS_CUSTOM_WAVEFORM_CHANGED);
  400830:	687b      	ldr	r3, [r7, #4]
  400832:	781b      	ldrb	r3, [r3, #0]
  400834:	f043 0308 	orr.w	r3, r3, #8
  400838:	b2da      	uxtb	r2, r3
  40083a:	687b      	ldr	r3, [r7, #4]
  40083c:	701a      	strb	r2, [r3, #0]
}
  40083e:	bf00      	nop
  400840:	370c      	adds	r7, #12
  400842:	46bd      	mov	sp, r7
  400844:	bc80      	pop	{r7}
  400846:	4770      	bx	lr
  400848:	200019ac 	.word	0x200019ac

0040084c <control_get_pwm_duty_buf>:

/** @brief Return pointer to PWM duty buffer. */
uint16_t *control_get_pwm_duty_buf()
{
  40084c:	b480      	push	{r7}
  40084e:	af00      	add	r7, sp, #0
    return &pwm_duty_buf[0];
  400850:	4b02      	ldr	r3, [pc, #8]	; (40085c <control_get_pwm_duty_buf+0x10>)
}
  400852:	4618      	mov	r0, r3
  400854:	46bd      	mov	sp, r7
  400856:	bc80      	pop	{r7}
  400858:	4770      	bx	lr
  40085a:	bf00      	nop
  40085c:	200019b4 	.word	0x200019b4

00400860 <control_set_pwm_duty>:

/** @brief Set PWM duty. */
void control_set_pwm_duty(uint8_t duty)
{
  400860:	b480      	push	{r7}
  400862:	b083      	sub	sp, #12
  400864:	af00      	add	r7, sp, #0
  400866:	4603      	mov	r3, r0
  400868:	71fb      	strb	r3, [r7, #7]
    pwm_duty = duty;
  40086a:	4a04      	ldr	r2, [pc, #16]	; (40087c <control_set_pwm_duty+0x1c>)
  40086c:	79fb      	ldrb	r3, [r7, #7]
  40086e:	7013      	strb	r3, [r2, #0]
}
  400870:	bf00      	nop
  400872:	370c      	adds	r7, #12
  400874:	46bd      	mov	sp, r7
  400876:	bc80      	pop	{r7}
  400878:	4770      	bx	lr
  40087a:	bf00      	nop
  40087c:	2000000a 	.word	0x2000000a

00400880 <control_use_custom_lut>:

/** @brief Set custom LUT usage. */
void control_use_custom_lut(uint8_t use)
{
  400880:	b480      	push	{r7}
  400882:	b083      	sub	sp, #12
  400884:	af00      	add	r7, sp, #0
  400886:	4603      	mov	r3, r0
  400888:	71fb      	strb	r3, [r7, #7]
    signal_params.custom_waveform_b = use;
  40088a:	4a04      	ldr	r2, [pc, #16]	; (40089c <control_use_custom_lut+0x1c>)
  40088c:	79fb      	ldrb	r3, [r7, #7]
  40088e:	7193      	strb	r3, [r2, #6]
}
  400890:	bf00      	nop
  400892:	370c      	adds	r7, #12
  400894:	46bd      	mov	sp, r7
  400896:	bc80      	pop	{r7}
  400898:	4770      	bx	lr
  40089a:	bf00      	nop
  40089c:	200019ac 	.word	0x200019ac

004008a0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4008a0:	b480      	push	{r7}
  4008a2:	b083      	sub	sp, #12
  4008a4:	af00      	add	r7, sp, #0
  4008a6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4008a8:	687b      	ldr	r3, [r7, #4]
  4008aa:	2b07      	cmp	r3, #7
  4008ac:	d825      	bhi.n	4008fa <osc_get_rate+0x5a>
  4008ae:	a201      	add	r2, pc, #4	; (adr r2, 4008b4 <osc_get_rate+0x14>)
  4008b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4008b4:	004008d5 	.word	0x004008d5
  4008b8:	004008db 	.word	0x004008db
  4008bc:	004008e1 	.word	0x004008e1
  4008c0:	004008e7 	.word	0x004008e7
  4008c4:	004008eb 	.word	0x004008eb
  4008c8:	004008ef 	.word	0x004008ef
  4008cc:	004008f3 	.word	0x004008f3
  4008d0:	004008f7 	.word	0x004008f7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4008d4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4008d8:	e010      	b.n	4008fc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4008da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4008de:	e00d      	b.n	4008fc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4008e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4008e4:	e00a      	b.n	4008fc <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4008e6:	4b08      	ldr	r3, [pc, #32]	; (400908 <osc_get_rate+0x68>)
  4008e8:	e008      	b.n	4008fc <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4008ea:	4b08      	ldr	r3, [pc, #32]	; (40090c <osc_get_rate+0x6c>)
  4008ec:	e006      	b.n	4008fc <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4008ee:	4b08      	ldr	r3, [pc, #32]	; (400910 <osc_get_rate+0x70>)
  4008f0:	e004      	b.n	4008fc <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4008f2:	4b07      	ldr	r3, [pc, #28]	; (400910 <osc_get_rate+0x70>)
  4008f4:	e002      	b.n	4008fc <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4008f6:	4b06      	ldr	r3, [pc, #24]	; (400910 <osc_get_rate+0x70>)
  4008f8:	e000      	b.n	4008fc <osc_get_rate+0x5c>
	}

	return 0;
  4008fa:	2300      	movs	r3, #0
}
  4008fc:	4618      	mov	r0, r3
  4008fe:	370c      	adds	r7, #12
  400900:	46bd      	mov	sp, r7
  400902:	bc80      	pop	{r7}
  400904:	4770      	bx	lr
  400906:	bf00      	nop
  400908:	003d0900 	.word	0x003d0900
  40090c:	007a1200 	.word	0x007a1200
  400910:	00b71b00 	.word	0x00b71b00

00400914 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400914:	b580      	push	{r7, lr}
  400916:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400918:	2006      	movs	r0, #6
  40091a:	4b04      	ldr	r3, [pc, #16]	; (40092c <sysclk_get_main_hz+0x18>)
  40091c:	4798      	blx	r3
  40091e:	4602      	mov	r2, r0
  400920:	4613      	mov	r3, r2
  400922:	009b      	lsls	r3, r3, #2
  400924:	4413      	add	r3, r2
  400926:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400928:	4618      	mov	r0, r3
  40092a:	bd80      	pop	{r7, pc}
  40092c:	004008a1 	.word	0x004008a1

00400930 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400930:	b580      	push	{r7, lr}
  400932:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400934:	4b02      	ldr	r3, [pc, #8]	; (400940 <sysclk_get_cpu_hz+0x10>)
  400936:	4798      	blx	r3
  400938:	4603      	mov	r3, r0
  40093a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40093c:	4618      	mov	r0, r3
  40093e:	bd80      	pop	{r7, pc}
  400940:	00400915 	.word	0x00400915

00400944 <signal_pwm_init>:

/**************************** GLOBAL FUNCTIONS *******************************/

/** @brief PWM initialization routine. */
void signal_pwm_init()
{
  400944:	b580      	push	{r7, lr}
  400946:	b084      	sub	sp, #16
  400948:	af00      	add	r7, sp, #0
    // Set GPIO
    REG_CCFG_SYSIO |= CCFG_SYSIO_SYSIO5;        // Change TDO to PB5
  40094a:	4a40      	ldr	r2, [pc, #256]	; (400a4c <signal_pwm_init+0x108>)
  40094c:	4b3f      	ldr	r3, [pc, #252]	; (400a4c <signal_pwm_init+0x108>)
  40094e:	681b      	ldr	r3, [r3, #0]
  400950:	f043 0320 	orr.w	r3, r3, #32
  400954:	6013      	str	r3, [r2, #0]

    //gpio_configure_pin(SETTINGS_PWM_ADC_H_PIN, SETTINGS_PWM_ADC_H_FLAGS);
    gpio_configure_pin(SETTINGS_PWM_DRV1_H_PIN, SETTINGS_PWM_DRV1_H_FLAGS);
  400956:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40095a:	2002      	movs	r0, #2
  40095c:	4b3c      	ldr	r3, [pc, #240]	; (400a50 <signal_pwm_init+0x10c>)
  40095e:	4798      	blx	r3
    gpio_configure_pin(SETTINGS_PWM_DRV1_L_PIN , SETTINGS_PWM_DRV1_L_FLAGS);
  400960:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400964:	201e      	movs	r0, #30
  400966:	4b3a      	ldr	r3, [pc, #232]	; (400a50 <signal_pwm_init+0x10c>)
  400968:	4798      	blx	r3
    gpio_configure_pin(SETTINGS_PWM_DRV2_H_PIN, SETTINGS_PWM_DRV2_H_FLAGS);
  40096a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40096e:	2025      	movs	r0, #37	; 0x25
  400970:	4b37      	ldr	r3, [pc, #220]	; (400a50 <signal_pwm_init+0x10c>)
  400972:	4798      	blx	r3
    gpio_configure_pin(SETTINGS_PWM_DRV2_L_PIN, SETTINGS_PWM_DRV2_L_FLAGS);
  400974:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400978:	2000      	movs	r0, #0
  40097a:	4b35      	ldr	r3, [pc, #212]	; (400a50 <signal_pwm_init+0x10c>)
  40097c:	4798      	blx	r3

    /* Enable PWM peripheral clock */
    pmc_enable_periph_clk(ID_PWM);
  40097e:	201f      	movs	r0, #31
  400980:	4b34      	ldr	r3, [pc, #208]	; (400a54 <signal_pwm_init+0x110>)
  400982:	4798      	blx	r3

    /* Disable PWM channels */
    //pwm_channel_disable(PWM, SETTINGS_PWM_ADC_CHANNEL);
    pwm_channel_disable(PWM, SETTINGS_PWM_DRV1_CHANNEL);
  400984:	2102      	movs	r1, #2
  400986:	4834      	ldr	r0, [pc, #208]	; (400a58 <signal_pwm_init+0x114>)
  400988:	4b34      	ldr	r3, [pc, #208]	; (400a5c <signal_pwm_init+0x118>)
  40098a:	4798      	blx	r3
    pwm_channel_disable(PWM, SETTINGS_PWM_DRV2_CHANNEL);
  40098c:	2100      	movs	r1, #0
  40098e:	4832      	ldr	r0, [pc, #200]	; (400a58 <signal_pwm_init+0x114>)
  400990:	4b32      	ldr	r3, [pc, #200]	; (400a5c <signal_pwm_init+0x118>)
  400992:	4798      	blx	r3

    /* Set PWM clock A as SETTINGS_PWM_FREQ*PERIOD_VALUE (clock B is not used) */
    pwm_clock_t clock_setting = {
  400994:	4b32      	ldr	r3, [pc, #200]	; (400a60 <signal_pwm_init+0x11c>)
  400996:	607b      	str	r3, [r7, #4]
  400998:	2300      	movs	r3, #0
  40099a:	60bb      	str	r3, [r7, #8]
        .ul_clka = SETTINGS_PWM_FREQ * SETTINGS_PWM_PERIOD,
        .ul_clkb = 0,
        .ul_mck = sysclk_get_cpu_hz()
  40099c:	4b31      	ldr	r3, [pc, #196]	; (400a64 <signal_pwm_init+0x120>)
  40099e:	4798      	blx	r3
  4009a0:	4603      	mov	r3, r0
    pwm_clock_t clock_setting = {
  4009a2:	60fb      	str	r3, [r7, #12]
    };

    pwm_init(PWM, &clock_setting);
  4009a4:	1d3b      	adds	r3, r7, #4
  4009a6:	4619      	mov	r1, r3
  4009a8:	482b      	ldr	r0, [pc, #172]	; (400a58 <signal_pwm_init+0x114>)
  4009aa:	4b2f      	ldr	r3, [pc, #188]	; (400a68 <signal_pwm_init+0x124>)
  4009ac:	4798      	blx	r3

    /* Initialize PWM synchronous channels */
    sync_channel.alignment = PWM_ALIGN_LEFT,
  4009ae:	4b2f      	ldr	r3, [pc, #188]	; (400a6c <signal_pwm_init+0x128>)
  4009b0:	2200      	movs	r2, #0
  4009b2:	811a      	strh	r2, [r3, #8]
    sync_channel.ul_prescaler = PWM_CMR_CPRE_CLKA,
  4009b4:	4b2d      	ldr	r3, [pc, #180]	; (400a6c <signal_pwm_init+0x128>)
  4009b6:	220b      	movs	r2, #11
  4009b8:	605a      	str	r2, [r3, #4]
    sync_channel.ul_period = SETTINGS_PWM_PERIOD,
  4009ba:	4b2c      	ldr	r3, [pc, #176]	; (400a6c <signal_pwm_init+0x128>)
  4009bc:	2264      	movs	r2, #100	; 0x64
  4009be:	611a      	str	r2, [r3, #16]
    sync_channel.ul_duty = INIT_DUTY_VALUE,
  4009c0:	4b2a      	ldr	r3, [pc, #168]	; (400a6c <signal_pwm_init+0x128>)
  4009c2:	2200      	movs	r2, #0
  4009c4:	60da      	str	r2, [r3, #12]
    sync_channel.polarity = PWM_LOW,
  4009c6:	4b29      	ldr	r3, [pc, #164]	; (400a6c <signal_pwm_init+0x128>)
  4009c8:	2200      	movs	r2, #0
  4009ca:	729a      	strb	r2, [r3, #10]
    sync_channel.b_sync_ch = true,
  4009cc:	4b27      	ldr	r3, [pc, #156]	; (400a6c <signal_pwm_init+0x128>)
  4009ce:	2201      	movs	r2, #1
  4009d0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    sync_channel.b_deadtime_generator = true,
  4009d4:	4b25      	ldr	r3, [pc, #148]	; (400a6c <signal_pwm_init+0x128>)
  4009d6:	2201      	movs	r2, #1
  4009d8:	759a      	strb	r2, [r3, #22]
    sync_channel.us_deadtime_pwmh = INIT_DEAD_TIME,
  4009da:	4b24      	ldr	r3, [pc, #144]	; (400a6c <signal_pwm_init+0x128>)
  4009dc:	2205      	movs	r2, #5
  4009de:	835a      	strh	r2, [r3, #26]
    sync_channel.us_deadtime_pwml = INIT_DEAD_TIME,
  4009e0:	4b22      	ldr	r3, [pc, #136]	; (400a6c <signal_pwm_init+0x128>)
  4009e2:	2205      	movs	r2, #5
  4009e4:	839a      	strh	r2, [r3, #28]
    sync_channel.output_selection.b_override_pwmh = false,//FIXME: implementar esto
  4009e6:	4b21      	ldr	r3, [pc, #132]	; (400a6c <signal_pwm_init+0x128>)
  4009e8:	2200      	movs	r2, #0
  4009ea:	779a      	strb	r2, [r3, #30]
    sync_channel.output_selection.b_override_pwml = false,
  4009ec:	4b1f      	ldr	r3, [pc, #124]	; (400a6c <signal_pwm_init+0x128>)
  4009ee:	2200      	movs	r2, #0
  4009f0:	77da      	strb	r2, [r3, #31]
    sync_channel.output_selection.override_level_pwmh = PWM_LOW,
  4009f2:	4b1e      	ldr	r3, [pc, #120]	; (400a6c <signal_pwm_init+0x128>)
  4009f4:	2200      	movs	r2, #0
  4009f6:	f883 2020 	strb.w	r2, [r3, #32]
    sync_channel.output_selection.override_level_pwml = PWM_LOW,
  4009fa:	4b1c      	ldr	r3, [pc, #112]	; (400a6c <signal_pwm_init+0x128>)
  4009fc:	2200      	movs	r2, #0
  4009fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    // TODO: adc

    // Initialize channels
    sync_channel.channel = SETTINGS_PWM_DRV1_CHANNEL; // channel 2
  400a02:	4b1a      	ldr	r3, [pc, #104]	; (400a6c <signal_pwm_init+0x128>)
  400a04:	2202      	movs	r2, #2
  400a06:	601a      	str	r2, [r3, #0]
    pwm_channel_init(PWM, &sync_channel);
  400a08:	4918      	ldr	r1, [pc, #96]	; (400a6c <signal_pwm_init+0x128>)
  400a0a:	4813      	ldr	r0, [pc, #76]	; (400a58 <signal_pwm_init+0x114>)
  400a0c:	4b18      	ldr	r3, [pc, #96]	; (400a70 <signal_pwm_init+0x12c>)
  400a0e:	4798      	blx	r3

    sync_channel.channel = SETTINGS_PWM_DRV2_CHANNEL; //channel 0
  400a10:	4b16      	ldr	r3, [pc, #88]	; (400a6c <signal_pwm_init+0x128>)
  400a12:	2200      	movs	r2, #0
  400a14:	601a      	str	r2, [r3, #0]
    pwm_channel_init(PWM, &sync_channel);
  400a16:	4915      	ldr	r1, [pc, #84]	; (400a6c <signal_pwm_init+0x128>)
  400a18:	480f      	ldr	r0, [pc, #60]	; (400a58 <signal_pwm_init+0x114>)
  400a1a:	4b15      	ldr	r3, [pc, #84]	; (400a70 <signal_pwm_init+0x12c>)
  400a1c:	4798      	blx	r3

    pwm_sync_init(PWM, PWM_SYNC_UPDATE_MODE_2, SYNC_UPDATE_PERIOD);
  400a1e:	2201      	movs	r2, #1
  400a20:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  400a24:	480c      	ldr	r0, [pc, #48]	; (400a58 <signal_pwm_init+0x114>)
  400a26:	4b13      	ldr	r3, [pc, #76]	; (400a74 <signal_pwm_init+0x130>)
  400a28:	4798      	blx	r3

    /*
     * Request PDC transfer as soon as the synchronous update period elapses
     * (comparison unit is ignored).
     */
    pwm_pdc_set_request_mode(PWM, PWM_PDC_UPDATE_PERIOD_ELAPSED, (1 << 0));
  400a2a:	2201      	movs	r2, #1
  400a2c:	2100      	movs	r1, #0
  400a2e:	480a      	ldr	r0, [pc, #40]	; (400a58 <signal_pwm_init+0x114>)
  400a30:	4b11      	ldr	r3, [pc, #68]	; (400a78 <signal_pwm_init+0x134>)
  400a32:	4798      	blx	r3

    /* Configure interrupt for PDC transfer */
    pwm_pdc_enable_interrupt(PWM, PWM_PDC_TX_END);
  400a34:	2102      	movs	r1, #2
  400a36:	4808      	ldr	r0, [pc, #32]	; (400a58 <signal_pwm_init+0x114>)
  400a38:	4b10      	ldr	r3, [pc, #64]	; (400a7c <signal_pwm_init+0x138>)
  400a3a:	4798      	blx	r3

    pwm_channel_enable(PWM, SETTINGS_PWM_DRV2_CHANNEL); //enable both by enabling channel 0
  400a3c:	2100      	movs	r1, #0
  400a3e:	4806      	ldr	r0, [pc, #24]	; (400a58 <signal_pwm_init+0x114>)
  400a40:	4b0f      	ldr	r3, [pc, #60]	; (400a80 <signal_pwm_init+0x13c>)
  400a42:	4798      	blx	r3
}
  400a44:	bf00      	nop
  400a46:	3710      	adds	r7, #16
  400a48:	46bd      	mov	sp, r7
  400a4a:	bd80      	pop	{r7, pc}
  400a4c:	400e0314 	.word	0x400e0314
  400a50:	0040735d 	.word	0x0040735d
  400a54:	004078a9 	.word	0x004078a9
  400a58:	40020000 	.word	0x40020000
  400a5c:	004041bb 	.word	0x004041bb
  400a60:	000f4240 	.word	0x000f4240
  400a64:	00400931 	.word	0x00400931
  400a68:	00403f15 	.word	0x00403f15
  400a6c:	200019bc 	.word	0x200019bc
  400a70:	00403f95 	.word	0x00403f95
  400a74:	00404233 	.word	0x00404233
  400a78:	004041dd 	.word	0x004041dd
  400a7c:	00404219 	.word	0x00404219
  400a80:	00404199 	.word	0x00404199

00400a84 <signal_pwm_enable>:

/** @brief PWM enter fault mode. */
void signal_pwm_enable(bool b_enable)
{
  400a84:	b480      	push	{r7}
  400a86:	b083      	sub	sp, #12
  400a88:	af00      	add	r7, sp, #0
  400a8a:	4603      	mov	r3, r0
  400a8c:	71fb      	strb	r3, [r7, #7]
    // pwm_channel_update_output(PWM, &sync_channel, &channel_output, true);

    // sync_channel.channel = SETTINGS_PWM_DRV2_CHANNEL;
    // pwm_channel_update_output(PWM, &sync_channel, &channel_output, true);

}
  400a8e:	bf00      	nop
  400a90:	370c      	adds	r7, #12
  400a92:	46bd      	mov	sp, r7
  400a94:	bc80      	pop	{r7}
  400a96:	4770      	bx	lr

00400a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  400a98:	b480      	push	{r7}
  400a9a:	b083      	sub	sp, #12
  400a9c:	af00      	add	r7, sp, #0
  400a9e:	4603      	mov	r3, r0
  400aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  400aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400aa6:	2b00      	cmp	r3, #0
  400aa8:	db0b      	blt.n	400ac2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400aaa:	4908      	ldr	r1, [pc, #32]	; (400acc <__NVIC_EnableIRQ+0x34>)
  400aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400ab0:	095b      	lsrs	r3, r3, #5
  400ab2:	79fa      	ldrb	r2, [r7, #7]
  400ab4:	f002 021f 	and.w	r2, r2, #31
  400ab8:	2001      	movs	r0, #1
  400aba:	fa00 f202 	lsl.w	r2, r0, r2
  400abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  400ac2:	bf00      	nop
  400ac4:	370c      	adds	r7, #12
  400ac6:	46bd      	mov	sp, r7
  400ac8:	bc80      	pop	{r7}
  400aca:	4770      	bx	lr
  400acc:	e000e100 	.word	0xe000e100

00400ad0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  400ad0:	b480      	push	{r7}
  400ad2:	b083      	sub	sp, #12
  400ad4:	af00      	add	r7, sp, #0
  400ad6:	4603      	mov	r3, r0
  400ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  400ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400ade:	2b00      	cmp	r3, #0
  400ae0:	db10      	blt.n	400b04 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400ae2:	490b      	ldr	r1, [pc, #44]	; (400b10 <__NVIC_DisableIRQ+0x40>)
  400ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400ae8:	095b      	lsrs	r3, r3, #5
  400aea:	79fa      	ldrb	r2, [r7, #7]
  400aec:	f002 021f 	and.w	r2, r2, #31
  400af0:	2001      	movs	r0, #1
  400af2:	fa00 f202 	lsl.w	r2, r0, r2
  400af6:	3320      	adds	r3, #32
  400af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  400afc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400b00:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
  400b04:	bf00      	nop
  400b06:	370c      	adds	r7, #12
  400b08:	46bd      	mov	sp, r7
  400b0a:	bc80      	pop	{r7}
  400b0c:	4770      	bx	lr
  400b0e:	bf00      	nop
  400b10:	e000e100 	.word	0xe000e100

00400b14 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  400b14:	b480      	push	{r7}
  400b16:	b083      	sub	sp, #12
  400b18:	af00      	add	r7, sp, #0
  400b1a:	4603      	mov	r3, r0
  400b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  400b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400b22:	2b00      	cmp	r3, #0
  400b24:	db0c      	blt.n	400b40 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400b26:	4909      	ldr	r1, [pc, #36]	; (400b4c <__NVIC_ClearPendingIRQ+0x38>)
  400b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400b2c:	095b      	lsrs	r3, r3, #5
  400b2e:	79fa      	ldrb	r2, [r7, #7]
  400b30:	f002 021f 	and.w	r2, r2, #31
  400b34:	2001      	movs	r0, #1
  400b36:	fa00 f202 	lsl.w	r2, r0, r2
  400b3a:	3360      	adds	r3, #96	; 0x60
  400b3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  400b40:	bf00      	nop
  400b42:	370c      	adds	r7, #12
  400b44:	46bd      	mov	sp, r7
  400b46:	bc80      	pop	{r7}
  400b48:	4770      	bx	lr
  400b4a:	bf00      	nop
  400b4c:	e000e100 	.word	0xe000e100

00400b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  400b50:	b480      	push	{r7}
  400b52:	b083      	sub	sp, #12
  400b54:	af00      	add	r7, sp, #0
  400b56:	4603      	mov	r3, r0
  400b58:	6039      	str	r1, [r7, #0]
  400b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  400b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400b60:	2b00      	cmp	r3, #0
  400b62:	db0a      	blt.n	400b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400b64:	490d      	ldr	r1, [pc, #52]	; (400b9c <__NVIC_SetPriority+0x4c>)
  400b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400b6a:	683a      	ldr	r2, [r7, #0]
  400b6c:	b2d2      	uxtb	r2, r2
  400b6e:	0112      	lsls	r2, r2, #4
  400b70:	b2d2      	uxtb	r2, r2
  400b72:	440b      	add	r3, r1
  400b74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
  400b78:	e00a      	b.n	400b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400b7a:	4909      	ldr	r1, [pc, #36]	; (400ba0 <__NVIC_SetPriority+0x50>)
  400b7c:	79fb      	ldrb	r3, [r7, #7]
  400b7e:	f003 030f 	and.w	r3, r3, #15
  400b82:	3b04      	subs	r3, #4
  400b84:	683a      	ldr	r2, [r7, #0]
  400b86:	b2d2      	uxtb	r2, r2
  400b88:	0112      	lsls	r2, r2, #4
  400b8a:	b2d2      	uxtb	r2, r2
  400b8c:	440b      	add	r3, r1
  400b8e:	761a      	strb	r2, [r3, #24]
}
  400b90:	bf00      	nop
  400b92:	370c      	adds	r7, #12
  400b94:	46bd      	mov	sp, r7
  400b96:	bc80      	pop	{r7}
  400b98:	4770      	bx	lr
  400b9a:	bf00      	nop
  400b9c:	e000e100 	.word	0xe000e100
  400ba0:	e000ed00 	.word	0xe000ed00

00400ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  400ba4:	b580      	push	{r7, lr}
  400ba6:	b082      	sub	sp, #8
  400ba8:	af00      	add	r7, sp, #0
  400baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  400bac:	687b      	ldr	r3, [r7, #4]
  400bae:	3b01      	subs	r3, #1
  400bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  400bb4:	d301      	bcc.n	400bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
  400bb6:	2301      	movs	r3, #1
  400bb8:	e00f      	b.n	400bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  400bba:	4a0a      	ldr	r2, [pc, #40]	; (400be4 <SysTick_Config+0x40>)
  400bbc:	687b      	ldr	r3, [r7, #4]
  400bbe:	3b01      	subs	r3, #1
  400bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  400bc2:	210f      	movs	r1, #15
  400bc4:	f04f 30ff 	mov.w	r0, #4294967295
  400bc8:	4b07      	ldr	r3, [pc, #28]	; (400be8 <SysTick_Config+0x44>)
  400bca:	4798      	blx	r3
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  400bcc:	4b05      	ldr	r3, [pc, #20]	; (400be4 <SysTick_Config+0x40>)
  400bce:	2200      	movs	r2, #0
  400bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  400bd2:	4b04      	ldr	r3, [pc, #16]	; (400be4 <SysTick_Config+0x40>)
  400bd4:	2207      	movs	r2, #7
  400bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
  400bd8:	2300      	movs	r3, #0
}
  400bda:	4618      	mov	r0, r3
  400bdc:	3708      	adds	r7, #8
  400bde:	46bd      	mov	sp, r7
  400be0:	bd80      	pop	{r7, pc}
  400be2:	bf00      	nop
  400be4:	e000e010 	.word	0xe000e010
  400be8:	00400b51 	.word	0x00400b51

00400bec <osc_get_rate>:
{
  400bec:	b480      	push	{r7}
  400bee:	b083      	sub	sp, #12
  400bf0:	af00      	add	r7, sp, #0
  400bf2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400bf4:	687b      	ldr	r3, [r7, #4]
  400bf6:	2b07      	cmp	r3, #7
  400bf8:	d825      	bhi.n	400c46 <osc_get_rate+0x5a>
  400bfa:	a201      	add	r2, pc, #4	; (adr r2, 400c00 <osc_get_rate+0x14>)
  400bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400c00:	00400c21 	.word	0x00400c21
  400c04:	00400c27 	.word	0x00400c27
  400c08:	00400c2d 	.word	0x00400c2d
  400c0c:	00400c33 	.word	0x00400c33
  400c10:	00400c37 	.word	0x00400c37
  400c14:	00400c3b 	.word	0x00400c3b
  400c18:	00400c3f 	.word	0x00400c3f
  400c1c:	00400c43 	.word	0x00400c43
		return OSC_SLCK_32K_RC_HZ;
  400c20:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400c24:	e010      	b.n	400c48 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  400c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400c2a:	e00d      	b.n	400c48 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  400c2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400c30:	e00a      	b.n	400c48 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  400c32:	4b08      	ldr	r3, [pc, #32]	; (400c54 <osc_get_rate+0x68>)
  400c34:	e008      	b.n	400c48 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  400c36:	4b08      	ldr	r3, [pc, #32]	; (400c58 <osc_get_rate+0x6c>)
  400c38:	e006      	b.n	400c48 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  400c3a:	4b08      	ldr	r3, [pc, #32]	; (400c5c <osc_get_rate+0x70>)
  400c3c:	e004      	b.n	400c48 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  400c3e:	4b07      	ldr	r3, [pc, #28]	; (400c5c <osc_get_rate+0x70>)
  400c40:	e002      	b.n	400c48 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  400c42:	4b06      	ldr	r3, [pc, #24]	; (400c5c <osc_get_rate+0x70>)
  400c44:	e000      	b.n	400c48 <osc_get_rate+0x5c>
	return 0;
  400c46:	2300      	movs	r3, #0
}
  400c48:	4618      	mov	r0, r3
  400c4a:	370c      	adds	r7, #12
  400c4c:	46bd      	mov	sp, r7
  400c4e:	bc80      	pop	{r7}
  400c50:	4770      	bx	lr
  400c52:	bf00      	nop
  400c54:	003d0900 	.word	0x003d0900
  400c58:	007a1200 	.word	0x007a1200
  400c5c:	00b71b00 	.word	0x00b71b00

00400c60 <sysclk_get_main_hz>:
{
  400c60:	b580      	push	{r7, lr}
  400c62:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  400c64:	2006      	movs	r0, #6
  400c66:	4b04      	ldr	r3, [pc, #16]	; (400c78 <sysclk_get_main_hz+0x18>)
  400c68:	4798      	blx	r3
  400c6a:	4602      	mov	r2, r0
  400c6c:	4613      	mov	r3, r2
  400c6e:	009b      	lsls	r3, r3, #2
  400c70:	4413      	add	r3, r2
  400c72:	009b      	lsls	r3, r3, #2
}
  400c74:	4618      	mov	r0, r3
  400c76:	bd80      	pop	{r7, pc}
  400c78:	00400bed 	.word	0x00400bed

00400c7c <sysclk_get_cpu_hz>:
{
  400c7c:	b580      	push	{r7, lr}
  400c7e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400c80:	4b02      	ldr	r3, [pc, #8]	; (400c8c <sysclk_get_cpu_hz+0x10>)
  400c82:	4798      	blx	r3
  400c84:	4603      	mov	r3, r0
  400c86:	085b      	lsrs	r3, r3, #1
}
  400c88:	4618      	mov	r0, r3
  400c8a:	bd80      	pop	{r7, pc}
  400c8c:	00400c61 	.word	0x00400c61

00400c90 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  400c90:	b580      	push	{r7, lr}
  400c92:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400c94:	4b02      	ldr	r3, [pc, #8]	; (400ca0 <sysclk_get_peripheral_hz+0x10>)
  400c96:	4798      	blx	r3
  400c98:	4603      	mov	r3, r0
  400c9a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400c9c:	4618      	mov	r0, r3
  400c9e:	bd80      	pop	{r7, pc}
  400ca0:	00400c61 	.word	0x00400c61

00400ca4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400ca4:	b580      	push	{r7, lr}
  400ca6:	b082      	sub	sp, #8
  400ca8:	af00      	add	r7, sp, #0
  400caa:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400cac:	6878      	ldr	r0, [r7, #4]
  400cae:	4b03      	ldr	r3, [pc, #12]	; (400cbc <sysclk_enable_peripheral_clock+0x18>)
  400cb0:	4798      	blx	r3
}
  400cb2:	bf00      	nop
  400cb4:	3708      	adds	r7, #8
  400cb6:	46bd      	mov	sp, r7
  400cb8:	bd80      	pop	{r7, pc}
  400cba:	bf00      	nop
  400cbc:	004078a9 	.word	0x004078a9

00400cc0 <arm_leds_init>:

/**************************** LOCAL FUNCTIONS ********************************/

/** @brief Configure LED pins  */
static void arm_leds_init(void)
{
  400cc0:	b580      	push	{r7, lr}
  400cc2:	af00      	add	r7, sp, #0
    // led 0
    gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  400cc4:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400cc8:	2017      	movs	r0, #23
  400cca:	4b07      	ldr	r3, [pc, #28]	; (400ce8 <arm_leds_init+0x28>)
  400ccc:	4798      	blx	r3
    gpio_set_pin_low(LED0_GPIO);                 // initial value
  400cce:	2017      	movs	r0, #23
  400cd0:	4b06      	ldr	r3, [pc, #24]	; (400cec <arm_leds_init+0x2c>)
  400cd2:	4798      	blx	r3

    // led 1
    gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  400cd4:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400cd8:	2010      	movs	r0, #16
  400cda:	4b03      	ldr	r3, [pc, #12]	; (400ce8 <arm_leds_init+0x28>)
  400cdc:	4798      	blx	r3
    gpio_set_pin_low(LED1_GPIO);                 // initial value
  400cde:	2010      	movs	r0, #16
  400ce0:	4b02      	ldr	r3, [pc, #8]	; (400cec <arm_leds_init+0x2c>)
  400ce2:	4798      	blx	r3
}
  400ce4:	bf00      	nop
  400ce6:	bd80      	pop	{r7, pc}
  400ce8:	0040735d 	.word	0x0040735d
  400cec:	0040732d 	.word	0x0040732d

00400cf0 <arm_drv_gpio_init>:

/** @brief GPIO initialization  */
static void arm_drv_gpio_init(void)
{
  400cf0:	b580      	push	{r7, lr}
  400cf2:	af00      	add	r7, sp, #0
    gpio_configure_pin(DRV1_SD_PIN, PIO_OUTPUT_1 | PIO_DEFAULT);
  400cf4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400cf8:	201d      	movs	r0, #29
  400cfa:	4b07      	ldr	r3, [pc, #28]	; (400d18 <arm_drv_gpio_init+0x28>)
  400cfc:	4798      	blx	r3
    gpio_set_pin_high(DRV1_SD_PIN);
  400cfe:	201d      	movs	r0, #29
  400d00:	4b06      	ldr	r3, [pc, #24]	; (400d1c <arm_drv_gpio_init+0x2c>)
  400d02:	4798      	blx	r3

    gpio_configure_pin(DRV2_SD_PIN, PIO_OUTPUT_1 | PIO_DEFAULT);
  400d04:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400d08:	2001      	movs	r0, #1
  400d0a:	4b03      	ldr	r3, [pc, #12]	; (400d18 <arm_drv_gpio_init+0x28>)
  400d0c:	4798      	blx	r3
    gpio_set_pin_high(DRV2_SD_PIN);
  400d0e:	2001      	movs	r0, #1
  400d10:	4b02      	ldr	r3, [pc, #8]	; (400d1c <arm_drv_gpio_init+0x2c>)
  400d12:	4798      	blx	r3
}
  400d14:	bf00      	nop
  400d16:	bd80      	pop	{r7, pc}
  400d18:	0040735d 	.word	0x0040735d
  400d1c:	004072fd 	.word	0x004072fd

00400d20 <arm_uart_init>:

/** @brief UARTs initialization */
static void arm_uart_init(void)
{
  400d20:	b580      	push	{r7, lr}
  400d22:	b084      	sub	sp, #16
  400d24:	af00      	add	r7, sp, #0
    sam_uart_opt_t uart_settings;
    uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400d26:	4b11      	ldr	r3, [pc, #68]	; (400d6c <arm_uart_init+0x4c>)
  400d28:	4798      	blx	r3
  400d2a:	4603      	mov	r3, r0
  400d2c:	607b      	str	r3, [r7, #4]
    uart_settings.ul_baudrate = SETTINGS_COMM_ARM_BAUDRATE;
  400d2e:	4b10      	ldr	r3, [pc, #64]	; (400d70 <arm_uart_init+0x50>)
  400d30:	60bb      	str	r3, [r7, #8]
    uart_settings.ul_mode = US_MR_CHRL_8_BIT |      // 8 bit lenght
  400d32:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
  400d36:	60fb      	str	r3, [r7, #12]
    uart_enable( UART0 );
    uart_enable_interrupt( UART0 , UART_IER_RXRDY );
    */

    // Configure UART1 pins
    gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
  400d38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400d3c:	210c      	movs	r1, #12
  400d3e:	480d      	ldr	r0, [pc, #52]	; (400d74 <arm_uart_init+0x54>)
  400d40:	4b0d      	ldr	r3, [pc, #52]	; (400d78 <arm_uart_init+0x58>)
  400d42:	4798      	blx	r3
    // enable uart clk
    sysclk_enable_peripheral_clock(ID_UART1);
  400d44:	2009      	movs	r0, #9
  400d46:	4b0d      	ldr	r3, [pc, #52]	; (400d7c <arm_uart_init+0x5c>)
  400d48:	4798      	blx	r3
    // Configure UART
    uart_init( UART1 , &uart_settings);
  400d4a:	1d3b      	adds	r3, r7, #4
  400d4c:	4619      	mov	r1, r3
  400d4e:	480c      	ldr	r0, [pc, #48]	; (400d80 <arm_uart_init+0x60>)
  400d50:	4b0c      	ldr	r3, [pc, #48]	; (400d84 <arm_uart_init+0x64>)
  400d52:	4798      	blx	r3
    uart_enable( UART1 );
  400d54:	480a      	ldr	r0, [pc, #40]	; (400d80 <arm_uart_init+0x60>)
  400d56:	4b0c      	ldr	r3, [pc, #48]	; (400d88 <arm_uart_init+0x68>)
  400d58:	4798      	blx	r3
    uart_enable_interrupt( UART1 , UART_IER_RXRDY );
  400d5a:	2101      	movs	r1, #1
  400d5c:	4808      	ldr	r0, [pc, #32]	; (400d80 <arm_uart_init+0x60>)
  400d5e:	4b0b      	ldr	r3, [pc, #44]	; (400d8c <arm_uart_init+0x6c>)
  400d60:	4798      	blx	r3
}
  400d62:	bf00      	nop
  400d64:	3710      	adds	r7, #16
  400d66:	46bd      	mov	sp, r7
  400d68:	bd80      	pop	{r7, pc}
  400d6a:	bf00      	nop
  400d6c:	00400c91 	.word	0x00400c91
  400d70:	000e4e1c 	.word	0x000e4e1c
  400d74:	400e1000 	.word	0x400e1000
  400d78:	0040750d 	.word	0x0040750d
  400d7c:	00400ca5 	.word	0x00400ca5
  400d80:	400e0800 	.word	0x400e0800
  400d84:	00404287 	.word	0x00404287
  400d88:	004042e7 	.word	0x004042e7
  400d8c:	004042ff 	.word	0x004042ff

00400d90 <arm_toggle_leds_3_times>:

/** @brief Toggle LEDs 3 times */
static void arm_toggle_leds_3_times(void)
{
  400d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400d94:	b087      	sub	sp, #28
  400d96:	af00      	add	r7, sp, #0
    uint8_t repeat;

    // turn on and off leds
    for ( repeat=0 ; repeat<3 ; repeat++ ) {
  400d98:	2300      	movs	r3, #0
  400d9a:	75fb      	strb	r3, [r7, #23]
  400d9c:	e080      	b.n	400ea0 <arm_toggle_leds_3_times+0x110>
        // leds on
        led_green_on();
  400d9e:	2010      	movs	r0, #16
  400da0:	4b44      	ldr	r3, [pc, #272]	; (400eb4 <arm_toggle_leds_3_times+0x124>)
  400da2:	4798      	blx	r3
        led_red_on();
  400da4:	2017      	movs	r0, #23
  400da6:	4b43      	ldr	r3, [pc, #268]	; (400eb4 <arm_toggle_leds_3_times+0x124>)
  400da8:	4798      	blx	r3
        delay_ms(250);
  400daa:	4b43      	ldr	r3, [pc, #268]	; (400eb8 <arm_toggle_leds_3_times+0x128>)
  400dac:	4798      	blx	r3
  400dae:	4603      	mov	r3, r0
  400db0:	4619      	mov	r1, r3
  400db2:	f04f 0200 	mov.w	r2, #0
  400db6:	460b      	mov	r3, r1
  400db8:	4614      	mov	r4, r2
  400dba:	0160      	lsls	r0, r4, #5
  400dbc:	60f8      	str	r0, [r7, #12]
  400dbe:	68f8      	ldr	r0, [r7, #12]
  400dc0:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
  400dc4:	60f8      	str	r0, [r7, #12]
  400dc6:	015b      	lsls	r3, r3, #5
  400dc8:	60bb      	str	r3, [r7, #8]
  400dca:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
  400dce:	1a5b      	subs	r3, r3, r1
  400dd0:	eb64 0402 	sbc.w	r4, r4, r2
  400dd4:	ea4f 0984 	mov.w	r9, r4, lsl #2
  400dd8:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
  400ddc:	ea4f 0883 	mov.w	r8, r3, lsl #2
  400de0:	4643      	mov	r3, r8
  400de2:	464c      	mov	r4, r9
  400de4:	185b      	adds	r3, r3, r1
  400de6:	eb44 0402 	adc.w	r4, r4, r2
  400dea:	18db      	adds	r3, r3, r3
  400dec:	eb44 0404 	adc.w	r4, r4, r4
  400df0:	4619      	mov	r1, r3
  400df2:	4622      	mov	r2, r4
  400df4:	f243 63af 	movw	r3, #13999	; 0x36af
  400df8:	f04f 0400 	mov.w	r4, #0
  400dfc:	18cd      	adds	r5, r1, r3
  400dfe:	eb42 0604 	adc.w	r6, r2, r4
  400e02:	4628      	mov	r0, r5
  400e04:	4631      	mov	r1, r6
  400e06:	4c2d      	ldr	r4, [pc, #180]	; (400ebc <arm_toggle_leds_3_times+0x12c>)
  400e08:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400e0c:	f04f 0300 	mov.w	r3, #0
  400e10:	47a0      	blx	r4
  400e12:	4603      	mov	r3, r0
  400e14:	460c      	mov	r4, r1
  400e16:	4618      	mov	r0, r3
  400e18:	4b29      	ldr	r3, [pc, #164]	; (400ec0 <arm_toggle_leds_3_times+0x130>)
  400e1a:	4798      	blx	r3
        // leds off
        led_green_off();
  400e1c:	2010      	movs	r0, #16
  400e1e:	4b29      	ldr	r3, [pc, #164]	; (400ec4 <arm_toggle_leds_3_times+0x134>)
  400e20:	4798      	blx	r3
        led_red_off();
  400e22:	2017      	movs	r0, #23
  400e24:	4b27      	ldr	r3, [pc, #156]	; (400ec4 <arm_toggle_leds_3_times+0x134>)
  400e26:	4798      	blx	r3
        delay_ms(250);
  400e28:	4b23      	ldr	r3, [pc, #140]	; (400eb8 <arm_toggle_leds_3_times+0x128>)
  400e2a:	4798      	blx	r3
  400e2c:	4603      	mov	r3, r0
  400e2e:	4619      	mov	r1, r3
  400e30:	f04f 0200 	mov.w	r2, #0
  400e34:	460b      	mov	r3, r1
  400e36:	4614      	mov	r4, r2
  400e38:	ea4f 1b44 	mov.w	fp, r4, lsl #5
  400e3c:	ea4b 6bd3 	orr.w	fp, fp, r3, lsr #27
  400e40:	ea4f 1a43 	mov.w	sl, r3, lsl #5
  400e44:	4653      	mov	r3, sl
  400e46:	465c      	mov	r4, fp
  400e48:	1a5b      	subs	r3, r3, r1
  400e4a:	eb64 0402 	sbc.w	r4, r4, r2
  400e4e:	00a0      	lsls	r0, r4, #2
  400e50:	6078      	str	r0, [r7, #4]
  400e52:	6878      	ldr	r0, [r7, #4]
  400e54:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
  400e58:	6078      	str	r0, [r7, #4]
  400e5a:	009b      	lsls	r3, r3, #2
  400e5c:	603b      	str	r3, [r7, #0]
  400e5e:	e9d7 3400 	ldrd	r3, r4, [r7]
  400e62:	185b      	adds	r3, r3, r1
  400e64:	eb44 0402 	adc.w	r4, r4, r2
  400e68:	18db      	adds	r3, r3, r3
  400e6a:	eb44 0404 	adc.w	r4, r4, r4
  400e6e:	4619      	mov	r1, r3
  400e70:	4622      	mov	r2, r4
  400e72:	f243 63af 	movw	r3, #13999	; 0x36af
  400e76:	f04f 0400 	mov.w	r4, #0
  400e7a:	18cd      	adds	r5, r1, r3
  400e7c:	eb42 0604 	adc.w	r6, r2, r4
  400e80:	4628      	mov	r0, r5
  400e82:	4631      	mov	r1, r6
  400e84:	4c0d      	ldr	r4, [pc, #52]	; (400ebc <arm_toggle_leds_3_times+0x12c>)
  400e86:	f243 62b0 	movw	r2, #14000	; 0x36b0
  400e8a:	f04f 0300 	mov.w	r3, #0
  400e8e:	47a0      	blx	r4
  400e90:	4603      	mov	r3, r0
  400e92:	460c      	mov	r4, r1
  400e94:	4618      	mov	r0, r3
  400e96:	4b0a      	ldr	r3, [pc, #40]	; (400ec0 <arm_toggle_leds_3_times+0x130>)
  400e98:	4798      	blx	r3
    for ( repeat=0 ; repeat<3 ; repeat++ ) {
  400e9a:	7dfb      	ldrb	r3, [r7, #23]
  400e9c:	3301      	adds	r3, #1
  400e9e:	75fb      	strb	r3, [r7, #23]
  400ea0:	7dfb      	ldrb	r3, [r7, #23]
  400ea2:	2b02      	cmp	r3, #2
  400ea4:	f67f af7b 	bls.w	400d9e <arm_toggle_leds_3_times+0xe>
    }
}
  400ea8:	bf00      	nop
  400eaa:	371c      	adds	r7, #28
  400eac:	46bd      	mov	sp, r7
  400eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400eb2:	bf00      	nop
  400eb4:	004072fd 	.word	0x004072fd
  400eb8:	00400c7d 	.word	0x00400c7d
  400ebc:	00408a19 	.word	0x00408a19
  400ec0:	20000001 	.word	0x20000001
  400ec4:	0040732d 	.word	0x0040732d

00400ec8 <arm_usb_init>:

/** @brief USB initialization */
static void arm_usb_init(void)
{
  400ec8:	b580      	push	{r7, lr}
  400eca:	af00      	add	r7, sp, #0
    udc_start();
  400ecc:	4b01      	ldr	r3, [pc, #4]	; (400ed4 <arm_usb_init+0xc>)
  400ece:	4798      	blx	r3
}
  400ed0:	bf00      	nop
  400ed2:	bd80      	pop	{r7, pc}
  400ed4:	004030d1 	.word	0x004030d1

00400ed8 <arm_adc_init>:

/** @brief ADC initialization */
static void arm_adc_init(void)
{
  400ed8:	b580      	push	{r7, lr}
  400eda:	af00      	add	r7, sp, #0
    signal_adc_init();
  400edc:	4b01      	ldr	r3, [pc, #4]	; (400ee4 <arm_adc_init+0xc>)
  400ede:	4798      	blx	r3
}
  400ee0:	bf00      	nop
  400ee2:	bd80      	pop	{r7, pc}
  400ee4:	00401771 	.word	0x00401771

00400ee8 <arm_pwm_init>:

/** @brief PWM initialization */
static void arm_pwm_init(void)
{
  400ee8:	b580      	push	{r7, lr}
  400eea:	af00      	add	r7, sp, #0
    // gpio_configure_pin(PIO_PA9_IDX, PIO_INPUT | PIO_IT_RISE_EDGE);
    // pio_handler_set(PIOA, ID_PIOA, PIO_PA9, PIO_IT_RISE_EDGE, overcurrent_isr);
    // pio_enable_interrupt(PIOA, PIO_PA9);

    // PWMs
    signal_pwm_init();
  400eec:	4b01      	ldr	r3, [pc, #4]	; (400ef4 <arm_pwm_init+0xc>)
  400eee:	4798      	blx	r3
}
  400ef0:	bf00      	nop
  400ef2:	bd80      	pop	{r7, pc}
  400ef4:	00400945 	.word	0x00400945

00400ef8 <system_init>:

/**************************** GLOBAL FUNCTIONS *******************************/

/** @brief Initialize system */
void system_init()
{
  400ef8:	b580      	push	{r7, lr}
  400efa:	af00      	add	r7, sp, #0
    // general initialization
    WDT->WDT_MR = WDT_MR_WDDIS; // Disable the watchdog
  400efc:	4b1f      	ldr	r3, [pc, #124]	; (400f7c <system_init+0x84>)
  400efe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400f02:	605a      	str	r2, [r3, #4]
    sysclk_init();
  400f04:	4b1e      	ldr	r3, [pc, #120]	; (400f80 <system_init+0x88>)
  400f06:	4798      	blx	r3
    sysclk_enable_peripheral_clock(ID_PIOA);
  400f08:	200b      	movs	r0, #11
  400f0a:	4b1e      	ldr	r3, [pc, #120]	; (400f84 <system_init+0x8c>)
  400f0c:	4798      	blx	r3
    sysclk_enable_peripheral_clock(ID_PIOB);
  400f0e:	200c      	movs	r0, #12
  400f10:	4b1c      	ldr	r3, [pc, #112]	; (400f84 <system_init+0x8c>)
  400f12:	4798      	blx	r3
    gpio_configure_group( PIOA , 0xFFFFFFFF , (PIO_INPUT | PIO_DEFAULT));
  400f14:	f04f 5220 	mov.w	r2, #671088640	; 0x28000000
  400f18:	f04f 31ff 	mov.w	r1, #4294967295
  400f1c:	481a      	ldr	r0, [pc, #104]	; (400f88 <system_init+0x90>)
  400f1e:	4b1b      	ldr	r3, [pc, #108]	; (400f8c <system_init+0x94>)
  400f20:	4798      	blx	r3
    gpio_configure_group( PIOB , 0xFFFFFFFF , (PIO_INPUT | PIO_DEFAULT));
  400f22:	f04f 5220 	mov.w	r2, #671088640	; 0x28000000
  400f26:	f04f 31ff 	mov.w	r1, #4294967295
  400f2a:	4819      	ldr	r0, [pc, #100]	; (400f90 <system_init+0x98>)
  400f2c:	4b17      	ldr	r3, [pc, #92]	; (400f8c <system_init+0x94>)
  400f2e:	4798      	blx	r3
    pio_pull_down( PIOA , 0xFFFFFFFF , 0 );
  400f30:	2200      	movs	r2, #0
  400f32:	f04f 31ff 	mov.w	r1, #4294967295
  400f36:	4814      	ldr	r0, [pc, #80]	; (400f88 <system_init+0x90>)
  400f38:	4b16      	ldr	r3, [pc, #88]	; (400f94 <system_init+0x9c>)
  400f3a:	4798      	blx	r3
    pio_pull_down( PIOB , 0xFFFFFFFF , 0 );
  400f3c:	2200      	movs	r2, #0
  400f3e:	f04f 31ff 	mov.w	r1, #4294967295
  400f42:	4813      	ldr	r0, [pc, #76]	; (400f90 <system_init+0x98>)
  400f44:	4b13      	ldr	r3, [pc, #76]	; (400f94 <system_init+0x9c>)
  400f46:	4798      	blx	r3
    pio_pull_up( PIOA , 0xFFFFFFFF , 0 );
  400f48:	2200      	movs	r2, #0
  400f4a:	f04f 31ff 	mov.w	r1, #4294967295
  400f4e:	480e      	ldr	r0, [pc, #56]	; (400f88 <system_init+0x90>)
  400f50:	4b11      	ldr	r3, [pc, #68]	; (400f98 <system_init+0xa0>)
  400f52:	4798      	blx	r3
    pio_pull_up( PIOB , 0xFFFFFFFF , 0 );
  400f54:	2200      	movs	r2, #0
  400f56:	f04f 31ff 	mov.w	r1, #4294967295
  400f5a:	480d      	ldr	r0, [pc, #52]	; (400f90 <system_init+0x98>)
  400f5c:	4b0e      	ldr	r3, [pc, #56]	; (400f98 <system_init+0xa0>)
  400f5e:	4798      	blx	r3

    // specific initialization
    arm_leds_init();
  400f60:	4b0e      	ldr	r3, [pc, #56]	; (400f9c <system_init+0xa4>)
  400f62:	4798      	blx	r3
    arm_drv_gpio_init();
  400f64:	4b0e      	ldr	r3, [pc, #56]	; (400fa0 <system_init+0xa8>)
  400f66:	4798      	blx	r3
    arm_uart_init();
  400f68:	4b0e      	ldr	r3, [pc, #56]	; (400fa4 <system_init+0xac>)
  400f6a:	4798      	blx	r3
    arm_adc_init();
  400f6c:	4b0e      	ldr	r3, [pc, #56]	; (400fa8 <system_init+0xb0>)
  400f6e:	4798      	blx	r3
    arm_pwm_init();
  400f70:	4b0e      	ldr	r3, [pc, #56]	; (400fac <system_init+0xb4>)
  400f72:	4798      	blx	r3
    arm_usb_init();
  400f74:	4b0e      	ldr	r3, [pc, #56]	; (400fb0 <system_init+0xb8>)
  400f76:	4798      	blx	r3
}
  400f78:	bf00      	nop
  400f7a:	bd80      	pop	{r7, pc}
  400f7c:	400e1450 	.word	0x400e1450
  400f80:	00406ffd 	.word	0x00406ffd
  400f84:	00400ca5 	.word	0x00400ca5
  400f88:	400e0e00 	.word	0x400e0e00
  400f8c:	0040750d 	.word	0x0040750d
  400f90:	400e1000 	.word	0x400e1000
  400f94:	00407289 	.word	0x00407289
  400f98:	0040706d 	.word	0x0040706d
  400f9c:	00400cc1 	.word	0x00400cc1
  400fa0:	00400cf1 	.word	0x00400cf1
  400fa4:	00400d21 	.word	0x00400d21
  400fa8:	00400ed9 	.word	0x00400ed9
  400fac:	00400ee9 	.word	0x00400ee9
  400fb0:	00400ec9 	.word	0x00400ec9

00400fb4 <system_ready>:

/** @brief Show that system is ready */
void system_ready()
{
  400fb4:	b580      	push	{r7, lr}
  400fb6:	af00      	add	r7, sp, #0
    arm_toggle_leds_3_times();
  400fb8:	4b01      	ldr	r3, [pc, #4]	; (400fc0 <system_ready+0xc>)
  400fba:	4798      	blx	r3
}
  400fbc:	bf00      	nop
  400fbe:	bd80      	pop	{r7, pc}
  400fc0:	00400d91 	.word	0x00400d91

00400fc4 <system_enable_interrupt>:

/** @brief Enable interrupts. */
void system_enable_interrupt(void)
{
  400fc4:	b580      	push	{r7, lr}
  400fc6:	af00      	add	r7, sp, #0
    // Enable systick
    SysTick_Config(sysclk_get_cpu_hz() / SETTINGS_ARM_TIMER_FREQ_HZ);
  400fc8:	4b1f      	ldr	r3, [pc, #124]	; (401048 <system_enable_interrupt+0x84>)
  400fca:	4798      	blx	r3
  400fcc:	4602      	mov	r2, r0
  400fce:	4b1f      	ldr	r3, [pc, #124]	; (40104c <system_enable_interrupt+0x88>)
  400fd0:	fba3 2302 	umull	r2, r3, r3, r2
  400fd4:	0adb      	lsrs	r3, r3, #11
  400fd6:	4618      	mov	r0, r3
  400fd8:	4b1d      	ldr	r3, [pc, #116]	; (401050 <system_enable_interrupt+0x8c>)
  400fda:	4798      	blx	r3

    // Enable UART 1
    NVIC_DisableIRQ((IRQn_Type) UART1_IRQn);
  400fdc:	2009      	movs	r0, #9
  400fde:	4b1d      	ldr	r3, [pc, #116]	; (401054 <system_enable_interrupt+0x90>)
  400fe0:	4798      	blx	r3
    NVIC_ClearPendingIRQ((IRQn_Type) UART1_IRQn);
  400fe2:	2009      	movs	r0, #9
  400fe4:	4b1c      	ldr	r3, [pc, #112]	; (401058 <system_enable_interrupt+0x94>)
  400fe6:	4798      	blx	r3
    NVIC_SetPriority((IRQn_Type) UART1_IRQn,2);
  400fe8:	2102      	movs	r1, #2
  400fea:	2009      	movs	r0, #9
  400fec:	4b1b      	ldr	r3, [pc, #108]	; (40105c <system_enable_interrupt+0x98>)
  400fee:	4798      	blx	r3
    NVIC_EnableIRQ((IRQn_Type) UART1_IRQn);
  400ff0:	2009      	movs	r0, #9
  400ff2:	4b1b      	ldr	r3, [pc, #108]	; (401060 <system_enable_interrupt+0x9c>)
  400ff4:	4798      	blx	r3

    // Enable ADC
    NVIC_DisableIRQ((IRQn_Type) ADC_IRQn);
  400ff6:	201d      	movs	r0, #29
  400ff8:	4b16      	ldr	r3, [pc, #88]	; (401054 <system_enable_interrupt+0x90>)
  400ffa:	4798      	blx	r3
    NVIC_ClearPendingIRQ((IRQn_Type) ADC_IRQn);
  400ffc:	201d      	movs	r0, #29
  400ffe:	4b16      	ldr	r3, [pc, #88]	; (401058 <system_enable_interrupt+0x94>)
  401000:	4798      	blx	r3
    NVIC_SetPriority((IRQn_Type) ADC_IRQn,1);
  401002:	2101      	movs	r1, #1
  401004:	201d      	movs	r0, #29
  401006:	4b15      	ldr	r3, [pc, #84]	; (40105c <system_enable_interrupt+0x98>)
  401008:	4798      	blx	r3
    NVIC_EnableIRQ((IRQn_Type) ADC_IRQn);
  40100a:	201d      	movs	r0, #29
  40100c:	4b14      	ldr	r3, [pc, #80]	; (401060 <system_enable_interrupt+0x9c>)
  40100e:	4798      	blx	r3

    // Enable overcurrent ISR
    NVIC_DisableIRQ((IRQn_Type)ID_PIOA);
  401010:	200b      	movs	r0, #11
  401012:	4b10      	ldr	r3, [pc, #64]	; (401054 <system_enable_interrupt+0x90>)
  401014:	4798      	blx	r3
    NVIC_ClearPendingIRQ((IRQn_Type) ID_PIOA);
  401016:	200b      	movs	r0, #11
  401018:	4b0f      	ldr	r3, [pc, #60]	; (401058 <system_enable_interrupt+0x94>)
  40101a:	4798      	blx	r3
    NVIC_SetPriority((IRQn_Type) ID_PIOA,3);
  40101c:	2103      	movs	r1, #3
  40101e:	200b      	movs	r0, #11
  401020:	4b0e      	ldr	r3, [pc, #56]	; (40105c <system_enable_interrupt+0x98>)
  401022:	4798      	blx	r3
    NVIC_EnableIRQ((IRQn_Type) ID_PIOA);
  401024:	200b      	movs	r0, #11
  401026:	4b0e      	ldr	r3, [pc, #56]	; (401060 <system_enable_interrupt+0x9c>)
  401028:	4798      	blx	r3

    // Enable PWM
    NVIC_DisableIRQ(PWM_IRQn);
  40102a:	201f      	movs	r0, #31
  40102c:	4b09      	ldr	r3, [pc, #36]	; (401054 <system_enable_interrupt+0x90>)
  40102e:	4798      	blx	r3
    NVIC_ClearPendingIRQ(PWM_IRQn);
  401030:	201f      	movs	r0, #31
  401032:	4b09      	ldr	r3, [pc, #36]	; (401058 <system_enable_interrupt+0x94>)
  401034:	4798      	blx	r3
    NVIC_SetPriority(PWM_IRQn, 4);
  401036:	2104      	movs	r1, #4
  401038:	201f      	movs	r0, #31
  40103a:	4b08      	ldr	r3, [pc, #32]	; (40105c <system_enable_interrupt+0x98>)
  40103c:	4798      	blx	r3
    NVIC_EnableIRQ(PWM_IRQn);
  40103e:	201f      	movs	r0, #31
  401040:	4b07      	ldr	r3, [pc, #28]	; (401060 <system_enable_interrupt+0x9c>)
  401042:	4798      	blx	r3

}
  401044:	bf00      	nop
  401046:	bd80      	pop	{r7, pc}
  401048:	00400c7d 	.word	0x00400c7d
  40104c:	51eb851f 	.word	0x51eb851f
  401050:	00400ba5 	.word	0x00400ba5
  401054:	00400ad1 	.word	0x00400ad1
  401058:	00400b15 	.word	0x00400b15
  40105c:	00400b51 	.word	0x00400b51
  401060:	00400a99 	.word	0x00400a99

00401064 <my_callback_cdc_enable>:

/**************************** GLOBAL FUNCTIONS *******************************/

/** @brief Called when USB connected */
bool my_callback_cdc_enable(uint8_t port)
{
  401064:	b480      	push	{r7}
  401066:	b083      	sub	sp, #12
  401068:	af00      	add	r7, sp, #0
  40106a:	4603      	mov	r3, r0
  40106c:	71fb      	strb	r3, [r7, #7]
    b_cdc_enable = true;
  40106e:	4b04      	ldr	r3, [pc, #16]	; (401080 <my_callback_cdc_enable+0x1c>)
  401070:	2201      	movs	r2, #1
  401072:	701a      	strb	r2, [r3, #0]
    return true;
  401074:	2301      	movs	r3, #1
}
  401076:	4618      	mov	r0, r3
  401078:	370c      	adds	r7, #12
  40107a:	46bd      	mov	sp, r7
  40107c:	bc80      	pop	{r7}
  40107e:	4770      	bx	lr
  401080:	200019e4 	.word	0x200019e4

00401084 <my_callback_cdc_disable>:

/** @brief Called when USB disconnected */
void my_callback_cdc_disable(uint8_t port)
{
  401084:	b480      	push	{r7}
  401086:	b083      	sub	sp, #12
  401088:	af00      	add	r7, sp, #0
  40108a:	4603      	mov	r3, r0
  40108c:	71fb      	strb	r3, [r7, #7]
    b_cdc_enable = false;
  40108e:	4b04      	ldr	r3, [pc, #16]	; (4010a0 <my_callback_cdc_disable+0x1c>)
  401090:	2200      	movs	r2, #0
  401092:	701a      	strb	r2, [r3, #0]
}
  401094:	bf00      	nop
  401096:	370c      	adds	r7, #12
  401098:	46bd      	mov	sp, r7
  40109a:	bc80      	pop	{r7}
  40109c:	4770      	bx	lr
  40109e:	bf00      	nop
  4010a0:	200019e4 	.word	0x200019e4

004010a4 <my_callback_cdc_rx_notify>:

/** @brief Called when USB received data */
void my_callback_cdc_rx_notify(uint8_t port)
{
  4010a4:	b580      	push	{r7, lr}
  4010a6:	b082      	sub	sp, #8
  4010a8:	af00      	add	r7, sp, #0
  4010aa:	4603      	mov	r3, r0
  4010ac:	71fb      	strb	r3, [r7, #7]
    if (b_cdc_enable)
  4010ae:	4b05      	ldr	r3, [pc, #20]	; (4010c4 <my_callback_cdc_rx_notify+0x20>)
  4010b0:	781b      	ldrb	r3, [r3, #0]
  4010b2:	b2db      	uxtb	r3, r3
  4010b4:	2b00      	cmp	r3, #0
  4010b6:	d001      	beq.n	4010bc <my_callback_cdc_rx_notify+0x18>
    {
        comm_preprocess_usb_PC_RX();
  4010b8:	4b03      	ldr	r3, [pc, #12]	; (4010c8 <my_callback_cdc_rx_notify+0x24>)
  4010ba:	4798      	blx	r3
    }
}
  4010bc:	bf00      	nop
  4010be:	3708      	adds	r7, #8
  4010c0:	46bd      	mov	sp, r7
  4010c2:	bd80      	pop	{r7, pc}
  4010c4:	200019e4 	.word	0x200019e4
  4010c8:	00406b21 	.word	0x00406b21

004010cc <my_callback_cdc_set_dtr>:

/** @brief Called when USB connected and recognized by host */
void my_callback_cdc_set_dtr(uint8_t port, bool b_enable)
{
  4010cc:	b580      	push	{r7, lr}
  4010ce:	b082      	sub	sp, #8
  4010d0:	af00      	add	r7, sp, #0
  4010d2:	4603      	mov	r3, r0
  4010d4:	460a      	mov	r2, r1
  4010d6:	71fb      	strb	r3, [r7, #7]
  4010d8:	4613      	mov	r3, r2
  4010da:	71bb      	strb	r3, [r7, #6]
    if (b_enable)
  4010dc:	79bb      	ldrb	r3, [r7, #6]
  4010de:	2b00      	cmp	r3, #0
  4010e0:	d003      	beq.n	4010ea <my_callback_cdc_set_dtr+0x1e>
    {
        led_green_on();
  4010e2:	2010      	movs	r0, #16
  4010e4:	4b04      	ldr	r3, [pc, #16]	; (4010f8 <my_callback_cdc_set_dtr+0x2c>)
  4010e6:	4798      	blx	r3
    }
    else
    {
        led_green_off();
    }
  4010e8:	e002      	b.n	4010f0 <my_callback_cdc_set_dtr+0x24>
        led_green_off();
  4010ea:	2010      	movs	r0, #16
  4010ec:	4b03      	ldr	r3, [pc, #12]	; (4010fc <my_callback_cdc_set_dtr+0x30>)
  4010ee:	4798      	blx	r3
  4010f0:	bf00      	nop
  4010f2:	3708      	adds	r7, #8
  4010f4:	46bd      	mov	sp, r7
  4010f6:	bd80      	pop	{r7, pc}
  4010f8:	004072fd 	.word	0x004072fd
  4010fc:	0040732d 	.word	0x0040732d

00401100 <index_update_accum>:

/**************************** GLOBAL FUNCTIONS *******************************/

/** @brief Update index accumulators. */
void index_update_accum(sp_t *data, index_accum_t *accum)
{
  401100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401104:	b087      	sub	sp, #28
  401106:	af00      	add	r7, sp, #0
  401108:	60f8      	str	r0, [r7, #12]
  40110a:	60b9      	str	r1, [r7, #8]
    // accum
    accum->accum++;
  40110c:	68bb      	ldr	r3, [r7, #8]
  40110e:	885b      	ldrh	r3, [r3, #2]
  401110:	3301      	adds	r3, #1
  401112:	b29a      	uxth	r2, r3
  401114:	68bb      	ldr	r3, [r7, #8]
  401116:	805a      	strh	r2, [r3, #2]

    // flags
    if (accum->accum != 1)
  401118:	68bb      	ldr	r3, [r7, #8]
  40111a:	885b      	ldrh	r3, [r3, #2]
  40111c:	2b01      	cmp	r3, #1
  40111e:	d006      	beq.n	40112e <index_update_accum+0x2e>
    {
        control_check_param_change(&accum->flags, &accum->params);
  401120:	68ba      	ldr	r2, [r7, #8]
  401122:	68bb      	ldr	r3, [r7, #8]
  401124:	3304      	adds	r3, #4
  401126:	4619      	mov	r1, r3
  401128:	4610      	mov	r0, r2
  40112a:	4b56      	ldr	r3, [pc, #344]	; (401284 <index_update_accum+0x184>)
  40112c:	4798      	blx	r3
    }

    // signal parameters
    signal_params_t *params = control_get_params();
  40112e:	4b56      	ldr	r3, [pc, #344]	; (401288 <index_update_accum+0x188>)
  401130:	4798      	blx	r3
  401132:	6138      	str	r0, [r7, #16]
    copy_content((uint8_t *)params, (uint8_t *)&accum->params, sizeof(signal_params_t));
  401134:	68bb      	ldr	r3, [r7, #8]
  401136:	3304      	adds	r3, #4
  401138:	2208      	movs	r2, #8
  40113a:	4619      	mov	r1, r3
  40113c:	6938      	ldr	r0, [r7, #16]
  40113e:	4b53      	ldr	r3, [pc, #332]	; (40128c <index_update_accum+0x18c>)
  401140:	4798      	blx	r3

    // rms2 and harmonics
    uint8_t ch_num;
    uint8_t h_num;

    for (ch_num = 0; ch_num < SETTINGS_CH_TOTAL_NUM; ch_num++)
  401142:	2300      	movs	r3, #0
  401144:	75fb      	strb	r3, [r7, #23]
  401146:	e093      	b.n	401270 <index_update_accum+0x170>
    {
        accum->ch[ch_num].rms2 += data->ch[ch_num].rms2;
  401148:	7dfe      	ldrb	r6, [r7, #23]
  40114a:	7dfb      	ldrb	r3, [r7, #23]
  40114c:	68ba      	ldr	r2, [r7, #8]
  40114e:	2158      	movs	r1, #88	; 0x58
  401150:	fb01 f303 	mul.w	r3, r1, r3
  401154:	4413      	add	r3, r2
  401156:	3310      	adds	r3, #16
  401158:	e9d3 0100 	ldrd	r0, r1, [r3]
  40115c:	7dfb      	ldrb	r3, [r7, #23]
  40115e:	68fa      	ldr	r2, [r7, #12]
  401160:	f44f 7e1c 	mov.w	lr, #624	; 0x270
  401164:	fb0e f303 	mul.w	r3, lr, r3
  401168:	4413      	add	r3, r2
  40116a:	f503 7302 	add.w	r3, r3, #520	; 0x208
  40116e:	e9d3 2300 	ldrd	r2, r3, [r3]
  401172:	1812      	adds	r2, r2, r0
  401174:	eb43 0301 	adc.w	r3, r3, r1
  401178:	68b8      	ldr	r0, [r7, #8]
  40117a:	2158      	movs	r1, #88	; 0x58
  40117c:	fb01 f106 	mul.w	r1, r1, r6
  401180:	4401      	add	r1, r0
  401182:	3110      	adds	r1, #16
  401184:	e9c1 2300 	strd	r2, r3, [r1]

        for (h_num = 0; h_num < (SETTINGS_NDFT_MAX + 1); h_num++)
  401188:	2300      	movs	r3, #0
  40118a:	75bb      	strb	r3, [r7, #22]
  40118c:	e06a      	b.n	401264 <index_update_accum+0x164>
        {
            accum->ch[ch_num].harmonic[h_num].real += (data->ch[ch_num].harmonic[h_num].real >> 18);
  40118e:	f897 e017 	ldrb.w	lr, [r7, #23]
  401192:	7dbe      	ldrb	r6, [r7, #22]
  401194:	7dfb      	ldrb	r3, [r7, #23]
  401196:	7db9      	ldrb	r1, [r7, #22]
  401198:	68ba      	ldr	r2, [r7, #8]
  40119a:	0109      	lsls	r1, r1, #4
  40119c:	2058      	movs	r0, #88	; 0x58
  40119e:	fb00 f303 	mul.w	r3, r0, r3
  4011a2:	440b      	add	r3, r1
  4011a4:	4413      	add	r3, r2
  4011a6:	3318      	adds	r3, #24
  4011a8:	e9d3 0100 	ldrd	r0, r1, [r3]
  4011ac:	7dfa      	ldrb	r2, [r7, #23]
  4011ae:	f897 c016 	ldrb.w	ip, [r7, #22]
  4011b2:	68fb      	ldr	r3, [r7, #12]
  4011b4:	607b      	str	r3, [r7, #4]
  4011b6:	4613      	mov	r3, r2
  4011b8:	009b      	lsls	r3, r3, #2
  4011ba:	4413      	add	r3, r2
  4011bc:	00db      	lsls	r3, r3, #3
  4011be:	1a9b      	subs	r3, r3, r2
  4011c0:	4463      	add	r3, ip
  4011c2:	3321      	adds	r3, #33	; 0x21
  4011c4:	011b      	lsls	r3, r3, #4
  4011c6:	687a      	ldr	r2, [r7, #4]
  4011c8:	4413      	add	r3, r2
  4011ca:	e9d3 2300 	ldrd	r2, r3, [r3]
  4011ce:	0c94      	lsrs	r4, r2, #18
  4011d0:	ea44 3483 	orr.w	r4, r4, r3, lsl #14
  4011d4:	149d      	asrs	r5, r3, #18
  4011d6:	1902      	adds	r2, r0, r4
  4011d8:	eb41 0305 	adc.w	r3, r1, r5
  4011dc:	68b8      	ldr	r0, [r7, #8]
  4011de:	0136      	lsls	r6, r6, #4
  4011e0:	2158      	movs	r1, #88	; 0x58
  4011e2:	fb01 f10e 	mul.w	r1, r1, lr
  4011e6:	4431      	add	r1, r6
  4011e8:	4401      	add	r1, r0
  4011ea:	3118      	adds	r1, #24
  4011ec:	e9c1 2300 	strd	r2, r3, [r1]
            accum->ch[ch_num].harmonic[h_num].imag += (data->ch[ch_num].harmonic[h_num].imag >> 18);
  4011f0:	f897 e017 	ldrb.w	lr, [r7, #23]
  4011f4:	7dbe      	ldrb	r6, [r7, #22]
  4011f6:	7dfb      	ldrb	r3, [r7, #23]
  4011f8:	7db9      	ldrb	r1, [r7, #22]
  4011fa:	68ba      	ldr	r2, [r7, #8]
  4011fc:	3101      	adds	r1, #1
  4011fe:	0109      	lsls	r1, r1, #4
  401200:	2058      	movs	r0, #88	; 0x58
  401202:	fb00 f303 	mul.w	r3, r0, r3
  401206:	440b      	add	r3, r1
  401208:	4413      	add	r3, r2
  40120a:	3310      	adds	r3, #16
  40120c:	e9d3 0100 	ldrd	r0, r1, [r3]
  401210:	7dfa      	ldrb	r2, [r7, #23]
  401212:	f897 c016 	ldrb.w	ip, [r7, #22]
  401216:	68fb      	ldr	r3, [r7, #12]
  401218:	607b      	str	r3, [r7, #4]
  40121a:	4613      	mov	r3, r2
  40121c:	009b      	lsls	r3, r3, #2
  40121e:	4413      	add	r3, r2
  401220:	00db      	lsls	r3, r3, #3
  401222:	1a9b      	subs	r3, r3, r2
  401224:	4463      	add	r3, ip
  401226:	011b      	lsls	r3, r3, #4
  401228:	687a      	ldr	r2, [r7, #4]
  40122a:	4413      	add	r3, r2
  40122c:	f503 7306 	add.w	r3, r3, #536	; 0x218
  401230:	e9d3 2300 	ldrd	r2, r3, [r3]
  401234:	ea4f 4892 	mov.w	r8, r2, lsr #18
  401238:	ea48 3883 	orr.w	r8, r8, r3, lsl #14
  40123c:	ea4f 49a3 	mov.w	r9, r3, asr #18
  401240:	eb10 0208 	adds.w	r2, r0, r8
  401244:	eb41 0309 	adc.w	r3, r1, r9
  401248:	68b8      	ldr	r0, [r7, #8]
  40124a:	1c71      	adds	r1, r6, #1
  40124c:	010e      	lsls	r6, r1, #4
  40124e:	2158      	movs	r1, #88	; 0x58
  401250:	fb01 f10e 	mul.w	r1, r1, lr
  401254:	4431      	add	r1, r6
  401256:	4401      	add	r1, r0
  401258:	3110      	adds	r1, #16
  40125a:	e9c1 2300 	strd	r2, r3, [r1]
        for (h_num = 0; h_num < (SETTINGS_NDFT_MAX + 1); h_num++)
  40125e:	7dbb      	ldrb	r3, [r7, #22]
  401260:	3301      	adds	r3, #1
  401262:	75bb      	strb	r3, [r7, #22]
  401264:	7dbb      	ldrb	r3, [r7, #22]
  401266:	2b04      	cmp	r3, #4
  401268:	d991      	bls.n	40118e <index_update_accum+0x8e>
    for (ch_num = 0; ch_num < SETTINGS_CH_TOTAL_NUM; ch_num++)
  40126a:	7dfb      	ldrb	r3, [r7, #23]
  40126c:	3301      	adds	r3, #1
  40126e:	75fb      	strb	r3, [r7, #23]
  401270:	7dfb      	ldrb	r3, [r7, #23]
  401272:	2b03      	cmp	r3, #3
  401274:	f67f af68 	bls.w	401148 <index_update_accum+0x48>
        }
    }
}
  401278:	bf00      	nop
  40127a:	371c      	adds	r7, #28
  40127c:	46bd      	mov	sp, r7
  40127e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401282:	bf00      	nop
  401284:	004007cd 	.word	0x004007cd
  401288:	004007b9 	.word	0x004007b9
  40128c:	00406b39 	.word	0x00406b39

00401290 <index_update_result>:

/** @brief Update index result from 10 cycles. */
void index_update_result(index_accum_t *accum, index_result_t *result)
{
  401290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401294:	b08c      	sub	sp, #48	; 0x30
  401296:	af00      	add	r7, sp, #0
  401298:	60f8      	str	r0, [r7, #12]
  40129a:	60b9      	str	r1, [r7, #8]
    // flags
    result->flags = accum->flags;
  40129c:	68fb      	ldr	r3, [r7, #12]
  40129e:	781a      	ldrb	r2, [r3, #0]
  4012a0:	68bb      	ldr	r3, [r7, #8]
  4012a2:	701a      	strb	r2, [r3, #0]

    // signal parameters
    copy_content((uint8_t *)&accum->params, (uint8_t *)&result->params, sizeof(signal_params_t));
  4012a4:	68fb      	ldr	r3, [r7, #12]
  4012a6:	1d18      	adds	r0, r3, #4
  4012a8:	68bb      	ldr	r3, [r7, #8]
  4012aa:	3302      	adds	r3, #2
  4012ac:	2208      	movs	r2, #8
  4012ae:	4619      	mov	r1, r3
  4012b0:	4b97      	ldr	r3, [pc, #604]	; (401510 <index_update_result+0x280>)
  4012b2:	4798      	blx	r3

    // rms and harmonics
    uint8_t ch_num;
    uint8_t h_num;

    for (ch_num = 0; ch_num < SETTINGS_CH_TOTAL_NUM; ch_num++)
  4012b4:	2300      	movs	r3, #0
  4012b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  4012ba:	e118      	b.n	4014ee <index_update_result+0x25e>
    {
        // rms
        int64_t rms2 = (accum->ch[ch_num].rms2 >> 7) / accum->accum; // >>7 because of sliding window
  4012bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4012c0:	68fa      	ldr	r2, [r7, #12]
  4012c2:	2158      	movs	r1, #88	; 0x58
  4012c4:	fb01 f303 	mul.w	r3, r1, r3
  4012c8:	4413      	add	r3, r2
  4012ca:	3310      	adds	r3, #16
  4012cc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4012d0:	09d1      	lsrs	r1, r2, #7
  4012d2:	6039      	str	r1, [r7, #0]
  4012d4:	6839      	ldr	r1, [r7, #0]
  4012d6:	ea41 6143 	orr.w	r1, r1, r3, lsl #25
  4012da:	6039      	str	r1, [r7, #0]
  4012dc:	11db      	asrs	r3, r3, #7
  4012de:	607b      	str	r3, [r7, #4]
  4012e0:	68fb      	ldr	r3, [r7, #12]
  4012e2:	885b      	ldrh	r3, [r3, #2]
  4012e4:	b29a      	uxth	r2, r3
  4012e6:	f04f 0300 	mov.w	r3, #0
  4012ea:	4e8a      	ldr	r6, [pc, #552]	; (401514 <index_update_result+0x284>)
  4012ec:	e9d7 0100 	ldrd	r0, r1, [r7]
  4012f0:	47b0      	blx	r6
  4012f2:	4602      	mov	r2, r0
  4012f4:	460b      	mov	r3, r1
  4012f6:	e9c7 2308 	strd	r2, r3, [r7, #32]
        result->ch[ch_num].rms = (int32_t) sqrt(rms2);
  4012fa:	f897 602f 	ldrb.w	r6, [r7, #47]	; 0x2f
  4012fe:	4b86      	ldr	r3, [pc, #536]	; (401518 <index_update_result+0x288>)
  401300:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
  401304:	4798      	blx	r3
  401306:	4602      	mov	r2, r0
  401308:	460b      	mov	r3, r1
  40130a:	4610      	mov	r0, r2
  40130c:	4619      	mov	r1, r3
  40130e:	4b83      	ldr	r3, [pc, #524]	; (40151c <index_update_result+0x28c>)
  401310:	4798      	blx	r3
  401312:	460a      	mov	r2, r1
  401314:	4601      	mov	r1, r0
  401316:	4b82      	ldr	r3, [pc, #520]	; (401520 <index_update_result+0x290>)
  401318:	4608      	mov	r0, r1
  40131a:	4611      	mov	r1, r2
  40131c:	4798      	blx	r3
  40131e:	4601      	mov	r1, r0
  401320:	68ba      	ldr	r2, [r7, #8]
  401322:	4633      	mov	r3, r6
  401324:	005b      	lsls	r3, r3, #1
  401326:	4433      	add	r3, r6
  401328:	011b      	lsls	r3, r3, #4
  40132a:	4413      	add	r3, r2
  40132c:	330c      	adds	r3, #12
  40132e:	6019      	str	r1, [r3, #0]

        // harmonics
        for (h_num = 0; h_num < (SETTINGS_NDFT_MAX + 1); h_num++)
  401330:	2300      	movs	r3, #0
  401332:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  401336:	e051      	b.n	4013dc <index_update_result+0x14c>
        {
            result->ch[ch_num].harmonic[h_num].real = accum->ch[ch_num].harmonic[h_num].real / accum->accum;
  401338:	f897 602f 	ldrb.w	r6, [r7, #47]	; 0x2f
  40133c:	f897 a02e 	ldrb.w	sl, [r7, #46]	; 0x2e
  401340:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  401344:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
  401348:	68fa      	ldr	r2, [r7, #12]
  40134a:	0109      	lsls	r1, r1, #4
  40134c:	2058      	movs	r0, #88	; 0x58
  40134e:	fb00 f303 	mul.w	r3, r0, r3
  401352:	440b      	add	r3, r1
  401354:	4413      	add	r3, r2
  401356:	3318      	adds	r3, #24
  401358:	e9d3 0100 	ldrd	r0, r1, [r3]
  40135c:	68fb      	ldr	r3, [r7, #12]
  40135e:	885b      	ldrh	r3, [r3, #2]
  401360:	b29a      	uxth	r2, r3
  401362:	f04f 0300 	mov.w	r3, #0
  401366:	4c6b      	ldr	r4, [pc, #428]	; (401514 <index_update_result+0x284>)
  401368:	47a0      	blx	r4
  40136a:	4602      	mov	r2, r0
  40136c:	460b      	mov	r3, r1
  40136e:	4611      	mov	r1, r2
  401370:	68ba      	ldr	r2, [r7, #8]
  401372:	4633      	mov	r3, r6
  401374:	005b      	lsls	r3, r3, #1
  401376:	4433      	add	r3, r6
  401378:	005b      	lsls	r3, r3, #1
  40137a:	4453      	add	r3, sl
  40137c:	3302      	adds	r3, #2
  40137e:	00db      	lsls	r3, r3, #3
  401380:	4413      	add	r3, r2
  401382:	6059      	str	r1, [r3, #4]
            result->ch[ch_num].harmonic[h_num].imag = accum->ch[ch_num].harmonic[h_num].imag / accum->accum;
  401384:	f897 602f 	ldrb.w	r6, [r7, #47]	; 0x2f
  401388:	f897 a02e 	ldrb.w	sl, [r7, #46]	; 0x2e
  40138c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  401390:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
  401394:	68fa      	ldr	r2, [r7, #12]
  401396:	3101      	adds	r1, #1
  401398:	0109      	lsls	r1, r1, #4
  40139a:	2058      	movs	r0, #88	; 0x58
  40139c:	fb00 f303 	mul.w	r3, r0, r3
  4013a0:	440b      	add	r3, r1
  4013a2:	4413      	add	r3, r2
  4013a4:	3310      	adds	r3, #16
  4013a6:	e9d3 0100 	ldrd	r0, r1, [r3]
  4013aa:	68fb      	ldr	r3, [r7, #12]
  4013ac:	885b      	ldrh	r3, [r3, #2]
  4013ae:	b29a      	uxth	r2, r3
  4013b0:	f04f 0300 	mov.w	r3, #0
  4013b4:	4c57      	ldr	r4, [pc, #348]	; (401514 <index_update_result+0x284>)
  4013b6:	47a0      	blx	r4
  4013b8:	4602      	mov	r2, r0
  4013ba:	460b      	mov	r3, r1
  4013bc:	4611      	mov	r1, r2
  4013be:	68ba      	ldr	r2, [r7, #8]
  4013c0:	4633      	mov	r3, r6
  4013c2:	005b      	lsls	r3, r3, #1
  4013c4:	4433      	add	r3, r6
  4013c6:	005b      	lsls	r3, r3, #1
  4013c8:	4453      	add	r3, sl
  4013ca:	3302      	adds	r3, #2
  4013cc:	00db      	lsls	r3, r3, #3
  4013ce:	4413      	add	r3, r2
  4013d0:	6099      	str	r1, [r3, #8]
        for (h_num = 0; h_num < (SETTINGS_NDFT_MAX + 1); h_num++)
  4013d2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
  4013d6:	3301      	adds	r3, #1
  4013d8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  4013dc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
  4013e0:	2b04      	cmp	r3, #4
  4013e2:	d9a9      	bls.n	401338 <index_update_result+0xa8>
        }

        // TWD^2 = (rms^2 - H1rms^2) / H1rms^2
        int64_t H1rms2 = (SQUARE(result->ch[ch_num].harmonic[1].real) + SQUARE(result->ch[ch_num].harmonic[1].imag)) / 2;  // Q24, divided by 2 to get RMS
  4013e4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
  4013e8:	68b9      	ldr	r1, [r7, #8]
  4013ea:	4613      	mov	r3, r2
  4013ec:	005b      	lsls	r3, r3, #1
  4013ee:	4413      	add	r3, r2
  4013f0:	011b      	lsls	r3, r3, #4
  4013f2:	440b      	add	r3, r1
  4013f4:	331c      	adds	r3, #28
  4013f6:	6819      	ldr	r1, [r3, #0]
  4013f8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
  4013fc:	68b8      	ldr	r0, [r7, #8]
  4013fe:	4613      	mov	r3, r2
  401400:	005b      	lsls	r3, r3, #1
  401402:	4413      	add	r3, r2
  401404:	011b      	lsls	r3, r3, #4
  401406:	4403      	add	r3, r0
  401408:	331c      	adds	r3, #28
  40140a:	681b      	ldr	r3, [r3, #0]
  40140c:	fb03 f101 	mul.w	r1, r3, r1
  401410:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
  401414:	68b8      	ldr	r0, [r7, #8]
  401416:	4613      	mov	r3, r2
  401418:	005b      	lsls	r3, r3, #1
  40141a:	4413      	add	r3, r2
  40141c:	011b      	lsls	r3, r3, #4
  40141e:	4403      	add	r3, r0
  401420:	3320      	adds	r3, #32
  401422:	6818      	ldr	r0, [r3, #0]
  401424:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
  401428:	68be      	ldr	r6, [r7, #8]
  40142a:	4613      	mov	r3, r2
  40142c:	005b      	lsls	r3, r3, #1
  40142e:	4413      	add	r3, r2
  401430:	011b      	lsls	r3, r3, #4
  401432:	4433      	add	r3, r6
  401434:	3320      	adds	r3, #32
  401436:	681b      	ldr	r3, [r3, #0]
  401438:	fb03 f300 	mul.w	r3, r3, r0
  40143c:	440b      	add	r3, r1
  40143e:	0fda      	lsrs	r2, r3, #31
  401440:	4413      	add	r3, r2
  401442:	105b      	asrs	r3, r3, #1
  401444:	461a      	mov	r2, r3
  401446:	ea4f 73e2 	mov.w	r3, r2, asr #31
  40144a:	e9c7 2306 	strd	r2, r3, [r7, #24]
        int64_t twd2_temp = rms2 - H1rms2;
  40144e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
  401452:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
  401456:	1a82      	subs	r2, r0, r2
  401458:	eb61 0303 	sbc.w	r3, r1, r3
  40145c:	e9c7 2304 	strd	r2, r3, [r7, #16]

        if (twd2_temp < 0)
  401460:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
  401464:	2a00      	cmp	r2, #0
  401466:	f173 0300 	sbcs.w	r3, r3, #0
  40146a:	da0b      	bge.n	401484 <index_update_result+0x1f4>
        {
            result->ch[ch_num].twd = 0;
  40146c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
  401470:	68b9      	ldr	r1, [r7, #8]
  401472:	4613      	mov	r3, r2
  401474:	005b      	lsls	r3, r3, #1
  401476:	4413      	add	r3, r2
  401478:	011b      	lsls	r3, r3, #4
  40147a:	440b      	add	r3, r1
  40147c:	3310      	adds	r3, #16
  40147e:	2200      	movs	r2, #0
  401480:	801a      	strh	r2, [r3, #0]
  401482:	e02f      	b.n	4014e4 <index_update_result+0x254>
        }
        else
        {
            result->ch[ch_num].twd = sqrt((twd2_temp << 24) / H1rms2);  // Q12
  401484:	f897 602f 	ldrb.w	r6, [r7, #47]	; 0x2f
  401488:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
  40148c:	ea4f 6903 	mov.w	r9, r3, lsl #24
  401490:	ea49 2912 	orr.w	r9, r9, r2, lsr #8
  401494:	ea4f 6802 	mov.w	r8, r2, lsl #24
  401498:	4b1e      	ldr	r3, [pc, #120]	; (401514 <index_update_result+0x284>)
  40149a:	461c      	mov	r4, r3
  40149c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
  4014a0:	4640      	mov	r0, r8
  4014a2:	4649      	mov	r1, r9
  4014a4:	47a0      	blx	r4
  4014a6:	4602      	mov	r2, r0
  4014a8:	460b      	mov	r3, r1
  4014aa:	4611      	mov	r1, r2
  4014ac:	461a      	mov	r2, r3
  4014ae:	4b1a      	ldr	r3, [pc, #104]	; (401518 <index_update_result+0x288>)
  4014b0:	4608      	mov	r0, r1
  4014b2:	4611      	mov	r1, r2
  4014b4:	4798      	blx	r3
  4014b6:	4602      	mov	r2, r0
  4014b8:	460b      	mov	r3, r1
  4014ba:	4610      	mov	r0, r2
  4014bc:	4619      	mov	r1, r3
  4014be:	4b17      	ldr	r3, [pc, #92]	; (40151c <index_update_result+0x28c>)
  4014c0:	4798      	blx	r3
  4014c2:	460a      	mov	r2, r1
  4014c4:	4601      	mov	r1, r0
  4014c6:	4b16      	ldr	r3, [pc, #88]	; (401520 <index_update_result+0x290>)
  4014c8:	4608      	mov	r0, r1
  4014ca:	4611      	mov	r1, r2
  4014cc:	4798      	blx	r3
  4014ce:	4603      	mov	r3, r0
  4014d0:	b219      	sxth	r1, r3
  4014d2:	68ba      	ldr	r2, [r7, #8]
  4014d4:	4633      	mov	r3, r6
  4014d6:	005b      	lsls	r3, r3, #1
  4014d8:	4433      	add	r3, r6
  4014da:	011b      	lsls	r3, r3, #4
  4014dc:	4413      	add	r3, r2
  4014de:	3310      	adds	r3, #16
  4014e0:	460a      	mov	r2, r1
  4014e2:	801a      	strh	r2, [r3, #0]
    for (ch_num = 0; ch_num < SETTINGS_CH_TOTAL_NUM; ch_num++)
  4014e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4014e8:	3301      	adds	r3, #1
  4014ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  4014ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  4014f2:	2b03      	cmp	r3, #3
  4014f4:	f67f aee2 	bls.w	4012bc <index_update_result+0x2c>
        }
    }

    // restart accum
    memset((void *)accum, 0, sizeof(*accum));
  4014f8:	f44f 72b8 	mov.w	r2, #368	; 0x170
  4014fc:	2100      	movs	r1, #0
  4014fe:	68f8      	ldr	r0, [r7, #12]
  401500:	4b08      	ldr	r3, [pc, #32]	; (401524 <index_update_result+0x294>)
  401502:	4798      	blx	r3
}
  401504:	bf00      	nop
  401506:	3730      	adds	r7, #48	; 0x30
  401508:	46bd      	mov	sp, r7
  40150a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40150e:	bf00      	nop
  401510:	00406b39 	.word	0x00406b39
  401514:	00408979 	.word	0x00408979
  401518:	0040836d 	.word	0x0040836d
  40151c:	00407e21 	.word	0x00407e21
  401520:	00408929 	.word	0x00408929
  401524:	00408eb9 	.word	0x00408eb9

00401528 <osc_get_rate>:
{
  401528:	b480      	push	{r7}
  40152a:	b083      	sub	sp, #12
  40152c:	af00      	add	r7, sp, #0
  40152e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401530:	687b      	ldr	r3, [r7, #4]
  401532:	2b07      	cmp	r3, #7
  401534:	d825      	bhi.n	401582 <osc_get_rate+0x5a>
  401536:	a201      	add	r2, pc, #4	; (adr r2, 40153c <osc_get_rate+0x14>)
  401538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40153c:	0040155d 	.word	0x0040155d
  401540:	00401563 	.word	0x00401563
  401544:	00401569 	.word	0x00401569
  401548:	0040156f 	.word	0x0040156f
  40154c:	00401573 	.word	0x00401573
  401550:	00401577 	.word	0x00401577
  401554:	0040157b 	.word	0x0040157b
  401558:	0040157f 	.word	0x0040157f
		return OSC_SLCK_32K_RC_HZ;
  40155c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401560:	e010      	b.n	401584 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401566:	e00d      	b.n	401584 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  401568:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40156c:	e00a      	b.n	401584 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  40156e:	4b08      	ldr	r3, [pc, #32]	; (401590 <osc_get_rate+0x68>)
  401570:	e008      	b.n	401584 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401572:	4b08      	ldr	r3, [pc, #32]	; (401594 <osc_get_rate+0x6c>)
  401574:	e006      	b.n	401584 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  401576:	4b08      	ldr	r3, [pc, #32]	; (401598 <osc_get_rate+0x70>)
  401578:	e004      	b.n	401584 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40157a:	4b07      	ldr	r3, [pc, #28]	; (401598 <osc_get_rate+0x70>)
  40157c:	e002      	b.n	401584 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40157e:	4b06      	ldr	r3, [pc, #24]	; (401598 <osc_get_rate+0x70>)
  401580:	e000      	b.n	401584 <osc_get_rate+0x5c>
	return 0;
  401582:	2300      	movs	r3, #0
}
  401584:	4618      	mov	r0, r3
  401586:	370c      	adds	r7, #12
  401588:	46bd      	mov	sp, r7
  40158a:	bc80      	pop	{r7}
  40158c:	4770      	bx	lr
  40158e:	bf00      	nop
  401590:	003d0900 	.word	0x003d0900
  401594:	007a1200 	.word	0x007a1200
  401598:	00b71b00 	.word	0x00b71b00

0040159c <sysclk_get_main_hz>:
{
  40159c:	b580      	push	{r7, lr}
  40159e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4015a0:	2006      	movs	r0, #6
  4015a2:	4b04      	ldr	r3, [pc, #16]	; (4015b4 <sysclk_get_main_hz+0x18>)
  4015a4:	4798      	blx	r3
  4015a6:	4602      	mov	r2, r0
  4015a8:	4613      	mov	r3, r2
  4015aa:	009b      	lsls	r3, r3, #2
  4015ac:	4413      	add	r3, r2
  4015ae:	009b      	lsls	r3, r3, #2
}
  4015b0:	4618      	mov	r0, r3
  4015b2:	bd80      	pop	{r7, pc}
  4015b4:	00401529 	.word	0x00401529

004015b8 <sysclk_get_cpu_hz>:
{
  4015b8:	b580      	push	{r7, lr}
  4015ba:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4015bc:	4b02      	ldr	r3, [pc, #8]	; (4015c8 <sysclk_get_cpu_hz+0x10>)
  4015be:	4798      	blx	r3
  4015c0:	4603      	mov	r3, r0
  4015c2:	085b      	lsrs	r3, r3, #1
}
  4015c4:	4618      	mov	r0, r3
  4015c6:	bd80      	pop	{r7, pc}
  4015c8:	0040159d 	.word	0x0040159d

004015cc <signal_adc_read_buffer>:
 * @param p_adc The pointer of adc peripheral.
 * @param p_s_buffer The destination buffer.
 * @param ul_size The size of the buffer.
 */
static uint32_t signal_adc_read_buffer(Adc *p_adc, uint16_t *p_s_buffer, uint32_t ul_size)
{
  4015cc:	b480      	push	{r7}
  4015ce:	b085      	sub	sp, #20
  4015d0:	af00      	add	r7, sp, #0
  4015d2:	60f8      	str	r0, [r7, #12]
  4015d4:	60b9      	str	r1, [r7, #8]
  4015d6:	607a      	str	r2, [r7, #4]
    /* Check if the first PDC bank is free. */
    if ((p_adc->ADC_RCR == 0) && (p_adc->ADC_RNCR == 0))
  4015d8:	68fb      	ldr	r3, [r7, #12]
  4015da:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
  4015de:	2b00      	cmp	r3, #0
  4015e0:	d112      	bne.n	401608 <signal_adc_read_buffer+0x3c>
  4015e2:	68fb      	ldr	r3, [r7, #12]
  4015e4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  4015e8:	2b00      	cmp	r3, #0
  4015ea:	d10d      	bne.n	401608 <signal_adc_read_buffer+0x3c>
    {
        p_adc->ADC_RPR = (uint32_t)p_s_buffer;
  4015ec:	68ba      	ldr	r2, [r7, #8]
  4015ee:	68fb      	ldr	r3, [r7, #12]
  4015f0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        p_adc->ADC_RCR = ul_size;
  4015f4:	68fb      	ldr	r3, [r7, #12]
  4015f6:	687a      	ldr	r2, [r7, #4]
  4015f8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        p_adc->ADC_PTCR = ADC_PTCR_RXTEN;
  4015fc:	68fb      	ldr	r3, [r7, #12]
  4015fe:	2201      	movs	r2, #1
  401600:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

        return 1;
  401604:	2301      	movs	r3, #1
  401606:	e00f      	b.n	401628 <signal_adc_read_buffer+0x5c>
    }
    else /* Check if the second PDC bank is free. */
    {
        if (p_adc->ADC_RNCR == 0)
  401608:	68fb      	ldr	r3, [r7, #12]
  40160a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  40160e:	2b00      	cmp	r3, #0
  401610:	d109      	bne.n	401626 <signal_adc_read_buffer+0x5a>
        {
            p_adc->ADC_RNPR = (uint32_t)p_s_buffer;
  401612:	68ba      	ldr	r2, [r7, #8]
  401614:	68fb      	ldr	r3, [r7, #12]
  401616:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            p_adc->ADC_RNCR = ul_size;
  40161a:	68fb      	ldr	r3, [r7, #12]
  40161c:	687a      	ldr	r2, [r7, #4]
  40161e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

            return 1;
  401622:	2301      	movs	r3, #1
  401624:	e000      	b.n	401628 <signal_adc_read_buffer+0x5c>
        }
        else
            return 0;
  401626:	2300      	movs	r3, #0
    }
}
  401628:	4618      	mov	r0, r3
  40162a:	3714      	adds	r7, #20
  40162c:	46bd      	mov	sp, r7
  40162e:	bc80      	pop	{r7}
  401630:	4770      	bx	lr
	...

00401634 <signal_adc_update>:

/**************************** GLOBAL FUNCTIONS *******************************/

/** @brief Get sampled signals from ADC */
void signal_adc_update(int32_t *signals)
{
  401634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401638:	b085      	sub	sp, #20
  40163a:	af00      	add	r7, sp, #0
  40163c:	6078      	str	r0, [r7, #4]

#define SQRT2_Q15 (46341)

    static uint16_t phase_1 = 0;
    static uint16_t phase_3 = 0;
    signal_params_t *sp = control_get_params();
  40163e:	4b46      	ldr	r3, [pc, #280]	; (401758 <signal_adc_update+0x124>)
  401640:	4798      	blx	r3
  401642:	60b8      	str	r0, [r7, #8]

    // output
    uint8_t i;
    for (i = 0; i < SETTINGS_CH_TOTAL_NUM; i++)
  401644:	2300      	movs	r3, #0
  401646:	73fb      	strb	r3, [r7, #15]
  401648:	e04b      	b.n	4016e2 <signal_adc_update+0xae>
    {
        signals[i] = FPMUL(lut_sin_128_Q20(phase_1), sp->amp, 8) + FPMUL(lut_sin_128_Q20(phase_3), sp->amp / 10, 8);
  40164a:	7bfb      	ldrb	r3, [r7, #15]
  40164c:	009b      	lsls	r3, r3, #2
  40164e:	687a      	ldr	r2, [r7, #4]
  401650:	eb02 0a03 	add.w	sl, r2, r3
  401654:	4b41      	ldr	r3, [pc, #260]	; (40175c <signal_adc_update+0x128>)
  401656:	881b      	ldrh	r3, [r3, #0]
  401658:	b2db      	uxtb	r3, r3
  40165a:	4618      	mov	r0, r3
  40165c:	4b40      	ldr	r3, [pc, #256]	; (401760 <signal_adc_update+0x12c>)
  40165e:	4798      	blx	r3
  401660:	4603      	mov	r3, r0
  401662:	4619      	mov	r1, r3
  401664:	ea4f 72e1 	mov.w	r2, r1, asr #31
  401668:	68bb      	ldr	r3, [r7, #8]
  40166a:	885b      	ldrh	r3, [r3, #2]
  40166c:	b29b      	uxth	r3, r3
  40166e:	f04f 0400 	mov.w	r4, #0
  401672:	fb03 fe02 	mul.w	lr, r3, r2
  401676:	fb01 f004 	mul.w	r0, r1, r4
  40167a:	4470      	add	r0, lr
  40167c:	fba1 3403 	umull	r3, r4, r1, r3
  401680:	1902      	adds	r2, r0, r4
  401682:	4614      	mov	r4, r2
  401684:	0a1d      	lsrs	r5, r3, #8
  401686:	ea45 6504 	orr.w	r5, r5, r4, lsl #24
  40168a:	1226      	asrs	r6, r4, #8
  40168c:	46ab      	mov	fp, r5
  40168e:	4b35      	ldr	r3, [pc, #212]	; (401764 <signal_adc_update+0x130>)
  401690:	881b      	ldrh	r3, [r3, #0]
  401692:	b2db      	uxtb	r3, r3
  401694:	4618      	mov	r0, r3
  401696:	4b32      	ldr	r3, [pc, #200]	; (401760 <signal_adc_update+0x12c>)
  401698:	4798      	blx	r3
  40169a:	4603      	mov	r3, r0
  40169c:	4619      	mov	r1, r3
  40169e:	ea4f 72e1 	mov.w	r2, r1, asr #31
  4016a2:	68bb      	ldr	r3, [r7, #8]
  4016a4:	885b      	ldrh	r3, [r3, #2]
  4016a6:	4830      	ldr	r0, [pc, #192]	; (401768 <signal_adc_update+0x134>)
  4016a8:	fba0 0303 	umull	r0, r3, r0, r3
  4016ac:	08db      	lsrs	r3, r3, #3
  4016ae:	b29b      	uxth	r3, r3
  4016b0:	b29b      	uxth	r3, r3
  4016b2:	f04f 0400 	mov.w	r4, #0
  4016b6:	fb03 fe02 	mul.w	lr, r3, r2
  4016ba:	fb01 f004 	mul.w	r0, r1, r4
  4016be:	4470      	add	r0, lr
  4016c0:	fba1 3403 	umull	r3, r4, r1, r3
  4016c4:	1902      	adds	r2, r0, r4
  4016c6:	4614      	mov	r4, r2
  4016c8:	ea4f 2813 	mov.w	r8, r3, lsr #8
  4016cc:	ea48 6804 	orr.w	r8, r8, r4, lsl #24
  4016d0:	ea4f 2924 	mov.w	r9, r4, asr #8
  4016d4:	4643      	mov	r3, r8
  4016d6:	445b      	add	r3, fp
  4016d8:	f8ca 3000 	str.w	r3, [sl]
    for (i = 0; i < SETTINGS_CH_TOTAL_NUM; i++)
  4016dc:	7bfb      	ldrb	r3, [r7, #15]
  4016de:	3301      	adds	r3, #1
  4016e0:	73fb      	strb	r3, [r7, #15]
  4016e2:	7bfb      	ldrb	r3, [r7, #15]
  4016e4:	2b03      	cmp	r3, #3
  4016e6:	d9b0      	bls.n	40164a <signal_adc_update+0x16>
    }

    // increase phases
    phase_1 += sp->fL / 50;
  4016e8:	68bb      	ldr	r3, [r7, #8]
  4016ea:	889b      	ldrh	r3, [r3, #4]
  4016ec:	4a1f      	ldr	r2, [pc, #124]	; (40176c <signal_adc_update+0x138>)
  4016ee:	fba2 2303 	umull	r2, r3, r2, r3
  4016f2:	091b      	lsrs	r3, r3, #4
  4016f4:	b29a      	uxth	r2, r3
  4016f6:	4b19      	ldr	r3, [pc, #100]	; (40175c <signal_adc_update+0x128>)
  4016f8:	881b      	ldrh	r3, [r3, #0]
  4016fa:	4413      	add	r3, r2
  4016fc:	b29a      	uxth	r2, r3
  4016fe:	4b17      	ldr	r3, [pc, #92]	; (40175c <signal_adc_update+0x128>)
  401700:	801a      	strh	r2, [r3, #0]
    phase_3 += sp->fL / 50 * 3;
  401702:	68bb      	ldr	r3, [r7, #8]
  401704:	889b      	ldrh	r3, [r3, #4]
  401706:	4a19      	ldr	r2, [pc, #100]	; (40176c <signal_adc_update+0x138>)
  401708:	fba2 2303 	umull	r2, r3, r2, r3
  40170c:	091b      	lsrs	r3, r3, #4
  40170e:	b29b      	uxth	r3, r3
  401710:	461a      	mov	r2, r3
  401712:	0052      	lsls	r2, r2, #1
  401714:	4413      	add	r3, r2
  401716:	b29a      	uxth	r2, r3
  401718:	4b12      	ldr	r3, [pc, #72]	; (401764 <signal_adc_update+0x130>)
  40171a:	881b      	ldrh	r3, [r3, #0]
  40171c:	4413      	add	r3, r2
  40171e:	b29a      	uxth	r2, r3
  401720:	4b10      	ldr	r3, [pc, #64]	; (401764 <signal_adc_update+0x130>)
  401722:	801a      	strh	r2, [r3, #0]

    if (phase_1 >= SETTINGS_MSDFT_BUF_LEN)
  401724:	4b0d      	ldr	r3, [pc, #52]	; (40175c <signal_adc_update+0x128>)
  401726:	881b      	ldrh	r3, [r3, #0]
  401728:	2b7f      	cmp	r3, #127	; 0x7f
  40172a:	d905      	bls.n	401738 <signal_adc_update+0x104>
        phase_1 -= SETTINGS_MSDFT_BUF_LEN;
  40172c:	4b0b      	ldr	r3, [pc, #44]	; (40175c <signal_adc_update+0x128>)
  40172e:	881b      	ldrh	r3, [r3, #0]
  401730:	3b80      	subs	r3, #128	; 0x80
  401732:	b29a      	uxth	r2, r3
  401734:	4b09      	ldr	r3, [pc, #36]	; (40175c <signal_adc_update+0x128>)
  401736:	801a      	strh	r2, [r3, #0]
    if (phase_3 >= SETTINGS_MSDFT_BUF_LEN)
  401738:	4b0a      	ldr	r3, [pc, #40]	; (401764 <signal_adc_update+0x130>)
  40173a:	881b      	ldrh	r3, [r3, #0]
  40173c:	2b7f      	cmp	r3, #127	; 0x7f
  40173e:	d905      	bls.n	40174c <signal_adc_update+0x118>
        phase_3 -= SETTINGS_MSDFT_BUF_LEN;
  401740:	4b08      	ldr	r3, [pc, #32]	; (401764 <signal_adc_update+0x130>)
  401742:	881b      	ldrh	r3, [r3, #0]
  401744:	3b80      	subs	r3, #128	; 0x80
  401746:	b29a      	uxth	r2, r3
  401748:	4b06      	ldr	r3, [pc, #24]	; (401764 <signal_adc_update+0x130>)
  40174a:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < SETTINGS_CH_TOTAL_NUM; i++)
    {
        signals[i] = (int32_t)((((uint64_t)(sample_data.us_value[i] * VOLT_REF) << 15) / MAX_DIGITAL)); // TODO: calibracion y eso
    }
#endif
}
  40174c:	bf00      	nop
  40174e:	3714      	adds	r7, #20
  401750:	46bd      	mov	sp, r7
  401752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401756:	bf00      	nop
  401758:	004007b9 	.word	0x004007b9
  40175c:	200019f6 	.word	0x200019f6
  401760:	00406c71 	.word	0x00406c71
  401764:	200019f8 	.word	0x200019f8
  401768:	cccccccd 	.word	0xcccccccd
  40176c:	51eb851f 	.word	0x51eb851f

00401770 <signal_adc_init>:

/** @brief Initialize ADC. */
void signal_adc_init()
{
  401770:	b590      	push	{r4, r7, lr}
  401772:	b083      	sub	sp, #12
  401774:	af00      	add	r7, sp, #0

    // Initialize sample variable
    memset((void *)&sample_data, 0, sizeof(sample_data));
  401776:	220e      	movs	r2, #14
  401778:	2100      	movs	r1, #0
  40177a:	483b      	ldr	r0, [pc, #236]	; (401868 <signal_adc_init+0xf8>)
  40177c:	4b3b      	ldr	r3, [pc, #236]	; (40186c <signal_adc_init+0xfc>)
  40177e:	4798      	blx	r3

    /* Enable peripheral clock. */
    uint32_t i;
    pmc_enable_periph_clk(ID_ADC);
  401780:	201d      	movs	r0, #29
  401782:	4b3b      	ldr	r3, [pc, #236]	; (401870 <signal_adc_init+0x100>)
  401784:	4798      	blx	r3
     *
     * Formula 2:
     *     Startup  Time = startup value / ADCClock
     *     Startup time = 64 / 6.4MHz = 10 us
     */
    adc_init(ADC, sysclk_get_cpu_hz(), 6400000, ADC_STARTUP_TIME_4);
  401786:	4b3b      	ldr	r3, [pc, #236]	; (401874 <signal_adc_init+0x104>)
  401788:	4798      	blx	r3
  40178a:	4601      	mov	r1, r0
  40178c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  401790:	4a39      	ldr	r2, [pc, #228]	; (401878 <signal_adc_init+0x108>)
  401792:	483a      	ldr	r0, [pc, #232]	; (40187c <signal_adc_init+0x10c>)
  401794:	4c3a      	ldr	r4, [pc, #232]	; (401880 <signal_adc_init+0x110>)
  401796:	47a0      	blx	r4
     *
     *     Transfer Time = (1 * 2 + 3) / 6.4MHz = 781 ns
     *     Tracking Time = (1 + 1) / 6.4MHz = 312 ns
     *     Settling Time = 3 / 6.4MHz = 469 ns
     */
    adc_configure_timing(ADC, TRACKING_TIME, ADC_SETTLING_TIME_3, TRANSFER_PERIOD);
  401798:	2301      	movs	r3, #1
  40179a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
  40179e:	2101      	movs	r1, #1
  4017a0:	4836      	ldr	r0, [pc, #216]	; (40187c <signal_adc_init+0x10c>)
  4017a2:	4c38      	ldr	r4, [pc, #224]	; (401884 <signal_adc_init+0x114>)
  4017a4:	47a0      	blx	r4

    /* Enable channel number tag. */
    adc_enable_tag(ADC);
  4017a6:	4835      	ldr	r0, [pc, #212]	; (40187c <signal_adc_init+0x10c>)
  4017a8:	4b37      	ldr	r3, [pc, #220]	; (401888 <signal_adc_init+0x118>)
  4017aa:	4798      	blx	r3

    /* Enable sequencer. */
    adc_configure_sequence(ADC, ch_list, SETTINGS_CH_TOTAL_NUM);
  4017ac:	2204      	movs	r2, #4
  4017ae:	4937      	ldr	r1, [pc, #220]	; (40188c <signal_adc_init+0x11c>)
  4017b0:	4832      	ldr	r0, [pc, #200]	; (40187c <signal_adc_init+0x10c>)
  4017b2:	4b37      	ldr	r3, [pc, #220]	; (401890 <signal_adc_init+0x120>)
  4017b4:	4798      	blx	r3
    adc_start_sequencer(ADC);
  4017b6:	4831      	ldr	r0, [pc, #196]	; (40187c <signal_adc_init+0x10c>)
  4017b8:	4b36      	ldr	r3, [pc, #216]	; (401894 <signal_adc_init+0x124>)
  4017ba:	4798      	blx	r3

    /* Enable channels. */
    for (i = 0; i < SETTINGS_CH_TOTAL_NUM; i++)
  4017bc:	2300      	movs	r3, #0
  4017be:	607b      	str	r3, [r7, #4]
  4017c0:	e008      	b.n	4017d4 <signal_adc_init+0x64>
    {
        adc_enable_channel(ADC, (enum adc_channel_num_t)i);
  4017c2:	687b      	ldr	r3, [r7, #4]
  4017c4:	b2db      	uxtb	r3, r3
  4017c6:	4619      	mov	r1, r3
  4017c8:	482c      	ldr	r0, [pc, #176]	; (40187c <signal_adc_init+0x10c>)
  4017ca:	4b33      	ldr	r3, [pc, #204]	; (401898 <signal_adc_init+0x128>)
  4017cc:	4798      	blx	r3
    for (i = 0; i < SETTINGS_CH_TOTAL_NUM; i++)
  4017ce:	687b      	ldr	r3, [r7, #4]
  4017d0:	3301      	adds	r3, #1
  4017d2:	607b      	str	r3, [r7, #4]
  4017d4:	687b      	ldr	r3, [r7, #4]
  4017d6:	2b03      	cmp	r3, #3
  4017d8:	d9f3      	bls.n	4017c2 <signal_adc_init+0x52>
    }

    /* Update channel number. */
    sample_data.uc_ch_num[0] = ch_list[0];
  4017da:	4b2c      	ldr	r3, [pc, #176]	; (40188c <signal_adc_init+0x11c>)
  4017dc:	781a      	ldrb	r2, [r3, #0]
  4017de:	4b22      	ldr	r3, [pc, #136]	; (401868 <signal_adc_init+0xf8>)
  4017e0:	701a      	strb	r2, [r3, #0]

    /* Set gain and offset (only single ended mode used here). */
    adc_disable_anch(ADC); /* Disable analog change. */
  4017e2:	4826      	ldr	r0, [pc, #152]	; (40187c <signal_adc_init+0x10c>)
  4017e4:	4b2d      	ldr	r3, [pc, #180]	; (40189c <signal_adc_init+0x12c>)
  4017e6:	4798      	blx	r3
    for (i = 0; i < SETTINGS_CH_TOTAL_NUM; i++)
  4017e8:	2300      	movs	r3, #0
  4017ea:	607b      	str	r3, [r7, #4]
  4017ec:	e013      	b.n	401816 <signal_adc_init+0xa6>
    {
        adc_set_channel_input_gain(ADC, ch_list[i], ADC_GAINVALUE_0);
  4017ee:	4a27      	ldr	r2, [pc, #156]	; (40188c <signal_adc_init+0x11c>)
  4017f0:	687b      	ldr	r3, [r7, #4]
  4017f2:	4413      	add	r3, r2
  4017f4:	781b      	ldrb	r3, [r3, #0]
  4017f6:	2200      	movs	r2, #0
  4017f8:	4619      	mov	r1, r3
  4017fa:	4820      	ldr	r0, [pc, #128]	; (40187c <signal_adc_init+0x10c>)
  4017fc:	4b28      	ldr	r3, [pc, #160]	; (4018a0 <signal_adc_init+0x130>)
  4017fe:	4798      	blx	r3
        adc_disable_channel_input_offset(ADC, ch_list[i]);
  401800:	4a22      	ldr	r2, [pc, #136]	; (40188c <signal_adc_init+0x11c>)
  401802:	687b      	ldr	r3, [r7, #4]
  401804:	4413      	add	r3, r2
  401806:	781b      	ldrb	r3, [r3, #0]
  401808:	4619      	mov	r1, r3
  40180a:	481c      	ldr	r0, [pc, #112]	; (40187c <signal_adc_init+0x10c>)
  40180c:	4b25      	ldr	r3, [pc, #148]	; (4018a4 <signal_adc_init+0x134>)
  40180e:	4798      	blx	r3
    for (i = 0; i < SETTINGS_CH_TOTAL_NUM; i++)
  401810:	687b      	ldr	r3, [r7, #4]
  401812:	3301      	adds	r3, #1
  401814:	607b      	str	r3, [r7, #4]
  401816:	687b      	ldr	r3, [r7, #4]
  401818:	2b03      	cmp	r3, #3
  40181a:	d9e8      	bls.n	4017ee <signal_adc_init+0x7e>
    }

    /* Auto calibrate. */
    adc_set_calibmode(ADC);
  40181c:	4817      	ldr	r0, [pc, #92]	; (40187c <signal_adc_init+0x10c>)
  40181e:	4b22      	ldr	r3, [pc, #136]	; (4018a8 <signal_adc_init+0x138>)
  401820:	4798      	blx	r3
    while (1)
    {
        if ((adc_get_status(ADC) & ADC_ISR_EOCAL) == ADC_ISR_EOCAL)
  401822:	4816      	ldr	r0, [pc, #88]	; (40187c <signal_adc_init+0x10c>)
  401824:	4b21      	ldr	r3, [pc, #132]	; (4018ac <signal_adc_init+0x13c>)
  401826:	4798      	blx	r3
  401828:	4603      	mov	r3, r0
  40182a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
  40182e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
  401832:	d000      	beq.n	401836 <signal_adc_init+0xc6>
  401834:	e7f5      	b.n	401822 <signal_adc_init+0xb2>
            break;
  401836:	bf00      	nop
    }

    /* Set power save. */
    adc_configure_power_save(ADC, 0, 0);
  401838:	2200      	movs	r2, #0
  40183a:	2100      	movs	r1, #0
  40183c:	480f      	ldr	r0, [pc, #60]	; (40187c <signal_adc_init+0x10c>)
  40183e:	4b1c      	ldr	r3, [pc, #112]	; (4018b0 <signal_adc_init+0x140>)
  401840:	4798      	blx	r3

    /* Transfer with PDC. */
    signal_adc_read_buffer(ADC, sample_data.us_value, BUFFER_SIZE);
  401842:	2204      	movs	r2, #4
  401844:	491b      	ldr	r1, [pc, #108]	; (4018b4 <signal_adc_init+0x144>)
  401846:	480d      	ldr	r0, [pc, #52]	; (40187c <signal_adc_init+0x10c>)
  401848:	4b1b      	ldr	r3, [pc, #108]	; (4018b8 <signal_adc_init+0x148>)
  40184a:	4798      	blx	r3
    adc_enable_interrupt(ADC, ADC_IER_RXBUFF);
  40184c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401850:	480a      	ldr	r0, [pc, #40]	; (40187c <signal_adc_init+0x10c>)
  401852:	4b1a      	ldr	r3, [pc, #104]	; (4018bc <signal_adc_init+0x14c>)
  401854:	4798      	blx	r3

    /* Configure trigger mode and start convention. */
    adc_configure_trigger(ADC, ADC_TRIG_SW, 0);
  401856:	2200      	movs	r2, #0
  401858:	2100      	movs	r1, #0
  40185a:	4808      	ldr	r0, [pc, #32]	; (40187c <signal_adc_init+0x10c>)
  40185c:	4b18      	ldr	r3, [pc, #96]	; (4018c0 <signal_adc_init+0x150>)
  40185e:	4798      	blx	r3
}
  401860:	bf00      	nop
  401862:	370c      	adds	r7, #12
  401864:	46bd      	mov	sp, r7
  401866:	bd90      	pop	{r4, r7, pc}
  401868:	200019e8 	.word	0x200019e8
  40186c:	00408eb9 	.word	0x00408eb9
  401870:	004078a9 	.word	0x004078a9
  401874:	004015b9 	.word	0x004015b9
  401878:	0061a800 	.word	0x0061a800
  40187c:	40038000 	.word	0x40038000
  401880:	00403a15 	.word	0x00403a15
  401884:	00403b99 	.word	0x00403b99
  401888:	00403c31 	.word	0x00403c31
  40188c:	2000000c 	.word	0x2000000c
  401890:	00403adb 	.word	0x00403adb
  401894:	00403c4f 	.word	0x00403c4f
  401898:	00403c0d 	.word	0x00403c0d
  40189c:	00403bd7 	.word	0x00403bd7
  4018a0:	00403ca9 	.word	0x00403ca9
  4018a4:	00403c6d 	.word	0x00403c6d
  4018a8:	00403ce3 	.word	0x00403ce3
  4018ac:	00403d1b 	.word	0x00403d1b
  4018b0:	00403aa5 	.word	0x00403aa5
  4018b4:	200019ec 	.word	0x200019ec
  4018b8:	004015cd 	.word	0x004015cd
  4018bc:	00403d01 	.word	0x00403d01
  4018c0:	00403a77 	.word	0x00403a77

004018c4 <signal_adc_start_conversion>:

/** @brief ADC software trigger. */
void signal_adc_start_conversion()
{
  4018c4:	b580      	push	{r7, lr}
  4018c6:	af00      	add	r7, sp, #0
    adc_start(ADC);
  4018c8:	4802      	ldr	r0, [pc, #8]	; (4018d4 <signal_adc_start_conversion+0x10>)
  4018ca:	4b03      	ldr	r3, [pc, #12]	; (4018d8 <signal_adc_start_conversion+0x14>)
  4018cc:	4798      	blx	r3
}
  4018ce:	bf00      	nop
  4018d0:	bd80      	pop	{r7, pc}
  4018d2:	bf00      	nop
  4018d4:	40038000 	.word	0x40038000
  4018d8:	00403bf5 	.word	0x00403bf5

004018dc <signal_adc_process_data>:

/** @brief ADC callback function. */
void signal_adc_process_data()
{
  4018dc:	b580      	push	{r7, lr}
  4018de:	b082      	sub	sp, #8
  4018e0:	af00      	add	r7, sp, #0
    uint32_t i;

    if ((adc_get_status(ADC) & ADC_ISR_RXBUFF) == ADC_ISR_RXBUFF)
  4018e2:	4816      	ldr	r0, [pc, #88]	; (40193c <signal_adc_process_data+0x60>)
  4018e4:	4b16      	ldr	r3, [pc, #88]	; (401940 <signal_adc_process_data+0x64>)
  4018e6:	4798      	blx	r3
  4018e8:	4603      	mov	r3, r0
  4018ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
  4018ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4018f2:	d11e      	bne.n	401932 <signal_adc_process_data+0x56>
    {
        sample_data.us_done = ADC_DONE_MASK;
  4018f4:	4b13      	ldr	r3, [pc, #76]	; (401944 <signal_adc_process_data+0x68>)
  4018f6:	220f      	movs	r2, #15
  4018f8:	819a      	strh	r2, [r3, #12]
        signal_adc_read_buffer(ADC, sample_data.us_value, BUFFER_SIZE);
  4018fa:	2204      	movs	r2, #4
  4018fc:	4912      	ldr	r1, [pc, #72]	; (401948 <signal_adc_process_data+0x6c>)
  4018fe:	480f      	ldr	r0, [pc, #60]	; (40193c <signal_adc_process_data+0x60>)
  401900:	4b12      	ldr	r3, [pc, #72]	; (40194c <signal_adc_process_data+0x70>)
  401902:	4798      	blx	r3
        /* Only keep sample value, and discard channel number. */
        for (i = 0; i < SETTINGS_CH_TOTAL_NUM; i++)
  401904:	2300      	movs	r3, #0
  401906:	607b      	str	r3, [r7, #4]
  401908:	e010      	b.n	40192c <signal_adc_process_data+0x50>
        {
            sample_data.us_value[i] &= ADC_LCDR_LDATA_Msk;
  40190a:	4a0e      	ldr	r2, [pc, #56]	; (401944 <signal_adc_process_data+0x68>)
  40190c:	687b      	ldr	r3, [r7, #4]
  40190e:	005b      	lsls	r3, r3, #1
  401910:	4413      	add	r3, r2
  401912:	889b      	ldrh	r3, [r3, #4]
  401914:	f3c3 030b 	ubfx	r3, r3, #0, #12
  401918:	b299      	uxth	r1, r3
  40191a:	4a0a      	ldr	r2, [pc, #40]	; (401944 <signal_adc_process_data+0x68>)
  40191c:	687b      	ldr	r3, [r7, #4]
  40191e:	005b      	lsls	r3, r3, #1
  401920:	4413      	add	r3, r2
  401922:	460a      	mov	r2, r1
  401924:	809a      	strh	r2, [r3, #4]
        for (i = 0; i < SETTINGS_CH_TOTAL_NUM; i++)
  401926:	687b      	ldr	r3, [r7, #4]
  401928:	3301      	adds	r3, #1
  40192a:	607b      	str	r3, [r7, #4]
  40192c:	687b      	ldr	r3, [r7, #4]
  40192e:	2b03      	cmp	r3, #3
  401930:	d9eb      	bls.n	40190a <signal_adc_process_data+0x2e>
        }
    }
}
  401932:	bf00      	nop
  401934:	3708      	adds	r7, #8
  401936:	46bd      	mov	sp, r7
  401938:	bd80      	pop	{r7, pc}
  40193a:	bf00      	nop
  40193c:	40038000 	.word	0x40038000
  401940:	00403d1b 	.word	0x00403d1b
  401944:	200019e8 	.word	0x200019e8
  401948:	200019ec 	.word	0x200019ec
  40194c:	004015cd 	.word	0x004015cd

00401950 <msdft_modulation>:
#include "utils/lut.h"


/**************************** LOCAL FUNCTIONS ********************************/
static void msdft_modulation(uint16_t H, uint16_t *index, int32_t *input, sp_complex_t *value)
{
  401950:	b590      	push	{r4, r7, lr}
  401952:	b085      	sub	sp, #20
  401954:	af00      	add	r7, sp, #0
  401956:	60b9      	str	r1, [r7, #8]
  401958:	607a      	str	r2, [r7, #4]
  40195a:	603b      	str	r3, [r7, #0]
  40195c:	4603      	mov	r3, r0
  40195e:	81fb      	strh	r3, [r7, #14]
    // mSDFT Index
    *index += H;
  401960:	68bb      	ldr	r3, [r7, #8]
  401962:	881a      	ldrh	r2, [r3, #0]
  401964:	89fb      	ldrh	r3, [r7, #14]
  401966:	4413      	add	r3, r2
  401968:	b29a      	uxth	r2, r3
  40196a:	68bb      	ldr	r3, [r7, #8]
  40196c:	801a      	strh	r2, [r3, #0]
    if (*index > (SETTINGS_MSDFT_BUF_LEN - 1))
  40196e:	68bb      	ldr	r3, [r7, #8]
  401970:	881b      	ldrh	r3, [r3, #0]
  401972:	2b7f      	cmp	r3, #127	; 0x7f
  401974:	d905      	bls.n	401982 <msdft_modulation+0x32>
        *index -= SETTINGS_MSDFT_BUF_LEN;
  401976:	68bb      	ldr	r3, [r7, #8]
  401978:	881b      	ldrh	r3, [r3, #0]
  40197a:	3b80      	subs	r3, #128	; 0x80
  40197c:	b29a      	uxth	r2, r3
  40197e:	68bb      	ldr	r3, [r7, #8]
  401980:	801a      	strh	r2, [r3, #0]
    // Modulator and Resonator
    // NOTE: Output is in Q(7 - 1 + 12) = Q18
    //  Gain of SW is Q7
    //  Gain of modulation 1/2
    //  Sine and cosine function are in Q12 (Q20>>8=Q12)
    value->real += (*input) * (lut_cos_128_Q20(*index) >> 8);
  401982:	687b      	ldr	r3, [r7, #4]
  401984:	681c      	ldr	r4, [r3, #0]
  401986:	68bb      	ldr	r3, [r7, #8]
  401988:	881b      	ldrh	r3, [r3, #0]
  40198a:	b2db      	uxtb	r3, r3
  40198c:	4618      	mov	r0, r3
  40198e:	4b16      	ldr	r3, [pc, #88]	; (4019e8 <msdft_modulation+0x98>)
  401990:	4798      	blx	r3
  401992:	4603      	mov	r3, r0
  401994:	121b      	asrs	r3, r3, #8
  401996:	fb03 f304 	mul.w	r3, r3, r4
  40199a:	683a      	ldr	r2, [r7, #0]
  40199c:	e9d2 1200 	ldrd	r1, r2, [r2]
  4019a0:	ea4f 74e3 	mov.w	r4, r3, asr #31
  4019a4:	185b      	adds	r3, r3, r1
  4019a6:	eb44 0402 	adc.w	r4, r4, r2
  4019aa:	683a      	ldr	r2, [r7, #0]
  4019ac:	e9c2 3400 	strd	r3, r4, [r2]
    value->imag -= (*input) * (lut_sin_128_Q20(*index) >> 8);
  4019b0:	687b      	ldr	r3, [r7, #4]
  4019b2:	681c      	ldr	r4, [r3, #0]
  4019b4:	68bb      	ldr	r3, [r7, #8]
  4019b6:	881b      	ldrh	r3, [r3, #0]
  4019b8:	b2db      	uxtb	r3, r3
  4019ba:	4618      	mov	r0, r3
  4019bc:	4b0b      	ldr	r3, [pc, #44]	; (4019ec <msdft_modulation+0x9c>)
  4019be:	4798      	blx	r3
  4019c0:	4603      	mov	r3, r0
  4019c2:	121b      	asrs	r3, r3, #8
  4019c4:	fb03 f304 	mul.w	r3, r3, r4
  4019c8:	683a      	ldr	r2, [r7, #0]
  4019ca:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
  4019ce:	ea4f 74e3 	mov.w	r4, r3, asr #31
  4019d2:	1acb      	subs	r3, r1, r3
  4019d4:	eb62 0404 	sbc.w	r4, r2, r4
  4019d8:	683a      	ldr	r2, [r7, #0]
  4019da:	e9c2 3402 	strd	r3, r4, [r2, #8]
}
  4019de:	bf00      	nop
  4019e0:	3714      	adds	r7, #20
  4019e2:	46bd      	mov	sp, r7
  4019e4:	bd90      	pop	{r4, r7, pc}
  4019e6:	bf00      	nop
  4019e8:	00406c91 	.word	0x00406c91
  4019ec:	00406c71 	.word	0x00406c71

004019f0 <signal_process>:

/**************************** GLOBAL FUNCTIONS *******************************/

/* @brief Process incoming signal */
void signal_process(int32_t *signals, sp_t *sp)
{
  4019f0:	b590      	push	{r4, r7, lr}
  4019f2:	b08b      	sub	sp, #44	; 0x2c
  4019f4:	af00      	add	r7, sp, #0
  4019f6:	6078      	str	r0, [r7, #4]
  4019f8:	6039      	str	r1, [r7, #0]
    uint8_t ch_num;

    // Update channel parameters
    for (ch_num = 0; ch_num < SETTINGS_CH_TOTAL_NUM; ch_num++)
  4019fa:	2300      	movs	r3, #0
  4019fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  401a00:	e0b4      	b.n	401b6c <signal_process+0x17c>
    {
        int32_t      SW_out;
        int32_t      *input         = &signals[ch_num];
  401a02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  401a06:	009b      	lsls	r3, r3, #2
  401a08:	687a      	ldr	r2, [r7, #4]
  401a0a:	4413      	add	r3, r2
  401a0c:	623b      	str	r3, [r7, #32]
        sp_channel_t *ch            = &sp->ch[ch_num];
  401a0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  401a12:	f44f 721c 	mov.w	r2, #624	; 0x270
  401a16:	fb02 f303 	mul.w	r3, r2, r3
  401a1a:	683a      	ldr	r2, [r7, #0]
  401a1c:	4413      	add	r3, r2
  401a1e:	61fb      	str	r3, [r7, #28]
        int32_t      *signal_last_N = &ch->buffer[ch->buffer_index];
  401a20:	69fb      	ldr	r3, [r7, #28]
  401a22:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
  401a26:	009b      	lsls	r3, r3, #2
  401a28:	69fa      	ldr	r2, [r7, #28]
  401a2a:	4413      	add	r3, r2
  401a2c:	61bb      	str	r3, [r7, #24]

        // Update accumulator of signal^2 (used for RMS calculation)
        ch->rms2 += FPMUL(*input, *input, 0);
  401a2e:	69fb      	ldr	r3, [r7, #28]
  401a30:	f503 7302 	add.w	r3, r3, #520	; 0x208
  401a34:	e9d3 1200 	ldrd	r1, r2, [r3]
  401a38:	6a3b      	ldr	r3, [r7, #32]
  401a3a:	681b      	ldr	r3, [r3, #0]
  401a3c:	4618      	mov	r0, r3
  401a3e:	6a3b      	ldr	r3, [r7, #32]
  401a40:	681b      	ldr	r3, [r3, #0]
  401a42:	fb03 f300 	mul.w	r3, r3, r0
  401a46:	ea4f 74e3 	mov.w	r4, r3, asr #31
  401a4a:	185b      	adds	r3, r3, r1
  401a4c:	eb44 0402 	adc.w	r4, r4, r2
  401a50:	69fa      	ldr	r2, [r7, #28]
  401a52:	f502 7202 	add.w	r2, r2, #520	; 0x208
  401a56:	e9c2 3400 	strd	r3, r4, [r2]
        ch->rms2 -= FPMUL(*signal_last_N, *signal_last_N, 0);
  401a5a:	69fb      	ldr	r3, [r7, #28]
  401a5c:	f503 7302 	add.w	r3, r3, #520	; 0x208
  401a60:	e9d3 1200 	ldrd	r1, r2, [r3]
  401a64:	69bb      	ldr	r3, [r7, #24]
  401a66:	681b      	ldr	r3, [r3, #0]
  401a68:	4618      	mov	r0, r3
  401a6a:	69bb      	ldr	r3, [r7, #24]
  401a6c:	681b      	ldr	r3, [r3, #0]
  401a6e:	fb03 f300 	mul.w	r3, r3, r0
  401a72:	ea4f 74e3 	mov.w	r4, r3, asr #31
  401a76:	1acb      	subs	r3, r1, r3
  401a78:	eb62 0404 	sbc.w	r4, r2, r4
  401a7c:	69fa      	ldr	r2, [r7, #28]
  401a7e:	f502 7202 	add.w	r2, r2, #520	; 0x208
  401a82:	e9c2 3400 	strd	r3, r4, [r2]

        // Update Sliding window output
        SW_out = *input - *signal_last_N;
  401a86:	6a3b      	ldr	r3, [r7, #32]
  401a88:	681a      	ldr	r2, [r3, #0]
  401a8a:	69bb      	ldr	r3, [r7, #24]
  401a8c:	681b      	ldr	r3, [r3, #0]
  401a8e:	1ad3      	subs	r3, r2, r3
  401a90:	60fb      	str	r3, [r7, #12]

        // Update sliding window buffer and index
        ch->buffer[ch->buffer_index] = *input;
  401a92:	69fb      	ldr	r3, [r7, #28]
  401a94:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
  401a98:	4619      	mov	r1, r3
  401a9a:	6a3b      	ldr	r3, [r7, #32]
  401a9c:	681a      	ldr	r2, [r3, #0]
  401a9e:	69fb      	ldr	r3, [r7, #28]
  401aa0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        ch->buffer_index++;
  401aa4:	69fb      	ldr	r3, [r7, #28]
  401aa6:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
  401aaa:	3301      	adds	r3, #1
  401aac:	b29a      	uxth	r2, r3
  401aae:	69fb      	ldr	r3, [r7, #28]
  401ab0:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
        if (ch->buffer_index > (SETTINGS_MSDFT_BUF_LEN - 1))
  401ab4:	69fb      	ldr	r3, [r7, #28]
  401ab6:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
  401aba:	2b7f      	cmp	r3, #127	; 0x7f
  401abc:	d903      	bls.n	401ac6 <signal_process+0xd6>
            ch->buffer_index = 0;
  401abe:	69fb      	ldr	r3, [r7, #28]
  401ac0:	2200      	movs	r2, #0
  401ac2:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200

        // Update DC accumulator (MAF). Harmonics are stored in Q18 so data is shifted by 11. With SW length (<<7) it results in Q18
        ch->harmonic[0].real += (SW_out << 11);
  401ac6:	69fb      	ldr	r3, [r7, #28]
  401ac8:	f503 7304 	add.w	r3, r3, #528	; 0x210
  401acc:	e9d3 1200 	ldrd	r1, r2, [r3]
  401ad0:	68fb      	ldr	r3, [r7, #12]
  401ad2:	02db      	lsls	r3, r3, #11
  401ad4:	ea4f 74e3 	mov.w	r4, r3, asr #31
  401ad8:	185b      	adds	r3, r3, r1
  401ada:	eb44 0402 	adc.w	r4, r4, r2
  401ade:	69fa      	ldr	r2, [r7, #28]
  401ae0:	f502 7204 	add.w	r2, r2, #528	; 0x210
  401ae4:	e9c2 3400 	strd	r3, r4, [r2]
        ch->harmonic[0].imag = 0;
  401ae8:	69fb      	ldr	r3, [r7, #28]
  401aea:	f503 7206 	add.w	r2, r3, #536	; 0x218
  401aee:	f04f 0300 	mov.w	r3, #0
  401af2:	f04f 0400 	mov.w	r4, #0
  401af6:	e9c2 3400 	strd	r3, r4, [r2]

        // Update harmonics accumulators (Modulated Sliding DFT)
        signal_params_t *signal_params = control_get_params();
  401afa:	4b21      	ldr	r3, [pc, #132]	; (401b80 <signal_process+0x190>)
  401afc:	4798      	blx	r3
  401afe:	6178      	str	r0, [r7, #20]

        for (uint8_t i = 1; i < 5; i++)
  401b00:	2301      	movs	r3, #1
  401b02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  401b06:	e028      	b.n	401b5a <signal_process+0x16a>
        {
            uint16_t index_increment = signal_params->fL / 50 * (2*i - 1);
  401b08:	697b      	ldr	r3, [r7, #20]
  401b0a:	889b      	ldrh	r3, [r3, #4]
  401b0c:	4a1d      	ldr	r2, [pc, #116]	; (401b84 <signal_process+0x194>)
  401b0e:	fba2 2303 	umull	r2, r3, r2, r3
  401b12:	091b      	lsrs	r3, r3, #4
  401b14:	b29a      	uxth	r2, r3
  401b16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  401b1a:	005b      	lsls	r3, r3, #1
  401b1c:	3b01      	subs	r3, #1
  401b1e:	b29b      	uxth	r3, r3
  401b20:	fb12 f303 	smulbb	r3, r2, r3
  401b24:	827b      	strh	r3, [r7, #18]

            if (index_increment < (SETTINGS_MSDFT_BUF_LEN / 2))  // Max harmonic
  401b26:	8a7b      	ldrh	r3, [r7, #18]
  401b28:	2b3f      	cmp	r3, #63	; 0x3f
  401b2a:	d811      	bhi.n	401b50 <signal_process+0x160>
            {
                msdft_modulation(index_increment, &ch->harmonic_index[i], &SW_out, &ch->harmonic[i]);
  401b2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  401b30:	f503 7398 	add.w	r3, r3, #304	; 0x130
  401b34:	005b      	lsls	r3, r3, #1
  401b36:	69fa      	ldr	r2, [r7, #28]
  401b38:	18d1      	adds	r1, r2, r3
  401b3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  401b3e:	3321      	adds	r3, #33	; 0x21
  401b40:	011b      	lsls	r3, r3, #4
  401b42:	69fa      	ldr	r2, [r7, #28]
  401b44:	4413      	add	r3, r2
  401b46:	f107 020c 	add.w	r2, r7, #12
  401b4a:	8a78      	ldrh	r0, [r7, #18]
  401b4c:	4c0e      	ldr	r4, [pc, #56]	; (401b88 <signal_process+0x198>)
  401b4e:	47a0      	blx	r4
        for (uint8_t i = 1; i < 5; i++)
  401b50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  401b54:	3301      	adds	r3, #1
  401b56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  401b5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
  401b5e:	2b04      	cmp	r3, #4
  401b60:	d9d2      	bls.n	401b08 <signal_process+0x118>
    for (ch_num = 0; ch_num < SETTINGS_CH_TOTAL_NUM; ch_num++)
  401b62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  401b66:	3301      	adds	r3, #1
  401b68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  401b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  401b70:	2b03      	cmp	r3, #3
  401b72:	f67f af46 	bls.w	401a02 <signal_process+0x12>
            }
        }
    }
}
  401b76:	bf00      	nop
  401b78:	372c      	adds	r7, #44	; 0x2c
  401b7a:	46bd      	mov	sp, r7
  401b7c:	bd90      	pop	{r4, r7, pc}
  401b7e:	bf00      	nop
  401b80:	004007b9 	.word	0x004007b9
  401b84:	51eb851f 	.word	0x51eb851f
  401b88:	00401951 	.word	0x00401951

00401b8c <set_initial_int64>:
    out[1] = INT32_MIN_VALUE;
    out[2] = INT32_MAX_VALUE;
}

static void set_initial_int64(int64_t *out)
{
  401b8c:	b490      	push	{r4, r7}
  401b8e:	b082      	sub	sp, #8
  401b90:	af00      	add	r7, sp, #0
  401b92:	6078      	str	r0, [r7, #4]
    out[0] = 0;
  401b94:	687a      	ldr	r2, [r7, #4]
  401b96:	f04f 0300 	mov.w	r3, #0
  401b9a:	f04f 0400 	mov.w	r4, #0
  401b9e:	e9c2 3400 	strd	r3, r4, [r2]
    out[1] = INT64_MIN_VALUE;
  401ba2:	687b      	ldr	r3, [r7, #4]
  401ba4:	f103 0208 	add.w	r2, r3, #8
  401ba8:	f04f 0300 	mov.w	r3, #0
  401bac:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  401bb0:	e9c2 3400 	strd	r3, r4, [r2]
    out[2] = INT64_MAX_VALUE;
  401bb4:	687b      	ldr	r3, [r7, #4]
  401bb6:	f103 0210 	add.w	r2, r3, #16
  401bba:	f04f 33ff 	mov.w	r3, #4294967295
  401bbe:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  401bc2:	e9c2 3400 	strd	r3, r4, [r2]
}
  401bc6:	bf00      	nop
  401bc8:	3708      	adds	r7, #8
  401bca:	46bd      	mov	sp, r7
  401bcc:	bc90      	pop	{r4, r7}
  401bce:	4770      	bx	lr

00401bd0 <update_AvgMaxMin_int32_int64>:
    out[trend_max] = MAX(out[trend_max], *in);
    out[trend_min] = MIN(out[trend_min], *in);
}

static void update_AvgMaxMin_int32_int64(int32_t *in, int64_t *out)
{
  401bd0:	b590      	push	{r4, r7, lr}
  401bd2:	b083      	sub	sp, #12
  401bd4:	af00      	add	r7, sp, #0
  401bd6:	6078      	str	r0, [r7, #4]
  401bd8:	6039      	str	r1, [r7, #0]
    out[trend_avg] += *in;
  401bda:	683b      	ldr	r3, [r7, #0]
  401bdc:	e9d3 1200 	ldrd	r1, r2, [r3]
  401be0:	687b      	ldr	r3, [r7, #4]
  401be2:	681b      	ldr	r3, [r3, #0]
  401be4:	ea4f 74e3 	mov.w	r4, r3, asr #31
  401be8:	185b      	adds	r3, r3, r1
  401bea:	eb44 0402 	adc.w	r4, r4, r2
  401bee:	683a      	ldr	r2, [r7, #0]
  401bf0:	e9c2 3400 	strd	r3, r4, [r2]
    out[trend_max] = MAX(out[trend_max], *in);
  401bf4:	683b      	ldr	r3, [r7, #0]
  401bf6:	f103 0008 	add.w	r0, r3, #8
  401bfa:	687b      	ldr	r3, [r7, #4]
  401bfc:	681b      	ldr	r3, [r3, #0]
  401bfe:	ea4f 74e3 	mov.w	r4, r3, asr #31
  401c02:	683a      	ldr	r2, [r7, #0]
  401c04:	3208      	adds	r2, #8
  401c06:	e9d2 1200 	ldrd	r1, r2, [r2]
  401c0a:	428b      	cmp	r3, r1
  401c0c:	eb74 0e02 	sbcs.w	lr, r4, r2
  401c10:	da01      	bge.n	401c16 <update_AvgMaxMin_int32_int64+0x46>
  401c12:	460b      	mov	r3, r1
  401c14:	4614      	mov	r4, r2
  401c16:	e9c0 3400 	strd	r3, r4, [r0]
    out[trend_min] = MIN(out[trend_min], *in);
  401c1a:	683b      	ldr	r3, [r7, #0]
  401c1c:	f103 0010 	add.w	r0, r3, #16
  401c20:	687b      	ldr	r3, [r7, #4]
  401c22:	681b      	ldr	r3, [r3, #0]
  401c24:	ea4f 74e3 	mov.w	r4, r3, asr #31
  401c28:	683a      	ldr	r2, [r7, #0]
  401c2a:	3210      	adds	r2, #16
  401c2c:	e9d2 1200 	ldrd	r1, r2, [r2]
  401c30:	4299      	cmp	r1, r3
  401c32:	eb72 0e04 	sbcs.w	lr, r2, r4
  401c36:	da01      	bge.n	401c3c <update_AvgMaxMin_int32_int64+0x6c>
  401c38:	460b      	mov	r3, r1
  401c3a:	4614      	mov	r4, r2
  401c3c:	e9c0 3400 	strd	r3, r4, [r0]
}
  401c40:	bf00      	nop
  401c42:	370c      	adds	r7, #12
  401c44:	46bd      	mov	sp, r7
  401c46:	bd90      	pop	{r4, r7, pc}

00401c48 <set_AvgMaxMin_int64_int32>:

static void set_AvgMaxMin_int64_int32(int64_t *in, int32_t *out, uint16_t accum_N)
{
  401c48:	b5b0      	push	{r4, r5, r7, lr}
  401c4a:	b084      	sub	sp, #16
  401c4c:	af00      	add	r7, sp, #0
  401c4e:	60f8      	str	r0, [r7, #12]
  401c50:	60b9      	str	r1, [r7, #8]
  401c52:	4613      	mov	r3, r2
  401c54:	80fb      	strh	r3, [r7, #6]
    out[trend_avg] = in[trend_avg] / accum_N;
  401c56:	68fb      	ldr	r3, [r7, #12]
  401c58:	e9d3 0100 	ldrd	r0, r1, [r3]
  401c5c:	88fb      	ldrh	r3, [r7, #6]
  401c5e:	f04f 0400 	mov.w	r4, #0
  401c62:	4d0e      	ldr	r5, [pc, #56]	; (401c9c <set_AvgMaxMin_int64_int32+0x54>)
  401c64:	461a      	mov	r2, r3
  401c66:	4623      	mov	r3, r4
  401c68:	47a8      	blx	r5
  401c6a:	4603      	mov	r3, r0
  401c6c:	460c      	mov	r4, r1
  401c6e:	461a      	mov	r2, r3
  401c70:	68bb      	ldr	r3, [r7, #8]
  401c72:	601a      	str	r2, [r3, #0]
    out[trend_max] = in[trend_max];
  401c74:	68bb      	ldr	r3, [r7, #8]
  401c76:	1d1a      	adds	r2, r3, #4
  401c78:	68fb      	ldr	r3, [r7, #12]
  401c7a:	3308      	adds	r3, #8
  401c7c:	e9d3 3400 	ldrd	r3, r4, [r3]
  401c80:	6013      	str	r3, [r2, #0]
    out[trend_min] = in[trend_min];
  401c82:	68bb      	ldr	r3, [r7, #8]
  401c84:	f103 0208 	add.w	r2, r3, #8
  401c88:	68fb      	ldr	r3, [r7, #12]
  401c8a:	3310      	adds	r3, #16
  401c8c:	e9d3 3400 	ldrd	r3, r4, [r3]
  401c90:	6013      	str	r3, [r2, #0]
}
  401c92:	bf00      	nop
  401c94:	3710      	adds	r7, #16
  401c96:	46bd      	mov	sp, r7
  401c98:	bdb0      	pop	{r4, r5, r7, pc}
  401c9a:	bf00      	nop
  401c9c:	00408979 	.word	0x00408979

00401ca0 <set_AvgMaxMin_sqrt_int64_int32>:
    out[trend_max] = in[trend_max];
    out[trend_min] = in[trend_min];
}

static void set_AvgMaxMin_sqrt_int64_int32(int64_t *in, int32_t *out, uint16_t accum_N)
{
  401ca0:	b5b0      	push	{r4, r5, r7, lr}
  401ca2:	b084      	sub	sp, #16
  401ca4:	af00      	add	r7, sp, #0
  401ca6:	60f8      	str	r0, [r7, #12]
  401ca8:	60b9      	str	r1, [r7, #8]
  401caa:	4613      	mov	r3, r2
  401cac:	80fb      	strh	r3, [r7, #6]
    out[trend_avg] = sqrt(in[trend_avg] / accum_N);
  401cae:	68fb      	ldr	r3, [r7, #12]
  401cb0:	e9d3 0100 	ldrd	r0, r1, [r3]
  401cb4:	88fb      	ldrh	r3, [r7, #6]
  401cb6:	f04f 0400 	mov.w	r4, #0
  401cba:	4d28      	ldr	r5, [pc, #160]	; (401d5c <set_AvgMaxMin_sqrt_int64_int32+0xbc>)
  401cbc:	461a      	mov	r2, r3
  401cbe:	4623      	mov	r3, r4
  401cc0:	47a8      	blx	r5
  401cc2:	4603      	mov	r3, r0
  401cc4:	460c      	mov	r4, r1
  401cc6:	4619      	mov	r1, r3
  401cc8:	4622      	mov	r2, r4
  401cca:	4b25      	ldr	r3, [pc, #148]	; (401d60 <set_AvgMaxMin_sqrt_int64_int32+0xc0>)
  401ccc:	4608      	mov	r0, r1
  401cce:	4611      	mov	r1, r2
  401cd0:	4798      	blx	r3
  401cd2:	4603      	mov	r3, r0
  401cd4:	460c      	mov	r4, r1
  401cd6:	4618      	mov	r0, r3
  401cd8:	4621      	mov	r1, r4
  401cda:	4b22      	ldr	r3, [pc, #136]	; (401d64 <set_AvgMaxMin_sqrt_int64_int32+0xc4>)
  401cdc:	4798      	blx	r3
  401cde:	460a      	mov	r2, r1
  401ce0:	4601      	mov	r1, r0
  401ce2:	4b21      	ldr	r3, [pc, #132]	; (401d68 <set_AvgMaxMin_sqrt_int64_int32+0xc8>)
  401ce4:	4608      	mov	r0, r1
  401ce6:	4611      	mov	r1, r2
  401ce8:	4798      	blx	r3
  401cea:	4602      	mov	r2, r0
  401cec:	68bb      	ldr	r3, [r7, #8]
  401cee:	601a      	str	r2, [r3, #0]
    out[trend_max] = sqrt(in[trend_max]);
  401cf0:	68bb      	ldr	r3, [r7, #8]
  401cf2:	1d1d      	adds	r5, r3, #4
  401cf4:	68fb      	ldr	r3, [r7, #12]
  401cf6:	3308      	adds	r3, #8
  401cf8:	e9d3 3400 	ldrd	r3, r4, [r3]
  401cfc:	4a18      	ldr	r2, [pc, #96]	; (401d60 <set_AvgMaxMin_sqrt_int64_int32+0xc0>)
  401cfe:	4618      	mov	r0, r3
  401d00:	4621      	mov	r1, r4
  401d02:	4790      	blx	r2
  401d04:	4603      	mov	r3, r0
  401d06:	460c      	mov	r4, r1
  401d08:	4618      	mov	r0, r3
  401d0a:	4621      	mov	r1, r4
  401d0c:	4b15      	ldr	r3, [pc, #84]	; (401d64 <set_AvgMaxMin_sqrt_int64_int32+0xc4>)
  401d0e:	4798      	blx	r3
  401d10:	460a      	mov	r2, r1
  401d12:	4601      	mov	r1, r0
  401d14:	4b14      	ldr	r3, [pc, #80]	; (401d68 <set_AvgMaxMin_sqrt_int64_int32+0xc8>)
  401d16:	4608      	mov	r0, r1
  401d18:	4611      	mov	r1, r2
  401d1a:	4798      	blx	r3
  401d1c:	4603      	mov	r3, r0
  401d1e:	602b      	str	r3, [r5, #0]
    out[trend_min] = sqrt(in[trend_min]);
  401d20:	68bb      	ldr	r3, [r7, #8]
  401d22:	f103 0508 	add.w	r5, r3, #8
  401d26:	68fb      	ldr	r3, [r7, #12]
  401d28:	3310      	adds	r3, #16
  401d2a:	e9d3 3400 	ldrd	r3, r4, [r3]
  401d2e:	4a0c      	ldr	r2, [pc, #48]	; (401d60 <set_AvgMaxMin_sqrt_int64_int32+0xc0>)
  401d30:	4618      	mov	r0, r3
  401d32:	4621      	mov	r1, r4
  401d34:	4790      	blx	r2
  401d36:	4603      	mov	r3, r0
  401d38:	460c      	mov	r4, r1
  401d3a:	4618      	mov	r0, r3
  401d3c:	4621      	mov	r1, r4
  401d3e:	4b09      	ldr	r3, [pc, #36]	; (401d64 <set_AvgMaxMin_sqrt_int64_int32+0xc4>)
  401d40:	4798      	blx	r3
  401d42:	460a      	mov	r2, r1
  401d44:	4601      	mov	r1, r0
  401d46:	4b08      	ldr	r3, [pc, #32]	; (401d68 <set_AvgMaxMin_sqrt_int64_int32+0xc8>)
  401d48:	4608      	mov	r0, r1
  401d4a:	4611      	mov	r1, r2
  401d4c:	4798      	blx	r3
  401d4e:	4603      	mov	r3, r0
  401d50:	602b      	str	r3, [r5, #0]
}
  401d52:	bf00      	nop
  401d54:	3710      	adds	r7, #16
  401d56:	46bd      	mov	sp, r7
  401d58:	bdb0      	pop	{r4, r5, r7, pc}
  401d5a:	bf00      	nop
  401d5c:	00408979 	.word	0x00408979
  401d60:	0040836d 	.word	0x0040836d
  401d64:	00407e21 	.word	0x00407e21
  401d68:	00408929 	.word	0x00408929

00401d6c <set_AvgMaxMin_sqrt_int64_int16>:

static void set_AvgMaxMin_sqrt_int64_int16(int64_t *in, int16_t *out, uint16_t accum_N)
{
  401d6c:	b5b0      	push	{r4, r5, r7, lr}
  401d6e:	b084      	sub	sp, #16
  401d70:	af00      	add	r7, sp, #0
  401d72:	60f8      	str	r0, [r7, #12]
  401d74:	60b9      	str	r1, [r7, #8]
  401d76:	4613      	mov	r3, r2
  401d78:	80fb      	strh	r3, [r7, #6]
    out[trend_avg] = sqrt(in[trend_avg] / accum_N);
  401d7a:	68fb      	ldr	r3, [r7, #12]
  401d7c:	e9d3 0100 	ldrd	r0, r1, [r3]
  401d80:	88fb      	ldrh	r3, [r7, #6]
  401d82:	f04f 0400 	mov.w	r4, #0
  401d86:	4d29      	ldr	r5, [pc, #164]	; (401e2c <set_AvgMaxMin_sqrt_int64_int16+0xc0>)
  401d88:	461a      	mov	r2, r3
  401d8a:	4623      	mov	r3, r4
  401d8c:	47a8      	blx	r5
  401d8e:	4603      	mov	r3, r0
  401d90:	460c      	mov	r4, r1
  401d92:	4619      	mov	r1, r3
  401d94:	4622      	mov	r2, r4
  401d96:	4b26      	ldr	r3, [pc, #152]	; (401e30 <set_AvgMaxMin_sqrt_int64_int16+0xc4>)
  401d98:	4608      	mov	r0, r1
  401d9a:	4611      	mov	r1, r2
  401d9c:	4798      	blx	r3
  401d9e:	4603      	mov	r3, r0
  401da0:	460c      	mov	r4, r1
  401da2:	4618      	mov	r0, r3
  401da4:	4621      	mov	r1, r4
  401da6:	4b23      	ldr	r3, [pc, #140]	; (401e34 <set_AvgMaxMin_sqrt_int64_int16+0xc8>)
  401da8:	4798      	blx	r3
  401daa:	460a      	mov	r2, r1
  401dac:	4601      	mov	r1, r0
  401dae:	4b22      	ldr	r3, [pc, #136]	; (401e38 <set_AvgMaxMin_sqrt_int64_int16+0xcc>)
  401db0:	4608      	mov	r0, r1
  401db2:	4611      	mov	r1, r2
  401db4:	4798      	blx	r3
  401db6:	4603      	mov	r3, r0
  401db8:	b21a      	sxth	r2, r3
  401dba:	68bb      	ldr	r3, [r7, #8]
  401dbc:	801a      	strh	r2, [r3, #0]
    out[trend_max] = sqrt(in[trend_max]);
  401dbe:	68bb      	ldr	r3, [r7, #8]
  401dc0:	1c9d      	adds	r5, r3, #2
  401dc2:	68fb      	ldr	r3, [r7, #12]
  401dc4:	3308      	adds	r3, #8
  401dc6:	e9d3 3400 	ldrd	r3, r4, [r3]
  401dca:	4a19      	ldr	r2, [pc, #100]	; (401e30 <set_AvgMaxMin_sqrt_int64_int16+0xc4>)
  401dcc:	4618      	mov	r0, r3
  401dce:	4621      	mov	r1, r4
  401dd0:	4790      	blx	r2
  401dd2:	4603      	mov	r3, r0
  401dd4:	460c      	mov	r4, r1
  401dd6:	4618      	mov	r0, r3
  401dd8:	4621      	mov	r1, r4
  401dda:	4b16      	ldr	r3, [pc, #88]	; (401e34 <set_AvgMaxMin_sqrt_int64_int16+0xc8>)
  401ddc:	4798      	blx	r3
  401dde:	460a      	mov	r2, r1
  401de0:	4601      	mov	r1, r0
  401de2:	4b15      	ldr	r3, [pc, #84]	; (401e38 <set_AvgMaxMin_sqrt_int64_int16+0xcc>)
  401de4:	4608      	mov	r0, r1
  401de6:	4611      	mov	r1, r2
  401de8:	4798      	blx	r3
  401dea:	4603      	mov	r3, r0
  401dec:	b21b      	sxth	r3, r3
  401dee:	802b      	strh	r3, [r5, #0]
    out[trend_min] = sqrt(in[trend_min]);
  401df0:	68bb      	ldr	r3, [r7, #8]
  401df2:	1d1d      	adds	r5, r3, #4
  401df4:	68fb      	ldr	r3, [r7, #12]
  401df6:	3310      	adds	r3, #16
  401df8:	e9d3 3400 	ldrd	r3, r4, [r3]
  401dfc:	4a0c      	ldr	r2, [pc, #48]	; (401e30 <set_AvgMaxMin_sqrt_int64_int16+0xc4>)
  401dfe:	4618      	mov	r0, r3
  401e00:	4621      	mov	r1, r4
  401e02:	4790      	blx	r2
  401e04:	4603      	mov	r3, r0
  401e06:	460c      	mov	r4, r1
  401e08:	4618      	mov	r0, r3
  401e0a:	4621      	mov	r1, r4
  401e0c:	4b09      	ldr	r3, [pc, #36]	; (401e34 <set_AvgMaxMin_sqrt_int64_int16+0xc8>)
  401e0e:	4798      	blx	r3
  401e10:	460a      	mov	r2, r1
  401e12:	4601      	mov	r1, r0
  401e14:	4b08      	ldr	r3, [pc, #32]	; (401e38 <set_AvgMaxMin_sqrt_int64_int16+0xcc>)
  401e16:	4608      	mov	r0, r1
  401e18:	4611      	mov	r1, r2
  401e1a:	4798      	blx	r3
  401e1c:	4603      	mov	r3, r0
  401e1e:	b21b      	sxth	r3, r3
  401e20:	802b      	strh	r3, [r5, #0]
}
  401e22:	bf00      	nop
  401e24:	3710      	adds	r7, #16
  401e26:	46bd      	mov	sp, r7
  401e28:	bdb0      	pop	{r4, r5, r7, pc}
  401e2a:	bf00      	nop
  401e2c:	00408979 	.word	0x00408979
  401e30:	0040836d 	.word	0x0040836d
  401e34:	00407e21 	.word	0x00407e21
  401e38:	00408929 	.word	0x00408929

00401e3c <trend_reset_accum>:

/**************************** GLOBAL FUNCTIONS *******************************/

/** @brief Reset accumulator */
void trend_reset_accum(trend_accum_t *accum)
{
  401e3c:	b580      	push	{r7, lr}
  401e3e:	b084      	sub	sp, #16
  401e40:	af00      	add	r7, sp, #0
  401e42:	6078      	str	r0, [r7, #4]
    // accum, flags, params
    accum->accum = 0;
  401e44:	687b      	ldr	r3, [r7, #4]
  401e46:	2200      	movs	r2, #0
  401e48:	815a      	strh	r2, [r3, #10]
    accum->flags = 0;
  401e4a:	687b      	ldr	r3, [r7, #4]
  401e4c:	2200      	movs	r2, #0
  401e4e:	701a      	strb	r2, [r3, #0]
    accum->params.amp = 0;
  401e50:	687b      	ldr	r3, [r7, #4]
  401e52:	2200      	movs	r2, #0
  401e54:	809a      	strh	r2, [r3, #4]
    accum->params.fL = 0;
  401e56:	687b      	ldr	r3, [r7, #4]
  401e58:	2200      	movs	r2, #0
  401e5a:	80da      	strh	r2, [r3, #6]

    // channels
    uint16_t ch_num;
    uint16_t h_num;

    for (ch_num = 0; ch_num < SETTINGS_CH_TOTAL_NUM; ch_num++)
  401e5c:	2300      	movs	r3, #0
  401e5e:	81fb      	strh	r3, [r7, #14]
  401e60:	e046      	b.n	401ef0 <trend_reset_accum+0xb4>
    {
        // RMS
        // NOTE: RMS accumulator is stored in int64_t so set_min can't be used
        set_initial_int64(accum->ch[ch_num].rms2);
  401e62:	89fa      	ldrh	r2, [r7, #14]
  401e64:	4613      	mov	r3, r2
  401e66:	00db      	lsls	r3, r3, #3
  401e68:	4413      	add	r3, r2
  401e6a:	015b      	lsls	r3, r3, #5
  401e6c:	3310      	adds	r3, #16
  401e6e:	687a      	ldr	r2, [r7, #4]
  401e70:	4413      	add	r3, r2
  401e72:	4618      	mov	r0, r3
  401e74:	4b22      	ldr	r3, [pc, #136]	; (401f00 <trend_reset_accum+0xc4>)
  401e76:	4798      	blx	r3

        // Harmonics
        for (h_num = 0; h_num < (SETTINGS_NDFT_MAX + 1); h_num++)
  401e78:	2300      	movs	r3, #0
  401e7a:	81bb      	strh	r3, [r7, #12]
  401e7c:	e027      	b.n	401ece <trend_reset_accum+0x92>
        {
            set_initial_int64(accum->ch[ch_num].harmonic[h_num].real);
  401e7e:	89f9      	ldrh	r1, [r7, #14]
  401e80:	89bb      	ldrh	r3, [r7, #12]
  401e82:	3301      	adds	r3, #1
  401e84:	461a      	mov	r2, r3
  401e86:	0052      	lsls	r2, r2, #1
  401e88:	441a      	add	r2, r3
  401e8a:	0113      	lsls	r3, r2, #4
  401e8c:	461a      	mov	r2, r3
  401e8e:	460b      	mov	r3, r1
  401e90:	00db      	lsls	r3, r3, #3
  401e92:	440b      	add	r3, r1
  401e94:	015b      	lsls	r3, r3, #5
  401e96:	4413      	add	r3, r2
  401e98:	3310      	adds	r3, #16
  401e9a:	687a      	ldr	r2, [r7, #4]
  401e9c:	4413      	add	r3, r2
  401e9e:	4618      	mov	r0, r3
  401ea0:	4b17      	ldr	r3, [pc, #92]	; (401f00 <trend_reset_accum+0xc4>)
  401ea2:	4798      	blx	r3
            set_initial_int64(accum->ch[ch_num].harmonic[h_num].imag);
  401ea4:	89f9      	ldrh	r1, [r7, #14]
  401ea6:	89bb      	ldrh	r3, [r7, #12]
  401ea8:	461a      	mov	r2, r3
  401eaa:	0052      	lsls	r2, r2, #1
  401eac:	441a      	add	r2, r3
  401eae:	0113      	lsls	r3, r2, #4
  401eb0:	461a      	mov	r2, r3
  401eb2:	460b      	mov	r3, r1
  401eb4:	00db      	lsls	r3, r3, #3
  401eb6:	440b      	add	r3, r1
  401eb8:	015b      	lsls	r3, r3, #5
  401eba:	4413      	add	r3, r2
  401ebc:	3358      	adds	r3, #88	; 0x58
  401ebe:	687a      	ldr	r2, [r7, #4]
  401ec0:	4413      	add	r3, r2
  401ec2:	4618      	mov	r0, r3
  401ec4:	4b0e      	ldr	r3, [pc, #56]	; (401f00 <trend_reset_accum+0xc4>)
  401ec6:	4798      	blx	r3
        for (h_num = 0; h_num < (SETTINGS_NDFT_MAX + 1); h_num++)
  401ec8:	89bb      	ldrh	r3, [r7, #12]
  401eca:	3301      	adds	r3, #1
  401ecc:	81bb      	strh	r3, [r7, #12]
  401ece:	89bb      	ldrh	r3, [r7, #12]
  401ed0:	2b04      	cmp	r3, #4
  401ed2:	d9d4      	bls.n	401e7e <trend_reset_accum+0x42>
        }

        // TWD
        set_initial_int64(accum->ch[ch_num].twd2);
  401ed4:	89fa      	ldrh	r2, [r7, #14]
  401ed6:	4613      	mov	r3, r2
  401ed8:	00db      	lsls	r3, r3, #3
  401eda:	4413      	add	r3, r2
  401edc:	015b      	lsls	r3, r3, #5
  401ede:	3328      	adds	r3, #40	; 0x28
  401ee0:	687a      	ldr	r2, [r7, #4]
  401ee2:	4413      	add	r3, r2
  401ee4:	4618      	mov	r0, r3
  401ee6:	4b06      	ldr	r3, [pc, #24]	; (401f00 <trend_reset_accum+0xc4>)
  401ee8:	4798      	blx	r3
    for (ch_num = 0; ch_num < SETTINGS_CH_TOTAL_NUM; ch_num++)
  401eea:	89fb      	ldrh	r3, [r7, #14]
  401eec:	3301      	adds	r3, #1
  401eee:	81fb      	strh	r3, [r7, #14]
  401ef0:	89fb      	ldrh	r3, [r7, #14]
  401ef2:	2b03      	cmp	r3, #3
  401ef4:	d9b5      	bls.n	401e62 <trend_reset_accum+0x26>
    }
}
  401ef6:	bf00      	nop
  401ef8:	3710      	adds	r7, #16
  401efa:	46bd      	mov	sp, r7
  401efc:	bd80      	pop	{r7, pc}
  401efe:	bf00      	nop
  401f00:	00401b8d 	.word	0x00401b8d

00401f04 <trend_reset_result>:

/** @brief reset result */
void trend_reset_result(trend_result_t *trend)
{
  401f04:	b580      	push	{r7, lr}
  401f06:	b082      	sub	sp, #8
  401f08:	af00      	add	r7, sp, #0
  401f0a:	6078      	str	r0, [r7, #4]
    memset((void *)trend, 0, sizeof(trend_result_t));
  401f0c:	f44f 720f 	mov.w	r2, #572	; 0x23c
  401f10:	2100      	movs	r1, #0
  401f12:	6878      	ldr	r0, [r7, #4]
  401f14:	4b02      	ldr	r3, [pc, #8]	; (401f20 <trend_reset_result+0x1c>)
  401f16:	4798      	blx	r3
}
  401f18:	bf00      	nop
  401f1a:	3708      	adds	r7, #8
  401f1c:	46bd      	mov	sp, r7
  401f1e:	bd80      	pop	{r7, pc}
  401f20:	00408eb9 	.word	0x00408eb9

00401f24 <trend_update_accum>:

/** @brief Update trend accumulators. */
void trend_update_accum(index_result_t *data, trend_accum_t *accum)
{
  401f24:	b580      	push	{r7, lr}
  401f26:	b084      	sub	sp, #16
  401f28:	af00      	add	r7, sp, #0
  401f2a:	6078      	str	r0, [r7, #4]
  401f2c:	6039      	str	r1, [r7, #0]
    // increase accumulator
    accum->accum++;
  401f2e:	683b      	ldr	r3, [r7, #0]
  401f30:	895b      	ldrh	r3, [r3, #10]
  401f32:	3301      	adds	r3, #1
  401f34:	b29a      	uxth	r2, r3
  401f36:	683b      	ldr	r3, [r7, #0]
  401f38:	815a      	strh	r2, [r3, #10]

    // flags
    if (accum->accum != 1)
  401f3a:	683b      	ldr	r3, [r7, #0]
  401f3c:	895b      	ldrh	r3, [r3, #10]
  401f3e:	2b01      	cmp	r3, #1
  401f40:	d006      	beq.n	401f50 <trend_update_accum+0x2c>
    {
        control_check_param_change(&accum->flags, &accum->params);
  401f42:	683a      	ldr	r2, [r7, #0]
  401f44:	683b      	ldr	r3, [r7, #0]
  401f46:	3302      	adds	r3, #2
  401f48:	4619      	mov	r1, r3
  401f4a:	4610      	mov	r0, r2
  401f4c:	4b57      	ldr	r3, [pc, #348]	; (4020ac <trend_update_accum+0x188>)
  401f4e:	4798      	blx	r3
    }
    SET_FLAG(accum->flags, data->flags);
  401f50:	683b      	ldr	r3, [r7, #0]
  401f52:	781a      	ldrb	r2, [r3, #0]
  401f54:	687b      	ldr	r3, [r7, #4]
  401f56:	781b      	ldrb	r3, [r3, #0]
  401f58:	4313      	orrs	r3, r2
  401f5a:	b2da      	uxtb	r2, r3
  401f5c:	683b      	ldr	r3, [r7, #0]
  401f5e:	701a      	strb	r2, [r3, #0]

    // signal parameters
    copy_content((uint8_t *)&data->params, (uint8_t *)&accum->params, sizeof(signal_params_t));
  401f60:	687b      	ldr	r3, [r7, #4]
  401f62:	1c98      	adds	r0, r3, #2
  401f64:	683b      	ldr	r3, [r7, #0]
  401f66:	3302      	adds	r3, #2
  401f68:	2208      	movs	r2, #8
  401f6a:	4619      	mov	r1, r3
  401f6c:	4b50      	ldr	r3, [pc, #320]	; (4020b0 <trend_update_accum+0x18c>)
  401f6e:	4798      	blx	r3

    // update RMS and harmonics accumulator
    uint16_t ch_num;
    uint16_t h_num;

    for (ch_num = 0; ch_num < SETTINGS_CH_TOTAL_NUM; ch_num++)
  401f70:	2300      	movs	r3, #0
  401f72:	81fb      	strh	r3, [r7, #14]
  401f74:	e092      	b.n	40209c <trend_update_accum+0x178>
    {
        int32_t temp_square;

        // RMS
        temp_square = SQUARE((int32_t)data->ch[ch_num].rms);
  401f76:	89fa      	ldrh	r2, [r7, #14]
  401f78:	6879      	ldr	r1, [r7, #4]
  401f7a:	4613      	mov	r3, r2
  401f7c:	005b      	lsls	r3, r3, #1
  401f7e:	4413      	add	r3, r2
  401f80:	011b      	lsls	r3, r3, #4
  401f82:	440b      	add	r3, r1
  401f84:	330c      	adds	r3, #12
  401f86:	6819      	ldr	r1, [r3, #0]
  401f88:	89fa      	ldrh	r2, [r7, #14]
  401f8a:	6878      	ldr	r0, [r7, #4]
  401f8c:	4613      	mov	r3, r2
  401f8e:	005b      	lsls	r3, r3, #1
  401f90:	4413      	add	r3, r2
  401f92:	011b      	lsls	r3, r3, #4
  401f94:	4403      	add	r3, r0
  401f96:	330c      	adds	r3, #12
  401f98:	681b      	ldr	r3, [r3, #0]
  401f9a:	fb03 f301 	mul.w	r3, r3, r1
  401f9e:	60bb      	str	r3, [r7, #8]
        update_AvgMaxMin_int32_int64(&temp_square, &accum->ch[ch_num].rms2[0]);
  401fa0:	89fa      	ldrh	r2, [r7, #14]
  401fa2:	4613      	mov	r3, r2
  401fa4:	00db      	lsls	r3, r3, #3
  401fa6:	4413      	add	r3, r2
  401fa8:	015b      	lsls	r3, r3, #5
  401faa:	3310      	adds	r3, #16
  401fac:	683a      	ldr	r2, [r7, #0]
  401fae:	441a      	add	r2, r3
  401fb0:	f107 0308 	add.w	r3, r7, #8
  401fb4:	4611      	mov	r1, r2
  401fb6:	4618      	mov	r0, r3
  401fb8:	4b3e      	ldr	r3, [pc, #248]	; (4020b4 <trend_update_accum+0x190>)
  401fba:	4798      	blx	r3

        // Harmonics
        for (h_num = 0; h_num < (SETTINGS_NDFT_MAX + 1); h_num++)
  401fbc:	2300      	movs	r3, #0
  401fbe:	81bb      	strh	r3, [r7, #12]
  401fc0:	e040      	b.n	402044 <trend_update_accum+0x120>
        {
            update_AvgMaxMin_int32_int64(&data->ch[ch_num].harmonic[h_num].real, &accum->ch[ch_num].harmonic[h_num].real[0]);
  401fc2:	89fa      	ldrh	r2, [r7, #14]
  401fc4:	89b9      	ldrh	r1, [r7, #12]
  401fc6:	4613      	mov	r3, r2
  401fc8:	005b      	lsls	r3, r3, #1
  401fca:	4413      	add	r3, r2
  401fcc:	005b      	lsls	r3, r3, #1
  401fce:	440b      	add	r3, r1
  401fd0:	3302      	adds	r3, #2
  401fd2:	00db      	lsls	r3, r3, #3
  401fd4:	687a      	ldr	r2, [r7, #4]
  401fd6:	4413      	add	r3, r2
  401fd8:	1d18      	adds	r0, r3, #4
  401fda:	89f9      	ldrh	r1, [r7, #14]
  401fdc:	89bb      	ldrh	r3, [r7, #12]
  401fde:	3301      	adds	r3, #1
  401fe0:	461a      	mov	r2, r3
  401fe2:	0052      	lsls	r2, r2, #1
  401fe4:	441a      	add	r2, r3
  401fe6:	0113      	lsls	r3, r2, #4
  401fe8:	461a      	mov	r2, r3
  401fea:	460b      	mov	r3, r1
  401fec:	00db      	lsls	r3, r3, #3
  401fee:	440b      	add	r3, r1
  401ff0:	015b      	lsls	r3, r3, #5
  401ff2:	4413      	add	r3, r2
  401ff4:	3310      	adds	r3, #16
  401ff6:	683a      	ldr	r2, [r7, #0]
  401ff8:	4413      	add	r3, r2
  401ffa:	4619      	mov	r1, r3
  401ffc:	4b2d      	ldr	r3, [pc, #180]	; (4020b4 <trend_update_accum+0x190>)
  401ffe:	4798      	blx	r3
            update_AvgMaxMin_int32_int64(&data->ch[ch_num].harmonic[h_num].imag, &accum->ch[ch_num].harmonic[h_num].imag[0]);
  402000:	89fa      	ldrh	r2, [r7, #14]
  402002:	89b9      	ldrh	r1, [r7, #12]
  402004:	4613      	mov	r3, r2
  402006:	005b      	lsls	r3, r3, #1
  402008:	4413      	add	r3, r2
  40200a:	005b      	lsls	r3, r3, #1
  40200c:	440b      	add	r3, r1
  40200e:	3302      	adds	r3, #2
  402010:	00db      	lsls	r3, r3, #3
  402012:	687a      	ldr	r2, [r7, #4]
  402014:	4413      	add	r3, r2
  402016:	f103 0008 	add.w	r0, r3, #8
  40201a:	89f9      	ldrh	r1, [r7, #14]
  40201c:	89bb      	ldrh	r3, [r7, #12]
  40201e:	461a      	mov	r2, r3
  402020:	0052      	lsls	r2, r2, #1
  402022:	441a      	add	r2, r3
  402024:	0113      	lsls	r3, r2, #4
  402026:	461a      	mov	r2, r3
  402028:	460b      	mov	r3, r1
  40202a:	00db      	lsls	r3, r3, #3
  40202c:	440b      	add	r3, r1
  40202e:	015b      	lsls	r3, r3, #5
  402030:	4413      	add	r3, r2
  402032:	3358      	adds	r3, #88	; 0x58
  402034:	683a      	ldr	r2, [r7, #0]
  402036:	4413      	add	r3, r2
  402038:	4619      	mov	r1, r3
  40203a:	4b1e      	ldr	r3, [pc, #120]	; (4020b4 <trend_update_accum+0x190>)
  40203c:	4798      	blx	r3
        for (h_num = 0; h_num < (SETTINGS_NDFT_MAX + 1); h_num++)
  40203e:	89bb      	ldrh	r3, [r7, #12]
  402040:	3301      	adds	r3, #1
  402042:	81bb      	strh	r3, [r7, #12]
  402044:	89bb      	ldrh	r3, [r7, #12]
  402046:	2b04      	cmp	r3, #4
  402048:	d9bb      	bls.n	401fc2 <trend_update_accum+0x9e>
        }

        // Total Waveform Distortion (TWD)
        temp_square = SQUARE((int32_t)data->ch[ch_num].twd);
  40204a:	89fa      	ldrh	r2, [r7, #14]
  40204c:	6879      	ldr	r1, [r7, #4]
  40204e:	4613      	mov	r3, r2
  402050:	005b      	lsls	r3, r3, #1
  402052:	4413      	add	r3, r2
  402054:	011b      	lsls	r3, r3, #4
  402056:	440b      	add	r3, r1
  402058:	3310      	adds	r3, #16
  40205a:	f9b3 3000 	ldrsh.w	r3, [r3]
  40205e:	4618      	mov	r0, r3
  402060:	89fa      	ldrh	r2, [r7, #14]
  402062:	6879      	ldr	r1, [r7, #4]
  402064:	4613      	mov	r3, r2
  402066:	005b      	lsls	r3, r3, #1
  402068:	4413      	add	r3, r2
  40206a:	011b      	lsls	r3, r3, #4
  40206c:	440b      	add	r3, r1
  40206e:	3310      	adds	r3, #16
  402070:	f9b3 3000 	ldrsh.w	r3, [r3]
  402074:	fb03 f300 	mul.w	r3, r3, r0
  402078:	60bb      	str	r3, [r7, #8]
        update_AvgMaxMin_int32_int64(&temp_square, &accum->ch[ch_num].twd2[0]);
  40207a:	89fa      	ldrh	r2, [r7, #14]
  40207c:	4613      	mov	r3, r2
  40207e:	00db      	lsls	r3, r3, #3
  402080:	4413      	add	r3, r2
  402082:	015b      	lsls	r3, r3, #5
  402084:	3328      	adds	r3, #40	; 0x28
  402086:	683a      	ldr	r2, [r7, #0]
  402088:	441a      	add	r2, r3
  40208a:	f107 0308 	add.w	r3, r7, #8
  40208e:	4611      	mov	r1, r2
  402090:	4618      	mov	r0, r3
  402092:	4b08      	ldr	r3, [pc, #32]	; (4020b4 <trend_update_accum+0x190>)
  402094:	4798      	blx	r3
    for (ch_num = 0; ch_num < SETTINGS_CH_TOTAL_NUM; ch_num++)
  402096:	89fb      	ldrh	r3, [r7, #14]
  402098:	3301      	adds	r3, #1
  40209a:	81fb      	strh	r3, [r7, #14]
  40209c:	89fb      	ldrh	r3, [r7, #14]
  40209e:	2b03      	cmp	r3, #3
  4020a0:	f67f af69 	bls.w	401f76 <trend_update_accum+0x52>
    }
}
  4020a4:	bf00      	nop
  4020a6:	3710      	adds	r7, #16
  4020a8:	46bd      	mov	sp, r7
  4020aa:	bd80      	pop	{r7, pc}
  4020ac:	004007cd 	.word	0x004007cd
  4020b0:	00406b39 	.word	0x00406b39
  4020b4:	00401bd1 	.word	0x00401bd1

004020b8 <trend_update_result>:

/** @brief Update trend result. */
void trend_update_result(trend_accum_t *accum, trend_result_t *result)
{
  4020b8:	b580      	push	{r7, lr}
  4020ba:	b084      	sub	sp, #16
  4020bc:	af00      	add	r7, sp, #0
  4020be:	6078      	str	r0, [r7, #4]
  4020c0:	6039      	str	r1, [r7, #0]
    // update flags
    result->flags = accum->flags;
  4020c2:	687b      	ldr	r3, [r7, #4]
  4020c4:	781a      	ldrb	r2, [r3, #0]
  4020c6:	683b      	ldr	r3, [r7, #0]
  4020c8:	701a      	strb	r2, [r3, #0]

    // signal parameters
    copy_content((uint8_t *)&accum->params, (uint8_t *)&result->params, sizeof(signal_params_t));
  4020ca:	687b      	ldr	r3, [r7, #4]
  4020cc:	1c98      	adds	r0, r3, #2
  4020ce:	683b      	ldr	r3, [r7, #0]
  4020d0:	3302      	adds	r3, #2
  4020d2:	2208      	movs	r2, #8
  4020d4:	4619      	mov	r1, r3
  4020d6:	4b46      	ldr	r3, [pc, #280]	; (4021f0 <trend_update_result+0x138>)
  4020d8:	4798      	blx	r3
    // update RMS and harmonics accumulator
    {
        uint16_t ch_num;
        uint16_t h_num;

        for (ch_num = 0; ch_num < SETTINGS_CH_TOTAL_NUM; ch_num++)
  4020da:	2300      	movs	r3, #0
  4020dc:	81fb      	strh	r3, [r7, #14]
  4020de:	e07e      	b.n	4021de <trend_update_result+0x126>
        {
            // RMS
            set_AvgMaxMin_sqrt_int64_int32(&accum->ch[ch_num].rms2[0], &result->ch[ch_num].rms[0], accum->accum);
  4020e0:	89fa      	ldrh	r2, [r7, #14]
  4020e2:	4613      	mov	r3, r2
  4020e4:	00db      	lsls	r3, r3, #3
  4020e6:	4413      	add	r3, r2
  4020e8:	015b      	lsls	r3, r3, #5
  4020ea:	3310      	adds	r3, #16
  4020ec:	687a      	ldr	r2, [r7, #4]
  4020ee:	18d0      	adds	r0, r2, r3
  4020f0:	89fb      	ldrh	r3, [r7, #14]
  4020f2:	228c      	movs	r2, #140	; 0x8c
  4020f4:	fb02 f303 	mul.w	r3, r2, r3
  4020f8:	3308      	adds	r3, #8
  4020fa:	683a      	ldr	r2, [r7, #0]
  4020fc:	4413      	add	r3, r2
  4020fe:	1d19      	adds	r1, r3, #4
  402100:	687b      	ldr	r3, [r7, #4]
  402102:	895b      	ldrh	r3, [r3, #10]
  402104:	461a      	mov	r2, r3
  402106:	4b3b      	ldr	r3, [pc, #236]	; (4021f4 <trend_update_result+0x13c>)
  402108:	4798      	blx	r3

            // Harmonics
            for (h_num = 0; h_num < (SETTINGS_NDFT_MAX + 1); h_num++)
  40210a:	2300      	movs	r3, #0
  40210c:	81bb      	strh	r3, [r7, #12]
  40210e:	e04a      	b.n	4021a6 <trend_update_result+0xee>
            {
                set_AvgMaxMin_int64_int32(&accum->ch[ch_num].harmonic[h_num].real[0], &result->ch[ch_num].harmonic[h_num].real[0], accum->accum);
  402110:	89f9      	ldrh	r1, [r7, #14]
  402112:	89bb      	ldrh	r3, [r7, #12]
  402114:	3301      	adds	r3, #1
  402116:	461a      	mov	r2, r3
  402118:	0052      	lsls	r2, r2, #1
  40211a:	441a      	add	r2, r3
  40211c:	0113      	lsls	r3, r2, #4
  40211e:	461a      	mov	r2, r3
  402120:	460b      	mov	r3, r1
  402122:	00db      	lsls	r3, r3, #3
  402124:	440b      	add	r3, r1
  402126:	015b      	lsls	r3, r3, #5
  402128:	4413      	add	r3, r2
  40212a:	3310      	adds	r3, #16
  40212c:	687a      	ldr	r2, [r7, #4]
  40212e:	18d0      	adds	r0, r2, r3
  402130:	89f9      	ldrh	r1, [r7, #14]
  402132:	89ba      	ldrh	r2, [r7, #12]
  402134:	4613      	mov	r3, r2
  402136:	005b      	lsls	r3, r3, #1
  402138:	4413      	add	r3, r2
  40213a:	00db      	lsls	r3, r3, #3
  40213c:	228c      	movs	r2, #140	; 0x8c
  40213e:	fb02 f201 	mul.w	r2, r2, r1
  402142:	4413      	add	r3, r2
  402144:	3318      	adds	r3, #24
  402146:	683a      	ldr	r2, [r7, #0]
  402148:	4413      	add	r3, r2
  40214a:	f103 0108 	add.w	r1, r3, #8
  40214e:	687b      	ldr	r3, [r7, #4]
  402150:	895b      	ldrh	r3, [r3, #10]
  402152:	461a      	mov	r2, r3
  402154:	4b28      	ldr	r3, [pc, #160]	; (4021f8 <trend_update_result+0x140>)
  402156:	4798      	blx	r3
                set_AvgMaxMin_int64_int32(&accum->ch[ch_num].harmonic[h_num].imag[0], &result->ch[ch_num].harmonic[h_num].imag[0], accum->accum);
  402158:	89f9      	ldrh	r1, [r7, #14]
  40215a:	89bb      	ldrh	r3, [r7, #12]
  40215c:	461a      	mov	r2, r3
  40215e:	0052      	lsls	r2, r2, #1
  402160:	441a      	add	r2, r3
  402162:	0113      	lsls	r3, r2, #4
  402164:	461a      	mov	r2, r3
  402166:	460b      	mov	r3, r1
  402168:	00db      	lsls	r3, r3, #3
  40216a:	440b      	add	r3, r1
  40216c:	015b      	lsls	r3, r3, #5
  40216e:	4413      	add	r3, r2
  402170:	3358      	adds	r3, #88	; 0x58
  402172:	687a      	ldr	r2, [r7, #4]
  402174:	18d0      	adds	r0, r2, r3
  402176:	89f9      	ldrh	r1, [r7, #14]
  402178:	89bb      	ldrh	r3, [r7, #12]
  40217a:	1c5a      	adds	r2, r3, #1
  40217c:	4613      	mov	r3, r2
  40217e:	005b      	lsls	r3, r3, #1
  402180:	4413      	add	r3, r2
  402182:	00db      	lsls	r3, r3, #3
  402184:	228c      	movs	r2, #140	; 0x8c
  402186:	fb02 f201 	mul.w	r2, r2, r1
  40218a:	4413      	add	r3, r2
  40218c:	3308      	adds	r3, #8
  40218e:	683a      	ldr	r2, [r7, #0]
  402190:	4413      	add	r3, r2
  402192:	f103 010c 	add.w	r1, r3, #12
  402196:	687b      	ldr	r3, [r7, #4]
  402198:	895b      	ldrh	r3, [r3, #10]
  40219a:	461a      	mov	r2, r3
  40219c:	4b16      	ldr	r3, [pc, #88]	; (4021f8 <trend_update_result+0x140>)
  40219e:	4798      	blx	r3
            for (h_num = 0; h_num < (SETTINGS_NDFT_MAX + 1); h_num++)
  4021a0:	89bb      	ldrh	r3, [r7, #12]
  4021a2:	3301      	adds	r3, #1
  4021a4:	81bb      	strh	r3, [r7, #12]
  4021a6:	89bb      	ldrh	r3, [r7, #12]
  4021a8:	2b04      	cmp	r3, #4
  4021aa:	d9b1      	bls.n	402110 <trend_update_result+0x58>
            }

            // Total Waveform Distortion (TWD)
            set_AvgMaxMin_sqrt_int64_int16(&accum->ch[ch_num].twd2[0], &result->ch[ch_num].twd[0], accum->accum);
  4021ac:	89fa      	ldrh	r2, [r7, #14]
  4021ae:	4613      	mov	r3, r2
  4021b0:	00db      	lsls	r3, r3, #3
  4021b2:	4413      	add	r3, r2
  4021b4:	015b      	lsls	r3, r3, #5
  4021b6:	3328      	adds	r3, #40	; 0x28
  4021b8:	687a      	ldr	r2, [r7, #4]
  4021ba:	18d0      	adds	r0, r2, r3
  4021bc:	89fb      	ldrh	r3, [r7, #14]
  4021be:	228c      	movs	r2, #140	; 0x8c
  4021c0:	fb02 f303 	mul.w	r3, r2, r3
  4021c4:	3310      	adds	r3, #16
  4021c6:	683a      	ldr	r2, [r7, #0]
  4021c8:	4413      	add	r3, r2
  4021ca:	f103 0108 	add.w	r1, r3, #8
  4021ce:	687b      	ldr	r3, [r7, #4]
  4021d0:	895b      	ldrh	r3, [r3, #10]
  4021d2:	461a      	mov	r2, r3
  4021d4:	4b09      	ldr	r3, [pc, #36]	; (4021fc <trend_update_result+0x144>)
  4021d6:	4798      	blx	r3
        for (ch_num = 0; ch_num < SETTINGS_CH_TOTAL_NUM; ch_num++)
  4021d8:	89fb      	ldrh	r3, [r7, #14]
  4021da:	3301      	adds	r3, #1
  4021dc:	81fb      	strh	r3, [r7, #14]
  4021de:	89fb      	ldrh	r3, [r7, #14]
  4021e0:	2b03      	cmp	r3, #3
  4021e2:	f67f af7d 	bls.w	4020e0 <trend_update_result+0x28>
        }
    }
}
  4021e6:	bf00      	nop
  4021e8:	3710      	adds	r7, #16
  4021ea:	46bd      	mov	sp, r7
  4021ec:	bd80      	pop	{r7, pc}
  4021ee:	bf00      	nop
  4021f0:	00406b39 	.word	0x00406b39
  4021f4:	00401ca1 	.word	0x00401ca1
  4021f8:	00401c49 	.word	0x00401c49
  4021fc:	00401d6d 	.word	0x00401d6d

00402200 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  402200:	b480      	push	{r7}
  402202:	b083      	sub	sp, #12
  402204:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  402206:	f3ef 8310 	mrs	r3, PRIMASK
  40220a:	607b      	str	r3, [r7, #4]
  return(result);
  40220c:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40220e:	2b00      	cmp	r3, #0
  402210:	bf0c      	ite	eq
  402212:	2301      	moveq	r3, #1
  402214:	2300      	movne	r3, #0
  402216:	b2db      	uxtb	r3, r3
  402218:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  40221a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  40221c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402220:	4b04      	ldr	r3, [pc, #16]	; (402234 <cpu_irq_save+0x34>)
  402222:	2200      	movs	r2, #0
  402224:	701a      	strb	r2, [r3, #0]
	return flags;
  402226:	683b      	ldr	r3, [r7, #0]
}
  402228:	4618      	mov	r0, r3
  40222a:	370c      	adds	r7, #12
  40222c:	46bd      	mov	sp, r7
  40222e:	bc80      	pop	{r7}
  402230:	4770      	bx	lr
  402232:	bf00      	nop
  402234:	200000fc 	.word	0x200000fc

00402238 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  402238:	b480      	push	{r7}
  40223a:	b083      	sub	sp, #12
  40223c:	af00      	add	r7, sp, #0
  40223e:	6078      	str	r0, [r7, #4]
	return (flags);
  402240:	687b      	ldr	r3, [r7, #4]
  402242:	2b00      	cmp	r3, #0
  402244:	bf14      	ite	ne
  402246:	2301      	movne	r3, #1
  402248:	2300      	moveq	r3, #0
  40224a:	b2db      	uxtb	r3, r3
}
  40224c:	4618      	mov	r0, r3
  40224e:	370c      	adds	r7, #12
  402250:	46bd      	mov	sp, r7
  402252:	bc80      	pop	{r7}
  402254:	4770      	bx	lr
	...

00402258 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  402258:	b580      	push	{r7, lr}
  40225a:	b082      	sub	sp, #8
  40225c:	af00      	add	r7, sp, #0
  40225e:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  402260:	6878      	ldr	r0, [r7, #4]
  402262:	4b07      	ldr	r3, [pc, #28]	; (402280 <cpu_irq_restore+0x28>)
  402264:	4798      	blx	r3
  402266:	4603      	mov	r3, r0
  402268:	2b00      	cmp	r3, #0
  40226a:	d005      	beq.n	402278 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  40226c:	4b05      	ldr	r3, [pc, #20]	; (402284 <cpu_irq_restore+0x2c>)
  40226e:	2201      	movs	r2, #1
  402270:	701a      	strb	r2, [r3, #0]
  402272:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402276:	b662      	cpsie	i
}
  402278:	bf00      	nop
  40227a:	3708      	adds	r7, #8
  40227c:	46bd      	mov	sp, r7
  40227e:	bd80      	pop	{r7, pc}
  402280:	00402239 	.word	0x00402239
  402284:	200000fc 	.word	0x200000fc

00402288 <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
  402288:	b580      	push	{r7, lr}
  40228a:	b082      	sub	sp, #8
  40228c:	af00      	add	r7, sp, #0
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  40228e:	2300      	movs	r3, #0
  402290:	71bb      	strb	r3, [r7, #6]
	udi_cdc_nb_comm_enabled = 0;
  402292:	4b49      	ldr	r3, [pc, #292]	; (4023b8 <udi_cdc_comm_enable+0x130>)
  402294:	2200      	movs	r2, #0
  402296:	701a      	strb	r2, [r3, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
  402298:	79bb      	ldrb	r3, [r7, #6]
  40229a:	4a48      	ldr	r2, [pc, #288]	; (4023bc <udi_cdc_comm_enable+0x134>)
  40229c:	2100      	movs	r1, #0
  40229e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	uid_cdc_state_msg[port].header.bmRequestType =
  4022a2:	79ba      	ldrb	r2, [r7, #6]
  4022a4:	4946      	ldr	r1, [pc, #280]	; (4023c0 <udi_cdc_comm_enable+0x138>)
  4022a6:	4613      	mov	r3, r2
  4022a8:	009b      	lsls	r3, r3, #2
  4022aa:	4413      	add	r3, r2
  4022ac:	005b      	lsls	r3, r3, #1
  4022ae:	440b      	add	r3, r1
  4022b0:	22a1      	movs	r2, #161	; 0xa1
  4022b2:	701a      	strb	r2, [r3, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
  4022b4:	79ba      	ldrb	r2, [r7, #6]
  4022b6:	4942      	ldr	r1, [pc, #264]	; (4023c0 <udi_cdc_comm_enable+0x138>)
  4022b8:	4613      	mov	r3, r2
  4022ba:	009b      	lsls	r3, r3, #2
  4022bc:	4413      	add	r3, r2
  4022be:	005b      	lsls	r3, r3, #1
  4022c0:	440b      	add	r3, r1
  4022c2:	3301      	adds	r3, #1
  4022c4:	2220      	movs	r2, #32
  4022c6:	701a      	strb	r2, [r3, #0]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
  4022c8:	79ba      	ldrb	r2, [r7, #6]
  4022ca:	493d      	ldr	r1, [pc, #244]	; (4023c0 <udi_cdc_comm_enable+0x138>)
  4022cc:	4613      	mov	r3, r2
  4022ce:	009b      	lsls	r3, r3, #2
  4022d0:	4413      	add	r3, r2
  4022d2:	005b      	lsls	r3, r3, #1
  4022d4:	440b      	add	r3, r1
  4022d6:	3302      	adds	r3, #2
  4022d8:	2200      	movs	r2, #0
  4022da:	801a      	strh	r2, [r3, #0]

	switch (port) {
  4022dc:	79bb      	ldrb	r3, [r7, #6]
  4022de:	2b00      	cmp	r3, #0
  4022e0:	d102      	bne.n	4022e8 <udi_cdc_comm_enable+0x60>
#define UDI_CDC_PORT_TO_IFACE_COMM(index, unused) \
	case index: \
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_IFACE_COMM, ~)
  4022e2:	2300      	movs	r3, #0
  4022e4:	71fb      	strb	r3, [r7, #7]
  4022e6:	e002      	b.n	4022ee <udi_cdc_comm_enable+0x66>
#undef UDI_CDC_PORT_TO_IFACE_COMM
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
  4022e8:	2300      	movs	r3, #0
  4022ea:	71fb      	strb	r3, [r7, #7]
		break;
  4022ec:	bf00      	nop
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
  4022ee:	79ba      	ldrb	r2, [r7, #6]
  4022f0:	79fb      	ldrb	r3, [r7, #7]
  4022f2:	b298      	uxth	r0, r3
  4022f4:	4932      	ldr	r1, [pc, #200]	; (4023c0 <udi_cdc_comm_enable+0x138>)
  4022f6:	4613      	mov	r3, r2
  4022f8:	009b      	lsls	r3, r3, #2
  4022fa:	4413      	add	r3, r2
  4022fc:	005b      	lsls	r3, r3, #1
  4022fe:	440b      	add	r3, r1
  402300:	3304      	adds	r3, #4
  402302:	4602      	mov	r2, r0
  402304:	801a      	strh	r2, [r3, #0]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
  402306:	79ba      	ldrb	r2, [r7, #6]
  402308:	492d      	ldr	r1, [pc, #180]	; (4023c0 <udi_cdc_comm_enable+0x138>)
  40230a:	4613      	mov	r3, r2
  40230c:	009b      	lsls	r3, r3, #2
  40230e:	4413      	add	r3, r2
  402310:	005b      	lsls	r3, r3, #1
  402312:	440b      	add	r3, r1
  402314:	3306      	adds	r3, #6
  402316:	2202      	movs	r2, #2
  402318:	801a      	strh	r2, [r3, #0]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
  40231a:	79ba      	ldrb	r2, [r7, #6]
  40231c:	4928      	ldr	r1, [pc, #160]	; (4023c0 <udi_cdc_comm_enable+0x138>)
  40231e:	4613      	mov	r3, r2
  402320:	009b      	lsls	r3, r3, #2
  402322:	4413      	add	r3, r2
  402324:	005b      	lsls	r3, r3, #1
  402326:	440b      	add	r3, r1
  402328:	3308      	adds	r3, #8
  40232a:	2200      	movs	r2, #0
  40232c:	801a      	strh	r2, [r3, #0]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
  40232e:	79ba      	ldrb	r2, [r7, #6]
  402330:	4924      	ldr	r1, [pc, #144]	; (4023c4 <udi_cdc_comm_enable+0x13c>)
  402332:	4613      	mov	r3, r2
  402334:	00db      	lsls	r3, r3, #3
  402336:	1a9b      	subs	r3, r3, r2
  402338:	440b      	add	r3, r1
  40233a:	2200      	movs	r2, #0
  40233c:	701a      	strb	r2, [r3, #0]
  40233e:	2200      	movs	r2, #0
  402340:	f062 023d 	orn	r2, r2, #61	; 0x3d
  402344:	705a      	strb	r2, [r3, #1]
  402346:	2200      	movs	r2, #0
  402348:	f042 0201 	orr.w	r2, r2, #1
  40234c:	709a      	strb	r2, [r3, #2]
  40234e:	2200      	movs	r2, #0
  402350:	70da      	strb	r2, [r3, #3]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
  402352:	79ba      	ldrb	r2, [r7, #6]
  402354:	491b      	ldr	r1, [pc, #108]	; (4023c4 <udi_cdc_comm_enable+0x13c>)
  402356:	4613      	mov	r3, r2
  402358:	00db      	lsls	r3, r3, #3
  40235a:	1a9b      	subs	r3, r3, r2
  40235c:	440b      	add	r3, r1
  40235e:	3304      	adds	r3, #4
  402360:	2200      	movs	r2, #0
  402362:	701a      	strb	r2, [r3, #0]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
  402364:	79ba      	ldrb	r2, [r7, #6]
  402366:	4917      	ldr	r1, [pc, #92]	; (4023c4 <udi_cdc_comm_enable+0x13c>)
  402368:	4613      	mov	r3, r2
  40236a:	00db      	lsls	r3, r3, #3
  40236c:	1a9b      	subs	r3, r3, r2
  40236e:	440b      	add	r3, r1
  402370:	3305      	adds	r3, #5
  402372:	2200      	movs	r2, #0
  402374:	701a      	strb	r2, [r3, #0]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
  402376:	79ba      	ldrb	r2, [r7, #6]
  402378:	4912      	ldr	r1, [pc, #72]	; (4023c4 <udi_cdc_comm_enable+0x13c>)
  40237a:	4613      	mov	r3, r2
  40237c:	00db      	lsls	r3, r3, #3
  40237e:	1a9b      	subs	r3, r3, r2
  402380:	440b      	add	r3, r1
  402382:	3306      	adds	r3, #6
  402384:	2208      	movs	r2, #8
  402386:	701a      	strb	r2, [r3, #0]
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
  402388:	79bb      	ldrb	r3, [r7, #6]
  40238a:	4618      	mov	r0, r3
  40238c:	4b0e      	ldr	r3, [pc, #56]	; (4023c8 <udi_cdc_comm_enable+0x140>)
  40238e:	4798      	blx	r3
  402390:	4603      	mov	r3, r0
  402392:	f083 0301 	eor.w	r3, r3, #1
  402396:	b2db      	uxtb	r3, r3
  402398:	2b00      	cmp	r3, #0
  40239a:	d001      	beq.n	4023a0 <udi_cdc_comm_enable+0x118>
		return false;
  40239c:	2300      	movs	r3, #0
  40239e:	e007      	b.n	4023b0 <udi_cdc_comm_enable+0x128>
	}
	udi_cdc_nb_comm_enabled++;
  4023a0:	4b05      	ldr	r3, [pc, #20]	; (4023b8 <udi_cdc_comm_enable+0x130>)
  4023a2:	781b      	ldrb	r3, [r3, #0]
  4023a4:	b2db      	uxtb	r3, r3
  4023a6:	3301      	adds	r3, #1
  4023a8:	b2da      	uxtb	r2, r3
  4023aa:	4b03      	ldr	r3, [pc, #12]	; (4023b8 <udi_cdc_comm_enable+0x130>)
  4023ac:	701a      	strb	r2, [r3, #0]
	return true;
  4023ae:	2301      	movs	r3, #1
}
  4023b0:	4618      	mov	r0, r3
  4023b2:	3708      	adds	r7, #8
  4023b4:	46bd      	mov	sp, r7
  4023b6:	bd80      	pop	{r7, pc}
  4023b8:	20001a12 	.word	0x20001a12
  4023bc:	20001a04 	.word	0x20001a04
  4023c0:	20001a08 	.word	0x20001a08
  4023c4:	200019fc 	.word	0x200019fc
  4023c8:	00401065 	.word	0x00401065

004023cc <udi_cdc_data_enable>:

bool udi_cdc_data_enable(void)
{
  4023cc:	b580      	push	{r7, lr}
  4023ce:	b082      	sub	sp, #8
  4023d0:	af00      	add	r7, sp, #0
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  4023d2:	2300      	movs	r3, #0
  4023d4:	71fb      	strb	r3, [r7, #7]
	udi_cdc_nb_data_enabled = 0;
  4023d6:	4b2d      	ldr	r3, [pc, #180]	; (40248c <udi_cdc_data_enable+0xc0>)
  4023d8:	2200      	movs	r2, #0
  4023da:	701a      	strb	r2, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
  4023dc:	79fb      	ldrb	r3, [r7, #7]
  4023de:	4a2c      	ldr	r2, [pc, #176]	; (402490 <udi_cdc_data_enable+0xc4>)
  4023e0:	2100      	movs	r1, #0
  4023e2:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_both_buf_to_send[port] = false;
  4023e4:	79fb      	ldrb	r3, [r7, #7]
  4023e6:	4a2b      	ldr	r2, [pc, #172]	; (402494 <udi_cdc_data_enable+0xc8>)
  4023e8:	2100      	movs	r1, #0
  4023ea:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_buf_sel[port] = 0;
  4023ec:	79fb      	ldrb	r3, [r7, #7]
  4023ee:	4a2a      	ldr	r2, [pc, #168]	; (402498 <udi_cdc_data_enable+0xcc>)
  4023f0:	2100      	movs	r1, #0
  4023f2:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_buf_nb[port][0] = 0;
  4023f4:	79fb      	ldrb	r3, [r7, #7]
  4023f6:	4a29      	ldr	r2, [pc, #164]	; (40249c <udi_cdc_data_enable+0xd0>)
  4023f8:	2100      	movs	r1, #0
  4023fa:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
	udi_cdc_tx_buf_nb[port][1] = 0;
  4023fe:	79fb      	ldrb	r3, [r7, #7]
  402400:	4a26      	ldr	r2, [pc, #152]	; (40249c <udi_cdc_data_enable+0xd0>)
  402402:	009b      	lsls	r3, r3, #2
  402404:	4413      	add	r3, r2
  402406:	2200      	movs	r2, #0
  402408:	805a      	strh	r2, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
  40240a:	79fb      	ldrb	r3, [r7, #7]
  40240c:	4a24      	ldr	r2, [pc, #144]	; (4024a0 <udi_cdc_data_enable+0xd4>)
  40240e:	2100      	movs	r1, #0
  402410:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_tx_send(port);
  402414:	79fb      	ldrb	r3, [r7, #7]
  402416:	4618      	mov	r0, r3
  402418:	4b22      	ldr	r3, [pc, #136]	; (4024a4 <udi_cdc_data_enable+0xd8>)
  40241a:	4798      	blx	r3

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
  40241c:	79fb      	ldrb	r3, [r7, #7]
  40241e:	4a22      	ldr	r2, [pc, #136]	; (4024a8 <udi_cdc_data_enable+0xdc>)
  402420:	2100      	movs	r1, #0
  402422:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_buf_sel[port] = 0;
  402424:	79fb      	ldrb	r3, [r7, #7]
  402426:	4a21      	ldr	r2, [pc, #132]	; (4024ac <udi_cdc_data_enable+0xe0>)
  402428:	2100      	movs	r1, #0
  40242a:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_buf_nb[port][0] = 0;
  40242c:	79fb      	ldrb	r3, [r7, #7]
  40242e:	4a20      	ldr	r2, [pc, #128]	; (4024b0 <udi_cdc_data_enable+0xe4>)
  402430:	2100      	movs	r1, #0
  402432:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
	udi_cdc_rx_buf_nb[port][1] = 0;
  402436:	79fb      	ldrb	r3, [r7, #7]
  402438:	4a1d      	ldr	r2, [pc, #116]	; (4024b0 <udi_cdc_data_enable+0xe4>)
  40243a:	009b      	lsls	r3, r3, #2
  40243c:	4413      	add	r3, r2
  40243e:	2200      	movs	r2, #0
  402440:	805a      	strh	r2, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
  402442:	79fb      	ldrb	r3, [r7, #7]
  402444:	4a1b      	ldr	r2, [pc, #108]	; (4024b4 <udi_cdc_data_enable+0xe8>)
  402446:	2100      	movs	r1, #0
  402448:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	if (!udi_cdc_rx_start(port)) {
  40244c:	79fb      	ldrb	r3, [r7, #7]
  40244e:	4618      	mov	r0, r3
  402450:	4b19      	ldr	r3, [pc, #100]	; (4024b8 <udi_cdc_data_enable+0xec>)
  402452:	4798      	blx	r3
  402454:	4603      	mov	r3, r0
  402456:	f083 0301 	eor.w	r3, r3, #1
  40245a:	b2db      	uxtb	r3, r3
  40245c:	2b00      	cmp	r3, #0
  40245e:	d001      	beq.n	402464 <udi_cdc_data_enable+0x98>
		return false;
  402460:	2300      	movs	r3, #0
  402462:	e00f      	b.n	402484 <udi_cdc_data_enable+0xb8>
	}
	udi_cdc_nb_data_enabled++;
  402464:	4b09      	ldr	r3, [pc, #36]	; (40248c <udi_cdc_data_enable+0xc0>)
  402466:	781b      	ldrb	r3, [r3, #0]
  402468:	b2db      	uxtb	r3, r3
  40246a:	3301      	adds	r3, #1
  40246c:	b2da      	uxtb	r2, r3
  40246e:	4b07      	ldr	r3, [pc, #28]	; (40248c <udi_cdc_data_enable+0xc0>)
  402470:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
  402472:	4b06      	ldr	r3, [pc, #24]	; (40248c <udi_cdc_data_enable+0xc0>)
  402474:	781b      	ldrb	r3, [r3, #0]
  402476:	b2db      	uxtb	r3, r3
  402478:	2b01      	cmp	r3, #1
  40247a:	d102      	bne.n	402482 <udi_cdc_data_enable+0xb6>
		udi_cdc_data_running = true;
  40247c:	4b0f      	ldr	r3, [pc, #60]	; (4024bc <udi_cdc_data_enable+0xf0>)
  40247e:	2201      	movs	r2, #1
  402480:	701a      	strb	r2, [r3, #0]
	}
	return true;
  402482:	2301      	movs	r3, #1
}
  402484:	4618      	mov	r0, r3
  402486:	3708      	adds	r7, #8
  402488:	46bd      	mov	sp, r7
  40248a:	bd80      	pop	{r7, pc}
  40248c:	20001a13 	.word	0x20001a13
  402490:	20001b34 	.word	0x20001b34
  402494:	20001b38 	.word	0x20001b38
  402498:	20001b2c 	.word	0x20001b2c
  40249c:	20001b28 	.word	0x20001b28
  4024a0:	20001b30 	.word	0x20001b30
  4024a4:	004028a1 	.word	0x004028a1
  4024a8:	20001aa4 	.word	0x20001aa4
  4024ac:	20001a9c 	.word	0x20001a9c
  4024b0:	20001a98 	.word	0x20001a98
  4024b4:	20001aa0 	.word	0x20001aa0
  4024b8:	0040267d 	.word	0x0040267d
  4024bc:	20001a14 	.word	0x20001a14

004024c0 <udi_cdc_comm_disable>:

void udi_cdc_comm_disable(void)
{
  4024c0:	b480      	push	{r7}
  4024c2:	af00      	add	r7, sp, #0
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
  4024c4:	4b05      	ldr	r3, [pc, #20]	; (4024dc <udi_cdc_comm_disable+0x1c>)
  4024c6:	781b      	ldrb	r3, [r3, #0]
  4024c8:	b2db      	uxtb	r3, r3
  4024ca:	3b01      	subs	r3, #1
  4024cc:	b2da      	uxtb	r2, r3
  4024ce:	4b03      	ldr	r3, [pc, #12]	; (4024dc <udi_cdc_comm_disable+0x1c>)
  4024d0:	701a      	strb	r2, [r3, #0]
}
  4024d2:	bf00      	nop
  4024d4:	46bd      	mov	sp, r7
  4024d6:	bc80      	pop	{r7}
  4024d8:	4770      	bx	lr
  4024da:	bf00      	nop
  4024dc:	20001a12 	.word	0x20001a12

004024e0 <udi_cdc_data_disable>:

void udi_cdc_data_disable(void)
{
  4024e0:	b580      	push	{r7, lr}
  4024e2:	b082      	sub	sp, #8
  4024e4:	af00      	add	r7, sp, #0
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
  4024e6:	4b0a      	ldr	r3, [pc, #40]	; (402510 <udi_cdc_data_disable+0x30>)
  4024e8:	781b      	ldrb	r3, [r3, #0]
  4024ea:	b2db      	uxtb	r3, r3
  4024ec:	3b01      	subs	r3, #1
  4024ee:	b2da      	uxtb	r2, r3
  4024f0:	4b07      	ldr	r3, [pc, #28]	; (402510 <udi_cdc_data_disable+0x30>)
  4024f2:	701a      	strb	r2, [r3, #0]
	port = udi_cdc_nb_data_enabled;
  4024f4:	4b06      	ldr	r3, [pc, #24]	; (402510 <udi_cdc_data_disable+0x30>)
  4024f6:	781b      	ldrb	r3, [r3, #0]
  4024f8:	71fb      	strb	r3, [r7, #7]
	UDI_CDC_DISABLE_EXT(port);
  4024fa:	79fb      	ldrb	r3, [r7, #7]
  4024fc:	4618      	mov	r0, r3
  4024fe:	4b05      	ldr	r3, [pc, #20]	; (402514 <udi_cdc_data_disable+0x34>)
  402500:	4798      	blx	r3
	udi_cdc_data_running = false;
  402502:	4b05      	ldr	r3, [pc, #20]	; (402518 <udi_cdc_data_disable+0x38>)
  402504:	2200      	movs	r2, #0
  402506:	701a      	strb	r2, [r3, #0]
}
  402508:	bf00      	nop
  40250a:	3708      	adds	r7, #8
  40250c:	46bd      	mov	sp, r7
  40250e:	bd80      	pop	{r7, pc}
  402510:	20001a13 	.word	0x20001a13
  402514:	00401085 	.word	0x00401085
  402518:	20001a14 	.word	0x20001a14

0040251c <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
  40251c:	b580      	push	{r7, lr}
  40251e:	b082      	sub	sp, #8
  402520:	af00      	add	r7, sp, #0
	uint8_t port = udi_cdc_setup_to_port();
  402522:	4b31      	ldr	r3, [pc, #196]	; (4025e8 <udi_cdc_comm_setup+0xcc>)
  402524:	4798      	blx	r3
  402526:	4603      	mov	r3, r0
  402528:	71fb      	strb	r3, [r7, #7]

	if (Udd_setup_is_in()) {
  40252a:	4b30      	ldr	r3, [pc, #192]	; (4025ec <udi_cdc_comm_setup+0xd0>)
  40252c:	781b      	ldrb	r3, [r3, #0]
  40252e:	b25b      	sxtb	r3, r3
  402530:	2b00      	cmp	r3, #0
  402532:	da1c      	bge.n	40256e <udi_cdc_comm_setup+0x52>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  402534:	4b2d      	ldr	r3, [pc, #180]	; (4025ec <udi_cdc_comm_setup+0xd0>)
  402536:	781b      	ldrb	r3, [r3, #0]
  402538:	f003 0360 	and.w	r3, r3, #96	; 0x60
  40253c:	2b20      	cmp	r3, #32
  40253e:	d116      	bne.n	40256e <udi_cdc_comm_setup+0x52>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
  402540:	4b2a      	ldr	r3, [pc, #168]	; (4025ec <udi_cdc_comm_setup+0xd0>)
  402542:	785b      	ldrb	r3, [r3, #1]
  402544:	2b21      	cmp	r3, #33	; 0x21
  402546:	d112      	bne.n	40256e <udi_cdc_comm_setup+0x52>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
  402548:	4b28      	ldr	r3, [pc, #160]	; (4025ec <udi_cdc_comm_setup+0xd0>)
  40254a:	88db      	ldrh	r3, [r3, #6]
				if (sizeof(usb_cdc_line_coding_t) !=
  40254c:	2b07      	cmp	r3, #7
  40254e:	d001      	beq.n	402554 <udi_cdc_comm_setup+0x38>
					return false; // Error for USB host
  402550:	2300      	movs	r3, #0
  402552:	e045      	b.n	4025e0 <udi_cdc_comm_setup+0xc4>
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding[port];
  402554:	79fa      	ldrb	r2, [r7, #7]
						(uint8_t *) &
  402556:	4613      	mov	r3, r2
  402558:	00db      	lsls	r3, r3, #3
  40255a:	1a9b      	subs	r3, r3, r2
  40255c:	4a24      	ldr	r2, [pc, #144]	; (4025f0 <udi_cdc_comm_setup+0xd4>)
  40255e:	4413      	add	r3, r2
				udd_g_ctrlreq.payload =
  402560:	4a22      	ldr	r2, [pc, #136]	; (4025ec <udi_cdc_comm_setup+0xd0>)
  402562:	6093      	str	r3, [r2, #8]
				udd_g_ctrlreq.payload_size =
  402564:	4b21      	ldr	r3, [pc, #132]	; (4025ec <udi_cdc_comm_setup+0xd0>)
  402566:	2207      	movs	r2, #7
  402568:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
  40256a:	2301      	movs	r3, #1
  40256c:	e038      	b.n	4025e0 <udi_cdc_comm_setup+0xc4>
			}
		}
	}
	if (Udd_setup_is_out()) {
  40256e:	4b1f      	ldr	r3, [pc, #124]	; (4025ec <udi_cdc_comm_setup+0xd0>)
  402570:	781b      	ldrb	r3, [r3, #0]
  402572:	b25b      	sxtb	r3, r3
  402574:	2b00      	cmp	r3, #0
  402576:	db32      	blt.n	4025de <udi_cdc_comm_setup+0xc2>
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  402578:	4b1c      	ldr	r3, [pc, #112]	; (4025ec <udi_cdc_comm_setup+0xd0>)
  40257a:	781b      	ldrb	r3, [r3, #0]
  40257c:	f003 0360 	and.w	r3, r3, #96	; 0x60
  402580:	2b20      	cmp	r3, #32
  402582:	d12c      	bne.n	4025de <udi_cdc_comm_setup+0xc2>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
  402584:	4b19      	ldr	r3, [pc, #100]	; (4025ec <udi_cdc_comm_setup+0xd0>)
  402586:	785b      	ldrb	r3, [r3, #1]
  402588:	2b20      	cmp	r3, #32
  40258a:	d002      	beq.n	402592 <udi_cdc_comm_setup+0x76>
  40258c:	2b22      	cmp	r3, #34	; 0x22
  40258e:	d016      	beq.n	4025be <udi_cdc_comm_setup+0xa2>
  402590:	e025      	b.n	4025de <udi_cdc_comm_setup+0xc2>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
  402592:	4b16      	ldr	r3, [pc, #88]	; (4025ec <udi_cdc_comm_setup+0xd0>)
  402594:	88db      	ldrh	r3, [r3, #6]
				if (sizeof(usb_cdc_line_coding_t) !=
  402596:	2b07      	cmp	r3, #7
  402598:	d001      	beq.n	40259e <udi_cdc_comm_setup+0x82>
					return false; // Error for USB host
  40259a:	2300      	movs	r3, #0
  40259c:	e020      	b.n	4025e0 <udi_cdc_comm_setup+0xc4>
				udd_g_ctrlreq.callback =
  40259e:	4b13      	ldr	r3, [pc, #76]	; (4025ec <udi_cdc_comm_setup+0xd0>)
  4025a0:	4a14      	ldr	r2, [pc, #80]	; (4025f4 <udi_cdc_comm_setup+0xd8>)
  4025a2:	611a      	str	r2, [r3, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding[port];
  4025a4:	79fa      	ldrb	r2, [r7, #7]
						(uint8_t *) &
  4025a6:	4613      	mov	r3, r2
  4025a8:	00db      	lsls	r3, r3, #3
  4025aa:	1a9b      	subs	r3, r3, r2
  4025ac:	4a10      	ldr	r2, [pc, #64]	; (4025f0 <udi_cdc_comm_setup+0xd4>)
  4025ae:	4413      	add	r3, r2
				udd_g_ctrlreq.payload =
  4025b0:	4a0e      	ldr	r2, [pc, #56]	; (4025ec <udi_cdc_comm_setup+0xd0>)
  4025b2:	6093      	str	r3, [r2, #8]
				udd_g_ctrlreq.payload_size =
  4025b4:	4b0d      	ldr	r3, [pc, #52]	; (4025ec <udi_cdc_comm_setup+0xd0>)
  4025b6:	2207      	movs	r2, #7
  4025b8:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
  4025ba:	2301      	movs	r3, #1
  4025bc:	e010      	b.n	4025e0 <udi_cdc_comm_setup+0xc4>
			case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
				// According cdc spec 1.1 chapter 6.2.14
				UDI_CDC_SET_DTR_EXT(port, (0 !=
  4025be:	4b0b      	ldr	r3, [pc, #44]	; (4025ec <udi_cdc_comm_setup+0xd0>)
  4025c0:	885b      	ldrh	r3, [r3, #2]
  4025c2:	f003 0301 	and.w	r3, r3, #1
  4025c6:	2b00      	cmp	r3, #0
  4025c8:	bf14      	ite	ne
  4025ca:	2301      	movne	r3, #1
  4025cc:	2300      	moveq	r3, #0
  4025ce:	b2da      	uxtb	r2, r3
  4025d0:	79fb      	ldrb	r3, [r7, #7]
  4025d2:	4611      	mov	r1, r2
  4025d4:	4618      	mov	r0, r3
  4025d6:	4b08      	ldr	r3, [pc, #32]	; (4025f8 <udi_cdc_comm_setup+0xdc>)
  4025d8:	4798      	blx	r3
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
  4025da:	2301      	movs	r3, #1
  4025dc:	e000      	b.n	4025e0 <udi_cdc_comm_setup+0xc4>
			}
		}
	}
	return false;  // request Not supported
  4025de:	2300      	movs	r3, #0
}
  4025e0:	4618      	mov	r0, r3
  4025e2:	3708      	adds	r7, #8
  4025e4:	46bd      	mov	sp, r7
  4025e6:	bd80      	pop	{r7, pc}
  4025e8:	00402635 	.word	0x00402635
  4025ec:	20001c24 	.word	0x20001c24
  4025f0:	200019fc 	.word	0x200019fc
  4025f4:	00402661 	.word	0x00402661
  4025f8:	004010cd 	.word	0x004010cd

004025fc <udi_cdc_data_setup>:

bool udi_cdc_data_setup(void)
{
  4025fc:	b480      	push	{r7}
  4025fe:	af00      	add	r7, sp, #0
	return false;  // request Not supported
  402600:	2300      	movs	r3, #0
}
  402602:	4618      	mov	r0, r3
  402604:	46bd      	mov	sp, r7
  402606:	bc80      	pop	{r7}
  402608:	4770      	bx	lr

0040260a <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
  40260a:	b480      	push	{r7}
  40260c:	af00      	add	r7, sp, #0
	return 0;      // CDC don't have multiple alternate setting
  40260e:	2300      	movs	r3, #0
}
  402610:	4618      	mov	r0, r3
  402612:	46bd      	mov	sp, r7
  402614:	bc80      	pop	{r7}
  402616:	4770      	bx	lr

00402618 <udi_cdc_data_sof_notify>:

void udi_cdc_data_sof_notify(void)
{
  402618:	b580      	push	{r7, lr}
  40261a:	af00      	add	r7, sp, #0
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
  40261c:	4b03      	ldr	r3, [pc, #12]	; (40262c <udi_cdc_data_sof_notify+0x14>)
  40261e:	781b      	ldrb	r3, [r3, #0]
  402620:	4618      	mov	r0, r3
  402622:	4b03      	ldr	r3, [pc, #12]	; (402630 <udi_cdc_data_sof_notify+0x18>)
  402624:	4798      	blx	r3
	port_notify++;
	if (port_notify >= UDI_CDC_PORT_NB) {
		port_notify = 0;
	}
#endif
}
  402626:	bf00      	nop
  402628:	bd80      	pop	{r7, pc}
  40262a:	bf00      	nop
  40262c:	20001b39 	.word	0x20001b39
  402630:	004028a1 	.word	0x004028a1

00402634 <udi_cdc_setup_to_port>:

//-------------------------------------------------
//------- Internal routines to control serial line

static uint8_t udi_cdc_setup_to_port(void)
{
  402634:	b480      	push	{r7}
  402636:	b083      	sub	sp, #12
  402638:	af00      	add	r7, sp, #0
	uint8_t port;

	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
  40263a:	4b08      	ldr	r3, [pc, #32]	; (40265c <udi_cdc_setup_to_port+0x28>)
  40263c:	889b      	ldrh	r3, [r3, #4]
  40263e:	b2db      	uxtb	r3, r3
  402640:	2b00      	cmp	r3, #0
  402642:	d102      	bne.n	40264a <udi_cdc_setup_to_port+0x16>
#define UDI_CDC_IFACE_COMM_TO_PORT(iface, unused) \
	case UDI_CDC_COMM_IFACE_NUMBER_##iface: \
		port = iface; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_IFACE_COMM_TO_PORT, ~)
  402644:	2300      	movs	r3, #0
  402646:	71fb      	strb	r3, [r7, #7]
  402648:	e002      	b.n	402650 <udi_cdc_setup_to_port+0x1c>
#undef UDI_CDC_IFACE_COMM_TO_PORT
	default:
		port = 0;
  40264a:	2300      	movs	r3, #0
  40264c:	71fb      	strb	r3, [r7, #7]
		break;
  40264e:	bf00      	nop
	}
	return port;
  402650:	79fb      	ldrb	r3, [r7, #7]
}
  402652:	4618      	mov	r0, r3
  402654:	370c      	adds	r7, #12
  402656:	46bd      	mov	sp, r7
  402658:	bc80      	pop	{r7}
  40265a:	4770      	bx	lr
  40265c:	20001c24 	.word	0x20001c24

00402660 <udi_cdc_line_coding_received>:

static void udi_cdc_line_coding_received(void)
{
  402660:	b580      	push	{r7, lr}
  402662:	b082      	sub	sp, #8
  402664:	af00      	add	r7, sp, #0
	uint8_t port = udi_cdc_setup_to_port();
  402666:	4b04      	ldr	r3, [pc, #16]	; (402678 <udi_cdc_line_coding_received+0x18>)
  402668:	4798      	blx	r3
  40266a:	4603      	mov	r3, r0
  40266c:	71fb      	strb	r3, [r7, #7]
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
}
  40266e:	bf00      	nop
  402670:	3708      	adds	r7, #8
  402672:	46bd      	mov	sp, r7
  402674:	bd80      	pop	{r7, pc}
  402676:	bf00      	nop
  402678:	00402635 	.word	0x00402635

0040267c <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
  40267c:	b590      	push	{r4, r7, lr}
  40267e:	b089      	sub	sp, #36	; 0x24
  402680:	af02      	add	r7, sp, #8
  402682:	4603      	mov	r3, r0
  402684:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;
	uint8_t buf_sel_trans;
	udd_ep_id_t ep;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  402686:	2300      	movs	r3, #0
  402688:	71fb      	strb	r3, [r7, #7]
#endif

	flags = cpu_irq_save();
  40268a:	4b2f      	ldr	r3, [pc, #188]	; (402748 <udi_cdc_rx_start+0xcc>)
  40268c:	4798      	blx	r3
  40268e:	6138      	str	r0, [r7, #16]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  402690:	79fb      	ldrb	r3, [r7, #7]
  402692:	4a2e      	ldr	r2, [pc, #184]	; (40274c <udi_cdc_rx_start+0xd0>)
  402694:	5cd3      	ldrb	r3, [r2, r3]
  402696:	73fb      	strb	r3, [r7, #15]
	if (udi_cdc_rx_trans_ongoing[port] ||
  402698:	79fb      	ldrb	r3, [r7, #7]
  40269a:	4a2d      	ldr	r2, [pc, #180]	; (402750 <udi_cdc_rx_start+0xd4>)
  40269c:	5cd3      	ldrb	r3, [r2, r3]
  40269e:	b2db      	uxtb	r3, r3
  4026a0:	2b00      	cmp	r3, #0
  4026a2:	d10e      	bne.n	4026c2 <udi_cdc_rx_start+0x46>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
  4026a4:	79fb      	ldrb	r3, [r7, #7]
  4026a6:	4a2b      	ldr	r2, [pc, #172]	; (402754 <udi_cdc_rx_start+0xd8>)
  4026a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  4026ac:	b29a      	uxth	r2, r3
  4026ae:	79f9      	ldrb	r1, [r7, #7]
  4026b0:	7bfb      	ldrb	r3, [r7, #15]
  4026b2:	4829      	ldr	r0, [pc, #164]	; (402758 <udi_cdc_rx_start+0xdc>)
  4026b4:	0049      	lsls	r1, r1, #1
  4026b6:	440b      	add	r3, r1
  4026b8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
  4026bc:	b29b      	uxth	r3, r3
	if (udi_cdc_rx_trans_ongoing[port] ||
  4026be:	429a      	cmp	r2, r3
  4026c0:	d204      	bcs.n	4026cc <udi_cdc_rx_start+0x50>
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
  4026c2:	6938      	ldr	r0, [r7, #16]
  4026c4:	4b25      	ldr	r3, [pc, #148]	; (40275c <udi_cdc_rx_start+0xe0>)
  4026c6:	4798      	blx	r3
		return false;
  4026c8:	2300      	movs	r3, #0
  4026ca:	e038      	b.n	40273e <udi_cdc_rx_start+0xc2>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
  4026cc:	79fb      	ldrb	r3, [r7, #7]
  4026ce:	4a21      	ldr	r2, [pc, #132]	; (402754 <udi_cdc_rx_start+0xd8>)
  4026d0:	2100      	movs	r1, #0
  4026d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  4026d6:	79fb      	ldrb	r3, [r7, #7]
  4026d8:	7bfa      	ldrb	r2, [r7, #15]
  4026da:	2a00      	cmp	r2, #0
  4026dc:	bf0c      	ite	eq
  4026de:	2201      	moveq	r2, #1
  4026e0:	2200      	movne	r2, #0
  4026e2:	b2d2      	uxtb	r2, r2
  4026e4:	4611      	mov	r1, r2
  4026e6:	4a19      	ldr	r2, [pc, #100]	; (40274c <udi_cdc_rx_start+0xd0>)
  4026e8:	54d1      	strb	r1, [r2, r3]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
  4026ea:	79fb      	ldrb	r3, [r7, #7]
  4026ec:	4a18      	ldr	r2, [pc, #96]	; (402750 <udi_cdc_rx_start+0xd4>)
  4026ee:	2101      	movs	r1, #1
  4026f0:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
  4026f2:	6938      	ldr	r0, [r7, #16]
  4026f4:	4b19      	ldr	r3, [pc, #100]	; (40275c <udi_cdc_rx_start+0xe0>)
  4026f6:	4798      	blx	r3

	if (udi_cdc_multi_is_rx_ready(port)) {
  4026f8:	79fb      	ldrb	r3, [r7, #7]
  4026fa:	4618      	mov	r0, r3
  4026fc:	4b18      	ldr	r3, [pc, #96]	; (402760 <udi_cdc_rx_start+0xe4>)
  4026fe:	4798      	blx	r3
  402700:	4603      	mov	r3, r0
  402702:	2b00      	cmp	r3, #0
  402704:	d003      	beq.n	40270e <udi_cdc_rx_start+0x92>
		UDI_CDC_RX_NOTIFY(port);
  402706:	79fb      	ldrb	r3, [r7, #7]
  402708:	4618      	mov	r0, r3
  40270a:	4b16      	ldr	r3, [pc, #88]	; (402764 <udi_cdc_rx_start+0xe8>)
  40270c:	4798      	blx	r3
	}
	// Send the buffer with enable of short packet
	switch (port) {
  40270e:	79fb      	ldrb	r3, [r7, #7]
  402710:	2b00      	cmp	r3, #0
  402712:	d102      	bne.n	40271a <udi_cdc_rx_start+0x9e>
#define UDI_CDC_PORT_TO_DATA_EP_OUT(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_OUT_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_OUT, ~)
  402714:	2302      	movs	r3, #2
  402716:	75fb      	strb	r3, [r7, #23]
  402718:	e002      	b.n	402720 <udi_cdc_rx_start+0xa4>
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
  40271a:	2302      	movs	r3, #2
  40271c:	75fb      	strb	r3, [r7, #23]
		break;
  40271e:	bf00      	nop
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
  402720:	79fa      	ldrb	r2, [r7, #7]
  402722:	7bfb      	ldrb	r3, [r7, #15]
  402724:	0052      	lsls	r2, r2, #1
  402726:	4413      	add	r3, r2
  402728:	019b      	lsls	r3, r3, #6
  40272a:	4a0f      	ldr	r2, [pc, #60]	; (402768 <udi_cdc_rx_start+0xec>)
  40272c:	441a      	add	r2, r3
	return udd_ep_run(ep,
  40272e:	7df8      	ldrb	r0, [r7, #23]
  402730:	4b0e      	ldr	r3, [pc, #56]	; (40276c <udi_cdc_rx_start+0xf0>)
  402732:	9300      	str	r3, [sp, #0]
  402734:	2340      	movs	r3, #64	; 0x40
  402736:	2101      	movs	r1, #1
  402738:	4c0d      	ldr	r4, [pc, #52]	; (402770 <udi_cdc_rx_start+0xf4>)
  40273a:	47a0      	blx	r4
  40273c:	4603      	mov	r3, r0
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
  40273e:	4618      	mov	r0, r3
  402740:	371c      	adds	r7, #28
  402742:	46bd      	mov	sp, r7
  402744:	bd90      	pop	{r4, r7, pc}
  402746:	bf00      	nop
  402748:	00402201 	.word	0x00402201
  40274c:	20001a9c 	.word	0x20001a9c
  402750:	20001aa4 	.word	0x20001aa4
  402754:	20001aa0 	.word	0x20001aa0
  402758:	20001a98 	.word	0x20001a98
  40275c:	00402259 	.word	0x00402259
  402760:	00402aed 	.word	0x00402aed
  402764:	004010a5 	.word	0x004010a5
  402768:	20001a18 	.word	0x20001a18
  40276c:	00402775 	.word	0x00402775
  402770:	00404e85 	.word	0x00404e85

00402774 <udi_cdc_data_received>:


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
  402774:	b590      	push	{r4, r7, lr}
  402776:	b087      	sub	sp, #28
  402778:	af02      	add	r7, sp, #8
  40277a:	4603      	mov	r3, r0
  40277c:	6039      	str	r1, [r7, #0]
  40277e:	71fb      	strb	r3, [r7, #7]
  402780:	4613      	mov	r3, r2
  402782:	71bb      	strb	r3, [r7, #6]
	uint8_t buf_sel_trans;
	uint8_t port;

	switch (ep) {
  402784:	79bb      	ldrb	r3, [r7, #6]
  402786:	2b02      	cmp	r3, #2
  402788:	d102      	bne.n	402790 <udi_cdc_data_received+0x1c>
#define UDI_CDC_DATA_EP_OUT_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_OUT_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_OUT_TO_PORT, ~)
  40278a:	2300      	movs	r3, #0
  40278c:	73fb      	strb	r3, [r7, #15]
  40278e:	e002      	b.n	402796 <udi_cdc_data_received+0x22>
#undef UDI_CDC_DATA_EP_OUT_TO_PORT
	default:
		port = 0;
  402790:	2300      	movs	r3, #0
  402792:	73fb      	strb	r3, [r7, #15]
		break;
  402794:	bf00      	nop
	}

	if (UDD_EP_TRANSFER_OK != status) {
  402796:	79fb      	ldrb	r3, [r7, #7]
  402798:	2b00      	cmp	r3, #0
  40279a:	d12e      	bne.n	4027fa <udi_cdc_data_received+0x86>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
  40279c:	7bfb      	ldrb	r3, [r7, #15]
  40279e:	4a19      	ldr	r2, [pc, #100]	; (402804 <udi_cdc_data_received+0x90>)
  4027a0:	5cd3      	ldrb	r3, [r2, r3]
  4027a2:	b2db      	uxtb	r3, r3
  4027a4:	2b00      	cmp	r3, #0
  4027a6:	bf0c      	ite	eq
  4027a8:	2301      	moveq	r3, #1
  4027aa:	2300      	movne	r3, #0
  4027ac:	b2db      	uxtb	r3, r3
  4027ae:	73bb      	strb	r3, [r7, #14]
	if (!n) {
  4027b0:	683b      	ldr	r3, [r7, #0]
  4027b2:	2b00      	cmp	r3, #0
  4027b4:	d10e      	bne.n	4027d4 <udi_cdc_data_received+0x60>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
  4027b6:	7bfa      	ldrb	r2, [r7, #15]
  4027b8:	7bbb      	ldrb	r3, [r7, #14]
  4027ba:	0052      	lsls	r2, r2, #1
  4027bc:	4413      	add	r3, r2
  4027be:	019b      	lsls	r3, r3, #6
  4027c0:	4a11      	ldr	r2, [pc, #68]	; (402808 <udi_cdc_data_received+0x94>)
  4027c2:	441a      	add	r2, r3
		udd_ep_run( ep,
  4027c4:	79b8      	ldrb	r0, [r7, #6]
  4027c6:	4b11      	ldr	r3, [pc, #68]	; (40280c <udi_cdc_data_received+0x98>)
  4027c8:	9300      	str	r3, [sp, #0]
  4027ca:	2340      	movs	r3, #64	; 0x40
  4027cc:	2101      	movs	r1, #1
  4027ce:	4c10      	ldr	r4, [pc, #64]	; (402810 <udi_cdc_data_received+0x9c>)
  4027d0:	47a0      	blx	r4
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
  4027d2:	e013      	b.n	4027fc <udi_cdc_data_received+0x88>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
  4027d4:	7bfa      	ldrb	r2, [r7, #15]
  4027d6:	7bbb      	ldrb	r3, [r7, #14]
  4027d8:	6839      	ldr	r1, [r7, #0]
  4027da:	b288      	uxth	r0, r1
  4027dc:	490d      	ldr	r1, [pc, #52]	; (402814 <udi_cdc_data_received+0xa0>)
  4027de:	0052      	lsls	r2, r2, #1
  4027e0:	4413      	add	r3, r2
  4027e2:	4602      	mov	r2, r0
  4027e4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
  4027e8:	7bfb      	ldrb	r3, [r7, #15]
  4027ea:	4a0b      	ldr	r2, [pc, #44]	; (402818 <udi_cdc_data_received+0xa4>)
  4027ec:	2100      	movs	r1, #0
  4027ee:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_start(port);
  4027f0:	7bfb      	ldrb	r3, [r7, #15]
  4027f2:	4618      	mov	r0, r3
  4027f4:	4b09      	ldr	r3, [pc, #36]	; (40281c <udi_cdc_data_received+0xa8>)
  4027f6:	4798      	blx	r3
  4027f8:	e000      	b.n	4027fc <udi_cdc_data_received+0x88>
		return;
  4027fa:	bf00      	nop
}
  4027fc:	3714      	adds	r7, #20
  4027fe:	46bd      	mov	sp, r7
  402800:	bd90      	pop	{r4, r7, pc}
  402802:	bf00      	nop
  402804:	20001a9c 	.word	0x20001a9c
  402808:	20001a18 	.word	0x20001a18
  40280c:	00402775 	.word	0x00402775
  402810:	00404e85 	.word	0x00404e85
  402814:	20001a98 	.word	0x20001a98
  402818:	20001aa4 	.word	0x20001aa4
  40281c:	0040267d 	.word	0x0040267d

00402820 <udi_cdc_data_sent>:


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
  402820:	b580      	push	{r7, lr}
  402822:	b084      	sub	sp, #16
  402824:	af00      	add	r7, sp, #0
  402826:	4603      	mov	r3, r0
  402828:	6039      	str	r1, [r7, #0]
  40282a:	71fb      	strb	r3, [r7, #7]
  40282c:	4613      	mov	r3, r2
  40282e:	71bb      	strb	r3, [r7, #6]
	uint8_t port;
	UNUSED(n);

	switch (ep) {
  402830:	79bb      	ldrb	r3, [r7, #6]
  402832:	2b81      	cmp	r3, #129	; 0x81
  402834:	d102      	bne.n	40283c <udi_cdc_data_sent+0x1c>
#define UDI_CDC_DATA_EP_IN_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_IN_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_IN_TO_PORT, ~)
  402836:	2300      	movs	r3, #0
  402838:	73fb      	strb	r3, [r7, #15]
  40283a:	e002      	b.n	402842 <udi_cdc_data_sent+0x22>
#undef UDI_CDC_DATA_EP_IN_TO_PORT
	default:
		port = 0;
  40283c:	2300      	movs	r3, #0
  40283e:	73fb      	strb	r3, [r7, #15]
		break;
  402840:	bf00      	nop
	}

	if (UDD_EP_TRANSFER_OK != status) {
  402842:	79fb      	ldrb	r3, [r7, #7]
  402844:	2b00      	cmp	r3, #0
  402846:	d11d      	bne.n	402884 <udi_cdc_data_sent+0x64>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  402848:	7bfb      	ldrb	r3, [r7, #15]
  40284a:	7bfa      	ldrb	r2, [r7, #15]
  40284c:	490f      	ldr	r1, [pc, #60]	; (40288c <udi_cdc_data_sent+0x6c>)
  40284e:	5c8a      	ldrb	r2, [r1, r2]
  402850:	b2d2      	uxtb	r2, r2
  402852:	2a00      	cmp	r2, #0
  402854:	bf0c      	ite	eq
  402856:	2201      	moveq	r2, #1
  402858:	2200      	movne	r2, #0
  40285a:	b2d2      	uxtb	r2, r2
  40285c:	4611      	mov	r1, r2
  40285e:	4a0c      	ldr	r2, [pc, #48]	; (402890 <udi_cdc_data_sent+0x70>)
  402860:	005b      	lsls	r3, r3, #1
  402862:	440b      	add	r3, r1
  402864:	2100      	movs	r1, #0
  402866:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
  40286a:	7bfb      	ldrb	r3, [r7, #15]
  40286c:	4a09      	ldr	r2, [pc, #36]	; (402894 <udi_cdc_data_sent+0x74>)
  40286e:	2100      	movs	r1, #0
  402870:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_trans_ongoing[port] = false;
  402872:	7bfb      	ldrb	r3, [r7, #15]
  402874:	4a08      	ldr	r2, [pc, #32]	; (402898 <udi_cdc_data_sent+0x78>)
  402876:	2100      	movs	r1, #0
  402878:	54d1      	strb	r1, [r2, r3]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
  40287a:	7bfb      	ldrb	r3, [r7, #15]
  40287c:	4618      	mov	r0, r3
  40287e:	4b07      	ldr	r3, [pc, #28]	; (40289c <udi_cdc_data_sent+0x7c>)
  402880:	4798      	blx	r3
  402882:	e000      	b.n	402886 <udi_cdc_data_sent+0x66>
		return;
  402884:	bf00      	nop
}
  402886:	3710      	adds	r7, #16
  402888:	46bd      	mov	sp, r7
  40288a:	bd80      	pop	{r7, pc}
  40288c:	20001b2c 	.word	0x20001b2c
  402890:	20001b28 	.word	0x20001b28
  402894:	20001b38 	.word	0x20001b38
  402898:	20001b34 	.word	0x20001b34
  40289c:	004028a1 	.word	0x004028a1

004028a0 <udi_cdc_tx_send>:


static void udi_cdc_tx_send(uint8_t port)
{
  4028a0:	b590      	push	{r4, r7, lr}
  4028a2:	b089      	sub	sp, #36	; 0x24
  4028a4:	af02      	add	r7, sp, #8
  4028a6:	4603      	mov	r3, r0
  4028a8:	71fb      	strb	r3, [r7, #7]
	bool b_short_packet;
	udd_ep_id_t ep;
	static uint16_t sof_zlp_counter = 0;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  4028aa:	2300      	movs	r3, #0
  4028ac:	71fb      	strb	r3, [r7, #7]
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
  4028ae:	79fb      	ldrb	r3, [r7, #7]
  4028b0:	4a62      	ldr	r2, [pc, #392]	; (402a3c <udi_cdc_tx_send+0x19c>)
  4028b2:	5cd3      	ldrb	r3, [r2, r3]
  4028b4:	b2db      	uxtb	r3, r3
  4028b6:	2b00      	cmp	r3, #0
  4028b8:	f040 80ba 	bne.w	402a30 <udi_cdc_tx_send+0x190>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
  4028bc:	4b60      	ldr	r3, [pc, #384]	; (402a40 <udi_cdc_tx_send+0x1a0>)
  4028be:	4798      	blx	r3
  4028c0:	4603      	mov	r3, r0
  4028c2:	2b00      	cmp	r3, #0
  4028c4:	d009      	beq.n	4028da <udi_cdc_tx_send+0x3a>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  4028c6:	79fb      	ldrb	r3, [r7, #7]
  4028c8:	4a5e      	ldr	r2, [pc, #376]	; (402a44 <udi_cdc_tx_send+0x1a4>)
  4028ca:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
  4028ce:	4b5e      	ldr	r3, [pc, #376]	; (402a48 <udi_cdc_tx_send+0x1a8>)
  4028d0:	4798      	blx	r3
  4028d2:	4603      	mov	r3, r0
  4028d4:	429c      	cmp	r4, r3
  4028d6:	d10a      	bne.n	4028ee <udi_cdc_tx_send+0x4e>
			return; // Wait next SOF to send next data
  4028d8:	e0ad      	b.n	402a36 <udi_cdc_tx_send+0x196>
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
  4028da:	79fb      	ldrb	r3, [r7, #7]
  4028dc:	4a59      	ldr	r2, [pc, #356]	; (402a44 <udi_cdc_tx_send+0x1a4>)
  4028de:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
  4028e2:	4b5a      	ldr	r3, [pc, #360]	; (402a4c <udi_cdc_tx_send+0x1ac>)
  4028e4:	4798      	blx	r3
  4028e6:	4603      	mov	r3, r0
  4028e8:	429c      	cmp	r4, r3
  4028ea:	f000 80a3 	beq.w	402a34 <udi_cdc_tx_send+0x194>
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
  4028ee:	4b58      	ldr	r3, [pc, #352]	; (402a50 <udi_cdc_tx_send+0x1b0>)
  4028f0:	4798      	blx	r3
  4028f2:	6138      	str	r0, [r7, #16]
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
  4028f4:	79fb      	ldrb	r3, [r7, #7]
  4028f6:	4a57      	ldr	r2, [pc, #348]	; (402a54 <udi_cdc_tx_send+0x1b4>)
  4028f8:	5cd3      	ldrb	r3, [r2, r3]
  4028fa:	75fb      	strb	r3, [r7, #23]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  4028fc:	79fa      	ldrb	r2, [r7, #7]
  4028fe:	7dfb      	ldrb	r3, [r7, #23]
  402900:	4955      	ldr	r1, [pc, #340]	; (402a58 <udi_cdc_tx_send+0x1b8>)
  402902:	0052      	lsls	r2, r2, #1
  402904:	4413      	add	r3, r2
  402906:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
  40290a:	2b00      	cmp	r3, #0
  40290c:	d11f      	bne.n	40294e <udi_cdc_tx_send+0xae>
		sof_zlp_counter++;
  40290e:	4b53      	ldr	r3, [pc, #332]	; (402a5c <udi_cdc_tx_send+0x1bc>)
  402910:	881b      	ldrh	r3, [r3, #0]
  402912:	3301      	adds	r3, #1
  402914:	b29a      	uxth	r2, r3
  402916:	4b51      	ldr	r3, [pc, #324]	; (402a5c <udi_cdc_tx_send+0x1bc>)
  402918:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
  40291a:	4b49      	ldr	r3, [pc, #292]	; (402a40 <udi_cdc_tx_send+0x1a0>)
  40291c:	4798      	blx	r3
  40291e:	4603      	mov	r3, r0
  402920:	f083 0301 	eor.w	r3, r3, #1
  402924:	b2db      	uxtb	r3, r3
  402926:	2b00      	cmp	r3, #0
  402928:	d003      	beq.n	402932 <udi_cdc_tx_send+0x92>
  40292a:	4b4c      	ldr	r3, [pc, #304]	; (402a5c <udi_cdc_tx_send+0x1bc>)
  40292c:	881b      	ldrh	r3, [r3, #0]
  40292e:	2b63      	cmp	r3, #99	; 0x63
  402930:	d909      	bls.n	402946 <udi_cdc_tx_send+0xa6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
  402932:	4b43      	ldr	r3, [pc, #268]	; (402a40 <udi_cdc_tx_send+0x1a0>)
  402934:	4798      	blx	r3
  402936:	4603      	mov	r3, r0
  402938:	2b00      	cmp	r3, #0
  40293a:	d008      	beq.n	40294e <udi_cdc_tx_send+0xae>
  40293c:	4b47      	ldr	r3, [pc, #284]	; (402a5c <udi_cdc_tx_send+0x1bc>)
  40293e:	881b      	ldrh	r3, [r3, #0]
  402940:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
  402944:	d203      	bcs.n	40294e <udi_cdc_tx_send+0xae>
			cpu_irq_restore(flags);
  402946:	6938      	ldr	r0, [r7, #16]
  402948:	4b45      	ldr	r3, [pc, #276]	; (402a60 <udi_cdc_tx_send+0x1c0>)
  40294a:	4798      	blx	r3
			return;
  40294c:	e073      	b.n	402a36 <udi_cdc_tx_send+0x196>
		}
	}
	sof_zlp_counter = 0;
  40294e:	4b43      	ldr	r3, [pc, #268]	; (402a5c <udi_cdc_tx_send+0x1bc>)
  402950:	2200      	movs	r2, #0
  402952:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
  402954:	79fb      	ldrb	r3, [r7, #7]
  402956:	4a43      	ldr	r2, [pc, #268]	; (402a64 <udi_cdc_tx_send+0x1c4>)
  402958:	5cd3      	ldrb	r3, [r2, r3]
  40295a:	b2db      	uxtb	r3, r3
  40295c:	f083 0301 	eor.w	r3, r3, #1
  402960:	b2db      	uxtb	r3, r3
  402962:	2b00      	cmp	r3, #0
  402964:	d00a      	beq.n	40297c <udi_cdc_tx_send+0xdc>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  402966:	79fb      	ldrb	r3, [r7, #7]
  402968:	7dfa      	ldrb	r2, [r7, #23]
  40296a:	2a00      	cmp	r2, #0
  40296c:	bf0c      	ite	eq
  40296e:	2201      	moveq	r2, #1
  402970:	2200      	movne	r2, #0
  402972:	b2d2      	uxtb	r2, r2
  402974:	4611      	mov	r1, r2
  402976:	4a37      	ldr	r2, [pc, #220]	; (402a54 <udi_cdc_tx_send+0x1b4>)
  402978:	54d1      	strb	r1, [r2, r3]
  40297a:	e006      	b.n	40298a <udi_cdc_tx_send+0xea>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
  40297c:	7dfb      	ldrb	r3, [r7, #23]
  40297e:	2b00      	cmp	r3, #0
  402980:	bf0c      	ite	eq
  402982:	2301      	moveq	r3, #1
  402984:	2300      	movne	r3, #0
  402986:	b2db      	uxtb	r3, r3
  402988:	75fb      	strb	r3, [r7, #23]
	}
	udi_cdc_tx_trans_ongoing[port] = true;
  40298a:	79fb      	ldrb	r3, [r7, #7]
  40298c:	4a2b      	ldr	r2, [pc, #172]	; (402a3c <udi_cdc_tx_send+0x19c>)
  40298e:	2101      	movs	r1, #1
  402990:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
  402992:	6938      	ldr	r0, [r7, #16]
  402994:	4b32      	ldr	r3, [pc, #200]	; (402a60 <udi_cdc_tx_send+0x1c0>)
  402996:	4798      	blx	r3

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
  402998:	79fa      	ldrb	r2, [r7, #7]
  40299a:	7dfb      	ldrb	r3, [r7, #23]
  40299c:	492e      	ldr	r1, [pc, #184]	; (402a58 <udi_cdc_tx_send+0x1b8>)
  40299e:	0052      	lsls	r2, r2, #1
  4029a0:	4413      	add	r3, r2
  4029a2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
  4029a6:	2b40      	cmp	r3, #64	; 0x40
  4029a8:	bf14      	ite	ne
  4029aa:	2301      	movne	r3, #1
  4029ac:	2300      	moveq	r3, #0
  4029ae:	73fb      	strb	r3, [r7, #15]
	if (b_short_packet) {
  4029b0:	7bfb      	ldrb	r3, [r7, #15]
  4029b2:	2b00      	cmp	r3, #0
  4029b4:	d016      	beq.n	4029e4 <udi_cdc_tx_send+0x144>
		if (udd_is_high_speed()) {
  4029b6:	4b22      	ldr	r3, [pc, #136]	; (402a40 <udi_cdc_tx_send+0x1a0>)
  4029b8:	4798      	blx	r3
  4029ba:	4603      	mov	r3, r0
  4029bc:	2b00      	cmp	r3, #0
  4029be:	d008      	beq.n	4029d2 <udi_cdc_tx_send+0x132>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
  4029c0:	79fc      	ldrb	r4, [r7, #7]
  4029c2:	4b21      	ldr	r3, [pc, #132]	; (402a48 <udi_cdc_tx_send+0x1a8>)
  4029c4:	4798      	blx	r3
  4029c6:	4603      	mov	r3, r0
  4029c8:	461a      	mov	r2, r3
  4029ca:	4b1e      	ldr	r3, [pc, #120]	; (402a44 <udi_cdc_tx_send+0x1a4>)
  4029cc:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
  4029d0:	e00d      	b.n	4029ee <udi_cdc_tx_send+0x14e>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
  4029d2:	79fc      	ldrb	r4, [r7, #7]
  4029d4:	4b1d      	ldr	r3, [pc, #116]	; (402a4c <udi_cdc_tx_send+0x1ac>)
  4029d6:	4798      	blx	r3
  4029d8:	4603      	mov	r3, r0
  4029da:	461a      	mov	r2, r3
  4029dc:	4b19      	ldr	r3, [pc, #100]	; (402a44 <udi_cdc_tx_send+0x1a4>)
  4029de:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
  4029e2:	e004      	b.n	4029ee <udi_cdc_tx_send+0x14e>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
  4029e4:	79fb      	ldrb	r3, [r7, #7]
  4029e6:	4a17      	ldr	r2, [pc, #92]	; (402a44 <udi_cdc_tx_send+0x1a4>)
  4029e8:	2100      	movs	r1, #0
  4029ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// Send the buffer with enable of short packet
	switch (port) {
  4029ee:	79fb      	ldrb	r3, [r7, #7]
  4029f0:	2b00      	cmp	r3, #0
  4029f2:	d102      	bne.n	4029fa <udi_cdc_tx_send+0x15a>
#define UDI_CDC_PORT_TO_DATA_EP_IN(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_IN_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_IN, ~)
  4029f4:	2381      	movs	r3, #129	; 0x81
  4029f6:	75bb      	strb	r3, [r7, #22]
  4029f8:	e002      	b.n	402a00 <udi_cdc_tx_send+0x160>
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
  4029fa:	2381      	movs	r3, #129	; 0x81
  4029fc:	75bb      	strb	r3, [r7, #22]
		break;
  4029fe:	bf00      	nop
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
  402a00:	79fa      	ldrb	r2, [r7, #7]
  402a02:	7dfb      	ldrb	r3, [r7, #23]
  402a04:	0052      	lsls	r2, r2, #1
  402a06:	4413      	add	r3, r2
  402a08:	019b      	lsls	r3, r3, #6
  402a0a:	4a17      	ldr	r2, [pc, #92]	; (402a68 <udi_cdc_tx_send+0x1c8>)
  402a0c:	189c      	adds	r4, r3, r2
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
  402a0e:	79fa      	ldrb	r2, [r7, #7]
  402a10:	7dfb      	ldrb	r3, [r7, #23]
  402a12:	4911      	ldr	r1, [pc, #68]	; (402a58 <udi_cdc_tx_send+0x1b8>)
  402a14:	0052      	lsls	r2, r2, #1
  402a16:	4413      	add	r3, r2
  402a18:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
	udd_ep_run( ep,
  402a1c:	461a      	mov	r2, r3
  402a1e:	7bf9      	ldrb	r1, [r7, #15]
  402a20:	7db8      	ldrb	r0, [r7, #22]
  402a22:	4b12      	ldr	r3, [pc, #72]	; (402a6c <udi_cdc_tx_send+0x1cc>)
  402a24:	9300      	str	r3, [sp, #0]
  402a26:	4613      	mov	r3, r2
  402a28:	4622      	mov	r2, r4
  402a2a:	4c11      	ldr	r4, [pc, #68]	; (402a70 <udi_cdc_tx_send+0x1d0>)
  402a2c:	47a0      	blx	r4
  402a2e:	e002      	b.n	402a36 <udi_cdc_tx_send+0x196>
		return; // Already on going or wait next SOF to send next data
  402a30:	bf00      	nop
  402a32:	e000      	b.n	402a36 <udi_cdc_tx_send+0x196>
			return; // Wait next SOF to send next data
  402a34:	bf00      	nop
			udi_cdc_data_sent);
}
  402a36:	371c      	adds	r7, #28
  402a38:	46bd      	mov	sp, r7
  402a3a:	bd90      	pop	{r4, r7, pc}
  402a3c:	20001b34 	.word	0x20001b34
  402a40:	004048a5 	.word	0x004048a5
  402a44:	20001b30 	.word	0x20001b30
  402a48:	00404961 	.word	0x00404961
  402a4c:	00404945 	.word	0x00404945
  402a50:	00402201 	.word	0x00402201
  402a54:	20001b2c 	.word	0x20001b2c
  402a58:	20001b28 	.word	0x20001b28
  402a5c:	20001b3a 	.word	0x20001b3a
  402a60:	00402259 	.word	0x00402259
  402a64:	20001b38 	.word	0x20001b38
  402a68:	20001aa8 	.word	0x20001aa8
  402a6c:	00402821 	.word	0x00402821
  402a70:	00404e85 	.word	0x00404e85

00402a74 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
  402a74:	b580      	push	{r7, lr}
  402a76:	b086      	sub	sp, #24
  402a78:	af00      	add	r7, sp, #0
  402a7a:	4603      	mov	r3, r0
  402a7c:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;
	uint16_t pos;
	iram_size_t nb_received;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  402a7e:	2300      	movs	r3, #0
  402a80:	71fb      	strb	r3, [r7, #7]
#endif
	flags = cpu_irq_save();
  402a82:	4b10      	ldr	r3, [pc, #64]	; (402ac4 <udi_cdc_multi_get_nb_received_data+0x50>)
  402a84:	4798      	blx	r3
  402a86:	6178      	str	r0, [r7, #20]
	pos = udi_cdc_rx_pos[port];
  402a88:	79fb      	ldrb	r3, [r7, #7]
  402a8a:	4a0f      	ldr	r2, [pc, #60]	; (402ac8 <udi_cdc_multi_get_nb_received_data+0x54>)
  402a8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  402a90:	827b      	strh	r3, [r7, #18]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  402a92:	79fb      	ldrb	r3, [r7, #7]
  402a94:	79fa      	ldrb	r2, [r7, #7]
  402a96:	490d      	ldr	r1, [pc, #52]	; (402acc <udi_cdc_multi_get_nb_received_data+0x58>)
  402a98:	5c8a      	ldrb	r2, [r1, r2]
  402a9a:	b2d2      	uxtb	r2, r2
  402a9c:	4611      	mov	r1, r2
  402a9e:	4a0c      	ldr	r2, [pc, #48]	; (402ad0 <udi_cdc_multi_get_nb_received_data+0x5c>)
  402aa0:	005b      	lsls	r3, r3, #1
  402aa2:	440b      	add	r3, r1
  402aa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  402aa8:	b29b      	uxth	r3, r3
  402aaa:	461a      	mov	r2, r3
  402aac:	8a7b      	ldrh	r3, [r7, #18]
  402aae:	1ad3      	subs	r3, r2, r3
  402ab0:	60fb      	str	r3, [r7, #12]
	cpu_irq_restore(flags);
  402ab2:	6978      	ldr	r0, [r7, #20]
  402ab4:	4b07      	ldr	r3, [pc, #28]	; (402ad4 <udi_cdc_multi_get_nb_received_data+0x60>)
  402ab6:	4798      	blx	r3
	return nb_received;
  402ab8:	68fb      	ldr	r3, [r7, #12]
}
  402aba:	4618      	mov	r0, r3
  402abc:	3718      	adds	r7, #24
  402abe:	46bd      	mov	sp, r7
  402ac0:	bd80      	pop	{r7, pc}
  402ac2:	bf00      	nop
  402ac4:	00402201 	.word	0x00402201
  402ac8:	20001aa0 	.word	0x20001aa0
  402acc:	20001a9c 	.word	0x20001a9c
  402ad0:	20001a98 	.word	0x20001a98
  402ad4:	00402259 	.word	0x00402259

00402ad8 <udi_cdc_get_nb_received_data>:

iram_size_t udi_cdc_get_nb_received_data(void)
{
  402ad8:	b580      	push	{r7, lr}
  402ada:	af00      	add	r7, sp, #0
	return udi_cdc_multi_get_nb_received_data(0);
  402adc:	2000      	movs	r0, #0
  402ade:	4b02      	ldr	r3, [pc, #8]	; (402ae8 <udi_cdc_get_nb_received_data+0x10>)
  402ae0:	4798      	blx	r3
  402ae2:	4603      	mov	r3, r0
}
  402ae4:	4618      	mov	r0, r3
  402ae6:	bd80      	pop	{r7, pc}
  402ae8:	00402a75 	.word	0x00402a75

00402aec <udi_cdc_multi_is_rx_ready>:

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
  402aec:	b580      	push	{r7, lr}
  402aee:	b082      	sub	sp, #8
  402af0:	af00      	add	r7, sp, #0
  402af2:	4603      	mov	r3, r0
  402af4:	71fb      	strb	r3, [r7, #7]
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
  402af6:	79fb      	ldrb	r3, [r7, #7]
  402af8:	4618      	mov	r0, r3
  402afa:	4b06      	ldr	r3, [pc, #24]	; (402b14 <udi_cdc_multi_is_rx_ready+0x28>)
  402afc:	4798      	blx	r3
  402afe:	4603      	mov	r3, r0
  402b00:	2b00      	cmp	r3, #0
  402b02:	bf14      	ite	ne
  402b04:	2301      	movne	r3, #1
  402b06:	2300      	moveq	r3, #0
  402b08:	b2db      	uxtb	r3, r3
}
  402b0a:	4618      	mov	r0, r3
  402b0c:	3708      	adds	r7, #8
  402b0e:	46bd      	mov	sp, r7
  402b10:	bd80      	pop	{r7, pc}
  402b12:	bf00      	nop
  402b14:	00402a75 	.word	0x00402a75

00402b18 <udi_cdc_is_rx_ready>:

bool udi_cdc_is_rx_ready(void)
{
  402b18:	b580      	push	{r7, lr}
  402b1a:	af00      	add	r7, sp, #0
	return udi_cdc_multi_is_rx_ready(0);
  402b1c:	2000      	movs	r0, #0
  402b1e:	4b02      	ldr	r3, [pc, #8]	; (402b28 <udi_cdc_is_rx_ready+0x10>)
  402b20:	4798      	blx	r3
  402b22:	4603      	mov	r3, r0
}
  402b24:	4618      	mov	r0, r3
  402b26:	bd80      	pop	{r7, pc}
  402b28:	00402aed 	.word	0x00402aed

00402b2c <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
  402b2c:	b580      	push	{r7, lr}
  402b2e:	b088      	sub	sp, #32
  402b30:	af00      	add	r7, sp, #0
  402b32:	4603      	mov	r3, r0
  402b34:	60b9      	str	r1, [r7, #8]
  402b36:	607a      	str	r2, [r7, #4]
  402b38:	73fb      	strb	r3, [r7, #15]
	irqflags_t flags;
	uint8_t *ptr_buf = (uint8_t *)buf;
  402b3a:	68bb      	ldr	r3, [r7, #8]
  402b3c:	61fb      	str	r3, [r7, #28]
	uint16_t pos;
	uint8_t buf_sel;
	bool again;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  402b3e:	2300      	movs	r3, #0
  402b40:	73fb      	strb	r3, [r7, #15]
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
  402b42:	4b36      	ldr	r3, [pc, #216]	; (402c1c <udi_cdc_multi_read_buf+0xf0>)
  402b44:	4798      	blx	r3
  402b46:	6178      	str	r0, [r7, #20]
	pos = udi_cdc_rx_pos[port];
  402b48:	7bfb      	ldrb	r3, [r7, #15]
  402b4a:	4a35      	ldr	r2, [pc, #212]	; (402c20 <udi_cdc_multi_read_buf+0xf4>)
  402b4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  402b50:	827b      	strh	r3, [r7, #18]
	buf_sel = udi_cdc_rx_buf_sel[port];
  402b52:	7bfb      	ldrb	r3, [r7, #15]
  402b54:	4a33      	ldr	r2, [pc, #204]	; (402c24 <udi_cdc_multi_read_buf+0xf8>)
  402b56:	5cd3      	ldrb	r3, [r2, r3]
  402b58:	747b      	strb	r3, [r7, #17]
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
  402b5a:	7bfa      	ldrb	r2, [r7, #15]
  402b5c:	7c7b      	ldrb	r3, [r7, #17]
  402b5e:	4932      	ldr	r1, [pc, #200]	; (402c28 <udi_cdc_multi_read_buf+0xfc>)
  402b60:	0052      	lsls	r2, r2, #1
  402b62:	4413      	add	r3, r2
  402b64:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
  402b68:	b29b      	uxth	r3, r3
  402b6a:	8a7a      	ldrh	r2, [r7, #18]
  402b6c:	429a      	cmp	r2, r3
  402b6e:	bf2c      	ite	cs
  402b70:	2301      	movcs	r3, #1
  402b72:	2300      	movcc	r3, #0
  402b74:	743b      	strb	r3, [r7, #16]
	cpu_irq_restore(flags);
  402b76:	6978      	ldr	r0, [r7, #20]
  402b78:	4b2c      	ldr	r3, [pc, #176]	; (402c2c <udi_cdc_multi_read_buf+0x100>)
  402b7a:	4798      	blx	r3
	while (again) {
  402b7c:	7c3b      	ldrb	r3, [r7, #16]
  402b7e:	2b00      	cmp	r3, #0
  402b80:	d009      	beq.n	402b96 <udi_cdc_multi_read_buf+0x6a>
		if (!udi_cdc_data_running) {
  402b82:	4b2b      	ldr	r3, [pc, #172]	; (402c30 <udi_cdc_multi_read_buf+0x104>)
  402b84:	781b      	ldrb	r3, [r3, #0]
  402b86:	b2db      	uxtb	r3, r3
  402b88:	f083 0301 	eor.w	r3, r3, #1
  402b8c:	b2db      	uxtb	r3, r3
  402b8e:	2b00      	cmp	r3, #0
  402b90:	d0d7      	beq.n	402b42 <udi_cdc_multi_read_buf+0x16>
			return size;
  402b92:	687b      	ldr	r3, [r7, #4]
  402b94:	e03d      	b.n	402c12 <udi_cdc_multi_read_buf+0xe6>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
  402b96:	7bfa      	ldrb	r2, [r7, #15]
  402b98:	7c7b      	ldrb	r3, [r7, #17]
  402b9a:	4923      	ldr	r1, [pc, #140]	; (402c28 <udi_cdc_multi_read_buf+0xfc>)
  402b9c:	0052      	lsls	r2, r2, #1
  402b9e:	4413      	add	r3, r2
  402ba0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
  402ba4:	b29b      	uxth	r3, r3
  402ba6:	461a      	mov	r2, r3
  402ba8:	8a7b      	ldrh	r3, [r7, #18]
  402baa:	1ad3      	subs	r3, r2, r3
  402bac:	61bb      	str	r3, [r7, #24]
	if (copy_nb>size) {
  402bae:	69ba      	ldr	r2, [r7, #24]
  402bb0:	687b      	ldr	r3, [r7, #4]
  402bb2:	429a      	cmp	r2, r3
  402bb4:	d901      	bls.n	402bba <udi_cdc_multi_read_buf+0x8e>
		copy_nb = size;
  402bb6:	687b      	ldr	r3, [r7, #4]
  402bb8:	61bb      	str	r3, [r7, #24]
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
  402bba:	7bf9      	ldrb	r1, [r7, #15]
  402bbc:	7c7a      	ldrb	r2, [r7, #17]
  402bbe:	8a7b      	ldrh	r3, [r7, #18]
  402bc0:	0049      	lsls	r1, r1, #1
  402bc2:	440a      	add	r2, r1
  402bc4:	0192      	lsls	r2, r2, #6
  402bc6:	4413      	add	r3, r2
  402bc8:	4a1a      	ldr	r2, [pc, #104]	; (402c34 <udi_cdc_multi_read_buf+0x108>)
  402bca:	4413      	add	r3, r2
  402bcc:	69ba      	ldr	r2, [r7, #24]
  402bce:	4619      	mov	r1, r3
  402bd0:	69f8      	ldr	r0, [r7, #28]
  402bd2:	4b19      	ldr	r3, [pc, #100]	; (402c38 <udi_cdc_multi_read_buf+0x10c>)
  402bd4:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
  402bd6:	7bfb      	ldrb	r3, [r7, #15]
  402bd8:	7bfa      	ldrb	r2, [r7, #15]
  402bda:	4911      	ldr	r1, [pc, #68]	; (402c20 <udi_cdc_multi_read_buf+0xf4>)
  402bdc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
  402be0:	b291      	uxth	r1, r2
  402be2:	69ba      	ldr	r2, [r7, #24]
  402be4:	b292      	uxth	r2, r2
  402be6:	440a      	add	r2, r1
  402be8:	b291      	uxth	r1, r2
  402bea:	4a0d      	ldr	r2, [pc, #52]	; (402c20 <udi_cdc_multi_read_buf+0xf4>)
  402bec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	ptr_buf += copy_nb;
  402bf0:	69fa      	ldr	r2, [r7, #28]
  402bf2:	69bb      	ldr	r3, [r7, #24]
  402bf4:	4413      	add	r3, r2
  402bf6:	61fb      	str	r3, [r7, #28]
	size -= copy_nb;
  402bf8:	687a      	ldr	r2, [r7, #4]
  402bfa:	69bb      	ldr	r3, [r7, #24]
  402bfc:	1ad3      	subs	r3, r2, r3
  402bfe:	607b      	str	r3, [r7, #4]
	udi_cdc_rx_start(port);
  402c00:	7bfb      	ldrb	r3, [r7, #15]
  402c02:	4618      	mov	r0, r3
  402c04:	4b0d      	ldr	r3, [pc, #52]	; (402c3c <udi_cdc_multi_read_buf+0x110>)
  402c06:	4798      	blx	r3

	if (size) {
  402c08:	687b      	ldr	r3, [r7, #4]
  402c0a:	2b00      	cmp	r3, #0
  402c0c:	d000      	beq.n	402c10 <udi_cdc_multi_read_buf+0xe4>
		goto udi_cdc_read_buf_loop_wait;
  402c0e:	e798      	b.n	402b42 <udi_cdc_multi_read_buf+0x16>
	}
	return 0;
  402c10:	2300      	movs	r3, #0
}
  402c12:	4618      	mov	r0, r3
  402c14:	3720      	adds	r7, #32
  402c16:	46bd      	mov	sp, r7
  402c18:	bd80      	pop	{r7, pc}
  402c1a:	bf00      	nop
  402c1c:	00402201 	.word	0x00402201
  402c20:	20001aa0 	.word	0x20001aa0
  402c24:	20001a9c 	.word	0x20001a9c
  402c28:	20001a98 	.word	0x20001a98
  402c2c:	00402259 	.word	0x00402259
  402c30:	20001a14 	.word	0x20001a14
  402c34:	20001a18 	.word	0x20001a18
  402c38:	00408d85 	.word	0x00408d85
  402c3c:	0040267d 	.word	0x0040267d

00402c40 <udi_cdc_read_buf>:
{
	return udi_cdc_multi_read_no_polling(0, buf, size);
}

iram_size_t udi_cdc_read_buf(void* buf, iram_size_t size)
{
  402c40:	b580      	push	{r7, lr}
  402c42:	b082      	sub	sp, #8
  402c44:	af00      	add	r7, sp, #0
  402c46:	6078      	str	r0, [r7, #4]
  402c48:	6039      	str	r1, [r7, #0]
	return udi_cdc_multi_read_buf(0, buf, size);
  402c4a:	683a      	ldr	r2, [r7, #0]
  402c4c:	6879      	ldr	r1, [r7, #4]
  402c4e:	2000      	movs	r0, #0
  402c50:	4b03      	ldr	r3, [pc, #12]	; (402c60 <udi_cdc_read_buf+0x20>)
  402c52:	4798      	blx	r3
  402c54:	4603      	mov	r3, r0
}
  402c56:	4618      	mov	r0, r3
  402c58:	3708      	adds	r7, #8
  402c5a:	46bd      	mov	sp, r7
  402c5c:	bd80      	pop	{r7, pc}
  402c5e:	bf00      	nop
  402c60:	00402b2d 	.word	0x00402b2d

00402c64 <udi_cdc_multi_get_free_tx_buffer>:

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
  402c64:	b580      	push	{r7, lr}
  402c66:	b086      	sub	sp, #24
  402c68:	af00      	add	r7, sp, #0
  402c6a:	4603      	mov	r3, r0
  402c6c:	71fb      	strb	r3, [r7, #7]
	irqflags_t flags;
	iram_size_t buf_sel_nb, retval;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  402c6e:	2300      	movs	r3, #0
  402c70:	71fb      	strb	r3, [r7, #7]
#endif

	flags = cpu_irq_save();
  402c72:	4b20      	ldr	r3, [pc, #128]	; (402cf4 <udi_cdc_multi_get_free_tx_buffer+0x90>)
  402c74:	4798      	blx	r3
  402c76:	6138      	str	r0, [r7, #16]
	buf_sel = udi_cdc_tx_buf_sel[port];
  402c78:	79fb      	ldrb	r3, [r7, #7]
  402c7a:	4a1f      	ldr	r2, [pc, #124]	; (402cf8 <udi_cdc_multi_get_free_tx_buffer+0x94>)
  402c7c:	5cd3      	ldrb	r3, [r2, r3]
  402c7e:	73fb      	strb	r3, [r7, #15]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
  402c80:	79fa      	ldrb	r2, [r7, #7]
  402c82:	7bfb      	ldrb	r3, [r7, #15]
  402c84:	491d      	ldr	r1, [pc, #116]	; (402cfc <udi_cdc_multi_get_free_tx_buffer+0x98>)
  402c86:	0052      	lsls	r2, r2, #1
  402c88:	4413      	add	r3, r2
  402c8a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
  402c8e:	617b      	str	r3, [r7, #20]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
  402c90:	697b      	ldr	r3, [r7, #20]
  402c92:	2b40      	cmp	r3, #64	; 0x40
  402c94:	d121      	bne.n	402cda <udi_cdc_multi_get_free_tx_buffer+0x76>
		if ((!udi_cdc_tx_trans_ongoing[port])
  402c96:	79fb      	ldrb	r3, [r7, #7]
  402c98:	4a19      	ldr	r2, [pc, #100]	; (402d00 <udi_cdc_multi_get_free_tx_buffer+0x9c>)
  402c9a:	5cd3      	ldrb	r3, [r2, r3]
  402c9c:	b2db      	uxtb	r3, r3
  402c9e:	f083 0301 	eor.w	r3, r3, #1
  402ca2:	b2db      	uxtb	r3, r3
  402ca4:	2b00      	cmp	r3, #0
  402ca6:	d018      	beq.n	402cda <udi_cdc_multi_get_free_tx_buffer+0x76>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
  402ca8:	79fb      	ldrb	r3, [r7, #7]
  402caa:	4a16      	ldr	r2, [pc, #88]	; (402d04 <udi_cdc_multi_get_free_tx_buffer+0xa0>)
  402cac:	5cd3      	ldrb	r3, [r2, r3]
  402cae:	b2db      	uxtb	r3, r3
  402cb0:	f083 0301 	eor.w	r3, r3, #1
  402cb4:	b2db      	uxtb	r3, r3
  402cb6:	2b00      	cmp	r3, #0
  402cb8:	d00f      	beq.n	402cda <udi_cdc_multi_get_free_tx_buffer+0x76>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
  402cba:	79fb      	ldrb	r3, [r7, #7]
  402cbc:	4a11      	ldr	r2, [pc, #68]	; (402d04 <udi_cdc_multi_get_free_tx_buffer+0xa0>)
  402cbe:	2101      	movs	r1, #1
  402cc0:	54d1      	strb	r1, [r2, r3]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
  402cc2:	79fb      	ldrb	r3, [r7, #7]
  402cc4:	7bfa      	ldrb	r2, [r7, #15]
  402cc6:	2a00      	cmp	r2, #0
  402cc8:	bf0c      	ite	eq
  402cca:	2201      	moveq	r2, #1
  402ccc:	2200      	movne	r2, #0
  402cce:	b2d2      	uxtb	r2, r2
  402cd0:	4611      	mov	r1, r2
  402cd2:	4a09      	ldr	r2, [pc, #36]	; (402cf8 <udi_cdc_multi_get_free_tx_buffer+0x94>)
  402cd4:	54d1      	strb	r1, [r2, r3]
			buf_sel_nb = 0;
  402cd6:	2300      	movs	r3, #0
  402cd8:	617b      	str	r3, [r7, #20]
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
  402cda:	697b      	ldr	r3, [r7, #20]
  402cdc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  402ce0:	60bb      	str	r3, [r7, #8]
	cpu_irq_restore(flags);
  402ce2:	6938      	ldr	r0, [r7, #16]
  402ce4:	4b08      	ldr	r3, [pc, #32]	; (402d08 <udi_cdc_multi_get_free_tx_buffer+0xa4>)
  402ce6:	4798      	blx	r3
	return retval;
  402ce8:	68bb      	ldr	r3, [r7, #8]
}
  402cea:	4618      	mov	r0, r3
  402cec:	3718      	adds	r7, #24
  402cee:	46bd      	mov	sp, r7
  402cf0:	bd80      	pop	{r7, pc}
  402cf2:	bf00      	nop
  402cf4:	00402201 	.word	0x00402201
  402cf8:	20001b2c 	.word	0x20001b2c
  402cfc:	20001b28 	.word	0x20001b28
  402d00:	20001b34 	.word	0x20001b34
  402d04:	20001b38 	.word	0x20001b38
  402d08:	00402259 	.word	0x00402259

00402d0c <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
  402d0c:	b580      	push	{r7, lr}
  402d0e:	b082      	sub	sp, #8
  402d10:	af00      	add	r7, sp, #0
  402d12:	4603      	mov	r3, r0
  402d14:	71fb      	strb	r3, [r7, #7]
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
  402d16:	79fb      	ldrb	r3, [r7, #7]
  402d18:	4618      	mov	r0, r3
  402d1a:	4b06      	ldr	r3, [pc, #24]	; (402d34 <udi_cdc_multi_is_tx_ready+0x28>)
  402d1c:	4798      	blx	r3
  402d1e:	4603      	mov	r3, r0
  402d20:	2b00      	cmp	r3, #0
  402d22:	bf14      	ite	ne
  402d24:	2301      	movne	r3, #1
  402d26:	2300      	moveq	r3, #0
  402d28:	b2db      	uxtb	r3, r3
}
  402d2a:	4618      	mov	r0, r3
  402d2c:	3708      	adds	r7, #8
  402d2e:	46bd      	mov	sp, r7
  402d30:	bd80      	pop	{r7, pc}
  402d32:	bf00      	nop
  402d34:	00402c65 	.word	0x00402c65

00402d38 <udi_cdc_is_tx_ready>:

bool udi_cdc_is_tx_ready(void)
{
  402d38:	b580      	push	{r7, lr}
  402d3a:	af00      	add	r7, sp, #0
	return udi_cdc_multi_is_tx_ready(0);
  402d3c:	2000      	movs	r0, #0
  402d3e:	4b02      	ldr	r3, [pc, #8]	; (402d48 <udi_cdc_is_tx_ready+0x10>)
  402d40:	4798      	blx	r3
  402d42:	4603      	mov	r3, r0
}
  402d44:	4618      	mov	r0, r3
  402d46:	bd80      	pop	{r7, pc}
  402d48:	00402d0d 	.word	0x00402d0d

00402d4c <udi_cdc_multi_write_buf>:
{
	return udi_cdc_multi_putc(0, value);
}

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
  402d4c:	b580      	push	{r7, lr}
  402d4e:	b088      	sub	sp, #32
  402d50:	af00      	add	r7, sp, #0
  402d52:	4603      	mov	r3, r0
  402d54:	60b9      	str	r1, [r7, #8]
  402d56:	607a      	str	r2, [r7, #4]
  402d58:	73fb      	strb	r3, [r7, #15]
	irqflags_t flags;
	uint8_t buf_sel;
	uint16_t buf_nb;
	iram_size_t copy_nb;
	uint8_t *ptr_buf = (uint8_t *)buf;
  402d5a:	68bb      	ldr	r3, [r7, #8]
  402d5c:	61bb      	str	r3, [r7, #24]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
  402d5e:	2300      	movs	r3, #0
  402d60:	73fb      	strb	r3, [r7, #15]
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
  402d62:	7bfa      	ldrb	r2, [r7, #15]
  402d64:	4933      	ldr	r1, [pc, #204]	; (402e34 <udi_cdc_multi_write_buf+0xe8>)
  402d66:	4613      	mov	r3, r2
  402d68:	00db      	lsls	r3, r3, #3
  402d6a:	1a9b      	subs	r3, r3, r2
  402d6c:	440b      	add	r3, r1
  402d6e:	3306      	adds	r3, #6
  402d70:	781b      	ldrb	r3, [r3, #0]
  402d72:	2b09      	cmp	r3, #9
  402d74:	d102      	bne.n	402d7c <udi_cdc_multi_write_buf+0x30>
		size *=2;
  402d76:	687b      	ldr	r3, [r7, #4]
  402d78:	005b      	lsls	r3, r3, #1
  402d7a:	607b      	str	r3, [r7, #4]
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
  402d7c:	7bfb      	ldrb	r3, [r7, #15]
  402d7e:	4618      	mov	r0, r3
  402d80:	4b2d      	ldr	r3, [pc, #180]	; (402e38 <udi_cdc_multi_write_buf+0xec>)
  402d82:	4798      	blx	r3
  402d84:	4603      	mov	r3, r0
  402d86:	f083 0301 	eor.w	r3, r3, #1
  402d8a:	b2db      	uxtb	r3, r3
  402d8c:	2b00      	cmp	r3, #0
  402d8e:	d009      	beq.n	402da4 <udi_cdc_multi_write_buf+0x58>
		if (!udi_cdc_data_running) {
  402d90:	4b2a      	ldr	r3, [pc, #168]	; (402e3c <udi_cdc_multi_write_buf+0xf0>)
  402d92:	781b      	ldrb	r3, [r3, #0]
  402d94:	b2db      	uxtb	r3, r3
  402d96:	f083 0301 	eor.w	r3, r3, #1
  402d9a:	b2db      	uxtb	r3, r3
  402d9c:	2b00      	cmp	r3, #0
  402d9e:	d0ed      	beq.n	402d7c <udi_cdc_multi_write_buf+0x30>
			return size;
  402da0:	687b      	ldr	r3, [r7, #4]
  402da2:	e043      	b.n	402e2c <udi_cdc_multi_write_buf+0xe0>
		}
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
  402da4:	4b26      	ldr	r3, [pc, #152]	; (402e40 <udi_cdc_multi_write_buf+0xf4>)
  402da6:	4798      	blx	r3
  402da8:	6178      	str	r0, [r7, #20]
	buf_sel = udi_cdc_tx_buf_sel[port];
  402daa:	7bfb      	ldrb	r3, [r7, #15]
  402dac:	4a25      	ldr	r2, [pc, #148]	; (402e44 <udi_cdc_multi_write_buf+0xf8>)
  402dae:	5cd3      	ldrb	r3, [r2, r3]
  402db0:	74fb      	strb	r3, [r7, #19]
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
  402db2:	7bfa      	ldrb	r2, [r7, #15]
  402db4:	7cfb      	ldrb	r3, [r7, #19]
  402db6:	4924      	ldr	r1, [pc, #144]	; (402e48 <udi_cdc_multi_write_buf+0xfc>)
  402db8:	0052      	lsls	r2, r2, #1
  402dba:	4413      	add	r3, r2
  402dbc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
  402dc0:	823b      	strh	r3, [r7, #16]
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
  402dc2:	8a3b      	ldrh	r3, [r7, #16]
  402dc4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  402dc8:	61fb      	str	r3, [r7, #28]
	if (copy_nb > size) {
  402dca:	69fa      	ldr	r2, [r7, #28]
  402dcc:	687b      	ldr	r3, [r7, #4]
  402dce:	429a      	cmp	r2, r3
  402dd0:	d901      	bls.n	402dd6 <udi_cdc_multi_write_buf+0x8a>
		copy_nb = size;
  402dd2:	687b      	ldr	r3, [r7, #4]
  402dd4:	61fb      	str	r3, [r7, #28]
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
  402dd6:	7bf9      	ldrb	r1, [r7, #15]
  402dd8:	7cfa      	ldrb	r2, [r7, #19]
  402dda:	8a3b      	ldrh	r3, [r7, #16]
  402ddc:	0049      	lsls	r1, r1, #1
  402dde:	440a      	add	r2, r1
  402de0:	0192      	lsls	r2, r2, #6
  402de2:	4413      	add	r3, r2
  402de4:	4a19      	ldr	r2, [pc, #100]	; (402e4c <udi_cdc_multi_write_buf+0x100>)
  402de6:	4413      	add	r3, r2
  402de8:	69fa      	ldr	r2, [r7, #28]
  402dea:	69b9      	ldr	r1, [r7, #24]
  402dec:	4618      	mov	r0, r3
  402dee:	4b18      	ldr	r3, [pc, #96]	; (402e50 <udi_cdc_multi_write_buf+0x104>)
  402df0:	4798      	blx	r3
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
  402df2:	7bfa      	ldrb	r2, [r7, #15]
  402df4:	7cfb      	ldrb	r3, [r7, #19]
  402df6:	69f9      	ldr	r1, [r7, #28]
  402df8:	b288      	uxth	r0, r1
  402dfa:	8a39      	ldrh	r1, [r7, #16]
  402dfc:	4401      	add	r1, r0
  402dfe:	b288      	uxth	r0, r1
  402e00:	4911      	ldr	r1, [pc, #68]	; (402e48 <udi_cdc_multi_write_buf+0xfc>)
  402e02:	0052      	lsls	r2, r2, #1
  402e04:	4413      	add	r3, r2
  402e06:	4602      	mov	r2, r0
  402e08:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	cpu_irq_restore(flags);
  402e0c:	6978      	ldr	r0, [r7, #20]
  402e0e:	4b11      	ldr	r3, [pc, #68]	; (402e54 <udi_cdc_multi_write_buf+0x108>)
  402e10:	4798      	blx	r3

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
  402e12:	69ba      	ldr	r2, [r7, #24]
  402e14:	69fb      	ldr	r3, [r7, #28]
  402e16:	4413      	add	r3, r2
  402e18:	61bb      	str	r3, [r7, #24]
	size -= copy_nb;
  402e1a:	687a      	ldr	r2, [r7, #4]
  402e1c:	69fb      	ldr	r3, [r7, #28]
  402e1e:	1ad3      	subs	r3, r2, r3
  402e20:	607b      	str	r3, [r7, #4]

	if (size) {
  402e22:	687b      	ldr	r3, [r7, #4]
  402e24:	2b00      	cmp	r3, #0
  402e26:	d000      	beq.n	402e2a <udi_cdc_multi_write_buf+0xde>
		goto udi_cdc_write_buf_loop_wait;
  402e28:	e7a8      	b.n	402d7c <udi_cdc_multi_write_buf+0x30>
	}

	return 0;
  402e2a:	2300      	movs	r3, #0
}
  402e2c:	4618      	mov	r0, r3
  402e2e:	3720      	adds	r7, #32
  402e30:	46bd      	mov	sp, r7
  402e32:	bd80      	pop	{r7, pc}
  402e34:	200019fc 	.word	0x200019fc
  402e38:	00402d0d 	.word	0x00402d0d
  402e3c:	20001a14 	.word	0x20001a14
  402e40:	00402201 	.word	0x00402201
  402e44:	20001b2c 	.word	0x20001b2c
  402e48:	20001b28 	.word	0x20001b28
  402e4c:	20001aa8 	.word	0x20001aa8
  402e50:	00408d85 	.word	0x00408d85
  402e54:	00402259 	.word	0x00402259

00402e58 <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
  402e58:	b580      	push	{r7, lr}
  402e5a:	b082      	sub	sp, #8
  402e5c:	af00      	add	r7, sp, #0
  402e5e:	6078      	str	r0, [r7, #4]
  402e60:	6039      	str	r1, [r7, #0]
	return udi_cdc_multi_write_buf(0, buf, size);
  402e62:	683a      	ldr	r2, [r7, #0]
  402e64:	6879      	ldr	r1, [r7, #4]
  402e66:	2000      	movs	r0, #0
  402e68:	4b03      	ldr	r3, [pc, #12]	; (402e78 <udi_cdc_write_buf+0x20>)
  402e6a:	4798      	blx	r3
  402e6c:	4603      	mov	r3, r0
}
  402e6e:	4618      	mov	r0, r3
  402e70:	3708      	adds	r7, #8
  402e72:	46bd      	mov	sp, r7
  402e74:	bd80      	pop	{r7, pc}
  402e76:	bf00      	nop
  402e78:	00402d4d 	.word	0x00402d4d

00402e7c <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
  402e7c:	b480      	push	{r7}
  402e7e:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
  402e80:	4b06      	ldr	r3, [pc, #24]	; (402e9c <udc_get_eof_conf+0x20>)
  402e82:	681b      	ldr	r3, [r3, #0]
  402e84:	681b      	ldr	r3, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  402e86:	4a05      	ldr	r2, [pc, #20]	; (402e9c <udc_get_eof_conf+0x20>)
  402e88:	6812      	ldr	r2, [r2, #0]
  402e8a:	6812      	ldr	r2, [r2, #0]
  402e8c:	8852      	ldrh	r2, [r2, #2]
  402e8e:	b292      	uxth	r2, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  402e90:	4413      	add	r3, r2
}
  402e92:	4618      	mov	r0, r3
  402e94:	46bd      	mov	sp, r7
  402e96:	bc80      	pop	{r7}
  402e98:	4770      	bx	lr
  402e9a:	bf00      	nop
  402e9c:	20001b48 	.word	0x20001b48

00402ea0 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
  402ea0:	b580      	push	{r7, lr}
  402ea2:	b084      	sub	sp, #16
  402ea4:	af00      	add	r7, sp, #0
  402ea6:	6078      	str	r0, [r7, #4]
  402ea8:	460b      	mov	r3, r1
  402eaa:	70fb      	strb	r3, [r7, #3]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
  402eac:	4b12      	ldr	r3, [pc, #72]	; (402ef8 <udc_next_desc_in_iface+0x58>)
  402eae:	4798      	blx	r3
  402eb0:	60f8      	str	r0, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
  402eb2:	687b      	ldr	r3, [r7, #4]
  402eb4:	781b      	ldrb	r3, [r3, #0]
  402eb6:	461a      	mov	r2, r3
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  402eb8:	687b      	ldr	r3, [r7, #4]
  402eba:	4413      	add	r3, r2
  402ebc:	607b      	str	r3, [r7, #4]
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  402ebe:	e010      	b.n	402ee2 <udc_next_desc_in_iface+0x42>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  402ec0:	687b      	ldr	r3, [r7, #4]
  402ec2:	785b      	ldrb	r3, [r3, #1]
  402ec4:	2b04      	cmp	r3, #4
  402ec6:	d011      	beq.n	402eec <udc_next_desc_in_iface+0x4c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  402ec8:	687b      	ldr	r3, [r7, #4]
  402eca:	785b      	ldrb	r3, [r3, #1]
  402ecc:	78fa      	ldrb	r2, [r7, #3]
  402ece:	429a      	cmp	r2, r3
  402ed0:	d101      	bne.n	402ed6 <udc_next_desc_in_iface+0x36>
			return desc; // Specific descriptor found
  402ed2:	687b      	ldr	r3, [r7, #4]
  402ed4:	e00c      	b.n	402ef0 <udc_next_desc_in_iface+0x50>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
  402ed6:	687b      	ldr	r3, [r7, #4]
  402ed8:	781b      	ldrb	r3, [r3, #0]
  402eda:	461a      	mov	r2, r3
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  402edc:	687b      	ldr	r3, [r7, #4]
  402ede:	4413      	add	r3, r2
  402ee0:	607b      	str	r3, [r7, #4]
	while (ptr_eof_desc > desc) {
  402ee2:	68fa      	ldr	r2, [r7, #12]
  402ee4:	687b      	ldr	r3, [r7, #4]
  402ee6:	429a      	cmp	r2, r3
  402ee8:	d8ea      	bhi.n	402ec0 <udc_next_desc_in_iface+0x20>
  402eea:	e000      	b.n	402eee <udc_next_desc_in_iface+0x4e>
			break; // End of global interface descriptor
  402eec:	bf00      	nop
	}
	return NULL; // No specific descriptor found
  402eee:	2300      	movs	r3, #0
}
  402ef0:	4618      	mov	r0, r3
  402ef2:	3710      	adds	r7, #16
  402ef4:	46bd      	mov	sp, r7
  402ef6:	bd80      	pop	{r7, pc}
  402ef8:	00402e7d 	.word	0x00402e7d

00402efc <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
  402efc:	b580      	push	{r7, lr}
  402efe:	b084      	sub	sp, #16
  402f00:	af00      	add	r7, sp, #0
  402f02:	4603      	mov	r3, r0
  402f04:	460a      	mov	r2, r1
  402f06:	71fb      	strb	r3, [r7, #7]
  402f08:	4613      	mov	r3, r2
  402f0a:	71bb      	strb	r3, [r7, #6]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
  402f0c:	4b1e      	ldr	r3, [pc, #120]	; (402f88 <udc_update_iface_desc+0x8c>)
  402f0e:	781b      	ldrb	r3, [r3, #0]
  402f10:	2b00      	cmp	r3, #0
  402f12:	d101      	bne.n	402f18 <udc_update_iface_desc+0x1c>
		return false;
  402f14:	2300      	movs	r3, #0
  402f16:	e032      	b.n	402f7e <udc_update_iface_desc+0x82>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  402f18:	4b1c      	ldr	r3, [pc, #112]	; (402f8c <udc_update_iface_desc+0x90>)
  402f1a:	681b      	ldr	r3, [r3, #0]
  402f1c:	681b      	ldr	r3, [r3, #0]
  402f1e:	791b      	ldrb	r3, [r3, #4]
  402f20:	79fa      	ldrb	r2, [r7, #7]
  402f22:	429a      	cmp	r2, r3
  402f24:	d301      	bcc.n	402f2a <udc_update_iface_desc+0x2e>
		return false;
  402f26:	2300      	movs	r3, #0
  402f28:	e029      	b.n	402f7e <udc_update_iface_desc+0x82>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
  402f2a:	4b18      	ldr	r3, [pc, #96]	; (402f8c <udc_update_iface_desc+0x90>)
  402f2c:	681b      	ldr	r3, [r3, #0]
  402f2e:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  402f30:	4a17      	ldr	r2, [pc, #92]	; (402f90 <udc_update_iface_desc+0x94>)
  402f32:	6013      	str	r3, [r2, #0]

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
  402f34:	4b17      	ldr	r3, [pc, #92]	; (402f94 <udc_update_iface_desc+0x98>)
  402f36:	4798      	blx	r3
  402f38:	60f8      	str	r0, [r7, #12]
	while (ptr_end_desc >
  402f3a:	e01a      	b.n	402f72 <udc_update_iface_desc+0x76>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  402f3c:	4b14      	ldr	r3, [pc, #80]	; (402f90 <udc_update_iface_desc+0x94>)
  402f3e:	681b      	ldr	r3, [r3, #0]
  402f40:	785b      	ldrb	r3, [r3, #1]
  402f42:	2b04      	cmp	r3, #4
  402f44:	d10d      	bne.n	402f62 <udc_update_iface_desc+0x66>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  402f46:	4b12      	ldr	r3, [pc, #72]	; (402f90 <udc_update_iface_desc+0x94>)
  402f48:	681b      	ldr	r3, [r3, #0]
  402f4a:	789b      	ldrb	r3, [r3, #2]
  402f4c:	79fa      	ldrb	r2, [r7, #7]
  402f4e:	429a      	cmp	r2, r3
  402f50:	d107      	bne.n	402f62 <udc_update_iface_desc+0x66>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
  402f52:	4b0f      	ldr	r3, [pc, #60]	; (402f90 <udc_update_iface_desc+0x94>)
  402f54:	681b      	ldr	r3, [r3, #0]
  402f56:	78db      	ldrb	r3, [r3, #3]
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  402f58:	79ba      	ldrb	r2, [r7, #6]
  402f5a:	429a      	cmp	r2, r3
  402f5c:	d101      	bne.n	402f62 <udc_update_iface_desc+0x66>
				return true; // Interface found
  402f5e:	2301      	movs	r3, #1
  402f60:	e00d      	b.n	402f7e <udc_update_iface_desc+0x82>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  402f62:	4b0b      	ldr	r3, [pc, #44]	; (402f90 <udc_update_iface_desc+0x94>)
  402f64:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
  402f66:	4a0a      	ldr	r2, [pc, #40]	; (402f90 <udc_update_iface_desc+0x94>)
  402f68:	6812      	ldr	r2, [r2, #0]
  402f6a:	7812      	ldrb	r2, [r2, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  402f6c:	4413      	add	r3, r2
  402f6e:	4a08      	ldr	r2, [pc, #32]	; (402f90 <udc_update_iface_desc+0x94>)
  402f70:	6013      	str	r3, [r2, #0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
  402f72:	4b07      	ldr	r3, [pc, #28]	; (402f90 <udc_update_iface_desc+0x94>)
  402f74:	681b      	ldr	r3, [r3, #0]
	while (ptr_end_desc >
  402f76:	68fa      	ldr	r2, [r7, #12]
  402f78:	429a      	cmp	r2, r3
  402f7a:	d8df      	bhi.n	402f3c <udc_update_iface_desc+0x40>
	}
	return false; // Interface not found
  402f7c:	2300      	movs	r3, #0
}
  402f7e:	4618      	mov	r0, r3
  402f80:	3710      	adds	r7, #16
  402f82:	46bd      	mov	sp, r7
  402f84:	bd80      	pop	{r7, pc}
  402f86:	bf00      	nop
  402f88:	20001b44 	.word	0x20001b44
  402f8c:	20001b48 	.word	0x20001b48
  402f90:	20001b4c 	.word	0x20001b4c
  402f94:	00402e7d 	.word	0x00402e7d

00402f98 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
  402f98:	b580      	push	{r7, lr}
  402f9a:	b084      	sub	sp, #16
  402f9c:	af00      	add	r7, sp, #0
  402f9e:	4603      	mov	r3, r0
  402fa0:	71fb      	strb	r3, [r7, #7]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  402fa2:	79fb      	ldrb	r3, [r7, #7]
  402fa4:	2100      	movs	r1, #0
  402fa6:	4618      	mov	r0, r3
  402fa8:	4b1e      	ldr	r3, [pc, #120]	; (403024 <udc_iface_disable+0x8c>)
  402faa:	4798      	blx	r3
  402fac:	4603      	mov	r3, r0
  402fae:	f083 0301 	eor.w	r3, r3, #1
  402fb2:	b2db      	uxtb	r3, r3
  402fb4:	2b00      	cmp	r3, #0
  402fb6:	d001      	beq.n	402fbc <udc_iface_disable+0x24>
		return false;
  402fb8:	2300      	movs	r3, #0
  402fba:	e02f      	b.n	40301c <udc_iface_disable+0x84>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  402fbc:	4b1a      	ldr	r3, [pc, #104]	; (403028 <udc_iface_disable+0x90>)
  402fbe:	681b      	ldr	r3, [r3, #0]
  402fc0:	685a      	ldr	r2, [r3, #4]
  402fc2:	79fb      	ldrb	r3, [r7, #7]
  402fc4:	009b      	lsls	r3, r3, #2
  402fc6:	4413      	add	r3, r2
  402fc8:	681b      	ldr	r3, [r3, #0]
  402fca:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  402fcc:	68bb      	ldr	r3, [r7, #8]
  402fce:	68db      	ldr	r3, [r3, #12]
  402fd0:	4798      	blx	r3
  402fd2:	4603      	mov	r3, r0
  402fd4:	461a      	mov	r2, r3
  402fd6:	79fb      	ldrb	r3, [r7, #7]
  402fd8:	4611      	mov	r1, r2
  402fda:	4618      	mov	r0, r3
  402fdc:	4b11      	ldr	r3, [pc, #68]	; (403024 <udc_iface_disable+0x8c>)
  402fde:	4798      	blx	r3
  402fe0:	4603      	mov	r3, r0
  402fe2:	f083 0301 	eor.w	r3, r3, #1
  402fe6:	b2db      	uxtb	r3, r3
  402fe8:	2b00      	cmp	r3, #0
  402fea:	d001      	beq.n	402ff0 <udc_iface_disable+0x58>
		return false;
  402fec:	2300      	movs	r3, #0
  402fee:	e015      	b.n	40301c <udc_iface_disable+0x84>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  402ff0:	4b0e      	ldr	r3, [pc, #56]	; (40302c <udc_iface_disable+0x94>)
  402ff2:	681b      	ldr	r3, [r3, #0]
  402ff4:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  402ff6:	2105      	movs	r1, #5
  402ff8:	68f8      	ldr	r0, [r7, #12]
  402ffa:	4b0d      	ldr	r3, [pc, #52]	; (403030 <udc_iface_disable+0x98>)
  402ffc:	4798      	blx	r3
  402ffe:	60f8      	str	r0, [r7, #12]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
  403000:	68fb      	ldr	r3, [r7, #12]
  403002:	2b00      	cmp	r3, #0
  403004:	d005      	beq.n	403012 <udc_iface_disable+0x7a>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
  403006:	68fb      	ldr	r3, [r7, #12]
  403008:	789b      	ldrb	r3, [r3, #2]
  40300a:	4618      	mov	r0, r3
  40300c:	4b09      	ldr	r3, [pc, #36]	; (403034 <udc_iface_disable+0x9c>)
  40300e:	4798      	blx	r3
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  403010:	e7f1      	b.n	402ff6 <udc_iface_disable+0x5e>
				break;
  403012:	bf00      	nop
		}
	}
#endif

	// Disable interface
	udi_api->disable();
  403014:	68bb      	ldr	r3, [r7, #8]
  403016:	685b      	ldr	r3, [r3, #4]
  403018:	4798      	blx	r3
	return true;
  40301a:	2301      	movs	r3, #1
}
  40301c:	4618      	mov	r0, r3
  40301e:	3710      	adds	r7, #16
  403020:	46bd      	mov	sp, r7
  403022:	bd80      	pop	{r7, pc}
  403024:	00402efd 	.word	0x00402efd
  403028:	20001b48 	.word	0x20001b48
  40302c:	20001b4c 	.word	0x20001b4c
  403030:	00402ea1 	.word	0x00402ea1
  403034:	00404b85 	.word	0x00404b85

00403038 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
  403038:	b580      	push	{r7, lr}
  40303a:	b084      	sub	sp, #16
  40303c:	af00      	add	r7, sp, #0
  40303e:	4603      	mov	r3, r0
  403040:	460a      	mov	r2, r1
  403042:	71fb      	strb	r3, [r7, #7]
  403044:	4613      	mov	r3, r2
  403046:	71bb      	strb	r3, [r7, #6]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  403048:	79ba      	ldrb	r2, [r7, #6]
  40304a:	79fb      	ldrb	r3, [r7, #7]
  40304c:	4611      	mov	r1, r2
  40304e:	4618      	mov	r0, r3
  403050:	4b1a      	ldr	r3, [pc, #104]	; (4030bc <udc_iface_enable+0x84>)
  403052:	4798      	blx	r3
  403054:	4603      	mov	r3, r0
  403056:	f083 0301 	eor.w	r3, r3, #1
  40305a:	b2db      	uxtb	r3, r3
  40305c:	2b00      	cmp	r3, #0
  40305e:	d001      	beq.n	403064 <udc_iface_enable+0x2c>
		return false;
  403060:	2300      	movs	r3, #0
  403062:	e027      	b.n	4030b4 <udc_iface_enable+0x7c>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  403064:	4b16      	ldr	r3, [pc, #88]	; (4030c0 <udc_iface_enable+0x88>)
  403066:	681b      	ldr	r3, [r3, #0]
  403068:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  40306a:	2105      	movs	r1, #5
  40306c:	68f8      	ldr	r0, [r7, #12]
  40306e:	4b15      	ldr	r3, [pc, #84]	; (4030c4 <udc_iface_enable+0x8c>)
  403070:	4798      	blx	r3
  403072:	60f8      	str	r0, [r7, #12]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
  403074:	68fb      	ldr	r3, [r7, #12]
  403076:	2b00      	cmp	r3, #0
  403078:	d011      	beq.n	40309e <udc_iface_enable+0x66>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  40307a:	68fb      	ldr	r3, [r7, #12]
  40307c:	7898      	ldrb	r0, [r3, #2]
  40307e:	68fb      	ldr	r3, [r7, #12]
  403080:	78d9      	ldrb	r1, [r3, #3]
  403082:	68fb      	ldr	r3, [r7, #12]
  403084:	889b      	ldrh	r3, [r3, #4]
  403086:	b29b      	uxth	r3, r3
  403088:	461a      	mov	r2, r3
  40308a:	4b0f      	ldr	r3, [pc, #60]	; (4030c8 <udc_iface_enable+0x90>)
  40308c:	4798      	blx	r3
  40308e:	4603      	mov	r3, r0
  403090:	f083 0301 	eor.w	r3, r3, #1
  403094:	b2db      	uxtb	r3, r3
  403096:	2b00      	cmp	r3, #0
  403098:	d0e7      	beq.n	40306a <udc_iface_enable+0x32>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
  40309a:	2300      	movs	r3, #0
  40309c:	e00a      	b.n	4030b4 <udc_iface_enable+0x7c>
			break;
  40309e:	bf00      	nop
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  4030a0:	4b0a      	ldr	r3, [pc, #40]	; (4030cc <udc_iface_enable+0x94>)
  4030a2:	681b      	ldr	r3, [r3, #0]
  4030a4:	685a      	ldr	r2, [r3, #4]
  4030a6:	79fb      	ldrb	r3, [r7, #7]
  4030a8:	009b      	lsls	r3, r3, #2
  4030aa:	4413      	add	r3, r2
  4030ac:	681b      	ldr	r3, [r3, #0]
  4030ae:	681b      	ldr	r3, [r3, #0]
  4030b0:	4798      	blx	r3
  4030b2:	4603      	mov	r3, r0
}
  4030b4:	4618      	mov	r0, r3
  4030b6:	3710      	adds	r7, #16
  4030b8:	46bd      	mov	sp, r7
  4030ba:	bd80      	pop	{r7, pc}
  4030bc:	00402efd 	.word	0x00402efd
  4030c0:	20001b4c 	.word	0x20001b4c
  4030c4:	00402ea1 	.word	0x00402ea1
  4030c8:	00404999 	.word	0x00404999
  4030cc:	20001b48 	.word	0x20001b48

004030d0 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
  4030d0:	b580      	push	{r7, lr}
  4030d2:	af00      	add	r7, sp, #0
	udd_enable();
  4030d4:	4b01      	ldr	r3, [pc, #4]	; (4030dc <udc_start+0xc>)
  4030d6:	4798      	blx	r3
}
  4030d8:	bf00      	nop
  4030da:	bd80      	pop	{r7, pc}
  4030dc:	004047ad 	.word	0x004047ad

004030e0 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
  4030e0:	b580      	push	{r7, lr}
  4030e2:	b082      	sub	sp, #8
  4030e4:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
  4030e6:	4b0f      	ldr	r3, [pc, #60]	; (403124 <udc_reset+0x44>)
  4030e8:	781b      	ldrb	r3, [r3, #0]
  4030ea:	2b00      	cmp	r3, #0
  4030ec:	d010      	beq.n	403110 <udc_reset+0x30>
		for (iface_num = 0;
  4030ee:	2300      	movs	r3, #0
  4030f0:	71fb      	strb	r3, [r7, #7]
  4030f2:	e006      	b.n	403102 <udc_reset+0x22>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
  4030f4:	79fb      	ldrb	r3, [r7, #7]
  4030f6:	4618      	mov	r0, r3
  4030f8:	4b0b      	ldr	r3, [pc, #44]	; (403128 <udc_reset+0x48>)
  4030fa:	4798      	blx	r3
				iface_num++) {
  4030fc:	79fb      	ldrb	r3, [r7, #7]
  4030fe:	3301      	adds	r3, #1
  403100:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  403102:	4b0a      	ldr	r3, [pc, #40]	; (40312c <udc_reset+0x4c>)
  403104:	681b      	ldr	r3, [r3, #0]
  403106:	681b      	ldr	r3, [r3, #0]
  403108:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
  40310a:	79fa      	ldrb	r2, [r7, #7]
  40310c:	429a      	cmp	r2, r3
  40310e:	d3f1      	bcc.n	4030f4 <udc_reset+0x14>
		}
	}
	udc_num_configuration = 0;
  403110:	4b04      	ldr	r3, [pc, #16]	; (403124 <udc_reset+0x44>)
  403112:	2200      	movs	r2, #0
  403114:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
  403116:	4b06      	ldr	r3, [pc, #24]	; (403130 <udc_reset+0x50>)
  403118:	2201      	movs	r2, #1
  40311a:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
  40311c:	bf00      	nop
  40311e:	3708      	adds	r7, #8
  403120:	46bd      	mov	sp, r7
  403122:	bd80      	pop	{r7, pc}
  403124:	20001b44 	.word	0x20001b44
  403128:	00402f99 	.word	0x00402f99
  40312c:	20001b48 	.word	0x20001b48
  403130:	20001b3c 	.word	0x20001b3c

00403134 <udc_sof_notify>:

void udc_sof_notify(void)
{
  403134:	b580      	push	{r7, lr}
  403136:	b082      	sub	sp, #8
  403138:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
  40313a:	4b14      	ldr	r3, [pc, #80]	; (40318c <udc_sof_notify+0x58>)
  40313c:	781b      	ldrb	r3, [r3, #0]
  40313e:	2b00      	cmp	r3, #0
  403140:	d01f      	beq.n	403182 <udc_sof_notify+0x4e>
		for (iface_num = 0;
  403142:	2300      	movs	r3, #0
  403144:	71fb      	strb	r3, [r7, #7]
  403146:	e015      	b.n	403174 <udc_sof_notify+0x40>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  403148:	4b11      	ldr	r3, [pc, #68]	; (403190 <udc_sof_notify+0x5c>)
  40314a:	681b      	ldr	r3, [r3, #0]
  40314c:	685a      	ldr	r2, [r3, #4]
  40314e:	79fb      	ldrb	r3, [r7, #7]
  403150:	009b      	lsls	r3, r3, #2
  403152:	4413      	add	r3, r2
  403154:	681b      	ldr	r3, [r3, #0]
  403156:	691b      	ldr	r3, [r3, #16]
  403158:	2b00      	cmp	r3, #0
  40315a:	d008      	beq.n	40316e <udc_sof_notify+0x3a>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  40315c:	4b0c      	ldr	r3, [pc, #48]	; (403190 <udc_sof_notify+0x5c>)
  40315e:	681b      	ldr	r3, [r3, #0]
  403160:	685a      	ldr	r2, [r3, #4]
  403162:	79fb      	ldrb	r3, [r7, #7]
  403164:	009b      	lsls	r3, r3, #2
  403166:	4413      	add	r3, r2
  403168:	681b      	ldr	r3, [r3, #0]
  40316a:	691b      	ldr	r3, [r3, #16]
  40316c:	4798      	blx	r3
				iface_num++) {
  40316e:	79fb      	ldrb	r3, [r7, #7]
  403170:	3301      	adds	r3, #1
  403172:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  403174:	4b06      	ldr	r3, [pc, #24]	; (403190 <udc_sof_notify+0x5c>)
  403176:	681b      	ldr	r3, [r3, #0]
  403178:	681b      	ldr	r3, [r3, #0]
  40317a:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
  40317c:	79fa      	ldrb	r2, [r7, #7]
  40317e:	429a      	cmp	r2, r3
  403180:	d3e2      	bcc.n	403148 <udc_sof_notify+0x14>
			}
		}
	}
}
  403182:	bf00      	nop
  403184:	3708      	adds	r7, #8
  403186:	46bd      	mov	sp, r7
  403188:	bd80      	pop	{r7, pc}
  40318a:	bf00      	nop
  40318c:	20001b44 	.word	0x20001b44
  403190:	20001b48 	.word	0x20001b48

00403194 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
  403194:	b580      	push	{r7, lr}
  403196:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  403198:	4b06      	ldr	r3, [pc, #24]	; (4031b4 <udc_req_std_dev_get_status+0x20>)
  40319a:	88db      	ldrh	r3, [r3, #6]
  40319c:	2b02      	cmp	r3, #2
  40319e:	d001      	beq.n	4031a4 <udc_req_std_dev_get_status+0x10>
		return false;
  4031a0:	2300      	movs	r3, #0
  4031a2:	e004      	b.n	4031ae <udc_req_std_dev_get_status+0x1a>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  4031a4:	2102      	movs	r1, #2
  4031a6:	4804      	ldr	r0, [pc, #16]	; (4031b8 <udc_req_std_dev_get_status+0x24>)
  4031a8:	4b04      	ldr	r3, [pc, #16]	; (4031bc <udc_req_std_dev_get_status+0x28>)
  4031aa:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
  4031ac:	2301      	movs	r3, #1
}
  4031ae:	4618      	mov	r0, r3
  4031b0:	bd80      	pop	{r7, pc}
  4031b2:	bf00      	nop
  4031b4:	20001c24 	.word	0x20001c24
  4031b8:	20001b3c 	.word	0x20001b3c
  4031bc:	00404971 	.word	0x00404971

004031c0 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
  4031c0:	b580      	push	{r7, lr}
  4031c2:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  4031c4:	4b0b      	ldr	r3, [pc, #44]	; (4031f4 <udc_req_std_ep_get_status+0x34>)
  4031c6:	88db      	ldrh	r3, [r3, #6]
  4031c8:	2b02      	cmp	r3, #2
  4031ca:	d001      	beq.n	4031d0 <udc_req_std_ep_get_status+0x10>
		return false;
  4031cc:	2300      	movs	r3, #0
  4031ce:	e00e      	b.n	4031ee <udc_req_std_ep_get_status+0x2e>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  4031d0:	4b08      	ldr	r3, [pc, #32]	; (4031f4 <udc_req_std_ep_get_status+0x34>)
  4031d2:	889b      	ldrh	r3, [r3, #4]
  4031d4:	b2db      	uxtb	r3, r3
  4031d6:	4618      	mov	r0, r3
  4031d8:	4b07      	ldr	r3, [pc, #28]	; (4031f8 <udc_req_std_ep_get_status+0x38>)
  4031da:	4798      	blx	r3
  4031dc:	4603      	mov	r3, r0
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
  4031de:	b29a      	uxth	r2, r3
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  4031e0:	4b06      	ldr	r3, [pc, #24]	; (4031fc <udc_req_std_ep_get_status+0x3c>)
  4031e2:	801a      	strh	r2, [r3, #0]

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  4031e4:	2102      	movs	r1, #2
  4031e6:	4805      	ldr	r0, [pc, #20]	; (4031fc <udc_req_std_ep_get_status+0x3c>)
  4031e8:	4b05      	ldr	r3, [pc, #20]	; (403200 <udc_req_std_ep_get_status+0x40>)
  4031ea:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
  4031ec:	2301      	movs	r3, #1
}
  4031ee:	4618      	mov	r0, r3
  4031f0:	bd80      	pop	{r7, pc}
  4031f2:	bf00      	nop
  4031f4:	20001c24 	.word	0x20001c24
  4031f8:	00404bf5 	.word	0x00404bf5
  4031fc:	20001b50 	.word	0x20001b50
  403200:	00404971 	.word	0x00404971

00403204 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
  403204:	b480      	push	{r7}
  403206:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  403208:	4b0b      	ldr	r3, [pc, #44]	; (403238 <udc_req_std_dev_clear_feature+0x34>)
  40320a:	88db      	ldrh	r3, [r3, #6]
  40320c:	2b00      	cmp	r3, #0
  40320e:	d001      	beq.n	403214 <udc_req_std_dev_clear_feature+0x10>
		return false;
  403210:	2300      	movs	r3, #0
  403212:	e00d      	b.n	403230 <udc_req_std_dev_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  403214:	4b08      	ldr	r3, [pc, #32]	; (403238 <udc_req_std_dev_clear_feature+0x34>)
  403216:	885b      	ldrh	r3, [r3, #2]
  403218:	2b01      	cmp	r3, #1
  40321a:	d108      	bne.n	40322e <udc_req_std_dev_clear_feature+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  40321c:	4b07      	ldr	r3, [pc, #28]	; (40323c <udc_req_std_dev_clear_feature+0x38>)
  40321e:	881b      	ldrh	r3, [r3, #0]
  403220:	f023 0302 	bic.w	r3, r3, #2
  403224:	b29a      	uxth	r2, r3
  403226:	4b05      	ldr	r3, [pc, #20]	; (40323c <udc_req_std_dev_clear_feature+0x38>)
  403228:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
  40322a:	2301      	movs	r3, #1
  40322c:	e000      	b.n	403230 <udc_req_std_dev_clear_feature+0x2c>
	}
	return false;
  40322e:	2300      	movs	r3, #0
}
  403230:	4618      	mov	r0, r3
  403232:	46bd      	mov	sp, r7
  403234:	bc80      	pop	{r7}
  403236:	4770      	bx	lr
  403238:	20001c24 	.word	0x20001c24
  40323c:	20001b3c 	.word	0x20001b3c

00403240 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
  403240:	b580      	push	{r7, lr}
  403242:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  403244:	4b0a      	ldr	r3, [pc, #40]	; (403270 <udc_req_std_ep_clear_feature+0x30>)
  403246:	88db      	ldrh	r3, [r3, #6]
  403248:	2b00      	cmp	r3, #0
  40324a:	d001      	beq.n	403250 <udc_req_std_ep_clear_feature+0x10>
		return false;
  40324c:	2300      	movs	r3, #0
  40324e:	e00c      	b.n	40326a <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  403250:	4b07      	ldr	r3, [pc, #28]	; (403270 <udc_req_std_ep_clear_feature+0x30>)
  403252:	885b      	ldrh	r3, [r3, #2]
  403254:	2b00      	cmp	r3, #0
  403256:	d107      	bne.n	403268 <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  403258:	4b05      	ldr	r3, [pc, #20]	; (403270 <udc_req_std_ep_clear_feature+0x30>)
  40325a:	889b      	ldrh	r3, [r3, #4]
  40325c:	b2db      	uxtb	r3, r3
  40325e:	4618      	mov	r0, r3
  403260:	4b04      	ldr	r3, [pc, #16]	; (403274 <udc_req_std_ep_clear_feature+0x34>)
  403262:	4798      	blx	r3
  403264:	4603      	mov	r3, r0
  403266:	e000      	b.n	40326a <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
  403268:	2300      	movs	r3, #0
}
  40326a:	4618      	mov	r0, r3
  40326c:	bd80      	pop	{r7, pc}
  40326e:	bf00      	nop
  403270:	20001c24 	.word	0x20001c24
  403274:	00404d59 	.word	0x00404d59

00403278 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
  403278:	b480      	push	{r7}
  40327a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  40327c:	4b08      	ldr	r3, [pc, #32]	; (4032a0 <udc_req_std_dev_set_feature+0x28>)
  40327e:	88db      	ldrh	r3, [r3, #6]
  403280:	2b00      	cmp	r3, #0
  403282:	d001      	beq.n	403288 <udc_req_std_dev_set_feature+0x10>
		return false;
  403284:	2300      	movs	r3, #0
  403286:	e007      	b.n	403298 <udc_req_std_dev_set_feature+0x20>
	}

	switch (udd_g_ctrlreq.req.wValue) {
  403288:	4b05      	ldr	r3, [pc, #20]	; (4032a0 <udc_req_std_dev_set_feature+0x28>)
  40328a:	885b      	ldrh	r3, [r3, #2]
  40328c:	2b01      	cmp	r3, #1
  40328e:	d002      	beq.n	403296 <udc_req_std_dev_set_feature+0x1e>
			break;
		}
		break;
#endif
	default:
		break;
  403290:	bf00      	nop
	}
	return false;
  403292:	2300      	movs	r3, #0
  403294:	e000      	b.n	403298 <udc_req_std_dev_set_feature+0x20>
		return false;
  403296:	2300      	movs	r3, #0
}
  403298:	4618      	mov	r0, r3
  40329a:	46bd      	mov	sp, r7
  40329c:	bc80      	pop	{r7}
  40329e:	4770      	bx	lr
  4032a0:	20001c24 	.word	0x20001c24

004032a4 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
  4032a4:	b580      	push	{r7, lr}
  4032a6:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  4032a8:	4b0d      	ldr	r3, [pc, #52]	; (4032e0 <udc_req_std_ep_set_feature+0x3c>)
  4032aa:	88db      	ldrh	r3, [r3, #6]
  4032ac:	2b00      	cmp	r3, #0
  4032ae:	d001      	beq.n	4032b4 <udc_req_std_ep_set_feature+0x10>
		return false;
  4032b0:	2300      	movs	r3, #0
  4032b2:	e012      	b.n	4032da <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  4032b4:	4b0a      	ldr	r3, [pc, #40]	; (4032e0 <udc_req_std_ep_set_feature+0x3c>)
  4032b6:	885b      	ldrh	r3, [r3, #2]
  4032b8:	2b00      	cmp	r3, #0
  4032ba:	d10d      	bne.n	4032d8 <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  4032bc:	4b08      	ldr	r3, [pc, #32]	; (4032e0 <udc_req_std_ep_set_feature+0x3c>)
  4032be:	889b      	ldrh	r3, [r3, #4]
  4032c0:	b2db      	uxtb	r3, r3
  4032c2:	4618      	mov	r0, r3
  4032c4:	4b07      	ldr	r3, [pc, #28]	; (4032e4 <udc_req_std_ep_set_feature+0x40>)
  4032c6:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  4032c8:	4b05      	ldr	r3, [pc, #20]	; (4032e0 <udc_req_std_ep_set_feature+0x3c>)
  4032ca:	889b      	ldrh	r3, [r3, #4]
  4032cc:	b2db      	uxtb	r3, r3
  4032ce:	4618      	mov	r0, r3
  4032d0:	4b05      	ldr	r3, [pc, #20]	; (4032e8 <udc_req_std_ep_set_feature+0x44>)
  4032d2:	4798      	blx	r3
  4032d4:	4603      	mov	r3, r0
  4032d6:	e000      	b.n	4032da <udc_req_std_ep_set_feature+0x36>
	}
	return false;
  4032d8:	2300      	movs	r3, #0
}
  4032da:	4618      	mov	r0, r3
  4032dc:	bd80      	pop	{r7, pc}
  4032de:	bf00      	nop
  4032e0:	20001c24 	.word	0x20001c24
  4032e4:	00404fdd 	.word	0x00404fdd
  4032e8:	00404c65 	.word	0x00404c65

004032ec <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  4032ec:	b580      	push	{r7, lr}
  4032ee:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  4032f0:	4b05      	ldr	r3, [pc, #20]	; (403308 <udc_valid_address+0x1c>)
  4032f2:	885b      	ldrh	r3, [r3, #2]
  4032f4:	b2db      	uxtb	r3, r3
  4032f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4032fa:	b2db      	uxtb	r3, r3
  4032fc:	4618      	mov	r0, r3
  4032fe:	4b03      	ldr	r3, [pc, #12]	; (40330c <udc_valid_address+0x20>)
  403300:	4798      	blx	r3
}
  403302:	bf00      	nop
  403304:	bd80      	pop	{r7, pc}
  403306:	bf00      	nop
  403308:	20001c24 	.word	0x20001c24
  40330c:	004048b5 	.word	0x004048b5

00403310 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
  403310:	b480      	push	{r7}
  403312:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  403314:	4b06      	ldr	r3, [pc, #24]	; (403330 <udc_req_std_dev_set_address+0x20>)
  403316:	88db      	ldrh	r3, [r3, #6]
  403318:	2b00      	cmp	r3, #0
  40331a:	d001      	beq.n	403320 <udc_req_std_dev_set_address+0x10>
		return false;
  40331c:	2300      	movs	r3, #0
  40331e:	e003      	b.n	403328 <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
  403320:	4b03      	ldr	r3, [pc, #12]	; (403330 <udc_req_std_dev_set_address+0x20>)
  403322:	4a04      	ldr	r2, [pc, #16]	; (403334 <udc_req_std_dev_set_address+0x24>)
  403324:	611a      	str	r2, [r3, #16]
	return true;
  403326:	2301      	movs	r3, #1
}
  403328:	4618      	mov	r0, r3
  40332a:	46bd      	mov	sp, r7
  40332c:	bc80      	pop	{r7}
  40332e:	4770      	bx	lr
  403330:	20001c24 	.word	0x20001c24
  403334:	004032ed 	.word	0x004032ed

00403338 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
  403338:	b580      	push	{r7, lr}
  40333a:	b084      	sub	sp, #16
  40333c:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
  40333e:	2300      	movs	r3, #0
  403340:	71fb      	strb	r3, [r7, #7]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  403342:	4b22      	ldr	r3, [pc, #136]	; (4033cc <udc_req_std_dev_get_str_desc+0x94>)
  403344:	885b      	ldrh	r3, [r3, #2]
  403346:	b2db      	uxtb	r3, r3
  403348:	2b01      	cmp	r3, #1
  40334a:	d008      	beq.n	40335e <udc_req_std_dev_get_str_desc+0x26>
  40334c:	2b02      	cmp	r3, #2
  40334e:	d00b      	beq.n	403368 <udc_req_std_dev_get_str_desc+0x30>
  403350:	2b00      	cmp	r3, #0
  403352:	d10e      	bne.n	403372 <udc_req_std_dev_get_str_desc+0x3a>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  403354:	2104      	movs	r1, #4
  403356:	481e      	ldr	r0, [pc, #120]	; (4033d0 <udc_req_std_dev_get_str_desc+0x98>)
  403358:	4b1e      	ldr	r3, [pc, #120]	; (4033d4 <udc_req_std_dev_get_str_desc+0x9c>)
  40335a:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
  40335c:	e00b      	b.n	403376 <udc_req_std_dev_get_str_desc+0x3e>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
  40335e:	2305      	movs	r3, #5
  403360:	71fb      	strb	r3, [r7, #7]
		str = udc_string_manufacturer_name;
  403362:	4b1d      	ldr	r3, [pc, #116]	; (4033d8 <udc_req_std_dev_get_str_desc+0xa0>)
  403364:	60bb      	str	r3, [r7, #8]
		break;
  403366:	e006      	b.n	403376 <udc_req_std_dev_get_str_desc+0x3e>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
  403368:	2314      	movs	r3, #20
  40336a:	71fb      	strb	r3, [r7, #7]
		str = udc_string_product_name;
  40336c:	4b1b      	ldr	r3, [pc, #108]	; (4033dc <udc_req_std_dev_get_str_desc+0xa4>)
  40336e:	60bb      	str	r3, [r7, #8]
		break;
  403370:	e001      	b.n	403376 <udc_req_std_dev_get_str_desc+0x3e>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
  403372:	2300      	movs	r3, #0
  403374:	e026      	b.n	4033c4 <udc_req_std_dev_get_str_desc+0x8c>
	}

	if (str_length) {
  403376:	79fb      	ldrb	r3, [r7, #7]
  403378:	2b00      	cmp	r3, #0
  40337a:	d022      	beq.n	4033c2 <udc_req_std_dev_get_str_desc+0x8a>
		for(i = 0; i < str_length; i++) {
  40337c:	2300      	movs	r3, #0
  40337e:	73fb      	strb	r3, [r7, #15]
  403380:	e00d      	b.n	40339e <udc_req_std_dev_get_str_desc+0x66>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
  403382:	7bfb      	ldrb	r3, [r7, #15]
  403384:	7bfa      	ldrb	r2, [r7, #15]
  403386:	68b9      	ldr	r1, [r7, #8]
  403388:	440a      	add	r2, r1
  40338a:	7812      	ldrb	r2, [r2, #0]
  40338c:	b291      	uxth	r1, r2
  40338e:	4a14      	ldr	r2, [pc, #80]	; (4033e0 <udc_req_std_dev_get_str_desc+0xa8>)
  403390:	005b      	lsls	r3, r3, #1
  403392:	4413      	add	r3, r2
  403394:	460a      	mov	r2, r1
  403396:	805a      	strh	r2, [r3, #2]
		for(i = 0; i < str_length; i++) {
  403398:	7bfb      	ldrb	r3, [r7, #15]
  40339a:	3301      	adds	r3, #1
  40339c:	73fb      	strb	r3, [r7, #15]
  40339e:	7bfa      	ldrb	r2, [r7, #15]
  4033a0:	79fb      	ldrb	r3, [r7, #7]
  4033a2:	429a      	cmp	r2, r3
  4033a4:	d3ed      	bcc.n	403382 <udc_req_std_dev_get_str_desc+0x4a>
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
  4033a6:	79fb      	ldrb	r3, [r7, #7]
  4033a8:	3301      	adds	r3, #1
  4033aa:	b2db      	uxtb	r3, r3
  4033ac:	005b      	lsls	r3, r3, #1
  4033ae:	b2da      	uxtb	r2, r3
  4033b0:	4b0b      	ldr	r3, [pc, #44]	; (4033e0 <udc_req_std_dev_get_str_desc+0xa8>)
  4033b2:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
  4033b4:	4b0a      	ldr	r3, [pc, #40]	; (4033e0 <udc_req_std_dev_get_str_desc+0xa8>)
  4033b6:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload(
  4033b8:	b29b      	uxth	r3, r3
  4033ba:	4619      	mov	r1, r3
  4033bc:	4808      	ldr	r0, [pc, #32]	; (4033e0 <udc_req_std_dev_get_str_desc+0xa8>)
  4033be:	4b05      	ldr	r3, [pc, #20]	; (4033d4 <udc_req_std_dev_get_str_desc+0x9c>)
  4033c0:	4798      	blx	r3
	}

	return true;
  4033c2:	2301      	movs	r3, #1
}
  4033c4:	4618      	mov	r0, r3
  4033c6:	3710      	adds	r7, #16
  4033c8:	46bd      	mov	sp, r7
  4033ca:	bd80      	pop	{r7, pc}
  4033cc:	20001c24 	.word	0x20001c24
  4033d0:	200000ac 	.word	0x200000ac
  4033d4:	00404971 	.word	0x00404971
  4033d8:	200000b0 	.word	0x200000b0
  4033dc:	200000b8 	.word	0x200000b8
  4033e0:	200000d0 	.word	0x200000d0

004033e4 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
  4033e4:	b580      	push	{r7, lr}
  4033e6:	b082      	sub	sp, #8
  4033e8:	af00      	add	r7, sp, #0
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  4033ea:	4b41      	ldr	r3, [pc, #260]	; (4034f0 <udc_req_std_dev_get_descriptor+0x10c>)
  4033ec:	885b      	ldrh	r3, [r3, #2]
  4033ee:	71fb      	strb	r3, [r7, #7]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  4033f0:	4b3f      	ldr	r3, [pc, #252]	; (4034f0 <udc_req_std_dev_get_descriptor+0x10c>)
  4033f2:	885b      	ldrh	r3, [r3, #2]
  4033f4:	0a1b      	lsrs	r3, r3, #8
  4033f6:	b29b      	uxth	r3, r3
  4033f8:	b2db      	uxtb	r3, r3
  4033fa:	3b01      	subs	r3, #1
  4033fc:	2b0e      	cmp	r3, #14
  4033fe:	d865      	bhi.n	4034cc <udc_req_std_dev_get_descriptor+0xe8>
  403400:	a201      	add	r2, pc, #4	; (adr r2, 403408 <udc_req_std_dev_get_descriptor+0x24>)
  403402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403406:	bf00      	nop
  403408:	00403445 	.word	0x00403445
  40340c:	0040345b 	.word	0x0040345b
  403410:	004034b9 	.word	0x004034b9
  403414:	004034cd 	.word	0x004034cd
  403418:	004034cd 	.word	0x004034cd
  40341c:	004034cd 	.word	0x004034cd
  403420:	004034cd 	.word	0x004034cd
  403424:	004034cd 	.word	0x004034cd
  403428:	004034cd 	.word	0x004034cd
  40342c:	004034cd 	.word	0x004034cd
  403430:	004034cd 	.word	0x004034cd
  403434:	004034cd 	.word	0x004034cd
  403438:	004034cd 	.word	0x004034cd
  40343c:	004034cd 	.word	0x004034cd
  403440:	00403497 	.word	0x00403497
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
  403444:	4b2b      	ldr	r3, [pc, #172]	; (4034f4 <udc_req_std_dev_get_descriptor+0x110>)
  403446:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
  403448:	4b2a      	ldr	r3, [pc, #168]	; (4034f4 <udc_req_std_dev_get_descriptor+0x110>)
  40344a:	681b      	ldr	r3, [r3, #0]
  40344c:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
  40344e:	b29b      	uxth	r3, r3
  403450:	4619      	mov	r1, r3
  403452:	4610      	mov	r0, r2
  403454:	4b28      	ldr	r3, [pc, #160]	; (4034f8 <udc_req_std_dev_get_descriptor+0x114>)
  403456:	4798      	blx	r3
		}
		break;
  403458:	e03b      	b.n	4034d2 <udc_req_std_dev_get_descriptor+0xee>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
  40345a:	4b26      	ldr	r3, [pc, #152]	; (4034f4 <udc_req_std_dev_get_descriptor+0x110>)
  40345c:	681b      	ldr	r3, [r3, #0]
  40345e:	7c5b      	ldrb	r3, [r3, #17]
  403460:	79fa      	ldrb	r2, [r7, #7]
  403462:	429a      	cmp	r2, r3
  403464:	d301      	bcc.n	40346a <udc_req_std_dev_get_descriptor+0x86>
					bNumConfigurations) {
				return false;
  403466:	2300      	movs	r3, #0
  403468:	e03e      	b.n	4034e8 <udc_req_std_dev_get_descriptor+0x104>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
  40346a:	4b22      	ldr	r3, [pc, #136]	; (4034f4 <udc_req_std_dev_get_descriptor+0x110>)
  40346c:	685a      	ldr	r2, [r3, #4]
  40346e:	79fb      	ldrb	r3, [r7, #7]
  403470:	00db      	lsls	r3, r3, #3
  403472:	4413      	add	r3, r2
  403474:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
  403476:	4b1f      	ldr	r3, [pc, #124]	; (4034f4 <udc_req_std_dev_get_descriptor+0x110>)
  403478:	685a      	ldr	r2, [r3, #4]
  40347a:	79fb      	ldrb	r3, [r7, #7]
  40347c:	00db      	lsls	r3, r3, #3
  40347e:	4413      	add	r3, r2
  403480:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
  403482:	885b      	ldrh	r3, [r3, #2]
  403484:	b29b      	uxth	r3, r3
  403486:	4619      	mov	r1, r3
  403488:	4b1b      	ldr	r3, [pc, #108]	; (4034f8 <udc_req_std_dev_get_descriptor+0x114>)
  40348a:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  40348c:	4b18      	ldr	r3, [pc, #96]	; (4034f0 <udc_req_std_dev_get_descriptor+0x10c>)
  40348e:	689b      	ldr	r3, [r3, #8]
  403490:	2202      	movs	r2, #2
  403492:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
  403494:	e01d      	b.n	4034d2 <udc_req_std_dev_get_descriptor+0xee>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
  403496:	4b17      	ldr	r3, [pc, #92]	; (4034f4 <udc_req_std_dev_get_descriptor+0x110>)
  403498:	689b      	ldr	r3, [r3, #8]
  40349a:	2b00      	cmp	r3, #0
  40349c:	d101      	bne.n	4034a2 <udc_req_std_dev_get_descriptor+0xbe>
			return false;
  40349e:	2300      	movs	r3, #0
  4034a0:	e022      	b.n	4034e8 <udc_req_std_dev_get_descriptor+0x104>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  4034a2:	4b14      	ldr	r3, [pc, #80]	; (4034f4 <udc_req_std_dev_get_descriptor+0x110>)
  4034a4:	689a      	ldr	r2, [r3, #8]
				udc_config.conf_bos->wTotalLength);
  4034a6:	4b13      	ldr	r3, [pc, #76]	; (4034f4 <udc_req_std_dev_get_descriptor+0x110>)
  4034a8:	689b      	ldr	r3, [r3, #8]
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  4034aa:	885b      	ldrh	r3, [r3, #2]
  4034ac:	b29b      	uxth	r3, r3
  4034ae:	4619      	mov	r1, r3
  4034b0:	4610      	mov	r0, r2
  4034b2:	4b11      	ldr	r3, [pc, #68]	; (4034f8 <udc_req_std_dev_get_descriptor+0x114>)
  4034b4:	4798      	blx	r3
		break;
  4034b6:	e00c      	b.n	4034d2 <udc_req_std_dev_get_descriptor+0xee>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
  4034b8:	4b10      	ldr	r3, [pc, #64]	; (4034fc <udc_req_std_dev_get_descriptor+0x118>)
  4034ba:	4798      	blx	r3
  4034bc:	4603      	mov	r3, r0
  4034be:	f083 0301 	eor.w	r3, r3, #1
  4034c2:	b2db      	uxtb	r3, r3
  4034c4:	2b00      	cmp	r3, #0
  4034c6:	d003      	beq.n	4034d0 <udc_req_std_dev_get_descriptor+0xec>
			return false;
  4034c8:	2300      	movs	r3, #0
  4034ca:	e00d      	b.n	4034e8 <udc_req_std_dev_get_descriptor+0x104>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
  4034cc:	2300      	movs	r3, #0
  4034ce:	e00b      	b.n	4034e8 <udc_req_std_dev_get_descriptor+0x104>
		break;
  4034d0:	bf00      	nop
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  4034d2:	4b07      	ldr	r3, [pc, #28]	; (4034f0 <udc_req_std_dev_get_descriptor+0x10c>)
  4034d4:	88da      	ldrh	r2, [r3, #6]
  4034d6:	4b06      	ldr	r3, [pc, #24]	; (4034f0 <udc_req_std_dev_get_descriptor+0x10c>)
  4034d8:	899b      	ldrh	r3, [r3, #12]
  4034da:	429a      	cmp	r2, r3
  4034dc:	d203      	bcs.n	4034e6 <udc_req_std_dev_get_descriptor+0x102>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  4034de:	4b04      	ldr	r3, [pc, #16]	; (4034f0 <udc_req_std_dev_get_descriptor+0x10c>)
  4034e0:	88da      	ldrh	r2, [r3, #6]
  4034e2:	4b03      	ldr	r3, [pc, #12]	; (4034f0 <udc_req_std_dev_get_descriptor+0x10c>)
  4034e4:	819a      	strh	r2, [r3, #12]
	}
	return true;
  4034e6:	2301      	movs	r3, #1
}
  4034e8:	4618      	mov	r0, r3
  4034ea:	3708      	adds	r7, #8
  4034ec:	46bd      	mov	sp, r7
  4034ee:	bd80      	pop	{r7, pc}
  4034f0:	20001c24 	.word	0x20001c24
  4034f4:	200000a0 	.word	0x200000a0
  4034f8:	00404971 	.word	0x00404971
  4034fc:	00403339 	.word	0x00403339

00403500 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
  403500:	b580      	push	{r7, lr}
  403502:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
  403504:	4b06      	ldr	r3, [pc, #24]	; (403520 <udc_req_std_dev_get_configuration+0x20>)
  403506:	88db      	ldrh	r3, [r3, #6]
  403508:	2b01      	cmp	r3, #1
  40350a:	d001      	beq.n	403510 <udc_req_std_dev_get_configuration+0x10>
		return false;
  40350c:	2300      	movs	r3, #0
  40350e:	e004      	b.n	40351a <udc_req_std_dev_get_configuration+0x1a>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
  403510:	2101      	movs	r1, #1
  403512:	4804      	ldr	r0, [pc, #16]	; (403524 <udc_req_std_dev_get_configuration+0x24>)
  403514:	4b04      	ldr	r3, [pc, #16]	; (403528 <udc_req_std_dev_get_configuration+0x28>)
  403516:	4798      	blx	r3
	return true;
  403518:	2301      	movs	r3, #1
}
  40351a:	4618      	mov	r0, r3
  40351c:	bd80      	pop	{r7, pc}
  40351e:	bf00      	nop
  403520:	20001c24 	.word	0x20001c24
  403524:	20001b44 	.word	0x20001b44
  403528:	00404971 	.word	0x00404971

0040352c <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
  40352c:	b580      	push	{r7, lr}
  40352e:	b082      	sub	sp, #8
  403530:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
  403532:	4b27      	ldr	r3, [pc, #156]	; (4035d0 <udc_req_std_dev_set_configuration+0xa4>)
  403534:	88db      	ldrh	r3, [r3, #6]
  403536:	2b00      	cmp	r3, #0
  403538:	d001      	beq.n	40353e <udc_req_std_dev_set_configuration+0x12>
		return false;
  40353a:	2300      	movs	r3, #0
  40353c:	e043      	b.n	4035c6 <udc_req_std_dev_set_configuration+0x9a>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
  40353e:	4b25      	ldr	r3, [pc, #148]	; (4035d4 <udc_req_std_dev_set_configuration+0xa8>)
  403540:	4798      	blx	r3
  403542:	4603      	mov	r3, r0
  403544:	2b00      	cmp	r3, #0
  403546:	d101      	bne.n	40354c <udc_req_std_dev_set_configuration+0x20>
		return false;
  403548:	2300      	movs	r3, #0
  40354a:	e03c      	b.n	4035c6 <udc_req_std_dev_set_configuration+0x9a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  40354c:	4b20      	ldr	r3, [pc, #128]	; (4035d0 <udc_req_std_dev_set_configuration+0xa4>)
  40354e:	885b      	ldrh	r3, [r3, #2]
  403550:	b2db      	uxtb	r3, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
  403552:	4a21      	ldr	r2, [pc, #132]	; (4035d8 <udc_req_std_dev_set_configuration+0xac>)
  403554:	6812      	ldr	r2, [r2, #0]
  403556:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  403558:	4293      	cmp	r3, r2
  40355a:	dd01      	ble.n	403560 <udc_req_std_dev_set_configuration+0x34>
			return false;
  40355c:	2300      	movs	r3, #0
  40355e:	e032      	b.n	4035c6 <udc_req_std_dev_set_configuration+0x9a>
		}
	}

	// Reset current configuration
	udc_reset();
  403560:	4b1e      	ldr	r3, [pc, #120]	; (4035dc <udc_req_std_dev_set_configuration+0xb0>)
  403562:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  403564:	4b1a      	ldr	r3, [pc, #104]	; (4035d0 <udc_req_std_dev_set_configuration+0xa4>)
  403566:	885b      	ldrh	r3, [r3, #2]
  403568:	b2da      	uxtb	r2, r3
  40356a:	4b1d      	ldr	r3, [pc, #116]	; (4035e0 <udc_req_std_dev_set_configuration+0xb4>)
  40356c:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
  40356e:	4b1c      	ldr	r3, [pc, #112]	; (4035e0 <udc_req_std_dev_set_configuration+0xb4>)
  403570:	781b      	ldrb	r3, [r3, #0]
  403572:	2b00      	cmp	r3, #0
  403574:	d101      	bne.n	40357a <udc_req_std_dev_set_configuration+0x4e>
		return true; // Default empty configuration requested
  403576:	2301      	movs	r3, #1
  403578:	e025      	b.n	4035c6 <udc_req_std_dev_set_configuration+0x9a>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  40357a:	4b17      	ldr	r3, [pc, #92]	; (4035d8 <udc_req_std_dev_set_configuration+0xac>)
  40357c:	685a      	ldr	r2, [r3, #4]
  40357e:	4b18      	ldr	r3, [pc, #96]	; (4035e0 <udc_req_std_dev_set_configuration+0xb4>)
  403580:	781b      	ldrb	r3, [r3, #0]
  403582:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  403586:	3b01      	subs	r3, #1
  403588:	00db      	lsls	r3, r3, #3
  40358a:	4413      	add	r3, r2
  40358c:	4a15      	ldr	r2, [pc, #84]	; (4035e4 <udc_req_std_dev_set_configuration+0xb8>)
  40358e:	6013      	str	r3, [r2, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  403590:	2300      	movs	r3, #0
  403592:	71fb      	strb	r3, [r7, #7]
  403594:	e00f      	b.n	4035b6 <udc_req_std_dev_set_configuration+0x8a>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
  403596:	79fb      	ldrb	r3, [r7, #7]
  403598:	2100      	movs	r1, #0
  40359a:	4618      	mov	r0, r3
  40359c:	4b12      	ldr	r3, [pc, #72]	; (4035e8 <udc_req_std_dev_set_configuration+0xbc>)
  40359e:	4798      	blx	r3
  4035a0:	4603      	mov	r3, r0
  4035a2:	f083 0301 	eor.w	r3, r3, #1
  4035a6:	b2db      	uxtb	r3, r3
  4035a8:	2b00      	cmp	r3, #0
  4035aa:	d001      	beq.n	4035b0 <udc_req_std_dev_set_configuration+0x84>
			return false;
  4035ac:	2300      	movs	r3, #0
  4035ae:	e00a      	b.n	4035c6 <udc_req_std_dev_set_configuration+0x9a>
			iface_num++) {
  4035b0:	79fb      	ldrb	r3, [r7, #7]
  4035b2:	3301      	adds	r3, #1
  4035b4:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4035b6:	4b0b      	ldr	r3, [pc, #44]	; (4035e4 <udc_req_std_dev_set_configuration+0xb8>)
  4035b8:	681b      	ldr	r3, [r3, #0]
  4035ba:	681b      	ldr	r3, [r3, #0]
  4035bc:	791b      	ldrb	r3, [r3, #4]
  4035be:	79fa      	ldrb	r2, [r7, #7]
  4035c0:	429a      	cmp	r2, r3
  4035c2:	d3e8      	bcc.n	403596 <udc_req_std_dev_set_configuration+0x6a>
		}
	}
	return true;
  4035c4:	2301      	movs	r3, #1
}
  4035c6:	4618      	mov	r0, r3
  4035c8:	3708      	adds	r7, #8
  4035ca:	46bd      	mov	sp, r7
  4035cc:	bd80      	pop	{r7, pc}
  4035ce:	bf00      	nop
  4035d0:	20001c24 	.word	0x20001c24
  4035d4:	00404919 	.word	0x00404919
  4035d8:	200000a0 	.word	0x200000a0
  4035dc:	004030e1 	.word	0x004030e1
  4035e0:	20001b44 	.word	0x20001b44
  4035e4:	20001b48 	.word	0x20001b48
  4035e8:	00403039 	.word	0x00403039

004035ec <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
  4035ec:	b580      	push	{r7, lr}
  4035ee:	b082      	sub	sp, #8
  4035f0:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
  4035f2:	4b1e      	ldr	r3, [pc, #120]	; (40366c <udc_req_std_iface_get_setting+0x80>)
  4035f4:	88db      	ldrh	r3, [r3, #6]
  4035f6:	2b01      	cmp	r3, #1
  4035f8:	d001      	beq.n	4035fe <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
  4035fa:	2300      	movs	r3, #0
  4035fc:	e032      	b.n	403664 <udc_req_std_iface_get_setting+0x78>
	}
	if (!udc_num_configuration) {
  4035fe:	4b1c      	ldr	r3, [pc, #112]	; (403670 <udc_req_std_iface_get_setting+0x84>)
  403600:	781b      	ldrb	r3, [r3, #0]
  403602:	2b00      	cmp	r3, #0
  403604:	d101      	bne.n	40360a <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
  403606:	2300      	movs	r3, #0
  403608:	e02c      	b.n	403664 <udc_req_std_iface_get_setting+0x78>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  40360a:	4b18      	ldr	r3, [pc, #96]	; (40366c <udc_req_std_iface_get_setting+0x80>)
  40360c:	889b      	ldrh	r3, [r3, #4]
  40360e:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  403610:	4b18      	ldr	r3, [pc, #96]	; (403674 <udc_req_std_iface_get_setting+0x88>)
  403612:	681b      	ldr	r3, [r3, #0]
  403614:	681b      	ldr	r3, [r3, #0]
  403616:	791b      	ldrb	r3, [r3, #4]
  403618:	79fa      	ldrb	r2, [r7, #7]
  40361a:	429a      	cmp	r2, r3
  40361c:	d301      	bcc.n	403622 <udc_req_std_iface_get_setting+0x36>
		return false;
  40361e:	2300      	movs	r3, #0
  403620:	e020      	b.n	403664 <udc_req_std_iface_get_setting+0x78>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  403622:	79fb      	ldrb	r3, [r7, #7]
  403624:	2100      	movs	r1, #0
  403626:	4618      	mov	r0, r3
  403628:	4b13      	ldr	r3, [pc, #76]	; (403678 <udc_req_std_iface_get_setting+0x8c>)
  40362a:	4798      	blx	r3
  40362c:	4603      	mov	r3, r0
  40362e:	f083 0301 	eor.w	r3, r3, #1
  403632:	b2db      	uxtb	r3, r3
  403634:	2b00      	cmp	r3, #0
  403636:	d001      	beq.n	40363c <udc_req_std_iface_get_setting+0x50>
		return false;
  403638:	2300      	movs	r3, #0
  40363a:	e013      	b.n	403664 <udc_req_std_iface_get_setting+0x78>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  40363c:	4b0d      	ldr	r3, [pc, #52]	; (403674 <udc_req_std_iface_get_setting+0x88>)
  40363e:	681b      	ldr	r3, [r3, #0]
  403640:	685a      	ldr	r2, [r3, #4]
  403642:	79fb      	ldrb	r3, [r7, #7]
  403644:	009b      	lsls	r3, r3, #2
  403646:	4413      	add	r3, r2
  403648:	681b      	ldr	r3, [r3, #0]
  40364a:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
  40364c:	683b      	ldr	r3, [r7, #0]
  40364e:	68db      	ldr	r3, [r3, #12]
  403650:	4798      	blx	r3
  403652:	4603      	mov	r3, r0
  403654:	461a      	mov	r2, r3
  403656:	4b09      	ldr	r3, [pc, #36]	; (40367c <udc_req_std_iface_get_setting+0x90>)
  403658:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
  40365a:	2101      	movs	r1, #1
  40365c:	4807      	ldr	r0, [pc, #28]	; (40367c <udc_req_std_iface_get_setting+0x90>)
  40365e:	4b08      	ldr	r3, [pc, #32]	; (403680 <udc_req_std_iface_get_setting+0x94>)
  403660:	4798      	blx	r3
	return true;
  403662:	2301      	movs	r3, #1
}
  403664:	4618      	mov	r0, r3
  403666:	3708      	adds	r7, #8
  403668:	46bd      	mov	sp, r7
  40366a:	bd80      	pop	{r7, pc}
  40366c:	20001c24 	.word	0x20001c24
  403670:	20001b44 	.word	0x20001b44
  403674:	20001b48 	.word	0x20001b48
  403678:	00402efd 	.word	0x00402efd
  40367c:	20001b40 	.word	0x20001b40
  403680:	00404971 	.word	0x00404971

00403684 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
  403684:	b580      	push	{r7, lr}
  403686:	b082      	sub	sp, #8
  403688:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
  40368a:	4b14      	ldr	r3, [pc, #80]	; (4036dc <udc_req_std_iface_set_setting+0x58>)
  40368c:	88db      	ldrh	r3, [r3, #6]
  40368e:	2b00      	cmp	r3, #0
  403690:	d001      	beq.n	403696 <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
  403692:	2300      	movs	r3, #0
  403694:	e01e      	b.n	4036d4 <udc_req_std_iface_set_setting+0x50>
	}
	if (!udc_num_configuration) {
  403696:	4b12      	ldr	r3, [pc, #72]	; (4036e0 <udc_req_std_iface_set_setting+0x5c>)
  403698:	781b      	ldrb	r3, [r3, #0]
  40369a:	2b00      	cmp	r3, #0
  40369c:	d101      	bne.n	4036a2 <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
  40369e:	2300      	movs	r3, #0
  4036a0:	e018      	b.n	4036d4 <udc_req_std_iface_set_setting+0x50>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  4036a2:	4b0e      	ldr	r3, [pc, #56]	; (4036dc <udc_req_std_iface_set_setting+0x58>)
  4036a4:	889b      	ldrh	r3, [r3, #4]
  4036a6:	71fb      	strb	r3, [r7, #7]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  4036a8:	4b0c      	ldr	r3, [pc, #48]	; (4036dc <udc_req_std_iface_set_setting+0x58>)
  4036aa:	885b      	ldrh	r3, [r3, #2]
  4036ac:	71bb      	strb	r3, [r7, #6]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
  4036ae:	79fb      	ldrb	r3, [r7, #7]
  4036b0:	4618      	mov	r0, r3
  4036b2:	4b0c      	ldr	r3, [pc, #48]	; (4036e4 <udc_req_std_iface_set_setting+0x60>)
  4036b4:	4798      	blx	r3
  4036b6:	4603      	mov	r3, r0
  4036b8:	f083 0301 	eor.w	r3, r3, #1
  4036bc:	b2db      	uxtb	r3, r3
  4036be:	2b00      	cmp	r3, #0
  4036c0:	d001      	beq.n	4036c6 <udc_req_std_iface_set_setting+0x42>
		return false;
  4036c2:	2300      	movs	r3, #0
  4036c4:	e006      	b.n	4036d4 <udc_req_std_iface_set_setting+0x50>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
  4036c6:	79ba      	ldrb	r2, [r7, #6]
  4036c8:	79fb      	ldrb	r3, [r7, #7]
  4036ca:	4611      	mov	r1, r2
  4036cc:	4618      	mov	r0, r3
  4036ce:	4b06      	ldr	r3, [pc, #24]	; (4036e8 <udc_req_std_iface_set_setting+0x64>)
  4036d0:	4798      	blx	r3
  4036d2:	4603      	mov	r3, r0
}
  4036d4:	4618      	mov	r0, r3
  4036d6:	3708      	adds	r7, #8
  4036d8:	46bd      	mov	sp, r7
  4036da:	bd80      	pop	{r7, pc}
  4036dc:	20001c24 	.word	0x20001c24
  4036e0:	20001b44 	.word	0x20001b44
  4036e4:	00402f99 	.word	0x00402f99
  4036e8:	00403039 	.word	0x00403039

004036ec <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
  4036ec:	b580      	push	{r7, lr}
  4036ee:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
  4036f0:	4b4d      	ldr	r3, [pc, #308]	; (403828 <udc_reqstd+0x13c>)
  4036f2:	781b      	ldrb	r3, [r3, #0]
  4036f4:	b25b      	sxtb	r3, r3
  4036f6:	2b00      	cmp	r3, #0
  4036f8:	da3e      	bge.n	403778 <udc_reqstd+0x8c>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
  4036fa:	4b4b      	ldr	r3, [pc, #300]	; (403828 <udc_reqstd+0x13c>)
  4036fc:	88db      	ldrh	r3, [r3, #6]
  4036fe:	2b00      	cmp	r3, #0
  403700:	d101      	bne.n	403706 <udc_reqstd+0x1a>
			return false; // Error for USB host
  403702:	2300      	movs	r3, #0
  403704:	e08e      	b.n	403824 <udc_reqstd+0x138>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  403706:	4b48      	ldr	r3, [pc, #288]	; (403828 <udc_reqstd+0x13c>)
  403708:	781b      	ldrb	r3, [r3, #0]
  40370a:	f003 031f 	and.w	r3, r3, #31
  40370e:	2b00      	cmp	r3, #0
  403710:	d114      	bne.n	40373c <udc_reqstd+0x50>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  403712:	4b45      	ldr	r3, [pc, #276]	; (403828 <udc_reqstd+0x13c>)
  403714:	785b      	ldrb	r3, [r3, #1]
  403716:	2b06      	cmp	r3, #6
  403718:	d008      	beq.n	40372c <udc_reqstd+0x40>
  40371a:	2b08      	cmp	r3, #8
  40371c:	d00a      	beq.n	403734 <udc_reqstd+0x48>
  40371e:	2b00      	cmp	r3, #0
  403720:	d000      	beq.n	403724 <udc_reqstd+0x38>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
  403722:	e00b      	b.n	40373c <udc_reqstd+0x50>
				return udc_req_std_dev_get_status();
  403724:	4b41      	ldr	r3, [pc, #260]	; (40382c <udc_reqstd+0x140>)
  403726:	4798      	blx	r3
  403728:	4603      	mov	r3, r0
  40372a:	e07b      	b.n	403824 <udc_reqstd+0x138>
				return udc_req_std_dev_get_descriptor();
  40372c:	4b40      	ldr	r3, [pc, #256]	; (403830 <udc_reqstd+0x144>)
  40372e:	4798      	blx	r3
  403730:	4603      	mov	r3, r0
  403732:	e077      	b.n	403824 <udc_reqstd+0x138>
				return udc_req_std_dev_get_configuration();
  403734:	4b3f      	ldr	r3, [pc, #252]	; (403834 <udc_reqstd+0x148>)
  403736:	4798      	blx	r3
  403738:	4603      	mov	r3, r0
  40373a:	e073      	b.n	403824 <udc_reqstd+0x138>
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  40373c:	4b3a      	ldr	r3, [pc, #232]	; (403828 <udc_reqstd+0x13c>)
  40373e:	781b      	ldrb	r3, [r3, #0]
  403740:	f003 031f 	and.w	r3, r3, #31
  403744:	2b01      	cmp	r3, #1
  403746:	d108      	bne.n	40375a <udc_reqstd+0x6e>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  403748:	4b37      	ldr	r3, [pc, #220]	; (403828 <udc_reqstd+0x13c>)
  40374a:	785b      	ldrb	r3, [r3, #1]
  40374c:	2b0a      	cmp	r3, #10
  40374e:	d000      	beq.n	403752 <udc_reqstd+0x66>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			default:
				break;
  403750:	e003      	b.n	40375a <udc_reqstd+0x6e>
				return udc_req_std_iface_get_setting();
  403752:	4b39      	ldr	r3, [pc, #228]	; (403838 <udc_reqstd+0x14c>)
  403754:	4798      	blx	r3
  403756:	4603      	mov	r3, r0
  403758:	e064      	b.n	403824 <udc_reqstd+0x138>
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  40375a:	4b33      	ldr	r3, [pc, #204]	; (403828 <udc_reqstd+0x13c>)
  40375c:	781b      	ldrb	r3, [r3, #0]
  40375e:	f003 031f 	and.w	r3, r3, #31
  403762:	2b02      	cmp	r3, #2
  403764:	d15d      	bne.n	403822 <udc_reqstd+0x136>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  403766:	4b30      	ldr	r3, [pc, #192]	; (403828 <udc_reqstd+0x13c>)
  403768:	785b      	ldrb	r3, [r3, #1]
  40376a:	2b00      	cmp	r3, #0
  40376c:	d000      	beq.n	403770 <udc_reqstd+0x84>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
			default:
				break;
  40376e:	e058      	b.n	403822 <udc_reqstd+0x136>
				return udc_req_std_ep_get_status();
  403770:	4b32      	ldr	r3, [pc, #200]	; (40383c <udc_reqstd+0x150>)
  403772:	4798      	blx	r3
  403774:	4603      	mov	r3, r0
  403776:	e055      	b.n	403824 <udc_reqstd+0x138>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  403778:	4b2b      	ldr	r3, [pc, #172]	; (403828 <udc_reqstd+0x13c>)
  40377a:	781b      	ldrb	r3, [r3, #0]
  40377c:	f003 031f 	and.w	r3, r3, #31
  403780:	2b00      	cmp	r3, #0
  403782:	d12a      	bne.n	4037da <udc_reqstd+0xee>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  403784:	4b28      	ldr	r3, [pc, #160]	; (403828 <udc_reqstd+0x13c>)
  403786:	785b      	ldrb	r3, [r3, #1]
  403788:	3b01      	subs	r3, #1
  40378a:	2b08      	cmp	r3, #8
  40378c:	d824      	bhi.n	4037d8 <udc_reqstd+0xec>
  40378e:	a201      	add	r2, pc, #4	; (adr r2, 403794 <udc_reqstd+0xa8>)
  403790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403794:	004037c1 	.word	0x004037c1
  403798:	004037d9 	.word	0x004037d9
  40379c:	004037c9 	.word	0x004037c9
  4037a0:	004037d9 	.word	0x004037d9
  4037a4:	004037b9 	.word	0x004037b9
  4037a8:	004037d9 	.word	0x004037d9
  4037ac:	004037d9 	.word	0x004037d9
  4037b0:	004037d9 	.word	0x004037d9
  4037b4:	004037d1 	.word	0x004037d1
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
  4037b8:	4b21      	ldr	r3, [pc, #132]	; (403840 <udc_reqstd+0x154>)
  4037ba:	4798      	blx	r3
  4037bc:	4603      	mov	r3, r0
  4037be:	e031      	b.n	403824 <udc_reqstd+0x138>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
  4037c0:	4b20      	ldr	r3, [pc, #128]	; (403844 <udc_reqstd+0x158>)
  4037c2:	4798      	blx	r3
  4037c4:	4603      	mov	r3, r0
  4037c6:	e02d      	b.n	403824 <udc_reqstd+0x138>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
  4037c8:	4b1f      	ldr	r3, [pc, #124]	; (403848 <udc_reqstd+0x15c>)
  4037ca:	4798      	blx	r3
  4037cc:	4603      	mov	r3, r0
  4037ce:	e029      	b.n	403824 <udc_reqstd+0x138>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
  4037d0:	4b1e      	ldr	r3, [pc, #120]	; (40384c <udc_reqstd+0x160>)
  4037d2:	4798      	blx	r3
  4037d4:	4603      	mov	r3, r0
  4037d6:	e025      	b.n	403824 <udc_reqstd+0x138>
			case USB_REQ_SET_DESCRIPTOR:
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
  4037d8:	bf00      	nop
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  4037da:	4b13      	ldr	r3, [pc, #76]	; (403828 <udc_reqstd+0x13c>)
  4037dc:	781b      	ldrb	r3, [r3, #0]
  4037de:	f003 031f 	and.w	r3, r3, #31
  4037e2:	2b01      	cmp	r3, #1
  4037e4:	d108      	bne.n	4037f8 <udc_reqstd+0x10c>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  4037e6:	4b10      	ldr	r3, [pc, #64]	; (403828 <udc_reqstd+0x13c>)
  4037e8:	785b      	ldrb	r3, [r3, #1]
  4037ea:	2b0b      	cmp	r3, #11
  4037ec:	d000      	beq.n	4037f0 <udc_reqstd+0x104>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			default:
				break;
  4037ee:	e003      	b.n	4037f8 <udc_reqstd+0x10c>
				return udc_req_std_iface_set_setting();
  4037f0:	4b17      	ldr	r3, [pc, #92]	; (403850 <udc_reqstd+0x164>)
  4037f2:	4798      	blx	r3
  4037f4:	4603      	mov	r3, r0
  4037f6:	e015      	b.n	403824 <udc_reqstd+0x138>
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  4037f8:	4b0b      	ldr	r3, [pc, #44]	; (403828 <udc_reqstd+0x13c>)
  4037fa:	781b      	ldrb	r3, [r3, #0]
  4037fc:	f003 031f 	and.w	r3, r3, #31
  403800:	2b02      	cmp	r3, #2
  403802:	d10e      	bne.n	403822 <udc_reqstd+0x136>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  403804:	4b08      	ldr	r3, [pc, #32]	; (403828 <udc_reqstd+0x13c>)
  403806:	785b      	ldrb	r3, [r3, #1]
  403808:	2b01      	cmp	r3, #1
  40380a:	d002      	beq.n	403812 <udc_reqstd+0x126>
  40380c:	2b03      	cmp	r3, #3
  40380e:	d004      	beq.n	40381a <udc_reqstd+0x12e>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
  403810:	e007      	b.n	403822 <udc_reqstd+0x136>
				return udc_req_std_ep_clear_feature();
  403812:	4b10      	ldr	r3, [pc, #64]	; (403854 <udc_reqstd+0x168>)
  403814:	4798      	blx	r3
  403816:	4603      	mov	r3, r0
  403818:	e004      	b.n	403824 <udc_reqstd+0x138>
				return udc_req_std_ep_set_feature();
  40381a:	4b0f      	ldr	r3, [pc, #60]	; (403858 <udc_reqstd+0x16c>)
  40381c:	4798      	blx	r3
  40381e:	4603      	mov	r3, r0
  403820:	e000      	b.n	403824 <udc_reqstd+0x138>
			}
		}
#endif
	}
	return false;
  403822:	2300      	movs	r3, #0
}
  403824:	4618      	mov	r0, r3
  403826:	bd80      	pop	{r7, pc}
  403828:	20001c24 	.word	0x20001c24
  40382c:	00403195 	.word	0x00403195
  403830:	004033e5 	.word	0x004033e5
  403834:	00403501 	.word	0x00403501
  403838:	004035ed 	.word	0x004035ed
  40383c:	004031c1 	.word	0x004031c1
  403840:	00403311 	.word	0x00403311
  403844:	00403205 	.word	0x00403205
  403848:	00403279 	.word	0x00403279
  40384c:	0040352d 	.word	0x0040352d
  403850:	00403685 	.word	0x00403685
  403854:	00403241 	.word	0x00403241
  403858:	004032a5 	.word	0x004032a5

0040385c <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
  40385c:	b580      	push	{r7, lr}
  40385e:	b082      	sub	sp, #8
  403860:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  403862:	4b20      	ldr	r3, [pc, #128]	; (4038e4 <udc_req_iface+0x88>)
  403864:	781b      	ldrb	r3, [r3, #0]
  403866:	2b00      	cmp	r3, #0
  403868:	d101      	bne.n	40386e <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
  40386a:	2300      	movs	r3, #0
  40386c:	e036      	b.n	4038dc <udc_req_iface+0x80>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  40386e:	4b1e      	ldr	r3, [pc, #120]	; (4038e8 <udc_req_iface+0x8c>)
  403870:	889b      	ldrh	r3, [r3, #4]
  403872:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  403874:	4b1d      	ldr	r3, [pc, #116]	; (4038ec <udc_req_iface+0x90>)
  403876:	681b      	ldr	r3, [r3, #0]
  403878:	681b      	ldr	r3, [r3, #0]
  40387a:	791b      	ldrb	r3, [r3, #4]
  40387c:	79fa      	ldrb	r2, [r7, #7]
  40387e:	429a      	cmp	r2, r3
  403880:	d301      	bcc.n	403886 <udc_req_iface+0x2a>
		return false;
  403882:	2300      	movs	r3, #0
  403884:	e02a      	b.n	4038dc <udc_req_iface+0x80>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  403886:	79fb      	ldrb	r3, [r7, #7]
  403888:	2100      	movs	r1, #0
  40388a:	4618      	mov	r0, r3
  40388c:	4b18      	ldr	r3, [pc, #96]	; (4038f0 <udc_req_iface+0x94>)
  40388e:	4798      	blx	r3
  403890:	4603      	mov	r3, r0
  403892:	f083 0301 	eor.w	r3, r3, #1
  403896:	b2db      	uxtb	r3, r3
  403898:	2b00      	cmp	r3, #0
  40389a:	d001      	beq.n	4038a0 <udc_req_iface+0x44>
		return false;
  40389c:	2300      	movs	r3, #0
  40389e:	e01d      	b.n	4038dc <udc_req_iface+0x80>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  4038a0:	4b12      	ldr	r3, [pc, #72]	; (4038ec <udc_req_iface+0x90>)
  4038a2:	681b      	ldr	r3, [r3, #0]
  4038a4:	685a      	ldr	r2, [r3, #4]
  4038a6:	79fb      	ldrb	r3, [r7, #7]
  4038a8:	009b      	lsls	r3, r3, #2
  4038aa:	4413      	add	r3, r2
  4038ac:	681b      	ldr	r3, [r3, #0]
  4038ae:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4038b0:	683b      	ldr	r3, [r7, #0]
  4038b2:	68db      	ldr	r3, [r3, #12]
  4038b4:	4798      	blx	r3
  4038b6:	4603      	mov	r3, r0
  4038b8:	461a      	mov	r2, r3
  4038ba:	79fb      	ldrb	r3, [r7, #7]
  4038bc:	4611      	mov	r1, r2
  4038be:	4618      	mov	r0, r3
  4038c0:	4b0b      	ldr	r3, [pc, #44]	; (4038f0 <udc_req_iface+0x94>)
  4038c2:	4798      	blx	r3
  4038c4:	4603      	mov	r3, r0
  4038c6:	f083 0301 	eor.w	r3, r3, #1
  4038ca:	b2db      	uxtb	r3, r3
  4038cc:	2b00      	cmp	r3, #0
  4038ce:	d001      	beq.n	4038d4 <udc_req_iface+0x78>
		return false;
  4038d0:	2300      	movs	r3, #0
  4038d2:	e003      	b.n	4038dc <udc_req_iface+0x80>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
  4038d4:	683b      	ldr	r3, [r7, #0]
  4038d6:	689b      	ldr	r3, [r3, #8]
  4038d8:	4798      	blx	r3
  4038da:	4603      	mov	r3, r0
}
  4038dc:	4618      	mov	r0, r3
  4038de:	3708      	adds	r7, #8
  4038e0:	46bd      	mov	sp, r7
  4038e2:	bd80      	pop	{r7, pc}
  4038e4:	20001b44 	.word	0x20001b44
  4038e8:	20001c24 	.word	0x20001c24
  4038ec:	20001b48 	.word	0x20001b48
  4038f0:	00402efd 	.word	0x00402efd

004038f4 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
  4038f4:	b580      	push	{r7, lr}
  4038f6:	b082      	sub	sp, #8
  4038f8:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  4038fa:	4b1e      	ldr	r3, [pc, #120]	; (403974 <udc_req_ep+0x80>)
  4038fc:	781b      	ldrb	r3, [r3, #0]
  4038fe:	2b00      	cmp	r3, #0
  403900:	d101      	bne.n	403906 <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
  403902:	2300      	movs	r3, #0
  403904:	e032      	b.n	40396c <udc_req_ep+0x78>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  403906:	4b1c      	ldr	r3, [pc, #112]	; (403978 <udc_req_ep+0x84>)
  403908:	889b      	ldrh	r3, [r3, #4]
  40390a:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40390c:	2300      	movs	r3, #0
  40390e:	71fb      	strb	r3, [r7, #7]
  403910:	e024      	b.n	40395c <udc_req_ep+0x68>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  403912:	4b1a      	ldr	r3, [pc, #104]	; (40397c <udc_req_ep+0x88>)
  403914:	681b      	ldr	r3, [r3, #0]
  403916:	685a      	ldr	r2, [r3, #4]
  403918:	79fb      	ldrb	r3, [r7, #7]
  40391a:	009b      	lsls	r3, r3, #2
  40391c:	4413      	add	r3, r2
  40391e:	681b      	ldr	r3, [r3, #0]
  403920:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  403922:	683b      	ldr	r3, [r7, #0]
  403924:	68db      	ldr	r3, [r3, #12]
  403926:	4798      	blx	r3
  403928:	4603      	mov	r3, r0
  40392a:	461a      	mov	r2, r3
  40392c:	79fb      	ldrb	r3, [r7, #7]
  40392e:	4611      	mov	r1, r2
  403930:	4618      	mov	r0, r3
  403932:	4b13      	ldr	r3, [pc, #76]	; (403980 <udc_req_ep+0x8c>)
  403934:	4798      	blx	r3
  403936:	4603      	mov	r3, r0
  403938:	f083 0301 	eor.w	r3, r3, #1
  40393c:	b2db      	uxtb	r3, r3
  40393e:	2b00      	cmp	r3, #0
  403940:	d001      	beq.n	403946 <udc_req_ep+0x52>
			return false;
  403942:	2300      	movs	r3, #0
  403944:	e012      	b.n	40396c <udc_req_ep+0x78>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
  403946:	683b      	ldr	r3, [r7, #0]
  403948:	689b      	ldr	r3, [r3, #8]
  40394a:	4798      	blx	r3
  40394c:	4603      	mov	r3, r0
  40394e:	2b00      	cmp	r3, #0
  403950:	d001      	beq.n	403956 <udc_req_ep+0x62>
			return true;
  403952:	2301      	movs	r3, #1
  403954:	e00a      	b.n	40396c <udc_req_ep+0x78>
			iface_num++) {
  403956:	79fb      	ldrb	r3, [r7, #7]
  403958:	3301      	adds	r3, #1
  40395a:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40395c:	4b07      	ldr	r3, [pc, #28]	; (40397c <udc_req_ep+0x88>)
  40395e:	681b      	ldr	r3, [r3, #0]
  403960:	681b      	ldr	r3, [r3, #0]
  403962:	791b      	ldrb	r3, [r3, #4]
  403964:	79fa      	ldrb	r2, [r7, #7]
  403966:	429a      	cmp	r2, r3
  403968:	d3d3      	bcc.n	403912 <udc_req_ep+0x1e>
		}
	}
	return false;
  40396a:	2300      	movs	r3, #0
}
  40396c:	4618      	mov	r0, r3
  40396e:	3708      	adds	r7, #8
  403970:	46bd      	mov	sp, r7
  403972:	bd80      	pop	{r7, pc}
  403974:	20001b44 	.word	0x20001b44
  403978:	20001c24 	.word	0x20001c24
  40397c:	20001b48 	.word	0x20001b48
  403980:	00402efd 	.word	0x00402efd

00403984 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  403984:	b580      	push	{r7, lr}
  403986:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  403988:	4b1e      	ldr	r3, [pc, #120]	; (403a04 <udc_process_setup+0x80>)
  40398a:	2200      	movs	r2, #0
  40398c:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  40398e:	4b1d      	ldr	r3, [pc, #116]	; (403a04 <udc_process_setup+0x80>)
  403990:	2200      	movs	r2, #0
  403992:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  403994:	4b1b      	ldr	r3, [pc, #108]	; (403a04 <udc_process_setup+0x80>)
  403996:	2200      	movs	r2, #0
  403998:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  40399a:	4b1a      	ldr	r3, [pc, #104]	; (403a04 <udc_process_setup+0x80>)
  40399c:	781b      	ldrb	r3, [r3, #0]
  40399e:	b25b      	sxtb	r3, r3
  4039a0:	2b00      	cmp	r3, #0
  4039a2:	da05      	bge.n	4039b0 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
  4039a4:	4b17      	ldr	r3, [pc, #92]	; (403a04 <udc_process_setup+0x80>)
  4039a6:	88db      	ldrh	r3, [r3, #6]
  4039a8:	2b00      	cmp	r3, #0
  4039aa:	d101      	bne.n	4039b0 <udc_process_setup+0x2c>
			return false; // Error from USB host
  4039ac:	2300      	movs	r3, #0
  4039ae:	e027      	b.n	403a00 <udc_process_setup+0x7c>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  4039b0:	4b14      	ldr	r3, [pc, #80]	; (403a04 <udc_process_setup+0x80>)
  4039b2:	781b      	ldrb	r3, [r3, #0]
  4039b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
  4039b8:	2b00      	cmp	r3, #0
  4039ba:	d106      	bne.n	4039ca <udc_process_setup+0x46>
		if (udc_reqstd()) {
  4039bc:	4b12      	ldr	r3, [pc, #72]	; (403a08 <udc_process_setup+0x84>)
  4039be:	4798      	blx	r3
  4039c0:	4603      	mov	r3, r0
  4039c2:	2b00      	cmp	r3, #0
  4039c4:	d001      	beq.n	4039ca <udc_process_setup+0x46>
			return true;
  4039c6:	2301      	movs	r3, #1
  4039c8:	e01a      	b.n	403a00 <udc_process_setup+0x7c>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  4039ca:	4b0e      	ldr	r3, [pc, #56]	; (403a04 <udc_process_setup+0x80>)
  4039cc:	781b      	ldrb	r3, [r3, #0]
  4039ce:	f003 031f 	and.w	r3, r3, #31
  4039d2:	2b01      	cmp	r3, #1
  4039d4:	d106      	bne.n	4039e4 <udc_process_setup+0x60>
		if (udc_req_iface()) {
  4039d6:	4b0d      	ldr	r3, [pc, #52]	; (403a0c <udc_process_setup+0x88>)
  4039d8:	4798      	blx	r3
  4039da:	4603      	mov	r3, r0
  4039dc:	2b00      	cmp	r3, #0
  4039de:	d001      	beq.n	4039e4 <udc_process_setup+0x60>
			return true;
  4039e0:	2301      	movs	r3, #1
  4039e2:	e00d      	b.n	403a00 <udc_process_setup+0x7c>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  4039e4:	4b07      	ldr	r3, [pc, #28]	; (403a04 <udc_process_setup+0x80>)
  4039e6:	781b      	ldrb	r3, [r3, #0]
  4039e8:	f003 031f 	and.w	r3, r3, #31
  4039ec:	2b02      	cmp	r3, #2
  4039ee:	d106      	bne.n	4039fe <udc_process_setup+0x7a>
		if (udc_req_ep()) {
  4039f0:	4b07      	ldr	r3, [pc, #28]	; (403a10 <udc_process_setup+0x8c>)
  4039f2:	4798      	blx	r3
  4039f4:	4603      	mov	r3, r0
  4039f6:	2b00      	cmp	r3, #0
  4039f8:	d001      	beq.n	4039fe <udc_process_setup+0x7a>
			return true;
  4039fa:	2301      	movs	r3, #1
  4039fc:	e000      	b.n	403a00 <udc_process_setup+0x7c>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  4039fe:	2300      	movs	r3, #0
#endif
}
  403a00:	4618      	mov	r0, r3
  403a02:	bd80      	pop	{r7, pc}
  403a04:	20001c24 	.word	0x20001c24
  403a08:	004036ed 	.word	0x004036ed
  403a0c:	0040385d 	.word	0x0040385d
  403a10:	004038f5 	.word	0x004038f5

00403a14 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
  403a14:	b480      	push	{r7}
  403a16:	b087      	sub	sp, #28
  403a18:	af00      	add	r7, sp, #0
  403a1a:	60f8      	str	r0, [r7, #12]
  403a1c:	60b9      	str	r1, [r7, #8]
  403a1e:	607a      	str	r2, [r7, #4]
  403a20:	603b      	str	r3, [r7, #0]
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
  403a22:	68fb      	ldr	r3, [r7, #12]
  403a24:	2201      	movs	r2, #1
  403a26:	601a      	str	r2, [r3, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
  403a28:	68fb      	ldr	r3, [r7, #12]
  403a2a:	2200      	movs	r2, #0
  403a2c:	605a      	str	r2, [r3, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
  403a2e:	68fb      	ldr	r3, [r7, #12]
  403a30:	f240 2202 	movw	r2, #514	; 0x202
  403a34:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	p_adc->ADC_RCR = 0;
  403a38:	68fb      	ldr	r3, [r7, #12]
  403a3a:	2200      	movs	r2, #0
  403a3c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
  403a40:	68fb      	ldr	r3, [r7, #12]
  403a42:	2200      	movs	r2, #0
  403a44:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
  403a48:	687b      	ldr	r3, [r7, #4]
  403a4a:	005b      	lsls	r3, r3, #1
  403a4c:	68ba      	ldr	r2, [r7, #8]
  403a4e:	fbb2 f3f3 	udiv	r3, r2, r3
  403a52:	3b01      	subs	r3, #1
  403a54:	617b      	str	r3, [r7, #20]
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  403a56:	68fb      	ldr	r3, [r7, #12]
  403a58:	685a      	ldr	r2, [r3, #4]
  403a5a:	697b      	ldr	r3, [r7, #20]
  403a5c:	021b      	lsls	r3, r3, #8
  403a5e:	b299      	uxth	r1, r3
  403a60:	683b      	ldr	r3, [r7, #0]
  403a62:	430b      	orrs	r3, r1
  403a64:	431a      	orrs	r2, r3
  403a66:	68fb      	ldr	r3, [r7, #12]
  403a68:	605a      	str	r2, [r3, #4]
	return 0;
  403a6a:	2300      	movs	r3, #0
}
  403a6c:	4618      	mov	r0, r3
  403a6e:	371c      	adds	r7, #28
  403a70:	46bd      	mov	sp, r7
  403a72:	bc80      	pop	{r7}
  403a74:	4770      	bx	lr

00403a76 <adc_configure_trigger>:
 * ADC_MR_FREERUN_OFF disables freerun mode.
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
  403a76:	b480      	push	{r7}
  403a78:	b083      	sub	sp, #12
  403a7a:	af00      	add	r7, sp, #0
  403a7c:	6078      	str	r0, [r7, #4]
  403a7e:	460b      	mov	r3, r1
  403a80:	70fb      	strb	r3, [r7, #3]
  403a82:	4613      	mov	r3, r2
  403a84:	70bb      	strb	r3, [r7, #2]
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
  403a86:	687b      	ldr	r3, [r7, #4]
  403a88:	685a      	ldr	r2, [r3, #4]
  403a8a:	78f9      	ldrb	r1, [r7, #3]
  403a8c:	78bb      	ldrb	r3, [r7, #2]
  403a8e:	01db      	lsls	r3, r3, #7
  403a90:	b2db      	uxtb	r3, r3
  403a92:	430b      	orrs	r3, r1
  403a94:	431a      	orrs	r2, r3
  403a96:	687b      	ldr	r3, [r7, #4]
  403a98:	605a      	str	r2, [r3, #4]
}
  403a9a:	bf00      	nop
  403a9c:	370c      	adds	r7, #12
  403a9e:	46bd      	mov	sp, r7
  403aa0:	bc80      	pop	{r7}
  403aa2:	4770      	bx	lr

00403aa4 <adc_configure_power_save>:
 * between conversions.
 * \param uc_fwup ADC_MR_FWUP_OFF configures sleep mode as uc_sleep setting,
 * ADC_MR_FWUP_ON keeps voltage reference ON and ADC Core OFF between conversions.
 */
void adc_configure_power_save(Adc *p_adc, const uint8_t uc_sleep, const uint8_t uc_fwup)
{
  403aa4:	b480      	push	{r7}
  403aa6:	b083      	sub	sp, #12
  403aa8:	af00      	add	r7, sp, #0
  403aaa:	6078      	str	r0, [r7, #4]
  403aac:	460b      	mov	r3, r1
  403aae:	70fb      	strb	r3, [r7, #3]
  403ab0:	4613      	mov	r3, r2
  403ab2:	70bb      	strb	r3, [r7, #2]
	p_adc->ADC_MR |= (((uc_sleep << 5) & ADC_MR_SLEEP) |
  403ab4:	687b      	ldr	r3, [r7, #4]
  403ab6:	685a      	ldr	r2, [r3, #4]
  403ab8:	78fb      	ldrb	r3, [r7, #3]
  403aba:	015b      	lsls	r3, r3, #5
  403abc:	f003 0120 	and.w	r1, r3, #32
			((uc_fwup << 6) & ADC_MR_FWUP));
  403ac0:	78bb      	ldrb	r3, [r7, #2]
  403ac2:	019b      	lsls	r3, r3, #6
  403ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
	p_adc->ADC_MR |= (((uc_sleep << 5) & ADC_MR_SLEEP) |
  403ac8:	430b      	orrs	r3, r1
  403aca:	431a      	orrs	r2, r3
  403acc:	687b      	ldr	r3, [r7, #4]
  403ace:	605a      	str	r2, [r3, #4]
}
  403ad0:	bf00      	nop
  403ad2:	370c      	adds	r7, #12
  403ad4:	46bd      	mov	sp, r7
  403ad6:	bc80      	pop	{r7}
  403ad8:	4770      	bx	lr

00403ada <adc_configure_sequence>:
 * \param ch_list Channel sequence list.
 * \param number Number of channels in the list.
 */
void adc_configure_sequence(Adc *p_adc, const enum adc_channel_num_t ch_list[],
		uint8_t uc_num)
{
  403ada:	b480      	push	{r7}
  403adc:	b087      	sub	sp, #28
  403ade:	af00      	add	r7, sp, #0
  403ae0:	60f8      	str	r0, [r7, #12]
  403ae2:	60b9      	str	r1, [r7, #8]
  403ae4:	4613      	mov	r3, r2
  403ae6:	71fb      	strb	r3, [r7, #7]
	uint8_t uc_counter;
	volatile uint32_t *adc_seqr = &p_adc->ADC_SEQR1;
  403ae8:	68fb      	ldr	r3, [r7, #12]
  403aea:	3308      	adds	r3, #8
  403aec:	613b      	str	r3, [r7, #16]

	if (uc_num <= 8) {
  403aee:	79fb      	ldrb	r3, [r7, #7]
  403af0:	2b08      	cmp	r3, #8
  403af2:	d818      	bhi.n	403b26 <adc_configure_sequence+0x4c>
		for (uc_counter = 0; uc_counter < uc_num; uc_counter++) {
  403af4:	2300      	movs	r3, #0
  403af6:	75fb      	strb	r3, [r7, #23]
  403af8:	e010      	b.n	403b1c <adc_configure_sequence+0x42>
			adc_seqr[0] |=
  403afa:	693b      	ldr	r3, [r7, #16]
  403afc:	681b      	ldr	r3, [r3, #0]
					ch_list[uc_counter] << (4 * uc_counter);
  403afe:	7dfa      	ldrb	r2, [r7, #23]
  403b00:	68b9      	ldr	r1, [r7, #8]
  403b02:	440a      	add	r2, r1
  403b04:	7812      	ldrb	r2, [r2, #0]
  403b06:	4611      	mov	r1, r2
  403b08:	7dfa      	ldrb	r2, [r7, #23]
  403b0a:	0092      	lsls	r2, r2, #2
  403b0c:	fa01 f202 	lsl.w	r2, r1, r2
			adc_seqr[0] |=
  403b10:	431a      	orrs	r2, r3
  403b12:	693b      	ldr	r3, [r7, #16]
  403b14:	601a      	str	r2, [r3, #0]
		for (uc_counter = 0; uc_counter < uc_num; uc_counter++) {
  403b16:	7dfb      	ldrb	r3, [r7, #23]
  403b18:	3301      	adds	r3, #1
  403b1a:	75fb      	strb	r3, [r7, #23]
  403b1c:	7dfa      	ldrb	r2, [r7, #23]
  403b1e:	79fb      	ldrb	r3, [r7, #7]
  403b20:	429a      	cmp	r2, r3
  403b22:	d3ea      	bcc.n	403afa <adc_configure_sequence+0x20>
		for (uc_counter = 0; uc_counter < uc_num - 8; uc_counter++) {
			adc_seqr[1] |=
					ch_list[8 + uc_counter] << (4 * uc_counter);
		}
	}
}
  403b24:	e033      	b.n	403b8e <adc_configure_sequence+0xb4>
		for (uc_counter = 0; uc_counter < 8; uc_counter++) {
  403b26:	2300      	movs	r3, #0
  403b28:	75fb      	strb	r3, [r7, #23]
  403b2a:	e010      	b.n	403b4e <adc_configure_sequence+0x74>
			adc_seqr[0] |=
  403b2c:	693b      	ldr	r3, [r7, #16]
  403b2e:	681b      	ldr	r3, [r3, #0]
					ch_list[uc_counter] << (4 * uc_counter);
  403b30:	7dfa      	ldrb	r2, [r7, #23]
  403b32:	68b9      	ldr	r1, [r7, #8]
  403b34:	440a      	add	r2, r1
  403b36:	7812      	ldrb	r2, [r2, #0]
  403b38:	4611      	mov	r1, r2
  403b3a:	7dfa      	ldrb	r2, [r7, #23]
  403b3c:	0092      	lsls	r2, r2, #2
  403b3e:	fa01 f202 	lsl.w	r2, r1, r2
			adc_seqr[0] |=
  403b42:	431a      	orrs	r2, r3
  403b44:	693b      	ldr	r3, [r7, #16]
  403b46:	601a      	str	r2, [r3, #0]
		for (uc_counter = 0; uc_counter < 8; uc_counter++) {
  403b48:	7dfb      	ldrb	r3, [r7, #23]
  403b4a:	3301      	adds	r3, #1
  403b4c:	75fb      	strb	r3, [r7, #23]
  403b4e:	7dfb      	ldrb	r3, [r7, #23]
  403b50:	2b07      	cmp	r3, #7
  403b52:	d9eb      	bls.n	403b2c <adc_configure_sequence+0x52>
		for (uc_counter = 0; uc_counter < uc_num - 8; uc_counter++) {
  403b54:	2300      	movs	r3, #0
  403b56:	75fb      	strb	r3, [r7, #23]
  403b58:	e014      	b.n	403b84 <adc_configure_sequence+0xaa>
			adc_seqr[1] |=
  403b5a:	693b      	ldr	r3, [r7, #16]
  403b5c:	3304      	adds	r3, #4
  403b5e:	693a      	ldr	r2, [r7, #16]
  403b60:	3204      	adds	r2, #4
  403b62:	6812      	ldr	r2, [r2, #0]
					ch_list[8 + uc_counter] << (4 * uc_counter);
  403b64:	7df9      	ldrb	r1, [r7, #23]
  403b66:	3108      	adds	r1, #8
  403b68:	4608      	mov	r0, r1
  403b6a:	68b9      	ldr	r1, [r7, #8]
  403b6c:	4401      	add	r1, r0
  403b6e:	7809      	ldrb	r1, [r1, #0]
  403b70:	4608      	mov	r0, r1
  403b72:	7df9      	ldrb	r1, [r7, #23]
  403b74:	0089      	lsls	r1, r1, #2
  403b76:	fa00 f101 	lsl.w	r1, r0, r1
			adc_seqr[1] |=
  403b7a:	430a      	orrs	r2, r1
  403b7c:	601a      	str	r2, [r3, #0]
		for (uc_counter = 0; uc_counter < uc_num - 8; uc_counter++) {
  403b7e:	7dfb      	ldrb	r3, [r7, #23]
  403b80:	3301      	adds	r3, #1
  403b82:	75fb      	strb	r3, [r7, #23]
  403b84:	7dfa      	ldrb	r2, [r7, #23]
  403b86:	79fb      	ldrb	r3, [r7, #7]
  403b88:	3b08      	subs	r3, #8
  403b8a:	429a      	cmp	r2, r3
  403b8c:	dbe5      	blt.n	403b5a <adc_configure_sequence+0x80>
}
  403b8e:	bf00      	nop
  403b90:	371c      	adds	r7, #28
  403b92:	46bd      	mov	sp, r7
  403b94:	bc80      	pop	{r7}
  403b96:	4770      	bx	lr

00403b98 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
  403b98:	b480      	push	{r7}
  403b9a:	b085      	sub	sp, #20
  403b9c:	af00      	add	r7, sp, #0
  403b9e:	60f8      	str	r0, [r7, #12]
  403ba0:	607a      	str	r2, [r7, #4]
  403ba2:	461a      	mov	r2, r3
  403ba4:	460b      	mov	r3, r1
  403ba6:	72fb      	strb	r3, [r7, #11]
  403ba8:	4613      	mov	r3, r2
  403baa:	72bb      	strb	r3, [r7, #10]
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
  403bac:	68fb      	ldr	r3, [r7, #12]
  403bae:	685a      	ldr	r2, [r3, #4]
  403bb0:	7abb      	ldrb	r3, [r7, #10]
  403bb2:	071b      	lsls	r3, r3, #28
  403bb4:	f003 5140 	and.w	r1, r3, #805306368	; 0x30000000
			| settling | ADC_MR_TRACKTIM(uc_tracking);
  403bb8:	687b      	ldr	r3, [r7, #4]
  403bba:	4319      	orrs	r1, r3
  403bbc:	7afb      	ldrb	r3, [r7, #11]
  403bbe:	061b      	lsls	r3, r3, #24
  403bc0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
  403bc4:	430b      	orrs	r3, r1
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
  403bc6:	431a      	orrs	r2, r3
  403bc8:	68fb      	ldr	r3, [r7, #12]
  403bca:	605a      	str	r2, [r3, #4]
}
  403bcc:	bf00      	nop
  403bce:	3714      	adds	r7, #20
  403bd0:	46bd      	mov	sp, r7
  403bd2:	bc80      	pop	{r7}
  403bd4:	4770      	bx	lr

00403bd6 <adc_disable_anch>:
 * \note DIFF0, GAIN0 and OFF0 are used for all channels.
 *
 * \param p_Adc Pointer to an ADC instance.
 */
void adc_disable_anch(Adc *p_adc)
{
  403bd6:	b480      	push	{r7}
  403bd8:	b083      	sub	sp, #12
  403bda:	af00      	add	r7, sp, #0
  403bdc:	6078      	str	r0, [r7, #4]
	p_adc->ADC_MR &= ~ADC_MR_ANACH;
  403bde:	687b      	ldr	r3, [r7, #4]
  403be0:	685b      	ldr	r3, [r3, #4]
  403be2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
  403be6:	687b      	ldr	r3, [r7, #4]
  403be8:	605a      	str	r2, [r3, #4]
}
  403bea:	bf00      	nop
  403bec:	370c      	adds	r7, #12
  403bee:	46bd      	mov	sp, r7
  403bf0:	bc80      	pop	{r7}
  403bf2:	4770      	bx	lr

00403bf4 <adc_start>:
 *
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
  403bf4:	b480      	push	{r7}
  403bf6:	b083      	sub	sp, #12
  403bf8:	af00      	add	r7, sp, #0
  403bfa:	6078      	str	r0, [r7, #4]
	p_adc->ADC_CR = ADC_CR_START;
  403bfc:	687b      	ldr	r3, [r7, #4]
  403bfe:	2202      	movs	r2, #2
  403c00:	601a      	str	r2, [r3, #0]
}
  403c02:	bf00      	nop
  403c04:	370c      	adds	r7, #12
  403c06:	46bd      	mov	sp, r7
  403c08:	bc80      	pop	{r7}
  403c0a:	4770      	bx	lr

00403c0c <adc_enable_channel>:
 *
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
  403c0c:	b480      	push	{r7}
  403c0e:	b083      	sub	sp, #12
  403c10:	af00      	add	r7, sp, #0
  403c12:	6078      	str	r0, [r7, #4]
  403c14:	460b      	mov	r3, r1
  403c16:	70fb      	strb	r3, [r7, #3]
	p_adc->ADC_CHER = 1 << adc_ch;
  403c18:	78fb      	ldrb	r3, [r7, #3]
  403c1a:	2201      	movs	r2, #1
  403c1c:	fa02 f303 	lsl.w	r3, r2, r3
  403c20:	461a      	mov	r2, r3
  403c22:	687b      	ldr	r3, [r7, #4]
  403c24:	611a      	str	r2, [r3, #16]
}
  403c26:	bf00      	nop
  403c28:	370c      	adds	r7, #12
  403c2a:	46bd      	mov	sp, r7
  403c2c:	bc80      	pop	{r7}
  403c2e:	4770      	bx	lr

00403c30 <adc_enable_tag>:
 * can be indicated.
 *
 * \param p_adc Pointer to an ADC instance.
 */
void adc_enable_tag(Adc *p_adc)
{
  403c30:	b480      	push	{r7}
  403c32:	b083      	sub	sp, #12
  403c34:	af00      	add	r7, sp, #0
  403c36:	6078      	str	r0, [r7, #4]
	p_adc->ADC_EMR |= ADC_EMR_TAG;
  403c38:	687b      	ldr	r3, [r7, #4]
  403c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  403c3c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
  403c40:	687b      	ldr	r3, [r7, #4]
  403c42:	641a      	str	r2, [r3, #64]	; 0x40
}
  403c44:	bf00      	nop
  403c46:	370c      	adds	r7, #12
  403c48:	46bd      	mov	sp, r7
  403c4a:	bc80      	pop	{r7}
  403c4c:	4770      	bx	lr

00403c4e <adc_start_sequencer>:
 * \brief Enable conversion sequencer.
 *
 * \param p_adc Pointer to an ADC instance.
 */
void adc_start_sequencer(Adc *p_adc)
{
  403c4e:	b480      	push	{r7}
  403c50:	b083      	sub	sp, #12
  403c52:	af00      	add	r7, sp, #0
  403c54:	6078      	str	r0, [r7, #4]
	p_adc->ADC_MR |= ADC_MR_USEQ;
  403c56:	687b      	ldr	r3, [r7, #4]
  403c58:	685b      	ldr	r3, [r3, #4]
  403c5a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
  403c5e:	687b      	ldr	r3, [r7, #4]
  403c60:	605a      	str	r2, [r3, #4]
}
  403c62:	bf00      	nop
  403c64:	370c      	adds	r7, #12
  403c66:	46bd      	mov	sp, r7
  403c68:	bc80      	pop	{r7}
  403c6a:	4770      	bx	lr

00403c6c <adc_disable_channel_input_offset>:
 *
 * \param p_adc Pointer to an ADC instance.
 * \param channel ADC channel number.
 */
void adc_disable_channel_input_offset(Adc *p_adc, const enum adc_channel_num_t channel)
{
  403c6c:	b480      	push	{r7}
  403c6e:	b085      	sub	sp, #20
  403c70:	af00      	add	r7, sp, #0
  403c72:	6078      	str	r0, [r7, #4]
  403c74:	460b      	mov	r3, r1
  403c76:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_temp;
	ul_temp = p_adc->ADC_COR;
  403c78:	687b      	ldr	r3, [r7, #4]
  403c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  403c7c:	60fb      	str	r3, [r7, #12]
	p_adc->ADC_COR &= (0xfffffffeu << channel);
  403c7e:	687b      	ldr	r3, [r7, #4]
  403c80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  403c82:	78fb      	ldrb	r3, [r7, #3]
  403c84:	f06f 0101 	mvn.w	r1, #1
  403c88:	fa01 f303 	lsl.w	r3, r1, r3
  403c8c:	401a      	ands	r2, r3
  403c8e:	687b      	ldr	r3, [r7, #4]
  403c90:	64da      	str	r2, [r3, #76]	; 0x4c
	p_adc->ADC_COR |= ul_temp;
  403c92:	687b      	ldr	r3, [r7, #4]
  403c94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  403c96:	68fb      	ldr	r3, [r7, #12]
  403c98:	431a      	orrs	r2, r3
  403c9a:	687b      	ldr	r3, [r7, #4]
  403c9c:	64da      	str	r2, [r3, #76]	; 0x4c
}
  403c9e:	bf00      	nop
  403ca0:	3714      	adds	r7, #20
  403ca2:	46bd      	mov	sp, r7
  403ca4:	bc80      	pop	{r7}
  403ca6:	4770      	bx	lr

00403ca8 <adc_set_channel_input_gain>:
 * \param channel ADC channel number.
 * \param gain Gain value for the input.
 */
void adc_set_channel_input_gain(Adc *p_adc, const enum adc_channel_num_t channel,
		const enum adc_gainvalue_t gain)
{
  403ca8:	b480      	push	{r7}
  403caa:	b083      	sub	sp, #12
  403cac:	af00      	add	r7, sp, #0
  403cae:	6078      	str	r0, [r7, #4]
  403cb0:	460b      	mov	r3, r1
  403cb2:	70fb      	strb	r3, [r7, #3]
  403cb4:	4613      	mov	r3, r2
  403cb6:	70bb      	strb	r3, [r7, #2]
	p_adc->ADC_CGR |= (0x03u << (2 * channel)) & (gain << (2 * channel));
  403cb8:	687b      	ldr	r3, [r7, #4]
  403cba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  403cbc:	78fb      	ldrb	r3, [r7, #3]
  403cbe:	005b      	lsls	r3, r3, #1
  403cc0:	2103      	movs	r1, #3
  403cc2:	fa01 f303 	lsl.w	r3, r1, r3
  403cc6:	78b8      	ldrb	r0, [r7, #2]
  403cc8:	78f9      	ldrb	r1, [r7, #3]
  403cca:	0049      	lsls	r1, r1, #1
  403ccc:	fa00 f101 	lsl.w	r1, r0, r1
  403cd0:	400b      	ands	r3, r1
  403cd2:	431a      	orrs	r2, r3
  403cd4:	687b      	ldr	r3, [r7, #4]
  403cd6:	649a      	str	r2, [r3, #72]	; 0x48
}
  403cd8:	bf00      	nop
  403cda:	370c      	adds	r7, #12
  403cdc:	46bd      	mov	sp, r7
  403cde:	bc80      	pop	{r7}
  403ce0:	4770      	bx	lr

00403ce2 <adc_set_calibmode>:
 * \brief Set ADC auto calibration mode.
 *
 * \param p_adc Pointer to an ADC instance.
 */
void adc_set_calibmode(Adc * p_adc)
{
  403ce2:	b480      	push	{r7}
  403ce4:	b083      	sub	sp, #12
  403ce6:	af00      	add	r7, sp, #0
  403ce8:	6078      	str	r0, [r7, #4]
	p_adc->ADC_CR |= ADC_CR_AUTOCAL;
  403cea:	687b      	ldr	r3, [r7, #4]
  403cec:	681b      	ldr	r3, [r3, #0]
  403cee:	f043 0208 	orr.w	r2, r3, #8
  403cf2:	687b      	ldr	r3, [r7, #4]
  403cf4:	601a      	str	r2, [r3, #0]
}
  403cf6:	bf00      	nop
  403cf8:	370c      	adds	r7, #12
  403cfa:	46bd      	mov	sp, r7
  403cfc:	bc80      	pop	{r7}
  403cfe:	4770      	bx	lr

00403d00 <adc_enable_interrupt>:
 *
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be enabled.
 */
void adc_enable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
  403d00:	b480      	push	{r7}
  403d02:	b083      	sub	sp, #12
  403d04:	af00      	add	r7, sp, #0
  403d06:	6078      	str	r0, [r7, #4]
  403d08:	6039      	str	r1, [r7, #0]
	p_adc->ADC_IER = ul_source;
  403d0a:	687b      	ldr	r3, [r7, #4]
  403d0c:	683a      	ldr	r2, [r7, #0]
  403d0e:	625a      	str	r2, [r3, #36]	; 0x24
}
  403d10:	bf00      	nop
  403d12:	370c      	adds	r7, #12
  403d14:	46bd      	mov	sp, r7
  403d16:	bc80      	pop	{r7}
  403d18:	4770      	bx	lr

00403d1a <adc_get_status>:
 * \param p_adc Pointer to an ADC instance.
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
  403d1a:	b480      	push	{r7}
  403d1c:	b083      	sub	sp, #12
  403d1e:	af00      	add	r7, sp, #0
  403d20:	6078      	str	r0, [r7, #4]
	return p_adc->ADC_ISR;
  403d22:	687b      	ldr	r3, [r7, #4]
  403d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  403d26:	4618      	mov	r0, r3
  403d28:	370c      	adds	r7, #12
  403d2a:	46bd      	mov	sp, r7
  403d2c:	bc80      	pop	{r7}
  403d2e:	4770      	bx	lr

00403d30 <pdc_tx_init>:
 */
void pdc_tx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
  403d30:	b480      	push	{r7}
  403d32:	b085      	sub	sp, #20
  403d34:	af00      	add	r7, sp, #0
  403d36:	60f8      	str	r0, [r7, #12]
  403d38:	60b9      	str	r1, [r7, #8]
  403d3a:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
  403d3c:	68bb      	ldr	r3, [r7, #8]
  403d3e:	2b00      	cmp	r3, #0
  403d40:	d007      	beq.n	403d52 <pdc_tx_init+0x22>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
  403d42:	68bb      	ldr	r3, [r7, #8]
  403d44:	681a      	ldr	r2, [r3, #0]
  403d46:	68fb      	ldr	r3, [r7, #12]
  403d48:	609a      	str	r2, [r3, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
  403d4a:	68bb      	ldr	r3, [r7, #8]
  403d4c:	685a      	ldr	r2, [r3, #4]
  403d4e:	68fb      	ldr	r3, [r7, #12]
  403d50:	60da      	str	r2, [r3, #12]
	}
	if (p_next_packet) {
  403d52:	687b      	ldr	r3, [r7, #4]
  403d54:	2b00      	cmp	r3, #0
  403d56:	d007      	beq.n	403d68 <pdc_tx_init+0x38>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
  403d58:	687b      	ldr	r3, [r7, #4]
  403d5a:	681a      	ldr	r2, [r3, #0]
  403d5c:	68fb      	ldr	r3, [r7, #12]
  403d5e:	619a      	str	r2, [r3, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
  403d60:	687b      	ldr	r3, [r7, #4]
  403d62:	685a      	ldr	r2, [r3, #4]
  403d64:	68fb      	ldr	r3, [r7, #12]
  403d66:	61da      	str	r2, [r3, #28]
	}
}
  403d68:	bf00      	nop
  403d6a:	3714      	adds	r7, #20
  403d6c:	46bd      	mov	sp, r7
  403d6e:	bc80      	pop	{r7}
  403d70:	4770      	bx	lr

00403d72 <pdc_enable_transfer>:
 *                        (bit PERIPH_PTCR_RXTEN and bit PERIPH_PTCR_TXTEN)
 */
void pdc_enable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
  403d72:	b480      	push	{r7}
  403d74:	b083      	sub	sp, #12
  403d76:	af00      	add	r7, sp, #0
  403d78:	6078      	str	r0, [r7, #4]
  403d7a:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
  403d7c:	683a      	ldr	r2, [r7, #0]
  403d7e:	f240 1301 	movw	r3, #257	; 0x101
  403d82:	4013      	ands	r3, r2
	p_pdc->PERIPH_PTCR =
  403d84:	687a      	ldr	r2, [r7, #4]
  403d86:	6213      	str	r3, [r2, #32]
}
  403d88:	bf00      	nop
  403d8a:	370c      	adds	r7, #12
  403d8c:	46bd      	mov	sp, r7
  403d8e:	bc80      	pop	{r7}
  403d90:	4770      	bx	lr
	...

00403d94 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  403d94:	b580      	push	{r7, lr}
  403d96:	b084      	sub	sp, #16
  403d98:	af00      	add	r7, sp, #0
  403d9a:	6078      	str	r0, [r7, #4]
  403d9c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  403d9e:	6878      	ldr	r0, [r7, #4]
  403da0:	4b2c      	ldr	r3, [pc, #176]	; (403e54 <pio_handler_process+0xc0>)
  403da2:	4798      	blx	r3
  403da4:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  403da6:	6878      	ldr	r0, [r7, #4]
  403da8:	4b2b      	ldr	r3, [pc, #172]	; (403e58 <pio_handler_process+0xc4>)
  403daa:	4798      	blx	r3
  403dac:	4602      	mov	r2, r0
  403dae:	68fb      	ldr	r3, [r7, #12]
  403db0:	4013      	ands	r3, r2
  403db2:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  403db4:	68fb      	ldr	r3, [r7, #12]
  403db6:	2b00      	cmp	r3, #0
  403db8:	d03c      	beq.n	403e34 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  403dba:	2300      	movs	r3, #0
  403dbc:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  403dbe:	e034      	b.n	403e2a <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  403dc0:	4a26      	ldr	r2, [pc, #152]	; (403e5c <pio_handler_process+0xc8>)
  403dc2:	68bb      	ldr	r3, [r7, #8]
  403dc4:	011b      	lsls	r3, r3, #4
  403dc6:	4413      	add	r3, r2
  403dc8:	681a      	ldr	r2, [r3, #0]
  403dca:	683b      	ldr	r3, [r7, #0]
  403dcc:	429a      	cmp	r2, r3
  403dce:	d126      	bne.n	403e1e <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  403dd0:	4a22      	ldr	r2, [pc, #136]	; (403e5c <pio_handler_process+0xc8>)
  403dd2:	68bb      	ldr	r3, [r7, #8]
  403dd4:	011b      	lsls	r3, r3, #4
  403dd6:	4413      	add	r3, r2
  403dd8:	3304      	adds	r3, #4
  403dda:	681a      	ldr	r2, [r3, #0]
  403ddc:	68fb      	ldr	r3, [r7, #12]
  403dde:	4013      	ands	r3, r2
  403de0:	2b00      	cmp	r3, #0
  403de2:	d01c      	beq.n	403e1e <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  403de4:	4a1d      	ldr	r2, [pc, #116]	; (403e5c <pio_handler_process+0xc8>)
  403de6:	68bb      	ldr	r3, [r7, #8]
  403de8:	011b      	lsls	r3, r3, #4
  403dea:	4413      	add	r3, r2
  403dec:	330c      	adds	r3, #12
  403dee:	681b      	ldr	r3, [r3, #0]
  403df0:	491a      	ldr	r1, [pc, #104]	; (403e5c <pio_handler_process+0xc8>)
  403df2:	68ba      	ldr	r2, [r7, #8]
  403df4:	0112      	lsls	r2, r2, #4
  403df6:	440a      	add	r2, r1
  403df8:	6810      	ldr	r0, [r2, #0]
  403dfa:	4918      	ldr	r1, [pc, #96]	; (403e5c <pio_handler_process+0xc8>)
  403dfc:	68ba      	ldr	r2, [r7, #8]
  403dfe:	0112      	lsls	r2, r2, #4
  403e00:	440a      	add	r2, r1
  403e02:	3204      	adds	r2, #4
  403e04:	6812      	ldr	r2, [r2, #0]
  403e06:	4611      	mov	r1, r2
  403e08:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  403e0a:	4a14      	ldr	r2, [pc, #80]	; (403e5c <pio_handler_process+0xc8>)
  403e0c:	68bb      	ldr	r3, [r7, #8]
  403e0e:	011b      	lsls	r3, r3, #4
  403e10:	4413      	add	r3, r2
  403e12:	3304      	adds	r3, #4
  403e14:	681b      	ldr	r3, [r3, #0]
  403e16:	43db      	mvns	r3, r3
  403e18:	68fa      	ldr	r2, [r7, #12]
  403e1a:	4013      	ands	r3, r2
  403e1c:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  403e1e:	68bb      	ldr	r3, [r7, #8]
  403e20:	3301      	adds	r3, #1
  403e22:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  403e24:	68bb      	ldr	r3, [r7, #8]
  403e26:	2b06      	cmp	r3, #6
  403e28:	d803      	bhi.n	403e32 <pio_handler_process+0x9e>
		while (status != 0) {
  403e2a:	68fb      	ldr	r3, [r7, #12]
  403e2c:	2b00      	cmp	r3, #0
  403e2e:	d1c7      	bne.n	403dc0 <pio_handler_process+0x2c>
  403e30:	e000      	b.n	403e34 <pio_handler_process+0xa0>
				break;
  403e32:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  403e34:	4b0a      	ldr	r3, [pc, #40]	; (403e60 <pio_handler_process+0xcc>)
  403e36:	681b      	ldr	r3, [r3, #0]
  403e38:	2b00      	cmp	r3, #0
  403e3a:	d007      	beq.n	403e4c <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  403e3c:	4b09      	ldr	r3, [pc, #36]	; (403e64 <pio_handler_process+0xd0>)
  403e3e:	681b      	ldr	r3, [r3, #0]
  403e40:	2b00      	cmp	r3, #0
  403e42:	d003      	beq.n	403e4c <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  403e44:	4b07      	ldr	r3, [pc, #28]	; (403e64 <pio_handler_process+0xd0>)
  403e46:	681b      	ldr	r3, [r3, #0]
  403e48:	6878      	ldr	r0, [r7, #4]
  403e4a:	4798      	blx	r3
		}
	}
#endif
}
  403e4c:	bf00      	nop
  403e4e:	3710      	adds	r7, #16
  403e50:	46bd      	mov	sp, r7
  403e52:	bd80      	pop	{r7, pc}
  403e54:	004072d1 	.word	0x004072d1
  403e58:	004072e7 	.word	0x004072e7
  403e5c:	20001b54 	.word	0x20001b54
  403e60:	20001df0 	.word	0x20001df0
  403e64:	20001bc4 	.word	0x20001bc4

00403e68 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  403e68:	b580      	push	{r7, lr}
  403e6a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  403e6c:	210b      	movs	r1, #11
  403e6e:	4802      	ldr	r0, [pc, #8]	; (403e78 <PIOA_Handler+0x10>)
  403e70:	4b02      	ldr	r3, [pc, #8]	; (403e7c <PIOA_Handler+0x14>)
  403e72:	4798      	blx	r3
}
  403e74:	bf00      	nop
  403e76:	bd80      	pop	{r7, pc}
  403e78:	400e0e00 	.word	0x400e0e00
  403e7c:	00403d95 	.word	0x00403d95

00403e80 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  403e80:	b580      	push	{r7, lr}
  403e82:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  403e84:	210c      	movs	r1, #12
  403e86:	4802      	ldr	r0, [pc, #8]	; (403e90 <PIOB_Handler+0x10>)
  403e88:	4b02      	ldr	r3, [pc, #8]	; (403e94 <PIOB_Handler+0x14>)
  403e8a:	4798      	blx	r3
}
  403e8c:	bf00      	nop
  403e8e:	bd80      	pop	{r7, pc}
  403e90:	400e1000 	.word	0x400e1000
  403e94:	00403d95 	.word	0x00403d95

00403e98 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  403e98:	b4b0      	push	{r4, r5, r7}
  403e9a:	b091      	sub	sp, #68	; 0x44
  403e9c:	af00      	add	r7, sp, #0
  403e9e:	6078      	str	r0, [r7, #4]
  403ea0:	6039      	str	r1, [r7, #0]
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  403ea2:	4b1b      	ldr	r3, [pc, #108]	; (403f10 <pwm_clocks_generate+0x78>)
  403ea4:	f107 040c 	add.w	r4, r7, #12
  403ea8:	461d      	mov	r5, r3
  403eaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  403eac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  403eae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  403eb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  403eb2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  403eb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  403eba:	2300      	movs	r3, #0
  403ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  403ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  403ec0:	009b      	lsls	r3, r3, #2
  403ec2:	f107 0240 	add.w	r2, r7, #64	; 0x40
  403ec6:	4413      	add	r3, r2
  403ec8:	f853 3c34 	ldr.w	r3, [r3, #-52]
  403ecc:	683a      	ldr	r2, [r7, #0]
  403ece:	fbb2 f2f3 	udiv	r2, r2, r3
  403ed2:	687b      	ldr	r3, [r7, #4]
  403ed4:	fbb2 f3f3 	udiv	r3, r2, r3
  403ed8:	63bb      	str	r3, [r7, #56]	; 0x38
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  403eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  403edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  403ee0:	d906      	bls.n	403ef0 <pwm_clocks_generate+0x58>
			break;
		}
		ul_pre++;
  403ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  403ee4:	3301      	adds	r3, #1
  403ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  403ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  403eea:	2b0a      	cmp	r3, #10
  403eec:	d9e7      	bls.n	403ebe <pwm_clocks_generate+0x26>
  403eee:	e000      	b.n	403ef2 <pwm_clocks_generate+0x5a>
			break;
  403ef0:	bf00      	nop

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  403ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  403ef4:	2b0a      	cmp	r3, #10
  403ef6:	d804      	bhi.n	403f02 <pwm_clocks_generate+0x6a>
		return ul_div | (ul_pre << 8);
  403ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  403efa:	021a      	lsls	r2, r3, #8
  403efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  403efe:	4313      	orrs	r3, r2
  403f00:	e001      	b.n	403f06 <pwm_clocks_generate+0x6e>
	} else {
		return PWM_INVALID_ARGUMENT;
  403f02:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
  403f06:	4618      	mov	r0, r3
  403f08:	3744      	adds	r7, #68	; 0x44
  403f0a:	46bd      	mov	sp, r7
  403f0c:	bcb0      	pop	{r4, r5, r7}
  403f0e:	4770      	bx	lr
  403f10:	00409074 	.word	0x00409074

00403f14 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  403f14:	b580      	push	{r7, lr}
  403f16:	b084      	sub	sp, #16
  403f18:	af00      	add	r7, sp, #0
  403f1a:	6078      	str	r0, [r7, #4]
  403f1c:	6039      	str	r1, [r7, #0]
	uint32_t clock = 0;
  403f1e:	2300      	movs	r3, #0
  403f20:	60fb      	str	r3, [r7, #12]
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  403f22:	683b      	ldr	r3, [r7, #0]
  403f24:	681b      	ldr	r3, [r3, #0]
  403f26:	2b00      	cmp	r3, #0
  403f28:	d011      	beq.n	403f4e <pwm_init+0x3a>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  403f2a:	683b      	ldr	r3, [r7, #0]
  403f2c:	681a      	ldr	r2, [r3, #0]
  403f2e:	683b      	ldr	r3, [r7, #0]
  403f30:	689b      	ldr	r3, [r3, #8]
  403f32:	4619      	mov	r1, r3
  403f34:	4610      	mov	r0, r2
  403f36:	4b16      	ldr	r3, [pc, #88]	; (403f90 <pwm_init+0x7c>)
  403f38:	4798      	blx	r3
  403f3a:	60b8      	str	r0, [r7, #8]
		if (result == PWM_INVALID_ARGUMENT) {
  403f3c:	68bb      	ldr	r3, [r7, #8]
  403f3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
  403f42:	4293      	cmp	r3, r2
  403f44:	d101      	bne.n	403f4a <pwm_init+0x36>
			return result;
  403f46:	68bb      	ldr	r3, [r7, #8]
  403f48:	e01e      	b.n	403f88 <pwm_init+0x74>
		}

		clock = result;
  403f4a:	68bb      	ldr	r3, [r7, #8]
  403f4c:	60fb      	str	r3, [r7, #12]
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  403f4e:	683b      	ldr	r3, [r7, #0]
  403f50:	685b      	ldr	r3, [r3, #4]
  403f52:	2b00      	cmp	r3, #0
  403f54:	d014      	beq.n	403f80 <pwm_init+0x6c>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  403f56:	683b      	ldr	r3, [r7, #0]
  403f58:	685a      	ldr	r2, [r3, #4]
  403f5a:	683b      	ldr	r3, [r7, #0]
  403f5c:	689b      	ldr	r3, [r3, #8]
  403f5e:	4619      	mov	r1, r3
  403f60:	4610      	mov	r0, r2
  403f62:	4b0b      	ldr	r3, [pc, #44]	; (403f90 <pwm_init+0x7c>)
  403f64:	4798      	blx	r3
  403f66:	60b8      	str	r0, [r7, #8]

		if (result == PWM_INVALID_ARGUMENT) {
  403f68:	68bb      	ldr	r3, [r7, #8]
  403f6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
  403f6e:	4293      	cmp	r3, r2
  403f70:	d101      	bne.n	403f76 <pwm_init+0x62>
			return result;
  403f72:	68bb      	ldr	r3, [r7, #8]
  403f74:	e008      	b.n	403f88 <pwm_init+0x74>
		}

		clock |= (result << 16);
  403f76:	68bb      	ldr	r3, [r7, #8]
  403f78:	041b      	lsls	r3, r3, #16
  403f7a:	68fa      	ldr	r2, [r7, #12]
  403f7c:	4313      	orrs	r3, r2
  403f7e:	60fb      	str	r3, [r7, #12]
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  403f80:	687b      	ldr	r3, [r7, #4]
  403f82:	68fa      	ldr	r2, [r7, #12]
  403f84:	601a      	str	r2, [r3, #0]
#endif
	return 0;
  403f86:	2300      	movs	r3, #0
}
  403f88:	4618      	mov	r0, r3
  403f8a:	3710      	adds	r7, #16
  403f8c:	46bd      	mov	sp, r7
  403f8e:	bd80      	pop	{r7, pc}
  403f90:	00403e99 	.word	0x00403e99

00403f94 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  403f94:	b480      	push	{r7}
  403f96:	b087      	sub	sp, #28
  403f98:	af00      	add	r7, sp, #0
  403f9a:	6078      	str	r0, [r7, #4]
  403f9c:	6039      	str	r1, [r7, #0]
	uint32_t tmp_reg = 0;
  403f9e:	2300      	movs	r3, #0
  403fa0:	617b      	str	r3, [r7, #20]
	uint32_t ch_num = p_channel->channel;
  403fa2:	683b      	ldr	r3, [r7, #0]
  403fa4:	681b      	ldr	r3, [r3, #0]
  403fa6:	613b      	str	r3, [r7, #16]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  403fa8:	683b      	ldr	r3, [r7, #0]
  403faa:	685b      	ldr	r3, [r3, #4]
  403fac:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
  403fb0:	683a      	ldr	r2, [r7, #0]
  403fb2:	7a92      	ldrb	r2, [r2, #10]
  403fb4:	0252      	lsls	r2, r2, #9
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  403fb6:	4313      	orrs	r3, r2
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
  403fb8:	683a      	ldr	r2, [r7, #0]
  403fba:	8a92      	ldrh	r2, [r2, #20]
			(p_channel->polarity << 9) |
  403fbc:	4313      	orrs	r3, r2
			(p_channel->b_deadtime_generator << 16) |
  403fbe:	683a      	ldr	r2, [r7, #0]
  403fc0:	7d92      	ldrb	r2, [r2, #22]
  403fc2:	0412      	lsls	r2, r2, #16
			(p_channel->counter_event) |
  403fc4:	4313      	orrs	r3, r2
			(p_channel->b_pwmh_output_inverted << 17) |
  403fc6:	683a      	ldr	r2, [r7, #0]
  403fc8:	7dd2      	ldrb	r2, [r2, #23]
  403fca:	0452      	lsls	r2, r2, #17
			(p_channel->b_deadtime_generator << 16) |
  403fcc:	4313      	orrs	r3, r2
			(p_channel->b_pwml_output_inverted << 18) |
  403fce:	683a      	ldr	r2, [r7, #0]
  403fd0:	7e12      	ldrb	r2, [r2, #24]
  403fd2:	0492      	lsls	r2, r2, #18
			(p_channel->b_pwmh_output_inverted << 17) |
  403fd4:	4313      	orrs	r3, r2
#endif
			(p_channel->alignment);
  403fd6:	683a      	ldr	r2, [r7, #0]
  403fd8:	8912      	ldrh	r2, [r2, #8]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  403fda:	4313      	orrs	r3, r2
  403fdc:	617b      	str	r3, [r7, #20]
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  403fde:	687a      	ldr	r2, [r7, #4]
  403fe0:	693b      	ldr	r3, [r7, #16]
  403fe2:	3310      	adds	r3, #16
  403fe4:	015b      	lsls	r3, r3, #5
  403fe6:	4413      	add	r3, r2
  403fe8:	697a      	ldr	r2, [r7, #20]
  403fea:	601a      	str	r2, [r3, #0]

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  403fec:	683b      	ldr	r3, [r7, #0]
  403fee:	68da      	ldr	r2, [r3, #12]
  403ff0:	6879      	ldr	r1, [r7, #4]
  403ff2:	693b      	ldr	r3, [r7, #16]
  403ff4:	3310      	adds	r3, #16
  403ff6:	015b      	lsls	r3, r3, #5
  403ff8:	440b      	add	r3, r1
  403ffa:	3304      	adds	r3, #4
  403ffc:	601a      	str	r2, [r3, #0]

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  403ffe:	683b      	ldr	r3, [r7, #0]
  404000:	691a      	ldr	r2, [r3, #16]
  404002:	6879      	ldr	r1, [r7, #4]
  404004:	693b      	ldr	r3, [r7, #16]
  404006:	015b      	lsls	r3, r3, #5
  404008:	440b      	add	r3, r1
  40400a:	f503 7303 	add.w	r3, r3, #524	; 0x20c
  40400e:	601a      	str	r2, [r3, #0]
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  404010:	683b      	ldr	r3, [r7, #0]
  404012:	7d9b      	ldrb	r3, [r3, #22]
  404014:	2b00      	cmp	r3, #0
  404016:	d00d      	beq.n	404034 <pwm_channel_init+0xa0>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
  404018:	683b      	ldr	r3, [r7, #0]
  40401a:	8b9b      	ldrh	r3, [r3, #28]
  40401c:	041b      	lsls	r3, r3, #16
  40401e:	461a      	mov	r2, r3
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  404020:	683b      	ldr	r3, [r7, #0]
  404022:	8b5b      	ldrh	r3, [r3, #26]
  404024:	431a      	orrs	r2, r3
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  404026:	6879      	ldr	r1, [r7, #4]
  404028:	693b      	ldr	r3, [r7, #16]
  40402a:	015b      	lsls	r3, r3, #5
  40402c:	440b      	add	r3, r1
  40402e:	f503 7306 	add.w	r3, r3, #536	; 0x218
  404032:	601a      	str	r2, [r3, #0]
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  404034:	687b      	ldr	r3, [r7, #4]
  404036:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  404038:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  40403c:	693b      	ldr	r3, [r7, #16]
  40403e:	fa01 f303 	lsl.w	r3, r1, r3
  404042:	43db      	mvns	r3, r3
  404044:	4013      	ands	r3, r2
  404046:	617b      	str	r3, [r7, #20]
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  404048:	683b      	ldr	r3, [r7, #0]
  40404a:	7f9b      	ldrb	r3, [r3, #30]
  40404c:	461a      	mov	r2, r3
  40404e:	693b      	ldr	r3, [r7, #16]
  404050:	409a      	lsls	r2, r3
			(((p_channel->output_selection.b_override_pwml) << ch_num)
  404052:	683b      	ldr	r3, [r7, #0]
  404054:	7fdb      	ldrb	r3, [r3, #31]
  404056:	4619      	mov	r1, r3
  404058:	693b      	ldr	r3, [r7, #16]
  40405a:	fa01 f303 	lsl.w	r3, r1, r3
					<< 16);
  40405e:	041b      	lsls	r3, r3, #16
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  404060:	4313      	orrs	r3, r2
  404062:	461a      	mov	r2, r3
  404064:	697b      	ldr	r3, [r7, #20]
  404066:	4313      	orrs	r3, r2
  404068:	617b      	str	r3, [r7, #20]
	p_pwm->PWM_OS = tmp_reg;
  40406a:	687b      	ldr	r3, [r7, #4]
  40406c:	697a      	ldr	r2, [r7, #20]
  40406e:	649a      	str	r2, [r3, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  404070:	687b      	ldr	r3, [r7, #4]
  404072:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  404074:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  404078:	693b      	ldr	r3, [r7, #16]
  40407a:	fa01 f303 	lsl.w	r3, r1, r3
  40407e:	43db      	mvns	r3, r3
  404080:	4013      	ands	r3, r2
  404082:	617b      	str	r3, [r7, #20]
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  404084:	683b      	ldr	r3, [r7, #0]
  404086:	f893 3020 	ldrb.w	r3, [r3, #32]
  40408a:	461a      	mov	r2, r3
  40408c:	693b      	ldr	r3, [r7, #16]
  40408e:	409a      	lsls	r2, r3
			(((p_channel->output_selection.override_level_pwml) << ch_num)
  404090:	683b      	ldr	r3, [r7, #0]
  404092:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
  404096:	4619      	mov	r1, r3
  404098:	693b      	ldr	r3, [r7, #16]
  40409a:	fa01 f303 	lsl.w	r3, r1, r3
					<< 16);
  40409e:	041b      	lsls	r3, r3, #16
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  4040a0:	4313      	orrs	r3, r2
  4040a2:	461a      	mov	r2, r3
  4040a4:	697b      	ldr	r3, [r7, #20]
  4040a6:	4313      	orrs	r3, r2
  4040a8:	617b      	str	r3, [r7, #20]
	p_pwm->PWM_OOV = tmp_reg;
  4040aa:	687b      	ldr	r3, [r7, #4]
  4040ac:	697a      	ldr	r2, [r7, #20]
  4040ae:	645a      	str	r2, [r3, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  4040b0:	2201      	movs	r2, #1
  4040b2:	693b      	ldr	r3, [r7, #16]
  4040b4:	fa02 f303 	lsl.w	r3, r2, r3
  4040b8:	60fb      	str	r3, [r7, #12]
	if (p_channel->b_sync_ch) {
  4040ba:	683b      	ldr	r3, [r7, #0]
  4040bc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
  4040c0:	2b00      	cmp	r3, #0
  4040c2:	d006      	beq.n	4040d2 <pwm_channel_init+0x13e>
		p_pwm->PWM_SCM |= channel;
  4040c4:	687b      	ldr	r3, [r7, #4]
  4040c6:	6a1a      	ldr	r2, [r3, #32]
  4040c8:	68fb      	ldr	r3, [r7, #12]
  4040ca:	431a      	orrs	r2, r3
  4040cc:	687b      	ldr	r3, [r7, #4]
  4040ce:	621a      	str	r2, [r3, #32]
  4040d0:	e006      	b.n	4040e0 <pwm_channel_init+0x14c>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  4040d2:	687b      	ldr	r3, [r7, #4]
  4040d4:	6a1a      	ldr	r2, [r3, #32]
  4040d6:	68fb      	ldr	r3, [r7, #12]
  4040d8:	43db      	mvns	r3, r3
  4040da:	401a      	ands	r2, r3
  4040dc:	687b      	ldr	r3, [r7, #4]
  4040de:	621a      	str	r2, [r3, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  4040e0:	683b      	ldr	r3, [r7, #0]
  4040e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  4040e6:	2b01      	cmp	r3, #1
  4040e8:	d109      	bne.n	4040fe <pwm_channel_init+0x16a>
		p_pwm->PWM_FPV |= (0x01 << ch_num);
  4040ea:	687b      	ldr	r3, [r7, #4]
  4040ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4040ee:	2101      	movs	r1, #1
  4040f0:	693a      	ldr	r2, [r7, #16]
  4040f2:	fa01 f202 	lsl.w	r2, r1, r2
  4040f6:	431a      	orrs	r2, r3
  4040f8:	687b      	ldr	r3, [r7, #4]
  4040fa:	669a      	str	r2, [r3, #104]	; 0x68
  4040fc:	e009      	b.n	404112 <pwm_channel_init+0x17e>
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
  4040fe:	687b      	ldr	r3, [r7, #4]
  404100:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404102:	2101      	movs	r1, #1
  404104:	693a      	ldr	r2, [r7, #16]
  404106:	fa01 f202 	lsl.w	r2, r1, r2
  40410a:	43d2      	mvns	r2, r2
  40410c:	401a      	ands	r2, r3
  40410e:	687b      	ldr	r3, [r7, #4]
  404110:	669a      	str	r2, [r3, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  404112:	683b      	ldr	r3, [r7, #0]
  404114:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
  404118:	2b01      	cmp	r3, #1
  40411a:	d10a      	bne.n	404132 <pwm_channel_init+0x19e>
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
  40411c:	687b      	ldr	r3, [r7, #4]
  40411e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404120:	2101      	movs	r1, #1
  404122:	693a      	ldr	r2, [r7, #16]
  404124:	fa01 f202 	lsl.w	r2, r1, r2
  404128:	0412      	lsls	r2, r2, #16
  40412a:	431a      	orrs	r2, r3
  40412c:	687b      	ldr	r3, [r7, #4]
  40412e:	669a      	str	r2, [r3, #104]	; 0x68
  404130:	e00a      	b.n	404148 <pwm_channel_init+0x1b4>
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
  404132:	687b      	ldr	r3, [r7, #4]
  404134:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404136:	2101      	movs	r1, #1
  404138:	693a      	ldr	r2, [r7, #16]
  40413a:	fa01 f202 	lsl.w	r2, r1, r2
  40413e:	0412      	lsls	r2, r2, #16
  404140:	43d2      	mvns	r2, r2
  404142:	401a      	ands	r2, r3
  404144:	687b      	ldr	r3, [r7, #4]
  404146:	669a      	str	r2, [r3, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
  404148:	2300      	movs	r3, #0
  40414a:	60bb      	str	r3, [r7, #8]
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  40414c:	693b      	ldr	r3, [r7, #16]
  40414e:	00db      	lsls	r3, r3, #3
  404150:	613b      	str	r3, [r7, #16]
	fault_enable_reg = p_pwm->PWM_FPE;
  404152:	687b      	ldr	r3, [r7, #4]
  404154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  404156:	60bb      	str	r3, [r7, #8]
	fault_enable_reg &= ~(0xFF << ch_num);
  404158:	22ff      	movs	r2, #255	; 0xff
  40415a:	693b      	ldr	r3, [r7, #16]
  40415c:	fa02 f303 	lsl.w	r3, r2, r3
  404160:	43db      	mvns	r3, r3
  404162:	461a      	mov	r2, r3
  404164:	68bb      	ldr	r3, [r7, #8]
  404166:	4013      	ands	r3, r2
  404168:	60bb      	str	r3, [r7, #8]
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  40416a:	683b      	ldr	r3, [r7, #0]
  40416c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
  404170:	461a      	mov	r2, r3
  404172:	693b      	ldr	r3, [r7, #16]
  404174:	fa02 f303 	lsl.w	r3, r2, r3
  404178:	461a      	mov	r2, r3
  40417a:	68bb      	ldr	r3, [r7, #8]
  40417c:	4313      	orrs	r3, r2
  40417e:	60bb      	str	r3, [r7, #8]
	p_pwm->PWM_FPE = fault_enable_reg;
  404180:	687b      	ldr	r3, [r7, #4]
  404182:	68ba      	ldr	r2, [r7, #8]
  404184:	66da      	str	r2, [r3, #108]	; 0x6c
#endif
#endif

	ch_num = p_channel->channel;
  404186:	683b      	ldr	r3, [r7, #0]
  404188:	681b      	ldr	r3, [r3, #0]
  40418a:	613b      	str	r3, [r7, #16]
	}
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
  40418c:	2300      	movs	r3, #0
}
  40418e:	4618      	mov	r0, r3
  404190:	371c      	adds	r7, #28
  404192:	46bd      	mov	sp, r7
  404194:	bc80      	pop	{r7}
  404196:	4770      	bx	lr

00404198 <pwm_channel_enable>:
 *
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
  404198:	b480      	push	{r7}
  40419a:	b083      	sub	sp, #12
  40419c:	af00      	add	r7, sp, #0
  40419e:	6078      	str	r0, [r7, #4]
  4041a0:	6039      	str	r1, [r7, #0]
	p_pwm->PWM_ENA = (1 << ul_channel);
  4041a2:	2201      	movs	r2, #1
  4041a4:	683b      	ldr	r3, [r7, #0]
  4041a6:	fa02 f303 	lsl.w	r3, r2, r3
  4041aa:	461a      	mov	r2, r3
  4041ac:	687b      	ldr	r3, [r7, #4]
  4041ae:	605a      	str	r2, [r3, #4]
}
  4041b0:	bf00      	nop
  4041b2:	370c      	adds	r7, #12
  4041b4:	46bd      	mov	sp, r7
  4041b6:	bc80      	pop	{r7}
  4041b8:	4770      	bx	lr

004041ba <pwm_channel_disable>:
 *
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
  4041ba:	b480      	push	{r7}
  4041bc:	b083      	sub	sp, #12
  4041be:	af00      	add	r7, sp, #0
  4041c0:	6078      	str	r0, [r7, #4]
  4041c2:	6039      	str	r1, [r7, #0]
	p_pwm->PWM_DIS = (1 << ul_channel);
  4041c4:	2201      	movs	r2, #1
  4041c6:	683b      	ldr	r3, [r7, #0]
  4041c8:	fa02 f303 	lsl.w	r3, r2, r3
  4041cc:	461a      	mov	r2, r3
  4041ce:	687b      	ldr	r3, [r7, #4]
  4041d0:	609a      	str	r2, [r3, #8]
}
  4041d2:	bf00      	nop
  4041d4:	370c      	adds	r7, #12
  4041d6:	46bd      	mov	sp, r7
  4041d8:	bc80      	pop	{r7}
  4041da:	4770      	bx	lr

004041dc <pwm_pdc_set_request_mode>:
 * \param request_mode PDC transfer request mode.
 * \param ul_cmp_unit PWM comparison unit number for PDC transfer request.
 */
void pwm_pdc_set_request_mode(Pwm *p_pwm, pwm_pdc_request_mode_t request_mode,
		uint32_t ul_cmp_unit)
{
  4041dc:	b480      	push	{r7}
  4041de:	b087      	sub	sp, #28
  4041e0:	af00      	add	r7, sp, #0
  4041e2:	60f8      	str	r0, [r7, #12]
  4041e4:	60b9      	str	r1, [r7, #8]
  4041e6:	607a      	str	r2, [r7, #4]
	uint32_t sync_mode = p_pwm->PWM_SCM;
  4041e8:	68fb      	ldr	r3, [r7, #12]
  4041ea:	6a1b      	ldr	r3, [r3, #32]
  4041ec:	617b      	str	r3, [r7, #20]

	sync_mode &= ~(PWM_SCM_PTRCS_Msk | PWM_SCM_PTRM);
  4041ee:	697b      	ldr	r3, [r7, #20]
  4041f0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
  4041f4:	617b      	str	r3, [r7, #20]
	sync_mode |= (PWM_SCM_PTRCS(ul_cmp_unit) | request_mode);
  4041f6:	687b      	ldr	r3, [r7, #4]
  4041f8:	055b      	lsls	r3, r3, #21
  4041fa:	f403 0260 	and.w	r2, r3, #14680064	; 0xe00000
  4041fe:	68bb      	ldr	r3, [r7, #8]
  404200:	4313      	orrs	r3, r2
  404202:	697a      	ldr	r2, [r7, #20]
  404204:	4313      	orrs	r3, r2
  404206:	617b      	str	r3, [r7, #20]

	p_pwm->PWM_SCM = sync_mode;
  404208:	68fb      	ldr	r3, [r7, #12]
  40420a:	697a      	ldr	r2, [r7, #20]
  40420c:	621a      	str	r2, [r3, #32]
}
  40420e:	bf00      	nop
  404210:	371c      	adds	r7, #28
  404212:	46bd      	mov	sp, r7
  404214:	bc80      	pop	{r7}
  404216:	4770      	bx	lr

00404218 <pwm_pdc_enable_interrupt>:
 *
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_sources Bitmask of PWM PDC transfer interrupt sources.
 */
void pwm_pdc_enable_interrupt(Pwm *p_pwm, uint32_t ul_sources)
{
  404218:	b480      	push	{r7}
  40421a:	b083      	sub	sp, #12
  40421c:	af00      	add	r7, sp, #0
  40421e:	6078      	str	r0, [r7, #4]
  404220:	6039      	str	r1, [r7, #0]
	p_pwm->PWM_IER2 = ul_sources;
  404222:	687b      	ldr	r3, [r7, #4]
  404224:	683a      	ldr	r2, [r7, #0]
  404226:	635a      	str	r2, [r3, #52]	; 0x34
}
  404228:	bf00      	nop
  40422a:	370c      	adds	r7, #12
  40422c:	46bd      	mov	sp, r7
  40422e:	bc80      	pop	{r7}
  404230:	4770      	bx	lr

00404232 <pwm_sync_init>:
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_sync_init(Pwm *p_pwm, pwm_sync_update_mode_t mode,
		uint32_t ul_update_period)
{
  404232:	b480      	push	{r7}
  404234:	b087      	sub	sp, #28
  404236:	af00      	add	r7, sp, #0
  404238:	60f8      	str	r0, [r7, #12]
  40423a:	60b9      	str	r1, [r7, #8]
  40423c:	607a      	str	r2, [r7, #4]
	uint32_t sync_mode = p_pwm->PWM_SCM;
  40423e:	68fb      	ldr	r3, [r7, #12]
  404240:	6a1b      	ldr	r3, [r3, #32]
  404242:	617b      	str	r3, [r7, #20]

	sync_mode &= ~PWM_SCM_UPDM_Msk;
  404244:	697b      	ldr	r3, [r7, #20]
  404246:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
  40424a:	617b      	str	r3, [r7, #20]
	sync_mode |= mode;
  40424c:	697a      	ldr	r2, [r7, #20]
  40424e:	68bb      	ldr	r3, [r7, #8]
  404250:	4313      	orrs	r3, r2
  404252:	617b      	str	r3, [r7, #20]

	p_pwm->PWM_SCM = sync_mode;
  404254:	68fb      	ldr	r3, [r7, #12]
  404256:	697a      	ldr	r2, [r7, #20]
  404258:	621a      	str	r2, [r3, #32]

	p_pwm->PWM_SCUP = PWM_SCUP_UPR(ul_update_period);
  40425a:	687b      	ldr	r3, [r7, #4]
  40425c:	f003 020f 	and.w	r2, r3, #15
  404260:	68fb      	ldr	r3, [r7, #12]
  404262:	62da      	str	r2, [r3, #44]	; 0x2c

	return 0;
  404264:	2300      	movs	r3, #0
}
  404266:	4618      	mov	r0, r3
  404268:	371c      	adds	r7, #28
  40426a:	46bd      	mov	sp, r7
  40426c:	bc80      	pop	{r7}
  40426e:	4770      	bx	lr

00404270 <pwm_get_interrupt_status>:
 * \param p_pwm Pointer to a PWM instance.
 *
 * \return Interrupt status of PDC transfer, synchronous channels and comparison.
 */
uint32_t pwm_get_interrupt_status(Pwm *p_pwm)
{
  404270:	b480      	push	{r7}
  404272:	b083      	sub	sp, #12
  404274:	af00      	add	r7, sp, #0
  404276:	6078      	str	r0, [r7, #4]
	return p_pwm->PWM_ISR2;
  404278:	687b      	ldr	r3, [r7, #4]
  40427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
  40427c:	4618      	mov	r0, r3
  40427e:	370c      	adds	r7, #12
  404280:	46bd      	mov	sp, r7
  404282:	bc80      	pop	{r7}
  404284:	4770      	bx	lr

00404286 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  404286:	b480      	push	{r7}
  404288:	b085      	sub	sp, #20
  40428a:	af00      	add	r7, sp, #0
  40428c:	6078      	str	r0, [r7, #4]
  40428e:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  404290:	2300      	movs	r3, #0
  404292:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  404294:	687b      	ldr	r3, [r7, #4]
  404296:	22ac      	movs	r2, #172	; 0xac
  404298:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  40429a:	683b      	ldr	r3, [r7, #0]
  40429c:	681a      	ldr	r2, [r3, #0]
  40429e:	683b      	ldr	r3, [r7, #0]
  4042a0:	685b      	ldr	r3, [r3, #4]
  4042a2:	fbb2 f3f3 	udiv	r3, r2, r3
  4042a6:	091b      	lsrs	r3, r3, #4
  4042a8:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4042aa:	68fb      	ldr	r3, [r7, #12]
  4042ac:	2b00      	cmp	r3, #0
  4042ae:	d003      	beq.n	4042b8 <uart_init+0x32>
  4042b0:	68fb      	ldr	r3, [r7, #12]
  4042b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4042b6:	d301      	bcc.n	4042bc <uart_init+0x36>
		return 1;
  4042b8:	2301      	movs	r3, #1
  4042ba:	e00f      	b.n	4042dc <uart_init+0x56>

	p_uart->UART_BRGR = cd;
  4042bc:	687b      	ldr	r3, [r7, #4]
  4042be:	68fa      	ldr	r2, [r7, #12]
  4042c0:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4042c2:	683b      	ldr	r3, [r7, #0]
  4042c4:	689a      	ldr	r2, [r3, #8]
  4042c6:	687b      	ldr	r3, [r7, #4]
  4042c8:	605a      	str	r2, [r3, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  4042ca:	687b      	ldr	r3, [r7, #4]
  4042cc:	f240 2202 	movw	r2, #514	; 0x202
  4042d0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4042d4:	687b      	ldr	r3, [r7, #4]
  4042d6:	2250      	movs	r2, #80	; 0x50
  4042d8:	601a      	str	r2, [r3, #0]

	return 0;
  4042da:	2300      	movs	r3, #0
}
  4042dc:	4618      	mov	r0, r3
  4042de:	3714      	adds	r7, #20
  4042e0:	46bd      	mov	sp, r7
  4042e2:	bc80      	pop	{r7}
  4042e4:	4770      	bx	lr

004042e6 <uart_enable>:
 * \brief Enable UART receiver and transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable(Uart *p_uart)
{
  4042e6:	b480      	push	{r7}
  4042e8:	b083      	sub	sp, #12
  4042ea:	af00      	add	r7, sp, #0
  4042ec:	6078      	str	r0, [r7, #4]
	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4042ee:	687b      	ldr	r3, [r7, #4]
  4042f0:	2250      	movs	r2, #80	; 0x50
  4042f2:	601a      	str	r2, [r3, #0]
}
  4042f4:	bf00      	nop
  4042f6:	370c      	adds	r7, #12
  4042f8:	46bd      	mov	sp, r7
  4042fa:	bc80      	pop	{r7}
  4042fc:	4770      	bx	lr

004042fe <uart_enable_interrupt>:
 *
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
  4042fe:	b480      	push	{r7}
  404300:	b083      	sub	sp, #12
  404302:	af00      	add	r7, sp, #0
  404304:	6078      	str	r0, [r7, #4]
  404306:	6039      	str	r1, [r7, #0]
	p_uart->UART_IER = ul_sources;
  404308:	687b      	ldr	r3, [r7, #4]
  40430a:	683a      	ldr	r2, [r7, #0]
  40430c:	609a      	str	r2, [r3, #8]
}
  40430e:	bf00      	nop
  404310:	370c      	adds	r7, #12
  404312:	46bd      	mov	sp, r7
  404314:	bc80      	pop	{r7}
  404316:	4770      	bx	lr

00404318 <uart_get_status>:
 * \param p_uart Pointer to a UART instance.
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
  404318:	b480      	push	{r7}
  40431a:	b083      	sub	sp, #12
  40431c:	af00      	add	r7, sp, #0
  40431e:	6078      	str	r0, [r7, #4]
	return p_uart->UART_SR;
  404320:	687b      	ldr	r3, [r7, #4]
  404322:	695b      	ldr	r3, [r3, #20]
}
  404324:	4618      	mov	r0, r3
  404326:	370c      	adds	r7, #12
  404328:	46bd      	mov	sp, r7
  40432a:	bc80      	pop	{r7}
  40432c:	4770      	bx	lr

0040432e <uart_reset_status>:
 * \brief Reset status bits.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_reset_status(Uart *p_uart)
{
  40432e:	b480      	push	{r7}
  404330:	b083      	sub	sp, #12
  404332:	af00      	add	r7, sp, #0
  404334:	6078      	str	r0, [r7, #4]
	p_uart->UART_CR = UART_CR_RSTSTA;
  404336:	687b      	ldr	r3, [r7, #4]
  404338:	f44f 7280 	mov.w	r2, #256	; 0x100
  40433c:	601a      	str	r2, [r3, #0]
}
  40433e:	bf00      	nop
  404340:	370c      	adds	r7, #12
  404342:	46bd      	mov	sp, r7
  404344:	bc80      	pop	{r7}
  404346:	4770      	bx	lr

00404348 <uart_is_tx_empty>:
 *
 * \retval 1 Transmitter is empty.
 * \retval 0 Transmitter is not empty.
 */
uint32_t uart_is_tx_empty(Uart *p_uart)
{
  404348:	b480      	push	{r7}
  40434a:	b083      	sub	sp, #12
  40434c:	af00      	add	r7, sp, #0
  40434e:	6078      	str	r0, [r7, #4]
	return (p_uart->UART_SR & UART_SR_TXEMPTY) > 0;
  404350:	687b      	ldr	r3, [r7, #4]
  404352:	695b      	ldr	r3, [r3, #20]
  404354:	f403 7300 	and.w	r3, r3, #512	; 0x200
  404358:	2b00      	cmp	r3, #0
  40435a:	bf14      	ite	ne
  40435c:	2301      	movne	r3, #1
  40435e:	2300      	moveq	r3, #0
  404360:	b2db      	uxtb	r3, r3
}
  404362:	4618      	mov	r0, r3
  404364:	370c      	adds	r7, #12
  404366:	46bd      	mov	sp, r7
  404368:	bc80      	pop	{r7}
  40436a:	4770      	bx	lr

0040436c <uart_is_rx_ready>:
 *
 * \retval 1 One data has been received.
 * \retval 0 No data has been received.
 */
uint32_t uart_is_rx_ready(Uart *p_uart)
{
  40436c:	b480      	push	{r7}
  40436e:	b083      	sub	sp, #12
  404370:	af00      	add	r7, sp, #0
  404372:	6078      	str	r0, [r7, #4]
	return (p_uart->UART_SR & UART_SR_RXRDY) > 0;
  404374:	687b      	ldr	r3, [r7, #4]
  404376:	695b      	ldr	r3, [r3, #20]
  404378:	f003 0301 	and.w	r3, r3, #1
  40437c:	2b00      	cmp	r3, #0
  40437e:	bf14      	ite	ne
  404380:	2301      	movne	r3, #1
  404382:	2300      	moveq	r3, #0
  404384:	b2db      	uxtb	r3, r3
}
  404386:	4618      	mov	r0, r3
  404388:	370c      	adds	r7, #12
  40438a:	46bd      	mov	sp, r7
  40438c:	bc80      	pop	{r7}
  40438e:	4770      	bx	lr

00404390 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  404390:	b480      	push	{r7}
  404392:	b083      	sub	sp, #12
  404394:	af00      	add	r7, sp, #0
  404396:	6078      	str	r0, [r7, #4]
  404398:	460b      	mov	r3, r1
  40439a:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40439c:	687b      	ldr	r3, [r7, #4]
  40439e:	695b      	ldr	r3, [r3, #20]
  4043a0:	f003 0302 	and.w	r3, r3, #2
  4043a4:	2b00      	cmp	r3, #0
  4043a6:	d101      	bne.n	4043ac <uart_write+0x1c>
		return 1;
  4043a8:	2301      	movs	r3, #1
  4043aa:	e003      	b.n	4043b4 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  4043ac:	78fa      	ldrb	r2, [r7, #3]
  4043ae:	687b      	ldr	r3, [r7, #4]
  4043b0:	61da      	str	r2, [r3, #28]
	return 0;
  4043b2:	2300      	movs	r3, #0
}
  4043b4:	4618      	mov	r0, r3
  4043b6:	370c      	adds	r7, #12
  4043b8:	46bd      	mov	sp, r7
  4043ba:	bc80      	pop	{r7}
  4043bc:	4770      	bx	lr

004043be <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  4043be:	b480      	push	{r7}
  4043c0:	b083      	sub	sp, #12
  4043c2:	af00      	add	r7, sp, #0
  4043c4:	6078      	str	r0, [r7, #4]
  4043c6:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4043c8:	687b      	ldr	r3, [r7, #4]
  4043ca:	695b      	ldr	r3, [r3, #20]
  4043cc:	f003 0301 	and.w	r3, r3, #1
  4043d0:	2b00      	cmp	r3, #0
  4043d2:	d101      	bne.n	4043d8 <uart_read+0x1a>
		return 1;
  4043d4:	2301      	movs	r3, #1
  4043d6:	e005      	b.n	4043e4 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4043d8:	687b      	ldr	r3, [r7, #4]
  4043da:	699b      	ldr	r3, [r3, #24]
  4043dc:	b2da      	uxtb	r2, r3
  4043de:	683b      	ldr	r3, [r7, #0]
  4043e0:	701a      	strb	r2, [r3, #0]
	return 0;
  4043e2:	2300      	movs	r3, #0
}
  4043e4:	4618      	mov	r0, r3
  4043e6:	370c      	adds	r7, #12
  4043e8:	46bd      	mov	sp, r7
  4043ea:	bc80      	pop	{r7}
  4043ec:	4770      	bx	lr
	...

004043f0 <__NVIC_EnableIRQ>:
{
  4043f0:	b480      	push	{r7}
  4043f2:	b083      	sub	sp, #12
  4043f4:	af00      	add	r7, sp, #0
  4043f6:	4603      	mov	r3, r0
  4043f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  4043fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4043fe:	2b00      	cmp	r3, #0
  404400:	db0b      	blt.n	40441a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  404402:	4908      	ldr	r1, [pc, #32]	; (404424 <__NVIC_EnableIRQ+0x34>)
  404404:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404408:	095b      	lsrs	r3, r3, #5
  40440a:	79fa      	ldrb	r2, [r7, #7]
  40440c:	f002 021f 	and.w	r2, r2, #31
  404410:	2001      	movs	r0, #1
  404412:	fa00 f202 	lsl.w	r2, r0, r2
  404416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40441a:	bf00      	nop
  40441c:	370c      	adds	r7, #12
  40441e:	46bd      	mov	sp, r7
  404420:	bc80      	pop	{r7}
  404422:	4770      	bx	lr
  404424:	e000e100 	.word	0xe000e100

00404428 <__NVIC_SetPriority>:
{
  404428:	b480      	push	{r7}
  40442a:	b083      	sub	sp, #12
  40442c:	af00      	add	r7, sp, #0
  40442e:	4603      	mov	r3, r0
  404430:	6039      	str	r1, [r7, #0]
  404432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  404434:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404438:	2b00      	cmp	r3, #0
  40443a:	db0a      	blt.n	404452 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40443c:	490d      	ldr	r1, [pc, #52]	; (404474 <__NVIC_SetPriority+0x4c>)
  40443e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404442:	683a      	ldr	r2, [r7, #0]
  404444:	b2d2      	uxtb	r2, r2
  404446:	0112      	lsls	r2, r2, #4
  404448:	b2d2      	uxtb	r2, r2
  40444a:	440b      	add	r3, r1
  40444c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  404450:	e00a      	b.n	404468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  404452:	4909      	ldr	r1, [pc, #36]	; (404478 <__NVIC_SetPriority+0x50>)
  404454:	79fb      	ldrb	r3, [r7, #7]
  404456:	f003 030f 	and.w	r3, r3, #15
  40445a:	3b04      	subs	r3, #4
  40445c:	683a      	ldr	r2, [r7, #0]
  40445e:	b2d2      	uxtb	r2, r2
  404460:	0112      	lsls	r2, r2, #4
  404462:	b2d2      	uxtb	r2, r2
  404464:	440b      	add	r3, r1
  404466:	761a      	strb	r2, [r3, #24]
}
  404468:	bf00      	nop
  40446a:	370c      	adds	r7, #12
  40446c:	46bd      	mov	sp, r7
  40446e:	bc80      	pop	{r7}
  404470:	4770      	bx	lr
  404472:	bf00      	nop
  404474:	e000e100 	.word	0xe000e100
  404478:	e000ed00 	.word	0xe000ed00

0040447c <cpu_irq_save>:
{
  40447c:	b480      	push	{r7}
  40447e:	b083      	sub	sp, #12
  404480:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  404482:	f3ef 8310 	mrs	r3, PRIMASK
  404486:	607b      	str	r3, [r7, #4]
  return(result);
  404488:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40448a:	2b00      	cmp	r3, #0
  40448c:	bf0c      	ite	eq
  40448e:	2301      	moveq	r3, #1
  404490:	2300      	movne	r3, #0
  404492:	b2db      	uxtb	r3, r3
  404494:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  404496:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  404498:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40449c:	4b04      	ldr	r3, [pc, #16]	; (4044b0 <cpu_irq_save+0x34>)
  40449e:	2200      	movs	r2, #0
  4044a0:	701a      	strb	r2, [r3, #0]
	return flags;
  4044a2:	683b      	ldr	r3, [r7, #0]
}
  4044a4:	4618      	mov	r0, r3
  4044a6:	370c      	adds	r7, #12
  4044a8:	46bd      	mov	sp, r7
  4044aa:	bc80      	pop	{r7}
  4044ac:	4770      	bx	lr
  4044ae:	bf00      	nop
  4044b0:	200000fc 	.word	0x200000fc

004044b4 <cpu_irq_is_enabled_flags>:
{
  4044b4:	b480      	push	{r7}
  4044b6:	b083      	sub	sp, #12
  4044b8:	af00      	add	r7, sp, #0
  4044ba:	6078      	str	r0, [r7, #4]
	return (flags);
  4044bc:	687b      	ldr	r3, [r7, #4]
  4044be:	2b00      	cmp	r3, #0
  4044c0:	bf14      	ite	ne
  4044c2:	2301      	movne	r3, #1
  4044c4:	2300      	moveq	r3, #0
  4044c6:	b2db      	uxtb	r3, r3
}
  4044c8:	4618      	mov	r0, r3
  4044ca:	370c      	adds	r7, #12
  4044cc:	46bd      	mov	sp, r7
  4044ce:	bc80      	pop	{r7}
  4044d0:	4770      	bx	lr
	...

004044d4 <cpu_irq_restore>:
{
  4044d4:	b580      	push	{r7, lr}
  4044d6:	b082      	sub	sp, #8
  4044d8:	af00      	add	r7, sp, #0
  4044da:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  4044dc:	6878      	ldr	r0, [r7, #4]
  4044de:	4b07      	ldr	r3, [pc, #28]	; (4044fc <cpu_irq_restore+0x28>)
  4044e0:	4798      	blx	r3
  4044e2:	4603      	mov	r3, r0
  4044e4:	2b00      	cmp	r3, #0
  4044e6:	d005      	beq.n	4044f4 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  4044e8:	4b05      	ldr	r3, [pc, #20]	; (404500 <cpu_irq_restore+0x2c>)
  4044ea:	2201      	movs	r2, #1
  4044ec:	701a      	strb	r2, [r3, #0]
  4044ee:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4044f2:	b662      	cpsie	i
}
  4044f4:	bf00      	nop
  4044f6:	3708      	adds	r7, #8
  4044f8:	46bd      	mov	sp, r7
  4044fa:	bd80      	pop	{r7, pc}
  4044fc:	004044b5 	.word	0x004044b5
  404500:	200000fc 	.word	0x200000fc

00404504 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
  404504:	b580      	push	{r7, lr}
  404506:	b084      	sub	sp, #16
  404508:	af00      	add	r7, sp, #0
  40450a:	4603      	mov	r3, r0
  40450c:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40450e:	79fb      	ldrb	r3, [r7, #7]
  404510:	4a0a      	ldr	r2, [pc, #40]	; (40453c <sleepmgr_lock_mode+0x38>)
  404512:	5cd3      	ldrb	r3, [r2, r3]
  404514:	2bff      	cmp	r3, #255	; 0xff
  404516:	d100      	bne.n	40451a <sleepmgr_lock_mode+0x16>
		while (true) {
  404518:	e7fe      	b.n	404518 <sleepmgr_lock_mode+0x14>
			// Check APP or change the data type to uint16_t.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
  40451a:	4b09      	ldr	r3, [pc, #36]	; (404540 <sleepmgr_lock_mode+0x3c>)
  40451c:	4798      	blx	r3
  40451e:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
  404520:	79fb      	ldrb	r3, [r7, #7]
  404522:	4a06      	ldr	r2, [pc, #24]	; (40453c <sleepmgr_lock_mode+0x38>)
  404524:	5cd2      	ldrb	r2, [r2, r3]
  404526:	3201      	adds	r2, #1
  404528:	b2d1      	uxtb	r1, r2
  40452a:	4a04      	ldr	r2, [pc, #16]	; (40453c <sleepmgr_lock_mode+0x38>)
  40452c:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
  40452e:	68f8      	ldr	r0, [r7, #12]
  404530:	4b04      	ldr	r3, [pc, #16]	; (404544 <sleepmgr_lock_mode+0x40>)
  404532:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  404534:	bf00      	nop
  404536:	3710      	adds	r7, #16
  404538:	46bd      	mov	sp, r7
  40453a:	bd80      	pop	{r7, pc}
  40453c:	20001c1c 	.word	0x20001c1c
  404540:	0040447d 	.word	0x0040447d
  404544:	004044d5 	.word	0x004044d5

00404548 <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
  404548:	b580      	push	{r7, lr}
  40454a:	b084      	sub	sp, #16
  40454c:	af00      	add	r7, sp, #0
  40454e:	4603      	mov	r3, r0
  404550:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
  404552:	79fb      	ldrb	r3, [r7, #7]
  404554:	4a0a      	ldr	r2, [pc, #40]	; (404580 <sleepmgr_unlock_mode+0x38>)
  404556:	5cd3      	ldrb	r3, [r2, r3]
  404558:	2b00      	cmp	r3, #0
  40455a:	d100      	bne.n	40455e <sleepmgr_unlock_mode+0x16>
		while (true) {
  40455c:	e7fe      	b.n	40455c <sleepmgr_unlock_mode+0x14>
			// Check APP.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
  40455e:	4b09      	ldr	r3, [pc, #36]	; (404584 <sleepmgr_unlock_mode+0x3c>)
  404560:	4798      	blx	r3
  404562:	60f8      	str	r0, [r7, #12]

	--sleepmgr_locks[mode];
  404564:	79fb      	ldrb	r3, [r7, #7]
  404566:	4a06      	ldr	r2, [pc, #24]	; (404580 <sleepmgr_unlock_mode+0x38>)
  404568:	5cd2      	ldrb	r2, [r2, r3]
  40456a:	3a01      	subs	r2, #1
  40456c:	b2d1      	uxtb	r1, r2
  40456e:	4a04      	ldr	r2, [pc, #16]	; (404580 <sleepmgr_unlock_mode+0x38>)
  404570:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
  404572:	68f8      	ldr	r0, [r7, #12]
  404574:	4b04      	ldr	r3, [pc, #16]	; (404588 <sleepmgr_unlock_mode+0x40>)
  404576:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  404578:	bf00      	nop
  40457a:	3710      	adds	r7, #16
  40457c:	46bd      	mov	sp, r7
  40457e:	bd80      	pop	{r7, pc}
  404580:	20001c1c 	.word	0x20001c1c
  404584:	0040447d 	.word	0x0040447d
  404588:	004044d5 	.word	0x004044d5

0040458c <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
  40458c:	b580      	push	{r7, lr}
  40458e:	b082      	sub	sp, #8
  404590:	af00      	add	r7, sp, #0
  404592:	4603      	mov	r3, r0
  404594:	71fb      	strb	r3, [r7, #7]
	if (!b_idle && udd_b_idle) {
  404596:	79fb      	ldrb	r3, [r7, #7]
  404598:	f083 0301 	eor.w	r3, r3, #1
  40459c:	b2db      	uxtb	r3, r3
  40459e:	2b00      	cmp	r3, #0
  4045a0:	d006      	beq.n	4045b0 <udd_sleep_mode+0x24>
  4045a2:	4b0d      	ldr	r3, [pc, #52]	; (4045d8 <udd_sleep_mode+0x4c>)
  4045a4:	781b      	ldrb	r3, [r3, #0]
  4045a6:	2b00      	cmp	r3, #0
  4045a8:	d002      	beq.n	4045b0 <udd_sleep_mode+0x24>
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
  4045aa:	2002      	movs	r0, #2
  4045ac:	4b0b      	ldr	r3, [pc, #44]	; (4045dc <udd_sleep_mode+0x50>)
  4045ae:	4798      	blx	r3
	}
	if (b_idle && !udd_b_idle) {
  4045b0:	79fb      	ldrb	r3, [r7, #7]
  4045b2:	2b00      	cmp	r3, #0
  4045b4:	d009      	beq.n	4045ca <udd_sleep_mode+0x3e>
  4045b6:	4b08      	ldr	r3, [pc, #32]	; (4045d8 <udd_sleep_mode+0x4c>)
  4045b8:	781b      	ldrb	r3, [r3, #0]
  4045ba:	f083 0301 	eor.w	r3, r3, #1
  4045be:	b2db      	uxtb	r3, r3
  4045c0:	2b00      	cmp	r3, #0
  4045c2:	d002      	beq.n	4045ca <udd_sleep_mode+0x3e>
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
  4045c4:	2002      	movs	r0, #2
  4045c6:	4b06      	ldr	r3, [pc, #24]	; (4045e0 <udd_sleep_mode+0x54>)
  4045c8:	4798      	blx	r3
	}
	udd_b_idle = b_idle;
  4045ca:	4a03      	ldr	r2, [pc, #12]	; (4045d8 <udd_sleep_mode+0x4c>)
  4045cc:	79fb      	ldrb	r3, [r7, #7]
  4045ce:	7013      	strb	r3, [r2, #0]
}
  4045d0:	bf00      	nop
  4045d2:	3708      	adds	r7, #8
  4045d4:	46bd      	mov	sp, r7
  4045d6:	bd80      	pop	{r7, pc}
  4045d8:	20001bc8 	.word	0x20001bc8
  4045dc:	00404549 	.word	0x00404549
  4045e0:	00404505 	.word	0x00404505

004045e4 <UDP_Handler>:
 * - control endpoint events (setup reception, end of data transfer, underflow, overflow, stall)
 * - bulk/interrupt/isochronous endpoints events (end of data transfer)
 *
 */
ISR(UDD_USB_INT_FUN)
{
  4045e4:	b580      	push	{r7, lr}
  4045e6:	af00      	add	r7, sp, #0
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  4045e8:	4b63      	ldr	r3, [pc, #396]	; (404778 <UDP_Handler+0x194>)
  4045ea:	4798      	blx	r3
  4045ec:	4603      	mov	r3, r0
  4045ee:	f083 0301 	eor.w	r3, r3, #1
  4045f2:	b2db      	uxtb	r3, r3
  4045f4:	2b00      	cmp	r3, #0
  4045f6:	d00c      	beq.n	404612 <UDP_Handler+0x2e>
  4045f8:	4b60      	ldr	r3, [pc, #384]	; (40477c <UDP_Handler+0x198>)
  4045fa:	69db      	ldr	r3, [r3, #28]
  4045fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  404600:	2b00      	cmp	r3, #0
  404602:	d106      	bne.n	404612 <UDP_Handler+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
  404604:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  404606:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  40460a:	4b5d      	ldr	r3, [pc, #372]	; (404780 <UDP_Handler+0x19c>)
  40460c:	2200      	movs	r2, #0
  40460e:	701a      	strb	r2, [r3, #0]
		return;
  404610:	e0b1      	b.n	404776 <UDP_Handler+0x192>
	}
#endif
	/* The UDP peripheral clock in the Power Management Controller (PMC)
	   must be enabled before any read/write operations to the UDP registers
	   including the UDP_TXVC register. */
	udd_enable_periph_ck();
  404612:	2022      	movs	r0, #34	; 0x22
  404614:	4b5b      	ldr	r3, [pc, #364]	; (404784 <UDP_Handler+0x1a0>)
  404616:	4798      	blx	r3

	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
  404618:	4b58      	ldr	r3, [pc, #352]	; (40477c <UDP_Handler+0x198>)
  40461a:	699b      	ldr	r3, [r3, #24]
  40461c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  404620:	2b00      	cmp	r3, #0
  404622:	d00c      	beq.n	40463e <UDP_Handler+0x5a>
  404624:	4b55      	ldr	r3, [pc, #340]	; (40477c <UDP_Handler+0x198>)
  404626:	69db      	ldr	r3, [r3, #28]
  404628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  40462c:	2b00      	cmp	r3, #0
  40462e:	d006      	beq.n	40463e <UDP_Handler+0x5a>
		udd_ack_sof();
  404630:	4b52      	ldr	r3, [pc, #328]	; (40477c <UDP_Handler+0x198>)
  404632:	f44f 6200 	mov.w	r2, #2048	; 0x800
  404636:	621a      	str	r2, [r3, #32]
		udc_sof_notify();
  404638:	4b53      	ldr	r3, [pc, #332]	; (404788 <UDP_Handler+0x1a4>)
  40463a:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_sof_end;
  40463c:	e099      	b.n	404772 <UDP_Handler+0x18e>
	}

	if (udd_ctrl_interrupt()) {
  40463e:	4b53      	ldr	r3, [pc, #332]	; (40478c <UDP_Handler+0x1a8>)
  404640:	4798      	blx	r3
  404642:	4603      	mov	r3, r0
  404644:	2b00      	cmp	r3, #0
  404646:	f040 8091 	bne.w	40476c <UDP_Handler+0x188>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
	}

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt()) {
  40464a:	4b51      	ldr	r3, [pc, #324]	; (404790 <UDP_Handler+0x1ac>)
  40464c:	4798      	blx	r3
  40464e:	4603      	mov	r3, r0
  404650:	2b00      	cmp	r3, #0
  404652:	f040 808d 	bne.w	404770 <UDP_Handler+0x18c>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  404656:	4b49      	ldr	r3, [pc, #292]	; (40477c <UDP_Handler+0x198>)
  404658:	699b      	ldr	r3, [r3, #24]
  40465a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  40465e:	2b00      	cmp	r3, #0
  404660:	d005      	beq.n	40466e <UDP_Handler+0x8a>
  404662:	4b46      	ldr	r3, [pc, #280]	; (40477c <UDP_Handler+0x198>)
  404664:	69db      	ldr	r3, [r3, #28]
  404666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  40466a:	2b00      	cmp	r3, #0
  40466c:	d117      	bne.n	40469e <UDP_Handler+0xba>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  40466e:	4b43      	ldr	r3, [pc, #268]	; (40477c <UDP_Handler+0x198>)
  404670:	699b      	ldr	r3, [r3, #24]
  404672:	f403 7300 	and.w	r3, r3, #512	; 0x200
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  404676:	2b00      	cmp	r3, #0
  404678:	d005      	beq.n	404686 <UDP_Handler+0xa2>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  40467a:	4b40      	ldr	r3, [pc, #256]	; (40477c <UDP_Handler+0x198>)
  40467c:	69db      	ldr	r3, [r3, #28]
  40467e:	f403 7300 	and.w	r3, r3, #512	; 0x200
  404682:	2b00      	cmp	r3, #0
  404684:	d10b      	bne.n	40469e <UDP_Handler+0xba>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  404686:	4b3d      	ldr	r3, [pc, #244]	; (40477c <UDP_Handler+0x198>)
  404688:	699b      	ldr	r3, [r3, #24]
  40468a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  40468e:	2b00      	cmp	r3, #0
  404690:	d01d      	beq.n	4046ce <UDP_Handler+0xea>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  404692:	4b3a      	ldr	r3, [pc, #232]	; (40477c <UDP_Handler+0x198>)
  404694:	69db      	ldr	r3, [r3, #28]
  404696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  40469a:	2b00      	cmp	r3, #0
  40469c:	d017      	beq.n	4046ce <UDP_Handler+0xea>
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wakeups();
  40469e:	4b37      	ldr	r3, [pc, #220]	; (40477c <UDP_Handler+0x198>)
  4046a0:	f44f 5218 	mov.w	r2, #9728	; 0x2600
  4046a4:	621a      	str	r2, [r3, #32]
		// Do resume operations
		udd_disable_wakeups();
  4046a6:	4b35      	ldr	r3, [pc, #212]	; (40477c <UDP_Handler+0x198>)
  4046a8:	f44f 5218 	mov.w	r2, #9728	; 0x2600
  4046ac:	615a      	str	r2, [r3, #20]

		udd_sleep_mode(true); // Enter in IDLE mode
  4046ae:	2001      	movs	r0, #1
  4046b0:	4b38      	ldr	r3, [pc, #224]	; (404794 <UDP_Handler+0x1b0>)
  4046b2:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		udd_ack_suspend();
  4046b4:	4b31      	ldr	r3, [pc, #196]	; (40477c <UDP_Handler+0x198>)
  4046b6:	f44f 7280 	mov.w	r2, #256	; 0x100
  4046ba:	621a      	str	r2, [r3, #32]
		udd_enable_suspend_interrupt();
  4046bc:	4b2f      	ldr	r3, [pc, #188]	; (40477c <UDP_Handler+0x198>)
  4046be:	f44f 7280 	mov.w	r2, #256	; 0x100
  4046c2:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  4046c4:	4b2d      	ldr	r3, [pc, #180]	; (40477c <UDP_Handler+0x198>)
  4046c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4046ca:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  4046cc:	e051      	b.n	404772 <UDP_Handler+0x18e>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  4046ce:	4b2b      	ldr	r3, [pc, #172]	; (40477c <UDP_Handler+0x198>)
  4046d0:	699b      	ldr	r3, [r3, #24]
  4046d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4046d6:	2b00      	cmp	r3, #0
  4046d8:	d020      	beq.n	40471c <UDP_Handler+0x138>
  4046da:	4b28      	ldr	r3, [pc, #160]	; (40477c <UDP_Handler+0x198>)
  4046dc:	69db      	ldr	r3, [r3, #28]
  4046de:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4046e2:	2b00      	cmp	r3, #0
  4046e4:	d01a      	beq.n	40471c <UDP_Handler+0x138>
		// Ack suspend interrupt and enable resume interrupt
		udd_ack_suspend();
  4046e6:	4b25      	ldr	r3, [pc, #148]	; (40477c <UDP_Handler+0x198>)
  4046e8:	f44f 7280 	mov.w	r2, #256	; 0x100
  4046ec:	621a      	str	r2, [r3, #32]
		udd_disable_suspend_interrupt();
  4046ee:	4b23      	ldr	r3, [pc, #140]	; (40477c <UDP_Handler+0x198>)
  4046f0:	f44f 7280 	mov.w	r2, #256	; 0x100
  4046f4:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  4046f6:	4b21      	ldr	r3, [pc, #132]	; (40477c <UDP_Handler+0x198>)
  4046f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4046fc:	611a      	str	r2, [r3, #16]
		udd_enable_resume_interrupt();
  4046fe:	4b1f      	ldr	r3, [pc, #124]	; (40477c <UDP_Handler+0x198>)
  404700:	f44f 7200 	mov.w	r2, #512	; 0x200
  404704:	611a      	str	r2, [r3, #16]
		udd_enable_ext_resume_interrupt();
  404706:	4b1d      	ldr	r3, [pc, #116]	; (40477c <UDP_Handler+0x198>)
  404708:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40470c:	611a      	str	r2, [r3, #16]
		udd_disable_periph_ck();
  40470e:	2022      	movs	r0, #34	; 0x22
  404710:	4b21      	ldr	r3, [pc, #132]	; (404798 <UDP_Handler+0x1b4>)
  404712:	4798      	blx	r3

		udd_sleep_mode(false); // Enter in SUSPEND mode
  404714:	2000      	movs	r0, #0
  404716:	4b1f      	ldr	r3, [pc, #124]	; (404794 <UDP_Handler+0x1b0>)
  404718:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
  40471a:	e02a      	b.n	404772 <UDP_Handler+0x18e>
	}
	if (Is_udd_reset()) {
  40471c:	4b17      	ldr	r3, [pc, #92]	; (40477c <UDP_Handler+0x198>)
  40471e:	69db      	ldr	r3, [r3, #28]
  404720:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  404724:	2b00      	cmp	r3, #0
  404726:	d025      	beq.n	404774 <UDP_Handler+0x190>
		// USB bus reset detection
		udd_ack_reset();
  404728:	4b14      	ldr	r3, [pc, #80]	; (40477c <UDP_Handler+0x198>)
  40472a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40472e:	621a      	str	r2, [r3, #32]

		// Abort all jobs on-going
#if (0 != USB_DEVICE_MAX_EP)
		udd_ep_job_table_kill();
  404730:	4b1a      	ldr	r3, [pc, #104]	; (40479c <UDP_Handler+0x1b8>)
  404732:	4798      	blx	r3
#endif
		// Reset USB Device Stack Core
		udc_reset();
  404734:	4b1a      	ldr	r3, [pc, #104]	; (4047a0 <UDP_Handler+0x1bc>)
  404736:	4798      	blx	r3
		// Reset device state
		udd_disable_address_state();
  404738:	4a10      	ldr	r2, [pc, #64]	; (40477c <UDP_Handler+0x198>)
  40473a:	4b10      	ldr	r3, [pc, #64]	; (40477c <UDP_Handler+0x198>)
  40473c:	685b      	ldr	r3, [r3, #4]
  40473e:	f023 0301 	bic.w	r3, r3, #1
  404742:	6053      	str	r3, [r2, #4]
		udd_disable_configured_state();
  404744:	4a0d      	ldr	r2, [pc, #52]	; (40477c <UDP_Handler+0x198>)
  404746:	4b0d      	ldr	r3, [pc, #52]	; (40477c <UDP_Handler+0x198>)
  404748:	685b      	ldr	r3, [r3, #4]
  40474a:	f023 0302 	bic.w	r3, r3, #2
  40474e:	6053      	str	r3, [r2, #4]
		// Reset endpoint control
		udd_reset_ep_ctrl();
  404750:	4b14      	ldr	r3, [pc, #80]	; (4047a4 <UDP_Handler+0x1c0>)
  404752:	4798      	blx	r3
		// Reset endpoint control management
		udd_ctrl_init();
  404754:	4b14      	ldr	r3, [pc, #80]	; (4047a8 <UDP_Handler+0x1c4>)
  404756:	4798      	blx	r3
		// After a USB reset, the suspend and SOF interrupt masks has been reseted
		// Thus, re-enable these
		udd_enable_suspend_interrupt();
  404758:	4b08      	ldr	r3, [pc, #32]	; (40477c <UDP_Handler+0x198>)
  40475a:	f44f 7280 	mov.w	r2, #256	; 0x100
  40475e:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  404760:	4b06      	ldr	r3, [pc, #24]	; (40477c <UDP_Handler+0x198>)
  404762:	f44f 6200 	mov.w	r2, #2048	; 0x800
  404766:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  404768:	bf00      	nop
  40476a:	e002      	b.n	404772 <UDP_Handler+0x18e>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
  40476c:	bf00      	nop
  40476e:	e000      	b.n	404772 <UDP_Handler+0x18e>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
  404770:	bf00      	nop
	}

udd_interrupt_end:
udd_interrupt_sof_end:
	return;
  404772:	bf00      	nop
  404774:	bf00      	nop
}
  404776:	bd80      	pop	{r7, pc}
  404778:	00407a15 	.word	0x00407a15
  40477c:	40034000 	.word	0x40034000
  404780:	200000fc 	.word	0x200000fc
  404784:	004078a9 	.word	0x004078a9
  404788:	00403135 	.word	0x00403135
  40478c:	0040599d 	.word	0x0040599d
  404790:	0040609d 	.word	0x0040609d
  404794:	0040458d 	.word	0x0040458d
  404798:	00407929 	.word	0x00407929
  40479c:	00405aed 	.word	0x00405aed
  4047a0:	004030e1 	.word	0x004030e1
  4047a4:	004051f9 	.word	0x004051f9
  4047a8:	004052a1 	.word	0x004052a1

004047ac <udd_enable>:
#endif
}


void udd_enable(void)
{
  4047ac:	b580      	push	{r7, lr}
  4047ae:	b082      	sub	sp, #8
  4047b0:	af00      	add	r7, sp, #0
	irqflags_t flags;

	flags = cpu_irq_save();
  4047b2:	4b12      	ldr	r3, [pc, #72]	; (4047fc <udd_enable+0x50>)
  4047b4:	4798      	blx	r3
  4047b6:	6078      	str	r0, [r7, #4]
#if SAMG55
	matrix_set_usb_device();
#endif

	// Enable USB hardware
	udd_enable_periph_ck();
  4047b8:	2022      	movs	r0, #34	; 0x22
  4047ba:	4b11      	ldr	r3, [pc, #68]	; (404800 <udd_enable+0x54>)
  4047bc:	4798      	blx	r3
	sysclk_enable_usb();
  4047be:	4b11      	ldr	r3, [pc, #68]	; (404804 <udd_enable+0x58>)
  4047c0:	4798      	blx	r3
	// Cortex, uses NVIC, no need to register IRQ handler
	NVIC_SetPriority((IRQn_Type) ID_UDP, UDD_USB_INT_LEVEL);
  4047c2:	2105      	movs	r1, #5
  4047c4:	2022      	movs	r0, #34	; 0x22
  4047c6:	4b10      	ldr	r3, [pc, #64]	; (404808 <udd_enable+0x5c>)
  4047c8:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type) ID_UDP);
  4047ca:	2022      	movs	r0, #34	; 0x22
  4047cc:	4b0f      	ldr	r3, [pc, #60]	; (40480c <udd_enable+0x60>)
  4047ce:	4798      	blx	r3

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
  4047d0:	4b0f      	ldr	r3, [pc, #60]	; (404810 <udd_enable+0x64>)
  4047d2:	4798      	blx	r3
#endif

	// Always authorize asynchronous USB interrupts to exit of sleep mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
  4047d4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  4047d8:	4b0e      	ldr	r3, [pc, #56]	; (404814 <udd_enable+0x68>)
  4047da:	4798      	blx	r3

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
  4047dc:	4b0e      	ldr	r3, [pc, #56]	; (404818 <udd_enable+0x6c>)
  4047de:	2200      	movs	r2, #0
  4047e0:	701a      	strb	r2, [r3, #0]
	sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_SUSPEND);
  4047e2:	2000      	movs	r0, #0
  4047e4:	4b0d      	ldr	r3, [pc, #52]	; (40481c <udd_enable+0x70>)
  4047e6:	4798      	blx	r3
	if (Is_udd_vbus_high()) {
		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
	}
#else
#  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
  4047e8:	4b0d      	ldr	r3, [pc, #52]	; (404820 <udd_enable+0x74>)
  4047ea:	4798      	blx	r3
#  endif
#endif

	cpu_irq_restore(flags);
  4047ec:	6878      	ldr	r0, [r7, #4]
  4047ee:	4b0d      	ldr	r3, [pc, #52]	; (404824 <udd_enable+0x78>)
  4047f0:	4798      	blx	r3
}
  4047f2:	bf00      	nop
  4047f4:	3708      	adds	r7, #8
  4047f6:	46bd      	mov	sp, r7
  4047f8:	bd80      	pop	{r7, pc}
  4047fa:	bf00      	nop
  4047fc:	0040447d 	.word	0x0040447d
  404800:	004078a9 	.word	0x004078a9
  404804:	00406fa9 	.word	0x00406fa9
  404808:	00404429 	.word	0x00404429
  40480c:	004043f1 	.word	0x004043f1
  404810:	00405a45 	.word	0x00405a45
  404814:	004079e9 	.word	0x004079e9
  404818:	20001bc8 	.word	0x20001bc8
  40481c:	00404505 	.word	0x00404505
  404820:	00404829 	.word	0x00404829
  404824:	004044d5 	.word	0x004044d5

00404828 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
  404828:	b580      	push	{r7, lr}
  40482a:	b082      	sub	sp, #8
  40482c:	af00      	add	r7, sp, #0
	irqflags_t flags;
	flags = cpu_irq_save();
  40482e:	4b18      	ldr	r3, [pc, #96]	; (404890 <udd_attach+0x68>)
  404830:	4798      	blx	r3
  404832:	6078      	str	r0, [r7, #4]

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
  404834:	2001      	movs	r0, #1
  404836:	4b17      	ldr	r3, [pc, #92]	; (404894 <udd_attach+0x6c>)
  404838:	4798      	blx	r3

	// Enable peripheral clock and USB clock
	udd_enable_periph_ck();
  40483a:	2022      	movs	r0, #34	; 0x22
  40483c:	4b16      	ldr	r3, [pc, #88]	; (404898 <udd_attach+0x70>)
  40483e:	4798      	blx	r3

	// Authorize attach if VBus is present
	udd_enable_transceiver();
  404840:	4a16      	ldr	r2, [pc, #88]	; (40489c <udd_attach+0x74>)
  404842:	4b16      	ldr	r3, [pc, #88]	; (40489c <udd_attach+0x74>)
  404844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  404846:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  40484a:	6753      	str	r3, [r2, #116]	; 0x74
	udd_attach_device();
  40484c:	4a13      	ldr	r2, [pc, #76]	; (40489c <udd_attach+0x74>)
  40484e:	4b13      	ldr	r3, [pc, #76]	; (40489c <udd_attach+0x74>)
  404850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  404852:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  404856:	6753      	str	r3, [r2, #116]	; 0x74

	// Enable USB line events
	udd_enable_suspend_interrupt();
  404858:	4b10      	ldr	r3, [pc, #64]	; (40489c <udd_attach+0x74>)
  40485a:	f44f 7280 	mov.w	r2, #256	; 0x100
  40485e:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
  404860:	4b0e      	ldr	r3, [pc, #56]	; (40489c <udd_attach+0x74>)
  404862:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  404866:	611a      	str	r2, [r3, #16]
	udd_enable_resume_interrupt();
  404868:	4b0c      	ldr	r3, [pc, #48]	; (40489c <udd_attach+0x74>)
  40486a:	f44f 7200 	mov.w	r2, #512	; 0x200
  40486e:	611a      	str	r2, [r3, #16]
	udd_enable_ext_resume_interrupt();
  404870:	4b0a      	ldr	r3, [pc, #40]	; (40489c <udd_attach+0x74>)
  404872:	f44f 6280 	mov.w	r2, #1024	; 0x400
  404876:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
  404878:	4b08      	ldr	r3, [pc, #32]	; (40489c <udd_attach+0x74>)
  40487a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40487e:	611a      	str	r2, [r3, #16]

	cpu_irq_restore(flags);
  404880:	6878      	ldr	r0, [r7, #4]
  404882:	4b07      	ldr	r3, [pc, #28]	; (4048a0 <udd_attach+0x78>)
  404884:	4798      	blx	r3
}
  404886:	bf00      	nop
  404888:	3708      	adds	r7, #8
  40488a:	46bd      	mov	sp, r7
  40488c:	bd80      	pop	{r7, pc}
  40488e:	bf00      	nop
  404890:	0040447d 	.word	0x0040447d
  404894:	0040458d 	.word	0x0040458d
  404898:	004078a9 	.word	0x004078a9
  40489c:	40034000 	.word	0x40034000
  4048a0:	004044d5 	.word	0x004044d5

004048a4 <udd_is_high_speed>:
	udd_sleep_mode(false);
}


bool udd_is_high_speed(void)
{
  4048a4:	b480      	push	{r7}
  4048a6:	af00      	add	r7, sp, #0
	return false;
  4048a8:	2300      	movs	r3, #0
}
  4048aa:	4618      	mov	r0, r3
  4048ac:	46bd      	mov	sp, r7
  4048ae:	bc80      	pop	{r7}
  4048b0:	4770      	bx	lr
	...

004048b4 <udd_set_address>:


void udd_set_address(uint8_t address)
{
  4048b4:	b480      	push	{r7}
  4048b6:	b083      	sub	sp, #12
  4048b8:	af00      	add	r7, sp, #0
  4048ba:	4603      	mov	r3, r0
  4048bc:	71fb      	strb	r3, [r7, #7]
	udd_disable_address_state();
  4048be:	4a15      	ldr	r2, [pc, #84]	; (404914 <udd_set_address+0x60>)
  4048c0:	4b14      	ldr	r3, [pc, #80]	; (404914 <udd_set_address+0x60>)
  4048c2:	685b      	ldr	r3, [r3, #4]
  4048c4:	f023 0301 	bic.w	r3, r3, #1
  4048c8:	6053      	str	r3, [r2, #4]
	udd_disable_address();
  4048ca:	4a12      	ldr	r2, [pc, #72]	; (404914 <udd_set_address+0x60>)
  4048cc:	4b11      	ldr	r3, [pc, #68]	; (404914 <udd_set_address+0x60>)
  4048ce:	689b      	ldr	r3, [r3, #8]
  4048d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  4048d4:	6093      	str	r3, [r2, #8]
	if (address) {
  4048d6:	79fb      	ldrb	r3, [r7, #7]
  4048d8:	2b00      	cmp	r3, #0
  4048da:	d015      	beq.n	404908 <udd_set_address+0x54>
		udd_configure_address(address);
  4048dc:	490d      	ldr	r1, [pc, #52]	; (404914 <udd_set_address+0x60>)
  4048de:	4b0d      	ldr	r3, [pc, #52]	; (404914 <udd_set_address+0x60>)
  4048e0:	689b      	ldr	r3, [r3, #8]
  4048e2:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
  4048e6:	79fb      	ldrb	r3, [r7, #7]
  4048e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4048ec:	4313      	orrs	r3, r2
  4048ee:	608b      	str	r3, [r1, #8]
		udd_enable_address();
  4048f0:	4a08      	ldr	r2, [pc, #32]	; (404914 <udd_set_address+0x60>)
  4048f2:	4b08      	ldr	r3, [pc, #32]	; (404914 <udd_set_address+0x60>)
  4048f4:	689b      	ldr	r3, [r3, #8]
  4048f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4048fa:	6093      	str	r3, [r2, #8]
		udd_enable_address_state();
  4048fc:	4a05      	ldr	r2, [pc, #20]	; (404914 <udd_set_address+0x60>)
  4048fe:	4b05      	ldr	r3, [pc, #20]	; (404914 <udd_set_address+0x60>)
  404900:	685b      	ldr	r3, [r3, #4]
  404902:	f043 0301 	orr.w	r3, r3, #1
  404906:	6053      	str	r3, [r2, #4]
	}
}
  404908:	bf00      	nop
  40490a:	370c      	adds	r7, #12
  40490c:	46bd      	mov	sp, r7
  40490e:	bc80      	pop	{r7}
  404910:	4770      	bx	lr
  404912:	bf00      	nop
  404914:	40034000 	.word	0x40034000

00404918 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
  404918:	b480      	push	{r7}
  40491a:	af00      	add	r7, sp, #0
	if (Is_udd_address_state_enabled())
  40491c:	4b08      	ldr	r3, [pc, #32]	; (404940 <udd_getaddress+0x28>)
  40491e:	685b      	ldr	r3, [r3, #4]
  404920:	f003 0301 	and.w	r3, r3, #1
  404924:	2b00      	cmp	r3, #0
  404926:	d006      	beq.n	404936 <udd_getaddress+0x1e>
		return udd_get_configured_address();
  404928:	4b05      	ldr	r3, [pc, #20]	; (404940 <udd_getaddress+0x28>)
  40492a:	689b      	ldr	r3, [r3, #8]
  40492c:	b2db      	uxtb	r3, r3
  40492e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  404932:	b2db      	uxtb	r3, r3
  404934:	e000      	b.n	404938 <udd_getaddress+0x20>
	return 0;
  404936:	2300      	movs	r3, #0
}
  404938:	4618      	mov	r0, r3
  40493a:	46bd      	mov	sp, r7
  40493c:	bc80      	pop	{r7}
  40493e:	4770      	bx	lr
  404940:	40034000 	.word	0x40034000

00404944 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
  404944:	b480      	push	{r7}
  404946:	af00      	add	r7, sp, #0
	return udd_frame_number();
  404948:	4b04      	ldr	r3, [pc, #16]	; (40495c <udd_get_frame_number+0x18>)
  40494a:	681b      	ldr	r3, [r3, #0]
  40494c:	b29b      	uxth	r3, r3
  40494e:	f3c3 030a 	ubfx	r3, r3, #0, #11
  404952:	b29b      	uxth	r3, r3
}
  404954:	4618      	mov	r0, r3
  404956:	46bd      	mov	sp, r7
  404958:	bc80      	pop	{r7}
  40495a:	4770      	bx	lr
  40495c:	40034000 	.word	0x40034000

00404960 <udd_get_micro_frame_number>:


uint16_t udd_get_micro_frame_number(void)
{
  404960:	b480      	push	{r7}
  404962:	af00      	add	r7, sp, #0
	return 0;
  404964:	2300      	movs	r3, #0
}
  404966:	4618      	mov	r0, r3
  404968:	46bd      	mov	sp, r7
  40496a:	bc80      	pop	{r7}
  40496c:	4770      	bx	lr
	...

00404970 <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
  404970:	b480      	push	{r7}
  404972:	b083      	sub	sp, #12
  404974:	af00      	add	r7, sp, #0
  404976:	6078      	str	r0, [r7, #4]
  404978:	460b      	mov	r3, r1
  40497a:	807b      	strh	r3, [r7, #2]
	udd_g_ctrlreq.payload = payload;
  40497c:	4a05      	ldr	r2, [pc, #20]	; (404994 <udd_set_setup_payload+0x24>)
  40497e:	687b      	ldr	r3, [r7, #4]
  404980:	6093      	str	r3, [r2, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  404982:	4a04      	ldr	r2, [pc, #16]	; (404994 <udd_set_setup_payload+0x24>)
  404984:	887b      	ldrh	r3, [r7, #2]
  404986:	8193      	strh	r3, [r2, #12]
}
  404988:	bf00      	nop
  40498a:	370c      	adds	r7, #12
  40498c:	46bd      	mov	sp, r7
  40498e:	bc80      	pop	{r7}
  404990:	4770      	bx	lr
  404992:	bf00      	nop
  404994:	20001c24 	.word	0x20001c24

00404998 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
  404998:	b480      	push	{r7}
  40499a:	b087      	sub	sp, #28
  40499c:	af00      	add	r7, sp, #0
  40499e:	4603      	mov	r3, r0
  4049a0:	71fb      	strb	r3, [r7, #7]
  4049a2:	460b      	mov	r3, r1
  4049a4:	71bb      	strb	r3, [r7, #6]
  4049a6:	4613      	mov	r3, r2
  4049a8:	80bb      	strh	r3, [r7, #4]
	udd_ep_job_t *ptr_job;
	bool b_dir_in;
	bool b_iso;
	b_dir_in = ep & USB_EP_DIR_IN;
  4049aa:	79fb      	ldrb	r3, [r7, #7]
  4049ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4049b0:	2b00      	cmp	r3, #0
  4049b2:	bf14      	ite	ne
  4049b4:	2301      	movne	r3, #1
  4049b6:	2300      	moveq	r3, #0
  4049b8:	75fb      	strb	r3, [r7, #23]
	b_iso = (bmAttributes&USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS;
  4049ba:	79bb      	ldrb	r3, [r7, #6]
  4049bc:	f003 0303 	and.w	r3, r3, #3
  4049c0:	2b01      	cmp	r3, #1
  4049c2:	bf0c      	ite	eq
  4049c4:	2301      	moveq	r3, #1
  4049c6:	2300      	movne	r3, #0
  4049c8:	75bb      	strb	r3, [r7, #22]
	ep = ep & USB_EP_ADDR_MASK;
  4049ca:	79fb      	ldrb	r3, [r7, #7]
  4049cc:	f003 030f 	and.w	r3, r3, #15
  4049d0:	71fb      	strb	r3, [r7, #7]

	if (ep > USB_DEVICE_MAX_EP) {
  4049d2:	79fb      	ldrb	r3, [r7, #7]
  4049d4:	2b03      	cmp	r3, #3
  4049d6:	d901      	bls.n	4049dc <udd_ep_alloc+0x44>
		return false;
  4049d8:	2300      	movs	r3, #0
  4049da:	e0ca      	b.n	404b72 <udd_ep_alloc+0x1da>
	}
	if (Is_udd_endpoint_enabled(ep)) {
  4049dc:	4a67      	ldr	r2, [pc, #412]	; (404b7c <udd_ep_alloc+0x1e4>)
  4049de:	79fb      	ldrb	r3, [r7, #7]
  4049e0:	330c      	adds	r3, #12
  4049e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4049e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  4049ea:	2b00      	cmp	r3, #0
  4049ec:	d001      	beq.n	4049f2 <udd_ep_alloc+0x5a>
		return false;
  4049ee:	2300      	movs	r3, #0
  4049f0:	e0bf      	b.n	404b72 <udd_ep_alloc+0x1da>
	}

	// Check parameters
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  4049f2:	7dbb      	ldrb	r3, [r7, #22]
  4049f4:	2b00      	cmp	r3, #0
  4049f6:	d007      	beq.n	404a08 <udd_ep_alloc+0x70>
  4049f8:	79fb      	ldrb	r3, [r7, #7]
  4049fa:	2b00      	cmp	r3, #0
  4049fc:	d002      	beq.n	404a04 <udd_ep_alloc+0x6c>
  4049fe:	79fb      	ldrb	r3, [r7, #7]
  404a00:	2b03      	cmp	r3, #3
  404a02:	d101      	bne.n	404a08 <udd_ep_alloc+0x70>
		return false;
  404a04:	2300      	movs	r3, #0
  404a06:	e0b4      	b.n	404b72 <udd_ep_alloc+0x1da>
	}
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
  404a08:	88ba      	ldrh	r2, [r7, #4]
  404a0a:	79fb      	ldrb	r3, [r7, #7]
  404a0c:	2b04      	cmp	r3, #4
  404a0e:	d002      	beq.n	404a16 <udd_ep_alloc+0x7e>
  404a10:	79fb      	ldrb	r3, [r7, #7]
  404a12:	2b05      	cmp	r3, #5
  404a14:	d102      	bne.n	404a1c <udd_ep_alloc+0x84>
  404a16:	f44f 7300 	mov.w	r3, #512	; 0x200
  404a1a:	e000      	b.n	404a1e <udd_ep_alloc+0x86>
  404a1c:	2340      	movs	r3, #64	; 0x40
  404a1e:	429a      	cmp	r2, r3
  404a20:	dd01      	ble.n	404a26 <udd_ep_alloc+0x8e>
		return false;
  404a22:	2300      	movs	r3, #0
  404a24:	e0a5      	b.n	404b72 <udd_ep_alloc+0x1da>
	}
	ptr_job = &udd_ep_job[ep - 1];
  404a26:	79fb      	ldrb	r3, [r7, #7]
  404a28:	1e5a      	subs	r2, r3, #1
  404a2a:	4613      	mov	r3, r2
  404a2c:	009b      	lsls	r3, r3, #2
  404a2e:	4413      	add	r3, r2
  404a30:	009b      	lsls	r3, r3, #2
  404a32:	4a53      	ldr	r2, [pc, #332]	; (404b80 <udd_ep_alloc+0x1e8>)
  404a34:	4413      	add	r3, r2
  404a36:	613b      	str	r3, [r7, #16]

	// Set endpoint size
	ptr_job->size = MaxEndpointSize;
  404a38:	88bb      	ldrh	r3, [r7, #4]
  404a3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
  404a3e:	b299      	uxth	r1, r3
  404a40:	693a      	ldr	r2, [r7, #16]
  404a42:	8a13      	ldrh	r3, [r2, #16]
  404a44:	f361 0309 	bfi	r3, r1, #0, #10
  404a48:	8213      	strh	r3, [r2, #16]
	ptr_job->b_buf_end = false;
  404a4a:	693a      	ldr	r2, [r7, #16]
  404a4c:	7c53      	ldrb	r3, [r2, #17]
  404a4e:	f36f 13c7 	bfc	r3, #7, #1
  404a52:	7453      	strb	r3, [r2, #17]
	ptr_job->b_stall_requested = false;
  404a54:	693a      	ldr	r2, [r7, #16]
  404a56:	7c53      	ldrb	r3, [r2, #17]
  404a58:	f36f 1345 	bfc	r3, #5, #1
  404a5c:	7453      	strb	r3, [r2, #17]
	if (b_dir_in) {
  404a5e:	7dfb      	ldrb	r3, [r7, #23]
  404a60:	2b00      	cmp	r3, #0
  404a62:	d004      	beq.n	404a6e <udd_ep_alloc+0xd6>
		// No data buffered in FIFO
		ptr_job->bank = 0;
  404a64:	693a      	ldr	r2, [r7, #16]
  404a66:	7c53      	ldrb	r3, [r2, #17]
  404a68:	f36f 0383 	bfc	r3, #2, #2
  404a6c:	7453      	strb	r3, [r2, #17]
	}

	// Reset FIFOs
	udd_reset_endpoint(ep);
  404a6e:	4943      	ldr	r1, [pc, #268]	; (404b7c <udd_ep_alloc+0x1e4>)
  404a70:	4b42      	ldr	r3, [pc, #264]	; (404b7c <udd_ep_alloc+0x1e4>)
  404a72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  404a74:	79fb      	ldrb	r3, [r7, #7]
  404a76:	2001      	movs	r0, #1
  404a78:	fa00 f303 	lsl.w	r3, r0, r3
  404a7c:	4313      	orrs	r3, r2
  404a7e:	628b      	str	r3, [r1, #40]	; 0x28
  404a80:	bf00      	nop
  404a82:	4b3e      	ldr	r3, [pc, #248]	; (404b7c <udd_ep_alloc+0x1e4>)
  404a84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  404a86:	79fb      	ldrb	r3, [r7, #7]
  404a88:	2101      	movs	r1, #1
  404a8a:	fa01 f303 	lsl.w	r3, r1, r3
  404a8e:	4013      	ands	r3, r2
  404a90:	2b00      	cmp	r3, #0
  404a92:	d0f6      	beq.n	404a82 <udd_ep_alloc+0xea>
  404a94:	4939      	ldr	r1, [pc, #228]	; (404b7c <udd_ep_alloc+0x1e4>)
  404a96:	4b39      	ldr	r3, [pc, #228]	; (404b7c <udd_ep_alloc+0x1e4>)
  404a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  404a9a:	79fb      	ldrb	r3, [r7, #7]
  404a9c:	2001      	movs	r0, #1
  404a9e:	fa00 f303 	lsl.w	r3, r0, r3
  404aa2:	43db      	mvns	r3, r3
  404aa4:	4013      	ands	r3, r2
  404aa6:	628b      	str	r3, [r1, #40]	; 0x28
	// Set configuration of new endpoint
	udd_configure_endpoint(ep,
  404aa8:	4a34      	ldr	r2, [pc, #208]	; (404b7c <udd_ep_alloc+0x1e4>)
  404aaa:	79fb      	ldrb	r3, [r7, #7]
  404aac:	330c      	adds	r3, #12
  404aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404ab2:	60fb      	str	r3, [r7, #12]
  404ab4:	68fb      	ldr	r3, [r7, #12]
  404ab6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  404aba:	60fb      	str	r3, [r7, #12]
  404abc:	68fb      	ldr	r3, [r7, #12]
  404abe:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  404ac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  404ac6:	60fb      	str	r3, [r7, #12]
  404ac8:	7dfb      	ldrb	r3, [r7, #23]
  404aca:	2b00      	cmp	r3, #0
  404acc:	d00d      	beq.n	404aea <udd_ep_alloc+0x152>
  404ace:	79bb      	ldrb	r3, [r7, #6]
  404ad0:	021b      	lsls	r3, r3, #8
  404ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
  404ad6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  404ada:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  404ade:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
  404ae2:	f248 7380 	movw	r3, #34688	; 0x8780
  404ae6:	4013      	ands	r3, r2
  404ae8:	e008      	b.n	404afc <udd_ep_alloc+0x164>
  404aea:	79bb      	ldrb	r3, [r7, #6]
  404aec:	021b      	lsls	r3, r3, #8
  404aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
  404af2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
  404af6:	f248 7380 	movw	r3, #34688	; 0x8780
  404afa:	4013      	ands	r3, r2
  404afc:	68fa      	ldr	r2, [r7, #12]
  404afe:	4313      	orrs	r3, r2
  404b00:	60fb      	str	r3, [r7, #12]
  404b02:	491e      	ldr	r1, [pc, #120]	; (404b7c <udd_ep_alloc+0x1e4>)
  404b04:	79fb      	ldrb	r3, [r7, #7]
  404b06:	68fa      	ldr	r2, [r7, #12]
  404b08:	330c      	adds	r3, #12
  404b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  404b0e:	bf00      	nop
  404b10:	4a1a      	ldr	r2, [pc, #104]	; (404b7c <udd_ep_alloc+0x1e4>)
  404b12:	79fb      	ldrb	r3, [r7, #7]
  404b14:	330c      	adds	r3, #12
  404b16:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  404b1a:	7dfb      	ldrb	r3, [r7, #23]
  404b1c:	2b00      	cmp	r3, #0
  404b1e:	d00a      	beq.n	404b36 <udd_ep_alloc+0x19e>
  404b20:	79bb      	ldrb	r3, [r7, #6]
  404b22:	021b      	lsls	r3, r3, #8
  404b24:	f403 7340 	and.w	r3, r3, #768	; 0x300
  404b28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  404b2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  404b30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  404b34:	e005      	b.n	404b42 <udd_ep_alloc+0x1aa>
  404b36:	79bb      	ldrb	r3, [r7, #6]
  404b38:	021b      	lsls	r3, r3, #8
  404b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
  404b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  404b42:	401a      	ands	r2, r3
  404b44:	7dfb      	ldrb	r3, [r7, #23]
  404b46:	2b00      	cmp	r3, #0
  404b48:	d00a      	beq.n	404b60 <udd_ep_alloc+0x1c8>
  404b4a:	79bb      	ldrb	r3, [r7, #6]
  404b4c:	021b      	lsls	r3, r3, #8
  404b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
  404b52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  404b56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  404b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  404b5e:	e005      	b.n	404b6c <udd_ep_alloc+0x1d4>
  404b60:	79bb      	ldrb	r3, [r7, #6]
  404b62:	021b      	lsls	r3, r3, #8
  404b64:	f403 7340 	and.w	r3, r3, #768	; 0x300
  404b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  404b6c:	429a      	cmp	r2, r3
  404b6e:	d1cf      	bne.n	404b10 <udd_ep_alloc+0x178>
		(b_dir_in ? ((bmAttributes&USB_EP_TYPE_MASK) | 0x4) : (bmAttributes&USB_EP_TYPE_MASK)),
		0);
	return true;
  404b70:	2301      	movs	r3, #1
}
  404b72:	4618      	mov	r0, r3
  404b74:	371c      	adds	r7, #28
  404b76:	46bd      	mov	sp, r7
  404b78:	bc80      	pop	{r7}
  404b7a:	4770      	bx	lr
  404b7c:	40034000 	.word	0x40034000
  404b80:	20001bd0 	.word	0x20001bd0

00404b84 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
  404b84:	b580      	push	{r7, lr}
  404b86:	b084      	sub	sp, #16
  404b88:	af00      	add	r7, sp, #0
  404b8a:	4603      	mov	r3, r0
  404b8c:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  404b8e:	79fb      	ldrb	r3, [r7, #7]
  404b90:	f003 030f 	and.w	r3, r3, #15
  404b94:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep_index) {
  404b96:	7bfb      	ldrb	r3, [r7, #15]
  404b98:	2b03      	cmp	r3, #3
  404b9a:	d822      	bhi.n	404be2 <udd_ep_free+0x5e>
		return;
	}
	udd_disable_endpoint(ep_index);
  404b9c:	4a13      	ldr	r2, [pc, #76]	; (404bec <udd_ep_free+0x68>)
  404b9e:	7bfb      	ldrb	r3, [r7, #15]
  404ba0:	330c      	adds	r3, #12
  404ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404ba6:	60bb      	str	r3, [r7, #8]
  404ba8:	68bb      	ldr	r3, [r7, #8]
  404baa:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  404bae:	60bb      	str	r3, [r7, #8]
  404bb0:	68bb      	ldr	r3, [r7, #8]
  404bb2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  404bb6:	60bb      	str	r3, [r7, #8]
  404bb8:	490c      	ldr	r1, [pc, #48]	; (404bec <udd_ep_free+0x68>)
  404bba:	7bfb      	ldrb	r3, [r7, #15]
  404bbc:	68ba      	ldr	r2, [r7, #8]
  404bbe:	330c      	adds	r3, #12
  404bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  404bc4:	bf00      	nop
  404bc6:	4a09      	ldr	r2, [pc, #36]	; (404bec <udd_ep_free+0x68>)
  404bc8:	7bfb      	ldrb	r3, [r7, #15]
  404bca:	330c      	adds	r3, #12
  404bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404bd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  404bd4:	2b00      	cmp	r3, #0
  404bd6:	d1f6      	bne.n	404bc6 <udd_ep_free+0x42>
	udd_ep_abort_job(ep);
  404bd8:	79fb      	ldrb	r3, [r7, #7]
  404bda:	4618      	mov	r0, r3
  404bdc:	4b04      	ldr	r3, [pc, #16]	; (404bf0 <udd_ep_free+0x6c>)
  404bde:	4798      	blx	r3
  404be0:	e000      	b.n	404be4 <udd_ep_free+0x60>
		return;
  404be2:	bf00      	nop
}
  404be4:	3710      	adds	r7, #16
  404be6:	46bd      	mov	sp, r7
  404be8:	bd80      	pop	{r7, pc}
  404bea:	bf00      	nop
  404bec:	40034000 	.word	0x40034000
  404bf0:	00405b31 	.word	0x00405b31

00404bf4 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
  404bf4:	b480      	push	{r7}
  404bf6:	b085      	sub	sp, #20
  404bf8:	af00      	add	r7, sp, #0
  404bfa:	4603      	mov	r3, r0
  404bfc:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  404bfe:	79fb      	ldrb	r3, [r7, #7]
  404c00:	f003 030f 	and.w	r3, r3, #15
  404c04:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  404c06:	7bfb      	ldrb	r3, [r7, #15]
  404c08:	1e5a      	subs	r2, r3, #1
  404c0a:	4613      	mov	r3, r2
  404c0c:	009b      	lsls	r3, r3, #2
  404c0e:	4413      	add	r3, r2
  404c10:	009b      	lsls	r3, r3, #2
  404c12:	4a12      	ldr	r2, [pc, #72]	; (404c5c <udd_ep_is_halted+0x68>)
  404c14:	4413      	add	r3, r2
  404c16:	60bb      	str	r3, [r7, #8]
	if (USB_DEVICE_MAX_EP < ep_index) {
  404c18:	7bfb      	ldrb	r3, [r7, #15]
  404c1a:	2b03      	cmp	r3, #3
  404c1c:	d901      	bls.n	404c22 <udd_ep_is_halted+0x2e>
		return false;
  404c1e:	2300      	movs	r3, #0
  404c20:	e017      	b.n	404c52 <udd_ep_is_halted+0x5e>
	}
	return ptr_job->b_stall_requested ||
  404c22:	68bb      	ldr	r3, [r7, #8]
  404c24:	7c5b      	ldrb	r3, [r3, #17]
  404c26:	f003 0320 	and.w	r3, r3, #32
  404c2a:	b2db      	uxtb	r3, r3
  404c2c:	2b00      	cmp	r3, #0
  404c2e:	d10a      	bne.n	404c46 <udd_ep_is_halted+0x52>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
  404c30:	4a0b      	ldr	r2, [pc, #44]	; (404c60 <udd_ep_is_halted+0x6c>)
  404c32:	79fb      	ldrb	r3, [r7, #7]
  404c34:	f003 030f 	and.w	r3, r3, #15
  404c38:	330c      	adds	r3, #12
  404c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404c3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
	return ptr_job->b_stall_requested ||
  404c42:	2b00      	cmp	r3, #0
  404c44:	d001      	beq.n	404c4a <udd_ep_is_halted+0x56>
  404c46:	2301      	movs	r3, #1
  404c48:	e000      	b.n	404c4c <udd_ep_is_halted+0x58>
  404c4a:	2300      	movs	r3, #0
  404c4c:	f003 0301 	and.w	r3, r3, #1
  404c50:	b2db      	uxtb	r3, r3
}
  404c52:	4618      	mov	r0, r3
  404c54:	3714      	adds	r7, #20
  404c56:	46bd      	mov	sp, r7
  404c58:	bc80      	pop	{r7}
  404c5a:	4770      	bx	lr
  404c5c:	20001bd0 	.word	0x20001bd0
  404c60:	40034000 	.word	0x40034000

00404c64 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
  404c64:	b580      	push	{r7, lr}
  404c66:	b086      	sub	sp, #24
  404c68:	af00      	add	r7, sp, #0
  404c6a:	4603      	mov	r3, r0
  404c6c:	71fb      	strb	r3, [r7, #7]
	bool b_dir_in = ep & USB_EP_DIR_IN;
  404c6e:	79fb      	ldrb	r3, [r7, #7]
  404c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
  404c74:	2b00      	cmp	r3, #0
  404c76:	bf14      	ite	ne
  404c78:	2301      	movne	r3, #1
  404c7a:	2300      	moveq	r3, #0
  404c7c:	75fb      	strb	r3, [r7, #23]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  404c7e:	79fb      	ldrb	r3, [r7, #7]
  404c80:	f003 030f 	and.w	r3, r3, #15
  404c84:	75bb      	strb	r3, [r7, #22]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  404c86:	7dbb      	ldrb	r3, [r7, #22]
  404c88:	1e5a      	subs	r2, r3, #1
  404c8a:	4613      	mov	r3, r2
  404c8c:	009b      	lsls	r3, r3, #2
  404c8e:	4413      	add	r3, r2
  404c90:	009b      	lsls	r3, r3, #2
  404c92:	4a2d      	ldr	r2, [pc, #180]	; (404d48 <udd_ep_set_halt+0xe4>)
  404c94:	4413      	add	r3, r2
  404c96:	613b      	str	r3, [r7, #16]
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
  404c98:	7dbb      	ldrb	r3, [r7, #22]
  404c9a:	2b03      	cmp	r3, #3
  404c9c:	d901      	bls.n	404ca2 <udd_ep_set_halt+0x3e>
		return false;
  404c9e:	2300      	movs	r3, #0
  404ca0:	e04d      	b.n	404d3e <udd_ep_set_halt+0xda>
	}
	flags = cpu_irq_save();
  404ca2:	4b2a      	ldr	r3, [pc, #168]	; (404d4c <udd_ep_set_halt+0xe8>)
  404ca4:	4798      	blx	r3
  404ca6:	60f8      	str	r0, [r7, #12]
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  404ca8:	7dfb      	ldrb	r3, [r7, #23]
  404caa:	2b00      	cmp	r3, #0
  404cac:	d01f      	beq.n	404cee <udd_ep_set_halt+0x8a>
  404cae:	4a28      	ldr	r2, [pc, #160]	; (404d50 <udd_ep_set_halt+0xec>)
  404cb0:	7dbb      	ldrb	r3, [r7, #22]
  404cb2:	330c      	adds	r3, #12
  404cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404cb8:	f003 0310 	and.w	r3, r3, #16
  404cbc:	2b00      	cmp	r3, #0
  404cbe:	d106      	bne.n	404cce <udd_ep_set_halt+0x6a>
				|| ptr_job->bank > 1)) {
  404cc0:	693b      	ldr	r3, [r7, #16]
  404cc2:	7c5b      	ldrb	r3, [r3, #17]
  404cc4:	f3c3 0381 	ubfx	r3, r3, #2, #2
  404cc8:	b2db      	uxtb	r3, r3
  404cca:	2b01      	cmp	r3, #1
  404ccc:	dd0f      	ble.n	404cee <udd_ep_set_halt+0x8a>
		// Halt until banks sent
		ptr_job->b_stall_requested = true;
  404cce:	693a      	ldr	r2, [r7, #16]
  404cd0:	7c53      	ldrb	r3, [r2, #17]
  404cd2:	f043 0320 	orr.w	r3, r3, #32
  404cd6:	7453      	strb	r3, [r2, #17]
		udd_enable_endpoint_interrupt(ep_index);
  404cd8:	4a1d      	ldr	r2, [pc, #116]	; (404d50 <udd_ep_set_halt+0xec>)
  404cda:	7dbb      	ldrb	r3, [r7, #22]
  404cdc:	2101      	movs	r1, #1
  404cde:	fa01 f303 	lsl.w	r3, r1, r3
  404ce2:	6113      	str	r3, [r2, #16]
		cpu_irq_restore(flags);
  404ce4:	68f8      	ldr	r0, [r7, #12]
  404ce6:	4b1b      	ldr	r3, [pc, #108]	; (404d54 <udd_ep_set_halt+0xf0>)
  404ce8:	4798      	blx	r3
		return true;
  404cea:	2301      	movs	r3, #1
  404cec:	e027      	b.n	404d3e <udd_ep_set_halt+0xda>
	} else {
		// Stall endpoint
		udd_enable_stall_handshake(ep_index);
  404cee:	4a18      	ldr	r2, [pc, #96]	; (404d50 <udd_ep_set_halt+0xec>)
  404cf0:	7dbb      	ldrb	r3, [r7, #22]
  404cf2:	330c      	adds	r3, #12
  404cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404cf8:	60bb      	str	r3, [r7, #8]
  404cfa:	68bb      	ldr	r3, [r7, #8]
  404cfc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  404d00:	60bb      	str	r3, [r7, #8]
  404d02:	68bb      	ldr	r3, [r7, #8]
  404d04:	f043 0320 	orr.w	r3, r3, #32
  404d08:	60bb      	str	r3, [r7, #8]
  404d0a:	4911      	ldr	r1, [pc, #68]	; (404d50 <udd_ep_set_halt+0xec>)
  404d0c:	7dbb      	ldrb	r3, [r7, #22]
  404d0e:	68ba      	ldr	r2, [r7, #8]
  404d10:	330c      	adds	r3, #12
  404d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  404d16:	bf00      	nop
  404d18:	4a0d      	ldr	r2, [pc, #52]	; (404d50 <udd_ep_set_halt+0xec>)
  404d1a:	7dbb      	ldrb	r3, [r7, #22]
  404d1c:	330c      	adds	r3, #12
  404d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404d22:	f003 0320 	and.w	r3, r3, #32
  404d26:	2b20      	cmp	r3, #32
  404d28:	d1f6      	bne.n	404d18 <udd_ep_set_halt+0xb4>
		udd_enable_endpoint_interrupt(ep_index);
  404d2a:	4a09      	ldr	r2, [pc, #36]	; (404d50 <udd_ep_set_halt+0xec>)
  404d2c:	7dbb      	ldrb	r3, [r7, #22]
  404d2e:	2101      	movs	r1, #1
  404d30:	fa01 f303 	lsl.w	r3, r1, r3
  404d34:	6113      	str	r3, [r2, #16]
		cpu_irq_restore(flags);
  404d36:	68f8      	ldr	r0, [r7, #12]
  404d38:	4b06      	ldr	r3, [pc, #24]	; (404d54 <udd_ep_set_halt+0xf0>)
  404d3a:	4798      	blx	r3
	}
	return true;
  404d3c:	2301      	movs	r3, #1
}
  404d3e:	4618      	mov	r0, r3
  404d40:	3718      	adds	r7, #24
  404d42:	46bd      	mov	sp, r7
  404d44:	bd80      	pop	{r7, pc}
  404d46:	bf00      	nop
  404d48:	20001bd0 	.word	0x20001bd0
  404d4c:	0040447d 	.word	0x0040447d
  404d50:	40034000 	.word	0x40034000
  404d54:	004044d5 	.word	0x004044d5

00404d58 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
  404d58:	b580      	push	{r7, lr}
  404d5a:	b086      	sub	sp, #24
  404d5c:	af00      	add	r7, sp, #0
  404d5e:	4603      	mov	r3, r0
  404d60:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
  404d62:	79fb      	ldrb	r3, [r7, #7]
  404d64:	f003 030f 	and.w	r3, r3, #15
  404d68:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
  404d6a:	79fb      	ldrb	r3, [r7, #7]
  404d6c:	2b03      	cmp	r3, #3
  404d6e:	d901      	bls.n	404d74 <udd_ep_clear_halt+0x1c>
		return false;
  404d70:	2300      	movs	r3, #0
  404d72:	e07f      	b.n	404e74 <udd_ep_clear_halt+0x11c>
	ptr_job = &udd_ep_job[ep - 1];
  404d74:	79fb      	ldrb	r3, [r7, #7]
  404d76:	1e5a      	subs	r2, r3, #1
  404d78:	4613      	mov	r3, r2
  404d7a:	009b      	lsls	r3, r3, #2
  404d7c:	4413      	add	r3, r2
  404d7e:	009b      	lsls	r3, r3, #2
  404d80:	4a3e      	ldr	r2, [pc, #248]	; (404e7c <udd_ep_clear_halt+0x124>)
  404d82:	4413      	add	r3, r2
  404d84:	617b      	str	r3, [r7, #20]

	ptr_job->b_stall_requested = false;
  404d86:	697a      	ldr	r2, [r7, #20]
  404d88:	7c53      	ldrb	r3, [r2, #17]
  404d8a:	f36f 1345 	bfc	r3, #5, #1
  404d8e:	7453      	strb	r3, [r2, #17]
	if (Is_udd_endpoint_stall_requested(ep)) {
  404d90:	4a3b      	ldr	r2, [pc, #236]	; (404e80 <udd_ep_clear_halt+0x128>)
  404d92:	79fb      	ldrb	r3, [r7, #7]
  404d94:	330c      	adds	r3, #12
  404d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404d9a:	f003 0320 	and.w	r3, r3, #32
  404d9e:	2b00      	cmp	r3, #0
  404da0:	d067      	beq.n	404e72 <udd_ep_clear_halt+0x11a>
		// Remove stall
		udd_disable_stall_handshake(ep);
  404da2:	4a37      	ldr	r2, [pc, #220]	; (404e80 <udd_ep_clear_halt+0x128>)
  404da4:	79fb      	ldrb	r3, [r7, #7]
  404da6:	330c      	adds	r3, #12
  404da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404dac:	613b      	str	r3, [r7, #16]
  404dae:	693b      	ldr	r3, [r7, #16]
  404db0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  404db4:	613b      	str	r3, [r7, #16]
  404db6:	693b      	ldr	r3, [r7, #16]
  404db8:	f023 0320 	bic.w	r3, r3, #32
  404dbc:	613b      	str	r3, [r7, #16]
  404dbe:	4930      	ldr	r1, [pc, #192]	; (404e80 <udd_ep_clear_halt+0x128>)
  404dc0:	79fb      	ldrb	r3, [r7, #7]
  404dc2:	693a      	ldr	r2, [r7, #16]
  404dc4:	330c      	adds	r3, #12
  404dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  404dca:	bf00      	nop
  404dcc:	4a2c      	ldr	r2, [pc, #176]	; (404e80 <udd_ep_clear_halt+0x128>)
  404dce:	79fb      	ldrb	r3, [r7, #7]
  404dd0:	330c      	adds	r3, #12
  404dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404dd6:	f003 0320 	and.w	r3, r3, #32
  404dda:	2b00      	cmp	r3, #0
  404ddc:	d1f6      	bne.n	404dcc <udd_ep_clear_halt+0x74>
		// Reset FIFO and data toggle (after stall cleared)
		udd_reset_endpoint(ep);
  404dde:	4928      	ldr	r1, [pc, #160]	; (404e80 <udd_ep_clear_halt+0x128>)
  404de0:	4b27      	ldr	r3, [pc, #156]	; (404e80 <udd_ep_clear_halt+0x128>)
  404de2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  404de4:	79fb      	ldrb	r3, [r7, #7]
  404de6:	2001      	movs	r0, #1
  404de8:	fa00 f303 	lsl.w	r3, r0, r3
  404dec:	4313      	orrs	r3, r2
  404dee:	628b      	str	r3, [r1, #40]	; 0x28
  404df0:	bf00      	nop
  404df2:	4b23      	ldr	r3, [pc, #140]	; (404e80 <udd_ep_clear_halt+0x128>)
  404df4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  404df6:	79fb      	ldrb	r3, [r7, #7]
  404df8:	2101      	movs	r1, #1
  404dfa:	fa01 f303 	lsl.w	r3, r1, r3
  404dfe:	4013      	ands	r3, r2
  404e00:	2b00      	cmp	r3, #0
  404e02:	d0f6      	beq.n	404df2 <udd_ep_clear_halt+0x9a>
  404e04:	491e      	ldr	r1, [pc, #120]	; (404e80 <udd_ep_clear_halt+0x128>)
  404e06:	4b1e      	ldr	r3, [pc, #120]	; (404e80 <udd_ep_clear_halt+0x128>)
  404e08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  404e0a:	79fb      	ldrb	r3, [r7, #7]
  404e0c:	2001      	movs	r0, #1
  404e0e:	fa00 f303 	lsl.w	r3, r0, r3
  404e12:	43db      	mvns	r3, r3
  404e14:	4013      	ands	r3, r2
  404e16:	628b      	str	r3, [r1, #40]	; 0x28
		// Clear stall status
		udd_ack_stall(ep);
  404e18:	4a19      	ldr	r2, [pc, #100]	; (404e80 <udd_ep_clear_halt+0x128>)
  404e1a:	79fb      	ldrb	r3, [r7, #7]
  404e1c:	330c      	adds	r3, #12
  404e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404e22:	60fb      	str	r3, [r7, #12]
  404e24:	68fb      	ldr	r3, [r7, #12]
  404e26:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  404e2a:	60fb      	str	r3, [r7, #12]
  404e2c:	68fb      	ldr	r3, [r7, #12]
  404e2e:	f023 0308 	bic.w	r3, r3, #8
  404e32:	60fb      	str	r3, [r7, #12]
  404e34:	4912      	ldr	r1, [pc, #72]	; (404e80 <udd_ep_clear_halt+0x128>)
  404e36:	79fb      	ldrb	r3, [r7, #7]
  404e38:	68fa      	ldr	r2, [r7, #12]
  404e3a:	330c      	adds	r3, #12
  404e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  404e40:	bf00      	nop
  404e42:	4a0f      	ldr	r2, [pc, #60]	; (404e80 <udd_ep_clear_halt+0x128>)
  404e44:	79fb      	ldrb	r3, [r7, #7]
  404e46:	330c      	adds	r3, #12
  404e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404e4c:	f003 0308 	and.w	r3, r3, #8
  404e50:	2b00      	cmp	r3, #0
  404e52:	d1f6      	bne.n	404e42 <udd_ep_clear_halt+0xea>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
  404e54:	697b      	ldr	r3, [r7, #20]
  404e56:	7c5b      	ldrb	r3, [r3, #17]
  404e58:	f003 0310 	and.w	r3, r3, #16
  404e5c:	b2db      	uxtb	r3, r3
  404e5e:	2b00      	cmp	r3, #0
  404e60:	d007      	beq.n	404e72 <udd_ep_clear_halt+0x11a>
			ptr_job->busy = false;
  404e62:	697a      	ldr	r2, [r7, #20]
  404e64:	7c53      	ldrb	r3, [r2, #17]
  404e66:	f36f 1304 	bfc	r3, #4, #1
  404e6a:	7453      	strb	r3, [r2, #17]
			ptr_job->call_nohalt();
  404e6c:	697b      	ldr	r3, [r7, #20]
  404e6e:	681b      	ldr	r3, [r3, #0]
  404e70:	4798      	blx	r3
		}
	}
	return true;
  404e72:	2301      	movs	r3, #1
}
  404e74:	4618      	mov	r0, r3
  404e76:	3718      	adds	r7, #24
  404e78:	46bd      	mov	sp, r7
  404e7a:	bd80      	pop	{r7, pc}
  404e7c:	20001bd0 	.word	0x20001bd0
  404e80:	40034000 	.word	0x40034000

00404e84 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  404e84:	b580      	push	{r7, lr}
  404e86:	b088      	sub	sp, #32
  404e88:	af00      	add	r7, sp, #0
  404e8a:	60ba      	str	r2, [r7, #8]
  404e8c:	607b      	str	r3, [r7, #4]
  404e8e:	4603      	mov	r3, r0
  404e90:	73fb      	strb	r3, [r7, #15]
  404e92:	460b      	mov	r3, r1
  404e94:	73bb      	strb	r3, [r7, #14]
	udd_ep_job_t *ptr_job;
	irqflags_t flags;
	bool b_dir_in = ep & USB_EP_DIR_IN;
  404e96:	7bfb      	ldrb	r3, [r7, #15]
  404e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
  404e9c:	2b00      	cmp	r3, #0
  404e9e:	bf14      	ite	ne
  404ea0:	2301      	movne	r3, #1
  404ea2:	2300      	moveq	r3, #0
  404ea4:	77fb      	strb	r3, [r7, #31]

	ep &= USB_EP_ADDR_MASK;
  404ea6:	7bfb      	ldrb	r3, [r7, #15]
  404ea8:	f003 030f 	and.w	r3, r3, #15
  404eac:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep) {
  404eae:	7bfb      	ldrb	r3, [r7, #15]
  404eb0:	2b03      	cmp	r3, #3
  404eb2:	d901      	bls.n	404eb8 <udd_ep_run+0x34>
		return false;
  404eb4:	2300      	movs	r3, #0
  404eb6:	e083      	b.n	404fc0 <udd_ep_run+0x13c>
	}
	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
  404eb8:	7bfb      	ldrb	r3, [r7, #15]
  404eba:	1e5a      	subs	r2, r3, #1
  404ebc:	4613      	mov	r3, r2
  404ebe:	009b      	lsls	r3, r3, #2
  404ec0:	4413      	add	r3, r2
  404ec2:	009b      	lsls	r3, r3, #2
  404ec4:	4a40      	ldr	r2, [pc, #256]	; (404fc8 <udd_ep_run+0x144>)
  404ec6:	4413      	add	r3, r2
  404ec8:	61bb      	str	r3, [r7, #24]

	if ((!Is_udd_endpoint_enabled(ep))
  404eca:	4a40      	ldr	r2, [pc, #256]	; (404fcc <udd_ep_run+0x148>)
  404ecc:	7bfb      	ldrb	r3, [r7, #15]
  404ece:	330c      	adds	r3, #12
  404ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404ed4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  404ed8:	2b00      	cmp	r3, #0
  404eda:	d00f      	beq.n	404efc <udd_ep_run+0x78>
			|| ptr_job->b_stall_requested
  404edc:	69bb      	ldr	r3, [r7, #24]
  404ede:	7c5b      	ldrb	r3, [r3, #17]
  404ee0:	f003 0320 	and.w	r3, r3, #32
  404ee4:	b2db      	uxtb	r3, r3
  404ee6:	2b00      	cmp	r3, #0
  404ee8:	d108      	bne.n	404efc <udd_ep_run+0x78>
			|| Is_udd_endpoint_stall_requested(ep)) {
  404eea:	4a38      	ldr	r2, [pc, #224]	; (404fcc <udd_ep_run+0x148>)
  404eec:	7bfb      	ldrb	r3, [r7, #15]
  404eee:	330c      	adds	r3, #12
  404ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404ef4:	f003 0320 	and.w	r3, r3, #32
  404ef8:	2b00      	cmp	r3, #0
  404efa:	d001      	beq.n	404f00 <udd_ep_run+0x7c>
		return false; // Endpoint is halted
  404efc:	2300      	movs	r3, #0
  404efe:	e05f      	b.n	404fc0 <udd_ep_run+0x13c>
	}

	flags = cpu_irq_save();
  404f00:	4b33      	ldr	r3, [pc, #204]	; (404fd0 <udd_ep_run+0x14c>)
  404f02:	4798      	blx	r3
  404f04:	6178      	str	r0, [r7, #20]
	if (ptr_job->busy == true) {
  404f06:	69bb      	ldr	r3, [r7, #24]
  404f08:	7c5b      	ldrb	r3, [r3, #17]
  404f0a:	f003 0310 	and.w	r3, r3, #16
  404f0e:	b2db      	uxtb	r3, r3
  404f10:	2b00      	cmp	r3, #0
  404f12:	d004      	beq.n	404f1e <udd_ep_run+0x9a>
		cpu_irq_restore(flags);
  404f14:	6978      	ldr	r0, [r7, #20]
  404f16:	4b2f      	ldr	r3, [pc, #188]	; (404fd4 <udd_ep_run+0x150>)
  404f18:	4798      	blx	r3
		return false; // Job already on going
  404f1a:	2300      	movs	r3, #0
  404f1c:	e050      	b.n	404fc0 <udd_ep_run+0x13c>
	}
	ptr_job->busy = true;
  404f1e:	69ba      	ldr	r2, [r7, #24]
  404f20:	7c53      	ldrb	r3, [r2, #17]
  404f22:	f043 0310 	orr.w	r3, r3, #16
  404f26:	7453      	strb	r3, [r2, #17]
	cpu_irq_restore(flags);
  404f28:	6978      	ldr	r0, [r7, #20]
  404f2a:	4b2a      	ldr	r3, [pc, #168]	; (404fd4 <udd_ep_run+0x150>)
  404f2c:	4798      	blx	r3

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
  404f2e:	69bb      	ldr	r3, [r7, #24]
  404f30:	68ba      	ldr	r2, [r7, #8]
  404f32:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
  404f34:	69bb      	ldr	r3, [r7, #24]
  404f36:	687a      	ldr	r2, [r7, #4]
  404f38:	609a      	str	r2, [r3, #8]
	ptr_job->buf_cnt = 0;
  404f3a:	69bb      	ldr	r3, [r7, #24]
  404f3c:	2200      	movs	r2, #0
  404f3e:	60da      	str	r2, [r3, #12]
	ptr_job->call_trans = callback;
  404f40:	69bb      	ldr	r3, [r7, #24]
  404f42:	6aba      	ldr	r2, [r7, #40]	; 0x28
  404f44:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  404f46:	7bbb      	ldrb	r3, [r7, #14]
  404f48:	2b00      	cmp	r3, #0
  404f4a:	d102      	bne.n	404f52 <udd_ep_run+0xce>
  404f4c:	687b      	ldr	r3, [r7, #4]
  404f4e:	2b00      	cmp	r3, #0
  404f50:	d101      	bne.n	404f56 <udd_ep_run+0xd2>
  404f52:	2301      	movs	r3, #1
  404f54:	e000      	b.n	404f58 <udd_ep_run+0xd4>
  404f56:	2300      	movs	r3, #0
  404f58:	b2db      	uxtb	r3, r3
  404f5a:	f003 0301 	and.w	r3, r3, #1
  404f5e:	b2d9      	uxtb	r1, r3
  404f60:	69ba      	ldr	r2, [r7, #24]
  404f62:	7c53      	ldrb	r3, [r2, #17]
  404f64:	f361 1386 	bfi	r3, r1, #6, #1
  404f68:	7453      	strb	r3, [r2, #17]
	ptr_job->b_buf_end = false;
  404f6a:	69ba      	ldr	r2, [r7, #24]
  404f6c:	7c53      	ldrb	r3, [r2, #17]
  404f6e:	f36f 13c7 	bfc	r3, #7, #1
  404f72:	7453      	strb	r3, [r2, #17]

	flags = cpu_irq_save();
  404f74:	4b16      	ldr	r3, [pc, #88]	; (404fd0 <udd_ep_run+0x14c>)
  404f76:	4798      	blx	r3
  404f78:	6178      	str	r0, [r7, #20]
	udd_enable_endpoint_interrupt(ep);
  404f7a:	4a14      	ldr	r2, [pc, #80]	; (404fcc <udd_ep_run+0x148>)
  404f7c:	7bfb      	ldrb	r3, [r7, #15]
  404f7e:	2101      	movs	r1, #1
  404f80:	fa01 f303 	lsl.w	r3, r1, r3
  404f84:	6113      	str	r3, [r2, #16]
	// Request first transfer
	if (b_dir_in) {
  404f86:	7ffb      	ldrb	r3, [r7, #31]
  404f88:	2b00      	cmp	r3, #0
  404f8a:	d015      	beq.n	404fb8 <udd_ep_run+0x134>
		if (Is_udd_in_pending(ep)) {
  404f8c:	4a0f      	ldr	r2, [pc, #60]	; (404fcc <udd_ep_run+0x148>)
  404f8e:	7bfb      	ldrb	r3, [r7, #15]
  404f90:	330c      	adds	r3, #12
  404f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404f96:	f003 0311 	and.w	r3, r3, #17
  404f9a:	2b00      	cmp	r3, #0
  404f9c:	d10c      	bne.n	404fb8 <udd_ep_run+0x134>
			// Append more data (handled in interrupt service)
		} else {
			// Start new, try to fill 1~2 banks before handling status
			if (udd_ep_in_sent(ep, true)) {
  404f9e:	7bfb      	ldrb	r3, [r7, #15]
  404fa0:	2101      	movs	r1, #1
  404fa2:	4618      	mov	r0, r3
  404fa4:	4b0c      	ldr	r3, [pc, #48]	; (404fd8 <udd_ep_run+0x154>)
  404fa6:	4798      	blx	r3
  404fa8:	4603      	mov	r3, r0
  404faa:	2b00      	cmp	r3, #0
  404fac:	d004      	beq.n	404fb8 <udd_ep_run+0x134>
				// Over one bank
				udd_ep_in_sent(ep, false);
  404fae:	7bfb      	ldrb	r3, [r7, #15]
  404fb0:	2100      	movs	r1, #0
  404fb2:	4618      	mov	r0, r3
  404fb4:	4b08      	ldr	r3, [pc, #32]	; (404fd8 <udd_ep_run+0x154>)
  404fb6:	4798      	blx	r3
			}
		}
	} else {
		// Waiting for OUT received interrupt
	}
	cpu_irq_restore(flags);
  404fb8:	6978      	ldr	r0, [r7, #20]
  404fba:	4b06      	ldr	r3, [pc, #24]	; (404fd4 <udd_ep_run+0x150>)
  404fbc:	4798      	blx	r3

	return true;
  404fbe:	2301      	movs	r3, #1
}
  404fc0:	4618      	mov	r0, r3
  404fc2:	3720      	adds	r7, #32
  404fc4:	46bd      	mov	sp, r7
  404fc6:	bd80      	pop	{r7, pc}
  404fc8:	20001bd0 	.word	0x20001bd0
  404fcc:	40034000 	.word	0x40034000
  404fd0:	0040447d 	.word	0x0040447d
  404fd4:	004044d5 	.word	0x004044d5
  404fd8:	00405e89 	.word	0x00405e89

00404fdc <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
  404fdc:	b580      	push	{r7, lr}
  404fde:	b088      	sub	sp, #32
  404fe0:	af00      	add	r7, sp, #0
  404fe2:	4603      	mov	r3, r0
  404fe4:	71fb      	strb	r3, [r7, #7]
	bool b_dir_in = ep & USB_EP_DIR_IN;
  404fe6:	79fb      	ldrb	r3, [r7, #7]
  404fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  404fec:	2b00      	cmp	r3, #0
  404fee:	bf14      	ite	ne
  404ff0:	2301      	movne	r3, #1
  404ff2:	2300      	moveq	r3, #0
  404ff4:	77fb      	strb	r3, [r7, #31]
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
  404ff6:	79fb      	ldrb	r3, [r7, #7]
  404ff8:	f003 030f 	and.w	r3, r3, #15
  404ffc:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
  404ffe:	79fb      	ldrb	r3, [r7, #7]
  405000:	2b03      	cmp	r3, #3
  405002:	f200 80e9 	bhi.w	4051d8 <udd_ep_abort+0x1fc>
		return;

	// Disable interrupts
	flags = cpu_irq_save();
  405006:	4b76      	ldr	r3, [pc, #472]	; (4051e0 <udd_ep_abort+0x204>)
  405008:	4798      	blx	r3
  40500a:	61b8      	str	r0, [r7, #24]
	udd_disable_endpoint_interrupt(ep);
  40500c:	4a75      	ldr	r2, [pc, #468]	; (4051e4 <udd_ep_abort+0x208>)
  40500e:	79fb      	ldrb	r3, [r7, #7]
  405010:	2101      	movs	r1, #1
  405012:	fa01 f303 	lsl.w	r3, r1, r3
  405016:	6153      	str	r3, [r2, #20]
	cpu_irq_restore(flags);
  405018:	69b8      	ldr	r0, [r7, #24]
  40501a:	4b73      	ldr	r3, [pc, #460]	; (4051e8 <udd_ep_abort+0x20c>)
  40501c:	4798      	blx	r3
	// Clear pending statuses
	if (b_dir_in) {
  40501e:	7ffb      	ldrb	r3, [r7, #31]
  405020:	2b00      	cmp	r3, #0
  405022:	f000 80ae 	beq.w	405182 <udd_ep_abort+0x1a6>
		// Kill banks
		if (Is_udd_transmit_ready(ep)) {
  405026:	4a6f      	ldr	r2, [pc, #444]	; (4051e4 <udd_ep_abort+0x208>)
  405028:	79fb      	ldrb	r3, [r7, #7]
  40502a:	330c      	adds	r3, #12
  40502c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  405030:	f003 0310 	and.w	r3, r3, #16
  405034:	2b00      	cmp	r3, #0
  405036:	d073      	beq.n	405120 <udd_ep_abort+0x144>
			udd_kill_data_in_fifo(ep,
  405038:	79fb      	ldrb	r3, [r7, #7]
  40503a:	2b00      	cmp	r3, #0
  40503c:	d052      	beq.n	4050e4 <udd_ep_abort+0x108>
  40503e:	79fb      	ldrb	r3, [r7, #7]
  405040:	2b03      	cmp	r3, #3
  405042:	d04f      	beq.n	4050e4 <udd_ep_abort+0x108>
  405044:	4a67      	ldr	r2, [pc, #412]	; (4051e4 <udd_ep_abort+0x208>)
  405046:	79fb      	ldrb	r3, [r7, #7]
  405048:	330c      	adds	r3, #12
  40504a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40504e:	617b      	str	r3, [r7, #20]
  405050:	697b      	ldr	r3, [r7, #20]
  405052:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  405056:	617b      	str	r3, [r7, #20]
  405058:	697b      	ldr	r3, [r7, #20]
  40505a:	f023 0310 	bic.w	r3, r3, #16
  40505e:	617b      	str	r3, [r7, #20]
  405060:	4960      	ldr	r1, [pc, #384]	; (4051e4 <udd_ep_abort+0x208>)
  405062:	79fb      	ldrb	r3, [r7, #7]
  405064:	697a      	ldr	r2, [r7, #20]
  405066:	330c      	adds	r3, #12
  405068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  40506c:	bf00      	nop
  40506e:	4a5d      	ldr	r2, [pc, #372]	; (4051e4 <udd_ep_abort+0x208>)
  405070:	79fb      	ldrb	r3, [r7, #7]
  405072:	330c      	adds	r3, #12
  405074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  405078:	f003 0310 	and.w	r3, r3, #16
  40507c:	2b00      	cmp	r3, #0
  40507e:	d1f6      	bne.n	40506e <udd_ep_abort+0x92>
  405080:	bf00      	nop
  405082:	4a58      	ldr	r2, [pc, #352]	; (4051e4 <udd_ep_abort+0x208>)
  405084:	79fb      	ldrb	r3, [r7, #7]
  405086:	330c      	adds	r3, #12
  405088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40508c:	f003 0310 	and.w	r3, r3, #16
  405090:	2b00      	cmp	r3, #0
  405092:	d1f6      	bne.n	405082 <udd_ep_abort+0xa6>
  405094:	4a53      	ldr	r2, [pc, #332]	; (4051e4 <udd_ep_abort+0x208>)
  405096:	79fb      	ldrb	r3, [r7, #7]
  405098:	330c      	adds	r3, #12
  40509a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40509e:	613b      	str	r3, [r7, #16]
  4050a0:	693b      	ldr	r3, [r7, #16]
  4050a2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4050a6:	613b      	str	r3, [r7, #16]
  4050a8:	693b      	ldr	r3, [r7, #16]
  4050aa:	f043 0310 	orr.w	r3, r3, #16
  4050ae:	613b      	str	r3, [r7, #16]
  4050b0:	494c      	ldr	r1, [pc, #304]	; (4051e4 <udd_ep_abort+0x208>)
  4050b2:	79fb      	ldrb	r3, [r7, #7]
  4050b4:	693a      	ldr	r2, [r7, #16]
  4050b6:	330c      	adds	r3, #12
  4050b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  4050bc:	bf00      	nop
  4050be:	4a49      	ldr	r2, [pc, #292]	; (4051e4 <udd_ep_abort+0x208>)
  4050c0:	79fb      	ldrb	r3, [r7, #7]
  4050c2:	330c      	adds	r3, #12
  4050c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4050c8:	f003 0310 	and.w	r3, r3, #16
  4050cc:	2b10      	cmp	r3, #16
  4050ce:	d1f6      	bne.n	4050be <udd_ep_abort+0xe2>
  4050d0:	bf00      	nop
  4050d2:	4a44      	ldr	r2, [pc, #272]	; (4051e4 <udd_ep_abort+0x208>)
  4050d4:	79fb      	ldrb	r3, [r7, #7]
  4050d6:	330c      	adds	r3, #12
  4050d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4050dc:	f003 0310 	and.w	r3, r3, #16
  4050e0:	2b00      	cmp	r3, #0
  4050e2:	d0f6      	beq.n	4050d2 <udd_ep_abort+0xf6>
  4050e4:	4a3f      	ldr	r2, [pc, #252]	; (4051e4 <udd_ep_abort+0x208>)
  4050e6:	79fb      	ldrb	r3, [r7, #7]
  4050e8:	330c      	adds	r3, #12
  4050ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4050ee:	60fb      	str	r3, [r7, #12]
  4050f0:	68fb      	ldr	r3, [r7, #12]
  4050f2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4050f6:	60fb      	str	r3, [r7, #12]
  4050f8:	68fb      	ldr	r3, [r7, #12]
  4050fa:	f023 0310 	bic.w	r3, r3, #16
  4050fe:	60fb      	str	r3, [r7, #12]
  405100:	4938      	ldr	r1, [pc, #224]	; (4051e4 <udd_ep_abort+0x208>)
  405102:	79fb      	ldrb	r3, [r7, #7]
  405104:	68fa      	ldr	r2, [r7, #12]
  405106:	330c      	adds	r3, #12
  405108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  40510c:	bf00      	nop
  40510e:	4a35      	ldr	r2, [pc, #212]	; (4051e4 <udd_ep_abort+0x208>)
  405110:	79fb      	ldrb	r3, [r7, #7]
  405112:	330c      	adds	r3, #12
  405114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  405118:	f003 0310 	and.w	r3, r3, #16
  40511c:	2b00      	cmp	r3, #0
  40511e:	d1f6      	bne.n	40510e <udd_ep_abort+0x132>
					udd_get_endpoint_bank_max_nbr(ep)>1);
		}
		udd_ack_in_sent(ep);
  405120:	4a30      	ldr	r2, [pc, #192]	; (4051e4 <udd_ep_abort+0x208>)
  405122:	79fb      	ldrb	r3, [r7, #7]
  405124:	330c      	adds	r3, #12
  405126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40512a:	60bb      	str	r3, [r7, #8]
  40512c:	68bb      	ldr	r3, [r7, #8]
  40512e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  405132:	60bb      	str	r3, [r7, #8]
  405134:	68bb      	ldr	r3, [r7, #8]
  405136:	f023 0301 	bic.w	r3, r3, #1
  40513a:	60bb      	str	r3, [r7, #8]
  40513c:	4929      	ldr	r1, [pc, #164]	; (4051e4 <udd_ep_abort+0x208>)
  40513e:	79fb      	ldrb	r3, [r7, #7]
  405140:	68ba      	ldr	r2, [r7, #8]
  405142:	330c      	adds	r3, #12
  405144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  405148:	bf00      	nop
  40514a:	4a26      	ldr	r2, [pc, #152]	; (4051e4 <udd_ep_abort+0x208>)
  40514c:	79fb      	ldrb	r3, [r7, #7]
  40514e:	330c      	adds	r3, #12
  405150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  405154:	f003 0301 	and.w	r3, r3, #1
  405158:	2b00      	cmp	r3, #0
  40515a:	d1f6      	bne.n	40514a <udd_ep_abort+0x16e>
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
  40515c:	79fb      	ldrb	r3, [r7, #7]
  40515e:	1e5a      	subs	r2, r3, #1
  405160:	4922      	ldr	r1, [pc, #136]	; (4051ec <udd_ep_abort+0x210>)
  405162:	4613      	mov	r3, r2
  405164:	009b      	lsls	r3, r3, #2
  405166:	4413      	add	r3, r2
  405168:	009b      	lsls	r3, r3, #2
  40516a:	440b      	add	r3, r1
  40516c:	f103 0210 	add.w	r2, r3, #16
  405170:	7853      	ldrb	r3, [r2, #1]
  405172:	f36f 0383 	bfc	r3, #2, #2
  405176:	7053      	strb	r3, [r2, #1]
  405178:	e00c      	b.n	405194 <udd_ep_abort+0x1b8>
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
			udd_ep_ack_out_received(ep);
  40517a:	79fb      	ldrb	r3, [r7, #7]
  40517c:	4618      	mov	r0, r3
  40517e:	4b1c      	ldr	r3, [pc, #112]	; (4051f0 <udd_ep_abort+0x214>)
  405180:	4798      	blx	r3
		while(Is_udd_any_bank_received(ep)) {
  405182:	4a18      	ldr	r2, [pc, #96]	; (4051e4 <udd_ep_abort+0x208>)
  405184:	79fb      	ldrb	r3, [r7, #7]
  405186:	330c      	adds	r3, #12
  405188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40518c:	f003 0342 	and.w	r3, r3, #66	; 0x42
  405190:	2b00      	cmp	r3, #0
  405192:	d1f2      	bne.n	40517a <udd_ep_abort+0x19e>
		}
	}
	// Reset FIFO and data toggle
	udd_reset_endpoint(ep);
  405194:	4913      	ldr	r1, [pc, #76]	; (4051e4 <udd_ep_abort+0x208>)
  405196:	4b13      	ldr	r3, [pc, #76]	; (4051e4 <udd_ep_abort+0x208>)
  405198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  40519a:	79fb      	ldrb	r3, [r7, #7]
  40519c:	2001      	movs	r0, #1
  40519e:	fa00 f303 	lsl.w	r3, r0, r3
  4051a2:	4313      	orrs	r3, r2
  4051a4:	628b      	str	r3, [r1, #40]	; 0x28
  4051a6:	bf00      	nop
  4051a8:	4b0e      	ldr	r3, [pc, #56]	; (4051e4 <udd_ep_abort+0x208>)
  4051aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  4051ac:	79fb      	ldrb	r3, [r7, #7]
  4051ae:	2101      	movs	r1, #1
  4051b0:	fa01 f303 	lsl.w	r3, r1, r3
  4051b4:	4013      	ands	r3, r2
  4051b6:	2b00      	cmp	r3, #0
  4051b8:	d0f6      	beq.n	4051a8 <udd_ep_abort+0x1cc>
  4051ba:	490a      	ldr	r1, [pc, #40]	; (4051e4 <udd_ep_abort+0x208>)
  4051bc:	4b09      	ldr	r3, [pc, #36]	; (4051e4 <udd_ep_abort+0x208>)
  4051be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  4051c0:	79fb      	ldrb	r3, [r7, #7]
  4051c2:	2001      	movs	r0, #1
  4051c4:	fa00 f303 	lsl.w	r3, r0, r3
  4051c8:	43db      	mvns	r3, r3
  4051ca:	4013      	ands	r3, r2
  4051cc:	628b      	str	r3, [r1, #40]	; 0x28
	// Abort job
	udd_ep_abort_job(ep);
  4051ce:	79fb      	ldrb	r3, [r7, #7]
  4051d0:	4618      	mov	r0, r3
  4051d2:	4b08      	ldr	r3, [pc, #32]	; (4051f4 <udd_ep_abort+0x218>)
  4051d4:	4798      	blx	r3
  4051d6:	e000      	b.n	4051da <udd_ep_abort+0x1fe>
		return;
  4051d8:	bf00      	nop
}
  4051da:	3720      	adds	r7, #32
  4051dc:	46bd      	mov	sp, r7
  4051de:	bd80      	pop	{r7, pc}
  4051e0:	0040447d 	.word	0x0040447d
  4051e4:	40034000 	.word	0x40034000
  4051e8:	004044d5 	.word	0x004044d5
  4051ec:	20001bd0 	.word	0x20001bd0
  4051f0:	00405be1 	.word	0x00405be1
  4051f4:	00405b31 	.word	0x00405b31

004051f8 <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
  4051f8:	b580      	push	{r7, lr}
  4051fa:	b084      	sub	sp, #16
  4051fc:	af00      	add	r7, sp, #0
	irqflags_t flags;

	// Reset USB address to 0
	udd_enable_address();
  4051fe:	4a25      	ldr	r2, [pc, #148]	; (405294 <udd_reset_ep_ctrl+0x9c>)
  405200:	4b24      	ldr	r3, [pc, #144]	; (405294 <udd_reset_ep_ctrl+0x9c>)
  405202:	689b      	ldr	r3, [r3, #8]
  405204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  405208:	6093      	str	r3, [r2, #8]
	udd_configure_address(0);
  40520a:	4a22      	ldr	r2, [pc, #136]	; (405294 <udd_reset_ep_ctrl+0x9c>)
  40520c:	4b21      	ldr	r3, [pc, #132]	; (405294 <udd_reset_ep_ctrl+0x9c>)
  40520e:	689b      	ldr	r3, [r3, #8]
  405210:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  405214:	6093      	str	r3, [r2, #8]
	// Alloc and configure control endpoint in OUT direction
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  405216:	4b1f      	ldr	r3, [pc, #124]	; (405294 <udd_reset_ep_ctrl+0x9c>)
  405218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40521a:	60bb      	str	r3, [r7, #8]
  40521c:	68bb      	ldr	r3, [r7, #8]
  40521e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  405222:	60bb      	str	r3, [r7, #8]
  405224:	68bb      	ldr	r3, [r7, #8]
  405226:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  40522a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40522e:	60bb      	str	r3, [r7, #8]
  405230:	68bb      	ldr	r3, [r7, #8]
  405232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  405236:	60bb      	str	r3, [r7, #8]
  405238:	4a16      	ldr	r2, [pc, #88]	; (405294 <udd_reset_ep_ctrl+0x9c>)
  40523a:	68bb      	ldr	r3, [r7, #8]
  40523c:	6313      	str	r3, [r2, #48]	; 0x30
  40523e:	bf00      	nop
  405240:	4b14      	ldr	r3, [pc, #80]	; (405294 <udd_reset_ep_ctrl+0x9c>)
  405242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405244:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  405248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  40524c:	d1f8      	bne.n	405240 <udd_reset_ep_ctrl+0x48>
	udd_enable_endpoint(0);
  40524e:	4b11      	ldr	r3, [pc, #68]	; (405294 <udd_reset_ep_ctrl+0x9c>)
  405250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405252:	607b      	str	r3, [r7, #4]
  405254:	687b      	ldr	r3, [r7, #4]
  405256:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40525a:	607b      	str	r3, [r7, #4]
  40525c:	687b      	ldr	r3, [r7, #4]
  40525e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  405262:	607b      	str	r3, [r7, #4]
  405264:	4a0b      	ldr	r2, [pc, #44]	; (405294 <udd_reset_ep_ctrl+0x9c>)
  405266:	687b      	ldr	r3, [r7, #4]
  405268:	6313      	str	r3, [r2, #48]	; 0x30
  40526a:	bf00      	nop
  40526c:	4b09      	ldr	r3, [pc, #36]	; (405294 <udd_reset_ep_ctrl+0x9c>)
  40526e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405270:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  405274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  405278:	d1f8      	bne.n	40526c <udd_reset_ep_ctrl+0x74>

	flags = cpu_irq_save();
  40527a:	4b07      	ldr	r3, [pc, #28]	; (405298 <udd_reset_ep_ctrl+0xa0>)
  40527c:	4798      	blx	r3
  40527e:	60f8      	str	r0, [r7, #12]
	udd_enable_endpoint_interrupt(0);
  405280:	4b04      	ldr	r3, [pc, #16]	; (405294 <udd_reset_ep_ctrl+0x9c>)
  405282:	2201      	movs	r2, #1
  405284:	611a      	str	r2, [r3, #16]
	cpu_irq_restore(flags);
  405286:	68f8      	ldr	r0, [r7, #12]
  405288:	4b04      	ldr	r3, [pc, #16]	; (40529c <udd_reset_ep_ctrl+0xa4>)
  40528a:	4798      	blx	r3
}
  40528c:	bf00      	nop
  40528e:	3710      	adds	r7, #16
  405290:	46bd      	mov	sp, r7
  405292:	bd80      	pop	{r7, pc}
  405294:	40034000 	.word	0x40034000
  405298:	0040447d 	.word	0x0040447d
  40529c:	004044d5 	.word	0x004044d5

004052a0 <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
  4052a0:	b480      	push	{r7}
  4052a2:	af00      	add	r7, sp, #0
	udd_g_ctrlreq.callback = NULL;
  4052a4:	4b07      	ldr	r3, [pc, #28]	; (4052c4 <udd_ctrl_init+0x24>)
  4052a6:	2200      	movs	r2, #0
  4052a8:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  4052aa:	4b06      	ldr	r3, [pc, #24]	; (4052c4 <udd_ctrl_init+0x24>)
  4052ac:	2200      	movs	r2, #0
  4052ae:	615a      	str	r2, [r3, #20]
	udd_g_ctrlreq.payload_size = 0;
  4052b0:	4b04      	ldr	r3, [pc, #16]	; (4052c4 <udd_ctrl_init+0x24>)
  4052b2:	2200      	movs	r2, #0
  4052b4:	819a      	strh	r2, [r3, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  4052b6:	4b04      	ldr	r3, [pc, #16]	; (4052c8 <udd_ctrl_init+0x28>)
  4052b8:	2200      	movs	r2, #0
  4052ba:	701a      	strb	r2, [r3, #0]
}
  4052bc:	bf00      	nop
  4052be:	46bd      	mov	sp, r7
  4052c0:	bc80      	pop	{r7}
  4052c2:	4770      	bx	lr
  4052c4:	20001c24 	.word	0x20001c24
  4052c8:	20001bc9 	.word	0x20001bc9

004052cc <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
  4052cc:	b580      	push	{r7, lr}
  4052ce:	b086      	sub	sp, #24
  4052d0:	af00      	add	r7, sp, #0
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  4052d2:	4b63      	ldr	r3, [pc, #396]	; (405460 <udd_ctrl_setup_received+0x194>)
  4052d4:	781b      	ldrb	r3, [r3, #0]
  4052d6:	2b00      	cmp	r3, #0
  4052d8:	d003      	beq.n	4052e2 <udd_ctrl_setup_received+0x16>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
  4052da:	4b62      	ldr	r3, [pc, #392]	; (405464 <udd_ctrl_setup_received+0x198>)
  4052dc:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
  4052de:	4b62      	ldr	r3, [pc, #392]	; (405468 <udd_ctrl_setup_received+0x19c>)
  4052e0:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
  4052e2:	4b62      	ldr	r3, [pc, #392]	; (40546c <udd_ctrl_setup_received+0x1a0>)
  4052e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4052e6:	0c1b      	lsrs	r3, r3, #16
  4052e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
  4052ec:	2b08      	cmp	r3, #8
  4052ee:	d017      	beq.n	405320 <udd_ctrl_setup_received+0x54>
		udd_ack_setup_received(0);
  4052f0:	4b5e      	ldr	r3, [pc, #376]	; (40546c <udd_ctrl_setup_received+0x1a0>)
  4052f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4052f4:	613b      	str	r3, [r7, #16]
  4052f6:	693b      	ldr	r3, [r7, #16]
  4052f8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4052fc:	613b      	str	r3, [r7, #16]
  4052fe:	693b      	ldr	r3, [r7, #16]
  405300:	f023 0304 	bic.w	r3, r3, #4
  405304:	613b      	str	r3, [r7, #16]
  405306:	4a59      	ldr	r2, [pc, #356]	; (40546c <udd_ctrl_setup_received+0x1a0>)
  405308:	693b      	ldr	r3, [r7, #16]
  40530a:	6313      	str	r3, [r2, #48]	; 0x30
  40530c:	bf00      	nop
  40530e:	4b57      	ldr	r3, [pc, #348]	; (40546c <udd_ctrl_setup_received+0x1a0>)
  405310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405312:	f003 0304 	and.w	r3, r3, #4
  405316:	2b00      	cmp	r3, #0
  405318:	d1f9      	bne.n	40530e <udd_ctrl_setup_received+0x42>
		udd_ctrl_stall_data();
  40531a:	4b55      	ldr	r3, [pc, #340]	; (405470 <udd_ctrl_setup_received+0x1a4>)
  40531c:	4798      	blx	r3
		return; // Error data number doesn't correspond to SETUP packet
  40531e:	e09b      	b.n	405458 <udd_ctrl_setup_received+0x18c>
	}
	for (i = 0; i < 8; i++) {
  405320:	2300      	movs	r3, #0
  405322:	75fb      	strb	r3, [r7, #23]
  405324:	e009      	b.n	40533a <udd_ctrl_setup_received+0x6e>
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  405326:	7dfb      	ldrb	r3, [r7, #23]
  405328:	4a52      	ldr	r2, [pc, #328]	; (405474 <udd_ctrl_setup_received+0x1a8>)
  40532a:	4413      	add	r3, r2
			udd_endpoint_fifo_read(0);
  40532c:	4a4f      	ldr	r2, [pc, #316]	; (40546c <udd_ctrl_setup_received+0x1a0>)
  40532e:	6d12      	ldr	r2, [r2, #80]	; 0x50
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  405330:	b2d2      	uxtb	r2, r2
  405332:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
  405334:	7dfb      	ldrb	r3, [r7, #23]
  405336:	3301      	adds	r3, #1
  405338:	75fb      	strb	r3, [r7, #23]
  40533a:	7dfb      	ldrb	r3, [r7, #23]
  40533c:	2b07      	cmp	r3, #7
  40533e:	d9f2      	bls.n	405326 <udd_ctrl_setup_received+0x5a>
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
  405340:	4b4c      	ldr	r3, [pc, #304]	; (405474 <udd_ctrl_setup_received+0x1a8>)
  405342:	885a      	ldrh	r2, [r3, #2]
  405344:	4b4b      	ldr	r3, [pc, #300]	; (405474 <udd_ctrl_setup_received+0x1a8>)
  405346:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
  405348:	4b4a      	ldr	r3, [pc, #296]	; (405474 <udd_ctrl_setup_received+0x1a8>)
  40534a:	889a      	ldrh	r2, [r3, #4]
  40534c:	4b49      	ldr	r3, [pc, #292]	; (405474 <udd_ctrl_setup_received+0x1a8>)
  40534e:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
  405350:	4b48      	ldr	r3, [pc, #288]	; (405474 <udd_ctrl_setup_received+0x1a8>)
  405352:	88da      	ldrh	r2, [r3, #6]
  405354:	4b47      	ldr	r3, [pc, #284]	; (405474 <udd_ctrl_setup_received+0x1a8>)
  405356:	80da      	strh	r2, [r3, #6]

	// Decode setup request
	if (udc_process_setup() == false) {
  405358:	4b47      	ldr	r3, [pc, #284]	; (405478 <udd_ctrl_setup_received+0x1ac>)
  40535a:	4798      	blx	r3
  40535c:	4603      	mov	r3, r0
  40535e:	f083 0301 	eor.w	r3, r3, #1
  405362:	b2db      	uxtb	r3, r3
  405364:	2b00      	cmp	r3, #0
  405366:	d017      	beq.n	405398 <udd_ctrl_setup_received+0xcc>
		// Setup request unknown then stall it
		udd_ack_setup_received(0);
  405368:	4b40      	ldr	r3, [pc, #256]	; (40546c <udd_ctrl_setup_received+0x1a0>)
  40536a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40536c:	60fb      	str	r3, [r7, #12]
  40536e:	68fb      	ldr	r3, [r7, #12]
  405370:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  405374:	60fb      	str	r3, [r7, #12]
  405376:	68fb      	ldr	r3, [r7, #12]
  405378:	f023 0304 	bic.w	r3, r3, #4
  40537c:	60fb      	str	r3, [r7, #12]
  40537e:	4a3b      	ldr	r2, [pc, #236]	; (40546c <udd_ctrl_setup_received+0x1a0>)
  405380:	68fb      	ldr	r3, [r7, #12]
  405382:	6313      	str	r3, [r2, #48]	; 0x30
  405384:	bf00      	nop
  405386:	4b39      	ldr	r3, [pc, #228]	; (40546c <udd_ctrl_setup_received+0x1a0>)
  405388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40538a:	f003 0304 	and.w	r3, r3, #4
  40538e:	2b00      	cmp	r3, #0
  405390:	d1f9      	bne.n	405386 <udd_ctrl_setup_received+0xba>
		udd_ctrl_stall_data();
  405392:	4b37      	ldr	r3, [pc, #220]	; (405470 <udd_ctrl_setup_received+0x1a4>)
  405394:	4798      	blx	r3
		return;
  405396:	e05f      	b.n	405458 <udd_ctrl_setup_received+0x18c>
	}

	if (Udd_setup_is_in()) {
  405398:	4b36      	ldr	r3, [pc, #216]	; (405474 <udd_ctrl_setup_received+0x1a8>)
  40539a:	781b      	ldrb	r3, [r3, #0]
  40539c:	b25b      	sxtb	r3, r3
  40539e:	2b00      	cmp	r3, #0
  4053a0:	da35      	bge.n	40540e <udd_ctrl_setup_received+0x142>
		// Set DIR
		udd_set_endpoint_direction_in(0);
  4053a2:	4b32      	ldr	r3, [pc, #200]	; (40546c <udd_ctrl_setup_received+0x1a0>)
  4053a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4053a6:	60bb      	str	r3, [r7, #8]
  4053a8:	68bb      	ldr	r3, [r7, #8]
  4053aa:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4053ae:	60bb      	str	r3, [r7, #8]
  4053b0:	68bb      	ldr	r3, [r7, #8]
  4053b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4053b6:	60bb      	str	r3, [r7, #8]
  4053b8:	4a2c      	ldr	r2, [pc, #176]	; (40546c <udd_ctrl_setup_received+0x1a0>)
  4053ba:	68bb      	ldr	r3, [r7, #8]
  4053bc:	6313      	str	r3, [r2, #48]	; 0x30
  4053be:	bf00      	nop
  4053c0:	4b2a      	ldr	r3, [pc, #168]	; (40546c <udd_ctrl_setup_received+0x1a0>)
  4053c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4053c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4053c8:	2b80      	cmp	r3, #128	; 0x80
  4053ca:	d1f9      	bne.n	4053c0 <udd_ctrl_setup_received+0xf4>
		udd_ack_setup_received(0);
  4053cc:	4b27      	ldr	r3, [pc, #156]	; (40546c <udd_ctrl_setup_received+0x1a0>)
  4053ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4053d0:	607b      	str	r3, [r7, #4]
  4053d2:	687b      	ldr	r3, [r7, #4]
  4053d4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4053d8:	607b      	str	r3, [r7, #4]
  4053da:	687b      	ldr	r3, [r7, #4]
  4053dc:	f023 0304 	bic.w	r3, r3, #4
  4053e0:	607b      	str	r3, [r7, #4]
  4053e2:	4a22      	ldr	r2, [pc, #136]	; (40546c <udd_ctrl_setup_received+0x1a0>)
  4053e4:	687b      	ldr	r3, [r7, #4]
  4053e6:	6313      	str	r3, [r2, #48]	; 0x30
  4053e8:	bf00      	nop
  4053ea:	4b20      	ldr	r3, [pc, #128]	; (40546c <udd_ctrl_setup_received+0x1a0>)
  4053ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4053ee:	f003 0304 	and.w	r3, r3, #4
  4053f2:	2b00      	cmp	r3, #0
  4053f4:	d1f9      	bne.n	4053ea <udd_ctrl_setup_received+0x11e>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  4053f6:	4b21      	ldr	r3, [pc, #132]	; (40547c <udd_ctrl_setup_received+0x1b0>)
  4053f8:	2200      	movs	r2, #0
  4053fa:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_nb_trans = 0;
  4053fc:	4b20      	ldr	r3, [pc, #128]	; (405480 <udd_ctrl_setup_received+0x1b4>)
  4053fe:	2200      	movs	r2, #0
  405400:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  405402:	4b17      	ldr	r3, [pc, #92]	; (405460 <udd_ctrl_setup_received+0x194>)
  405404:	2202      	movs	r2, #2
  405406:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  405408:	4b1e      	ldr	r3, [pc, #120]	; (405484 <udd_ctrl_setup_received+0x1b8>)
  40540a:	4798      	blx	r3
  40540c:	e024      	b.n	405458 <udd_ctrl_setup_received+0x18c>
	} else {
		udd_ack_setup_received(0);
  40540e:	4b17      	ldr	r3, [pc, #92]	; (40546c <udd_ctrl_setup_received+0x1a0>)
  405410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405412:	603b      	str	r3, [r7, #0]
  405414:	683b      	ldr	r3, [r7, #0]
  405416:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40541a:	603b      	str	r3, [r7, #0]
  40541c:	683b      	ldr	r3, [r7, #0]
  40541e:	f023 0304 	bic.w	r3, r3, #4
  405422:	603b      	str	r3, [r7, #0]
  405424:	4a11      	ldr	r2, [pc, #68]	; (40546c <udd_ctrl_setup_received+0x1a0>)
  405426:	683b      	ldr	r3, [r7, #0]
  405428:	6313      	str	r3, [r2, #48]	; 0x30
  40542a:	bf00      	nop
  40542c:	4b0f      	ldr	r3, [pc, #60]	; (40546c <udd_ctrl_setup_received+0x1a0>)
  40542e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405430:	f003 0304 	and.w	r3, r3, #4
  405434:	2b00      	cmp	r3, #0
  405436:	d1f9      	bne.n	40542c <udd_ctrl_setup_received+0x160>
		if (0 == udd_g_ctrlreq.req.wLength) {
  405438:	4b0e      	ldr	r3, [pc, #56]	; (405474 <udd_ctrl_setup_received+0x1a8>)
  40543a:	88db      	ldrh	r3, [r3, #6]
  40543c:	2b00      	cmp	r3, #0
  40543e:	d102      	bne.n	405446 <udd_ctrl_setup_received+0x17a>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
  405440:	4b11      	ldr	r3, [pc, #68]	; (405488 <udd_ctrl_setup_received+0x1bc>)
  405442:	4798      	blx	r3
			return;
  405444:	e008      	b.n	405458 <udd_ctrl_setup_received+0x18c>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  405446:	4b0d      	ldr	r3, [pc, #52]	; (40547c <udd_ctrl_setup_received+0x1b0>)
  405448:	2200      	movs	r2, #0
  40544a:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_nb_trans = 0;
  40544c:	4b0c      	ldr	r3, [pc, #48]	; (405480 <udd_ctrl_setup_received+0x1b4>)
  40544e:	2200      	movs	r2, #0
  405450:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  405452:	4b03      	ldr	r3, [pc, #12]	; (405460 <udd_ctrl_setup_received+0x194>)
  405454:	2201      	movs	r2, #1
  405456:	701a      	strb	r2, [r3, #0]
	}
}
  405458:	3718      	adds	r7, #24
  40545a:	46bd      	mov	sp, r7
  40545c:	bd80      	pop	{r7, pc}
  40545e:	bf00      	nop
  405460:	20001bc9 	.word	0x20001bc9
  405464:	00405981 	.word	0x00405981
  405468:	004052a1 	.word	0x004052a1
  40546c:	40034000 	.word	0x40034000
  405470:	004058d9 	.word	0x004058d9
  405474:	20001c24 	.word	0x20001c24
  405478:	00403985 	.word	0x00403985
  40547c:	20001bca 	.word	0x20001bca
  405480:	20001bcc 	.word	0x20001bcc
  405484:	0040548d 	.word	0x0040548d
  405488:	00405921 	.word	0x00405921

0040548c <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
  40548c:	b580      	push	{r7, lr}
  40548e:	b088      	sub	sp, #32
  405490:	af00      	add	r7, sp, #0
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_src;
	irqflags_t flags;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  405492:	4b71      	ldr	r3, [pc, #452]	; (405658 <udd_ctrl_in_sent+0x1cc>)
  405494:	781b      	ldrb	r3, [r3, #0]
  405496:	2b03      	cmp	r3, #3
  405498:	d119      	bne.n	4054ce <udd_ctrl_in_sent+0x42>
		// Ack
		udd_ack_in_sent(0);
  40549a:	4b70      	ldr	r3, [pc, #448]	; (40565c <udd_ctrl_in_sent+0x1d0>)
  40549c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40549e:	613b      	str	r3, [r7, #16]
  4054a0:	693b      	ldr	r3, [r7, #16]
  4054a2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4054a6:	613b      	str	r3, [r7, #16]
  4054a8:	693b      	ldr	r3, [r7, #16]
  4054aa:	f023 0301 	bic.w	r3, r3, #1
  4054ae:	613b      	str	r3, [r7, #16]
  4054b0:	4a6a      	ldr	r2, [pc, #424]	; (40565c <udd_ctrl_in_sent+0x1d0>)
  4054b2:	693b      	ldr	r3, [r7, #16]
  4054b4:	6313      	str	r3, [r2, #48]	; 0x30
  4054b6:	bf00      	nop
  4054b8:	4b68      	ldr	r3, [pc, #416]	; (40565c <udd_ctrl_in_sent+0x1d0>)
  4054ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4054bc:	f003 0301 	and.w	r3, r3, #1
  4054c0:	2b00      	cmp	r3, #0
  4054c2:	d1f9      	bne.n	4054b8 <udd_ctrl_in_sent+0x2c>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
  4054c4:	4b66      	ldr	r3, [pc, #408]	; (405660 <udd_ctrl_in_sent+0x1d4>)
  4054c6:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
  4054c8:	4b66      	ldr	r3, [pc, #408]	; (405664 <udd_ctrl_in_sent+0x1d8>)
  4054ca:	4798      	blx	r3
		return;
  4054cc:	e0c1      	b.n	405652 <udd_ctrl_in_sent+0x1c6>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
  4054ce:	4b66      	ldr	r3, [pc, #408]	; (405668 <udd_ctrl_in_sent+0x1dc>)
  4054d0:	899a      	ldrh	r2, [r3, #12]
  4054d2:	4b66      	ldr	r3, [pc, #408]	; (40566c <udd_ctrl_in_sent+0x1e0>)
  4054d4:	881b      	ldrh	r3, [r3, #0]
  4054d6:	1ad3      	subs	r3, r2, r3
  4054d8:	83fb      	strh	r3, [r7, #30]
	if (0 == nb_remain) {
  4054da:	8bfb      	ldrh	r3, [r7, #30]
  4054dc:	2b00      	cmp	r3, #0
  4054de:	d13c      	bne.n	40555a <udd_ctrl_in_sent+0xce>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  4054e0:	4b63      	ldr	r3, [pc, #396]	; (405670 <udd_ctrl_in_sent+0x1e4>)
  4054e2:	881a      	ldrh	r2, [r3, #0]
  4054e4:	4b61      	ldr	r3, [pc, #388]	; (40566c <udd_ctrl_in_sent+0x1e0>)
  4054e6:	881b      	ldrh	r3, [r3, #0]
  4054e8:	4413      	add	r3, r2
  4054ea:	b29a      	uxth	r2, r3
  4054ec:	4b60      	ldr	r3, [pc, #384]	; (405670 <udd_ctrl_in_sent+0x1e4>)
  4054ee:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  4054f0:	4b5d      	ldr	r3, [pc, #372]	; (405668 <udd_ctrl_in_sent+0x1dc>)
  4054f2:	88da      	ldrh	r2, [r3, #6]
  4054f4:	4b5e      	ldr	r3, [pc, #376]	; (405670 <udd_ctrl_in_sent+0x1e4>)
  4054f6:	881b      	ldrh	r3, [r3, #0]
  4054f8:	429a      	cmp	r2, r3
  4054fa:	d003      	beq.n	405504 <udd_ctrl_in_sent+0x78>
				|| b_shortpacket) {
  4054fc:	4b5d      	ldr	r3, [pc, #372]	; (405674 <udd_ctrl_in_sent+0x1e8>)
  4054fe:	781b      	ldrb	r3, [r3, #0]
  405500:	2b00      	cmp	r3, #0
  405502:	d017      	beq.n	405534 <udd_ctrl_in_sent+0xa8>
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
  405504:	4b5c      	ldr	r3, [pc, #368]	; (405678 <udd_ctrl_in_sent+0x1ec>)
  405506:	4798      	blx	r3
			udd_ack_in_sent(0);
  405508:	4b54      	ldr	r3, [pc, #336]	; (40565c <udd_ctrl_in_sent+0x1d0>)
  40550a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40550c:	60fb      	str	r3, [r7, #12]
  40550e:	68fb      	ldr	r3, [r7, #12]
  405510:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  405514:	60fb      	str	r3, [r7, #12]
  405516:	68fb      	ldr	r3, [r7, #12]
  405518:	f023 0301 	bic.w	r3, r3, #1
  40551c:	60fb      	str	r3, [r7, #12]
  40551e:	4a4f      	ldr	r2, [pc, #316]	; (40565c <udd_ctrl_in_sent+0x1d0>)
  405520:	68fb      	ldr	r3, [r7, #12]
  405522:	6313      	str	r3, [r2, #48]	; 0x30
  405524:	bf00      	nop
  405526:	4b4d      	ldr	r3, [pc, #308]	; (40565c <udd_ctrl_in_sent+0x1d0>)
  405528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40552a:	f003 0301 	and.w	r3, r3, #1
  40552e:	2b00      	cmp	r3, #0
  405530:	d1f9      	bne.n	405526 <udd_ctrl_in_sent+0x9a>
			return;
  405532:	e08e      	b.n	405652 <udd_ctrl_in_sent+0x1c6>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
  405534:	4b4c      	ldr	r3, [pc, #304]	; (405668 <udd_ctrl_in_sent+0x1dc>)
  405536:	695b      	ldr	r3, [r3, #20]
  405538:	2b00      	cmp	r3, #0
  40553a:	d00e      	beq.n	40555a <udd_ctrl_in_sent+0xce>
				|| (!udd_g_ctrlreq.over_under_run())) {
  40553c:	4b4a      	ldr	r3, [pc, #296]	; (405668 <udd_ctrl_in_sent+0x1dc>)
  40553e:	695b      	ldr	r3, [r3, #20]
  405540:	4798      	blx	r3
  405542:	4603      	mov	r3, r0
  405544:	f083 0301 	eor.w	r3, r3, #1
  405548:	b2db      	uxtb	r3, r3
  40554a:	2b00      	cmp	r3, #0
  40554c:	d105      	bne.n	40555a <udd_ctrl_in_sent+0xce>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
  40554e:	4b47      	ldr	r3, [pc, #284]	; (40566c <udd_ctrl_in_sent+0x1e0>)
  405550:	2200      	movs	r2, #0
  405552:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  405554:	4b44      	ldr	r3, [pc, #272]	; (405668 <udd_ctrl_in_sent+0x1dc>)
  405556:	899b      	ldrh	r3, [r3, #12]
  405558:	83fb      	strh	r3, [r7, #30]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  40555a:	8bfb      	ldrh	r3, [r7, #30]
  40555c:	2b3f      	cmp	r3, #63	; 0x3f
  40555e:	d905      	bls.n	40556c <udd_ctrl_in_sent+0xe0>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  405560:	2340      	movs	r3, #64	; 0x40
  405562:	83fb      	strh	r3, [r7, #30]
		b_shortpacket = false;
  405564:	4b43      	ldr	r3, [pc, #268]	; (405674 <udd_ctrl_in_sent+0x1e8>)
  405566:	2200      	movs	r2, #0
  405568:	701a      	strb	r2, [r3, #0]
  40556a:	e002      	b.n	405572 <udd_ctrl_in_sent+0xe6>
	} else {
		b_shortpacket = true;
  40556c:	4b41      	ldr	r3, [pc, #260]	; (405674 <udd_ctrl_in_sent+0x1e8>)
  40556e:	2201      	movs	r2, #1
  405570:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  405572:	4b3d      	ldr	r3, [pc, #244]	; (405668 <udd_ctrl_in_sent+0x1dc>)
  405574:	689b      	ldr	r3, [r3, #8]
  405576:	4a3d      	ldr	r2, [pc, #244]	; (40566c <udd_ctrl_in_sent+0x1e0>)
  405578:	8812      	ldrh	r2, [r2, #0]
  40557a:	4413      	add	r3, r2
  40557c:	61bb      	str	r3, [r7, #24]
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
  40557e:	4b3f      	ldr	r3, [pc, #252]	; (40567c <udd_ctrl_in_sent+0x1f0>)
  405580:	4798      	blx	r3
  405582:	6178      	str	r0, [r7, #20]
	if (Is_udd_bank0_received(0)) {
  405584:	4b35      	ldr	r3, [pc, #212]	; (40565c <udd_ctrl_in_sent+0x1d0>)
  405586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405588:	f003 0302 	and.w	r3, r3, #2
  40558c:	2b00      	cmp	r3, #0
  40558e:	d01b      	beq.n	4055c8 <udd_ctrl_in_sent+0x13c>
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
  405590:	6978      	ldr	r0, [r7, #20]
  405592:	4b3b      	ldr	r3, [pc, #236]	; (405680 <udd_ctrl_in_sent+0x1f4>)
  405594:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  405596:	4b30      	ldr	r3, [pc, #192]	; (405658 <udd_ctrl_in_sent+0x1cc>)
  405598:	2204      	movs	r2, #4
  40559a:	701a      	strb	r2, [r3, #0]
		udd_ack_in_sent(0);
  40559c:	4b2f      	ldr	r3, [pc, #188]	; (40565c <udd_ctrl_in_sent+0x1d0>)
  40559e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4055a0:	60bb      	str	r3, [r7, #8]
  4055a2:	68bb      	ldr	r3, [r7, #8]
  4055a4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4055a8:	60bb      	str	r3, [r7, #8]
  4055aa:	68bb      	ldr	r3, [r7, #8]
  4055ac:	f023 0301 	bic.w	r3, r3, #1
  4055b0:	60bb      	str	r3, [r7, #8]
  4055b2:	4a2a      	ldr	r2, [pc, #168]	; (40565c <udd_ctrl_in_sent+0x1d0>)
  4055b4:	68bb      	ldr	r3, [r7, #8]
  4055b6:	6313      	str	r3, [r2, #48]	; 0x30
  4055b8:	bf00      	nop
  4055ba:	4b28      	ldr	r3, [pc, #160]	; (40565c <udd_ctrl_in_sent+0x1d0>)
  4055bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4055be:	f003 0301 	and.w	r3, r3, #1
  4055c2:	2b00      	cmp	r3, #0
  4055c4:	d1f9      	bne.n	4055ba <udd_ctrl_in_sent+0x12e>
		return; // Exit of IN DATA phase
  4055c6:	e044      	b.n	405652 <udd_ctrl_in_sent+0x1c6>
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  4055c8:	2300      	movs	r3, #0
  4055ca:	777b      	strb	r3, [r7, #29]
  4055cc:	e008      	b.n	4055e0 <udd_ctrl_in_sent+0x154>
		udd_endpoint_fifo_write(0, *ptr_src++);
  4055ce:	4923      	ldr	r1, [pc, #140]	; (40565c <udd_ctrl_in_sent+0x1d0>)
  4055d0:	69bb      	ldr	r3, [r7, #24]
  4055d2:	1c5a      	adds	r2, r3, #1
  4055d4:	61ba      	str	r2, [r7, #24]
  4055d6:	781b      	ldrb	r3, [r3, #0]
  4055d8:	650b      	str	r3, [r1, #80]	; 0x50
	for (i = 0; i < nb_remain; i++) {
  4055da:	7f7b      	ldrb	r3, [r7, #29]
  4055dc:	3301      	adds	r3, #1
  4055de:	777b      	strb	r3, [r7, #29]
  4055e0:	7f7b      	ldrb	r3, [r7, #29]
  4055e2:	b29b      	uxth	r3, r3
  4055e4:	8bfa      	ldrh	r2, [r7, #30]
  4055e6:	429a      	cmp	r2, r3
  4055e8:	d8f1      	bhi.n	4055ce <udd_ctrl_in_sent+0x142>
	}
	udd_ctrl_payload_nb_trans += nb_remain;
  4055ea:	4b20      	ldr	r3, [pc, #128]	; (40566c <udd_ctrl_in_sent+0x1e0>)
  4055ec:	881a      	ldrh	r2, [r3, #0]
  4055ee:	8bfb      	ldrh	r3, [r7, #30]
  4055f0:	4413      	add	r3, r2
  4055f2:	b29a      	uxth	r2, r3
  4055f4:	4b1d      	ldr	r3, [pc, #116]	; (40566c <udd_ctrl_in_sent+0x1e0>)
  4055f6:	801a      	strh	r2, [r3, #0]
	// Validate and send the data available in the control endpoint buffer
	udd_set_transmit_ready(0);
  4055f8:	4b18      	ldr	r3, [pc, #96]	; (40565c <udd_ctrl_in_sent+0x1d0>)
  4055fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4055fc:	607b      	str	r3, [r7, #4]
  4055fe:	687b      	ldr	r3, [r7, #4]
  405600:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  405604:	607b      	str	r3, [r7, #4]
  405606:	687b      	ldr	r3, [r7, #4]
  405608:	f043 0310 	orr.w	r3, r3, #16
  40560c:	607b      	str	r3, [r7, #4]
  40560e:	4a13      	ldr	r2, [pc, #76]	; (40565c <udd_ctrl_in_sent+0x1d0>)
  405610:	687b      	ldr	r3, [r7, #4]
  405612:	6313      	str	r3, [r2, #48]	; 0x30
  405614:	bf00      	nop
  405616:	4b11      	ldr	r3, [pc, #68]	; (40565c <udd_ctrl_in_sent+0x1d0>)
  405618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40561a:	f003 0310 	and.w	r3, r3, #16
  40561e:	2b10      	cmp	r3, #16
  405620:	d1f9      	bne.n	405616 <udd_ctrl_in_sent+0x18a>
	udd_ack_in_sent(0);
  405622:	4b0e      	ldr	r3, [pc, #56]	; (40565c <udd_ctrl_in_sent+0x1d0>)
  405624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405626:	603b      	str	r3, [r7, #0]
  405628:	683b      	ldr	r3, [r7, #0]
  40562a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40562e:	603b      	str	r3, [r7, #0]
  405630:	683b      	ldr	r3, [r7, #0]
  405632:	f023 0301 	bic.w	r3, r3, #1
  405636:	603b      	str	r3, [r7, #0]
  405638:	4a08      	ldr	r2, [pc, #32]	; (40565c <udd_ctrl_in_sent+0x1d0>)
  40563a:	683b      	ldr	r3, [r7, #0]
  40563c:	6313      	str	r3, [r2, #48]	; 0x30
  40563e:	bf00      	nop
  405640:	4b06      	ldr	r3, [pc, #24]	; (40565c <udd_ctrl_in_sent+0x1d0>)
  405642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405644:	f003 0301 	and.w	r3, r3, #1
  405648:	2b00      	cmp	r3, #0
  40564a:	d1f9      	bne.n	405640 <udd_ctrl_in_sent+0x1b4>

	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
  40564c:	6978      	ldr	r0, [r7, #20]
  40564e:	4b0c      	ldr	r3, [pc, #48]	; (405680 <udd_ctrl_in_sent+0x1f4>)
  405650:	4798      	blx	r3
}
  405652:	3720      	adds	r7, #32
  405654:	46bd      	mov	sp, r7
  405656:	bd80      	pop	{r7, pc}
  405658:	20001bc9 	.word	0x20001bc9
  40565c:	40034000 	.word	0x40034000
  405660:	00405981 	.word	0x00405981
  405664:	004052a1 	.word	0x004052a1
  405668:	20001c24 	.word	0x20001c24
  40566c:	20001bcc 	.word	0x20001bcc
  405670:	20001bca 	.word	0x20001bca
  405674:	20001c0c 	.word	0x20001c0c
  405678:	00405969 	.word	0x00405969
  40567c:	0040447d 	.word	0x0040447d
  405680:	004044d5 	.word	0x004044d5

00405684 <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
  405684:	b580      	push	{r7, lr}
  405686:	b088      	sub	sp, #32
  405688:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  40568a:	4b8a      	ldr	r3, [pc, #552]	; (4058b4 <udd_ctrl_out_received+0x230>)
  40568c:	781b      	ldrb	r3, [r3, #0]
  40568e:	2b01      	cmp	r3, #1
  405690:	d024      	beq.n	4056dc <udd_ctrl_out_received+0x58>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  405692:	4b88      	ldr	r3, [pc, #544]	; (4058b4 <udd_ctrl_out_received+0x230>)
  405694:	781b      	ldrb	r3, [r3, #0]
  405696:	2b02      	cmp	r3, #2
  405698:	d003      	beq.n	4056a2 <udd_ctrl_out_received+0x1e>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
  40569a:	4b86      	ldr	r3, [pc, #536]	; (4058b4 <udd_ctrl_out_received+0x230>)
  40569c:	781b      	ldrb	r3, [r3, #0]
  40569e:	2b04      	cmp	r3, #4
  4056a0:	d102      	bne.n	4056a8 <udd_ctrl_out_received+0x24>
				udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
  4056a2:	4b85      	ldr	r3, [pc, #532]	; (4058b8 <udd_ctrl_out_received+0x234>)
  4056a4:	4798      	blx	r3
  4056a6:	e001      	b.n	4056ac <udd_ctrl_out_received+0x28>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
  4056a8:	4b84      	ldr	r3, [pc, #528]	; (4058bc <udd_ctrl_out_received+0x238>)
  4056aa:	4798      	blx	r3
		}
		udd_ack_bank0_received(0);
  4056ac:	4b84      	ldr	r3, [pc, #528]	; (4058c0 <udd_ctrl_out_received+0x23c>)
  4056ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4056b0:	617b      	str	r3, [r7, #20]
  4056b2:	697b      	ldr	r3, [r7, #20]
  4056b4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4056b8:	617b      	str	r3, [r7, #20]
  4056ba:	697b      	ldr	r3, [r7, #20]
  4056bc:	f023 0302 	bic.w	r3, r3, #2
  4056c0:	617b      	str	r3, [r7, #20]
  4056c2:	4a7f      	ldr	r2, [pc, #508]	; (4058c0 <udd_ctrl_out_received+0x23c>)
  4056c4:	697b      	ldr	r3, [r7, #20]
  4056c6:	6313      	str	r3, [r2, #48]	; 0x30
  4056c8:	bf00      	nop
  4056ca:	4b7d      	ldr	r3, [pc, #500]	; (4058c0 <udd_ctrl_out_received+0x23c>)
  4056cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4056ce:	f003 0302 	and.w	r3, r3, #2
  4056d2:	2b00      	cmp	r3, #0
  4056d4:	d1f9      	bne.n	4056ca <udd_ctrl_out_received+0x46>
		// Reinitializes control endpoint management
		udd_ctrl_init();
  4056d6:	4b7b      	ldr	r3, [pc, #492]	; (4058c4 <udd_ctrl_out_received+0x240>)
  4056d8:	4798      	blx	r3
		return;
  4056da:	e0e7      	b.n	4058ac <udd_ctrl_out_received+0x228>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
  4056dc:	4b78      	ldr	r3, [pc, #480]	; (4058c0 <udd_ctrl_out_received+0x23c>)
  4056de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4056e0:	0c1b      	lsrs	r3, r3, #16
  4056e2:	b29b      	uxth	r3, r3
  4056e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
  4056e8:	83bb      	strh	r3, [r7, #28]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  4056ea:	4b77      	ldr	r3, [pc, #476]	; (4058c8 <udd_ctrl_out_received+0x244>)
  4056ec:	899b      	ldrh	r3, [r3, #12]
  4056ee:	461a      	mov	r2, r3
  4056f0:	4b76      	ldr	r3, [pc, #472]	; (4058cc <udd_ctrl_out_received+0x248>)
  4056f2:	881b      	ldrh	r3, [r3, #0]
  4056f4:	4619      	mov	r1, r3
  4056f6:	8bbb      	ldrh	r3, [r7, #28]
  4056f8:	440b      	add	r3, r1
  4056fa:	429a      	cmp	r2, r3
  4056fc:	da05      	bge.n	40570a <udd_ctrl_out_received+0x86>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
  4056fe:	4b72      	ldr	r3, [pc, #456]	; (4058c8 <udd_ctrl_out_received+0x244>)
  405700:	899a      	ldrh	r2, [r3, #12]
  405702:	4b72      	ldr	r3, [pc, #456]	; (4058cc <udd_ctrl_out_received+0x248>)
  405704:	881b      	ldrh	r3, [r3, #0]
  405706:	1ad3      	subs	r3, r2, r3
  405708:	83bb      	strh	r3, [r7, #28]
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  40570a:	4b6f      	ldr	r3, [pc, #444]	; (4058c8 <udd_ctrl_out_received+0x244>)
  40570c:	689b      	ldr	r3, [r3, #8]
  40570e:	4a6f      	ldr	r2, [pc, #444]	; (4058cc <udd_ctrl_out_received+0x248>)
  405710:	8812      	ldrh	r2, [r2, #0]
  405712:	4413      	add	r3, r2
  405714:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < nb_data; i++) {
  405716:	2300      	movs	r3, #0
  405718:	77fb      	strb	r3, [r7, #31]
  40571a:	e009      	b.n	405730 <udd_ctrl_out_received+0xac>
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  40571c:	69bb      	ldr	r3, [r7, #24]
  40571e:	1c5a      	adds	r2, r3, #1
  405720:	61ba      	str	r2, [r7, #24]
  405722:	4a67      	ldr	r2, [pc, #412]	; (4058c0 <udd_ctrl_out_received+0x23c>)
  405724:	6d12      	ldr	r2, [r2, #80]	; 0x50
  405726:	b2d2      	uxtb	r2, r2
  405728:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_data; i++) {
  40572a:	7ffb      	ldrb	r3, [r7, #31]
  40572c:	3301      	adds	r3, #1
  40572e:	77fb      	strb	r3, [r7, #31]
  405730:	7ffb      	ldrb	r3, [r7, #31]
  405732:	b29b      	uxth	r3, r3
  405734:	8bba      	ldrh	r2, [r7, #28]
  405736:	429a      	cmp	r2, r3
  405738:	d8f0      	bhi.n	40571c <udd_ctrl_out_received+0x98>
	}
	udd_ctrl_payload_nb_trans += nb_data;
  40573a:	4b64      	ldr	r3, [pc, #400]	; (4058cc <udd_ctrl_out_received+0x248>)
  40573c:	881a      	ldrh	r2, [r3, #0]
  40573e:	8bbb      	ldrh	r3, [r7, #28]
  405740:	4413      	add	r3, r2
  405742:	b29a      	uxth	r2, r3
  405744:	4b61      	ldr	r3, [pc, #388]	; (4058cc <udd_ctrl_out_received+0x248>)
  405746:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  405748:	8bbb      	ldrh	r3, [r7, #28]
  40574a:	2b40      	cmp	r3, #64	; 0x40
  40574c:	d10a      	bne.n	405764 <udd_ctrl_out_received+0xe0>
			|| (udd_g_ctrlreq.req.wLength <=
  40574e:	4b5e      	ldr	r3, [pc, #376]	; (4058c8 <udd_ctrl_out_received+0x244>)
  405750:	88db      	ldrh	r3, [r3, #6]
  405752:	461a      	mov	r2, r3
			(udd_ctrl_prev_payload_nb_trans +
  405754:	4b5e      	ldr	r3, [pc, #376]	; (4058d0 <udd_ctrl_out_received+0x24c>)
  405756:	881b      	ldrh	r3, [r3, #0]
  405758:	4619      	mov	r1, r3
  40575a:	4b5c      	ldr	r3, [pc, #368]	; (4058cc <udd_ctrl_out_received+0x248>)
  40575c:	881b      	ldrh	r3, [r3, #0]
  40575e:	440b      	add	r3, r1
			|| (udd_g_ctrlreq.req.wLength <=
  405760:	429a      	cmp	r2, r3
  405762:	dc40      	bgt.n	4057e6 <udd_ctrl_out_received+0x162>
			udd_ctrl_payload_nb_trans))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
  405764:	4b59      	ldr	r3, [pc, #356]	; (4058cc <udd_ctrl_out_received+0x248>)
  405766:	881a      	ldrh	r2, [r3, #0]
  405768:	4b57      	ldr	r3, [pc, #348]	; (4058c8 <udd_ctrl_out_received+0x244>)
  40576a:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  40576c:	4b56      	ldr	r3, [pc, #344]	; (4058c8 <udd_ctrl_out_received+0x244>)
  40576e:	695b      	ldr	r3, [r3, #20]
  405770:	2b00      	cmp	r3, #0
  405772:	d020      	beq.n	4057b6 <udd_ctrl_out_received+0x132>
			if (!udd_g_ctrlreq.over_under_run()) {
  405774:	4b54      	ldr	r3, [pc, #336]	; (4058c8 <udd_ctrl_out_received+0x244>)
  405776:	695b      	ldr	r3, [r3, #20]
  405778:	4798      	blx	r3
  40577a:	4603      	mov	r3, r0
  40577c:	f083 0301 	eor.w	r3, r3, #1
  405780:	b2db      	uxtb	r3, r3
  405782:	2b00      	cmp	r3, #0
  405784:	d017      	beq.n	4057b6 <udd_ctrl_out_received+0x132>
				// Stall ZLP
				udd_ctrl_stall_data();
  405786:	4b4d      	ldr	r3, [pc, #308]	; (4058bc <udd_ctrl_out_received+0x238>)
  405788:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_bank0_received(0);
  40578a:	4b4d      	ldr	r3, [pc, #308]	; (4058c0 <udd_ctrl_out_received+0x23c>)
  40578c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40578e:	613b      	str	r3, [r7, #16]
  405790:	693b      	ldr	r3, [r7, #16]
  405792:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  405796:	613b      	str	r3, [r7, #16]
  405798:	693b      	ldr	r3, [r7, #16]
  40579a:	f023 0302 	bic.w	r3, r3, #2
  40579e:	613b      	str	r3, [r7, #16]
  4057a0:	4a47      	ldr	r2, [pc, #284]	; (4058c0 <udd_ctrl_out_received+0x23c>)
  4057a2:	693b      	ldr	r3, [r7, #16]
  4057a4:	6313      	str	r3, [r2, #48]	; 0x30
  4057a6:	bf00      	nop
  4057a8:	4b45      	ldr	r3, [pc, #276]	; (4058c0 <udd_ctrl_out_received+0x23c>)
  4057aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4057ac:	f003 0302 	and.w	r3, r3, #2
  4057b0:	2b00      	cmp	r3, #0
  4057b2:	d1f9      	bne.n	4057a8 <udd_ctrl_out_received+0x124>
				return;
  4057b4:	e07a      	b.n	4058ac <udd_ctrl_out_received+0x228>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_bank0_received(0);
  4057b6:	4b42      	ldr	r3, [pc, #264]	; (4058c0 <udd_ctrl_out_received+0x23c>)
  4057b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4057ba:	60fb      	str	r3, [r7, #12]
  4057bc:	68fb      	ldr	r3, [r7, #12]
  4057be:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4057c2:	60fb      	str	r3, [r7, #12]
  4057c4:	68fb      	ldr	r3, [r7, #12]
  4057c6:	f023 0302 	bic.w	r3, r3, #2
  4057ca:	60fb      	str	r3, [r7, #12]
  4057cc:	4a3c      	ldr	r2, [pc, #240]	; (4058c0 <udd_ctrl_out_received+0x23c>)
  4057ce:	68fb      	ldr	r3, [r7, #12]
  4057d0:	6313      	str	r3, [r2, #48]	; 0x30
  4057d2:	bf00      	nop
  4057d4:	4b3a      	ldr	r3, [pc, #232]	; (4058c0 <udd_ctrl_out_received+0x23c>)
  4057d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4057d8:	f003 0302 	and.w	r3, r3, #2
  4057dc:	2b00      	cmp	r3, #0
  4057de:	d1f9      	bne.n	4057d4 <udd_ctrl_out_received+0x150>
		udd_ctrl_send_zlp_in();
  4057e0:	4b3c      	ldr	r3, [pc, #240]	; (4058d4 <udd_ctrl_out_received+0x250>)
  4057e2:	4798      	blx	r3
		return;
  4057e4:	e062      	b.n	4058ac <udd_ctrl_out_received+0x228>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
  4057e6:	4b38      	ldr	r3, [pc, #224]	; (4058c8 <udd_ctrl_out_received+0x244>)
  4057e8:	899a      	ldrh	r2, [r3, #12]
  4057ea:	4b38      	ldr	r3, [pc, #224]	; (4058cc <udd_ctrl_out_received+0x248>)
  4057ec:	881b      	ldrh	r3, [r3, #0]
  4057ee:	429a      	cmp	r2, r3
  4057f0:	d147      	bne.n	405882 <udd_ctrl_out_received+0x1fe>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
  4057f2:	4b35      	ldr	r3, [pc, #212]	; (4058c8 <udd_ctrl_out_received+0x244>)
  4057f4:	695b      	ldr	r3, [r3, #20]
  4057f6:	2b00      	cmp	r3, #0
  4057f8:	d117      	bne.n	40582a <udd_ctrl_out_received+0x1a6>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
  4057fa:	4b30      	ldr	r3, [pc, #192]	; (4058bc <udd_ctrl_out_received+0x238>)
  4057fc:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  4057fe:	4b30      	ldr	r3, [pc, #192]	; (4058c0 <udd_ctrl_out_received+0x23c>)
  405800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405802:	60bb      	str	r3, [r7, #8]
  405804:	68bb      	ldr	r3, [r7, #8]
  405806:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40580a:	60bb      	str	r3, [r7, #8]
  40580c:	68bb      	ldr	r3, [r7, #8]
  40580e:	f023 0302 	bic.w	r3, r3, #2
  405812:	60bb      	str	r3, [r7, #8]
  405814:	4a2a      	ldr	r2, [pc, #168]	; (4058c0 <udd_ctrl_out_received+0x23c>)
  405816:	68bb      	ldr	r3, [r7, #8]
  405818:	6313      	str	r3, [r2, #48]	; 0x30
  40581a:	bf00      	nop
  40581c:	4b28      	ldr	r3, [pc, #160]	; (4058c0 <udd_ctrl_out_received+0x23c>)
  40581e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405820:	f003 0302 	and.w	r3, r3, #2
  405824:	2b00      	cmp	r3, #0
  405826:	d1f9      	bne.n	40581c <udd_ctrl_out_received+0x198>
			return;
  405828:	e040      	b.n	4058ac <udd_ctrl_out_received+0x228>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
  40582a:	4b27      	ldr	r3, [pc, #156]	; (4058c8 <udd_ctrl_out_received+0x244>)
  40582c:	695b      	ldr	r3, [r3, #20]
  40582e:	4798      	blx	r3
  405830:	4603      	mov	r3, r0
  405832:	f083 0301 	eor.w	r3, r3, #1
  405836:	b2db      	uxtb	r3, r3
  405838:	2b00      	cmp	r3, #0
  40583a:	d017      	beq.n	40586c <udd_ctrl_out_received+0x1e8>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
  40583c:	4b1f      	ldr	r3, [pc, #124]	; (4058bc <udd_ctrl_out_received+0x238>)
  40583e:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  405840:	4b1f      	ldr	r3, [pc, #124]	; (4058c0 <udd_ctrl_out_received+0x23c>)
  405842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405844:	607b      	str	r3, [r7, #4]
  405846:	687b      	ldr	r3, [r7, #4]
  405848:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40584c:	607b      	str	r3, [r7, #4]
  40584e:	687b      	ldr	r3, [r7, #4]
  405850:	f023 0302 	bic.w	r3, r3, #2
  405854:	607b      	str	r3, [r7, #4]
  405856:	4a1a      	ldr	r2, [pc, #104]	; (4058c0 <udd_ctrl_out_received+0x23c>)
  405858:	687b      	ldr	r3, [r7, #4]
  40585a:	6313      	str	r3, [r2, #48]	; 0x30
  40585c:	bf00      	nop
  40585e:	4b18      	ldr	r3, [pc, #96]	; (4058c0 <udd_ctrl_out_received+0x23c>)
  405860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405862:	f003 0302 	and.w	r3, r3, #2
  405866:	2b00      	cmp	r3, #0
  405868:	d1f9      	bne.n	40585e <udd_ctrl_out_received+0x1da>
			return;
  40586a:	e01f      	b.n	4058ac <udd_ctrl_out_received+0x228>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  40586c:	4b18      	ldr	r3, [pc, #96]	; (4058d0 <udd_ctrl_out_received+0x24c>)
  40586e:	881a      	ldrh	r2, [r3, #0]
  405870:	4b16      	ldr	r3, [pc, #88]	; (4058cc <udd_ctrl_out_received+0x248>)
  405872:	881b      	ldrh	r3, [r3, #0]
  405874:	4413      	add	r3, r2
  405876:	b29a      	uxth	r2, r3
  405878:	4b15      	ldr	r3, [pc, #84]	; (4058d0 <udd_ctrl_out_received+0x24c>)
  40587a:	801a      	strh	r2, [r3, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
  40587c:	4b13      	ldr	r3, [pc, #76]	; (4058cc <udd_ctrl_out_received+0x248>)
  40587e:	2200      	movs	r2, #0
  405880:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_bank0_received(0);
  405882:	4b0f      	ldr	r3, [pc, #60]	; (4058c0 <udd_ctrl_out_received+0x23c>)
  405884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405886:	603b      	str	r3, [r7, #0]
  405888:	683b      	ldr	r3, [r7, #0]
  40588a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40588e:	603b      	str	r3, [r7, #0]
  405890:	683b      	ldr	r3, [r7, #0]
  405892:	f023 0302 	bic.w	r3, r3, #2
  405896:	603b      	str	r3, [r7, #0]
  405898:	4a09      	ldr	r2, [pc, #36]	; (4058c0 <udd_ctrl_out_received+0x23c>)
  40589a:	683b      	ldr	r3, [r7, #0]
  40589c:	6313      	str	r3, [r2, #48]	; 0x30
  40589e:	bf00      	nop
  4058a0:	4b07      	ldr	r3, [pc, #28]	; (4058c0 <udd_ctrl_out_received+0x23c>)
  4058a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4058a4:	f003 0302 	and.w	r3, r3, #2
  4058a8:	2b00      	cmp	r3, #0
  4058aa:	d1f9      	bne.n	4058a0 <udd_ctrl_out_received+0x21c>
}
  4058ac:	3720      	adds	r7, #32
  4058ae:	46bd      	mov	sp, r7
  4058b0:	bd80      	pop	{r7, pc}
  4058b2:	bf00      	nop
  4058b4:	20001bc9 	.word	0x20001bc9
  4058b8:	00405981 	.word	0x00405981
  4058bc:	004058d9 	.word	0x004058d9
  4058c0:	40034000 	.word	0x40034000
  4058c4:	004052a1 	.word	0x004052a1
  4058c8:	20001c24 	.word	0x20001c24
  4058cc:	20001bcc 	.word	0x20001bcc
  4058d0:	20001bca 	.word	0x20001bca
  4058d4:	00405921 	.word	0x00405921

004058d8 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
  4058d8:	b480      	push	{r7}
  4058da:	b083      	sub	sp, #12
  4058dc:	af00      	add	r7, sp, #0
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  4058de:	4b0e      	ldr	r3, [pc, #56]	; (405918 <udd_ctrl_stall_data+0x40>)
  4058e0:	2205      	movs	r2, #5
  4058e2:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  4058e4:	4b0d      	ldr	r3, [pc, #52]	; (40591c <udd_ctrl_stall_data+0x44>)
  4058e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4058e8:	607b      	str	r3, [r7, #4]
  4058ea:	687b      	ldr	r3, [r7, #4]
  4058ec:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4058f0:	607b      	str	r3, [r7, #4]
  4058f2:	687b      	ldr	r3, [r7, #4]
  4058f4:	f043 0320 	orr.w	r3, r3, #32
  4058f8:	607b      	str	r3, [r7, #4]
  4058fa:	4a08      	ldr	r2, [pc, #32]	; (40591c <udd_ctrl_stall_data+0x44>)
  4058fc:	687b      	ldr	r3, [r7, #4]
  4058fe:	6313      	str	r3, [r2, #48]	; 0x30
  405900:	bf00      	nop
  405902:	4b06      	ldr	r3, [pc, #24]	; (40591c <udd_ctrl_stall_data+0x44>)
  405904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405906:	f003 0320 	and.w	r3, r3, #32
  40590a:	2b20      	cmp	r3, #32
  40590c:	d1f9      	bne.n	405902 <udd_ctrl_stall_data+0x2a>
}
  40590e:	bf00      	nop
  405910:	370c      	adds	r7, #12
  405912:	46bd      	mov	sp, r7
  405914:	bc80      	pop	{r7}
  405916:	4770      	bx	lr
  405918:	20001bc9 	.word	0x20001bc9
  40591c:	40034000 	.word	0x40034000

00405920 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
  405920:	b480      	push	{r7}
  405922:	b083      	sub	sp, #12
  405924:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  405926:	4b0e      	ldr	r3, [pc, #56]	; (405960 <udd_ctrl_send_zlp_in+0x40>)
  405928:	2203      	movs	r2, #3
  40592a:	701a      	strb	r2, [r3, #0]
	// Validate and send empty IN packet on control endpoint
	// Send ZLP on IN endpoint
	udd_set_transmit_ready(0);
  40592c:	4b0d      	ldr	r3, [pc, #52]	; (405964 <udd_ctrl_send_zlp_in+0x44>)
  40592e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405930:	607b      	str	r3, [r7, #4]
  405932:	687b      	ldr	r3, [r7, #4]
  405934:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  405938:	607b      	str	r3, [r7, #4]
  40593a:	687b      	ldr	r3, [r7, #4]
  40593c:	f043 0310 	orr.w	r3, r3, #16
  405940:	607b      	str	r3, [r7, #4]
  405942:	4a08      	ldr	r2, [pc, #32]	; (405964 <udd_ctrl_send_zlp_in+0x44>)
  405944:	687b      	ldr	r3, [r7, #4]
  405946:	6313      	str	r3, [r2, #48]	; 0x30
  405948:	bf00      	nop
  40594a:	4b06      	ldr	r3, [pc, #24]	; (405964 <udd_ctrl_send_zlp_in+0x44>)
  40594c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40594e:	f003 0310 	and.w	r3, r3, #16
  405952:	2b10      	cmp	r3, #16
  405954:	d1f9      	bne.n	40594a <udd_ctrl_send_zlp_in+0x2a>
}
  405956:	bf00      	nop
  405958:	370c      	adds	r7, #12
  40595a:	46bd      	mov	sp, r7
  40595c:	bc80      	pop	{r7}
  40595e:	4770      	bx	lr
  405960:	20001bc9 	.word	0x20001bc9
  405964:	40034000 	.word	0x40034000

00405968 <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
  405968:	b480      	push	{r7}
  40596a:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  40596c:	4b03      	ldr	r3, [pc, #12]	; (40597c <udd_ctrl_send_zlp_out+0x14>)
  40596e:	2204      	movs	r2, #4
  405970:	701a      	strb	r2, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free
}
  405972:	bf00      	nop
  405974:	46bd      	mov	sp, r7
  405976:	bc80      	pop	{r7}
  405978:	4770      	bx	lr
  40597a:	bf00      	nop
  40597c:	20001bc9 	.word	0x20001bc9

00405980 <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
  405980:	b580      	push	{r7, lr}
  405982:	af00      	add	r7, sp, #0
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  405984:	4b04      	ldr	r3, [pc, #16]	; (405998 <udd_ctrl_endofrequest+0x18>)
  405986:	691b      	ldr	r3, [r3, #16]
  405988:	2b00      	cmp	r3, #0
  40598a:	d002      	beq.n	405992 <udd_ctrl_endofrequest+0x12>
		udd_g_ctrlreq.callback();
  40598c:	4b02      	ldr	r3, [pc, #8]	; (405998 <udd_ctrl_endofrequest+0x18>)
  40598e:	691b      	ldr	r3, [r3, #16]
  405990:	4798      	blx	r3
	}
}
  405992:	bf00      	nop
  405994:	bd80      	pop	{r7, pc}
  405996:	bf00      	nop
  405998:	20001c24 	.word	0x20001c24

0040599c <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
  40599c:	b580      	push	{r7, lr}
  40599e:	b082      	sub	sp, #8
  4059a0:	af00      	add	r7, sp, #0
	if (!Is_udd_endpoint_interrupt(0))
  4059a2:	4b24      	ldr	r3, [pc, #144]	; (405a34 <udd_ctrl_interrupt+0x98>)
  4059a4:	69db      	ldr	r3, [r3, #28]
  4059a6:	f003 0301 	and.w	r3, r3, #1
  4059aa:	2b00      	cmp	r3, #0
  4059ac:	d101      	bne.n	4059b2 <udd_ctrl_interrupt+0x16>
		return false; // No interrupt events on control endpoint
  4059ae:	2300      	movs	r3, #0
  4059b0:	e03b      	b.n	405a2a <udd_ctrl_interrupt+0x8e>

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
  4059b2:	4b20      	ldr	r3, [pc, #128]	; (405a34 <udd_ctrl_interrupt+0x98>)
  4059b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4059b6:	f003 0304 	and.w	r3, r3, #4
  4059ba:	2b00      	cmp	r3, #0
  4059bc:	d003      	beq.n	4059c6 <udd_ctrl_interrupt+0x2a>
		// SETUP packet received
		udd_ctrl_setup_received();
  4059be:	4b1e      	ldr	r3, [pc, #120]	; (405a38 <udd_ctrl_interrupt+0x9c>)
  4059c0:	4798      	blx	r3
		return true;
  4059c2:	2301      	movs	r3, #1
  4059c4:	e031      	b.n	405a2a <udd_ctrl_interrupt+0x8e>
	}
	if (Is_udd_in_sent(0)) {
  4059c6:	4b1b      	ldr	r3, [pc, #108]	; (405a34 <udd_ctrl_interrupt+0x98>)
  4059c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4059ca:	f003 0301 	and.w	r3, r3, #1
  4059ce:	2b00      	cmp	r3, #0
  4059d0:	d003      	beq.n	4059da <udd_ctrl_interrupt+0x3e>
		// IN packet sent
		udd_ctrl_in_sent();
  4059d2:	4b1a      	ldr	r3, [pc, #104]	; (405a3c <udd_ctrl_interrupt+0xa0>)
  4059d4:	4798      	blx	r3
		return true;
  4059d6:	2301      	movs	r3, #1
  4059d8:	e027      	b.n	405a2a <udd_ctrl_interrupt+0x8e>
	}
	if (Is_udd_bank0_received(0)) {
  4059da:	4b16      	ldr	r3, [pc, #88]	; (405a34 <udd_ctrl_interrupt+0x98>)
  4059dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4059de:	f003 0302 	and.w	r3, r3, #2
  4059e2:	2b00      	cmp	r3, #0
  4059e4:	d003      	beq.n	4059ee <udd_ctrl_interrupt+0x52>
		// OUT packet received
		udd_ctrl_out_received();
  4059e6:	4b16      	ldr	r3, [pc, #88]	; (405a40 <udd_ctrl_interrupt+0xa4>)
  4059e8:	4798      	blx	r3
		return true;
  4059ea:	2301      	movs	r3, #1
  4059ec:	e01d      	b.n	405a2a <udd_ctrl_interrupt+0x8e>
	}
	if (Is_udd_stall(0)) {
  4059ee:	4b11      	ldr	r3, [pc, #68]	; (405a34 <udd_ctrl_interrupt+0x98>)
  4059f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4059f2:	f003 0308 	and.w	r3, r3, #8
  4059f6:	2b00      	cmp	r3, #0
  4059f8:	d016      	beq.n	405a28 <udd_ctrl_interrupt+0x8c>
		// STALLed
		udd_ack_stall(0);
  4059fa:	4b0e      	ldr	r3, [pc, #56]	; (405a34 <udd_ctrl_interrupt+0x98>)
  4059fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4059fe:	607b      	str	r3, [r7, #4]
  405a00:	687b      	ldr	r3, [r7, #4]
  405a02:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  405a06:	607b      	str	r3, [r7, #4]
  405a08:	687b      	ldr	r3, [r7, #4]
  405a0a:	f023 0308 	bic.w	r3, r3, #8
  405a0e:	607b      	str	r3, [r7, #4]
  405a10:	4a08      	ldr	r2, [pc, #32]	; (405a34 <udd_ctrl_interrupt+0x98>)
  405a12:	687b      	ldr	r3, [r7, #4]
  405a14:	6313      	str	r3, [r2, #48]	; 0x30
  405a16:	bf00      	nop
  405a18:	4b06      	ldr	r3, [pc, #24]	; (405a34 <udd_ctrl_interrupt+0x98>)
  405a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405a1c:	f003 0308 	and.w	r3, r3, #8
  405a20:	2b00      	cmp	r3, #0
  405a22:	d1f9      	bne.n	405a18 <udd_ctrl_interrupt+0x7c>
		return true;
  405a24:	2301      	movs	r3, #1
  405a26:	e000      	b.n	405a2a <udd_ctrl_interrupt+0x8e>
	}
	return false;
  405a28:	2300      	movs	r3, #0
}
  405a2a:	4618      	mov	r0, r3
  405a2c:	3708      	adds	r7, #8
  405a2e:	46bd      	mov	sp, r7
  405a30:	bd80      	pop	{r7, pc}
  405a32:	bf00      	nop
  405a34:	40034000 	.word	0x40034000
  405a38:	004052cd 	.word	0x004052cd
  405a3c:	0040548d 	.word	0x0040548d
  405a40:	00405685 	.word	0x00405685

00405a44 <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
  405a44:	b480      	push	{r7}
  405a46:	b083      	sub	sp, #12
  405a48:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  405a4a:	2300      	movs	r3, #0
  405a4c:	71fb      	strb	r3, [r7, #7]
  405a4e:	e043      	b.n	405ad8 <udd_ep_job_table_reset+0x94>
		udd_ep_job[i].bank = 0;
  405a50:	79fa      	ldrb	r2, [r7, #7]
  405a52:	4925      	ldr	r1, [pc, #148]	; (405ae8 <udd_ep_job_table_reset+0xa4>)
  405a54:	4613      	mov	r3, r2
  405a56:	009b      	lsls	r3, r3, #2
  405a58:	4413      	add	r3, r2
  405a5a:	009b      	lsls	r3, r3, #2
  405a5c:	440b      	add	r3, r1
  405a5e:	f103 0210 	add.w	r2, r3, #16
  405a62:	7853      	ldrb	r3, [r2, #1]
  405a64:	f36f 0383 	bfc	r3, #2, #2
  405a68:	7053      	strb	r3, [r2, #1]
		udd_ep_job[i].busy = false;
  405a6a:	79fa      	ldrb	r2, [r7, #7]
  405a6c:	491e      	ldr	r1, [pc, #120]	; (405ae8 <udd_ep_job_table_reset+0xa4>)
  405a6e:	4613      	mov	r3, r2
  405a70:	009b      	lsls	r3, r3, #2
  405a72:	4413      	add	r3, r2
  405a74:	009b      	lsls	r3, r3, #2
  405a76:	440b      	add	r3, r1
  405a78:	f103 0210 	add.w	r2, r3, #16
  405a7c:	7853      	ldrb	r3, [r2, #1]
  405a7e:	f36f 1304 	bfc	r3, #4, #1
  405a82:	7053      	strb	r3, [r2, #1]
		udd_ep_job[i].b_stall_requested = false;
  405a84:	79fa      	ldrb	r2, [r7, #7]
  405a86:	4918      	ldr	r1, [pc, #96]	; (405ae8 <udd_ep_job_table_reset+0xa4>)
  405a88:	4613      	mov	r3, r2
  405a8a:	009b      	lsls	r3, r3, #2
  405a8c:	4413      	add	r3, r2
  405a8e:	009b      	lsls	r3, r3, #2
  405a90:	440b      	add	r3, r1
  405a92:	f103 0210 	add.w	r2, r3, #16
  405a96:	7853      	ldrb	r3, [r2, #1]
  405a98:	f36f 1345 	bfc	r3, #5, #1
  405a9c:	7053      	strb	r3, [r2, #1]
		udd_ep_job[i].b_shortpacket = false;
  405a9e:	79fa      	ldrb	r2, [r7, #7]
  405aa0:	4911      	ldr	r1, [pc, #68]	; (405ae8 <udd_ep_job_table_reset+0xa4>)
  405aa2:	4613      	mov	r3, r2
  405aa4:	009b      	lsls	r3, r3, #2
  405aa6:	4413      	add	r3, r2
  405aa8:	009b      	lsls	r3, r3, #2
  405aaa:	440b      	add	r3, r1
  405aac:	f103 0210 	add.w	r2, r3, #16
  405ab0:	7853      	ldrb	r3, [r2, #1]
  405ab2:	f36f 1386 	bfc	r3, #6, #1
  405ab6:	7053      	strb	r3, [r2, #1]
		udd_ep_job[i].b_buf_end = false;
  405ab8:	79fa      	ldrb	r2, [r7, #7]
  405aba:	490b      	ldr	r1, [pc, #44]	; (405ae8 <udd_ep_job_table_reset+0xa4>)
  405abc:	4613      	mov	r3, r2
  405abe:	009b      	lsls	r3, r3, #2
  405ac0:	4413      	add	r3, r2
  405ac2:	009b      	lsls	r3, r3, #2
  405ac4:	440b      	add	r3, r1
  405ac6:	f103 0210 	add.w	r2, r3, #16
  405aca:	7853      	ldrb	r3, [r2, #1]
  405acc:	f36f 13c7 	bfc	r3, #7, #1
  405ad0:	7053      	strb	r3, [r2, #1]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  405ad2:	79fb      	ldrb	r3, [r7, #7]
  405ad4:	3301      	adds	r3, #1
  405ad6:	71fb      	strb	r3, [r7, #7]
  405ad8:	79fb      	ldrb	r3, [r7, #7]
  405ada:	2b02      	cmp	r3, #2
  405adc:	d9b8      	bls.n	405a50 <udd_ep_job_table_reset+0xc>
	}
}
  405ade:	bf00      	nop
  405ae0:	370c      	adds	r7, #12
  405ae2:	46bd      	mov	sp, r7
  405ae4:	bc80      	pop	{r7}
  405ae6:	4770      	bx	lr
  405ae8:	20001bd0 	.word	0x20001bd0

00405aec <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
  405aec:	b580      	push	{r7, lr}
  405aee:	b082      	sub	sp, #8
  405af0:	af00      	add	r7, sp, #0
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  405af2:	2300      	movs	r3, #0
  405af4:	71fb      	strb	r3, [r7, #7]
  405af6:	e010      	b.n	405b1a <udd_ep_job_table_kill+0x2e>
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  405af8:	79fa      	ldrb	r2, [r7, #7]
  405afa:	4613      	mov	r3, r2
  405afc:	009b      	lsls	r3, r3, #2
  405afe:	4413      	add	r3, r2
  405b00:	009b      	lsls	r3, r3, #2
  405b02:	4a09      	ldr	r2, [pc, #36]	; (405b28 <udd_ep_job_table_kill+0x3c>)
  405b04:	1898      	adds	r0, r3, r2
  405b06:	79fb      	ldrb	r3, [r7, #7]
  405b08:	3301      	adds	r3, #1
  405b0a:	b2db      	uxtb	r3, r3
  405b0c:	461a      	mov	r2, r3
  405b0e:	2101      	movs	r1, #1
  405b10:	4b06      	ldr	r3, [pc, #24]	; (405b2c <udd_ep_job_table_kill+0x40>)
  405b12:	4798      	blx	r3
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  405b14:	79fb      	ldrb	r3, [r7, #7]
  405b16:	3301      	adds	r3, #1
  405b18:	71fb      	strb	r3, [r7, #7]
  405b1a:	79fb      	ldrb	r3, [r7, #7]
  405b1c:	2b02      	cmp	r3, #2
  405b1e:	d9eb      	bls.n	405af8 <udd_ep_job_table_kill+0xc>
	}
}
  405b20:	bf00      	nop
  405b22:	3708      	adds	r7, #8
  405b24:	46bd      	mov	sp, r7
  405b26:	bd80      	pop	{r7, pc}
  405b28:	20001bd0 	.word	0x20001bd0
  405b2c:	00405b6d 	.word	0x00405b6d

00405b30 <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
  405b30:	b580      	push	{r7, lr}
  405b32:	b082      	sub	sp, #8
  405b34:	af00      	add	r7, sp, #0
  405b36:	4603      	mov	r3, r0
  405b38:	71fb      	strb	r3, [r7, #7]
	ep &= USB_EP_ADDR_MASK;
  405b3a:	79fb      	ldrb	r3, [r7, #7]
  405b3c:	f003 030f 	and.w	r3, r3, #15
  405b40:	71fb      	strb	r3, [r7, #7]

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  405b42:	79fb      	ldrb	r3, [r7, #7]
  405b44:	1e5a      	subs	r2, r3, #1
  405b46:	4613      	mov	r3, r2
  405b48:	009b      	lsls	r3, r3, #2
  405b4a:	4413      	add	r3, r2
  405b4c:	009b      	lsls	r3, r3, #2
  405b4e:	4a05      	ldr	r2, [pc, #20]	; (405b64 <udd_ep_abort_job+0x34>)
  405b50:	4413      	add	r3, r2
  405b52:	79fa      	ldrb	r2, [r7, #7]
  405b54:	2101      	movs	r1, #1
  405b56:	4618      	mov	r0, r3
  405b58:	4b03      	ldr	r3, [pc, #12]	; (405b68 <udd_ep_abort_job+0x38>)
  405b5a:	4798      	blx	r3
}
  405b5c:	bf00      	nop
  405b5e:	3708      	adds	r7, #8
  405b60:	46bd      	mov	sp, r7
  405b62:	bd80      	pop	{r7, pc}
  405b64:	20001bd0 	.word	0x20001bd0
  405b68:	00405b6d 	.word	0x00405b6d

00405b6c <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, int status,
		uint8_t ep_num)
{
  405b6c:	b580      	push	{r7, lr}
  405b6e:	b084      	sub	sp, #16
  405b70:	af00      	add	r7, sp, #0
  405b72:	60f8      	str	r0, [r7, #12]
  405b74:	60b9      	str	r1, [r7, #8]
  405b76:	4613      	mov	r3, r2
  405b78:	71fb      	strb	r3, [r7, #7]
	if (ptr_job->busy == false) {
  405b7a:	68fb      	ldr	r3, [r7, #12]
  405b7c:	7c5b      	ldrb	r3, [r3, #17]
  405b7e:	f003 0310 	and.w	r3, r3, #16
  405b82:	b2db      	uxtb	r3, r3
  405b84:	2b00      	cmp	r3, #0
  405b86:	d023      	beq.n	405bd0 <udd_ep_finish_job+0x64>
		return; // No on-going job
	}
	ptr_job->busy = false;
  405b88:	68fa      	ldr	r2, [r7, #12]
  405b8a:	7c53      	ldrb	r3, [r2, #17]
  405b8c:	f36f 1304 	bfc	r3, #4, #1
  405b90:	7453      	strb	r3, [r2, #17]
	if (NULL == ptr_job->call_trans) {
  405b92:	68fb      	ldr	r3, [r7, #12]
  405b94:	681b      	ldr	r3, [r3, #0]
  405b96:	2b00      	cmp	r3, #0
  405b98:	d01c      	beq.n	405bd4 <udd_ep_finish_job+0x68>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_type_in(ep_num)) {
  405b9a:	4a10      	ldr	r2, [pc, #64]	; (405bdc <udd_ep_finish_job+0x70>)
  405b9c:	79fb      	ldrb	r3, [r7, #7]
  405b9e:	330c      	adds	r3, #12
  405ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  405ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  405ba8:	2b00      	cmp	r3, #0
  405baa:	d003      	beq.n	405bb4 <udd_ep_finish_job+0x48>
		ep_num |= USB_EP_DIR_IN;
  405bac:	79fb      	ldrb	r3, [r7, #7]
  405bae:	f063 037f 	orn	r3, r3, #127	; 0x7f
  405bb2:	71fb      	strb	r3, [r7, #7]
	}
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  405bb4:	68fb      	ldr	r3, [r7, #12]
  405bb6:	681b      	ldr	r3, [r3, #0]
  405bb8:	68ba      	ldr	r2, [r7, #8]
  405bba:	2a01      	cmp	r2, #1
  405bbc:	bf0c      	ite	eq
  405bbe:	2201      	moveq	r2, #1
  405bc0:	2200      	movne	r2, #0
  405bc2:	b2d2      	uxtb	r2, r2
  405bc4:	4610      	mov	r0, r2
  405bc6:	68fa      	ldr	r2, [r7, #12]
  405bc8:	6891      	ldr	r1, [r2, #8]
  405bca:	79fa      	ldrb	r2, [r7, #7]
  405bcc:	4798      	blx	r3
  405bce:	e002      	b.n	405bd6 <udd_ep_finish_job+0x6a>
		return; // No on-going job
  405bd0:	bf00      	nop
  405bd2:	e000      	b.n	405bd6 <udd_ep_finish_job+0x6a>
		return; // No callback linked to job
  405bd4:	bf00      	nop
		UDD_EP_TRANSFER_ABORT : UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
  405bd6:	3710      	adds	r7, #16
  405bd8:	46bd      	mov	sp, r7
  405bda:	bd80      	pop	{r7, pc}
  405bdc:	40034000 	.word	0x40034000

00405be0 <udd_ep_ack_out_received>:


static void udd_ep_ack_out_received(udd_ep_id_t ep)
{
  405be0:	b480      	push	{r7}
  405be2:	b087      	sub	sp, #28
  405be4:	af00      	add	r7, sp, #0
  405be6:	4603      	mov	r3, r0
  405be8:	71fb      	strb	r3, [r7, #7]
	bool bank0_received, bank1_received;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  405bea:	79fb      	ldrb	r3, [r7, #7]
  405bec:	1e5a      	subs	r2, r3, #1
  405bee:	4613      	mov	r3, r2
  405bf0:	009b      	lsls	r3, r3, #2
  405bf2:	4413      	add	r3, r2
  405bf4:	009b      	lsls	r3, r3, #2
  405bf6:	4a45      	ldr	r2, [pc, #276]	; (405d0c <udd_ep_ack_out_received+0x12c>)
  405bf8:	4413      	add	r3, r2
  405bfa:	617b      	str	r3, [r7, #20]

	bank0_received = Is_udd_bank0_received(ep);
  405bfc:	4a44      	ldr	r2, [pc, #272]	; (405d10 <udd_ep_ack_out_received+0x130>)
  405bfe:	79fb      	ldrb	r3, [r7, #7]
  405c00:	330c      	adds	r3, #12
  405c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  405c06:	f003 0302 	and.w	r3, r3, #2
  405c0a:	2b00      	cmp	r3, #0
  405c0c:	bf14      	ite	ne
  405c0e:	2301      	movne	r3, #1
  405c10:	2300      	moveq	r3, #0
  405c12:	74fb      	strb	r3, [r7, #19]
	bank1_received = Is_udd_bank1_received(ep);
  405c14:	4a3e      	ldr	r2, [pc, #248]	; (405d10 <udd_ep_ack_out_received+0x130>)
  405c16:	79fb      	ldrb	r3, [r7, #7]
  405c18:	330c      	adds	r3, #12
  405c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  405c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  405c22:	2b00      	cmp	r3, #0
  405c24:	bf14      	ite	ne
  405c26:	2301      	movne	r3, #1
  405c28:	2300      	moveq	r3, #0
  405c2a:	74bb      	strb	r3, [r7, #18]

	if (bank0_received && bank1_received) {
  405c2c:	7cfb      	ldrb	r3, [r7, #19]
  405c2e:	2b00      	cmp	r3, #0
  405c30:	d002      	beq.n	405c38 <udd_ep_ack_out_received+0x58>
  405c32:	7cbb      	ldrb	r3, [r7, #18]
  405c34:	2b00      	cmp	r3, #0
  405c36:	d10e      	bne.n	405c56 <udd_ep_ack_out_received+0x76>
		// The only way is to use ptr_job->bank
	} else if (bank0_received) {
  405c38:	7cfb      	ldrb	r3, [r7, #19]
  405c3a:	2b00      	cmp	r3, #0
  405c3c:	d005      	beq.n	405c4a <udd_ep_ack_out_received+0x6a>
		// Must be bank0
		ptr_job->bank = 0;
  405c3e:	697a      	ldr	r2, [r7, #20]
  405c40:	7c53      	ldrb	r3, [r2, #17]
  405c42:	f36f 0383 	bfc	r3, #2, #2
  405c46:	7453      	strb	r3, [r2, #17]
  405c48:	e005      	b.n	405c56 <udd_ep_ack_out_received+0x76>
	} else {
		// Must be bank1
		ptr_job->bank = 1;
  405c4a:	697a      	ldr	r2, [r7, #20]
  405c4c:	7c53      	ldrb	r3, [r2, #17]
  405c4e:	2101      	movs	r1, #1
  405c50:	f361 0383 	bfi	r3, r1, #2, #2
  405c54:	7453      	strb	r3, [r2, #17]
	}
	if (ptr_job->bank == 0) {
  405c56:	697b      	ldr	r3, [r7, #20]
  405c58:	7c5b      	ldrb	r3, [r3, #17]
  405c5a:	f003 030c 	and.w	r3, r3, #12
  405c5e:	b2db      	uxtb	r3, r3
  405c60:	2b00      	cmp	r3, #0
  405c62:	d12a      	bne.n	405cba <udd_ep_ack_out_received+0xda>
		udd_ack_bank0_received(ep);
  405c64:	4a2a      	ldr	r2, [pc, #168]	; (405d10 <udd_ep_ack_out_received+0x130>)
  405c66:	79fb      	ldrb	r3, [r7, #7]
  405c68:	330c      	adds	r3, #12
  405c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  405c6e:	60fb      	str	r3, [r7, #12]
  405c70:	68fb      	ldr	r3, [r7, #12]
  405c72:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  405c76:	60fb      	str	r3, [r7, #12]
  405c78:	68fb      	ldr	r3, [r7, #12]
  405c7a:	f023 0302 	bic.w	r3, r3, #2
  405c7e:	60fb      	str	r3, [r7, #12]
  405c80:	4923      	ldr	r1, [pc, #140]	; (405d10 <udd_ep_ack_out_received+0x130>)
  405c82:	79fb      	ldrb	r3, [r7, #7]
  405c84:	68fa      	ldr	r2, [r7, #12]
  405c86:	330c      	adds	r3, #12
  405c88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  405c8c:	bf00      	nop
  405c8e:	4a20      	ldr	r2, [pc, #128]	; (405d10 <udd_ep_ack_out_received+0x130>)
  405c90:	79fb      	ldrb	r3, [r7, #7]
  405c92:	330c      	adds	r3, #12
  405c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  405c98:	f003 0302 	and.w	r3, r3, #2
  405c9c:	2b00      	cmp	r3, #0
  405c9e:	d1f6      	bne.n	405c8e <udd_ep_ack_out_received+0xae>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  405ca0:	79fb      	ldrb	r3, [r7, #7]
  405ca2:	2b00      	cmp	r3, #0
  405ca4:	d02c      	beq.n	405d00 <udd_ep_ack_out_received+0x120>
  405ca6:	79fb      	ldrb	r3, [r7, #7]
  405ca8:	2b03      	cmp	r3, #3
  405caa:	d029      	beq.n	405d00 <udd_ep_ack_out_received+0x120>
			ptr_job->bank = 1;
  405cac:	697a      	ldr	r2, [r7, #20]
  405cae:	7c53      	ldrb	r3, [r2, #17]
  405cb0:	2101      	movs	r1, #1
  405cb2:	f361 0383 	bfi	r3, r1, #2, #2
  405cb6:	7453      	strb	r3, [r2, #17]
		}
	} else {
		udd_ack_bank1_received(ep);
		ptr_job->bank = 0;
	}
}
  405cb8:	e022      	b.n	405d00 <udd_ep_ack_out_received+0x120>
		udd_ack_bank1_received(ep);
  405cba:	4a15      	ldr	r2, [pc, #84]	; (405d10 <udd_ep_ack_out_received+0x130>)
  405cbc:	79fb      	ldrb	r3, [r7, #7]
  405cbe:	330c      	adds	r3, #12
  405cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  405cc4:	60bb      	str	r3, [r7, #8]
  405cc6:	68bb      	ldr	r3, [r7, #8]
  405cc8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  405ccc:	60bb      	str	r3, [r7, #8]
  405cce:	68bb      	ldr	r3, [r7, #8]
  405cd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  405cd4:	60bb      	str	r3, [r7, #8]
  405cd6:	490e      	ldr	r1, [pc, #56]	; (405d10 <udd_ep_ack_out_received+0x130>)
  405cd8:	79fb      	ldrb	r3, [r7, #7]
  405cda:	68ba      	ldr	r2, [r7, #8]
  405cdc:	330c      	adds	r3, #12
  405cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  405ce2:	bf00      	nop
  405ce4:	4a0a      	ldr	r2, [pc, #40]	; (405d10 <udd_ep_ack_out_received+0x130>)
  405ce6:	79fb      	ldrb	r3, [r7, #7]
  405ce8:	330c      	adds	r3, #12
  405cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  405cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
  405cf2:	2b00      	cmp	r3, #0
  405cf4:	d1f6      	bne.n	405ce4 <udd_ep_ack_out_received+0x104>
		ptr_job->bank = 0;
  405cf6:	697a      	ldr	r2, [r7, #20]
  405cf8:	7c53      	ldrb	r3, [r2, #17]
  405cfa:	f36f 0383 	bfc	r3, #2, #2
  405cfe:	7453      	strb	r3, [r2, #17]
}
  405d00:	bf00      	nop
  405d02:	371c      	adds	r7, #28
  405d04:	46bd      	mov	sp, r7
  405d06:	bc80      	pop	{r7}
  405d08:	4770      	bx	lr
  405d0a:	bf00      	nop
  405d0c:	20001bd0 	.word	0x20001bd0
  405d10:	40034000 	.word	0x40034000

00405d14 <udd_ep_write_fifo>:


static bool udd_ep_write_fifo(udd_ep_id_t ep)
{
  405d14:	b480      	push	{r7}
  405d16:	b089      	sub	sp, #36	; 0x24
  405d18:	af00      	add	r7, sp, #0
  405d1a:	4603      	mov	r3, r0
  405d1c:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  405d1e:	79fb      	ldrb	r3, [r7, #7]
  405d20:	1e5a      	subs	r2, r3, #1
  405d22:	4613      	mov	r3, r2
  405d24:	009b      	lsls	r3, r3, #2
  405d26:	4413      	add	r3, r2
  405d28:	009b      	lsls	r3, r3, #2
  405d2a:	4a55      	ldr	r2, [pc, #340]	; (405e80 <udd_ep_write_fifo+0x16c>)
  405d2c:	4413      	add	r3, r2
  405d2e:	613b      	str	r3, [r7, #16]
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  405d30:	693b      	ldr	r3, [r7, #16]
  405d32:	685a      	ldr	r2, [r3, #4]
  405d34:	693b      	ldr	r3, [r7, #16]
  405d36:	68db      	ldr	r3, [r3, #12]
  405d38:	4413      	add	r3, r2
  405d3a:	61fb      	str	r3, [r7, #28]
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  405d3c:	693b      	ldr	r3, [r7, #16]
  405d3e:	689a      	ldr	r2, [r3, #8]
  405d40:	693b      	ldr	r3, [r7, #16]
  405d42:	68db      	ldr	r3, [r3, #12]
  405d44:	1ad3      	subs	r3, r2, r3
  405d46:	60fb      	str	r3, [r7, #12]
	uint32_t pkt_size = ptr_job->size;
  405d48:	693b      	ldr	r3, [r7, #16]
  405d4a:	8a1b      	ldrh	r3, [r3, #16]
  405d4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
  405d50:	b29b      	uxth	r3, r3
  405d52:	61bb      	str	r3, [r7, #24]
	bool is_short_pkt = false;
  405d54:	2300      	movs	r3, #0
  405d56:	75fb      	strb	r3, [r7, #23]

	// Packet size
	if (nb_remain < pkt_size) {
  405d58:	68fa      	ldr	r2, [r7, #12]
  405d5a:	69bb      	ldr	r3, [r7, #24]
  405d5c:	429a      	cmp	r2, r3
  405d5e:	d203      	bcs.n	405d68 <udd_ep_write_fifo+0x54>
		pkt_size = nb_remain;
  405d60:	68fb      	ldr	r3, [r7, #12]
  405d62:	61bb      	str	r3, [r7, #24]
		is_short_pkt = true;
  405d64:	2301      	movs	r3, #1
  405d66:	75fb      	strb	r3, [r7, #23]
	}

	// Modify job information
	ptr_job->buf_cnt += pkt_size;
  405d68:	693b      	ldr	r3, [r7, #16]
  405d6a:	68da      	ldr	r2, [r3, #12]
  405d6c:	69bb      	ldr	r3, [r7, #24]
  405d6e:	441a      	add	r2, r3
  405d70:	693b      	ldr	r3, [r7, #16]
  405d72:	60da      	str	r2, [r3, #12]

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  405d74:	e05a      	b.n	405e2c <udd_ep_write_fifo+0x118>
		udd_endpoint_fifo_write(ep, *ptr_src++);
  405d76:	4843      	ldr	r0, [pc, #268]	; (405e84 <udd_ep_write_fifo+0x170>)
  405d78:	79fa      	ldrb	r2, [r7, #7]
  405d7a:	69fb      	ldr	r3, [r7, #28]
  405d7c:	1c59      	adds	r1, r3, #1
  405d7e:	61f9      	str	r1, [r7, #28]
  405d80:	781b      	ldrb	r3, [r3, #0]
  405d82:	4619      	mov	r1, r3
  405d84:	f102 0314 	add.w	r3, r2, #20
  405d88:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  405d8c:	483d      	ldr	r0, [pc, #244]	; (405e84 <udd_ep_write_fifo+0x170>)
  405d8e:	79fa      	ldrb	r2, [r7, #7]
  405d90:	69fb      	ldr	r3, [r7, #28]
  405d92:	1c59      	adds	r1, r3, #1
  405d94:	61f9      	str	r1, [r7, #28]
  405d96:	781b      	ldrb	r3, [r3, #0]
  405d98:	4619      	mov	r1, r3
  405d9a:	f102 0314 	add.w	r3, r2, #20
  405d9e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  405da2:	4838      	ldr	r0, [pc, #224]	; (405e84 <udd_ep_write_fifo+0x170>)
  405da4:	79fa      	ldrb	r2, [r7, #7]
  405da6:	69fb      	ldr	r3, [r7, #28]
  405da8:	1c59      	adds	r1, r3, #1
  405daa:	61f9      	str	r1, [r7, #28]
  405dac:	781b      	ldrb	r3, [r3, #0]
  405dae:	4619      	mov	r1, r3
  405db0:	f102 0314 	add.w	r3, r2, #20
  405db4:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  405db8:	4832      	ldr	r0, [pc, #200]	; (405e84 <udd_ep_write_fifo+0x170>)
  405dba:	79fa      	ldrb	r2, [r7, #7]
  405dbc:	69fb      	ldr	r3, [r7, #28]
  405dbe:	1c59      	adds	r1, r3, #1
  405dc0:	61f9      	str	r1, [r7, #28]
  405dc2:	781b      	ldrb	r3, [r3, #0]
  405dc4:	4619      	mov	r1, r3
  405dc6:	f102 0314 	add.w	r3, r2, #20
  405dca:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  405dce:	482d      	ldr	r0, [pc, #180]	; (405e84 <udd_ep_write_fifo+0x170>)
  405dd0:	79fa      	ldrb	r2, [r7, #7]
  405dd2:	69fb      	ldr	r3, [r7, #28]
  405dd4:	1c59      	adds	r1, r3, #1
  405dd6:	61f9      	str	r1, [r7, #28]
  405dd8:	781b      	ldrb	r3, [r3, #0]
  405dda:	4619      	mov	r1, r3
  405ddc:	f102 0314 	add.w	r3, r2, #20
  405de0:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  405de4:	4827      	ldr	r0, [pc, #156]	; (405e84 <udd_ep_write_fifo+0x170>)
  405de6:	79fa      	ldrb	r2, [r7, #7]
  405de8:	69fb      	ldr	r3, [r7, #28]
  405dea:	1c59      	adds	r1, r3, #1
  405dec:	61f9      	str	r1, [r7, #28]
  405dee:	781b      	ldrb	r3, [r3, #0]
  405df0:	4619      	mov	r1, r3
  405df2:	f102 0314 	add.w	r3, r2, #20
  405df6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  405dfa:	4822      	ldr	r0, [pc, #136]	; (405e84 <udd_ep_write_fifo+0x170>)
  405dfc:	79fa      	ldrb	r2, [r7, #7]
  405dfe:	69fb      	ldr	r3, [r7, #28]
  405e00:	1c59      	adds	r1, r3, #1
  405e02:	61f9      	str	r1, [r7, #28]
  405e04:	781b      	ldrb	r3, [r3, #0]
  405e06:	4619      	mov	r1, r3
  405e08:	f102 0314 	add.w	r3, r2, #20
  405e0c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  405e10:	481c      	ldr	r0, [pc, #112]	; (405e84 <udd_ep_write_fifo+0x170>)
  405e12:	79fa      	ldrb	r2, [r7, #7]
  405e14:	69fb      	ldr	r3, [r7, #28]
  405e16:	1c59      	adds	r1, r3, #1
  405e18:	61f9      	str	r1, [r7, #28]
  405e1a:	781b      	ldrb	r3, [r3, #0]
  405e1c:	4619      	mov	r1, r3
  405e1e:	f102 0314 	add.w	r3, r2, #20
  405e22:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	for (; pkt_size >= 8; pkt_size -= 8) {
  405e26:	69bb      	ldr	r3, [r7, #24]
  405e28:	3b08      	subs	r3, #8
  405e2a:	61bb      	str	r3, [r7, #24]
  405e2c:	69bb      	ldr	r3, [r7, #24]
  405e2e:	2b07      	cmp	r3, #7
  405e30:	d8a1      	bhi.n	405d76 <udd_ep_write_fifo+0x62>
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  405e32:	e00d      	b.n	405e50 <udd_ep_write_fifo+0x13c>
		udd_endpoint_fifo_write(ep, *ptr_src++);
  405e34:	4813      	ldr	r0, [pc, #76]	; (405e84 <udd_ep_write_fifo+0x170>)
  405e36:	79fa      	ldrb	r2, [r7, #7]
  405e38:	69fb      	ldr	r3, [r7, #28]
  405e3a:	1c59      	adds	r1, r3, #1
  405e3c:	61f9      	str	r1, [r7, #28]
  405e3e:	781b      	ldrb	r3, [r3, #0]
  405e40:	4619      	mov	r1, r3
  405e42:	f102 0314 	add.w	r3, r2, #20
  405e46:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	for (; pkt_size; pkt_size--) {
  405e4a:	69bb      	ldr	r3, [r7, #24]
  405e4c:	3b01      	subs	r3, #1
  405e4e:	61bb      	str	r3, [r7, #24]
  405e50:	69bb      	ldr	r3, [r7, #24]
  405e52:	2b00      	cmp	r3, #0
  405e54:	d1ee      	bne.n	405e34 <udd_ep_write_fifo+0x120>
	}

	// Add to buffered banks
	ptr_job->bank++;
  405e56:	693b      	ldr	r3, [r7, #16]
  405e58:	7c5b      	ldrb	r3, [r3, #17]
  405e5a:	f3c3 0381 	ubfx	r3, r3, #2, #2
  405e5e:	b2db      	uxtb	r3, r3
  405e60:	3301      	adds	r3, #1
  405e62:	f003 0303 	and.w	r3, r3, #3
  405e66:	b2d9      	uxtb	r1, r3
  405e68:	693a      	ldr	r2, [r7, #16]
  405e6a:	7c53      	ldrb	r3, [r2, #17]
  405e6c:	f361 0383 	bfi	r3, r1, #2, #2
  405e70:	7453      	strb	r3, [r2, #17]
	return is_short_pkt;
  405e72:	7dfb      	ldrb	r3, [r7, #23]
}
  405e74:	4618      	mov	r0, r3
  405e76:	3724      	adds	r7, #36	; 0x24
  405e78:	46bd      	mov	sp, r7
  405e7a:	bc80      	pop	{r7}
  405e7c:	4770      	bx	lr
  405e7e:	bf00      	nop
  405e80:	20001bd0 	.word	0x20001bd0
  405e84:	40034000 	.word	0x40034000

00405e88 <udd_ep_in_sent>:


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
  405e88:	b580      	push	{r7, lr}
  405e8a:	b086      	sub	sp, #24
  405e8c:	af00      	add	r7, sp, #0
  405e8e:	4603      	mov	r3, r0
  405e90:	460a      	mov	r2, r1
  405e92:	71fb      	strb	r3, [r7, #7]
  405e94:	4613      	mov	r3, r2
  405e96:	71bb      	strb	r3, [r7, #6]
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  405e98:	79fb      	ldrb	r3, [r7, #7]
  405e9a:	1e5a      	subs	r2, r3, #1
  405e9c:	4613      	mov	r3, r2
  405e9e:	009b      	lsls	r3, r3, #2
  405ea0:	4413      	add	r3, r2
  405ea2:	009b      	lsls	r3, r3, #2
  405ea4:	4a36      	ldr	r2, [pc, #216]	; (405f80 <udd_ep_in_sent+0xf8>)
  405ea6:	4413      	add	r3, r2
  405ea8:	617b      	str	r3, [r7, #20]

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  405eaa:	697b      	ldr	r3, [r7, #20]
  405eac:	7c5b      	ldrb	r3, [r3, #17]
  405eae:	f3c3 0381 	ubfx	r3, r3, #2, #2
  405eb2:	b2db      	uxtb	r3, r3
  405eb4:	461a      	mov	r2, r3
  405eb6:	79fb      	ldrb	r3, [r7, #7]
  405eb8:	2b00      	cmp	r3, #0
  405eba:	d002      	beq.n	405ec2 <udd_ep_in_sent+0x3a>
  405ebc:	79fb      	ldrb	r3, [r7, #7]
  405ebe:	2b03      	cmp	r3, #3
  405ec0:	d101      	bne.n	405ec6 <udd_ep_in_sent+0x3e>
  405ec2:	2301      	movs	r3, #1
  405ec4:	e000      	b.n	405ec8 <udd_ep_in_sent+0x40>
  405ec6:	2302      	movs	r3, #2
  405ec8:	429a      	cmp	r2, r3
  405eca:	db01      	blt.n	405ed0 <udd_ep_in_sent+0x48>
		return true; // Data pending
  405ecc:	2301      	movs	r3, #1
  405ece:	e052      	b.n	405f76 <udd_ep_in_sent+0xee>
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
  405ed0:	697b      	ldr	r3, [r7, #20]
  405ed2:	68da      	ldr	r2, [r3, #12]
  405ed4:	697b      	ldr	r3, [r7, #20]
  405ed6:	689b      	ldr	r3, [r3, #8]
  405ed8:	429a      	cmp	r2, r3
  405eda:	d308      	bcc.n	405eee <udd_ep_in_sent+0x66>
  405edc:	697b      	ldr	r3, [r7, #20]
  405ede:	7c5b      	ldrb	r3, [r3, #17]
  405ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  405ee4:	b2db      	uxtb	r3, r3
  405ee6:	2b00      	cmp	r3, #0
  405ee8:	d101      	bne.n	405eee <udd_ep_in_sent+0x66>
		return false;
  405eea:	2300      	movs	r3, #0
  405eec:	e043      	b.n	405f76 <udd_ep_in_sent+0xee>
	}

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);
  405eee:	79fb      	ldrb	r3, [r7, #7]
  405ef0:	4618      	mov	r0, r3
  405ef2:	4b24      	ldr	r3, [pc, #144]	; (405f84 <udd_ep_in_sent+0xfc>)
  405ef4:	4798      	blx	r3
  405ef6:	4603      	mov	r3, r0
  405ef8:	74fb      	strb	r3, [r7, #19]

	// Data is ready to send
	if (b_tx) {
  405efa:	79bb      	ldrb	r3, [r7, #6]
  405efc:	2b00      	cmp	r3, #0
  405efe:	d01d      	beq.n	405f3c <udd_ep_in_sent+0xb4>
		udd_set_transmit_ready(ep);
  405f00:	4a21      	ldr	r2, [pc, #132]	; (405f88 <udd_ep_in_sent+0x100>)
  405f02:	79fb      	ldrb	r3, [r7, #7]
  405f04:	330c      	adds	r3, #12
  405f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  405f0a:	60fb      	str	r3, [r7, #12]
  405f0c:	68fb      	ldr	r3, [r7, #12]
  405f0e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  405f12:	60fb      	str	r3, [r7, #12]
  405f14:	68fb      	ldr	r3, [r7, #12]
  405f16:	f043 0310 	orr.w	r3, r3, #16
  405f1a:	60fb      	str	r3, [r7, #12]
  405f1c:	491a      	ldr	r1, [pc, #104]	; (405f88 <udd_ep_in_sent+0x100>)
  405f1e:	79fb      	ldrb	r3, [r7, #7]
  405f20:	68fa      	ldr	r2, [r7, #12]
  405f22:	330c      	adds	r3, #12
  405f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  405f28:	bf00      	nop
  405f2a:	4a17      	ldr	r2, [pc, #92]	; (405f88 <udd_ep_in_sent+0x100>)
  405f2c:	79fb      	ldrb	r3, [r7, #7]
  405f2e:	330c      	adds	r3, #12
  405f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  405f34:	f003 0310 	and.w	r3, r3, #16
  405f38:	2b10      	cmp	r3, #16
  405f3a:	d1f6      	bne.n	405f2a <udd_ep_in_sent+0xa2>
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
  405f3c:	7cfb      	ldrb	r3, [r7, #19]
  405f3e:	2b00      	cmp	r3, #0
  405f40:	d004      	beq.n	405f4c <udd_ep_in_sent+0xc4>
		ptr_job->b_shortpacket = false;
  405f42:	697a      	ldr	r2, [r7, #20]
  405f44:	7c53      	ldrb	r3, [r2, #17]
  405f46:	f36f 1386 	bfc	r3, #6, #1
  405f4a:	7453      	strb	r3, [r2, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
  405f4c:	697b      	ldr	r3, [r7, #20]
  405f4e:	68da      	ldr	r2, [r3, #12]
  405f50:	697b      	ldr	r3, [r7, #20]
  405f52:	689b      	ldr	r3, [r3, #8]
  405f54:	429a      	cmp	r2, r3
  405f56:	d30d      	bcc.n	405f74 <udd_ep_in_sent+0xec>
			&& (!ptr_job->b_shortpacket)) {
  405f58:	697b      	ldr	r3, [r7, #20]
  405f5a:	7c5b      	ldrb	r3, [r3, #17]
  405f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  405f60:	b2db      	uxtb	r3, r3
  405f62:	2b00      	cmp	r3, #0
  405f64:	d106      	bne.n	405f74 <udd_ep_in_sent+0xec>
		ptr_job->b_buf_end = true;
  405f66:	697a      	ldr	r2, [r7, #20]
  405f68:	7c53      	ldrb	r3, [r2, #17]
  405f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405f6e:	7453      	strb	r3, [r2, #17]
		return false;
  405f70:	2300      	movs	r3, #0
  405f72:	e000      	b.n	405f76 <udd_ep_in_sent+0xee>
	}
	return true; // Pending
  405f74:	2301      	movs	r3, #1
}
  405f76:	4618      	mov	r0, r3
  405f78:	3718      	adds	r7, #24
  405f7a:	46bd      	mov	sp, r7
  405f7c:	bd80      	pop	{r7, pc}
  405f7e:	bf00      	nop
  405f80:	20001bd0 	.word	0x20001bd0
  405f84:	00405d15 	.word	0x00405d15
  405f88:	40034000 	.word	0x40034000

00405f8c <udd_ep_out_received>:


static void udd_ep_out_received(udd_ep_id_t ep)
{
  405f8c:	b580      	push	{r7, lr}
  405f8e:	b08a      	sub	sp, #40	; 0x28
  405f90:	af00      	add	r7, sp, #0
  405f92:	4603      	mov	r3, r0
  405f94:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  405f96:	79fb      	ldrb	r3, [r7, #7]
  405f98:	1e5a      	subs	r2, r3, #1
  405f9a:	4613      	mov	r3, r2
  405f9c:	009b      	lsls	r3, r3, #2
  405f9e:	4413      	add	r3, r2
  405fa0:	009b      	lsls	r3, r3, #2
  405fa2:	4a3a      	ldr	r2, [pc, #232]	; (40608c <udd_ep_out_received+0x100>)
  405fa4:	4413      	add	r3, r2
  405fa6:	617b      	str	r3, [r7, #20]
	uint32_t nb_data = 0, i;
  405fa8:	2300      	movs	r3, #0
  405faa:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  405fac:	697b      	ldr	r3, [r7, #20]
  405fae:	689a      	ldr	r2, [r3, #8]
  405fb0:	697b      	ldr	r3, [r7, #20]
  405fb2:	68db      	ldr	r3, [r3, #12]
  405fb4:	1ad3      	subs	r3, r2, r3
  405fb6:	613b      	str	r3, [r7, #16]
	uint32_t pkt_size = ptr_job->size;
  405fb8:	697b      	ldr	r3, [r7, #20]
  405fba:	8a1b      	ldrh	r3, [r3, #16]
  405fbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
  405fc0:	b29b      	uxth	r3, r3
  405fc2:	60fb      	str	r3, [r7, #12]
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  405fc4:	697b      	ldr	r3, [r7, #20]
  405fc6:	685a      	ldr	r2, [r3, #4]
  405fc8:	697b      	ldr	r3, [r7, #20]
  405fca:	68db      	ldr	r3, [r3, #12]
  405fcc:	4413      	add	r3, r2
  405fce:	61fb      	str	r3, [r7, #28]
	bool b_full = false, b_short;
  405fd0:	2300      	movs	r3, #0
  405fd2:	76fb      	strb	r3, [r7, #27]

	// Read byte count
	nb_data = udd_byte_count(ep);
  405fd4:	4a2e      	ldr	r2, [pc, #184]	; (406090 <udd_ep_out_received+0x104>)
  405fd6:	79fb      	ldrb	r3, [r7, #7]
  405fd8:	330c      	adds	r3, #12
  405fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  405fde:	0c1b      	lsrs	r3, r3, #16
  405fe0:	f3c3 030a 	ubfx	r3, r3, #0, #11
  405fe4:	627b      	str	r3, [r7, #36]	; 0x24
	b_short = (nb_data < pkt_size);
  405fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  405fe8:	68fb      	ldr	r3, [r7, #12]
  405fea:	429a      	cmp	r2, r3
  405fec:	bf34      	ite	cc
  405fee:	2301      	movcc	r3, #1
  405ff0:	2300      	movcs	r3, #0
  405ff2:	72fb      	strb	r3, [r7, #11]

	// Copy data if there is
	if (nb_data > 0) {
  405ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405ff6:	2b00      	cmp	r3, #0
  405ff8:	d021      	beq.n	40603e <udd_ep_out_received+0xb2>
		if (nb_data >= nb_remain) {
  405ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  405ffc:	693b      	ldr	r3, [r7, #16]
  405ffe:	429a      	cmp	r2, r3
  406000:	d303      	bcc.n	40600a <udd_ep_out_received+0x7e>
			nb_data = nb_remain;
  406002:	693b      	ldr	r3, [r7, #16]
  406004:	627b      	str	r3, [r7, #36]	; 0x24
			b_full = true;
  406006:	2301      	movs	r3, #1
  406008:	76fb      	strb	r3, [r7, #27]
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;
  40600a:	697b      	ldr	r3, [r7, #20]
  40600c:	68da      	ldr	r2, [r3, #12]
  40600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  406010:	441a      	add	r2, r3
  406012:	697b      	ldr	r3, [r7, #20]
  406014:	60da      	str	r2, [r3, #12]

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  406016:	2300      	movs	r3, #0
  406018:	623b      	str	r3, [r7, #32]
  40601a:	e00c      	b.n	406036 <udd_ep_out_received+0xaa>
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  40601c:	69fb      	ldr	r3, [r7, #28]
  40601e:	1c5a      	adds	r2, r3, #1
  406020:	61fa      	str	r2, [r7, #28]
  406022:	491b      	ldr	r1, [pc, #108]	; (406090 <udd_ep_out_received+0x104>)
  406024:	79fa      	ldrb	r2, [r7, #7]
  406026:	3214      	adds	r2, #20
  406028:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  40602c:	b2d2      	uxtb	r2, r2
  40602e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < nb_data; i++) {
  406030:	6a3b      	ldr	r3, [r7, #32]
  406032:	3301      	adds	r3, #1
  406034:	623b      	str	r3, [r7, #32]
  406036:	6a3a      	ldr	r2, [r7, #32]
  406038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40603a:	429a      	cmp	r2, r3
  40603c:	d3ee      	bcc.n	40601c <udd_ep_out_received+0x90>
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  40603e:	79fb      	ldrb	r3, [r7, #7]
  406040:	4618      	mov	r0, r3
  406042:	4b14      	ldr	r3, [pc, #80]	; (406094 <udd_ep_out_received+0x108>)
  406044:	4798      	blx	r3
	// Finish job on error or short packet
	if ((b_full || b_short) &&
  406046:	7efb      	ldrb	r3, [r7, #27]
  406048:	2b00      	cmp	r3, #0
  40604a:	d102      	bne.n	406052 <udd_ep_out_received+0xc6>
  40604c:	7afb      	ldrb	r3, [r7, #11]
  40604e:	2b00      	cmp	r3, #0
  406050:	d018      	beq.n	406084 <udd_ep_out_received+0xf8>
			!Is_udd_endpoint_stall_requested(ep)) {
  406052:	4a0f      	ldr	r2, [pc, #60]	; (406090 <udd_ep_out_received+0x104>)
  406054:	79fb      	ldrb	r3, [r7, #7]
  406056:	330c      	adds	r3, #12
  406058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40605c:	f003 0320 	and.w	r3, r3, #32
	if ((b_full || b_short) &&
  406060:	2b00      	cmp	r3, #0
  406062:	d10f      	bne.n	406084 <udd_ep_out_received+0xf8>
		udd_disable_endpoint_interrupt(ep);
  406064:	4a0a      	ldr	r2, [pc, #40]	; (406090 <udd_ep_out_received+0x104>)
  406066:	79fb      	ldrb	r3, [r7, #7]
  406068:	2101      	movs	r1, #1
  40606a:	fa01 f303 	lsl.w	r3, r1, r3
  40606e:	6153      	str	r3, [r2, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  406070:	697b      	ldr	r3, [r7, #20]
  406072:	68da      	ldr	r2, [r3, #12]
  406074:	697b      	ldr	r3, [r7, #20]
  406076:	609a      	str	r2, [r3, #8]
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  406078:	79fb      	ldrb	r3, [r7, #7]
  40607a:	461a      	mov	r2, r3
  40607c:	2100      	movs	r1, #0
  40607e:	6978      	ldr	r0, [r7, #20]
  406080:	4b05      	ldr	r3, [pc, #20]	; (406098 <udd_ep_out_received+0x10c>)
  406082:	4798      	blx	r3
	}
}
  406084:	bf00      	nop
  406086:	3728      	adds	r7, #40	; 0x28
  406088:	46bd      	mov	sp, r7
  40608a:	bd80      	pop	{r7, pc}
  40608c:	20001bd0 	.word	0x20001bd0
  406090:	40034000 	.word	0x40034000
  406094:	00405be1 	.word	0x00405be1
  406098:	00405b6d 	.word	0x00405b6d

0040609c <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
  40609c:	b580      	push	{r7, lr}
  40609e:	b08e      	sub	sp, #56	; 0x38
  4060a0:	af00      	add	r7, sp, #0
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  4060a2:	2301      	movs	r3, #1
  4060a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  4060a8:	e260      	b.n	40656c <udd_ep_interrupt+0x4d0>
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  4060aa:	4b9e      	ldr	r3, [pc, #632]	; (406324 <udd_ep_interrupt+0x288>)
  4060ac:	699a      	ldr	r2, [r3, #24]
  4060ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4060b2:	2101      	movs	r1, #1
  4060b4:	fa01 f303 	lsl.w	r3, r1, r3
  4060b8:	4013      	ands	r3, r2
  4060ba:	2b00      	cmp	r3, #0
  4060bc:	f000 8250 	beq.w	406560 <udd_ep_interrupt+0x4c4>
			continue;
		}

		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
  4060c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4060c4:	1e5a      	subs	r2, r3, #1
  4060c6:	4613      	mov	r3, r2
  4060c8:	009b      	lsls	r3, r3, #2
  4060ca:	4413      	add	r3, r2
  4060cc:	009b      	lsls	r3, r3, #2
  4060ce:	4a96      	ldr	r2, [pc, #600]	; (406328 <udd_ep_interrupt+0x28c>)
  4060d0:	4413      	add	r3, r2
  4060d2:	633b      	str	r3, [r7, #48]	; 0x30

		// RXOUT: Full packet received
		if (Is_udd_any_bank_received(ep)) {
  4060d4:	4a93      	ldr	r2, [pc, #588]	; (406324 <udd_ep_interrupt+0x288>)
  4060d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4060da:	330c      	adds	r3, #12
  4060dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4060e0:	f003 0342 	and.w	r3, r3, #66	; 0x42
  4060e4:	2b00      	cmp	r3, #0
  4060e6:	d006      	beq.n	4060f6 <udd_ep_interrupt+0x5a>
			udd_ep_out_received(ep);
  4060e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4060ec:	4618      	mov	r0, r3
  4060ee:	4b8f      	ldr	r3, [pc, #572]	; (40632c <udd_ep_interrupt+0x290>)
  4060f0:	4798      	blx	r3
			return true;
  4060f2:	2301      	movs	r3, #1
  4060f4:	e240      	b.n	406578 <udd_ep_interrupt+0x4dc>
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {
  4060f6:	4a8b      	ldr	r2, [pc, #556]	; (406324 <udd_ep_interrupt+0x288>)
  4060f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4060fc:	330c      	adds	r3, #12
  4060fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  406102:	f003 0301 	and.w	r3, r3, #1
  406106:	2b00      	cmp	r3, #0
  406108:	f000 81ec 	beq.w	4064e4 <udd_ep_interrupt+0x448>

			ptr_job->bank--;
  40610c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40610e:	7c5b      	ldrb	r3, [r3, #17]
  406110:	f3c3 0381 	ubfx	r3, r3, #2, #2
  406114:	b2db      	uxtb	r3, r3
  406116:	3303      	adds	r3, #3
  406118:	f003 0303 	and.w	r3, r3, #3
  40611c:	b2d9      	uxtb	r1, r3
  40611e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  406120:	7c53      	ldrb	r3, [r2, #17]
  406122:	f361 0383 	bfi	r3, r1, #2, #2
  406126:	7453      	strb	r3, [r2, #17]
			// Stall when all banks free
			if (ptr_job->b_stall_requested) {
  406128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40612a:	7c5b      	ldrb	r3, [r3, #17]
  40612c:	f003 0320 	and.w	r3, r3, #32
  406130:	b2db      	uxtb	r3, r3
  406132:	2b00      	cmp	r3, #0
  406134:	f000 8093 	beq.w	40625e <udd_ep_interrupt+0x1c2>
				if (ptr_job->bank) {
  406138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40613a:	7c5b      	ldrb	r3, [r3, #17]
  40613c:	f003 030c 	and.w	r3, r3, #12
  406140:	b2db      	uxtb	r3, r3
  406142:	2b00      	cmp	r3, #0
  406144:	d042      	beq.n	4061cc <udd_ep_interrupt+0x130>
					// Send remaining
					udd_set_transmit_ready(ep);
  406146:	4a77      	ldr	r2, [pc, #476]	; (406324 <udd_ep_interrupt+0x288>)
  406148:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  40614c:	330c      	adds	r3, #12
  40614e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  406152:	62bb      	str	r3, [r7, #40]	; 0x28
  406154:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406156:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40615a:	62bb      	str	r3, [r7, #40]	; 0x28
  40615c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40615e:	f043 0310 	orr.w	r3, r3, #16
  406162:	62bb      	str	r3, [r7, #40]	; 0x28
  406164:	496f      	ldr	r1, [pc, #444]	; (406324 <udd_ep_interrupt+0x288>)
  406166:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  40616a:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40616c:	330c      	adds	r3, #12
  40616e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  406172:	bf00      	nop
  406174:	4a6b      	ldr	r2, [pc, #428]	; (406324 <udd_ep_interrupt+0x288>)
  406176:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  40617a:	330c      	adds	r3, #12
  40617c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  406180:	f003 0310 	and.w	r3, r3, #16
  406184:	2b10      	cmp	r3, #16
  406186:	d1f5      	bne.n	406174 <udd_ep_interrupt+0xd8>
					udd_ack_in_sent(ep);
  406188:	4a66      	ldr	r2, [pc, #408]	; (406324 <udd_ep_interrupt+0x288>)
  40618a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  40618e:	330c      	adds	r3, #12
  406190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  406194:	627b      	str	r3, [r7, #36]	; 0x24
  406196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  406198:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40619c:	627b      	str	r3, [r7, #36]	; 0x24
  40619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4061a0:	f023 0301 	bic.w	r3, r3, #1
  4061a4:	627b      	str	r3, [r7, #36]	; 0x24
  4061a6:	495f      	ldr	r1, [pc, #380]	; (406324 <udd_ep_interrupt+0x288>)
  4061a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4061ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  4061ae:	330c      	adds	r3, #12
  4061b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  4061b4:	bf00      	nop
  4061b6:	4a5b      	ldr	r2, [pc, #364]	; (406324 <udd_ep_interrupt+0x288>)
  4061b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4061bc:	330c      	adds	r3, #12
  4061be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4061c2:	f003 0301 	and.w	r3, r3, #1
  4061c6:	2b00      	cmp	r3, #0
  4061c8:	d1f5      	bne.n	4061b6 <udd_ep_interrupt+0x11a>
  4061ca:	e046      	b.n	40625a <udd_ep_interrupt+0x1be>
				} else {
					// Ack last packet
					udd_ack_in_sent(ep);
  4061cc:	4a55      	ldr	r2, [pc, #340]	; (406324 <udd_ep_interrupt+0x288>)
  4061ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4061d2:	330c      	adds	r3, #12
  4061d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4061d8:	623b      	str	r3, [r7, #32]
  4061da:	6a3b      	ldr	r3, [r7, #32]
  4061dc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4061e0:	623b      	str	r3, [r7, #32]
  4061e2:	6a3b      	ldr	r3, [r7, #32]
  4061e4:	f023 0301 	bic.w	r3, r3, #1
  4061e8:	623b      	str	r3, [r7, #32]
  4061ea:	494e      	ldr	r1, [pc, #312]	; (406324 <udd_ep_interrupt+0x288>)
  4061ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4061f0:	6a3a      	ldr	r2, [r7, #32]
  4061f2:	330c      	adds	r3, #12
  4061f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  4061f8:	bf00      	nop
  4061fa:	4a4a      	ldr	r2, [pc, #296]	; (406324 <udd_ep_interrupt+0x288>)
  4061fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  406200:	330c      	adds	r3, #12
  406202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  406206:	f003 0301 	and.w	r3, r3, #1
  40620a:	2b00      	cmp	r3, #0
  40620c:	d1f5      	bne.n	4061fa <udd_ep_interrupt+0x15e>
					// Enable stall
					udd_enable_stall_handshake(ep);
  40620e:	4a45      	ldr	r2, [pc, #276]	; (406324 <udd_ep_interrupt+0x288>)
  406210:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  406214:	330c      	adds	r3, #12
  406216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40621a:	61fb      	str	r3, [r7, #28]
  40621c:	69fb      	ldr	r3, [r7, #28]
  40621e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  406222:	61fb      	str	r3, [r7, #28]
  406224:	69fb      	ldr	r3, [r7, #28]
  406226:	f043 0320 	orr.w	r3, r3, #32
  40622a:	61fb      	str	r3, [r7, #28]
  40622c:	493d      	ldr	r1, [pc, #244]	; (406324 <udd_ep_interrupt+0x288>)
  40622e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  406232:	69fa      	ldr	r2, [r7, #28]
  406234:	330c      	adds	r3, #12
  406236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  40623a:	bf00      	nop
  40623c:	4a39      	ldr	r2, [pc, #228]	; (406324 <udd_ep_interrupt+0x288>)
  40623e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  406242:	330c      	adds	r3, #12
  406244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  406248:	f003 0320 	and.w	r3, r3, #32
  40624c:	2b20      	cmp	r3, #32
  40624e:	d1f5      	bne.n	40623c <udd_ep_interrupt+0x1a0>
					// Halt executed
					ptr_job->b_stall_requested = false;
  406250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  406252:	7c53      	ldrb	r3, [r2, #17]
  406254:	f36f 1345 	bfc	r3, #5, #1
  406258:	7453      	strb	r3, [r2, #17]
				}
				return true;
  40625a:	2301      	movs	r3, #1
  40625c:	e18c      	b.n	406578 <udd_ep_interrupt+0x4dc>
			}
			// Finish Job when buffer end
			if (ptr_job->b_buf_end) {
  40625e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  406260:	7c5b      	ldrb	r3, [r3, #17]
  406262:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  406266:	b2db      	uxtb	r3, r3
  406268:	2b00      	cmp	r3, #0
  40626a:	d016      	beq.n	40629a <udd_ep_interrupt+0x1fe>
				ptr_job->b_buf_end = false;
  40626c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  40626e:	7c53      	ldrb	r3, [r2, #17]
  406270:	f36f 13c7 	bfc	r3, #7, #1
  406274:	7453      	strb	r3, [r2, #17]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  406276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  406278:	68da      	ldr	r2, [r3, #12]
  40627a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40627c:	609a      	str	r2, [r3, #8]
                udd_disable_endpoint_interrupt(ep);
  40627e:	4a29      	ldr	r2, [pc, #164]	; (406324 <udd_ep_interrupt+0x288>)
  406280:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  406284:	2101      	movs	r1, #1
  406286:	fa01 f303 	lsl.w	r3, r1, r3
  40628a:	6153      	str	r3, [r2, #20]
                udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  40628c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  406290:	461a      	mov	r2, r3
  406292:	2100      	movs	r1, #0
  406294:	6b38      	ldr	r0, [r7, #48]	; 0x30
  406296:	4b26      	ldr	r3, [pc, #152]	; (406330 <udd_ep_interrupt+0x294>)
  406298:	4798      	blx	r3
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  40629a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40629c:	68da      	ldr	r2, [r3, #12]
  40629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4062a0:	689b      	ldr	r3, [r3, #8]
  4062a2:	429a      	cmp	r2, r3
  4062a4:	d34a      	bcc.n	40633c <udd_ep_interrupt+0x2a0>
					!ptr_job->b_shortpacket &&
  4062a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4062a8:	7c5b      	ldrb	r3, [r3, #17]
  4062aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4062ae:	b2db      	uxtb	r3, r3
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  4062b0:	2b00      	cmp	r3, #0
  4062b2:	d143      	bne.n	40633c <udd_ep_interrupt+0x2a0>
					ptr_job->bank == 0) {
  4062b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4062b6:	7c5b      	ldrb	r3, [r3, #17]
  4062b8:	f003 030c 	and.w	r3, r3, #12
  4062bc:	b2db      	uxtb	r3, r3
					!ptr_job->b_shortpacket &&
  4062be:	2b00      	cmp	r3, #0
  4062c0:	d13c      	bne.n	40633c <udd_ep_interrupt+0x2a0>
				// All transfer done, including ZLP
				irqflags_t flags = cpu_irq_save();
  4062c2:	4b1c      	ldr	r3, [pc, #112]	; (406334 <udd_ep_interrupt+0x298>)
  4062c4:	4798      	blx	r3
  4062c6:	62f8      	str	r0, [r7, #44]	; 0x2c
				udd_disable_endpoint_interrupt(ep);
  4062c8:	4a16      	ldr	r2, [pc, #88]	; (406324 <udd_ep_interrupt+0x288>)
  4062ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4062ce:	2101      	movs	r1, #1
  4062d0:	fa01 f303 	lsl.w	r3, r1, r3
  4062d4:	6153      	str	r3, [r2, #20]
				cpu_irq_restore(flags);
  4062d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  4062d8:	4b17      	ldr	r3, [pc, #92]	; (406338 <udd_ep_interrupt+0x29c>)
  4062da:	4798      	blx	r3
				// Ack last packet
				udd_ack_in_sent(ep);
  4062dc:	4a11      	ldr	r2, [pc, #68]	; (406324 <udd_ep_interrupt+0x288>)
  4062de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4062e2:	330c      	adds	r3, #12
  4062e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4062e8:	61bb      	str	r3, [r7, #24]
  4062ea:	69bb      	ldr	r3, [r7, #24]
  4062ec:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4062f0:	61bb      	str	r3, [r7, #24]
  4062f2:	69bb      	ldr	r3, [r7, #24]
  4062f4:	f023 0301 	bic.w	r3, r3, #1
  4062f8:	61bb      	str	r3, [r7, #24]
  4062fa:	490a      	ldr	r1, [pc, #40]	; (406324 <udd_ep_interrupt+0x288>)
  4062fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  406300:	69ba      	ldr	r2, [r7, #24]
  406302:	330c      	adds	r3, #12
  406304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  406308:	bf00      	nop
  40630a:	4a06      	ldr	r2, [pc, #24]	; (406324 <udd_ep_interrupt+0x288>)
  40630c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  406310:	330c      	adds	r3, #12
  406312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  406316:	f003 0301 	and.w	r3, r3, #1
  40631a:	2b00      	cmp	r3, #0
  40631c:	d1f5      	bne.n	40630a <udd_ep_interrupt+0x26e>
				return true;
  40631e:	2301      	movs	r3, #1
  406320:	e12a      	b.n	406578 <udd_ep_interrupt+0x4dc>
  406322:	bf00      	nop
  406324:	40034000 	.word	0x40034000
  406328:	20001bd0 	.word	0x20001bd0
  40632c:	00405f8d 	.word	0x00405f8d
  406330:	00405b6d 	.word	0x00405b6d
  406334:	0040447d 	.word	0x0040447d
  406338:	004044d5 	.word	0x004044d5
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
  40633c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  406340:	2b00      	cmp	r3, #0
  406342:	d053      	beq.n	4063ec <udd_ep_interrupt+0x350>
  406344:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  406348:	2b03      	cmp	r3, #3
  40634a:	d04f      	beq.n	4063ec <udd_ep_interrupt+0x350>
					&& ptr_job->bank > 0) {
  40634c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40634e:	7c5b      	ldrb	r3, [r3, #17]
  406350:	f3c3 0381 	ubfx	r3, r3, #2, #2
  406354:	b2db      	uxtb	r3, r3
  406356:	2b00      	cmp	r3, #0
  406358:	dd48      	ble.n	4063ec <udd_ep_interrupt+0x350>
				// Already banks buffered, transmit while loading
				udd_set_transmit_ready(ep);
  40635a:	4a89      	ldr	r2, [pc, #548]	; (406580 <udd_ep_interrupt+0x4e4>)
  40635c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  406360:	330c      	adds	r3, #12
  406362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  406366:	617b      	str	r3, [r7, #20]
  406368:	697b      	ldr	r3, [r7, #20]
  40636a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40636e:	617b      	str	r3, [r7, #20]
  406370:	697b      	ldr	r3, [r7, #20]
  406372:	f043 0310 	orr.w	r3, r3, #16
  406376:	617b      	str	r3, [r7, #20]
  406378:	4981      	ldr	r1, [pc, #516]	; (406580 <udd_ep_interrupt+0x4e4>)
  40637a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  40637e:	697a      	ldr	r2, [r7, #20]
  406380:	330c      	adds	r3, #12
  406382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  406386:	bf00      	nop
  406388:	4a7d      	ldr	r2, [pc, #500]	; (406580 <udd_ep_interrupt+0x4e4>)
  40638a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  40638e:	330c      	adds	r3, #12
  406390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  406394:	f003 0310 	and.w	r3, r3, #16
  406398:	2b10      	cmp	r3, #16
  40639a:	d1f5      	bne.n	406388 <udd_ep_interrupt+0x2ec>
				udd_ack_in_sent(ep);
  40639c:	4a78      	ldr	r2, [pc, #480]	; (406580 <udd_ep_interrupt+0x4e4>)
  40639e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4063a2:	330c      	adds	r3, #12
  4063a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4063a8:	613b      	str	r3, [r7, #16]
  4063aa:	693b      	ldr	r3, [r7, #16]
  4063ac:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4063b0:	613b      	str	r3, [r7, #16]
  4063b2:	693b      	ldr	r3, [r7, #16]
  4063b4:	f023 0301 	bic.w	r3, r3, #1
  4063b8:	613b      	str	r3, [r7, #16]
  4063ba:	4971      	ldr	r1, [pc, #452]	; (406580 <udd_ep_interrupt+0x4e4>)
  4063bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4063c0:	693a      	ldr	r2, [r7, #16]
  4063c2:	330c      	adds	r3, #12
  4063c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  4063c8:	bf00      	nop
  4063ca:	4a6d      	ldr	r2, [pc, #436]	; (406580 <udd_ep_interrupt+0x4e4>)
  4063cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4063d0:	330c      	adds	r3, #12
  4063d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4063d6:	f003 0301 	and.w	r3, r3, #1
  4063da:	2b00      	cmp	r3, #0
  4063dc:	d1f5      	bne.n	4063ca <udd_ep_interrupt+0x32e>
				udd_ep_in_sent(ep, false);
  4063de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4063e2:	2100      	movs	r1, #0
  4063e4:	4618      	mov	r0, r3
  4063e6:	4b67      	ldr	r3, [pc, #412]	; (406584 <udd_ep_interrupt+0x4e8>)
  4063e8:	4798      	blx	r3
  4063ea:	e079      	b.n	4064e0 <udd_ep_interrupt+0x444>
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  4063ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4063f0:	2b00      	cmp	r3, #0
  4063f2:	d04e      	beq.n	406492 <udd_ep_interrupt+0x3f6>
  4063f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4063f8:	2b03      	cmp	r3, #3
  4063fa:	d04a      	beq.n	406492 <udd_ep_interrupt+0x3f6>
				// Still bank free, load and transmit
				if (!udd_ep_in_sent(ep, true)) {
  4063fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  406400:	2101      	movs	r1, #1
  406402:	4618      	mov	r0, r3
  406404:	4b5f      	ldr	r3, [pc, #380]	; (406584 <udd_ep_interrupt+0x4e8>)
  406406:	4798      	blx	r3
  406408:	4603      	mov	r3, r0
  40640a:	f083 0301 	eor.w	r3, r3, #1
  40640e:	b2db      	uxtb	r3, r3
  406410:	2b00      	cmp	r3, #0
  406412:	d016      	beq.n	406442 <udd_ep_interrupt+0x3a6>
					ptr_job->b_buf_end = false;
  406414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  406416:	7c53      	ldrb	r3, [r2, #17]
  406418:	f36f 13c7 	bfc	r3, #7, #1
  40641c:	7453      	strb	r3, [r2, #17]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  40641e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  406420:	68da      	ldr	r2, [r3, #12]
  406422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  406424:	609a      	str	r2, [r3, #8]
                    udd_disable_endpoint_interrupt(ep);
  406426:	4a56      	ldr	r2, [pc, #344]	; (406580 <udd_ep_interrupt+0x4e4>)
  406428:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  40642c:	2101      	movs	r1, #1
  40642e:	fa01 f303 	lsl.w	r3, r1, r3
  406432:	6153      	str	r3, [r2, #20]
                    udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  406434:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  406438:	461a      	mov	r2, r3
  40643a:	2100      	movs	r1, #0
  40643c:	6b38      	ldr	r0, [r7, #48]	; 0x30
  40643e:	4b52      	ldr	r3, [pc, #328]	; (406588 <udd_ep_interrupt+0x4ec>)
  406440:	4798      	blx	r3
				}
				udd_ack_in_sent(ep);
  406442:	4a4f      	ldr	r2, [pc, #316]	; (406580 <udd_ep_interrupt+0x4e4>)
  406444:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  406448:	330c      	adds	r3, #12
  40644a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40644e:	60fb      	str	r3, [r7, #12]
  406450:	68fb      	ldr	r3, [r7, #12]
  406452:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  406456:	60fb      	str	r3, [r7, #12]
  406458:	68fb      	ldr	r3, [r7, #12]
  40645a:	f023 0301 	bic.w	r3, r3, #1
  40645e:	60fb      	str	r3, [r7, #12]
  406460:	4947      	ldr	r1, [pc, #284]	; (406580 <udd_ep_interrupt+0x4e4>)
  406462:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  406466:	68fa      	ldr	r2, [r7, #12]
  406468:	330c      	adds	r3, #12
  40646a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  40646e:	bf00      	nop
  406470:	4a43      	ldr	r2, [pc, #268]	; (406580 <udd_ep_interrupt+0x4e4>)
  406472:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  406476:	330c      	adds	r3, #12
  406478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40647c:	f003 0301 	and.w	r3, r3, #1
  406480:	2b00      	cmp	r3, #0
  406482:	d1f5      	bne.n	406470 <udd_ep_interrupt+0x3d4>
				udd_ep_in_sent(ep, false);
  406484:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  406488:	2100      	movs	r1, #0
  40648a:	4618      	mov	r0, r3
  40648c:	4b3d      	ldr	r3, [pc, #244]	; (406584 <udd_ep_interrupt+0x4e8>)
  40648e:	4798      	blx	r3
  406490:	e026      	b.n	4064e0 <udd_ep_interrupt+0x444>
			} else {
				// Single bank transfer, ack when ready
				udd_ep_in_sent(ep, true);
  406492:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  406496:	2101      	movs	r1, #1
  406498:	4618      	mov	r0, r3
  40649a:	4b3a      	ldr	r3, [pc, #232]	; (406584 <udd_ep_interrupt+0x4e8>)
  40649c:	4798      	blx	r3
				udd_ack_in_sent(ep);
  40649e:	4a38      	ldr	r2, [pc, #224]	; (406580 <udd_ep_interrupt+0x4e4>)
  4064a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4064a4:	330c      	adds	r3, #12
  4064a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4064aa:	60bb      	str	r3, [r7, #8]
  4064ac:	68bb      	ldr	r3, [r7, #8]
  4064ae:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4064b2:	60bb      	str	r3, [r7, #8]
  4064b4:	68bb      	ldr	r3, [r7, #8]
  4064b6:	f023 0301 	bic.w	r3, r3, #1
  4064ba:	60bb      	str	r3, [r7, #8]
  4064bc:	4930      	ldr	r1, [pc, #192]	; (406580 <udd_ep_interrupt+0x4e4>)
  4064be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4064c2:	68ba      	ldr	r2, [r7, #8]
  4064c4:	330c      	adds	r3, #12
  4064c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  4064ca:	bf00      	nop
  4064cc:	4a2c      	ldr	r2, [pc, #176]	; (406580 <udd_ep_interrupt+0x4e4>)
  4064ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4064d2:	330c      	adds	r3, #12
  4064d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4064d8:	f003 0301 	and.w	r3, r3, #1
  4064dc:	2b00      	cmp	r3, #0
  4064de:	d1f5      	bne.n	4064cc <udd_ep_interrupt+0x430>
			}
			return true;
  4064e0:	2301      	movs	r3, #1
  4064e2:	e049      	b.n	406578 <udd_ep_interrupt+0x4dc>
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  4064e4:	4a26      	ldr	r2, [pc, #152]	; (406580 <udd_ep_interrupt+0x4e4>)
  4064e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4064ea:	330c      	adds	r3, #12
  4064ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4064f0:	f003 0308 	and.w	r3, r3, #8
  4064f4:	2b00      	cmp	r3, #0
  4064f6:	d034      	beq.n	406562 <udd_ep_interrupt+0x4c6>
			udd_ack_stall(ep);
  4064f8:	4a21      	ldr	r2, [pc, #132]	; (406580 <udd_ep_interrupt+0x4e4>)
  4064fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4064fe:	330c      	adds	r3, #12
  406500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  406504:	607b      	str	r3, [r7, #4]
  406506:	687b      	ldr	r3, [r7, #4]
  406508:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40650c:	607b      	str	r3, [r7, #4]
  40650e:	687b      	ldr	r3, [r7, #4]
  406510:	f023 0308 	bic.w	r3, r3, #8
  406514:	607b      	str	r3, [r7, #4]
  406516:	491a      	ldr	r1, [pc, #104]	; (406580 <udd_ep_interrupt+0x4e4>)
  406518:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  40651c:	687a      	ldr	r2, [r7, #4]
  40651e:	330c      	adds	r3, #12
  406520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  406524:	bf00      	nop
  406526:	4a16      	ldr	r2, [pc, #88]	; (406580 <udd_ep_interrupt+0x4e4>)
  406528:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  40652c:	330c      	adds	r3, #12
  40652e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  406532:	f003 0308 	and.w	r3, r3, #8
  406536:	2b00      	cmp	r3, #0
  406538:	d1f5      	bne.n	406526 <udd_ep_interrupt+0x48a>
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
  40653a:	4a11      	ldr	r2, [pc, #68]	; (406580 <udd_ep_interrupt+0x4e4>)
  40653c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  406540:	330c      	adds	r3, #12
  406542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  406546:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40654a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40654e:	d005      	beq.n	40655c <udd_ep_interrupt+0x4c0>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
  406550:	4a0b      	ldr	r2, [pc, #44]	; (406580 <udd_ep_interrupt+0x4e4>)
  406552:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  406556:	330c      	adds	r3, #12
  406558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			}
			return true;
  40655c:	2301      	movs	r3, #1
  40655e:	e00b      	b.n	406578 <udd_ep_interrupt+0x4dc>
			continue;
  406560:	bf00      	nop
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  406562:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  406566:	3301      	adds	r3, #1
  406568:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  40656c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  406570:	2b03      	cmp	r3, #3
  406572:	f67f ad9a 	bls.w	4060aa <udd_ep_interrupt+0xe>
		}
	}
	return false;
  406576:	2300      	movs	r3, #0
}
  406578:	4618      	mov	r0, r3
  40657a:	3738      	adds	r7, #56	; 0x38
  40657c:	46bd      	mov	sp, r7
  40657e:	bd80      	pop	{r7, pc}
  406580:	40034000 	.word	0x40034000
  406584:	00405e89 	.word	0x00405e89
  406588:	00405b6d 	.word	0x00405b6d

0040658c <decode_incoming_comms_packet>:
#include "api/control_api.h"


/**************************** GLOBAL FUNCTIONS *******************************/
void decode_incoming_comms_packet( msg_t *msg_ptr )
{
  40658c:	b580      	push	{r7, lr}
  40658e:	b082      	sub	sp, #8
  406590:	af00      	add	r7, sp, #0
  406592:	6078      	str	r0, [r7, #4]
    switch (msg_ptr->packet_in[msg_h_msg_id])
  406594:	687b      	ldr	r3, [r7, #4]
  406596:	7c1b      	ldrb	r3, [r3, #16]
  406598:	3b02      	subs	r3, #2
  40659a:	2b1c      	cmp	r3, #28
  40659c:	d864      	bhi.n	406668 <decode_incoming_comms_packet+0xdc>
  40659e:	a201      	add	r2, pc, #4	; (adr r2, 4065a4 <decode_incoming_comms_packet+0x18>)
  4065a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4065a4:	00406619 	.word	0x00406619
  4065a8:	00406669 	.word	0x00406669
  4065ac:	00406621 	.word	0x00406621
  4065b0:	00406669 	.word	0x00406669
  4065b4:	00406669 	.word	0x00406669
  4065b8:	00406669 	.word	0x00406669
  4065bc:	00406669 	.word	0x00406669
  4065c0:	00406669 	.word	0x00406669
  4065c4:	00406669 	.word	0x00406669
  4065c8:	00406669 	.word	0x00406669
  4065cc:	00406669 	.word	0x00406669
  4065d0:	00406669 	.word	0x00406669
  4065d4:	00406669 	.word	0x00406669
  4065d8:	00406669 	.word	0x00406669
  4065dc:	00406629 	.word	0x00406629
  4065e0:	00406669 	.word	0x00406669
  4065e4:	00406631 	.word	0x00406631
  4065e8:	00406669 	.word	0x00406669
  4065ec:	00406639 	.word	0x00406639
  4065f0:	00406669 	.word	0x00406669
  4065f4:	00406641 	.word	0x00406641
  4065f8:	00406669 	.word	0x00406669
  4065fc:	00406649 	.word	0x00406649
  406600:	00406669 	.word	0x00406669
  406604:	00406651 	.word	0x00406651
  406608:	00406669 	.word	0x00406669
  40660c:	00406659 	.word	0x00406659
  406610:	00406669 	.word	0x00406669
  406614:	00406661 	.word	0x00406661
    {
        // FW
        case API_FW_ARM_VERSION_REQ:                    API_FW_ARM_version_req(msg_ptr);                        break;
  406618:	6878      	ldr	r0, [r7, #4]
  40661a:	4b17      	ldr	r3, [pc, #92]	; (406678 <decode_incoming_comms_packet+0xec>)
  40661c:	4798      	blx	r3
  40661e:	e027      	b.n	406670 <decode_incoming_comms_packet+0xe4>
        case API_FW_ARM_ECHO_REQ:                       API_FW_ARM_echo_req(msg_ptr);                           break;
  406620:	6878      	ldr	r0, [r7, #4]
  406622:	4b16      	ldr	r3, [pc, #88]	; (40667c <decode_incoming_comms_packet+0xf0>)
  406624:	4798      	blx	r3
  406626:	e023      	b.n	406670 <decode_incoming_comms_packet+0xe4>

        // CONTROL
        case API_CONTROL_START_REQ:                     API_CONTROL_start_req(msg_ptr);                         break;
  406628:	6878      	ldr	r0, [r7, #4]
  40662a:	4b15      	ldr	r3, [pc, #84]	; (406680 <decode_incoming_comms_packet+0xf4>)
  40662c:	4798      	blx	r3
  40662e:	e01f      	b.n	406670 <decode_incoming_comms_packet+0xe4>
        case API_CONTROL_STOP_REQ:                      API_CONTROL_stop_req(msg_ptr);                          break;
  406630:	6878      	ldr	r0, [r7, #4]
  406632:	4b14      	ldr	r3, [pc, #80]	; (406684 <decode_incoming_comms_packet+0xf8>)
  406634:	4798      	blx	r3
  406636:	e01b      	b.n	406670 <decode_incoming_comms_packet+0xe4>
        case API_CONTROL_SET_SIGNAL_PARAMS_REQ:         API_CONTROL_set_signal_params_req(msg_ptr);             break;
  406638:	6878      	ldr	r0, [r7, #4]
  40663a:	4b13      	ldr	r3, [pc, #76]	; (406688 <decode_incoming_comms_packet+0xfc>)
  40663c:	4798      	blx	r3
  40663e:	e017      	b.n	406670 <decode_incoming_comms_packet+0xe4>
        case API_CONTROL_TREND_REQ:                     API_CONTROL_trend_req(msg_ptr);                         break;
  406640:	6878      	ldr	r0, [r7, #4]
  406642:	4b12      	ldr	r3, [pc, #72]	; (40668c <decode_incoming_comms_packet+0x100>)
  406644:	4798      	blx	r3
  406646:	e013      	b.n	406670 <decode_incoming_comms_packet+0xe4>
        case API_CONTROL_SET_CUSTOM_LUT_REQ:            API_CONTROL_set_custom_lut_req(msg_ptr);                break;
  406648:	6878      	ldr	r0, [r7, #4]
  40664a:	4b11      	ldr	r3, [pc, #68]	; (406690 <decode_incoming_comms_packet+0x104>)
  40664c:	4798      	blx	r3
  40664e:	e00f      	b.n	406670 <decode_incoming_comms_packet+0xe4>
        case API_CONTROL_USE_CUSTOM_LUT_REQ:            API_CONTROL_use_custom_lut_req(msg_ptr);                break;
  406650:	6878      	ldr	r0, [r7, #4]
  406652:	4b10      	ldr	r3, [pc, #64]	; (406694 <decode_incoming_comms_packet+0x108>)
  406654:	4798      	blx	r3
  406656:	e00b      	b.n	406670 <decode_incoming_comms_packet+0xe4>
        case API_CONTROL_TELEMETRY_REQ:                 API_CONTROL_telemetry_req(msg_ptr);                     break;
  406658:	6878      	ldr	r0, [r7, #4]
  40665a:	4b0f      	ldr	r3, [pc, #60]	; (406698 <decode_incoming_comms_packet+0x10c>)
  40665c:	4798      	blx	r3
  40665e:	e007      	b.n	406670 <decode_incoming_comms_packet+0xe4>
        case API_CONTROL_SET_PWM_DUTY_REQ:              API_CONTROL_set_pwm_duty_req(msg_ptr);                  break;
  406660:	6878      	ldr	r0, [r7, #4]
  406662:	4b0e      	ldr	r3, [pc, #56]	; (40669c <decode_incoming_comms_packet+0x110>)
  406664:	4798      	blx	r3
  406666:	e003      	b.n	406670 <decode_incoming_comms_packet+0xe4>

        // Unknown command
        default:                                        API_FW_ARM_unknow_msg_id(msg_ptr);                      break;
  406668:	6878      	ldr	r0, [r7, #4]
  40666a:	4b0d      	ldr	r3, [pc, #52]	; (4066a0 <decode_incoming_comms_packet+0x114>)
  40666c:	4798      	blx	r3
  40666e:	bf00      	nop
    }
}
  406670:	bf00      	nop
  406672:	3708      	adds	r7, #8
  406674:	46bd      	mov	sp, r7
  406676:	bd80      	pop	{r7, pc}
  406678:	00400421 	.word	0x00400421
  40667c:	004004ad 	.word	0x004004ad
  406680:	00400139 	.word	0x00400139
  406684:	00400179 	.word	0x00400179
  406688:	004001b9 	.word	0x004001b9
  40668c:	00400235 	.word	0x00400235
  406690:	004002fd 	.word	0x004002fd
  406694:	00400335 	.word	0x00400335
  406698:	00400395 	.word	0x00400395
  40669c:	004003cd 	.word	0x004003cd
  4066a0:	004004e1 	.word	0x004004e1

004066a4 <comm_preprocess_RX_usb_msg>:
  * @details This functions is called by Rx interrupt when a byte is received.
  *          Byte is added to buffer and counter of received data is updated.
  * @param[in] msg_ptr Pointer to msg_t
  */
static void comm_preprocess_RX_usb_msg(msg_t *msg_ptr)
{
  4066a4:	b580      	push	{r7, lr}
  4066a6:	b082      	sub	sp, #8
  4066a8:	af00      	add	r7, sp, #0
  4066aa:	6078      	str	r0, [r7, #4]
    // Check if a byte was received
    if (udi_cdc_is_rx_ready())
  4066ac:	4b12      	ldr	r3, [pc, #72]	; (4066f8 <comm_preprocess_RX_usb_msg+0x54>)
  4066ae:	4798      	blx	r3
  4066b0:	4603      	mov	r3, r0
  4066b2:	2b00      	cmp	r3, #0
  4066b4:	d01c      	beq.n	4066f0 <comm_preprocess_RX_usb_msg+0x4c>
    {
        // get the number of bytes received
        usb_received_size = udi_cdc_get_nb_received_data();
  4066b6:	4b11      	ldr	r3, [pc, #68]	; (4066fc <comm_preprocess_RX_usb_msg+0x58>)
  4066b8:	4798      	blx	r3
  4066ba:	4602      	mov	r2, r0
  4066bc:	4b10      	ldr	r3, [pc, #64]	; (406700 <comm_preprocess_RX_usb_msg+0x5c>)
  4066be:	601a      	str	r2, [r3, #0]

        // save new byte
        udi_cdc_read_buf((void *)&msg_ptr->packet_in[msg_ptr->rx_counter], usb_received_size);
  4066c0:	687b      	ldr	r3, [r7, #4]
  4066c2:	791b      	ldrb	r3, [r3, #4]
  4066c4:	3308      	adds	r3, #8
  4066c6:	687a      	ldr	r2, [r7, #4]
  4066c8:	4413      	add	r3, r2
  4066ca:	1d1a      	adds	r2, r3, #4
  4066cc:	4b0c      	ldr	r3, [pc, #48]	; (406700 <comm_preprocess_RX_usb_msg+0x5c>)
  4066ce:	681b      	ldr	r3, [r3, #0]
  4066d0:	4619      	mov	r1, r3
  4066d2:	4610      	mov	r0, r2
  4066d4:	4b0b      	ldr	r3, [pc, #44]	; (406704 <comm_preprocess_RX_usb_msg+0x60>)
  4066d6:	4798      	blx	r3

        // increment the rx counter
        msg_ptr->rx_counter = msg_ptr->rx_counter + usb_received_size;
  4066d8:	687b      	ldr	r3, [r7, #4]
  4066da:	791a      	ldrb	r2, [r3, #4]
  4066dc:	4b08      	ldr	r3, [pc, #32]	; (406700 <comm_preprocess_RX_usb_msg+0x5c>)
  4066de:	681b      	ldr	r3, [r3, #0]
  4066e0:	b2db      	uxtb	r3, r3
  4066e2:	4413      	add	r3, r2
  4066e4:	b2da      	uxtb	r2, r3
  4066e6:	687b      	ldr	r3, [r7, #4]
  4066e8:	711a      	strb	r2, [r3, #4]

        // reset timeout counter
        msg_ptr->timeout_counter = 0;
  4066ea:	687b      	ldr	r3, [r7, #4]
  4066ec:	2200      	movs	r2, #0
  4066ee:	609a      	str	r2, [r3, #8]
    }
}
  4066f0:	bf00      	nop
  4066f2:	3708      	adds	r7, #8
  4066f4:	46bd      	mov	sp, r7
  4066f6:	bd80      	pop	{r7, pc}
  4066f8:	00402b19 	.word	0x00402b19
  4066fc:	00402ad9 	.word	0x00402ad9
  406700:	20001c3c 	.word	0x20001c3c
  406704:	00402c41 	.word	0x00402c41

00406708 <comm_preprocess_RX_uart_msg>:
  * @details This functions is called by Rx interrupt when a byte is received.
  *          Byte is added to buffer and counter of received data is updated.
  * @param[in] msg_ptr Pointer to msg_t
  */
static void comm_preprocess_RX_uart_msg(msg_t *msg_ptr)
{
  406708:	b580      	push	{r7, lr}
  40670a:	b082      	sub	sp, #8
  40670c:	af00      	add	r7, sp, #0
  40670e:	6078      	str	r0, [r7, #4]
    // Check if a byte was received
    if (uart_is_rx_ready(msg_ptr->uart_ptr))
  406710:	687b      	ldr	r3, [r7, #4]
  406712:	681b      	ldr	r3, [r3, #0]
  406714:	4618      	mov	r0, r3
  406716:	4b0e      	ldr	r3, [pc, #56]	; (406750 <comm_preprocess_RX_uart_msg+0x48>)
  406718:	4798      	blx	r3
  40671a:	4603      	mov	r3, r0
  40671c:	2b00      	cmp	r3, #0
  40671e:	d013      	beq.n	406748 <comm_preprocess_RX_uart_msg+0x40>
    {
        // save new byte
        uart_read(msg_ptr->uart_ptr, &msg_ptr->packet_in[msg_ptr->rx_counter]);
  406720:	687b      	ldr	r3, [r7, #4]
  406722:	6818      	ldr	r0, [r3, #0]
  406724:	687b      	ldr	r3, [r7, #4]
  406726:	791b      	ldrb	r3, [r3, #4]
  406728:	3308      	adds	r3, #8
  40672a:	687a      	ldr	r2, [r7, #4]
  40672c:	4413      	add	r3, r2
  40672e:	3304      	adds	r3, #4
  406730:	4619      	mov	r1, r3
  406732:	4b08      	ldr	r3, [pc, #32]	; (406754 <comm_preprocess_RX_uart_msg+0x4c>)
  406734:	4798      	blx	r3

        // increment the rx counter
        msg_ptr->rx_counter++;
  406736:	687b      	ldr	r3, [r7, #4]
  406738:	791b      	ldrb	r3, [r3, #4]
  40673a:	3301      	adds	r3, #1
  40673c:	b2da      	uxtb	r2, r3
  40673e:	687b      	ldr	r3, [r7, #4]
  406740:	711a      	strb	r2, [r3, #4]

        // reset timeout counter
        msg_ptr->timeout_counter = 0;
  406742:	687b      	ldr	r3, [r7, #4]
  406744:	2200      	movs	r2, #0
  406746:	609a      	str	r2, [r3, #8]
    }
}
  406748:	bf00      	nop
  40674a:	3708      	adds	r7, #8
  40674c:	46bd      	mov	sp, r7
  40674e:	bd80      	pop	{r7, pc}
  406750:	0040436d 	.word	0x0040436d
  406754:	004043bf 	.word	0x004043bf

00406758 <comm_process_RX_uart_msg>:
/** @brief   Generic UART process incoming message
  * @details This functions is called in background and check if a message is complete.
  * @param[in] msg_ptr Pointer to UART structure
  */
static void comm_process_RX_uart_msg(msg_t * msg_ptr)
{
  406758:	b580      	push	{r7, lr}
  40675a:	b082      	sub	sp, #8
  40675c:	af00      	add	r7, sp, #0
  40675e:	6078      	str	r0, [r7, #4]
    // If error occurs, start over.
    if ( uart_get_status(msg_ptr->uart_ptr) == (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE) )
  406760:	687b      	ldr	r3, [r7, #4]
  406762:	681b      	ldr	r3, [r3, #0]
  406764:	4618      	mov	r0, r3
  406766:	4b42      	ldr	r3, [pc, #264]	; (406870 <comm_process_RX_uart_msg+0x118>)
  406768:	4798      	blx	r3
  40676a:	4603      	mov	r3, r0
  40676c:	2be0      	cmp	r3, #224	; 0xe0
  40676e:	d111      	bne.n	406794 <comm_process_RX_uart_msg+0x3c>
    {
        memset(msg_ptr->packet_in, 0, MSG_LENGTH_MAX_SIZE);     // Reset buffer
  406770:	687b      	ldr	r3, [r7, #4]
  406772:	330c      	adds	r3, #12
  406774:	2288      	movs	r2, #136	; 0x88
  406776:	2100      	movs	r1, #0
  406778:	4618      	mov	r0, r3
  40677a:	4b3e      	ldr	r3, [pc, #248]	; (406874 <comm_process_RX_uart_msg+0x11c>)
  40677c:	4798      	blx	r3
        msg_ptr->rx_counter = 0;                                // Reset rx index
  40677e:	687b      	ldr	r3, [r7, #4]
  406780:	2200      	movs	r2, #0
  406782:	711a      	strb	r2, [r3, #4]
        msg_ptr->timeout_counter = 0;                           // Reset timeout counter
  406784:	687b      	ldr	r3, [r7, #4]
  406786:	2200      	movs	r2, #0
  406788:	609a      	str	r2, [r3, #8]
        uart_reset_status(msg_ptr->uart_ptr);                    // Clear error since it will block receiving
  40678a:	687b      	ldr	r3, [r7, #4]
  40678c:	681b      	ldr	r3, [r3, #0]
  40678e:	4618      	mov	r0, r3
  406790:	4b39      	ldr	r3, [pc, #228]	; (406878 <comm_process_RX_uart_msg+0x120>)
  406792:	4798      	blx	r3
        // TODO: this is a problem for other uC.
    }

    // Increment timeout counter
    msg_ptr->timeout_counter++;
  406794:	687b      	ldr	r3, [r7, #4]
  406796:	689b      	ldr	r3, [r3, #8]
  406798:	1c5a      	adds	r2, r3, #1
  40679a:	687b      	ldr	r3, [r7, #4]
  40679c:	609a      	str	r2, [r3, #8]

    // Reset counters if timeout occurs
    if (msg_ptr->timeout_counter == MSG_TIMEOUT)
  40679e:	687b      	ldr	r3, [r7, #4]
  4067a0:	689b      	ldr	r3, [r3, #8]
  4067a2:	f240 72ff 	movw	r2, #2047	; 0x7ff
  4067a6:	4293      	cmp	r3, r2
  4067a8:	d105      	bne.n	4067b6 <comm_process_RX_uart_msg+0x5e>
    {
        msg_ptr->timeout_counter = 0;
  4067aa:	687b      	ldr	r3, [r7, #4]
  4067ac:	2200      	movs	r2, #0
  4067ae:	609a      	str	r2, [r3, #8]
        msg_ptr->rx_counter = 0;
  4067b0:	687b      	ldr	r3, [r7, #4]
  4067b2:	2200      	movs	r2, #0
  4067b4:	711a      	strb	r2, [r3, #4]
    }

    // Check proper start byte
    if (msg_ptr->rx_counter > 0)
  4067b6:	687b      	ldr	r3, [r7, #4]
  4067b8:	791b      	ldrb	r3, [r3, #4]
  4067ba:	2b00      	cmp	r3, #0
  4067bc:	d006      	beq.n	4067cc <comm_process_RX_uart_msg+0x74>
    {
        if (msg_ptr->packet_in[msg_h_start] != MSG_START_BYTE)
  4067be:	687b      	ldr	r3, [r7, #4]
  4067c0:	7b1b      	ldrb	r3, [r3, #12]
  4067c2:	2b3c      	cmp	r3, #60	; 0x3c
  4067c4:	d002      	beq.n	4067cc <comm_process_RX_uart_msg+0x74>
        msg_ptr->rx_counter = 0; // reset buffer
  4067c6:	687b      	ldr	r3, [r7, #4]
  4067c8:	2200      	movs	r2, #0
  4067ca:	711a      	strb	r2, [r3, #4]
    }

    // Check proper project id
    if (msg_ptr->rx_counter > 1)
  4067cc:	687b      	ldr	r3, [r7, #4]
  4067ce:	791b      	ldrb	r3, [r3, #4]
  4067d0:	2b01      	cmp	r3, #1
  4067d2:	d906      	bls.n	4067e2 <comm_process_RX_uart_msg+0x8a>
    {
        if (!(msg_ptr->packet_in[msg_h_proj_id] == SETTINGS_PROJECT_ID) )
  4067d4:	687b      	ldr	r3, [r7, #4]
  4067d6:	7b5b      	ldrb	r3, [r3, #13]
  4067d8:	2b04      	cmp	r3, #4
  4067da:	d002      	beq.n	4067e2 <comm_process_RX_uart_msg+0x8a>
        msg_ptr->rx_counter = 0; // reset buffer
  4067dc:	687b      	ldr	r3, [r7, #4]
  4067de:	2200      	movs	r2, #0
  4067e0:	711a      	strb	r2, [r3, #4]
    }

    // Check proper source id
    if (msg_ptr->rx_counter > 2)
  4067e2:	687b      	ldr	r3, [r7, #4]
  4067e4:	791b      	ldrb	r3, [r3, #4]
  4067e6:	2b02      	cmp	r3, #2
  4067e8:	d90a      	bls.n	406800 <comm_process_RX_uart_msg+0xa8>
    {
        if (!( (msg_ptr->packet_in[msg_h_src_id] == SETTINGS_OTHERS_ID) ||
  4067ea:	687b      	ldr	r3, [r7, #4]
  4067ec:	7b9b      	ldrb	r3, [r3, #14]
  4067ee:	2bee      	cmp	r3, #238	; 0xee
  4067f0:	d006      	beq.n	406800 <comm_process_RX_uart_msg+0xa8>
               (msg_ptr->packet_in[msg_h_src_id] == SETTINGS_PC_ID) ))
  4067f2:	687b      	ldr	r3, [r7, #4]
  4067f4:	7b9b      	ldrb	r3, [r3, #14]
        if (!( (msg_ptr->packet_in[msg_h_src_id] == SETTINGS_OTHERS_ID) ||
  4067f6:	2baa      	cmp	r3, #170	; 0xaa
  4067f8:	d002      	beq.n	406800 <comm_process_RX_uart_msg+0xa8>
            msg_ptr->rx_counter = 0; // reset buffer
  4067fa:	687b      	ldr	r3, [r7, #4]
  4067fc:	2200      	movs	r2, #0
  4067fe:	711a      	strb	r2, [r3, #4]
    }

    // Check proper destination id
    if (msg_ptr->rx_counter > 3)
  406800:	687b      	ldr	r3, [r7, #4]
  406802:	791b      	ldrb	r3, [r3, #4]
  406804:	2b03      	cmp	r3, #3
  406806:	d90a      	bls.n	40681e <comm_process_RX_uart_msg+0xc6>
    {
        if (!( (msg_ptr->packet_in[msg_h_des_id] == SETTINGS_ARM_ID) ||
  406808:	687b      	ldr	r3, [r7, #4]
  40680a:	7bdb      	ldrb	r3, [r3, #15]
  40680c:	2b77      	cmp	r3, #119	; 0x77
  40680e:	d006      	beq.n	40681e <comm_process_RX_uart_msg+0xc6>
               (msg_ptr->packet_in[msg_h_des_id] == SETTINGS_PC_ID) ))
  406810:	687b      	ldr	r3, [r7, #4]
  406812:	7bdb      	ldrb	r3, [r3, #15]
        if (!( (msg_ptr->packet_in[msg_h_des_id] == SETTINGS_ARM_ID) ||
  406814:	2baa      	cmp	r3, #170	; 0xaa
  406816:	d002      	beq.n	40681e <comm_process_RX_uart_msg+0xc6>
            msg_ptr->rx_counter = 0; // reset buffer
  406818:	687b      	ldr	r3, [r7, #4]
  40681a:	2200      	movs	r2, #0
  40681c:	711a      	strb	r2, [r3, #4]
    }

    // if the packet is complete, check CRC and packet out is not busy, decode message and reset buffer
    if (  (msg_ptr->rx_counter >= MSG_LENGTH_HEADER) &&
  40681e:	687b      	ldr	r3, [r7, #4]
  406820:	791b      	ldrb	r3, [r3, #4]
  406822:	2b07      	cmp	r3, #7
  406824:	d91f      	bls.n	406866 <comm_process_RX_uart_msg+0x10e>
          ((msg_ptr->packet_in[msg_h_payload_len] + MSG_LENGTH_HEADER) == msg_ptr->rx_counter) &&
  406826:	687b      	ldr	r3, [r7, #4]
  406828:	7c5b      	ldrb	r3, [r3, #17]
  40682a:	3308      	adds	r3, #8
  40682c:	687a      	ldr	r2, [r7, #4]
  40682e:	7912      	ldrb	r2, [r2, #4]
    if (  (msg_ptr->rx_counter >= MSG_LENGTH_HEADER) &&
  406830:	4293      	cmp	r3, r2
  406832:	d118      	bne.n	406866 <comm_process_RX_uart_msg+0x10e>
          (!packet_out_busy ) &&
  406834:	4b11      	ldr	r3, [pc, #68]	; (40687c <comm_process_RX_uart_msg+0x124>)
  406836:	781b      	ldrb	r3, [r3, #0]
  406838:	f083 0301 	eor.w	r3, r3, #1
  40683c:	b2db      	uxtb	r3, r3
          ((msg_ptr->packet_in[msg_h_payload_len] + MSG_LENGTH_HEADER) == msg_ptr->rx_counter) &&
  40683e:	2b00      	cmp	r3, #0
  406840:	d011      	beq.n	406866 <comm_process_RX_uart_msg+0x10e>
          (!calculate_checksum( msg_ptr->packet_in , (uint16_t) msg_ptr->rx_counter)) )
  406842:	687b      	ldr	r3, [r7, #4]
  406844:	f103 020c 	add.w	r2, r3, #12
  406848:	687b      	ldr	r3, [r7, #4]
  40684a:	791b      	ldrb	r3, [r3, #4]
  40684c:	4619      	mov	r1, r3
  40684e:	4610      	mov	r0, r2
  406850:	4b0b      	ldr	r3, [pc, #44]	; (406880 <comm_process_RX_uart_msg+0x128>)
  406852:	4798      	blx	r3
  406854:	4603      	mov	r3, r0
          (!packet_out_busy ) &&
  406856:	2b00      	cmp	r3, #0
  406858:	d105      	bne.n	406866 <comm_process_RX_uart_msg+0x10e>
    {
        decode_incoming_comms_packet( msg_ptr );
  40685a:	6878      	ldr	r0, [r7, #4]
  40685c:	4b09      	ldr	r3, [pc, #36]	; (406884 <comm_process_RX_uart_msg+0x12c>)
  40685e:	4798      	blx	r3
        msg_ptr->rx_counter = 0; // reset buffer
  406860:	687b      	ldr	r3, [r7, #4]
  406862:	2200      	movs	r2, #0
  406864:	711a      	strb	r2, [r3, #4]
    }

}
  406866:	bf00      	nop
  406868:	3708      	adds	r7, #8
  40686a:	46bd      	mov	sp, r7
  40686c:	bd80      	pop	{r7, pc}
  40686e:	bf00      	nop
  406870:	00404319 	.word	0x00404319
  406874:	00408eb9 	.word	0x00408eb9
  406878:	0040432f 	.word	0x0040432f
  40687c:	20001c0d 	.word	0x20001c0d
  406880:	00406b79 	.word	0x00406b79
  406884:	0040658d 	.word	0x0040658d

00406888 <comm_process_RX_usb_msg>:
/** @brief        Generic USB process incoming message
  * @details    This functions is called in background and check if a message is complete.
  * @param[in]    msg_ptr Pointer to USB structure
  */
static void comm_process_RX_usb_msg( msg_t * msg_ptr )
{
  406888:	b580      	push	{r7, lr}
  40688a:	b082      	sub	sp, #8
  40688c:	af00      	add	r7, sp, #0
  40688e:	6078      	str	r0, [r7, #4]
    // Increment timeout counter
    msg_ptr->timeout_counter++;
  406890:	687b      	ldr	r3, [r7, #4]
  406892:	689b      	ldr	r3, [r3, #8]
  406894:	1c5a      	adds	r2, r3, #1
  406896:	687b      	ldr	r3, [r7, #4]
  406898:	609a      	str	r2, [r3, #8]

    // Reset counters if timeout occurs
    if (msg_ptr->timeout_counter == MSG_TIMEOUT)
  40689a:	687b      	ldr	r3, [r7, #4]
  40689c:	689b      	ldr	r3, [r3, #8]
  40689e:	f240 72ff 	movw	r2, #2047	; 0x7ff
  4068a2:	4293      	cmp	r3, r2
  4068a4:	d105      	bne.n	4068b2 <comm_process_RX_usb_msg+0x2a>
    {
        msg_ptr->timeout_counter = 0;
  4068a6:	687b      	ldr	r3, [r7, #4]
  4068a8:	2200      	movs	r2, #0
  4068aa:	609a      	str	r2, [r3, #8]
        msg_ptr->rx_counter = 0;
  4068ac:	687b      	ldr	r3, [r7, #4]
  4068ae:	2200      	movs	r2, #0
  4068b0:	711a      	strb	r2, [r3, #4]
    }

    if (msg_ptr->rx_counter > 0)
  4068b2:	687b      	ldr	r3, [r7, #4]
  4068b4:	791b      	ldrb	r3, [r3, #4]
  4068b6:	2b00      	cmp	r3, #0
  4068b8:	d01a      	beq.n	4068f0 <comm_process_RX_usb_msg+0x68>
    {
        // Check proper bytes
        if (
            // start byte
            (msg_ptr->packet_in[msg_h_start] != MSG_START_BYTE)    ||
  4068ba:	687b      	ldr	r3, [r7, #4]
  4068bc:	7b1b      	ldrb	r3, [r3, #12]
        if (
  4068be:	2b3c      	cmp	r3, #60	; 0x3c
  4068c0:	d113      	bne.n	4068ea <comm_process_RX_usb_msg+0x62>

            // project id
            (msg_ptr->packet_in[msg_h_proj_id] != SETTINGS_PROJECT_ID) ||
  4068c2:	687b      	ldr	r3, [r7, #4]
  4068c4:	7b5b      	ldrb	r3, [r3, #13]
            (msg_ptr->packet_in[msg_h_start] != MSG_START_BYTE)    ||
  4068c6:	2b04      	cmp	r3, #4
  4068c8:	d10f      	bne.n	4068ea <comm_process_RX_usb_msg+0x62>

            // source id
            !( (msg_ptr->packet_in[msg_h_src_id] == SETTINGS_OTHERS_ID) ||
  4068ca:	687b      	ldr	r3, [r7, #4]
  4068cc:	7b9b      	ldrb	r3, [r3, #14]
            (msg_ptr->packet_in[msg_h_proj_id] != SETTINGS_PROJECT_ID) ||
  4068ce:	2bee      	cmp	r3, #238	; 0xee
  4068d0:	d003      	beq.n	4068da <comm_process_RX_usb_msg+0x52>
               (msg_ptr->packet_in[msg_h_src_id] == SETTINGS_PC_ID)
  4068d2:	687b      	ldr	r3, [r7, #4]
  4068d4:	7b9b      	ldrb	r3, [r3, #14]
            !( (msg_ptr->packet_in[msg_h_src_id] == SETTINGS_OTHERS_ID) ||
  4068d6:	2baa      	cmp	r3, #170	; 0xaa
  4068d8:	d107      	bne.n	4068ea <comm_process_RX_usb_msg+0x62>
            ) ||

            // destination id
            !( (msg_ptr->packet_in[msg_h_des_id] == SETTINGS_ARM_ID) ||
  4068da:	687b      	ldr	r3, [r7, #4]
  4068dc:	7bdb      	ldrb	r3, [r3, #15]
            ) ||
  4068de:	2b77      	cmp	r3, #119	; 0x77
  4068e0:	d006      	beq.n	4068f0 <comm_process_RX_usb_msg+0x68>
               (msg_ptr->packet_in[msg_h_des_id] == SETTINGS_PC_ID)
  4068e2:	687b      	ldr	r3, [r7, #4]
  4068e4:	7bdb      	ldrb	r3, [r3, #15]
            !( (msg_ptr->packet_in[msg_h_des_id] == SETTINGS_ARM_ID) ||
  4068e6:	2baa      	cmp	r3, #170	; 0xaa
  4068e8:	d002      	beq.n	4068f0 <comm_process_RX_usb_msg+0x68>
            )
           )
            msg_ptr->rx_counter = 0; // reset buffer
  4068ea:	687b      	ldr	r3, [r7, #4]
  4068ec:	2200      	movs	r2, #0
  4068ee:	711a      	strb	r2, [r3, #4]
    }

    // if the packet is complete, check CRC and packet out is not busy, decode message and reset buffer
    if (  (msg_ptr->rx_counter >= MSG_LENGTH_HEADER) &&
  4068f0:	687b      	ldr	r3, [r7, #4]
  4068f2:	791b      	ldrb	r3, [r3, #4]
  4068f4:	2b07      	cmp	r3, #7
  4068f6:	d91f      	bls.n	406938 <comm_process_RX_usb_msg+0xb0>
          ((msg_ptr->packet_in[msg_h_payload_len] + MSG_LENGTH_HEADER) == msg_ptr->rx_counter) &&
  4068f8:	687b      	ldr	r3, [r7, #4]
  4068fa:	7c5b      	ldrb	r3, [r3, #17]
  4068fc:	3308      	adds	r3, #8
  4068fe:	687a      	ldr	r2, [r7, #4]
  406900:	7912      	ldrb	r2, [r2, #4]
    if (  (msg_ptr->rx_counter >= MSG_LENGTH_HEADER) &&
  406902:	4293      	cmp	r3, r2
  406904:	d118      	bne.n	406938 <comm_process_RX_usb_msg+0xb0>
          (!packet_out_busy ) &&
  406906:	4b0e      	ldr	r3, [pc, #56]	; (406940 <comm_process_RX_usb_msg+0xb8>)
  406908:	781b      	ldrb	r3, [r3, #0]
  40690a:	f083 0301 	eor.w	r3, r3, #1
  40690e:	b2db      	uxtb	r3, r3
          ((msg_ptr->packet_in[msg_h_payload_len] + MSG_LENGTH_HEADER) == msg_ptr->rx_counter) &&
  406910:	2b00      	cmp	r3, #0
  406912:	d011      	beq.n	406938 <comm_process_RX_usb_msg+0xb0>
          (!calculate_checksum( msg_ptr->packet_in , (uint16_t) msg_ptr->rx_counter)) )
  406914:	687b      	ldr	r3, [r7, #4]
  406916:	f103 020c 	add.w	r2, r3, #12
  40691a:	687b      	ldr	r3, [r7, #4]
  40691c:	791b      	ldrb	r3, [r3, #4]
  40691e:	4619      	mov	r1, r3
  406920:	4610      	mov	r0, r2
  406922:	4b08      	ldr	r3, [pc, #32]	; (406944 <comm_process_RX_usb_msg+0xbc>)
  406924:	4798      	blx	r3
  406926:	4603      	mov	r3, r0
          (!packet_out_busy ) &&
  406928:	2b00      	cmp	r3, #0
  40692a:	d105      	bne.n	406938 <comm_process_RX_usb_msg+0xb0>
    {
        decode_incoming_comms_packet( msg_ptr );
  40692c:	6878      	ldr	r0, [r7, #4]
  40692e:	4b06      	ldr	r3, [pc, #24]	; (406948 <comm_process_RX_usb_msg+0xc0>)
  406930:	4798      	blx	r3
        msg_ptr->rx_counter = 0; // reset buffer
  406932:	687b      	ldr	r3, [r7, #4]
  406934:	2200      	movs	r2, #0
  406936:	711a      	strb	r2, [r3, #4]
    }

}
  406938:	bf00      	nop
  40693a:	3708      	adds	r7, #8
  40693c:	46bd      	mov	sp, r7
  40693e:	bd80      	pop	{r7, pc}
  406940:	20001c0d 	.word	0x20001c0d
  406944:	00406b79 	.word	0x00406b79
  406948:	0040658d 	.word	0x0040658d

0040694c <uart_send_packet>:
/**    @brief Sends packet over UART */
static void uart_send_packet(Uart *uart_ptr, uint8_t *tx_packet, uint16_t tx_len)
{
  40694c:	b580      	push	{r7, lr}
  40694e:	b084      	sub	sp, #16
  406950:	af00      	add	r7, sp, #0
  406952:	60f8      	str	r0, [r7, #12]
  406954:	60b9      	str	r1, [r7, #8]
  406956:	4613      	mov	r3, r2
  406958:	80fb      	strh	r3, [r7, #6]
    while (tx_len--)
  40695a:	e00e      	b.n	40697a <uart_send_packet+0x2e>
    {
        // wait for sci FIFO transmit data register to have space
        while (!uart_is_tx_empty(uart_ptr));
  40695c:	bf00      	nop
  40695e:	68f8      	ldr	r0, [r7, #12]
  406960:	4b0a      	ldr	r3, [pc, #40]	; (40698c <uart_send_packet+0x40>)
  406962:	4798      	blx	r3
  406964:	4603      	mov	r3, r0
  406966:	2b00      	cmp	r3, #0
  406968:	d0f9      	beq.n	40695e <uart_send_packet+0x12>
        uart_write(uart_ptr , *tx_packet++);
  40696a:	68bb      	ldr	r3, [r7, #8]
  40696c:	1c5a      	adds	r2, r3, #1
  40696e:	60ba      	str	r2, [r7, #8]
  406970:	781b      	ldrb	r3, [r3, #0]
  406972:	4619      	mov	r1, r3
  406974:	68f8      	ldr	r0, [r7, #12]
  406976:	4b06      	ldr	r3, [pc, #24]	; (406990 <uart_send_packet+0x44>)
  406978:	4798      	blx	r3
    while (tx_len--)
  40697a:	88fb      	ldrh	r3, [r7, #6]
  40697c:	1e5a      	subs	r2, r3, #1
  40697e:	80fa      	strh	r2, [r7, #6]
  406980:	2b00      	cmp	r3, #0
  406982:	d1eb      	bne.n	40695c <uart_send_packet+0x10>
    }
}
  406984:	bf00      	nop
  406986:	3710      	adds	r7, #16
  406988:	46bd      	mov	sp, r7
  40698a:	bd80      	pop	{r7, pc}
  40698c:	00404349 	.word	0x00404349
  406990:	00404391 	.word	0x00404391

00406994 <usb_send_packet>:

/** brief Sends packet over USB */
static void usb_send_packet(void *pack_out, uint32_t length)
{
  406994:	b580      	push	{r7, lr}
  406996:	b082      	sub	sp, #8
  406998:	af00      	add	r7, sp, #0
  40699a:	6078      	str	r0, [r7, #4]
  40699c:	6039      	str	r1, [r7, #0]
    while (!udi_cdc_is_tx_ready());
  40699e:	bf00      	nop
  4069a0:	4b07      	ldr	r3, [pc, #28]	; (4069c0 <usb_send_packet+0x2c>)
  4069a2:	4798      	blx	r3
  4069a4:	4603      	mov	r3, r0
  4069a6:	f083 0301 	eor.w	r3, r3, #1
  4069aa:	b2db      	uxtb	r3, r3
  4069ac:	2b00      	cmp	r3, #0
  4069ae:	d1f7      	bne.n	4069a0 <usb_send_packet+0xc>
    udi_cdc_write_buf(pack_out, length);
  4069b0:	6839      	ldr	r1, [r7, #0]
  4069b2:	6878      	ldr	r0, [r7, #4]
  4069b4:	4b03      	ldr	r3, [pc, #12]	; (4069c4 <usb_send_packet+0x30>)
  4069b6:	4798      	blx	r3
}
  4069b8:	bf00      	nop
  4069ba:	3708      	adds	r7, #8
  4069bc:	46bd      	mov	sp, r7
  4069be:	bd80      	pop	{r7, pc}
  4069c0:	00402d39 	.word	0x00402d39
  4069c4:	00402e59 	.word	0x00402e59

004069c8 <comm_init>:

/**************************** GLOBAL FUNCTIONS *******************************/

/** @brief Communication initialization routine */
void comm_init()
{
  4069c8:	b580      	push	{r7, lr}
  4069ca:	af00      	add	r7, sp, #0
    // TX buffer
    memset((void *)&packet_out , 0, MSG_LENGTH_MAX_SIZE);
  4069cc:	2288      	movs	r2, #136	; 0x88
  4069ce:	2100      	movs	r1, #0
  4069d0:	480a      	ldr	r0, [pc, #40]	; (4069fc <comm_init+0x34>)
  4069d2:	4b0b      	ldr	r3, [pc, #44]	; (406a00 <comm_init+0x38>)
  4069d4:	4798      	blx	r3

    // UART PC variable
    memset((void *)&UART_PC_msg , 0, sizeof(UART_PC_msg));
  4069d6:	2294      	movs	r2, #148	; 0x94
  4069d8:	2100      	movs	r1, #0
  4069da:	480a      	ldr	r0, [pc, #40]	; (406a04 <comm_init+0x3c>)
  4069dc:	4b08      	ldr	r3, [pc, #32]	; (406a00 <comm_init+0x38>)
  4069de:	4798      	blx	r3
    UART_PC_msg.uart_ptr = UART_PC;
  4069e0:	4b08      	ldr	r3, [pc, #32]	; (406a04 <comm_init+0x3c>)
  4069e2:	4a09      	ldr	r2, [pc, #36]	; (406a08 <comm_init+0x40>)
  4069e4:	601a      	str	r2, [r3, #0]

    // USB PC variable
    memset((void *)&USB_PC_msg , 0, sizeof(USB_PC_msg));
  4069e6:	2294      	movs	r2, #148	; 0x94
  4069e8:	2100      	movs	r1, #0
  4069ea:	4808      	ldr	r0, [pc, #32]	; (406a0c <comm_init+0x44>)
  4069ec:	4b04      	ldr	r3, [pc, #16]	; (406a00 <comm_init+0x38>)
  4069ee:	4798      	blx	r3
    USB_PC_msg.uart_ptr = USB_PC;
  4069f0:	4b06      	ldr	r3, [pc, #24]	; (406a0c <comm_init+0x44>)
  4069f2:	2200      	movs	r2, #0
  4069f4:	601a      	str	r2, [r3, #0]
}
  4069f6:	bf00      	nop
  4069f8:	bd80      	pop	{r7, pc}
  4069fa:	bf00      	nop
  4069fc:	20001d68 	.word	0x20001d68
  406a00:	00408eb9 	.word	0x00408eb9
  406a04:	20001c40 	.word	0x20001c40
  406a08:	400e0800 	.word	0x400e0800
  406a0c:	20001cd4 	.word	0x20001cd4

00406a10 <comm_background>:

/** @brief Background communication process */
void comm_background()
{
  406a10:	b580      	push	{r7, lr}
  406a12:	af00      	add	r7, sp, #0
    comm_process_RX_uart_msg(&UART_PC_msg);
  406a14:	4803      	ldr	r0, [pc, #12]	; (406a24 <comm_background+0x14>)
  406a16:	4b04      	ldr	r3, [pc, #16]	; (406a28 <comm_background+0x18>)
  406a18:	4798      	blx	r3
    comm_process_RX_usb_msg(&USB_PC_msg);
  406a1a:	4804      	ldr	r0, [pc, #16]	; (406a2c <comm_background+0x1c>)
  406a1c:	4b04      	ldr	r3, [pc, #16]	; (406a30 <comm_background+0x20>)
  406a1e:	4798      	blx	r3
}
  406a20:	bf00      	nop
  406a22:	bd80      	pop	{r7, pc}
  406a24:	20001c40 	.word	0x20001c40
  406a28:	00406759 	.word	0x00406759
  406a2c:	20001cd4 	.word	0x20001cd4
  406a30:	00406889 	.word	0x00406889

00406a34 <comm_send_msg>:
                   uint8_t msg_des,
                   uint8_t msg_id ,
                   uint8_t payload_len ,
                   uint8_t * payload_ptr
                   )
{
  406a34:	b580      	push	{r7, lr}
  406a36:	b084      	sub	sp, #16
  406a38:	af00      	add	r7, sp, #0
  406a3a:	6078      	str	r0, [r7, #4]
  406a3c:	4608      	mov	r0, r1
  406a3e:	4611      	mov	r1, r2
  406a40:	461a      	mov	r2, r3
  406a42:	4603      	mov	r3, r0
  406a44:	70fb      	strb	r3, [r7, #3]
  406a46:	460b      	mov	r3, r1
  406a48:	70bb      	strb	r3, [r7, #2]
  406a4a:	4613      	mov	r3, r2
  406a4c:	707b      	strb	r3, [r7, #1]
    uint16_t checksum;

    // set flag of packet out busy
    packet_out_busy = 1;
  406a4e:	4b27      	ldr	r3, [pc, #156]	; (406aec <comm_send_msg+0xb8>)
  406a50:	2201      	movs	r2, #1
  406a52:	701a      	strb	r2, [r3, #0]

    // Fill in output packet structure
    packet_out[msg_h_start] = MSG_START_BYTE;
  406a54:	4b26      	ldr	r3, [pc, #152]	; (406af0 <comm_send_msg+0xbc>)
  406a56:	223c      	movs	r2, #60	; 0x3c
  406a58:	701a      	strb	r2, [r3, #0]
    packet_out[msg_h_proj_id] = SETTINGS_PROJECT_ID;
  406a5a:	4b25      	ldr	r3, [pc, #148]	; (406af0 <comm_send_msg+0xbc>)
  406a5c:	2204      	movs	r2, #4
  406a5e:	705a      	strb	r2, [r3, #1]
    packet_out[msg_h_src_id] = SETTINGS_ARM_ID;
  406a60:	4b23      	ldr	r3, [pc, #140]	; (406af0 <comm_send_msg+0xbc>)
  406a62:	2277      	movs	r2, #119	; 0x77
  406a64:	709a      	strb	r2, [r3, #2]
    packet_out[msg_h_des_id] = msg_des;
  406a66:	4a22      	ldr	r2, [pc, #136]	; (406af0 <comm_send_msg+0xbc>)
  406a68:	78fb      	ldrb	r3, [r7, #3]
  406a6a:	70d3      	strb	r3, [r2, #3]
    packet_out[msg_h_msg_id] = msg_id;
  406a6c:	4a20      	ldr	r2, [pc, #128]	; (406af0 <comm_send_msg+0xbc>)
  406a6e:	78bb      	ldrb	r3, [r7, #2]
  406a70:	7113      	strb	r3, [r2, #4]
    packet_out[msg_h_payload_len] = payload_len;
  406a72:	4a1f      	ldr	r2, [pc, #124]	; (406af0 <comm_send_msg+0xbc>)
  406a74:	787b      	ldrb	r3, [r7, #1]
  406a76:	7153      	strb	r3, [r2, #5]

    // save payload
    copy_content(payload_ptr , &packet_out[msg_h_payload_1st_byte] , payload_len);
  406a78:	787b      	ldrb	r3, [r7, #1]
  406a7a:	b29b      	uxth	r3, r3
  406a7c:	461a      	mov	r2, r3
  406a7e:	491d      	ldr	r1, [pc, #116]	; (406af4 <comm_send_msg+0xc0>)
  406a80:	69b8      	ldr	r0, [r7, #24]
  406a82:	4b1d      	ldr	r3, [pc, #116]	; (406af8 <comm_send_msg+0xc4>)
  406a84:	4798      	blx	r3

    // Append checksum
    checksum = calculate_checksum( packet_out , (uint16_t) (packet_out[msg_h_payload_len] + MSG_LENGTH_HEADER - 2));
  406a86:	4b1a      	ldr	r3, [pc, #104]	; (406af0 <comm_send_msg+0xbc>)
  406a88:	795b      	ldrb	r3, [r3, #5]
  406a8a:	b29b      	uxth	r3, r3
  406a8c:	3306      	adds	r3, #6
  406a8e:	b29b      	uxth	r3, r3
  406a90:	4619      	mov	r1, r3
  406a92:	4817      	ldr	r0, [pc, #92]	; (406af0 <comm_send_msg+0xbc>)
  406a94:	4b19      	ldr	r3, [pc, #100]	; (406afc <comm_send_msg+0xc8>)
  406a96:	4798      	blx	r3
  406a98:	4603      	mov	r3, r0
  406a9a:	81fb      	strh	r3, [r7, #14]
    packet_out[MSG_LENGTH_HEADER - 2 + payload_len] = ( checksum      & 0xFF );
  406a9c:	787b      	ldrb	r3, [r7, #1]
  406a9e:	3306      	adds	r3, #6
  406aa0:	89fa      	ldrh	r2, [r7, #14]
  406aa2:	b2d1      	uxtb	r1, r2
  406aa4:	4a12      	ldr	r2, [pc, #72]	; (406af0 <comm_send_msg+0xbc>)
  406aa6:	54d1      	strb	r1, [r2, r3]
    packet_out[MSG_LENGTH_HEADER - 1 + payload_len] = ( (checksum>>8) & 0xFF );
  406aa8:	787b      	ldrb	r3, [r7, #1]
  406aaa:	3307      	adds	r3, #7
  406aac:	89fa      	ldrh	r2, [r7, #14]
  406aae:	0a12      	lsrs	r2, r2, #8
  406ab0:	b292      	uxth	r2, r2
  406ab2:	b2d1      	uxtb	r1, r2
  406ab4:	4a0e      	ldr	r2, [pc, #56]	; (406af0 <comm_send_msg+0xbc>)
  406ab6:	54d1      	strb	r1, [r2, r3]

    // Check if it's coming from UART or USB
    if (uart_ptr != NULL)
  406ab8:	687b      	ldr	r3, [r7, #4]
  406aba:	2b00      	cmp	r3, #0
  406abc:	d009      	beq.n	406ad2 <comm_send_msg+0x9e>
    {
        // Send packet via UART
        uart_send_packet( uart_ptr , packet_out , MSG_LENGTH_HEADER + payload_len );
  406abe:	787b      	ldrb	r3, [r7, #1]
  406ac0:	b29b      	uxth	r3, r3
  406ac2:	3308      	adds	r3, #8
  406ac4:	b29b      	uxth	r3, r3
  406ac6:	461a      	mov	r2, r3
  406ac8:	4909      	ldr	r1, [pc, #36]	; (406af0 <comm_send_msg+0xbc>)
  406aca:	6878      	ldr	r0, [r7, #4]
  406acc:	4b0c      	ldr	r3, [pc, #48]	; (406b00 <comm_send_msg+0xcc>)
  406ace:	4798      	blx	r3
  406ad0:	e005      	b.n	406ade <comm_send_msg+0xaa>
    }
    else
    {
        // Send packet via USB
        usb_send_packet( (void*)&packet_out, (uint32_t) (MSG_LENGTH_HEADER + payload_len) );
  406ad2:	787b      	ldrb	r3, [r7, #1]
  406ad4:	3308      	adds	r3, #8
  406ad6:	4619      	mov	r1, r3
  406ad8:	4805      	ldr	r0, [pc, #20]	; (406af0 <comm_send_msg+0xbc>)
  406ada:	4b0a      	ldr	r3, [pc, #40]	; (406b04 <comm_send_msg+0xd0>)
  406adc:	4798      	blx	r3
    }
    // clear flag of packet out busy
    packet_out_busy = 0;
  406ade:	4b03      	ldr	r3, [pc, #12]	; (406aec <comm_send_msg+0xb8>)
  406ae0:	2200      	movs	r2, #0
  406ae2:	701a      	strb	r2, [r3, #0]
}
  406ae4:	bf00      	nop
  406ae6:	3710      	adds	r7, #16
  406ae8:	46bd      	mov	sp, r7
  406aea:	bd80      	pop	{r7, pc}
  406aec:	20001c0d 	.word	0x20001c0d
  406af0:	20001d68 	.word	0x20001d68
  406af4:	20001d6e 	.word	0x20001d6e
  406af8:	00406b39 	.word	0x00406b39
  406afc:	00406b79 	.word	0x00406b79
  406b00:	0040694d 	.word	0x0040694d
  406b04:	00406995 	.word	0x00406995

00406b08 <comm_preprocess_uart_PC_RX>:

/** @brief Preprocess msg coming from the PC-uart */
void comm_preprocess_uart_PC_RX(void)
{
  406b08:	b580      	push	{r7, lr}
  406b0a:	af00      	add	r7, sp, #0
    comm_preprocess_RX_uart_msg(&UART_PC_msg);
  406b0c:	4802      	ldr	r0, [pc, #8]	; (406b18 <comm_preprocess_uart_PC_RX+0x10>)
  406b0e:	4b03      	ldr	r3, [pc, #12]	; (406b1c <comm_preprocess_uart_PC_RX+0x14>)
  406b10:	4798      	blx	r3
}
  406b12:	bf00      	nop
  406b14:	bd80      	pop	{r7, pc}
  406b16:	bf00      	nop
  406b18:	20001c40 	.word	0x20001c40
  406b1c:	00406709 	.word	0x00406709

00406b20 <comm_preprocess_usb_PC_RX>:

/** @brief Preprocess msg coming from the PC-USB */
void comm_preprocess_usb_PC_RX(void)
{
  406b20:	b580      	push	{r7, lr}
  406b22:	af00      	add	r7, sp, #0
    comm_preprocess_RX_usb_msg(&USB_PC_msg);
  406b24:	4802      	ldr	r0, [pc, #8]	; (406b30 <comm_preprocess_usb_PC_RX+0x10>)
  406b26:	4b03      	ldr	r3, [pc, #12]	; (406b34 <comm_preprocess_usb_PC_RX+0x14>)
  406b28:	4798      	blx	r3
}
  406b2a:	bf00      	nop
  406b2c:	bd80      	pop	{r7, pc}
  406b2e:	bf00      	nop
  406b30:	20001cd4 	.word	0x20001cd4
  406b34:	004066a5 	.word	0x004066a5

00406b38 <copy_content>:
    		target_16bits[i>>1] |= ((0x00FF & source_8bits[i])<<8);
    }
}

void copy_content(uint8_t *source, uint8_t *target, uint16_t length)
{
  406b38:	b480      	push	{r7}
  406b3a:	b087      	sub	sp, #28
  406b3c:	af00      	add	r7, sp, #0
  406b3e:	60f8      	str	r0, [r7, #12]
  406b40:	60b9      	str	r1, [r7, #8]
  406b42:	4613      	mov	r3, r2
  406b44:	80fb      	strh	r3, [r7, #6]
    uint16_t i = 0;
  406b46:	2300      	movs	r3, #0
  406b48:	82fb      	strh	r3, [r7, #22]

    for (i = 0; i < length; i++)
  406b4a:	2300      	movs	r3, #0
  406b4c:	82fb      	strh	r3, [r7, #22]
  406b4e:	e00a      	b.n	406b66 <copy_content+0x2e>
        target[i] = source[i];
  406b50:	8afb      	ldrh	r3, [r7, #22]
  406b52:	68ba      	ldr	r2, [r7, #8]
  406b54:	4413      	add	r3, r2
  406b56:	8afa      	ldrh	r2, [r7, #22]
  406b58:	68f9      	ldr	r1, [r7, #12]
  406b5a:	440a      	add	r2, r1
  406b5c:	7812      	ldrb	r2, [r2, #0]
  406b5e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < length; i++)
  406b60:	8afb      	ldrh	r3, [r7, #22]
  406b62:	3301      	adds	r3, #1
  406b64:	82fb      	strh	r3, [r7, #22]
  406b66:	8afa      	ldrh	r2, [r7, #22]
  406b68:	88fb      	ldrh	r3, [r7, #6]
  406b6a:	429a      	cmp	r2, r3
  406b6c:	d3f0      	bcc.n	406b50 <copy_content+0x18>
}
  406b6e:	bf00      	nop
  406b70:	371c      	adds	r7, #28
  406b72:	46bd      	mov	sp, r7
  406b74:	bc80      	pop	{r7}
  406b76:	4770      	bx	lr

00406b78 <calculate_checksum>:
    // if content is matched
    return 0;
}

uint16_t calculate_checksum(uint8_t input[], uint32_t length)
{
  406b78:	b580      	push	{r7, lr}
  406b7a:	b084      	sub	sp, #16
  406b7c:	af00      	add	r7, sp, #0
  406b7e:	6078      	str	r0, [r7, #4]
  406b80:	6039      	str	r1, [r7, #0]
    uint16_t checksum = 0;
  406b82:	2300      	movs	r3, #0
  406b84:	81fb      	strh	r3, [r7, #14]

    calculate_checksum_ptr(input, length, &checksum);
  406b86:	f107 030e 	add.w	r3, r7, #14
  406b8a:	461a      	mov	r2, r3
  406b8c:	6839      	ldr	r1, [r7, #0]
  406b8e:	6878      	ldr	r0, [r7, #4]
  406b90:	4b03      	ldr	r3, [pc, #12]	; (406ba0 <calculate_checksum+0x28>)
  406b92:	4798      	blx	r3

    return checksum;
  406b94:	89fb      	ldrh	r3, [r7, #14]
}
  406b96:	4618      	mov	r0, r3
  406b98:	3710      	adds	r7, #16
  406b9a:	46bd      	mov	sp, r7
  406b9c:	bd80      	pop	{r7, pc}
  406b9e:	bf00      	nop
  406ba0:	00406ba5 	.word	0x00406ba5

00406ba4 <calculate_checksum_ptr>:

// returns 16-bit checksum. If done for a packet with checksum appended, should return 0
// length is in bytes!
// be careful this function is not reentrant
void calculate_checksum_ptr(uint8_t input[], uint32_t length, uint16_t *result)
{
  406ba4:	b480      	push	{r7}
  406ba6:	b085      	sub	sp, #20
  406ba8:	af00      	add	r7, sp, #0
  406baa:	60f8      	str	r0, [r7, #12]
  406bac:	60b9      	str	r1, [r7, #8]
  406bae:	607a      	str	r2, [r7, #4]
    static uint8_t data = 0;
    static uint8_t result_bit = 0;
    static uint8_t data_bit = 0;

    // for every byte
    for (i = 0; i < length; i++) {
  406bb0:	4b29      	ldr	r3, [pc, #164]	; (406c58 <calculate_checksum_ptr+0xb4>)
  406bb2:	2200      	movs	r2, #0
  406bb4:	601a      	str	r2, [r3, #0]
  406bb6:	e045      	b.n	406c44 <calculate_checksum_ptr+0xa0>
        data = input[i];
  406bb8:	4b27      	ldr	r3, [pc, #156]	; (406c58 <calculate_checksum_ptr+0xb4>)
  406bba:	681b      	ldr	r3, [r3, #0]
  406bbc:	68fa      	ldr	r2, [r7, #12]
  406bbe:	4413      	add	r3, r2
  406bc0:	781a      	ldrb	r2, [r3, #0]
  406bc2:	4b26      	ldr	r3, [pc, #152]	; (406c5c <calculate_checksum_ptr+0xb8>)
  406bc4:	701a      	strb	r2, [r3, #0]
        // for every bit
        for (j = 0; j < 8; j++) {
  406bc6:	4b26      	ldr	r3, [pc, #152]	; (406c60 <calculate_checksum_ptr+0xbc>)
  406bc8:	2200      	movs	r2, #0
  406bca:	701a      	strb	r2, [r3, #0]
  406bcc:	e031      	b.n	406c32 <calculate_checksum_ptr+0x8e>
 
            result_bit = *result & 0x1;    // get LSbit
  406bce:	687b      	ldr	r3, [r7, #4]
  406bd0:	881b      	ldrh	r3, [r3, #0]
  406bd2:	b2db      	uxtb	r3, r3
  406bd4:	f003 0301 	and.w	r3, r3, #1
  406bd8:	b2da      	uxtb	r2, r3
  406bda:	4b22      	ldr	r3, [pc, #136]	; (406c64 <calculate_checksum_ptr+0xc0>)
  406bdc:	701a      	strb	r2, [r3, #0]
            *result = *result >> 1;        // shift down
  406bde:	687b      	ldr	r3, [r7, #4]
  406be0:	881b      	ldrh	r3, [r3, #0]
  406be2:	085b      	lsrs	r3, r3, #1
  406be4:	b29a      	uxth	r2, r3
  406be6:	687b      	ldr	r3, [r7, #4]
  406be8:	801a      	strh	r2, [r3, #0]
 
            data_bit = data & 0x1;        // get LSbit
  406bea:	4b1c      	ldr	r3, [pc, #112]	; (406c5c <calculate_checksum_ptr+0xb8>)
  406bec:	781b      	ldrb	r3, [r3, #0]
  406bee:	f003 0301 	and.w	r3, r3, #1
  406bf2:	b2da      	uxtb	r2, r3
  406bf4:	4b1c      	ldr	r3, [pc, #112]	; (406c68 <calculate_checksum_ptr+0xc4>)
  406bf6:	701a      	strb	r2, [r3, #0]
            data = data >> 1;            // shift down
  406bf8:	4b18      	ldr	r3, [pc, #96]	; (406c5c <calculate_checksum_ptr+0xb8>)
  406bfa:	781b      	ldrb	r3, [r3, #0]
  406bfc:	085b      	lsrs	r3, r3, #1
  406bfe:	b2da      	uxtb	r2, r3
  406c00:	4b16      	ldr	r3, [pc, #88]	; (406c5c <calculate_checksum_ptr+0xb8>)
  406c02:	701a      	strb	r2, [r3, #0]
 
            if (result_bit != data_bit) {
  406c04:	4b17      	ldr	r3, [pc, #92]	; (406c64 <calculate_checksum_ptr+0xc0>)
  406c06:	781a      	ldrb	r2, [r3, #0]
  406c08:	4b17      	ldr	r3, [pc, #92]	; (406c68 <calculate_checksum_ptr+0xc4>)
  406c0a:	781b      	ldrb	r3, [r3, #0]
  406c0c:	429a      	cmp	r2, r3
  406c0e:	d00a      	beq.n	406c26 <calculate_checksum_ptr+0x82>
                *result = *result ^ CRCPoly;
  406c10:	687b      	ldr	r3, [r7, #4]
  406c12:	881b      	ldrh	r3, [r3, #0]
  406c14:	b21a      	sxth	r2, r3
  406c16:	4b15      	ldr	r3, [pc, #84]	; (406c6c <calculate_checksum_ptr+0xc8>)
  406c18:	f9b3 3000 	ldrsh.w	r3, [r3]
  406c1c:	4053      	eors	r3, r2
  406c1e:	b21b      	sxth	r3, r3
  406c20:	b29a      	uxth	r2, r3
  406c22:	687b      	ldr	r3, [r7, #4]
  406c24:	801a      	strh	r2, [r3, #0]
        for (j = 0; j < 8; j++) {
  406c26:	4b0e      	ldr	r3, [pc, #56]	; (406c60 <calculate_checksum_ptr+0xbc>)
  406c28:	781b      	ldrb	r3, [r3, #0]
  406c2a:	3301      	adds	r3, #1
  406c2c:	b2da      	uxtb	r2, r3
  406c2e:	4b0c      	ldr	r3, [pc, #48]	; (406c60 <calculate_checksum_ptr+0xbc>)
  406c30:	701a      	strb	r2, [r3, #0]
  406c32:	4b0b      	ldr	r3, [pc, #44]	; (406c60 <calculate_checksum_ptr+0xbc>)
  406c34:	781b      	ldrb	r3, [r3, #0]
  406c36:	2b07      	cmp	r3, #7
  406c38:	d9c9      	bls.n	406bce <calculate_checksum_ptr+0x2a>
    for (i = 0; i < length; i++) {
  406c3a:	4b07      	ldr	r3, [pc, #28]	; (406c58 <calculate_checksum_ptr+0xb4>)
  406c3c:	681b      	ldr	r3, [r3, #0]
  406c3e:	3301      	adds	r3, #1
  406c40:	4a05      	ldr	r2, [pc, #20]	; (406c58 <calculate_checksum_ptr+0xb4>)
  406c42:	6013      	str	r3, [r2, #0]
  406c44:	4b04      	ldr	r3, [pc, #16]	; (406c58 <calculate_checksum_ptr+0xb4>)
  406c46:	681a      	ldr	r2, [r3, #0]
  406c48:	68bb      	ldr	r3, [r7, #8]
  406c4a:	429a      	cmp	r2, r3
  406c4c:	d3b4      	bcc.n	406bb8 <calculate_checksum_ptr+0x14>
            }
        }
    }
}
  406c4e:	bf00      	nop
  406c50:	3714      	adds	r7, #20
  406c52:	46bd      	mov	sp, r7
  406c54:	bc80      	pop	{r7}
  406c56:	4770      	bx	lr
  406c58:	20001c10 	.word	0x20001c10
  406c5c:	20001c14 	.word	0x20001c14
  406c60:	20001c15 	.word	0x20001c15
  406c64:	20001c16 	.word	0x20001c16
  406c68:	20001c17 	.word	0x20001c17
  406c6c:	200000fa 	.word	0x200000fa

00406c70 <lut_sin_128_Q20>:
/**
 * @brief Sine function (table 128 values)
 * @param[in] phase Input phase in ticks [0-127]. It is obtained by affecting the phase in rad with a gain equal of 128/(2*pi).
 */
int32_t lut_sin_128_Q20(uint8_t phase)
{
  406c70:	b480      	push	{r7}
  406c72:	b083      	sub	sp, #12
  406c74:	af00      	add	r7, sp, #0
  406c76:	4603      	mov	r3, r0
  406c78:	71fb      	strb	r3, [r7, #7]
	return table_sin_128_Q20[phase];
  406c7a:	79fb      	ldrb	r3, [r7, #7]
  406c7c:	4a03      	ldr	r2, [pc, #12]	; (406c8c <lut_sin_128_Q20+0x1c>)
  406c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
  406c82:	4618      	mov	r0, r3
  406c84:	370c      	adds	r7, #12
  406c86:	46bd      	mov	sp, r7
  406c88:	bc80      	pop	{r7}
  406c8a:	4770      	bx	lr
  406c8c:	004090a0 	.word	0x004090a0

00406c90 <lut_cos_128_Q20>:
/**
 * @brief Cosine function (table 128 values)
 * @param[in] phase Input phase in ticks [0-127]. It is obtained by affecting the phase in rad with a gain equal of 128/(2*pi).
 */
int32_t lut_cos_128_Q20(uint8_t phase)
{
  406c90:	b480      	push	{r7}
  406c92:	b083      	sub	sp, #12
  406c94:	af00      	add	r7, sp, #0
  406c96:	4603      	mov	r3, r0
  406c98:	71fb      	strb	r3, [r7, #7]
	return table_sin_128_Q20[ phase > (LUT_SIN_128_N_075-1) ? phase-LUT_SIN_128_N_075 : phase+LUT_SIN_128_N_025 ];
  406c9a:	79fb      	ldrb	r3, [r7, #7]
  406c9c:	2b5f      	cmp	r3, #95	; 0x5f
  406c9e:	dd02      	ble.n	406ca6 <lut_cos_128_Q20+0x16>
  406ca0:	79fb      	ldrb	r3, [r7, #7]
  406ca2:	3b60      	subs	r3, #96	; 0x60
  406ca4:	e001      	b.n	406caa <lut_cos_128_Q20+0x1a>
  406ca6:	79fb      	ldrb	r3, [r7, #7]
  406ca8:	3320      	adds	r3, #32
  406caa:	4a04      	ldr	r2, [pc, #16]	; (406cbc <lut_cos_128_Q20+0x2c>)
  406cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
  406cb0:	4618      	mov	r0, r3
  406cb2:	370c      	adds	r7, #12
  406cb4:	46bd      	mov	sp, r7
  406cb6:	bc80      	pop	{r7}
  406cb8:	4770      	bx	lr
  406cba:	bf00      	nop
  406cbc:	004090a0 	.word	0x004090a0

00406cc0 <osc_enable>:
{
  406cc0:	b580      	push	{r7, lr}
  406cc2:	b082      	sub	sp, #8
  406cc4:	af00      	add	r7, sp, #0
  406cc6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  406cc8:	687b      	ldr	r3, [r7, #4]
  406cca:	2b07      	cmp	r3, #7
  406ccc:	d831      	bhi.n	406d32 <osc_enable+0x72>
  406cce:	a201      	add	r2, pc, #4	; (adr r2, 406cd4 <osc_enable+0x14>)
  406cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  406cd4:	00406d31 	.word	0x00406d31
  406cd8:	00406cf5 	.word	0x00406cf5
  406cdc:	00406cfd 	.word	0x00406cfd
  406ce0:	00406d05 	.word	0x00406d05
  406ce4:	00406d0d 	.word	0x00406d0d
  406ce8:	00406d15 	.word	0x00406d15
  406cec:	00406d1d 	.word	0x00406d1d
  406cf0:	00406d27 	.word	0x00406d27
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  406cf4:	2000      	movs	r0, #0
  406cf6:	4b11      	ldr	r3, [pc, #68]	; (406d3c <osc_enable+0x7c>)
  406cf8:	4798      	blx	r3
		break;
  406cfa:	e01a      	b.n	406d32 <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  406cfc:	2001      	movs	r0, #1
  406cfe:	4b0f      	ldr	r3, [pc, #60]	; (406d3c <osc_enable+0x7c>)
  406d00:	4798      	blx	r3
		break;
  406d02:	e016      	b.n	406d32 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  406d04:	2000      	movs	r0, #0
  406d06:	4b0e      	ldr	r3, [pc, #56]	; (406d40 <osc_enable+0x80>)
  406d08:	4798      	blx	r3
		break;
  406d0a:	e012      	b.n	406d32 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  406d0c:	2010      	movs	r0, #16
  406d0e:	4b0c      	ldr	r3, [pc, #48]	; (406d40 <osc_enable+0x80>)
  406d10:	4798      	blx	r3
		break;
  406d12:	e00e      	b.n	406d32 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  406d14:	2020      	movs	r0, #32
  406d16:	4b0a      	ldr	r3, [pc, #40]	; (406d40 <osc_enable+0x80>)
  406d18:	4798      	blx	r3
		break;
  406d1a:	e00a      	b.n	406d32 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  406d1c:	213e      	movs	r1, #62	; 0x3e
  406d1e:	2000      	movs	r0, #0
  406d20:	4b08      	ldr	r3, [pc, #32]	; (406d44 <osc_enable+0x84>)
  406d22:	4798      	blx	r3
		break;
  406d24:	e005      	b.n	406d32 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  406d26:	213e      	movs	r1, #62	; 0x3e
  406d28:	2001      	movs	r0, #1
  406d2a:	4b06      	ldr	r3, [pc, #24]	; (406d44 <osc_enable+0x84>)
  406d2c:	4798      	blx	r3
		break;
  406d2e:	e000      	b.n	406d32 <osc_enable+0x72>
		break;
  406d30:	bf00      	nop
}
  406d32:	bf00      	nop
  406d34:	3708      	adds	r7, #8
  406d36:	46bd      	mov	sp, r7
  406d38:	bd80      	pop	{r7, pc}
  406d3a:	bf00      	nop
  406d3c:	004076dd 	.word	0x004076dd
  406d40:	00407749 	.word	0x00407749
  406d44:	004077b9 	.word	0x004077b9

00406d48 <osc_is_ready>:
{
  406d48:	b580      	push	{r7, lr}
  406d4a:	b082      	sub	sp, #8
  406d4c:	af00      	add	r7, sp, #0
  406d4e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  406d50:	687b      	ldr	r3, [r7, #4]
  406d52:	2b07      	cmp	r3, #7
  406d54:	d826      	bhi.n	406da4 <osc_is_ready+0x5c>
  406d56:	a201      	add	r2, pc, #4	; (adr r2, 406d5c <osc_is_ready+0x14>)
  406d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  406d5c:	00406d7d 	.word	0x00406d7d
  406d60:	00406d81 	.word	0x00406d81
  406d64:	00406d81 	.word	0x00406d81
  406d68:	00406d93 	.word	0x00406d93
  406d6c:	00406d93 	.word	0x00406d93
  406d70:	00406d93 	.word	0x00406d93
  406d74:	00406d93 	.word	0x00406d93
  406d78:	00406d93 	.word	0x00406d93
		return 1;
  406d7c:	2301      	movs	r3, #1
  406d7e:	e012      	b.n	406da6 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  406d80:	4b0b      	ldr	r3, [pc, #44]	; (406db0 <osc_is_ready+0x68>)
  406d82:	4798      	blx	r3
  406d84:	4603      	mov	r3, r0
  406d86:	2b00      	cmp	r3, #0
  406d88:	bf14      	ite	ne
  406d8a:	2301      	movne	r3, #1
  406d8c:	2300      	moveq	r3, #0
  406d8e:	b2db      	uxtb	r3, r3
  406d90:	e009      	b.n	406da6 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  406d92:	4b08      	ldr	r3, [pc, #32]	; (406db4 <osc_is_ready+0x6c>)
  406d94:	4798      	blx	r3
  406d96:	4603      	mov	r3, r0
  406d98:	2b00      	cmp	r3, #0
  406d9a:	bf14      	ite	ne
  406d9c:	2301      	movne	r3, #1
  406d9e:	2300      	moveq	r3, #0
  406da0:	b2db      	uxtb	r3, r3
  406da2:	e000      	b.n	406da6 <osc_is_ready+0x5e>
	return 0;
  406da4:	2300      	movs	r3, #0
}
  406da6:	4618      	mov	r0, r3
  406da8:	3708      	adds	r7, #8
  406daa:	46bd      	mov	sp, r7
  406dac:	bd80      	pop	{r7, pc}
  406dae:	bf00      	nop
  406db0:	00407715 	.word	0x00407715
  406db4:	00407831 	.word	0x00407831

00406db8 <osc_get_rate>:
{
  406db8:	b480      	push	{r7}
  406dba:	b083      	sub	sp, #12
  406dbc:	af00      	add	r7, sp, #0
  406dbe:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  406dc0:	687b      	ldr	r3, [r7, #4]
  406dc2:	2b07      	cmp	r3, #7
  406dc4:	d825      	bhi.n	406e12 <osc_get_rate+0x5a>
  406dc6:	a201      	add	r2, pc, #4	; (adr r2, 406dcc <osc_get_rate+0x14>)
  406dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  406dcc:	00406ded 	.word	0x00406ded
  406dd0:	00406df3 	.word	0x00406df3
  406dd4:	00406df9 	.word	0x00406df9
  406dd8:	00406dff 	.word	0x00406dff
  406ddc:	00406e03 	.word	0x00406e03
  406de0:	00406e07 	.word	0x00406e07
  406de4:	00406e0b 	.word	0x00406e0b
  406de8:	00406e0f 	.word	0x00406e0f
		return OSC_SLCK_32K_RC_HZ;
  406dec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  406df0:	e010      	b.n	406e14 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  406df2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  406df6:	e00d      	b.n	406e14 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  406df8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  406dfc:	e00a      	b.n	406e14 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  406dfe:	4b08      	ldr	r3, [pc, #32]	; (406e20 <osc_get_rate+0x68>)
  406e00:	e008      	b.n	406e14 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  406e02:	4b08      	ldr	r3, [pc, #32]	; (406e24 <osc_get_rate+0x6c>)
  406e04:	e006      	b.n	406e14 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  406e06:	4b08      	ldr	r3, [pc, #32]	; (406e28 <osc_get_rate+0x70>)
  406e08:	e004      	b.n	406e14 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  406e0a:	4b07      	ldr	r3, [pc, #28]	; (406e28 <osc_get_rate+0x70>)
  406e0c:	e002      	b.n	406e14 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  406e0e:	4b06      	ldr	r3, [pc, #24]	; (406e28 <osc_get_rate+0x70>)
  406e10:	e000      	b.n	406e14 <osc_get_rate+0x5c>
	return 0;
  406e12:	2300      	movs	r3, #0
}
  406e14:	4618      	mov	r0, r3
  406e16:	370c      	adds	r7, #12
  406e18:	46bd      	mov	sp, r7
  406e1a:	bc80      	pop	{r7}
  406e1c:	4770      	bx	lr
  406e1e:	bf00      	nop
  406e20:	003d0900 	.word	0x003d0900
  406e24:	007a1200 	.word	0x007a1200
  406e28:	00b71b00 	.word	0x00b71b00

00406e2c <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  406e2c:	b580      	push	{r7, lr}
  406e2e:	b082      	sub	sp, #8
  406e30:	af00      	add	r7, sp, #0
  406e32:	4603      	mov	r3, r0
  406e34:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  406e36:	bf00      	nop
  406e38:	79fb      	ldrb	r3, [r7, #7]
  406e3a:	4618      	mov	r0, r3
  406e3c:	4b05      	ldr	r3, [pc, #20]	; (406e54 <osc_wait_ready+0x28>)
  406e3e:	4798      	blx	r3
  406e40:	4603      	mov	r3, r0
  406e42:	f083 0301 	eor.w	r3, r3, #1
  406e46:	b2db      	uxtb	r3, r3
  406e48:	2b00      	cmp	r3, #0
  406e4a:	d1f5      	bne.n	406e38 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  406e4c:	bf00      	nop
  406e4e:	3708      	adds	r7, #8
  406e50:	46bd      	mov	sp, r7
  406e52:	bd80      	pop	{r7, pc}
  406e54:	00406d49 	.word	0x00406d49

00406e58 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  406e58:	b580      	push	{r7, lr}
  406e5a:	b086      	sub	sp, #24
  406e5c:	af00      	add	r7, sp, #0
  406e5e:	60f8      	str	r0, [r7, #12]
  406e60:	607a      	str	r2, [r7, #4]
  406e62:	603b      	str	r3, [r7, #0]
  406e64:	460b      	mov	r3, r1
  406e66:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  406e68:	7afb      	ldrb	r3, [r7, #11]
  406e6a:	4618      	mov	r0, r3
  406e6c:	4b0d      	ldr	r3, [pc, #52]	; (406ea4 <pll_config_init+0x4c>)
  406e6e:	4798      	blx	r3
  406e70:	4602      	mov	r2, r0
  406e72:	687b      	ldr	r3, [r7, #4]
  406e74:	fbb2 f3f3 	udiv	r3, r2, r3
  406e78:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  406e7a:	697b      	ldr	r3, [r7, #20]
  406e7c:	683a      	ldr	r2, [r7, #0]
  406e7e:	fb02 f303 	mul.w	r3, r2, r3
  406e82:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  406e84:	683b      	ldr	r3, [r7, #0]
  406e86:	3b01      	subs	r3, #1
  406e88:	041a      	lsls	r2, r3, #16
  406e8a:	4b07      	ldr	r3, [pc, #28]	; (406ea8 <pll_config_init+0x50>)
  406e8c:	4013      	ands	r3, r2
  406e8e:	687a      	ldr	r2, [r7, #4]
  406e90:	b2d2      	uxtb	r2, r2
  406e92:	4313      	orrs	r3, r2
  406e94:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  406e98:	68fb      	ldr	r3, [r7, #12]
  406e9a:	601a      	str	r2, [r3, #0]
}
  406e9c:	bf00      	nop
  406e9e:	3718      	adds	r7, #24
  406ea0:	46bd      	mov	sp, r7
  406ea2:	bd80      	pop	{r7, pc}
  406ea4:	00406db9 	.word	0x00406db9
  406ea8:	07ff0000 	.word	0x07ff0000

00406eac <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  406eac:	b580      	push	{r7, lr}
  406eae:	b082      	sub	sp, #8
  406eb0:	af00      	add	r7, sp, #0
  406eb2:	6078      	str	r0, [r7, #4]
  406eb4:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  406eb6:	683b      	ldr	r3, [r7, #0]
  406eb8:	2b00      	cmp	r3, #0
  406eba:	d108      	bne.n	406ece <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  406ebc:	4b09      	ldr	r3, [pc, #36]	; (406ee4 <pll_enable+0x38>)
  406ebe:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  406ec0:	4a09      	ldr	r2, [pc, #36]	; (406ee8 <pll_enable+0x3c>)
  406ec2:	687b      	ldr	r3, [r7, #4]
  406ec4:	681b      	ldr	r3, [r3, #0]
  406ec6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  406eca:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  406ecc:	e005      	b.n	406eda <pll_enable+0x2e>
		pmc_disable_pllbck();
  406ece:	4b07      	ldr	r3, [pc, #28]	; (406eec <pll_enable+0x40>)
  406ed0:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  406ed2:	4a05      	ldr	r2, [pc, #20]	; (406ee8 <pll_enable+0x3c>)
  406ed4:	687b      	ldr	r3, [r7, #4]
  406ed6:	681b      	ldr	r3, [r3, #0]
  406ed8:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  406eda:	bf00      	nop
  406edc:	3708      	adds	r7, #8
  406ede:	46bd      	mov	sp, r7
  406ee0:	bd80      	pop	{r7, pc}
  406ee2:	bf00      	nop
  406ee4:	00407849 	.word	0x00407849
  406ee8:	400e0400 	.word	0x400e0400
  406eec:	00407879 	.word	0x00407879

00406ef0 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  406ef0:	b580      	push	{r7, lr}
  406ef2:	b082      	sub	sp, #8
  406ef4:	af00      	add	r7, sp, #0
  406ef6:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  406ef8:	687b      	ldr	r3, [r7, #4]
  406efa:	2b00      	cmp	r3, #0
  406efc:	d103      	bne.n	406f06 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  406efe:	4b05      	ldr	r3, [pc, #20]	; (406f14 <pll_is_locked+0x24>)
  406f00:	4798      	blx	r3
  406f02:	4603      	mov	r3, r0
  406f04:	e002      	b.n	406f0c <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  406f06:	4b04      	ldr	r3, [pc, #16]	; (406f18 <pll_is_locked+0x28>)
  406f08:	4798      	blx	r3
  406f0a:	4603      	mov	r3, r0
	}
}
  406f0c:	4618      	mov	r0, r3
  406f0e:	3708      	adds	r7, #8
  406f10:	46bd      	mov	sp, r7
  406f12:	bd80      	pop	{r7, pc}
  406f14:	00407861 	.word	0x00407861
  406f18:	00407891 	.word	0x00407891

00406f1c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  406f1c:	b580      	push	{r7, lr}
  406f1e:	b082      	sub	sp, #8
  406f20:	af00      	add	r7, sp, #0
  406f22:	4603      	mov	r3, r0
  406f24:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  406f26:	79fb      	ldrb	r3, [r7, #7]
  406f28:	3b03      	subs	r3, #3
  406f2a:	2b04      	cmp	r3, #4
  406f2c:	d808      	bhi.n	406f40 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  406f2e:	79fb      	ldrb	r3, [r7, #7]
  406f30:	4618      	mov	r0, r3
  406f32:	4b06      	ldr	r3, [pc, #24]	; (406f4c <pll_enable_source+0x30>)
  406f34:	4798      	blx	r3
		osc_wait_ready(e_src);
  406f36:	79fb      	ldrb	r3, [r7, #7]
  406f38:	4618      	mov	r0, r3
  406f3a:	4b05      	ldr	r3, [pc, #20]	; (406f50 <pll_enable_source+0x34>)
  406f3c:	4798      	blx	r3
		break;
  406f3e:	e000      	b.n	406f42 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  406f40:	bf00      	nop
	}
}
  406f42:	bf00      	nop
  406f44:	3708      	adds	r7, #8
  406f46:	46bd      	mov	sp, r7
  406f48:	bd80      	pop	{r7, pc}
  406f4a:	bf00      	nop
  406f4c:	00406cc1 	.word	0x00406cc1
  406f50:	00406e2d 	.word	0x00406e2d

00406f54 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  406f54:	b580      	push	{r7, lr}
  406f56:	b082      	sub	sp, #8
  406f58:	af00      	add	r7, sp, #0
  406f5a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  406f5c:	bf00      	nop
  406f5e:	6878      	ldr	r0, [r7, #4]
  406f60:	4b04      	ldr	r3, [pc, #16]	; (406f74 <pll_wait_for_lock+0x20>)
  406f62:	4798      	blx	r3
  406f64:	4603      	mov	r3, r0
  406f66:	2b00      	cmp	r3, #0
  406f68:	d0f9      	beq.n	406f5e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  406f6a:	2300      	movs	r3, #0
}
  406f6c:	4618      	mov	r0, r3
  406f6e:	3708      	adds	r7, #8
  406f70:	46bd      	mov	sp, r7
  406f72:	bd80      	pop	{r7, pc}
  406f74:	00406ef1 	.word	0x00406ef1

00406f78 <sysclk_get_main_hz>:
{
  406f78:	b580      	push	{r7, lr}
  406f7a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  406f7c:	2006      	movs	r0, #6
  406f7e:	4b04      	ldr	r3, [pc, #16]	; (406f90 <sysclk_get_main_hz+0x18>)
  406f80:	4798      	blx	r3
  406f82:	4602      	mov	r2, r0
  406f84:	4613      	mov	r3, r2
  406f86:	009b      	lsls	r3, r3, #2
  406f88:	4413      	add	r3, r2
  406f8a:	009b      	lsls	r3, r3, #2
}
  406f8c:	4618      	mov	r0, r3
  406f8e:	bd80      	pop	{r7, pc}
  406f90:	00406db9 	.word	0x00406db9

00406f94 <sysclk_get_cpu_hz>:
{
  406f94:	b580      	push	{r7, lr}
  406f96:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  406f98:	4b02      	ldr	r3, [pc, #8]	; (406fa4 <sysclk_get_cpu_hz+0x10>)
  406f9a:	4798      	blx	r3
  406f9c:	4603      	mov	r3, r0
  406f9e:	085b      	lsrs	r3, r3, #1
}
  406fa0:	4618      	mov	r0, r3
  406fa2:	bd80      	pop	{r7, pc}
  406fa4:	00406f79 	.word	0x00406f79

00406fa8 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  406fa8:	b590      	push	{r4, r7, lr}
  406faa:	b083      	sub	sp, #12
  406fac:	af00      	add	r7, sp, #0

#ifdef CONFIG_PLL1_SOURCE
	if (CONFIG_USBCLK_SOURCE == USBCLK_SRC_PLL1) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL1_SOURCE);
  406fae:	2006      	movs	r0, #6
  406fb0:	4b0c      	ldr	r3, [pc, #48]	; (406fe4 <sysclk_enable_usb+0x3c>)
  406fb2:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 1);
  406fb4:	4638      	mov	r0, r7
  406fb6:	2310      	movs	r3, #16
  406fb8:	2202      	movs	r2, #2
  406fba:	2106      	movs	r1, #6
  406fbc:	4c0a      	ldr	r4, [pc, #40]	; (406fe8 <sysclk_enable_usb+0x40>)
  406fbe:	47a0      	blx	r4
		pll_enable(&pllcfg, 1);
  406fc0:	463b      	mov	r3, r7
  406fc2:	2101      	movs	r1, #1
  406fc4:	4618      	mov	r0, r3
  406fc6:	4b09      	ldr	r3, [pc, #36]	; (406fec <sysclk_enable_usb+0x44>)
  406fc8:	4798      	blx	r3
		pll_wait_for_lock(1);
  406fca:	2001      	movs	r0, #1
  406fcc:	4b08      	ldr	r3, [pc, #32]	; (406ff0 <sysclk_enable_usb+0x48>)
  406fce:	4798      	blx	r3
		pmc_switch_udpck_to_pllbck(CONFIG_USBCLK_DIV - 1);
  406fd0:	2001      	movs	r0, #1
  406fd2:	4b08      	ldr	r3, [pc, #32]	; (406ff4 <sysclk_enable_usb+0x4c>)
  406fd4:	4798      	blx	r3
		pmc_enable_udpck();
  406fd6:	4b08      	ldr	r3, [pc, #32]	; (406ff8 <sysclk_enable_usb+0x50>)
  406fd8:	4798      	blx	r3
		return;
  406fda:	bf00      	nop
	}
#endif
}
  406fdc:	370c      	adds	r7, #12
  406fde:	46bd      	mov	sp, r7
  406fe0:	bd90      	pop	{r4, r7, pc}
  406fe2:	bf00      	nop
  406fe4:	00406f1d 	.word	0x00406f1d
  406fe8:	00406e59 	.word	0x00406e59
  406fec:	00406ead 	.word	0x00406ead
  406ff0:	00406f55 	.word	0x00406f55
  406ff4:	004079a9 	.word	0x004079a9
  406ff8:	004079d1 	.word	0x004079d1

00406ffc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  406ffc:	b590      	push	{r4, r7, lr}
  406ffe:	b083      	sub	sp, #12
  407000:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  407002:	4811      	ldr	r0, [pc, #68]	; (407048 <sysclk_init+0x4c>)
  407004:	4b11      	ldr	r3, [pc, #68]	; (40704c <sysclk_init+0x50>)
  407006:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  407008:	2006      	movs	r0, #6
  40700a:	4b11      	ldr	r3, [pc, #68]	; (407050 <sysclk_init+0x54>)
  40700c:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  40700e:	1d38      	adds	r0, r7, #4
  407010:	2314      	movs	r3, #20
  407012:	2201      	movs	r2, #1
  407014:	2106      	movs	r1, #6
  407016:	4c0f      	ldr	r4, [pc, #60]	; (407054 <sysclk_init+0x58>)
  407018:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  40701a:	1d3b      	adds	r3, r7, #4
  40701c:	2100      	movs	r1, #0
  40701e:	4618      	mov	r0, r3
  407020:	4b0d      	ldr	r3, [pc, #52]	; (407058 <sysclk_init+0x5c>)
  407022:	4798      	blx	r3
		pll_wait_for_lock(0);
  407024:	2000      	movs	r0, #0
  407026:	4b0d      	ldr	r3, [pc, #52]	; (40705c <sysclk_init+0x60>)
  407028:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40702a:	2010      	movs	r0, #16
  40702c:	4b0c      	ldr	r3, [pc, #48]	; (407060 <sysclk_init+0x64>)
  40702e:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  407030:	4b0c      	ldr	r3, [pc, #48]	; (407064 <sysclk_init+0x68>)
  407032:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  407034:	4b0c      	ldr	r3, [pc, #48]	; (407068 <sysclk_init+0x6c>)
  407036:	4798      	blx	r3
  407038:	4603      	mov	r3, r0
  40703a:	4618      	mov	r0, r3
  40703c:	4b03      	ldr	r3, [pc, #12]	; (40704c <sysclk_init+0x50>)
  40703e:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  407040:	bf00      	nop
  407042:	370c      	adds	r7, #12
  407044:	46bd      	mov	sp, r7
  407046:	bd90      	pop	{r4, r7, pc}
  407048:	07270e00 	.word	0x07270e00
  40704c:	00407ca9 	.word	0x00407ca9
  407050:	00406f1d 	.word	0x00406f1d
  407054:	00406e59 	.word	0x00406e59
  407058:	00406ead 	.word	0x00406ead
  40705c:	00406f55 	.word	0x00406f55
  407060:	0040765d 	.word	0x0040765d
  407064:	00407b11 	.word	0x00407b11
  407068:	00406f95 	.word	0x00406f95

0040706c <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  40706c:	b480      	push	{r7}
  40706e:	b085      	sub	sp, #20
  407070:	af00      	add	r7, sp, #0
  407072:	60f8      	str	r0, [r7, #12]
  407074:	60b9      	str	r1, [r7, #8]
  407076:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  407078:	687b      	ldr	r3, [r7, #4]
  40707a:	2b00      	cmp	r3, #0
  40707c:	d003      	beq.n	407086 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  40707e:	68fb      	ldr	r3, [r7, #12]
  407080:	68ba      	ldr	r2, [r7, #8]
  407082:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  407084:	e002      	b.n	40708c <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  407086:	68fb      	ldr	r3, [r7, #12]
  407088:	68ba      	ldr	r2, [r7, #8]
  40708a:	661a      	str	r2, [r3, #96]	; 0x60
}
  40708c:	bf00      	nop
  40708e:	3714      	adds	r7, #20
  407090:	46bd      	mov	sp, r7
  407092:	bc80      	pop	{r7}
  407094:	4770      	bx	lr

00407096 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  407096:	b480      	push	{r7}
  407098:	b087      	sub	sp, #28
  40709a:	af00      	add	r7, sp, #0
  40709c:	60f8      	str	r0, [r7, #12]
  40709e:	60b9      	str	r1, [r7, #8]
  4070a0:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4070a2:	68fb      	ldr	r3, [r7, #12]
  4070a4:	687a      	ldr	r2, [r7, #4]
  4070a6:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4070a8:	68bb      	ldr	r3, [r7, #8]
  4070aa:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4070ae:	d04a      	beq.n	407146 <pio_set_peripheral+0xb0>
  4070b0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4070b4:	d808      	bhi.n	4070c8 <pio_set_peripheral+0x32>
  4070b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4070ba:	d016      	beq.n	4070ea <pio_set_peripheral+0x54>
  4070bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4070c0:	d02c      	beq.n	40711c <pio_set_peripheral+0x86>
  4070c2:	2b00      	cmp	r3, #0
  4070c4:	d069      	beq.n	40719a <pio_set_peripheral+0x104>
  4070c6:	e064      	b.n	407192 <pio_set_peripheral+0xfc>
  4070c8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4070cc:	d065      	beq.n	40719a <pio_set_peripheral+0x104>
  4070ce:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4070d2:	d803      	bhi.n	4070dc <pio_set_peripheral+0x46>
  4070d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4070d8:	d04a      	beq.n	407170 <pio_set_peripheral+0xda>
  4070da:	e05a      	b.n	407192 <pio_set_peripheral+0xfc>
  4070dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4070e0:	d05b      	beq.n	40719a <pio_set_peripheral+0x104>
  4070e2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4070e6:	d058      	beq.n	40719a <pio_set_peripheral+0x104>
  4070e8:	e053      	b.n	407192 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4070ea:	68fb      	ldr	r3, [r7, #12]
  4070ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4070ee:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4070f0:	68fb      	ldr	r3, [r7, #12]
  4070f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4070f4:	687b      	ldr	r3, [r7, #4]
  4070f6:	43d9      	mvns	r1, r3
  4070f8:	697b      	ldr	r3, [r7, #20]
  4070fa:	400b      	ands	r3, r1
  4070fc:	401a      	ands	r2, r3
  4070fe:	68fb      	ldr	r3, [r7, #12]
  407100:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  407102:	68fb      	ldr	r3, [r7, #12]
  407104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  407106:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  407108:	68fb      	ldr	r3, [r7, #12]
  40710a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40710c:	687b      	ldr	r3, [r7, #4]
  40710e:	43d9      	mvns	r1, r3
  407110:	697b      	ldr	r3, [r7, #20]
  407112:	400b      	ands	r3, r1
  407114:	401a      	ands	r2, r3
  407116:	68fb      	ldr	r3, [r7, #12]
  407118:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40711a:	e03a      	b.n	407192 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40711c:	68fb      	ldr	r3, [r7, #12]
  40711e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  407120:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  407122:	687a      	ldr	r2, [r7, #4]
  407124:	697b      	ldr	r3, [r7, #20]
  407126:	431a      	orrs	r2, r3
  407128:	68fb      	ldr	r3, [r7, #12]
  40712a:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40712c:	68fb      	ldr	r3, [r7, #12]
  40712e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  407130:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  407132:	68fb      	ldr	r3, [r7, #12]
  407134:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  407136:	687b      	ldr	r3, [r7, #4]
  407138:	43d9      	mvns	r1, r3
  40713a:	697b      	ldr	r3, [r7, #20]
  40713c:	400b      	ands	r3, r1
  40713e:	401a      	ands	r2, r3
  407140:	68fb      	ldr	r3, [r7, #12]
  407142:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  407144:	e025      	b.n	407192 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  407146:	68fb      	ldr	r3, [r7, #12]
  407148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40714a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40714c:	68fb      	ldr	r3, [r7, #12]
  40714e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  407150:	687b      	ldr	r3, [r7, #4]
  407152:	43d9      	mvns	r1, r3
  407154:	697b      	ldr	r3, [r7, #20]
  407156:	400b      	ands	r3, r1
  407158:	401a      	ands	r2, r3
  40715a:	68fb      	ldr	r3, [r7, #12]
  40715c:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40715e:	68fb      	ldr	r3, [r7, #12]
  407160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  407162:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  407164:	687a      	ldr	r2, [r7, #4]
  407166:	697b      	ldr	r3, [r7, #20]
  407168:	431a      	orrs	r2, r3
  40716a:	68fb      	ldr	r3, [r7, #12]
  40716c:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40716e:	e010      	b.n	407192 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  407170:	68fb      	ldr	r3, [r7, #12]
  407172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  407174:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  407176:	687a      	ldr	r2, [r7, #4]
  407178:	697b      	ldr	r3, [r7, #20]
  40717a:	431a      	orrs	r2, r3
  40717c:	68fb      	ldr	r3, [r7, #12]
  40717e:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  407180:	68fb      	ldr	r3, [r7, #12]
  407182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  407184:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  407186:	687a      	ldr	r2, [r7, #4]
  407188:	697b      	ldr	r3, [r7, #20]
  40718a:	431a      	orrs	r2, r3
  40718c:	68fb      	ldr	r3, [r7, #12]
  40718e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  407190:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  407192:	68fb      	ldr	r3, [r7, #12]
  407194:	687a      	ldr	r2, [r7, #4]
  407196:	605a      	str	r2, [r3, #4]
  407198:	e000      	b.n	40719c <pio_set_peripheral+0x106>
		return;
  40719a:	bf00      	nop
}
  40719c:	371c      	adds	r7, #28
  40719e:	46bd      	mov	sp, r7
  4071a0:	bc80      	pop	{r7}
  4071a2:	4770      	bx	lr

004071a4 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  4071a4:	b580      	push	{r7, lr}
  4071a6:	b084      	sub	sp, #16
  4071a8:	af00      	add	r7, sp, #0
  4071aa:	60f8      	str	r0, [r7, #12]
  4071ac:	60b9      	str	r1, [r7, #8]
  4071ae:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  4071b0:	68b9      	ldr	r1, [r7, #8]
  4071b2:	68f8      	ldr	r0, [r7, #12]
  4071b4:	4b19      	ldr	r3, [pc, #100]	; (40721c <pio_set_input+0x78>)
  4071b6:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  4071b8:	687b      	ldr	r3, [r7, #4]
  4071ba:	f003 0301 	and.w	r3, r3, #1
  4071be:	461a      	mov	r2, r3
  4071c0:	68b9      	ldr	r1, [r7, #8]
  4071c2:	68f8      	ldr	r0, [r7, #12]
  4071c4:	4b16      	ldr	r3, [pc, #88]	; (407220 <pio_set_input+0x7c>)
  4071c6:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4071c8:	687b      	ldr	r3, [r7, #4]
  4071ca:	f003 030a 	and.w	r3, r3, #10
  4071ce:	2b00      	cmp	r3, #0
  4071d0:	d003      	beq.n	4071da <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  4071d2:	68fb      	ldr	r3, [r7, #12]
  4071d4:	68ba      	ldr	r2, [r7, #8]
  4071d6:	621a      	str	r2, [r3, #32]
  4071d8:	e002      	b.n	4071e0 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  4071da:	68fb      	ldr	r3, [r7, #12]
  4071dc:	68ba      	ldr	r2, [r7, #8]
  4071de:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  4071e0:	687b      	ldr	r3, [r7, #4]
  4071e2:	f003 0302 	and.w	r3, r3, #2
  4071e6:	2b00      	cmp	r3, #0
  4071e8:	d004      	beq.n	4071f4 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  4071ea:	68fb      	ldr	r3, [r7, #12]
  4071ec:	68ba      	ldr	r2, [r7, #8]
  4071ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  4071f2:	e008      	b.n	407206 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4071f4:	687b      	ldr	r3, [r7, #4]
  4071f6:	f003 0308 	and.w	r3, r3, #8
  4071fa:	2b00      	cmp	r3, #0
  4071fc:	d003      	beq.n	407206 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  4071fe:	68fb      	ldr	r3, [r7, #12]
  407200:	68ba      	ldr	r2, [r7, #8]
  407202:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  407206:	68fb      	ldr	r3, [r7, #12]
  407208:	68ba      	ldr	r2, [r7, #8]
  40720a:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  40720c:	68fb      	ldr	r3, [r7, #12]
  40720e:	68ba      	ldr	r2, [r7, #8]
  407210:	601a      	str	r2, [r3, #0]
}
  407212:	bf00      	nop
  407214:	3710      	adds	r7, #16
  407216:	46bd      	mov	sp, r7
  407218:	bd80      	pop	{r7, pc}
  40721a:	bf00      	nop
  40721c:	004072b7 	.word	0x004072b7
  407220:	0040706d 	.word	0x0040706d

00407224 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  407224:	b580      	push	{r7, lr}
  407226:	b084      	sub	sp, #16
  407228:	af00      	add	r7, sp, #0
  40722a:	60f8      	str	r0, [r7, #12]
  40722c:	60b9      	str	r1, [r7, #8]
  40722e:	607a      	str	r2, [r7, #4]
  407230:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  407232:	68b9      	ldr	r1, [r7, #8]
  407234:	68f8      	ldr	r0, [r7, #12]
  407236:	4b12      	ldr	r3, [pc, #72]	; (407280 <pio_set_output+0x5c>)
  407238:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  40723a:	69ba      	ldr	r2, [r7, #24]
  40723c:	68b9      	ldr	r1, [r7, #8]
  40723e:	68f8      	ldr	r0, [r7, #12]
  407240:	4b10      	ldr	r3, [pc, #64]	; (407284 <pio_set_output+0x60>)
  407242:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  407244:	683b      	ldr	r3, [r7, #0]
  407246:	2b00      	cmp	r3, #0
  407248:	d003      	beq.n	407252 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  40724a:	68fb      	ldr	r3, [r7, #12]
  40724c:	68ba      	ldr	r2, [r7, #8]
  40724e:	651a      	str	r2, [r3, #80]	; 0x50
  407250:	e002      	b.n	407258 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  407252:	68fb      	ldr	r3, [r7, #12]
  407254:	68ba      	ldr	r2, [r7, #8]
  407256:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  407258:	687b      	ldr	r3, [r7, #4]
  40725a:	2b00      	cmp	r3, #0
  40725c:	d003      	beq.n	407266 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  40725e:	68fb      	ldr	r3, [r7, #12]
  407260:	68ba      	ldr	r2, [r7, #8]
  407262:	631a      	str	r2, [r3, #48]	; 0x30
  407264:	e002      	b.n	40726c <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  407266:	68fb      	ldr	r3, [r7, #12]
  407268:	68ba      	ldr	r2, [r7, #8]
  40726a:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  40726c:	68fb      	ldr	r3, [r7, #12]
  40726e:	68ba      	ldr	r2, [r7, #8]
  407270:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  407272:	68fb      	ldr	r3, [r7, #12]
  407274:	68ba      	ldr	r2, [r7, #8]
  407276:	601a      	str	r2, [r3, #0]
}
  407278:	bf00      	nop
  40727a:	3710      	adds	r7, #16
  40727c:	46bd      	mov	sp, r7
  40727e:	bd80      	pop	{r7, pc}
  407280:	004072b7 	.word	0x004072b7
  407284:	0040706d 	.word	0x0040706d

00407288 <pio_pull_down>:
 * \param ul_pull_down_enable Indicates if the pin(s) internal pull-down shall
 * be configured.
 */
void pio_pull_down(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_down_enable)
{
  407288:	b480      	push	{r7}
  40728a:	b085      	sub	sp, #20
  40728c:	af00      	add	r7, sp, #0
  40728e:	60f8      	str	r0, [r7, #12]
  407290:	60b9      	str	r1, [r7, #8]
  407292:	607a      	str	r2, [r7, #4]
	/* Enable the pull-down if necessary */
	if (ul_pull_down_enable) {
  407294:	687b      	ldr	r3, [r7, #4]
  407296:	2b00      	cmp	r3, #0
  407298:	d004      	beq.n	4072a4 <pio_pull_down+0x1c>
		p_pio->PIO_PPDER = ul_mask;
  40729a:	68fb      	ldr	r3, [r7, #12]
  40729c:	68ba      	ldr	r2, [r7, #8]
  40729e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	} else {
		p_pio->PIO_PPDDR = ul_mask;
	}
}
  4072a2:	e003      	b.n	4072ac <pio_pull_down+0x24>
		p_pio->PIO_PPDDR = ul_mask;
  4072a4:	68fb      	ldr	r3, [r7, #12]
  4072a6:	68ba      	ldr	r2, [r7, #8]
  4072a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
  4072ac:	bf00      	nop
  4072ae:	3714      	adds	r7, #20
  4072b0:	46bd      	mov	sp, r7
  4072b2:	bc80      	pop	{r7}
  4072b4:	4770      	bx	lr

004072b6 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4072b6:	b480      	push	{r7}
  4072b8:	b083      	sub	sp, #12
  4072ba:	af00      	add	r7, sp, #0
  4072bc:	6078      	str	r0, [r7, #4]
  4072be:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  4072c0:	687b      	ldr	r3, [r7, #4]
  4072c2:	683a      	ldr	r2, [r7, #0]
  4072c4:	645a      	str	r2, [r3, #68]	; 0x44
}
  4072c6:	bf00      	nop
  4072c8:	370c      	adds	r7, #12
  4072ca:	46bd      	mov	sp, r7
  4072cc:	bc80      	pop	{r7}
  4072ce:	4770      	bx	lr

004072d0 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4072d0:	b480      	push	{r7}
  4072d2:	b083      	sub	sp, #12
  4072d4:	af00      	add	r7, sp, #0
  4072d6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4072d8:	687b      	ldr	r3, [r7, #4]
  4072da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4072dc:	4618      	mov	r0, r3
  4072de:	370c      	adds	r7, #12
  4072e0:	46bd      	mov	sp, r7
  4072e2:	bc80      	pop	{r7}
  4072e4:	4770      	bx	lr

004072e6 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4072e6:	b480      	push	{r7}
  4072e8:	b083      	sub	sp, #12
  4072ea:	af00      	add	r7, sp, #0
  4072ec:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4072ee:	687b      	ldr	r3, [r7, #4]
  4072f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4072f2:	4618      	mov	r0, r3
  4072f4:	370c      	adds	r7, #12
  4072f6:	46bd      	mov	sp, r7
  4072f8:	bc80      	pop	{r7}
  4072fa:	4770      	bx	lr

004072fc <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
  4072fc:	b580      	push	{r7, lr}
  4072fe:	b084      	sub	sp, #16
  407300:	af00      	add	r7, sp, #0
  407302:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  407304:	6878      	ldr	r0, [r7, #4]
  407306:	4b08      	ldr	r3, [pc, #32]	; (407328 <pio_set_pin_high+0x2c>)
  407308:	4798      	blx	r3
  40730a:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  40730c:	687b      	ldr	r3, [r7, #4]
  40730e:	f003 031f 	and.w	r3, r3, #31
  407312:	2201      	movs	r2, #1
  407314:	fa02 f303 	lsl.w	r3, r2, r3
  407318:	461a      	mov	r2, r3
  40731a:	68fb      	ldr	r3, [r7, #12]
  40731c:	631a      	str	r2, [r3, #48]	; 0x30
}
  40731e:	bf00      	nop
  407320:	3710      	adds	r7, #16
  407322:	46bd      	mov	sp, r7
  407324:	bd80      	pop	{r7, pc}
  407326:	bf00      	nop
  407328:	00407639 	.word	0x00407639

0040732c <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
  40732c:	b580      	push	{r7, lr}
  40732e:	b084      	sub	sp, #16
  407330:	af00      	add	r7, sp, #0
  407332:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  407334:	6878      	ldr	r0, [r7, #4]
  407336:	4b08      	ldr	r3, [pc, #32]	; (407358 <pio_set_pin_low+0x2c>)
  407338:	4798      	blx	r3
  40733a:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  40733c:	687b      	ldr	r3, [r7, #4]
  40733e:	f003 031f 	and.w	r3, r3, #31
  407342:	2201      	movs	r2, #1
  407344:	fa02 f303 	lsl.w	r3, r2, r3
  407348:	461a      	mov	r2, r3
  40734a:	68fb      	ldr	r3, [r7, #12]
  40734c:	635a      	str	r2, [r3, #52]	; 0x34
}
  40734e:	bf00      	nop
  407350:	3710      	adds	r7, #16
  407352:	46bd      	mov	sp, r7
  407354:	bd80      	pop	{r7, pc}
  407356:	bf00      	nop
  407358:	00407639 	.word	0x00407639

0040735c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  40735c:	b590      	push	{r4, r7, lr}
  40735e:	b087      	sub	sp, #28
  407360:	af02      	add	r7, sp, #8
  407362:	6078      	str	r0, [r7, #4]
  407364:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  407366:	6878      	ldr	r0, [r7, #4]
  407368:	4b63      	ldr	r3, [pc, #396]	; (4074f8 <pio_configure_pin+0x19c>)
  40736a:	4798      	blx	r3
  40736c:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40736e:	683b      	ldr	r3, [r7, #0]
  407370:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  407374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  407378:	d067      	beq.n	40744a <pio_configure_pin+0xee>
  40737a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40737e:	d809      	bhi.n	407394 <pio_configure_pin+0x38>
  407380:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  407384:	d02b      	beq.n	4073de <pio_configure_pin+0x82>
  407386:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40738a:	d043      	beq.n	407414 <pio_configure_pin+0xb8>
  40738c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  407390:	d00a      	beq.n	4073a8 <pio_configure_pin+0x4c>
  407392:	e0a9      	b.n	4074e8 <pio_configure_pin+0x18c>
  407394:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  407398:	d07e      	beq.n	407498 <pio_configure_pin+0x13c>
  40739a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40739e:	d07b      	beq.n	407498 <pio_configure_pin+0x13c>
  4073a0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4073a4:	d06c      	beq.n	407480 <pio_configure_pin+0x124>
  4073a6:	e09f      	b.n	4074e8 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4073a8:	687b      	ldr	r3, [r7, #4]
  4073aa:	f003 031f 	and.w	r3, r3, #31
  4073ae:	2201      	movs	r2, #1
  4073b0:	fa02 f303 	lsl.w	r3, r2, r3
  4073b4:	461a      	mov	r2, r3
  4073b6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4073ba:	68f8      	ldr	r0, [r7, #12]
  4073bc:	4b4f      	ldr	r3, [pc, #316]	; (4074fc <pio_configure_pin+0x1a0>)
  4073be:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4073c0:	687b      	ldr	r3, [r7, #4]
  4073c2:	f003 031f 	and.w	r3, r3, #31
  4073c6:	2201      	movs	r2, #1
  4073c8:	fa02 f303 	lsl.w	r3, r2, r3
  4073cc:	4619      	mov	r1, r3
  4073ce:	683b      	ldr	r3, [r7, #0]
  4073d0:	f003 0301 	and.w	r3, r3, #1
  4073d4:	461a      	mov	r2, r3
  4073d6:	68f8      	ldr	r0, [r7, #12]
  4073d8:	4b49      	ldr	r3, [pc, #292]	; (407500 <pio_configure_pin+0x1a4>)
  4073da:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4073dc:	e086      	b.n	4074ec <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4073de:	687b      	ldr	r3, [r7, #4]
  4073e0:	f003 031f 	and.w	r3, r3, #31
  4073e4:	2201      	movs	r2, #1
  4073e6:	fa02 f303 	lsl.w	r3, r2, r3
  4073ea:	461a      	mov	r2, r3
  4073ec:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4073f0:	68f8      	ldr	r0, [r7, #12]
  4073f2:	4b42      	ldr	r3, [pc, #264]	; (4074fc <pio_configure_pin+0x1a0>)
  4073f4:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4073f6:	687b      	ldr	r3, [r7, #4]
  4073f8:	f003 031f 	and.w	r3, r3, #31
  4073fc:	2201      	movs	r2, #1
  4073fe:	fa02 f303 	lsl.w	r3, r2, r3
  407402:	4619      	mov	r1, r3
  407404:	683b      	ldr	r3, [r7, #0]
  407406:	f003 0301 	and.w	r3, r3, #1
  40740a:	461a      	mov	r2, r3
  40740c:	68f8      	ldr	r0, [r7, #12]
  40740e:	4b3c      	ldr	r3, [pc, #240]	; (407500 <pio_configure_pin+0x1a4>)
  407410:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  407412:	e06b      	b.n	4074ec <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  407414:	687b      	ldr	r3, [r7, #4]
  407416:	f003 031f 	and.w	r3, r3, #31
  40741a:	2201      	movs	r2, #1
  40741c:	fa02 f303 	lsl.w	r3, r2, r3
  407420:	461a      	mov	r2, r3
  407422:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  407426:	68f8      	ldr	r0, [r7, #12]
  407428:	4b34      	ldr	r3, [pc, #208]	; (4074fc <pio_configure_pin+0x1a0>)
  40742a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  40742c:	687b      	ldr	r3, [r7, #4]
  40742e:	f003 031f 	and.w	r3, r3, #31
  407432:	2201      	movs	r2, #1
  407434:	fa02 f303 	lsl.w	r3, r2, r3
  407438:	4619      	mov	r1, r3
  40743a:	683b      	ldr	r3, [r7, #0]
  40743c:	f003 0301 	and.w	r3, r3, #1
  407440:	461a      	mov	r2, r3
  407442:	68f8      	ldr	r0, [r7, #12]
  407444:	4b2e      	ldr	r3, [pc, #184]	; (407500 <pio_configure_pin+0x1a4>)
  407446:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  407448:	e050      	b.n	4074ec <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40744a:	687b      	ldr	r3, [r7, #4]
  40744c:	f003 031f 	and.w	r3, r3, #31
  407450:	2201      	movs	r2, #1
  407452:	fa02 f303 	lsl.w	r3, r2, r3
  407456:	461a      	mov	r2, r3
  407458:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40745c:	68f8      	ldr	r0, [r7, #12]
  40745e:	4b27      	ldr	r3, [pc, #156]	; (4074fc <pio_configure_pin+0x1a0>)
  407460:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  407462:	687b      	ldr	r3, [r7, #4]
  407464:	f003 031f 	and.w	r3, r3, #31
  407468:	2201      	movs	r2, #1
  40746a:	fa02 f303 	lsl.w	r3, r2, r3
  40746e:	4619      	mov	r1, r3
  407470:	683b      	ldr	r3, [r7, #0]
  407472:	f003 0301 	and.w	r3, r3, #1
  407476:	461a      	mov	r2, r3
  407478:	68f8      	ldr	r0, [r7, #12]
  40747a:	4b21      	ldr	r3, [pc, #132]	; (407500 <pio_configure_pin+0x1a4>)
  40747c:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40747e:	e035      	b.n	4074ec <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  407480:	687b      	ldr	r3, [r7, #4]
  407482:	f003 031f 	and.w	r3, r3, #31
  407486:	2201      	movs	r2, #1
  407488:	fa02 f303 	lsl.w	r3, r2, r3
  40748c:	683a      	ldr	r2, [r7, #0]
  40748e:	4619      	mov	r1, r3
  407490:	68f8      	ldr	r0, [r7, #12]
  407492:	4b1c      	ldr	r3, [pc, #112]	; (407504 <pio_configure_pin+0x1a8>)
  407494:	4798      	blx	r3
		break;
  407496:	e029      	b.n	4074ec <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  407498:	687b      	ldr	r3, [r7, #4]
  40749a:	f003 031f 	and.w	r3, r3, #31
  40749e:	2201      	movs	r2, #1
  4074a0:	fa02 f303 	lsl.w	r3, r2, r3
  4074a4:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4074a6:	683b      	ldr	r3, [r7, #0]
  4074a8:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4074ac:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4074b0:	bf0c      	ite	eq
  4074b2:	2301      	moveq	r3, #1
  4074b4:	2300      	movne	r3, #0
  4074b6:	b2db      	uxtb	r3, r3
  4074b8:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  4074ba:	683b      	ldr	r3, [r7, #0]
  4074bc:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4074c0:	2b00      	cmp	r3, #0
  4074c2:	bf14      	ite	ne
  4074c4:	2301      	movne	r3, #1
  4074c6:	2300      	moveq	r3, #0
  4074c8:	b2db      	uxtb	r3, r3
  4074ca:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  4074cc:	683b      	ldr	r3, [r7, #0]
  4074ce:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4074d2:	2b00      	cmp	r3, #0
  4074d4:	bf14      	ite	ne
  4074d6:	2301      	movne	r3, #1
  4074d8:	2300      	moveq	r3, #0
  4074da:	b2db      	uxtb	r3, r3
  4074dc:	9300      	str	r3, [sp, #0]
  4074de:	4603      	mov	r3, r0
  4074e0:	68f8      	ldr	r0, [r7, #12]
  4074e2:	4c09      	ldr	r4, [pc, #36]	; (407508 <pio_configure_pin+0x1ac>)
  4074e4:	47a0      	blx	r4
		break;
  4074e6:	e001      	b.n	4074ec <pio_configure_pin+0x190>

	default:
		return 0;
  4074e8:	2300      	movs	r3, #0
  4074ea:	e000      	b.n	4074ee <pio_configure_pin+0x192>
	}

	return 1;
  4074ec:	2301      	movs	r3, #1
}
  4074ee:	4618      	mov	r0, r3
  4074f0:	3714      	adds	r7, #20
  4074f2:	46bd      	mov	sp, r7
  4074f4:	bd90      	pop	{r4, r7, pc}
  4074f6:	bf00      	nop
  4074f8:	00407639 	.word	0x00407639
  4074fc:	00407097 	.word	0x00407097
  407500:	0040706d 	.word	0x0040706d
  407504:	004071a5 	.word	0x004071a5
  407508:	00407225 	.word	0x00407225

0040750c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  40750c:	b590      	push	{r4, r7, lr}
  40750e:	b087      	sub	sp, #28
  407510:	af02      	add	r7, sp, #8
  407512:	60f8      	str	r0, [r7, #12]
  407514:	60b9      	str	r1, [r7, #8]
  407516:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  407518:	687b      	ldr	r3, [r7, #4]
  40751a:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  40751e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  407522:	d043      	beq.n	4075ac <pio_configure_pin_group+0xa0>
  407524:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  407528:	d809      	bhi.n	40753e <pio_configure_pin_group+0x32>
  40752a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40752e:	d01f      	beq.n	407570 <pio_configure_pin_group+0x64>
  407530:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  407534:	d02b      	beq.n	40758e <pio_configure_pin_group+0x82>
  407536:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40753a:	d00a      	beq.n	407552 <pio_configure_pin_group+0x46>
  40753c:	e06d      	b.n	40761a <pio_configure_pin_group+0x10e>
  40753e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  407542:	d048      	beq.n	4075d6 <pio_configure_pin_group+0xca>
  407544:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  407548:	d045      	beq.n	4075d6 <pio_configure_pin_group+0xca>
  40754a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40754e:	d03c      	beq.n	4075ca <pio_configure_pin_group+0xbe>
  407550:	e063      	b.n	40761a <pio_configure_pin_group+0x10e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  407552:	68ba      	ldr	r2, [r7, #8]
  407554:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  407558:	68f8      	ldr	r0, [r7, #12]
  40755a:	4b33      	ldr	r3, [pc, #204]	; (407628 <pio_configure_pin_group+0x11c>)
  40755c:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  40755e:	687b      	ldr	r3, [r7, #4]
  407560:	f003 0301 	and.w	r3, r3, #1
  407564:	461a      	mov	r2, r3
  407566:	68b9      	ldr	r1, [r7, #8]
  407568:	68f8      	ldr	r0, [r7, #12]
  40756a:	4b30      	ldr	r3, [pc, #192]	; (40762c <pio_configure_pin_group+0x120>)
  40756c:	4798      	blx	r3
		break;
  40756e:	e056      	b.n	40761e <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  407570:	68ba      	ldr	r2, [r7, #8]
  407572:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  407576:	68f8      	ldr	r0, [r7, #12]
  407578:	4b2b      	ldr	r3, [pc, #172]	; (407628 <pio_configure_pin_group+0x11c>)
  40757a:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  40757c:	687b      	ldr	r3, [r7, #4]
  40757e:	f003 0301 	and.w	r3, r3, #1
  407582:	461a      	mov	r2, r3
  407584:	68b9      	ldr	r1, [r7, #8]
  407586:	68f8      	ldr	r0, [r7, #12]
  407588:	4b28      	ldr	r3, [pc, #160]	; (40762c <pio_configure_pin_group+0x120>)
  40758a:	4798      	blx	r3
		break;
  40758c:	e047      	b.n	40761e <pio_configure_pin_group+0x112>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  40758e:	68ba      	ldr	r2, [r7, #8]
  407590:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  407594:	68f8      	ldr	r0, [r7, #12]
  407596:	4b24      	ldr	r3, [pc, #144]	; (407628 <pio_configure_pin_group+0x11c>)
  407598:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  40759a:	687b      	ldr	r3, [r7, #4]
  40759c:	f003 0301 	and.w	r3, r3, #1
  4075a0:	461a      	mov	r2, r3
  4075a2:	68b9      	ldr	r1, [r7, #8]
  4075a4:	68f8      	ldr	r0, [r7, #12]
  4075a6:	4b21      	ldr	r3, [pc, #132]	; (40762c <pio_configure_pin_group+0x120>)
  4075a8:	4798      	blx	r3
		break;
  4075aa:	e038      	b.n	40761e <pio_configure_pin_group+0x112>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  4075ac:	68ba      	ldr	r2, [r7, #8]
  4075ae:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4075b2:	68f8      	ldr	r0, [r7, #12]
  4075b4:	4b1c      	ldr	r3, [pc, #112]	; (407628 <pio_configure_pin_group+0x11c>)
  4075b6:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  4075b8:	687b      	ldr	r3, [r7, #4]
  4075ba:	f003 0301 	and.w	r3, r3, #1
  4075be:	461a      	mov	r2, r3
  4075c0:	68b9      	ldr	r1, [r7, #8]
  4075c2:	68f8      	ldr	r0, [r7, #12]
  4075c4:	4b19      	ldr	r3, [pc, #100]	; (40762c <pio_configure_pin_group+0x120>)
  4075c6:	4798      	blx	r3
		break;
  4075c8:	e029      	b.n	40761e <pio_configure_pin_group+0x112>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  4075ca:	687a      	ldr	r2, [r7, #4]
  4075cc:	68b9      	ldr	r1, [r7, #8]
  4075ce:	68f8      	ldr	r0, [r7, #12]
  4075d0:	4b17      	ldr	r3, [pc, #92]	; (407630 <pio_configure_pin_group+0x124>)
  4075d2:	4798      	blx	r3
		break;
  4075d4:	e023      	b.n	40761e <pio_configure_pin_group+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4075d6:	687b      	ldr	r3, [r7, #4]
  4075d8:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
  4075dc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4075e0:	bf0c      	ite	eq
  4075e2:	2301      	moveq	r3, #1
  4075e4:	2300      	movne	r3, #0
  4075e6:	b2db      	uxtb	r3, r3
  4075e8:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  4075ea:	687b      	ldr	r3, [r7, #4]
  4075ec:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask,
  4075f0:	2b00      	cmp	r3, #0
  4075f2:	bf14      	ite	ne
  4075f4:	2301      	movne	r3, #1
  4075f6:	2300      	moveq	r3, #0
  4075f8:	b2db      	uxtb	r3, r3
  4075fa:	4619      	mov	r1, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  4075fc:	687b      	ldr	r3, [r7, #4]
  4075fe:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask,
  407602:	2b00      	cmp	r3, #0
  407604:	bf14      	ite	ne
  407606:	2301      	movne	r3, #1
  407608:	2300      	moveq	r3, #0
  40760a:	b2db      	uxtb	r3, r3
  40760c:	9300      	str	r3, [sp, #0]
  40760e:	460b      	mov	r3, r1
  407610:	68b9      	ldr	r1, [r7, #8]
  407612:	68f8      	ldr	r0, [r7, #12]
  407614:	4c07      	ldr	r4, [pc, #28]	; (407634 <pio_configure_pin_group+0x128>)
  407616:	47a0      	blx	r4
		break;
  407618:	e001      	b.n	40761e <pio_configure_pin_group+0x112>

	default:
		return 0;
  40761a:	2300      	movs	r3, #0
  40761c:	e000      	b.n	407620 <pio_configure_pin_group+0x114>
	}

	return 1;
  40761e:	2301      	movs	r3, #1
}
  407620:	4618      	mov	r0, r3
  407622:	3714      	adds	r7, #20
  407624:	46bd      	mov	sp, r7
  407626:	bd90      	pop	{r4, r7, pc}
  407628:	00407097 	.word	0x00407097
  40762c:	0040706d 	.word	0x0040706d
  407630:	004071a5 	.word	0x004071a5
  407634:	00407225 	.word	0x00407225

00407638 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  407638:	b480      	push	{r7}
  40763a:	b085      	sub	sp, #20
  40763c:	af00      	add	r7, sp, #0
  40763e:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  407640:	687b      	ldr	r3, [r7, #4]
  407642:	095b      	lsrs	r3, r3, #5
  407644:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  407648:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40764c:	025b      	lsls	r3, r3, #9
  40764e:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  407650:	68fb      	ldr	r3, [r7, #12]
}
  407652:	4618      	mov	r0, r3
  407654:	3714      	adds	r7, #20
  407656:	46bd      	mov	sp, r7
  407658:	bc80      	pop	{r7}
  40765a:	4770      	bx	lr

0040765c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  40765c:	b480      	push	{r7}
  40765e:	b085      	sub	sp, #20
  407660:	af00      	add	r7, sp, #0
  407662:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  407664:	491c      	ldr	r1, [pc, #112]	; (4076d8 <pmc_switch_mck_to_pllack+0x7c>)
  407666:	4b1c      	ldr	r3, [pc, #112]	; (4076d8 <pmc_switch_mck_to_pllack+0x7c>)
  407668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40766a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40766e:	687b      	ldr	r3, [r7, #4]
  407670:	4313      	orrs	r3, r2
  407672:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  407674:	f44f 6300 	mov.w	r3, #2048	; 0x800
  407678:	60fb      	str	r3, [r7, #12]
  40767a:	e007      	b.n	40768c <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40767c:	68fb      	ldr	r3, [r7, #12]
  40767e:	2b00      	cmp	r3, #0
  407680:	d101      	bne.n	407686 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  407682:	2301      	movs	r3, #1
  407684:	e023      	b.n	4076ce <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  407686:	68fb      	ldr	r3, [r7, #12]
  407688:	3b01      	subs	r3, #1
  40768a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40768c:	4b12      	ldr	r3, [pc, #72]	; (4076d8 <pmc_switch_mck_to_pllack+0x7c>)
  40768e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  407690:	f003 0308 	and.w	r3, r3, #8
  407694:	2b00      	cmp	r3, #0
  407696:	d0f1      	beq.n	40767c <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  407698:	4a0f      	ldr	r2, [pc, #60]	; (4076d8 <pmc_switch_mck_to_pllack+0x7c>)
  40769a:	4b0f      	ldr	r3, [pc, #60]	; (4076d8 <pmc_switch_mck_to_pllack+0x7c>)
  40769c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40769e:	f023 0303 	bic.w	r3, r3, #3
  4076a2:	f043 0302 	orr.w	r3, r3, #2
  4076a6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4076a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4076ac:	60fb      	str	r3, [r7, #12]
  4076ae:	e007      	b.n	4076c0 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4076b0:	68fb      	ldr	r3, [r7, #12]
  4076b2:	2b00      	cmp	r3, #0
  4076b4:	d101      	bne.n	4076ba <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  4076b6:	2301      	movs	r3, #1
  4076b8:	e009      	b.n	4076ce <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4076ba:	68fb      	ldr	r3, [r7, #12]
  4076bc:	3b01      	subs	r3, #1
  4076be:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4076c0:	4b05      	ldr	r3, [pc, #20]	; (4076d8 <pmc_switch_mck_to_pllack+0x7c>)
  4076c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4076c4:	f003 0308 	and.w	r3, r3, #8
  4076c8:	2b00      	cmp	r3, #0
  4076ca:	d0f1      	beq.n	4076b0 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  4076cc:	2300      	movs	r3, #0
}
  4076ce:	4618      	mov	r0, r3
  4076d0:	3714      	adds	r7, #20
  4076d2:	46bd      	mov	sp, r7
  4076d4:	bc80      	pop	{r7}
  4076d6:	4770      	bx	lr
  4076d8:	400e0400 	.word	0x400e0400

004076dc <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4076dc:	b480      	push	{r7}
  4076de:	b083      	sub	sp, #12
  4076e0:	af00      	add	r7, sp, #0
  4076e2:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4076e4:	687b      	ldr	r3, [r7, #4]
  4076e6:	2b01      	cmp	r3, #1
  4076e8:	d107      	bne.n	4076fa <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4076ea:	4a08      	ldr	r2, [pc, #32]	; (40770c <pmc_switch_sclk_to_32kxtal+0x30>)
  4076ec:	4b07      	ldr	r3, [pc, #28]	; (40770c <pmc_switch_sclk_to_32kxtal+0x30>)
  4076ee:	689b      	ldr	r3, [r3, #8]
  4076f0:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  4076f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4076f8:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4076fa:	4b04      	ldr	r3, [pc, #16]	; (40770c <pmc_switch_sclk_to_32kxtal+0x30>)
  4076fc:	4a04      	ldr	r2, [pc, #16]	; (407710 <pmc_switch_sclk_to_32kxtal+0x34>)
  4076fe:	601a      	str	r2, [r3, #0]
}
  407700:	bf00      	nop
  407702:	370c      	adds	r7, #12
  407704:	46bd      	mov	sp, r7
  407706:	bc80      	pop	{r7}
  407708:	4770      	bx	lr
  40770a:	bf00      	nop
  40770c:	400e1410 	.word	0x400e1410
  407710:	a5000008 	.word	0xa5000008

00407714 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  407714:	b480      	push	{r7}
  407716:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  407718:	4b09      	ldr	r3, [pc, #36]	; (407740 <pmc_osc_is_ready_32kxtal+0x2c>)
  40771a:	695b      	ldr	r3, [r3, #20]
  40771c:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  407720:	2b00      	cmp	r3, #0
  407722:	d007      	beq.n	407734 <pmc_osc_is_ready_32kxtal+0x20>
  407724:	4b07      	ldr	r3, [pc, #28]	; (407744 <pmc_osc_is_ready_32kxtal+0x30>)
  407726:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  407728:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40772c:	2b00      	cmp	r3, #0
  40772e:	d001      	beq.n	407734 <pmc_osc_is_ready_32kxtal+0x20>
  407730:	2301      	movs	r3, #1
  407732:	e000      	b.n	407736 <pmc_osc_is_ready_32kxtal+0x22>
  407734:	2300      	movs	r3, #0
}
  407736:	4618      	mov	r0, r3
  407738:	46bd      	mov	sp, r7
  40773a:	bc80      	pop	{r7}
  40773c:	4770      	bx	lr
  40773e:	bf00      	nop
  407740:	400e1410 	.word	0x400e1410
  407744:	400e0400 	.word	0x400e0400

00407748 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  407748:	b480      	push	{r7}
  40774a:	b083      	sub	sp, #12
  40774c:	af00      	add	r7, sp, #0
  40774e:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  407750:	4a18      	ldr	r2, [pc, #96]	; (4077b4 <pmc_switch_mainck_to_fastrc+0x6c>)
  407752:	4b18      	ldr	r3, [pc, #96]	; (4077b4 <pmc_switch_mainck_to_fastrc+0x6c>)
  407754:	6a1b      	ldr	r3, [r3, #32]
  407756:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40775a:	f043 0308 	orr.w	r3, r3, #8
  40775e:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  407760:	bf00      	nop
  407762:	4b14      	ldr	r3, [pc, #80]	; (4077b4 <pmc_switch_mainck_to_fastrc+0x6c>)
  407764:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  407766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40776a:	2b00      	cmp	r3, #0
  40776c:	d0f9      	beq.n	407762 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40776e:	4911      	ldr	r1, [pc, #68]	; (4077b4 <pmc_switch_mainck_to_fastrc+0x6c>)
  407770:	4b10      	ldr	r3, [pc, #64]	; (4077b4 <pmc_switch_mainck_to_fastrc+0x6c>)
  407772:	6a1b      	ldr	r3, [r3, #32]
  407774:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  407778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  40777c:	687a      	ldr	r2, [r7, #4]
  40777e:	4313      	orrs	r3, r2
  407780:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  407784:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  407786:	bf00      	nop
  407788:	4b0a      	ldr	r3, [pc, #40]	; (4077b4 <pmc_switch_mainck_to_fastrc+0x6c>)
  40778a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40778c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  407790:	2b00      	cmp	r3, #0
  407792:	d0f9      	beq.n	407788 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  407794:	4a07      	ldr	r2, [pc, #28]	; (4077b4 <pmc_switch_mainck_to_fastrc+0x6c>)
  407796:	4b07      	ldr	r3, [pc, #28]	; (4077b4 <pmc_switch_mainck_to_fastrc+0x6c>)
  407798:	6a1b      	ldr	r3, [r3, #32]
  40779a:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  40779e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4077a2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4077a6:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4077a8:	bf00      	nop
  4077aa:	370c      	adds	r7, #12
  4077ac:	46bd      	mov	sp, r7
  4077ae:	bc80      	pop	{r7}
  4077b0:	4770      	bx	lr
  4077b2:	bf00      	nop
  4077b4:	400e0400 	.word	0x400e0400

004077b8 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  4077b8:	b480      	push	{r7}
  4077ba:	b083      	sub	sp, #12
  4077bc:	af00      	add	r7, sp, #0
  4077be:	6078      	str	r0, [r7, #4]
  4077c0:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4077c2:	687b      	ldr	r3, [r7, #4]
  4077c4:	2b00      	cmp	r3, #0
  4077c6:	d008      	beq.n	4077da <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4077c8:	4916      	ldr	r1, [pc, #88]	; (407824 <pmc_switch_mainck_to_xtal+0x6c>)
  4077ca:	4b16      	ldr	r3, [pc, #88]	; (407824 <pmc_switch_mainck_to_xtal+0x6c>)
  4077cc:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4077ce:	4a16      	ldr	r2, [pc, #88]	; (407828 <pmc_switch_mainck_to_xtal+0x70>)
  4077d0:	401a      	ands	r2, r3
  4077d2:	4b16      	ldr	r3, [pc, #88]	; (40782c <pmc_switch_mainck_to_xtal+0x74>)
  4077d4:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4077d6:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  4077d8:	e01e      	b.n	407818 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4077da:	4912      	ldr	r1, [pc, #72]	; (407824 <pmc_switch_mainck_to_xtal+0x6c>)
  4077dc:	4b11      	ldr	r3, [pc, #68]	; (407824 <pmc_switch_mainck_to_xtal+0x6c>)
  4077de:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4077e0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4077e4:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4077e8:	683a      	ldr	r2, [r7, #0]
  4077ea:	0212      	lsls	r2, r2, #8
  4077ec:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4077ee:	4313      	orrs	r3, r2
  4077f0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4077f4:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4077f8:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4077fa:	bf00      	nop
  4077fc:	4b09      	ldr	r3, [pc, #36]	; (407824 <pmc_switch_mainck_to_xtal+0x6c>)
  4077fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  407800:	f003 0301 	and.w	r3, r3, #1
  407804:	2b00      	cmp	r3, #0
  407806:	d0f9      	beq.n	4077fc <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  407808:	4a06      	ldr	r2, [pc, #24]	; (407824 <pmc_switch_mainck_to_xtal+0x6c>)
  40780a:	4b06      	ldr	r3, [pc, #24]	; (407824 <pmc_switch_mainck_to_xtal+0x6c>)
  40780c:	6a1b      	ldr	r3, [r3, #32]
  40780e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  407812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  407816:	6213      	str	r3, [r2, #32]
}
  407818:	bf00      	nop
  40781a:	370c      	adds	r7, #12
  40781c:	46bd      	mov	sp, r7
  40781e:	bc80      	pop	{r7}
  407820:	4770      	bx	lr
  407822:	bf00      	nop
  407824:	400e0400 	.word	0x400e0400
  407828:	fec8fffc 	.word	0xfec8fffc
  40782c:	01370002 	.word	0x01370002

00407830 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  407830:	b480      	push	{r7}
  407832:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  407834:	4b03      	ldr	r3, [pc, #12]	; (407844 <pmc_osc_is_ready_mainck+0x14>)
  407836:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  407838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  40783c:	4618      	mov	r0, r3
  40783e:	46bd      	mov	sp, r7
  407840:	bc80      	pop	{r7}
  407842:	4770      	bx	lr
  407844:	400e0400 	.word	0x400e0400

00407848 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  407848:	b480      	push	{r7}
  40784a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40784c:	4b03      	ldr	r3, [pc, #12]	; (40785c <pmc_disable_pllack+0x14>)
  40784e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  407852:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  407854:	bf00      	nop
  407856:	46bd      	mov	sp, r7
  407858:	bc80      	pop	{r7}
  40785a:	4770      	bx	lr
  40785c:	400e0400 	.word	0x400e0400

00407860 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  407860:	b480      	push	{r7}
  407862:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  407864:	4b03      	ldr	r3, [pc, #12]	; (407874 <pmc_is_locked_pllack+0x14>)
  407866:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  407868:	f003 0302 	and.w	r3, r3, #2
}
  40786c:	4618      	mov	r0, r3
  40786e:	46bd      	mov	sp, r7
  407870:	bc80      	pop	{r7}
  407872:	4770      	bx	lr
  407874:	400e0400 	.word	0x400e0400

00407878 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  407878:	b480      	push	{r7}
  40787a:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  40787c:	4b03      	ldr	r3, [pc, #12]	; (40788c <pmc_disable_pllbck+0x14>)
  40787e:	2200      	movs	r2, #0
  407880:	62da      	str	r2, [r3, #44]	; 0x2c
}
  407882:	bf00      	nop
  407884:	46bd      	mov	sp, r7
  407886:	bc80      	pop	{r7}
  407888:	4770      	bx	lr
  40788a:	bf00      	nop
  40788c:	400e0400 	.word	0x400e0400

00407890 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  407890:	b480      	push	{r7}
  407892:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  407894:	4b03      	ldr	r3, [pc, #12]	; (4078a4 <pmc_is_locked_pllbck+0x14>)
  407896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  407898:	f003 0304 	and.w	r3, r3, #4
}
  40789c:	4618      	mov	r0, r3
  40789e:	46bd      	mov	sp, r7
  4078a0:	bc80      	pop	{r7}
  4078a2:	4770      	bx	lr
  4078a4:	400e0400 	.word	0x400e0400

004078a8 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  4078a8:	b480      	push	{r7}
  4078aa:	b083      	sub	sp, #12
  4078ac:	af00      	add	r7, sp, #0
  4078ae:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  4078b0:	687b      	ldr	r3, [r7, #4]
  4078b2:	2b22      	cmp	r3, #34	; 0x22
  4078b4:	d901      	bls.n	4078ba <pmc_enable_periph_clk+0x12>
		return 1;
  4078b6:	2301      	movs	r3, #1
  4078b8:	e02f      	b.n	40791a <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4078ba:	687b      	ldr	r3, [r7, #4]
  4078bc:	2b1f      	cmp	r3, #31
  4078be:	d813      	bhi.n	4078e8 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4078c0:	4b18      	ldr	r3, [pc, #96]	; (407924 <pmc_enable_periph_clk+0x7c>)
  4078c2:	699a      	ldr	r2, [r3, #24]
  4078c4:	2101      	movs	r1, #1
  4078c6:	687b      	ldr	r3, [r7, #4]
  4078c8:	fa01 f303 	lsl.w	r3, r1, r3
  4078cc:	401a      	ands	r2, r3
  4078ce:	2101      	movs	r1, #1
  4078d0:	687b      	ldr	r3, [r7, #4]
  4078d2:	fa01 f303 	lsl.w	r3, r1, r3
  4078d6:	429a      	cmp	r2, r3
  4078d8:	d01e      	beq.n	407918 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  4078da:	4a12      	ldr	r2, [pc, #72]	; (407924 <pmc_enable_periph_clk+0x7c>)
  4078dc:	2101      	movs	r1, #1
  4078de:	687b      	ldr	r3, [r7, #4]
  4078e0:	fa01 f303 	lsl.w	r3, r1, r3
  4078e4:	6113      	str	r3, [r2, #16]
  4078e6:	e017      	b.n	407918 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4078e8:	687b      	ldr	r3, [r7, #4]
  4078ea:	3b20      	subs	r3, #32
  4078ec:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4078ee:	4b0d      	ldr	r3, [pc, #52]	; (407924 <pmc_enable_periph_clk+0x7c>)
  4078f0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4078f4:	2101      	movs	r1, #1
  4078f6:	687b      	ldr	r3, [r7, #4]
  4078f8:	fa01 f303 	lsl.w	r3, r1, r3
  4078fc:	401a      	ands	r2, r3
  4078fe:	2101      	movs	r1, #1
  407900:	687b      	ldr	r3, [r7, #4]
  407902:	fa01 f303 	lsl.w	r3, r1, r3
  407906:	429a      	cmp	r2, r3
  407908:	d006      	beq.n	407918 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  40790a:	4a06      	ldr	r2, [pc, #24]	; (407924 <pmc_enable_periph_clk+0x7c>)
  40790c:	2101      	movs	r1, #1
  40790e:	687b      	ldr	r3, [r7, #4]
  407910:	fa01 f303 	lsl.w	r3, r1, r3
  407914:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  407918:	2300      	movs	r3, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40791a:	4618      	mov	r0, r3
  40791c:	370c      	adds	r7, #12
  40791e:	46bd      	mov	sp, r7
  407920:	bc80      	pop	{r7}
  407922:	4770      	bx	lr
  407924:	400e0400 	.word	0x400e0400

00407928 <pmc_disable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
  407928:	b480      	push	{r7}
  40792a:	b083      	sub	sp, #12
  40792c:	af00      	add	r7, sp, #0
  40792e:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  407930:	687b      	ldr	r3, [r7, #4]
  407932:	2b22      	cmp	r3, #34	; 0x22
  407934:	d901      	bls.n	40793a <pmc_disable_periph_clk+0x12>
		return 1;
  407936:	2301      	movs	r3, #1
  407938:	e02f      	b.n	40799a <pmc_disable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  40793a:	687b      	ldr	r3, [r7, #4]
  40793c:	2b1f      	cmp	r3, #31
  40793e:	d813      	bhi.n	407968 <pmc_disable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  407940:	4b18      	ldr	r3, [pc, #96]	; (4079a4 <pmc_disable_periph_clk+0x7c>)
  407942:	699a      	ldr	r2, [r3, #24]
  407944:	2101      	movs	r1, #1
  407946:	687b      	ldr	r3, [r7, #4]
  407948:	fa01 f303 	lsl.w	r3, r1, r3
  40794c:	401a      	ands	r2, r3
  40794e:	2101      	movs	r1, #1
  407950:	687b      	ldr	r3, [r7, #4]
  407952:	fa01 f303 	lsl.w	r3, r1, r3
  407956:	429a      	cmp	r2, r3
  407958:	d11e      	bne.n	407998 <pmc_disable_periph_clk+0x70>
			PMC->PMC_PCDR0 = 1 << ul_id;
  40795a:	4a12      	ldr	r2, [pc, #72]	; (4079a4 <pmc_disable_periph_clk+0x7c>)
  40795c:	2101      	movs	r1, #1
  40795e:	687b      	ldr	r3, [r7, #4]
  407960:	fa01 f303 	lsl.w	r3, r1, r3
  407964:	6153      	str	r3, [r2, #20]
  407966:	e017      	b.n	407998 <pmc_disable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 \
		|| SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  407968:	687b      	ldr	r3, [r7, #4]
  40796a:	3b20      	subs	r3, #32
  40796c:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  40796e:	4b0d      	ldr	r3, [pc, #52]	; (4079a4 <pmc_disable_periph_clk+0x7c>)
  407970:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  407974:	2101      	movs	r1, #1
  407976:	687b      	ldr	r3, [r7, #4]
  407978:	fa01 f303 	lsl.w	r3, r1, r3
  40797c:	401a      	ands	r2, r3
  40797e:	2101      	movs	r1, #1
  407980:	687b      	ldr	r3, [r7, #4]
  407982:	fa01 f303 	lsl.w	r3, r1, r3
  407986:	429a      	cmp	r2, r3
  407988:	d106      	bne.n	407998 <pmc_disable_periph_clk+0x70>
			PMC->PMC_PCDR1 = 1 << ul_id;
  40798a:	4a06      	ldr	r2, [pc, #24]	; (4079a4 <pmc_disable_periph_clk+0x7c>)
  40798c:	2101      	movs	r1, #1
  40798e:	687b      	ldr	r3, [r7, #4]
  407990:	fa01 f303 	lsl.w	r3, r1, r3
  407994:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
		}
#endif
	}
	return 0;
  407998:	2300      	movs	r3, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40799a:	4618      	mov	r0, r3
  40799c:	370c      	adds	r7, #12
  40799e:	46bd      	mov	sp, r7
  4079a0:	bc80      	pop	{r7}
  4079a2:	4770      	bx	lr
  4079a4:	400e0400 	.word	0x400e0400

004079a8 <pmc_switch_udpck_to_pllbck>:
 * \brief Switch UDP (USB) clock source selection to PLLB clock.
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_pllbck(uint32_t ul_usbdiv)
{
  4079a8:	b480      	push	{r7}
  4079aa:	b083      	sub	sp, #12
  4079ac:	af00      	add	r7, sp, #0
  4079ae:	6078      	str	r0, [r7, #4]
	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
  4079b0:	4a06      	ldr	r2, [pc, #24]	; (4079cc <pmc_switch_udpck_to_pllbck+0x24>)
  4079b2:	687b      	ldr	r3, [r7, #4]
  4079b4:	021b      	lsls	r3, r3, #8
  4079b6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
  4079ba:	f043 0301 	orr.w	r3, r3, #1
  4079be:	6393      	str	r3, [r2, #56]	; 0x38
}
  4079c0:	bf00      	nop
  4079c2:	370c      	adds	r7, #12
  4079c4:	46bd      	mov	sp, r7
  4079c6:	bc80      	pop	{r7}
  4079c8:	4770      	bx	lr
  4079ca:	bf00      	nop
  4079cc:	400e0400 	.word	0x400e0400

004079d0 <pmc_enable_udpck>:
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
/**
 * \brief Enable UDP (USB) clock.
 */
void pmc_enable_udpck(void)
{
  4079d0:	b480      	push	{r7}
  4079d2:	af00      	add	r7, sp, #0
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
  4079d4:	4b03      	ldr	r3, [pc, #12]	; (4079e4 <pmc_enable_udpck+0x14>)
  4079d6:	2280      	movs	r2, #128	; 0x80
  4079d8:	601a      	str	r2, [r3, #0]
#elif (SAMV71 || SAMV70 || SAME70 || SAMS70)
	PMC->PMC_SCER = PMC_SCER_USBCLK;
#else
	PMC->PMC_SCER = PMC_SCER_UOTGCLK;
# endif
}
  4079da:	bf00      	nop
  4079dc:	46bd      	mov	sp, r7
  4079de:	bc80      	pop	{r7}
  4079e0:	4770      	bx	lr
  4079e2:	bf00      	nop
  4079e4:	400e0400 	.word	0x400e0400

004079e8 <pmc_set_fast_startup_input>:
 *        (event generation).
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
  4079e8:	b480      	push	{r7}
  4079ea:	b083      	sub	sp, #12
  4079ec:	af00      	add	r7, sp, #0
  4079ee:	6078      	str	r0, [r7, #4]
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  4079f0:	687b      	ldr	r3, [r7, #4]
  4079f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
  4079f6:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR |= ul_inputs;
  4079f8:	4905      	ldr	r1, [pc, #20]	; (407a10 <pmc_set_fast_startup_input+0x28>)
  4079fa:	4b05      	ldr	r3, [pc, #20]	; (407a10 <pmc_set_fast_startup_input+0x28>)
  4079fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4079fe:	687b      	ldr	r3, [r7, #4]
  407a00:	4313      	orrs	r3, r2
  407a02:	670b      	str	r3, [r1, #112]	; 0x70
}
  407a04:	bf00      	nop
  407a06:	370c      	adds	r7, #12
  407a08:	46bd      	mov	sp, r7
  407a0a:	bc80      	pop	{r7}
  407a0c:	4770      	bx	lr
  407a0e:	bf00      	nop
  407a10:	400e0400 	.word	0x400e0400

00407a14 <pmc_is_wakeup_clocks_restored>:
#endif
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
  407a14:	b480      	push	{r7}
  407a16:	af00      	add	r7, sp, #0
	return !b_is_sleep_clock_used;
  407a18:	4b08      	ldr	r3, [pc, #32]	; (407a3c <pmc_is_wakeup_clocks_restored+0x28>)
  407a1a:	781b      	ldrb	r3, [r3, #0]
  407a1c:	b2db      	uxtb	r3, r3
  407a1e:	2b00      	cmp	r3, #0
  407a20:	bf14      	ite	ne
  407a22:	2301      	movne	r3, #1
  407a24:	2300      	moveq	r3, #0
  407a26:	b2db      	uxtb	r3, r3
  407a28:	f083 0301 	eor.w	r3, r3, #1
  407a2c:	b2db      	uxtb	r3, r3
  407a2e:	f003 0301 	and.w	r3, r3, #1
  407a32:	b2db      	uxtb	r3, r3
}
  407a34:	4618      	mov	r0, r3
  407a36:	46bd      	mov	sp, r7
  407a38:	bc80      	pop	{r7}
  407a3a:	4770      	bx	lr
  407a3c:	20001c18 	.word	0x20001c18

00407a40 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  407a40:	b580      	push	{r7, lr}
  407a42:	b084      	sub	sp, #16
  407a44:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  407a46:	4b27      	ldr	r3, [pc, #156]	; (407ae4 <Reset_Handler+0xa4>)
  407a48:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  407a4a:	4b27      	ldr	r3, [pc, #156]	; (407ae8 <Reset_Handler+0xa8>)
  407a4c:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  407a4e:	68fa      	ldr	r2, [r7, #12]
  407a50:	68bb      	ldr	r3, [r7, #8]
  407a52:	429a      	cmp	r2, r3
  407a54:	d90d      	bls.n	407a72 <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  407a56:	e007      	b.n	407a68 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  407a58:	68bb      	ldr	r3, [r7, #8]
  407a5a:	1d1a      	adds	r2, r3, #4
  407a5c:	60ba      	str	r2, [r7, #8]
  407a5e:	68fa      	ldr	r2, [r7, #12]
  407a60:	1d11      	adds	r1, r2, #4
  407a62:	60f9      	str	r1, [r7, #12]
  407a64:	6812      	ldr	r2, [r2, #0]
  407a66:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  407a68:	68bb      	ldr	r3, [r7, #8]
  407a6a:	4a20      	ldr	r2, [pc, #128]	; (407aec <Reset_Handler+0xac>)
  407a6c:	4293      	cmp	r3, r2
  407a6e:	d3f3      	bcc.n	407a58 <Reset_Handler+0x18>
  407a70:	e020      	b.n	407ab4 <Reset_Handler+0x74>
		}
	} else if (pSrc < pDest) {
  407a72:	68fa      	ldr	r2, [r7, #12]
  407a74:	68bb      	ldr	r3, [r7, #8]
  407a76:	429a      	cmp	r2, r3
  407a78:	d21c      	bcs.n	407ab4 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  407a7a:	4a1c      	ldr	r2, [pc, #112]	; (407aec <Reset_Handler+0xac>)
  407a7c:	4b1a      	ldr	r3, [pc, #104]	; (407ae8 <Reset_Handler+0xa8>)
  407a7e:	1ad3      	subs	r3, r2, r3
  407a80:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  407a82:	68fa      	ldr	r2, [r7, #12]
  407a84:	687b      	ldr	r3, [r7, #4]
  407a86:	4413      	add	r3, r2
  407a88:	3b04      	subs	r3, #4
  407a8a:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  407a8c:	68ba      	ldr	r2, [r7, #8]
  407a8e:	687b      	ldr	r3, [r7, #4]
  407a90:	4413      	add	r3, r2
  407a92:	3b04      	subs	r3, #4
  407a94:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  407a96:	e00a      	b.n	407aae <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  407a98:	68bb      	ldr	r3, [r7, #8]
  407a9a:	1f1a      	subs	r2, r3, #4
  407a9c:	60ba      	str	r2, [r7, #8]
  407a9e:	68fa      	ldr	r2, [r7, #12]
  407aa0:	1f11      	subs	r1, r2, #4
  407aa2:	60f9      	str	r1, [r7, #12]
  407aa4:	6812      	ldr	r2, [r2, #0]
  407aa6:	601a      	str	r2, [r3, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  407aa8:	687b      	ldr	r3, [r7, #4]
  407aaa:	3b04      	subs	r3, #4
  407aac:	607b      	str	r3, [r7, #4]
  407aae:	687b      	ldr	r3, [r7, #4]
  407ab0:	2b00      	cmp	r3, #0
  407ab2:	d1f1      	bne.n	407a98 <Reset_Handler+0x58>
		}
	}
	__NOP();
  407ab4:	bf00      	nop

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  407ab6:	4b0e      	ldr	r3, [pc, #56]	; (407af0 <Reset_Handler+0xb0>)
  407ab8:	60bb      	str	r3, [r7, #8]
  407aba:	e004      	b.n	407ac6 <Reset_Handler+0x86>
		*pDest++ = 0;
  407abc:	68bb      	ldr	r3, [r7, #8]
  407abe:	1d1a      	adds	r2, r3, #4
  407ac0:	60ba      	str	r2, [r7, #8]
  407ac2:	2200      	movs	r2, #0
  407ac4:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  407ac6:	68bb      	ldr	r3, [r7, #8]
  407ac8:	4a0a      	ldr	r2, [pc, #40]	; (407af4 <Reset_Handler+0xb4>)
  407aca:	4293      	cmp	r3, r2
  407acc:	d3f6      	bcc.n	407abc <Reset_Handler+0x7c>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  407ace:	4b0a      	ldr	r3, [pc, #40]	; (407af8 <Reset_Handler+0xb8>)
  407ad0:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  407ad2:	4a0a      	ldr	r2, [pc, #40]	; (407afc <Reset_Handler+0xbc>)
  407ad4:	68fb      	ldr	r3, [r7, #12]
  407ad6:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  407ad8:	4b09      	ldr	r3, [pc, #36]	; (407b00 <Reset_Handler+0xc0>)
  407ada:	4798      	blx	r3

	/* Branch to main function */
	main();
  407adc:	4b09      	ldr	r3, [pc, #36]	; (407b04 <Reset_Handler+0xc4>)
  407ade:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  407ae0:	e7fe      	b.n	407ae0 <Reset_Handler+0xa0>
  407ae2:	bf00      	nop
  407ae4:	004092d8 	.word	0x004092d8
  407ae8:	20000000 	.word	0x20000000
  407aec:	2000053c 	.word	0x2000053c
  407af0:	20000540 	.word	0x20000540
  407af4:	20001e18 	.word	0x20001e18
  407af8:	00400000 	.word	0x00400000
  407afc:	e000ed00 	.word	0xe000ed00
  407b00:	00408d35 	.word	0x00408d35
  407b04:	00407d3d 	.word	0x00407d3d

00407b08 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  407b08:	b480      	push	{r7}
  407b0a:	af00      	add	r7, sp, #0
	while (1) {
  407b0c:	e7fe      	b.n	407b0c <Dummy_Handler+0x4>
	...

00407b10 <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  407b10:	b480      	push	{r7}
  407b12:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  407b14:	4b5d      	ldr	r3, [pc, #372]	; (407c8c <SystemCoreClockUpdate+0x17c>)
  407b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  407b18:	f003 0303 	and.w	r3, r3, #3
  407b1c:	2b03      	cmp	r3, #3
  407b1e:	f200 8096 	bhi.w	407c4e <SystemCoreClockUpdate+0x13e>
  407b22:	a201      	add	r2, pc, #4	; (adr r2, 407b28 <SystemCoreClockUpdate+0x18>)
  407b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  407b28:	00407b39 	.word	0x00407b39
  407b2c:	00407b59 	.word	0x00407b59
  407b30:	00407ba3 	.word	0x00407ba3
  407b34:	00407ba3 	.word	0x00407ba3
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  407b38:	4b55      	ldr	r3, [pc, #340]	; (407c90 <SystemCoreClockUpdate+0x180>)
  407b3a:	695b      	ldr	r3, [r3, #20]
  407b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  407b40:	2b00      	cmp	r3, #0
  407b42:	d004      	beq.n	407b4e <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  407b44:	4b53      	ldr	r3, [pc, #332]	; (407c94 <SystemCoreClockUpdate+0x184>)
  407b46:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  407b4a:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  407b4c:	e080      	b.n	407c50 <SystemCoreClockUpdate+0x140>
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  407b4e:	4b51      	ldr	r3, [pc, #324]	; (407c94 <SystemCoreClockUpdate+0x184>)
  407b50:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  407b54:	601a      	str	r2, [r3, #0]
		break;
  407b56:	e07b      	b.n	407c50 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  407b58:	4b4c      	ldr	r3, [pc, #304]	; (407c8c <SystemCoreClockUpdate+0x17c>)
  407b5a:	6a1b      	ldr	r3, [r3, #32]
  407b5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  407b60:	2b00      	cmp	r3, #0
  407b62:	d003      	beq.n	407b6c <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  407b64:	4b4b      	ldr	r3, [pc, #300]	; (407c94 <SystemCoreClockUpdate+0x184>)
  407b66:	4a4c      	ldr	r2, [pc, #304]	; (407c98 <SystemCoreClockUpdate+0x188>)
  407b68:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  407b6a:	e071      	b.n	407c50 <SystemCoreClockUpdate+0x140>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  407b6c:	4b49      	ldr	r3, [pc, #292]	; (407c94 <SystemCoreClockUpdate+0x184>)
  407b6e:	4a4b      	ldr	r2, [pc, #300]	; (407c9c <SystemCoreClockUpdate+0x18c>)
  407b70:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  407b72:	4b46      	ldr	r3, [pc, #280]	; (407c8c <SystemCoreClockUpdate+0x17c>)
  407b74:	6a1b      	ldr	r3, [r3, #32]
  407b76:	f003 0370 	and.w	r3, r3, #112	; 0x70
  407b7a:	2b10      	cmp	r3, #16
  407b7c:	d008      	beq.n	407b90 <SystemCoreClockUpdate+0x80>
  407b7e:	2b20      	cmp	r3, #32
  407b80:	d00a      	beq.n	407b98 <SystemCoreClockUpdate+0x88>
  407b82:	2b00      	cmp	r3, #0
  407b84:	d000      	beq.n	407b88 <SystemCoreClockUpdate+0x78>
			break;
  407b86:	e00b      	b.n	407ba0 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  407b88:	4b42      	ldr	r3, [pc, #264]	; (407c94 <SystemCoreClockUpdate+0x184>)
  407b8a:	4a44      	ldr	r2, [pc, #272]	; (407c9c <SystemCoreClockUpdate+0x18c>)
  407b8c:	601a      	str	r2, [r3, #0]
			break;
  407b8e:	e007      	b.n	407ba0 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  407b90:	4b40      	ldr	r3, [pc, #256]	; (407c94 <SystemCoreClockUpdate+0x184>)
  407b92:	4a43      	ldr	r2, [pc, #268]	; (407ca0 <SystemCoreClockUpdate+0x190>)
  407b94:	601a      	str	r2, [r3, #0]
			break;
  407b96:	e003      	b.n	407ba0 <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  407b98:	4b3e      	ldr	r3, [pc, #248]	; (407c94 <SystemCoreClockUpdate+0x184>)
  407b9a:	4a3f      	ldr	r2, [pc, #252]	; (407c98 <SystemCoreClockUpdate+0x188>)
  407b9c:	601a      	str	r2, [r3, #0]
			break;
  407b9e:	bf00      	nop
		break;
  407ba0:	e056      	b.n	407c50 <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  407ba2:	4b3a      	ldr	r3, [pc, #232]	; (407c8c <SystemCoreClockUpdate+0x17c>)
  407ba4:	6a1b      	ldr	r3, [r3, #32]
  407ba6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  407baa:	2b00      	cmp	r3, #0
  407bac:	d003      	beq.n	407bb6 <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  407bae:	4b39      	ldr	r3, [pc, #228]	; (407c94 <SystemCoreClockUpdate+0x184>)
  407bb0:	4a39      	ldr	r2, [pc, #228]	; (407c98 <SystemCoreClockUpdate+0x188>)
  407bb2:	601a      	str	r2, [r3, #0]
  407bb4:	e019      	b.n	407bea <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  407bb6:	4b37      	ldr	r3, [pc, #220]	; (407c94 <SystemCoreClockUpdate+0x184>)
  407bb8:	4a38      	ldr	r2, [pc, #224]	; (407c9c <SystemCoreClockUpdate+0x18c>)
  407bba:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  407bbc:	4b33      	ldr	r3, [pc, #204]	; (407c8c <SystemCoreClockUpdate+0x17c>)
  407bbe:	6a1b      	ldr	r3, [r3, #32]
  407bc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  407bc4:	2b10      	cmp	r3, #16
  407bc6:	d008      	beq.n	407bda <SystemCoreClockUpdate+0xca>
  407bc8:	2b20      	cmp	r3, #32
  407bca:	d00a      	beq.n	407be2 <SystemCoreClockUpdate+0xd2>
  407bcc:	2b00      	cmp	r3, #0
  407bce:	d000      	beq.n	407bd2 <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  407bd0:	e00b      	b.n	407bea <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  407bd2:	4b30      	ldr	r3, [pc, #192]	; (407c94 <SystemCoreClockUpdate+0x184>)
  407bd4:	4a31      	ldr	r2, [pc, #196]	; (407c9c <SystemCoreClockUpdate+0x18c>)
  407bd6:	601a      	str	r2, [r3, #0]
					break;
  407bd8:	e007      	b.n	407bea <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  407bda:	4b2e      	ldr	r3, [pc, #184]	; (407c94 <SystemCoreClockUpdate+0x184>)
  407bdc:	4a30      	ldr	r2, [pc, #192]	; (407ca0 <SystemCoreClockUpdate+0x190>)
  407bde:	601a      	str	r2, [r3, #0]
					break;
  407be0:	e003      	b.n	407bea <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  407be2:	4b2c      	ldr	r3, [pc, #176]	; (407c94 <SystemCoreClockUpdate+0x184>)
  407be4:	4a2c      	ldr	r2, [pc, #176]	; (407c98 <SystemCoreClockUpdate+0x188>)
  407be6:	601a      	str	r2, [r3, #0]
					break;
  407be8:	bf00      	nop
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  407bea:	4b28      	ldr	r3, [pc, #160]	; (407c8c <SystemCoreClockUpdate+0x17c>)
  407bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  407bee:	f003 0303 	and.w	r3, r3, #3
  407bf2:	2b02      	cmp	r3, #2
  407bf4:	d115      	bne.n	407c22 <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  407bf6:	4b25      	ldr	r3, [pc, #148]	; (407c8c <SystemCoreClockUpdate+0x17c>)
  407bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  407bfa:	0c1b      	lsrs	r3, r3, #16
  407bfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
  407c00:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  407c02:	4a24      	ldr	r2, [pc, #144]	; (407c94 <SystemCoreClockUpdate+0x184>)
  407c04:	6812      	ldr	r2, [r2, #0]
  407c06:	fb02 f303 	mul.w	r3, r2, r3
  407c0a:	4a22      	ldr	r2, [pc, #136]	; (407c94 <SystemCoreClockUpdate+0x184>)
  407c0c:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  407c0e:	4b1f      	ldr	r3, [pc, #124]	; (407c8c <SystemCoreClockUpdate+0x17c>)
  407c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  407c12:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  407c14:	4a1f      	ldr	r2, [pc, #124]	; (407c94 <SystemCoreClockUpdate+0x184>)
  407c16:	6812      	ldr	r2, [r2, #0]
  407c18:	fbb2 f3f3 	udiv	r3, r2, r3
  407c1c:	4a1d      	ldr	r2, [pc, #116]	; (407c94 <SystemCoreClockUpdate+0x184>)
  407c1e:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  407c20:	e016      	b.n	407c50 <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  407c22:	4b1a      	ldr	r3, [pc, #104]	; (407c8c <SystemCoreClockUpdate+0x17c>)
  407c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  407c26:	0c1b      	lsrs	r3, r3, #16
  407c28:	f3c3 030a 	ubfx	r3, r3, #0, #11
  407c2c:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  407c2e:	4a19      	ldr	r2, [pc, #100]	; (407c94 <SystemCoreClockUpdate+0x184>)
  407c30:	6812      	ldr	r2, [r2, #0]
  407c32:	fb02 f303 	mul.w	r3, r2, r3
  407c36:	4a17      	ldr	r2, [pc, #92]	; (407c94 <SystemCoreClockUpdate+0x184>)
  407c38:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  407c3a:	4b14      	ldr	r3, [pc, #80]	; (407c8c <SystemCoreClockUpdate+0x17c>)
  407c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  407c3e:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  407c40:	4a14      	ldr	r2, [pc, #80]	; (407c94 <SystemCoreClockUpdate+0x184>)
  407c42:	6812      	ldr	r2, [r2, #0]
  407c44:	fbb2 f3f3 	udiv	r3, r2, r3
  407c48:	4a12      	ldr	r2, [pc, #72]	; (407c94 <SystemCoreClockUpdate+0x184>)
  407c4a:	6013      	str	r3, [r2, #0]
		break;
  407c4c:	e000      	b.n	407c50 <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  407c4e:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  407c50:	4b0e      	ldr	r3, [pc, #56]	; (407c8c <SystemCoreClockUpdate+0x17c>)
  407c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  407c54:	f003 0370 	and.w	r3, r3, #112	; 0x70
  407c58:	2b70      	cmp	r3, #112	; 0x70
  407c5a:	d108      	bne.n	407c6e <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  407c5c:	4b0d      	ldr	r3, [pc, #52]	; (407c94 <SystemCoreClockUpdate+0x184>)
  407c5e:	681b      	ldr	r3, [r3, #0]
  407c60:	4a10      	ldr	r2, [pc, #64]	; (407ca4 <SystemCoreClockUpdate+0x194>)
  407c62:	fba2 2303 	umull	r2, r3, r2, r3
  407c66:	085b      	lsrs	r3, r3, #1
  407c68:	4a0a      	ldr	r2, [pc, #40]	; (407c94 <SystemCoreClockUpdate+0x184>)
  407c6a:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  407c6c:	e00a      	b.n	407c84 <SystemCoreClockUpdate+0x174>
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  407c6e:	4b07      	ldr	r3, [pc, #28]	; (407c8c <SystemCoreClockUpdate+0x17c>)
  407c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  407c72:	091b      	lsrs	r3, r3, #4
  407c74:	f003 0307 	and.w	r3, r3, #7
		SystemCoreClock >>=
  407c78:	4a06      	ldr	r2, [pc, #24]	; (407c94 <SystemCoreClockUpdate+0x184>)
  407c7a:	6812      	ldr	r2, [r2, #0]
  407c7c:	fa22 f303 	lsr.w	r3, r2, r3
  407c80:	4a04      	ldr	r2, [pc, #16]	; (407c94 <SystemCoreClockUpdate+0x184>)
  407c82:	6013      	str	r3, [r2, #0]
}
  407c84:	bf00      	nop
  407c86:	46bd      	mov	sp, r7
  407c88:	bc80      	pop	{r7}
  407c8a:	4770      	bx	lr
  407c8c:	400e0400 	.word	0x400e0400
  407c90:	400e1410 	.word	0x400e1410
  407c94:	20000100 	.word	0x20000100
  407c98:	00b71b00 	.word	0x00b71b00
  407c9c:	003d0900 	.word	0x003d0900
  407ca0:	007a1200 	.word	0x007a1200
  407ca4:	aaaaaaab 	.word	0xaaaaaaab

00407ca8 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  407ca8:	b480      	push	{r7}
  407caa:	b083      	sub	sp, #12
  407cac:	af00      	add	r7, sp, #0
  407cae:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  407cb0:	687b      	ldr	r3, [r7, #4]
  407cb2:	4a18      	ldr	r2, [pc, #96]	; (407d14 <system_init_flash+0x6c>)
  407cb4:	4293      	cmp	r3, r2
  407cb6:	d804      	bhi.n	407cc2 <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  407cb8:	4b17      	ldr	r3, [pc, #92]	; (407d18 <system_init_flash+0x70>)
  407cba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  407cbe:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  407cc0:	e023      	b.n	407d0a <system_init_flash+0x62>
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  407cc2:	687b      	ldr	r3, [r7, #4]
  407cc4:	4a15      	ldr	r2, [pc, #84]	; (407d1c <system_init_flash+0x74>)
  407cc6:	4293      	cmp	r3, r2
  407cc8:	d803      	bhi.n	407cd2 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  407cca:	4b13      	ldr	r3, [pc, #76]	; (407d18 <system_init_flash+0x70>)
  407ccc:	4a14      	ldr	r2, [pc, #80]	; (407d20 <system_init_flash+0x78>)
  407cce:	601a      	str	r2, [r3, #0]
}
  407cd0:	e01b      	b.n	407d0a <system_init_flash+0x62>
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  407cd2:	687b      	ldr	r3, [r7, #4]
  407cd4:	4a13      	ldr	r2, [pc, #76]	; (407d24 <system_init_flash+0x7c>)
  407cd6:	4293      	cmp	r3, r2
  407cd8:	d803      	bhi.n	407ce2 <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  407cda:	4b0f      	ldr	r3, [pc, #60]	; (407d18 <system_init_flash+0x70>)
  407cdc:	4a12      	ldr	r2, [pc, #72]	; (407d28 <system_init_flash+0x80>)
  407cde:	601a      	str	r2, [r3, #0]
}
  407ce0:	e013      	b.n	407d0a <system_init_flash+0x62>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  407ce2:	687b      	ldr	r3, [r7, #4]
  407ce4:	4a11      	ldr	r2, [pc, #68]	; (407d2c <system_init_flash+0x84>)
  407ce6:	4293      	cmp	r3, r2
  407ce8:	d803      	bhi.n	407cf2 <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  407cea:	4b0b      	ldr	r3, [pc, #44]	; (407d18 <system_init_flash+0x70>)
  407cec:	4a10      	ldr	r2, [pc, #64]	; (407d30 <system_init_flash+0x88>)
  407cee:	601a      	str	r2, [r3, #0]
}
  407cf0:	e00b      	b.n	407d0a <system_init_flash+0x62>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  407cf2:	687b      	ldr	r3, [r7, #4]
  407cf4:	4a0f      	ldr	r2, [pc, #60]	; (407d34 <system_init_flash+0x8c>)
  407cf6:	4293      	cmp	r3, r2
  407cf8:	d804      	bhi.n	407d04 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  407cfa:	4b07      	ldr	r3, [pc, #28]	; (407d18 <system_init_flash+0x70>)
  407cfc:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  407d00:	601a      	str	r2, [r3, #0]
}
  407d02:	e002      	b.n	407d0a <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  407d04:	4b04      	ldr	r3, [pc, #16]	; (407d18 <system_init_flash+0x70>)
  407d06:	4a0c      	ldr	r2, [pc, #48]	; (407d38 <system_init_flash+0x90>)
  407d08:	601a      	str	r2, [r3, #0]
}
  407d0a:	bf00      	nop
  407d0c:	370c      	adds	r7, #12
  407d0e:	46bd      	mov	sp, r7
  407d10:	bc80      	pop	{r7}
  407d12:	4770      	bx	lr
  407d14:	01312cff 	.word	0x01312cff
  407d18:	400e0a00 	.word	0x400e0a00
  407d1c:	026259ff 	.word	0x026259ff
  407d20:	04000100 	.word	0x04000100
  407d24:	039386ff 	.word	0x039386ff
  407d28:	04000200 	.word	0x04000200
  407d2c:	04c4b3ff 	.word	0x04c4b3ff
  407d30:	04000300 	.word	0x04000300
  407d34:	05f5e0ff 	.word	0x05f5e0ff
  407d38:	04000500 	.word	0x04000500

00407d3c <main>:

/**************************** GLOBAL FUNCTIONS *******************************/

/** @brief    Main function.    */
int main(void)
{
  407d3c:	b580      	push	{r7, lr}
  407d3e:	af00      	add	r7, sp, #0
    // Initialization
    system_init();
  407d40:	4b07      	ldr	r3, [pc, #28]	; (407d60 <main+0x24>)
  407d42:	4798      	blx	r3
    comm_init();
  407d44:	4b07      	ldr	r3, [pc, #28]	; (407d64 <main+0x28>)
  407d46:	4798      	blx	r3
    control_init();
  407d48:	4b07      	ldr	r3, [pc, #28]	; (407d68 <main+0x2c>)
  407d4a:	4798      	blx	r3

    // System ready
    system_ready();
  407d4c:	4b07      	ldr	r3, [pc, #28]	; (407d6c <main+0x30>)
  407d4e:	4798      	blx	r3
    system_enable_interrupt();
  407d50:	4b07      	ldr	r3, [pc, #28]	; (407d70 <main+0x34>)
  407d52:	4798      	blx	r3

    while(1)
    {
        comm_background();
  407d54:	4b07      	ldr	r3, [pc, #28]	; (407d74 <main+0x38>)
  407d56:	4798      	blx	r3
        control_background();
  407d58:	4b07      	ldr	r3, [pc, #28]	; (407d78 <main+0x3c>)
  407d5a:	4798      	blx	r3
        comm_background();
  407d5c:	e7fa      	b.n	407d54 <main+0x18>
  407d5e:	bf00      	nop
  407d60:	00400ef9 	.word	0x00400ef9
  407d64:	004069c9 	.word	0x004069c9
  407d68:	00400545 	.word	0x00400545
  407d6c:	00400fb5 	.word	0x00400fb5
  407d70:	00400fc5 	.word	0x00400fc5
  407d74:	00406a11 	.word	0x00406a11
  407d78:	00400665 	.word	0x00400665

00407d7c <SysTick_Handler>:
    }
}

/**  @brief Handler for System Tick interrupt. */
void SysTick_Handler(void)
{
  407d7c:	b580      	push	{r7, lr}
  407d7e:	af00      	add	r7, sp, #0
    if (control_is_enable())
  407d80:	4b04      	ldr	r3, [pc, #16]	; (407d94 <SysTick_Handler+0x18>)
  407d82:	4798      	blx	r3
  407d84:	4603      	mov	r3, r0
  407d86:	2b00      	cmp	r3, #0
  407d88:	d001      	beq.n	407d8e <SysTick_Handler+0x12>
    {
        signal_adc_start_conversion();
  407d8a:	4b03      	ldr	r3, [pc, #12]	; (407d98 <SysTick_Handler+0x1c>)
  407d8c:	4798      	blx	r3
    }
}
  407d8e:	bf00      	nop
  407d90:	bd80      	pop	{r7, pc}
  407d92:	bf00      	nop
  407d94:	004007a5 	.word	0x004007a5
  407d98:	004018c5 	.word	0x004018c5

00407d9c <ADC_Handler>:

/** @brief Handler for ADC. */
void ADC_Handler(void)
{
  407d9c:	b580      	push	{r7, lr}
  407d9e:	af00      	add	r7, sp, #0
    signal_adc_process_data();
  407da0:	4b02      	ldr	r3, [pc, #8]	; (407dac <ADC_Handler+0x10>)
  407da2:	4798      	blx	r3
    control_update();
  407da4:	4b02      	ldr	r3, [pc, #8]	; (407db0 <ADC_Handler+0x14>)
  407da6:	4798      	blx	r3
}
  407da8:	bf00      	nop
  407daa:	bd80      	pop	{r7, pc}
  407dac:	004018dd 	.word	0x004018dd
  407db0:	004005c5 	.word	0x004005c5

00407db4 <PWM_Handler>:

/** @brief Interrupt handler for the PWM controller. */
void PWM_Handler(void)
{
  407db4:	b580      	push	{r7, lr}
  407db6:	b084      	sub	sp, #16
  407db8:	af00      	add	r7, sp, #0
    /** PDC transfer packet */
    pdc_packet_t g_pdc_tx_packet;
    uint32_t pdc_status = pwm_get_interrupt_status(PWM);
  407dba:	480f      	ldr	r0, [pc, #60]	; (407df8 <PWM_Handler+0x44>)
  407dbc:	4b0f      	ldr	r3, [pc, #60]	; (407dfc <PWM_Handler+0x48>)
  407dbe:	4798      	blx	r3
  407dc0:	60f8      	str	r0, [r7, #12]

    if ((pdc_status & PWM_PDC_TX_END) == PWM_PDC_TX_END)
  407dc2:	68fb      	ldr	r3, [r7, #12]
  407dc4:	f003 0302 	and.w	r3, r3, #2
  407dc8:	2b00      	cmp	r3, #0
  407dca:	d010      	beq.n	407dee <PWM_Handler+0x3a>
    {
        /* Set up the PDC controller */
        g_pdc_tx_packet.ul_addr = (uint32_t)(control_get_pwm_duty_buf());
  407dcc:	4b0c      	ldr	r3, [pc, #48]	; (407e00 <PWM_Handler+0x4c>)
  407dce:	4798      	blx	r3
  407dd0:	4603      	mov	r3, r0
  407dd2:	607b      	str	r3, [r7, #4]
        g_pdc_tx_packet.ul_size = SETTINGS_PWM_BUF_LEN;
  407dd4:	2302      	movs	r3, #2
  407dd6:	60bb      	str	r3, [r7, #8]

        /* Initialize the PDC transfer */
        pdc_tx_init(PDC_PWM, &g_pdc_tx_packet, 0);
  407dd8:	1d3b      	adds	r3, r7, #4
  407dda:	2200      	movs	r2, #0
  407ddc:	4619      	mov	r1, r3
  407dde:	4809      	ldr	r0, [pc, #36]	; (407e04 <PWM_Handler+0x50>)
  407de0:	4b09      	ldr	r3, [pc, #36]	; (407e08 <PWM_Handler+0x54>)
  407de2:	4798      	blx	r3

        /* Send the PWM value */
        pdc_enable_transfer(PDC_PWM, PERIPH_PTCR_TXTEN);
  407de4:	f44f 7180 	mov.w	r1, #256	; 0x100
  407de8:	4806      	ldr	r0, [pc, #24]	; (407e04 <PWM_Handler+0x50>)
  407dea:	4b08      	ldr	r3, [pc, #32]	; (407e0c <PWM_Handler+0x58>)
  407dec:	4798      	blx	r3
    }
}
  407dee:	bf00      	nop
  407df0:	3710      	adds	r7, #16
  407df2:	46bd      	mov	sp, r7
  407df4:	bd80      	pop	{r7, pc}
  407df6:	bf00      	nop
  407df8:	40020000 	.word	0x40020000
  407dfc:	00404271 	.word	0x00404271
  407e00:	0040084d 	.word	0x0040084d
  407e04:	40020100 	.word	0x40020100
  407e08:	00403d31 	.word	0x00403d31
  407e0c:	00403d73 	.word	0x00403d73

00407e10 <UART1_Handler>:
    drv2_off();
}

/** @brief Handler for UART 1. */
void UART1_Handler(void)
{
  407e10:	b580      	push	{r7, lr}
  407e12:	af00      	add	r7, sp, #0
    comm_preprocess_uart_PC_RX();
  407e14:	4b01      	ldr	r3, [pc, #4]	; (407e1c <UART1_Handler+0xc>)
  407e16:	4798      	blx	r3
}
  407e18:	bf00      	nop
  407e1a:	bd80      	pop	{r7, pc}
  407e1c:	00406b09 	.word	0x00406b09

00407e20 <sqrt>:
  407e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407e24:	b08b      	sub	sp, #44	; 0x2c
  407e26:	4604      	mov	r4, r0
  407e28:	460d      	mov	r5, r1
  407e2a:	f000 f857 	bl	407edc <__ieee754_sqrt>
  407e2e:	4b29      	ldr	r3, [pc, #164]	; (407ed4 <sqrt+0xb4>)
  407e30:	f993 a000 	ldrsb.w	sl, [r3]
  407e34:	f1ba 3fff 	cmp.w	sl, #4294967295
  407e38:	4606      	mov	r6, r0
  407e3a:	460f      	mov	r7, r1
  407e3c:	d012      	beq.n	407e64 <sqrt+0x44>
  407e3e:	4622      	mov	r2, r4
  407e40:	462b      	mov	r3, r5
  407e42:	4620      	mov	r0, r4
  407e44:	4629      	mov	r1, r5
  407e46:	f000 fd59 	bl	4088fc <__aeabi_dcmpun>
  407e4a:	4683      	mov	fp, r0
  407e4c:	b950      	cbnz	r0, 407e64 <sqrt+0x44>
  407e4e:	f04f 0800 	mov.w	r8, #0
  407e52:	f04f 0900 	mov.w	r9, #0
  407e56:	4642      	mov	r2, r8
  407e58:	464b      	mov	r3, r9
  407e5a:	4620      	mov	r0, r4
  407e5c:	4629      	mov	r1, r5
  407e5e:	f000 fd25 	bl	4088ac <__aeabi_dcmplt>
  407e62:	b920      	cbnz	r0, 407e6e <sqrt+0x4e>
  407e64:	4630      	mov	r0, r6
  407e66:	4639      	mov	r1, r7
  407e68:	b00b      	add	sp, #44	; 0x2c
  407e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407e6e:	4b1a      	ldr	r3, [pc, #104]	; (407ed8 <sqrt+0xb8>)
  407e70:	f8cd b020 	str.w	fp, [sp, #32]
  407e74:	2201      	movs	r2, #1
  407e76:	e9cd 4504 	strd	r4, r5, [sp, #16]
  407e7a:	e9cd 4502 	strd	r4, r5, [sp, #8]
  407e7e:	e88d 000c 	stmia.w	sp, {r2, r3}
  407e82:	f1ba 0f00 	cmp.w	sl, #0
  407e86:	d017      	beq.n	407eb8 <sqrt+0x98>
  407e88:	4642      	mov	r2, r8
  407e8a:	464b      	mov	r3, r9
  407e8c:	4640      	mov	r0, r8
  407e8e:	4649      	mov	r1, r9
  407e90:	f000 fbc4 	bl	40861c <__aeabi_ddiv>
  407e94:	f1ba 0f02 	cmp.w	sl, #2
  407e98:	e9cd 0106 	strd	r0, r1, [sp, #24]
  407e9c:	d10e      	bne.n	407ebc <sqrt+0x9c>
  407e9e:	f000 ff43 	bl	408d28 <__errno>
  407ea2:	2321      	movs	r3, #33	; 0x21
  407ea4:	6003      	str	r3, [r0, #0]
  407ea6:	9b08      	ldr	r3, [sp, #32]
  407ea8:	b973      	cbnz	r3, 407ec8 <sqrt+0xa8>
  407eaa:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
  407eae:	4630      	mov	r0, r6
  407eb0:	4639      	mov	r1, r7
  407eb2:	b00b      	add	sp, #44	; 0x2c
  407eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407eb8:	e9cd 8906 	strd	r8, r9, [sp, #24]
  407ebc:	4668      	mov	r0, sp
  407ebe:	f000 f8c9 	bl	408054 <matherr>
  407ec2:	2800      	cmp	r0, #0
  407ec4:	d1ef      	bne.n	407ea6 <sqrt+0x86>
  407ec6:	e7ea      	b.n	407e9e <sqrt+0x7e>
  407ec8:	f000 ff2e 	bl	408d28 <__errno>
  407ecc:	9b08      	ldr	r3, [sp, #32]
  407ece:	6003      	str	r3, [r0, #0]
  407ed0:	e7eb      	b.n	407eaa <sqrt+0x8a>
  407ed2:	bf00      	nop
  407ed4:	20000104 	.word	0x20000104
  407ed8:	004092a0 	.word	0x004092a0

00407edc <__ieee754_sqrt>:
  407edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407ee0:	4f5b      	ldr	r7, [pc, #364]	; (408050 <__ieee754_sqrt+0x174>)
  407ee2:	438f      	bics	r7, r1
  407ee4:	4605      	mov	r5, r0
  407ee6:	460c      	mov	r4, r1
  407ee8:	f000 8092 	beq.w	408010 <__ieee754_sqrt+0x134>
  407eec:	2900      	cmp	r1, #0
  407eee:	460b      	mov	r3, r1
  407ef0:	4602      	mov	r2, r0
  407ef2:	dd6f      	ble.n	407fd4 <__ieee754_sqrt+0xf8>
  407ef4:	150f      	asrs	r7, r1, #20
  407ef6:	d07b      	beq.n	407ff0 <__ieee754_sqrt+0x114>
  407ef8:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  407efc:	f3c3 0313 	ubfx	r3, r3, #0, #20
  407f00:	07f8      	lsls	r0, r7, #31
  407f02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  407f06:	d45c      	bmi.n	407fc2 <__ieee754_sqrt+0xe6>
  407f08:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  407f0c:	2600      	movs	r6, #0
  407f0e:	440b      	add	r3, r1
  407f10:	107f      	asrs	r7, r7, #1
  407f12:	0052      	lsls	r2, r2, #1
  407f14:	46b6      	mov	lr, r6
  407f16:	2016      	movs	r0, #22
  407f18:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  407f1c:	eb0e 0401 	add.w	r4, lr, r1
  407f20:	429c      	cmp	r4, r3
  407f22:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  407f26:	ea4f 0242 	mov.w	r2, r2, lsl #1
  407f2a:	dc03      	bgt.n	407f34 <__ieee754_sqrt+0x58>
  407f2c:	1b1b      	subs	r3, r3, r4
  407f2e:	eb04 0e01 	add.w	lr, r4, r1
  407f32:	440e      	add	r6, r1
  407f34:	3801      	subs	r0, #1
  407f36:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  407f3a:	ea4f 0151 	mov.w	r1, r1, lsr #1
  407f3e:	d1ed      	bne.n	407f1c <__ieee754_sqrt+0x40>
  407f40:	4684      	mov	ip, r0
  407f42:	2420      	movs	r4, #32
  407f44:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  407f48:	e009      	b.n	407f5e <__ieee754_sqrt+0x82>
  407f4a:	d020      	beq.n	407f8e <__ieee754_sqrt+0xb2>
  407f4c:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  407f50:	3c01      	subs	r4, #1
  407f52:	ea4f 0151 	mov.w	r1, r1, lsr #1
  407f56:	442b      	add	r3, r5
  407f58:	ea4f 0242 	mov.w	r2, r2, lsl #1
  407f5c:	d020      	beq.n	407fa0 <__ieee754_sqrt+0xc4>
  407f5e:	4573      	cmp	r3, lr
  407f60:	eb01 050c 	add.w	r5, r1, ip
  407f64:	ddf1      	ble.n	407f4a <__ieee754_sqrt+0x6e>
  407f66:	2d00      	cmp	r5, #0
  407f68:	eb05 0c01 	add.w	ip, r5, r1
  407f6c:	db09      	blt.n	407f82 <__ieee754_sqrt+0xa6>
  407f6e:	46f0      	mov	r8, lr
  407f70:	4295      	cmp	r5, r2
  407f72:	eba3 030e 	sub.w	r3, r3, lr
  407f76:	d900      	bls.n	407f7a <__ieee754_sqrt+0x9e>
  407f78:	3b01      	subs	r3, #1
  407f7a:	1b52      	subs	r2, r2, r5
  407f7c:	4408      	add	r0, r1
  407f7e:	46c6      	mov	lr, r8
  407f80:	e7e4      	b.n	407f4c <__ieee754_sqrt+0x70>
  407f82:	f1bc 0f00 	cmp.w	ip, #0
  407f86:	dbf2      	blt.n	407f6e <__ieee754_sqrt+0x92>
  407f88:	f10e 0801 	add.w	r8, lr, #1
  407f8c:	e7f0      	b.n	407f70 <__ieee754_sqrt+0x94>
  407f8e:	4295      	cmp	r5, r2
  407f90:	d8dc      	bhi.n	407f4c <__ieee754_sqrt+0x70>
  407f92:	2d00      	cmp	r5, #0
  407f94:	eb05 0c01 	add.w	ip, r5, r1
  407f98:	db44      	blt.n	408024 <__ieee754_sqrt+0x148>
  407f9a:	4698      	mov	r8, r3
  407f9c:	2300      	movs	r3, #0
  407f9e:	e7ec      	b.n	407f7a <__ieee754_sqrt+0x9e>
  407fa0:	4313      	orrs	r3, r2
  407fa2:	d113      	bne.n	407fcc <__ieee754_sqrt+0xf0>
  407fa4:	0840      	lsrs	r0, r0, #1
  407fa6:	1073      	asrs	r3, r6, #1
  407fa8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  407fac:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  407fb0:	07f2      	lsls	r2, r6, #31
  407fb2:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  407fb6:	bf48      	it	mi
  407fb8:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  407fbc:	4649      	mov	r1, r9
  407fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407fc2:	005b      	lsls	r3, r3, #1
  407fc4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  407fc8:	0052      	lsls	r2, r2, #1
  407fca:	e79d      	b.n	407f08 <__ieee754_sqrt+0x2c>
  407fcc:	1c41      	adds	r1, r0, #1
  407fce:	d02d      	beq.n	40802c <__ieee754_sqrt+0x150>
  407fd0:	3001      	adds	r0, #1
  407fd2:	e7e7      	b.n	407fa4 <__ieee754_sqrt+0xc8>
  407fd4:	4606      	mov	r6, r0
  407fd6:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  407fda:	433e      	orrs	r6, r7
  407fdc:	d0ef      	beq.n	407fbe <__ieee754_sqrt+0xe2>
  407fde:	bb69      	cbnz	r1, 40803c <__ieee754_sqrt+0x160>
  407fe0:	460f      	mov	r7, r1
  407fe2:	0ad3      	lsrs	r3, r2, #11
  407fe4:	3f15      	subs	r7, #21
  407fe6:	0552      	lsls	r2, r2, #21
  407fe8:	2b00      	cmp	r3, #0
  407fea:	d0fa      	beq.n	407fe2 <__ieee754_sqrt+0x106>
  407fec:	02de      	lsls	r6, r3, #11
  407fee:	d420      	bmi.n	408032 <__ieee754_sqrt+0x156>
  407ff0:	2400      	movs	r4, #0
  407ff2:	e000      	b.n	407ff6 <__ieee754_sqrt+0x11a>
  407ff4:	4604      	mov	r4, r0
  407ff6:	005b      	lsls	r3, r3, #1
  407ff8:	02dd      	lsls	r5, r3, #11
  407ffa:	f104 0001 	add.w	r0, r4, #1
  407ffe:	d5f9      	bpl.n	407ff4 <__ieee754_sqrt+0x118>
  408000:	f1c0 0120 	rsb	r1, r0, #32
  408004:	fa22 f101 	lsr.w	r1, r2, r1
  408008:	430b      	orrs	r3, r1
  40800a:	1b3f      	subs	r7, r7, r4
  40800c:	4082      	lsls	r2, r0
  40800e:	e773      	b.n	407ef8 <__ieee754_sqrt+0x1c>
  408010:	4602      	mov	r2, r0
  408012:	460b      	mov	r3, r1
  408014:	f000 f9d8 	bl	4083c8 <__aeabi_dmul>
  408018:	462a      	mov	r2, r5
  40801a:	4623      	mov	r3, r4
  40801c:	f000 f822 	bl	408064 <__adddf3>
  408020:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408024:	f1bc 0f00 	cmp.w	ip, #0
  408028:	daae      	bge.n	407f88 <__ieee754_sqrt+0xac>
  40802a:	e7b6      	b.n	407f9a <__ieee754_sqrt+0xbe>
  40802c:	3601      	adds	r6, #1
  40802e:	4620      	mov	r0, r4
  408030:	e7b9      	b.n	407fa6 <__ieee754_sqrt+0xca>
  408032:	2000      	movs	r0, #0
  408034:	2120      	movs	r1, #32
  408036:	f04f 34ff 	mov.w	r4, #4294967295
  40803a:	e7e3      	b.n	408004 <__ieee754_sqrt+0x128>
  40803c:	4602      	mov	r2, r0
  40803e:	460b      	mov	r3, r1
  408040:	f000 f80e 	bl	408060 <__aeabi_dsub>
  408044:	4602      	mov	r2, r0
  408046:	460b      	mov	r3, r1
  408048:	f000 fae8 	bl	40861c <__aeabi_ddiv>
  40804c:	e7b7      	b.n	407fbe <__ieee754_sqrt+0xe2>
  40804e:	bf00      	nop
  408050:	7ff00000 	.word	0x7ff00000

00408054 <matherr>:
  408054:	2000      	movs	r0, #0
  408056:	4770      	bx	lr

00408058 <__aeabi_drsub>:
  408058:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40805c:	e002      	b.n	408064 <__adddf3>
  40805e:	bf00      	nop

00408060 <__aeabi_dsub>:
  408060:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00408064 <__adddf3>:
  408064:	b530      	push	{r4, r5, lr}
  408066:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40806a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40806e:	ea94 0f05 	teq	r4, r5
  408072:	bf08      	it	eq
  408074:	ea90 0f02 	teqeq	r0, r2
  408078:	bf1f      	itttt	ne
  40807a:	ea54 0c00 	orrsne.w	ip, r4, r0
  40807e:	ea55 0c02 	orrsne.w	ip, r5, r2
  408082:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  408086:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40808a:	f000 80e2 	beq.w	408252 <__adddf3+0x1ee>
  40808e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  408092:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  408096:	bfb8      	it	lt
  408098:	426d      	neglt	r5, r5
  40809a:	dd0c      	ble.n	4080b6 <__adddf3+0x52>
  40809c:	442c      	add	r4, r5
  40809e:	ea80 0202 	eor.w	r2, r0, r2
  4080a2:	ea81 0303 	eor.w	r3, r1, r3
  4080a6:	ea82 0000 	eor.w	r0, r2, r0
  4080aa:	ea83 0101 	eor.w	r1, r3, r1
  4080ae:	ea80 0202 	eor.w	r2, r0, r2
  4080b2:	ea81 0303 	eor.w	r3, r1, r3
  4080b6:	2d36      	cmp	r5, #54	; 0x36
  4080b8:	bf88      	it	hi
  4080ba:	bd30      	pophi	{r4, r5, pc}
  4080bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4080c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4080c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4080c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4080cc:	d002      	beq.n	4080d4 <__adddf3+0x70>
  4080ce:	4240      	negs	r0, r0
  4080d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4080d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4080d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4080dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4080e0:	d002      	beq.n	4080e8 <__adddf3+0x84>
  4080e2:	4252      	negs	r2, r2
  4080e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4080e8:	ea94 0f05 	teq	r4, r5
  4080ec:	f000 80a7 	beq.w	40823e <__adddf3+0x1da>
  4080f0:	f1a4 0401 	sub.w	r4, r4, #1
  4080f4:	f1d5 0e20 	rsbs	lr, r5, #32
  4080f8:	db0d      	blt.n	408116 <__adddf3+0xb2>
  4080fa:	fa02 fc0e 	lsl.w	ip, r2, lr
  4080fe:	fa22 f205 	lsr.w	r2, r2, r5
  408102:	1880      	adds	r0, r0, r2
  408104:	f141 0100 	adc.w	r1, r1, #0
  408108:	fa03 f20e 	lsl.w	r2, r3, lr
  40810c:	1880      	adds	r0, r0, r2
  40810e:	fa43 f305 	asr.w	r3, r3, r5
  408112:	4159      	adcs	r1, r3
  408114:	e00e      	b.n	408134 <__adddf3+0xd0>
  408116:	f1a5 0520 	sub.w	r5, r5, #32
  40811a:	f10e 0e20 	add.w	lr, lr, #32
  40811e:	2a01      	cmp	r2, #1
  408120:	fa03 fc0e 	lsl.w	ip, r3, lr
  408124:	bf28      	it	cs
  408126:	f04c 0c02 	orrcs.w	ip, ip, #2
  40812a:	fa43 f305 	asr.w	r3, r3, r5
  40812e:	18c0      	adds	r0, r0, r3
  408130:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  408134:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408138:	d507      	bpl.n	40814a <__adddf3+0xe6>
  40813a:	f04f 0e00 	mov.w	lr, #0
  40813e:	f1dc 0c00 	rsbs	ip, ip, #0
  408142:	eb7e 0000 	sbcs.w	r0, lr, r0
  408146:	eb6e 0101 	sbc.w	r1, lr, r1
  40814a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40814e:	d31b      	bcc.n	408188 <__adddf3+0x124>
  408150:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  408154:	d30c      	bcc.n	408170 <__adddf3+0x10c>
  408156:	0849      	lsrs	r1, r1, #1
  408158:	ea5f 0030 	movs.w	r0, r0, rrx
  40815c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  408160:	f104 0401 	add.w	r4, r4, #1
  408164:	ea4f 5244 	mov.w	r2, r4, lsl #21
  408168:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40816c:	f080 809a 	bcs.w	4082a4 <__adddf3+0x240>
  408170:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  408174:	bf08      	it	eq
  408176:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40817a:	f150 0000 	adcs.w	r0, r0, #0
  40817e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408182:	ea41 0105 	orr.w	r1, r1, r5
  408186:	bd30      	pop	{r4, r5, pc}
  408188:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40818c:	4140      	adcs	r0, r0
  40818e:	eb41 0101 	adc.w	r1, r1, r1
  408192:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408196:	f1a4 0401 	sub.w	r4, r4, #1
  40819a:	d1e9      	bne.n	408170 <__adddf3+0x10c>
  40819c:	f091 0f00 	teq	r1, #0
  4081a0:	bf04      	itt	eq
  4081a2:	4601      	moveq	r1, r0
  4081a4:	2000      	moveq	r0, #0
  4081a6:	fab1 f381 	clz	r3, r1
  4081aa:	bf08      	it	eq
  4081ac:	3320      	addeq	r3, #32
  4081ae:	f1a3 030b 	sub.w	r3, r3, #11
  4081b2:	f1b3 0220 	subs.w	r2, r3, #32
  4081b6:	da0c      	bge.n	4081d2 <__adddf3+0x16e>
  4081b8:	320c      	adds	r2, #12
  4081ba:	dd08      	ble.n	4081ce <__adddf3+0x16a>
  4081bc:	f102 0c14 	add.w	ip, r2, #20
  4081c0:	f1c2 020c 	rsb	r2, r2, #12
  4081c4:	fa01 f00c 	lsl.w	r0, r1, ip
  4081c8:	fa21 f102 	lsr.w	r1, r1, r2
  4081cc:	e00c      	b.n	4081e8 <__adddf3+0x184>
  4081ce:	f102 0214 	add.w	r2, r2, #20
  4081d2:	bfd8      	it	le
  4081d4:	f1c2 0c20 	rsble	ip, r2, #32
  4081d8:	fa01 f102 	lsl.w	r1, r1, r2
  4081dc:	fa20 fc0c 	lsr.w	ip, r0, ip
  4081e0:	bfdc      	itt	le
  4081e2:	ea41 010c 	orrle.w	r1, r1, ip
  4081e6:	4090      	lslle	r0, r2
  4081e8:	1ae4      	subs	r4, r4, r3
  4081ea:	bfa2      	ittt	ge
  4081ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4081f0:	4329      	orrge	r1, r5
  4081f2:	bd30      	popge	{r4, r5, pc}
  4081f4:	ea6f 0404 	mvn.w	r4, r4
  4081f8:	3c1f      	subs	r4, #31
  4081fa:	da1c      	bge.n	408236 <__adddf3+0x1d2>
  4081fc:	340c      	adds	r4, #12
  4081fe:	dc0e      	bgt.n	40821e <__adddf3+0x1ba>
  408200:	f104 0414 	add.w	r4, r4, #20
  408204:	f1c4 0220 	rsb	r2, r4, #32
  408208:	fa20 f004 	lsr.w	r0, r0, r4
  40820c:	fa01 f302 	lsl.w	r3, r1, r2
  408210:	ea40 0003 	orr.w	r0, r0, r3
  408214:	fa21 f304 	lsr.w	r3, r1, r4
  408218:	ea45 0103 	orr.w	r1, r5, r3
  40821c:	bd30      	pop	{r4, r5, pc}
  40821e:	f1c4 040c 	rsb	r4, r4, #12
  408222:	f1c4 0220 	rsb	r2, r4, #32
  408226:	fa20 f002 	lsr.w	r0, r0, r2
  40822a:	fa01 f304 	lsl.w	r3, r1, r4
  40822e:	ea40 0003 	orr.w	r0, r0, r3
  408232:	4629      	mov	r1, r5
  408234:	bd30      	pop	{r4, r5, pc}
  408236:	fa21 f004 	lsr.w	r0, r1, r4
  40823a:	4629      	mov	r1, r5
  40823c:	bd30      	pop	{r4, r5, pc}
  40823e:	f094 0f00 	teq	r4, #0
  408242:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  408246:	bf06      	itte	eq
  408248:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40824c:	3401      	addeq	r4, #1
  40824e:	3d01      	subne	r5, #1
  408250:	e74e      	b.n	4080f0 <__adddf3+0x8c>
  408252:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  408256:	bf18      	it	ne
  408258:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40825c:	d029      	beq.n	4082b2 <__adddf3+0x24e>
  40825e:	ea94 0f05 	teq	r4, r5
  408262:	bf08      	it	eq
  408264:	ea90 0f02 	teqeq	r0, r2
  408268:	d005      	beq.n	408276 <__adddf3+0x212>
  40826a:	ea54 0c00 	orrs.w	ip, r4, r0
  40826e:	bf04      	itt	eq
  408270:	4619      	moveq	r1, r3
  408272:	4610      	moveq	r0, r2
  408274:	bd30      	pop	{r4, r5, pc}
  408276:	ea91 0f03 	teq	r1, r3
  40827a:	bf1e      	ittt	ne
  40827c:	2100      	movne	r1, #0
  40827e:	2000      	movne	r0, #0
  408280:	bd30      	popne	{r4, r5, pc}
  408282:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  408286:	d105      	bne.n	408294 <__adddf3+0x230>
  408288:	0040      	lsls	r0, r0, #1
  40828a:	4149      	adcs	r1, r1
  40828c:	bf28      	it	cs
  40828e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  408292:	bd30      	pop	{r4, r5, pc}
  408294:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  408298:	bf3c      	itt	cc
  40829a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40829e:	bd30      	popcc	{r4, r5, pc}
  4082a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4082a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4082a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4082ac:	f04f 0000 	mov.w	r0, #0
  4082b0:	bd30      	pop	{r4, r5, pc}
  4082b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4082b6:	bf1a      	itte	ne
  4082b8:	4619      	movne	r1, r3
  4082ba:	4610      	movne	r0, r2
  4082bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4082c0:	bf1c      	itt	ne
  4082c2:	460b      	movne	r3, r1
  4082c4:	4602      	movne	r2, r0
  4082c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4082ca:	bf06      	itte	eq
  4082cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4082d0:	ea91 0f03 	teqeq	r1, r3
  4082d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4082d8:	bd30      	pop	{r4, r5, pc}
  4082da:	bf00      	nop

004082dc <__aeabi_ui2d>:
  4082dc:	f090 0f00 	teq	r0, #0
  4082e0:	bf04      	itt	eq
  4082e2:	2100      	moveq	r1, #0
  4082e4:	4770      	bxeq	lr
  4082e6:	b530      	push	{r4, r5, lr}
  4082e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4082ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4082f0:	f04f 0500 	mov.w	r5, #0
  4082f4:	f04f 0100 	mov.w	r1, #0
  4082f8:	e750      	b.n	40819c <__adddf3+0x138>
  4082fa:	bf00      	nop

004082fc <__aeabi_i2d>:
  4082fc:	f090 0f00 	teq	r0, #0
  408300:	bf04      	itt	eq
  408302:	2100      	moveq	r1, #0
  408304:	4770      	bxeq	lr
  408306:	b530      	push	{r4, r5, lr}
  408308:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40830c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  408310:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  408314:	bf48      	it	mi
  408316:	4240      	negmi	r0, r0
  408318:	f04f 0100 	mov.w	r1, #0
  40831c:	e73e      	b.n	40819c <__adddf3+0x138>
  40831e:	bf00      	nop

00408320 <__aeabi_f2d>:
  408320:	0042      	lsls	r2, r0, #1
  408322:	ea4f 01e2 	mov.w	r1, r2, asr #3
  408326:	ea4f 0131 	mov.w	r1, r1, rrx
  40832a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40832e:	bf1f      	itttt	ne
  408330:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  408334:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  408338:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40833c:	4770      	bxne	lr
  40833e:	f092 0f00 	teq	r2, #0
  408342:	bf14      	ite	ne
  408344:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  408348:	4770      	bxeq	lr
  40834a:	b530      	push	{r4, r5, lr}
  40834c:	f44f 7460 	mov.w	r4, #896	; 0x380
  408350:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408354:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  408358:	e720      	b.n	40819c <__adddf3+0x138>
  40835a:	bf00      	nop

0040835c <__aeabi_ul2d>:
  40835c:	ea50 0201 	orrs.w	r2, r0, r1
  408360:	bf08      	it	eq
  408362:	4770      	bxeq	lr
  408364:	b530      	push	{r4, r5, lr}
  408366:	f04f 0500 	mov.w	r5, #0
  40836a:	e00a      	b.n	408382 <__aeabi_l2d+0x16>

0040836c <__aeabi_l2d>:
  40836c:	ea50 0201 	orrs.w	r2, r0, r1
  408370:	bf08      	it	eq
  408372:	4770      	bxeq	lr
  408374:	b530      	push	{r4, r5, lr}
  408376:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40837a:	d502      	bpl.n	408382 <__aeabi_l2d+0x16>
  40837c:	4240      	negs	r0, r0
  40837e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  408382:	f44f 6480 	mov.w	r4, #1024	; 0x400
  408386:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40838a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40838e:	f43f aedc 	beq.w	40814a <__adddf3+0xe6>
  408392:	f04f 0203 	mov.w	r2, #3
  408396:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40839a:	bf18      	it	ne
  40839c:	3203      	addne	r2, #3
  40839e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4083a2:	bf18      	it	ne
  4083a4:	3203      	addne	r2, #3
  4083a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4083aa:	f1c2 0320 	rsb	r3, r2, #32
  4083ae:	fa00 fc03 	lsl.w	ip, r0, r3
  4083b2:	fa20 f002 	lsr.w	r0, r0, r2
  4083b6:	fa01 fe03 	lsl.w	lr, r1, r3
  4083ba:	ea40 000e 	orr.w	r0, r0, lr
  4083be:	fa21 f102 	lsr.w	r1, r1, r2
  4083c2:	4414      	add	r4, r2
  4083c4:	e6c1      	b.n	40814a <__adddf3+0xe6>
  4083c6:	bf00      	nop

004083c8 <__aeabi_dmul>:
  4083c8:	b570      	push	{r4, r5, r6, lr}
  4083ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4083ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4083d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4083d6:	bf1d      	ittte	ne
  4083d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4083dc:	ea94 0f0c 	teqne	r4, ip
  4083e0:	ea95 0f0c 	teqne	r5, ip
  4083e4:	f000 f8de 	bleq	4085a4 <__aeabi_dmul+0x1dc>
  4083e8:	442c      	add	r4, r5
  4083ea:	ea81 0603 	eor.w	r6, r1, r3
  4083ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4083f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4083f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4083fa:	bf18      	it	ne
  4083fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  408400:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408404:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  408408:	d038      	beq.n	40847c <__aeabi_dmul+0xb4>
  40840a:	fba0 ce02 	umull	ip, lr, r0, r2
  40840e:	f04f 0500 	mov.w	r5, #0
  408412:	fbe1 e502 	umlal	lr, r5, r1, r2
  408416:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40841a:	fbe0 e503 	umlal	lr, r5, r0, r3
  40841e:	f04f 0600 	mov.w	r6, #0
  408422:	fbe1 5603 	umlal	r5, r6, r1, r3
  408426:	f09c 0f00 	teq	ip, #0
  40842a:	bf18      	it	ne
  40842c:	f04e 0e01 	orrne.w	lr, lr, #1
  408430:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  408434:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  408438:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40843c:	d204      	bcs.n	408448 <__aeabi_dmul+0x80>
  40843e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  408442:	416d      	adcs	r5, r5
  408444:	eb46 0606 	adc.w	r6, r6, r6
  408448:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40844c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  408450:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  408454:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  408458:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40845c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  408460:	bf88      	it	hi
  408462:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408466:	d81e      	bhi.n	4084a6 <__aeabi_dmul+0xde>
  408468:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40846c:	bf08      	it	eq
  40846e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  408472:	f150 0000 	adcs.w	r0, r0, #0
  408476:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40847a:	bd70      	pop	{r4, r5, r6, pc}
  40847c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  408480:	ea46 0101 	orr.w	r1, r6, r1
  408484:	ea40 0002 	orr.w	r0, r0, r2
  408488:	ea81 0103 	eor.w	r1, r1, r3
  40848c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  408490:	bfc2      	ittt	gt
  408492:	ebd4 050c 	rsbsgt	r5, r4, ip
  408496:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40849a:	bd70      	popgt	{r4, r5, r6, pc}
  40849c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4084a0:	f04f 0e00 	mov.w	lr, #0
  4084a4:	3c01      	subs	r4, #1
  4084a6:	f300 80ab 	bgt.w	408600 <__aeabi_dmul+0x238>
  4084aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4084ae:	bfde      	ittt	le
  4084b0:	2000      	movle	r0, #0
  4084b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4084b6:	bd70      	pople	{r4, r5, r6, pc}
  4084b8:	f1c4 0400 	rsb	r4, r4, #0
  4084bc:	3c20      	subs	r4, #32
  4084be:	da35      	bge.n	40852c <__aeabi_dmul+0x164>
  4084c0:	340c      	adds	r4, #12
  4084c2:	dc1b      	bgt.n	4084fc <__aeabi_dmul+0x134>
  4084c4:	f104 0414 	add.w	r4, r4, #20
  4084c8:	f1c4 0520 	rsb	r5, r4, #32
  4084cc:	fa00 f305 	lsl.w	r3, r0, r5
  4084d0:	fa20 f004 	lsr.w	r0, r0, r4
  4084d4:	fa01 f205 	lsl.w	r2, r1, r5
  4084d8:	ea40 0002 	orr.w	r0, r0, r2
  4084dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4084e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4084e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4084e8:	fa21 f604 	lsr.w	r6, r1, r4
  4084ec:	eb42 0106 	adc.w	r1, r2, r6
  4084f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4084f4:	bf08      	it	eq
  4084f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4084fa:	bd70      	pop	{r4, r5, r6, pc}
  4084fc:	f1c4 040c 	rsb	r4, r4, #12
  408500:	f1c4 0520 	rsb	r5, r4, #32
  408504:	fa00 f304 	lsl.w	r3, r0, r4
  408508:	fa20 f005 	lsr.w	r0, r0, r5
  40850c:	fa01 f204 	lsl.w	r2, r1, r4
  408510:	ea40 0002 	orr.w	r0, r0, r2
  408514:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408518:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40851c:	f141 0100 	adc.w	r1, r1, #0
  408520:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408524:	bf08      	it	eq
  408526:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40852a:	bd70      	pop	{r4, r5, r6, pc}
  40852c:	f1c4 0520 	rsb	r5, r4, #32
  408530:	fa00 f205 	lsl.w	r2, r0, r5
  408534:	ea4e 0e02 	orr.w	lr, lr, r2
  408538:	fa20 f304 	lsr.w	r3, r0, r4
  40853c:	fa01 f205 	lsl.w	r2, r1, r5
  408540:	ea43 0302 	orr.w	r3, r3, r2
  408544:	fa21 f004 	lsr.w	r0, r1, r4
  408548:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40854c:	fa21 f204 	lsr.w	r2, r1, r4
  408550:	ea20 0002 	bic.w	r0, r0, r2
  408554:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  408558:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40855c:	bf08      	it	eq
  40855e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408562:	bd70      	pop	{r4, r5, r6, pc}
  408564:	f094 0f00 	teq	r4, #0
  408568:	d10f      	bne.n	40858a <__aeabi_dmul+0x1c2>
  40856a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40856e:	0040      	lsls	r0, r0, #1
  408570:	eb41 0101 	adc.w	r1, r1, r1
  408574:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408578:	bf08      	it	eq
  40857a:	3c01      	subeq	r4, #1
  40857c:	d0f7      	beq.n	40856e <__aeabi_dmul+0x1a6>
  40857e:	ea41 0106 	orr.w	r1, r1, r6
  408582:	f095 0f00 	teq	r5, #0
  408586:	bf18      	it	ne
  408588:	4770      	bxne	lr
  40858a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40858e:	0052      	lsls	r2, r2, #1
  408590:	eb43 0303 	adc.w	r3, r3, r3
  408594:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  408598:	bf08      	it	eq
  40859a:	3d01      	subeq	r5, #1
  40859c:	d0f7      	beq.n	40858e <__aeabi_dmul+0x1c6>
  40859e:	ea43 0306 	orr.w	r3, r3, r6
  4085a2:	4770      	bx	lr
  4085a4:	ea94 0f0c 	teq	r4, ip
  4085a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4085ac:	bf18      	it	ne
  4085ae:	ea95 0f0c 	teqne	r5, ip
  4085b2:	d00c      	beq.n	4085ce <__aeabi_dmul+0x206>
  4085b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4085b8:	bf18      	it	ne
  4085ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4085be:	d1d1      	bne.n	408564 <__aeabi_dmul+0x19c>
  4085c0:	ea81 0103 	eor.w	r1, r1, r3
  4085c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4085c8:	f04f 0000 	mov.w	r0, #0
  4085cc:	bd70      	pop	{r4, r5, r6, pc}
  4085ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4085d2:	bf06      	itte	eq
  4085d4:	4610      	moveq	r0, r2
  4085d6:	4619      	moveq	r1, r3
  4085d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4085dc:	d019      	beq.n	408612 <__aeabi_dmul+0x24a>
  4085de:	ea94 0f0c 	teq	r4, ip
  4085e2:	d102      	bne.n	4085ea <__aeabi_dmul+0x222>
  4085e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4085e8:	d113      	bne.n	408612 <__aeabi_dmul+0x24a>
  4085ea:	ea95 0f0c 	teq	r5, ip
  4085ee:	d105      	bne.n	4085fc <__aeabi_dmul+0x234>
  4085f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4085f4:	bf1c      	itt	ne
  4085f6:	4610      	movne	r0, r2
  4085f8:	4619      	movne	r1, r3
  4085fa:	d10a      	bne.n	408612 <__aeabi_dmul+0x24a>
  4085fc:	ea81 0103 	eor.w	r1, r1, r3
  408600:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408604:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  408608:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40860c:	f04f 0000 	mov.w	r0, #0
  408610:	bd70      	pop	{r4, r5, r6, pc}
  408612:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  408616:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40861a:	bd70      	pop	{r4, r5, r6, pc}

0040861c <__aeabi_ddiv>:
  40861c:	b570      	push	{r4, r5, r6, lr}
  40861e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  408622:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  408626:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40862a:	bf1d      	ittte	ne
  40862c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  408630:	ea94 0f0c 	teqne	r4, ip
  408634:	ea95 0f0c 	teqne	r5, ip
  408638:	f000 f8a7 	bleq	40878a <__aeabi_ddiv+0x16e>
  40863c:	eba4 0405 	sub.w	r4, r4, r5
  408640:	ea81 0e03 	eor.w	lr, r1, r3
  408644:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408648:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40864c:	f000 8088 	beq.w	408760 <__aeabi_ddiv+0x144>
  408650:	ea4f 3303 	mov.w	r3, r3, lsl #12
  408654:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  408658:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40865c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  408660:	ea4f 2202 	mov.w	r2, r2, lsl #8
  408664:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  408668:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40866c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  408670:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  408674:	429d      	cmp	r5, r3
  408676:	bf08      	it	eq
  408678:	4296      	cmpeq	r6, r2
  40867a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40867e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  408682:	d202      	bcs.n	40868a <__aeabi_ddiv+0x6e>
  408684:	085b      	lsrs	r3, r3, #1
  408686:	ea4f 0232 	mov.w	r2, r2, rrx
  40868a:	1ab6      	subs	r6, r6, r2
  40868c:	eb65 0503 	sbc.w	r5, r5, r3
  408690:	085b      	lsrs	r3, r3, #1
  408692:	ea4f 0232 	mov.w	r2, r2, rrx
  408696:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40869a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40869e:	ebb6 0e02 	subs.w	lr, r6, r2
  4086a2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4086a6:	bf22      	ittt	cs
  4086a8:	1ab6      	subcs	r6, r6, r2
  4086aa:	4675      	movcs	r5, lr
  4086ac:	ea40 000c 	orrcs.w	r0, r0, ip
  4086b0:	085b      	lsrs	r3, r3, #1
  4086b2:	ea4f 0232 	mov.w	r2, r2, rrx
  4086b6:	ebb6 0e02 	subs.w	lr, r6, r2
  4086ba:	eb75 0e03 	sbcs.w	lr, r5, r3
  4086be:	bf22      	ittt	cs
  4086c0:	1ab6      	subcs	r6, r6, r2
  4086c2:	4675      	movcs	r5, lr
  4086c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4086c8:	085b      	lsrs	r3, r3, #1
  4086ca:	ea4f 0232 	mov.w	r2, r2, rrx
  4086ce:	ebb6 0e02 	subs.w	lr, r6, r2
  4086d2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4086d6:	bf22      	ittt	cs
  4086d8:	1ab6      	subcs	r6, r6, r2
  4086da:	4675      	movcs	r5, lr
  4086dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4086e0:	085b      	lsrs	r3, r3, #1
  4086e2:	ea4f 0232 	mov.w	r2, r2, rrx
  4086e6:	ebb6 0e02 	subs.w	lr, r6, r2
  4086ea:	eb75 0e03 	sbcs.w	lr, r5, r3
  4086ee:	bf22      	ittt	cs
  4086f0:	1ab6      	subcs	r6, r6, r2
  4086f2:	4675      	movcs	r5, lr
  4086f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4086f8:	ea55 0e06 	orrs.w	lr, r5, r6
  4086fc:	d018      	beq.n	408730 <__aeabi_ddiv+0x114>
  4086fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
  408702:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  408706:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40870a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40870e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  408712:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  408716:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40871a:	d1c0      	bne.n	40869e <__aeabi_ddiv+0x82>
  40871c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408720:	d10b      	bne.n	40873a <__aeabi_ddiv+0x11e>
  408722:	ea41 0100 	orr.w	r1, r1, r0
  408726:	f04f 0000 	mov.w	r0, #0
  40872a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40872e:	e7b6      	b.n	40869e <__aeabi_ddiv+0x82>
  408730:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408734:	bf04      	itt	eq
  408736:	4301      	orreq	r1, r0
  408738:	2000      	moveq	r0, #0
  40873a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40873e:	bf88      	it	hi
  408740:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408744:	f63f aeaf 	bhi.w	4084a6 <__aeabi_dmul+0xde>
  408748:	ebb5 0c03 	subs.w	ip, r5, r3
  40874c:	bf04      	itt	eq
  40874e:	ebb6 0c02 	subseq.w	ip, r6, r2
  408752:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  408756:	f150 0000 	adcs.w	r0, r0, #0
  40875a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40875e:	bd70      	pop	{r4, r5, r6, pc}
  408760:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  408764:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  408768:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40876c:	bfc2      	ittt	gt
  40876e:	ebd4 050c 	rsbsgt	r5, r4, ip
  408772:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  408776:	bd70      	popgt	{r4, r5, r6, pc}
  408778:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40877c:	f04f 0e00 	mov.w	lr, #0
  408780:	3c01      	subs	r4, #1
  408782:	e690      	b.n	4084a6 <__aeabi_dmul+0xde>
  408784:	ea45 0e06 	orr.w	lr, r5, r6
  408788:	e68d      	b.n	4084a6 <__aeabi_dmul+0xde>
  40878a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40878e:	ea94 0f0c 	teq	r4, ip
  408792:	bf08      	it	eq
  408794:	ea95 0f0c 	teqeq	r5, ip
  408798:	f43f af3b 	beq.w	408612 <__aeabi_dmul+0x24a>
  40879c:	ea94 0f0c 	teq	r4, ip
  4087a0:	d10a      	bne.n	4087b8 <__aeabi_ddiv+0x19c>
  4087a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4087a6:	f47f af34 	bne.w	408612 <__aeabi_dmul+0x24a>
  4087aa:	ea95 0f0c 	teq	r5, ip
  4087ae:	f47f af25 	bne.w	4085fc <__aeabi_dmul+0x234>
  4087b2:	4610      	mov	r0, r2
  4087b4:	4619      	mov	r1, r3
  4087b6:	e72c      	b.n	408612 <__aeabi_dmul+0x24a>
  4087b8:	ea95 0f0c 	teq	r5, ip
  4087bc:	d106      	bne.n	4087cc <__aeabi_ddiv+0x1b0>
  4087be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4087c2:	f43f aefd 	beq.w	4085c0 <__aeabi_dmul+0x1f8>
  4087c6:	4610      	mov	r0, r2
  4087c8:	4619      	mov	r1, r3
  4087ca:	e722      	b.n	408612 <__aeabi_dmul+0x24a>
  4087cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4087d0:	bf18      	it	ne
  4087d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4087d6:	f47f aec5 	bne.w	408564 <__aeabi_dmul+0x19c>
  4087da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4087de:	f47f af0d 	bne.w	4085fc <__aeabi_dmul+0x234>
  4087e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4087e6:	f47f aeeb 	bne.w	4085c0 <__aeabi_dmul+0x1f8>
  4087ea:	e712      	b.n	408612 <__aeabi_dmul+0x24a>

004087ec <__gedf2>:
  4087ec:	f04f 3cff 	mov.w	ip, #4294967295
  4087f0:	e006      	b.n	408800 <__cmpdf2+0x4>
  4087f2:	bf00      	nop

004087f4 <__ledf2>:
  4087f4:	f04f 0c01 	mov.w	ip, #1
  4087f8:	e002      	b.n	408800 <__cmpdf2+0x4>
  4087fa:	bf00      	nop

004087fc <__cmpdf2>:
  4087fc:	f04f 0c01 	mov.w	ip, #1
  408800:	f84d cd04 	str.w	ip, [sp, #-4]!
  408804:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408808:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40880c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408810:	bf18      	it	ne
  408812:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  408816:	d01b      	beq.n	408850 <__cmpdf2+0x54>
  408818:	b001      	add	sp, #4
  40881a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40881e:	bf0c      	ite	eq
  408820:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  408824:	ea91 0f03 	teqne	r1, r3
  408828:	bf02      	ittt	eq
  40882a:	ea90 0f02 	teqeq	r0, r2
  40882e:	2000      	moveq	r0, #0
  408830:	4770      	bxeq	lr
  408832:	f110 0f00 	cmn.w	r0, #0
  408836:	ea91 0f03 	teq	r1, r3
  40883a:	bf58      	it	pl
  40883c:	4299      	cmppl	r1, r3
  40883e:	bf08      	it	eq
  408840:	4290      	cmpeq	r0, r2
  408842:	bf2c      	ite	cs
  408844:	17d8      	asrcs	r0, r3, #31
  408846:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40884a:	f040 0001 	orr.w	r0, r0, #1
  40884e:	4770      	bx	lr
  408850:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408854:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408858:	d102      	bne.n	408860 <__cmpdf2+0x64>
  40885a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40885e:	d107      	bne.n	408870 <__cmpdf2+0x74>
  408860:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408864:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408868:	d1d6      	bne.n	408818 <__cmpdf2+0x1c>
  40886a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40886e:	d0d3      	beq.n	408818 <__cmpdf2+0x1c>
  408870:	f85d 0b04 	ldr.w	r0, [sp], #4
  408874:	4770      	bx	lr
  408876:	bf00      	nop

00408878 <__aeabi_cdrcmple>:
  408878:	4684      	mov	ip, r0
  40887a:	4610      	mov	r0, r2
  40887c:	4662      	mov	r2, ip
  40887e:	468c      	mov	ip, r1
  408880:	4619      	mov	r1, r3
  408882:	4663      	mov	r3, ip
  408884:	e000      	b.n	408888 <__aeabi_cdcmpeq>
  408886:	bf00      	nop

00408888 <__aeabi_cdcmpeq>:
  408888:	b501      	push	{r0, lr}
  40888a:	f7ff ffb7 	bl	4087fc <__cmpdf2>
  40888e:	2800      	cmp	r0, #0
  408890:	bf48      	it	mi
  408892:	f110 0f00 	cmnmi.w	r0, #0
  408896:	bd01      	pop	{r0, pc}

00408898 <__aeabi_dcmpeq>:
  408898:	f84d ed08 	str.w	lr, [sp, #-8]!
  40889c:	f7ff fff4 	bl	408888 <__aeabi_cdcmpeq>
  4088a0:	bf0c      	ite	eq
  4088a2:	2001      	moveq	r0, #1
  4088a4:	2000      	movne	r0, #0
  4088a6:	f85d fb08 	ldr.w	pc, [sp], #8
  4088aa:	bf00      	nop

004088ac <__aeabi_dcmplt>:
  4088ac:	f84d ed08 	str.w	lr, [sp, #-8]!
  4088b0:	f7ff ffea 	bl	408888 <__aeabi_cdcmpeq>
  4088b4:	bf34      	ite	cc
  4088b6:	2001      	movcc	r0, #1
  4088b8:	2000      	movcs	r0, #0
  4088ba:	f85d fb08 	ldr.w	pc, [sp], #8
  4088be:	bf00      	nop

004088c0 <__aeabi_dcmple>:
  4088c0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4088c4:	f7ff ffe0 	bl	408888 <__aeabi_cdcmpeq>
  4088c8:	bf94      	ite	ls
  4088ca:	2001      	movls	r0, #1
  4088cc:	2000      	movhi	r0, #0
  4088ce:	f85d fb08 	ldr.w	pc, [sp], #8
  4088d2:	bf00      	nop

004088d4 <__aeabi_dcmpge>:
  4088d4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4088d8:	f7ff ffce 	bl	408878 <__aeabi_cdrcmple>
  4088dc:	bf94      	ite	ls
  4088de:	2001      	movls	r0, #1
  4088e0:	2000      	movhi	r0, #0
  4088e2:	f85d fb08 	ldr.w	pc, [sp], #8
  4088e6:	bf00      	nop

004088e8 <__aeabi_dcmpgt>:
  4088e8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4088ec:	f7ff ffc4 	bl	408878 <__aeabi_cdrcmple>
  4088f0:	bf34      	ite	cc
  4088f2:	2001      	movcc	r0, #1
  4088f4:	2000      	movcs	r0, #0
  4088f6:	f85d fb08 	ldr.w	pc, [sp], #8
  4088fa:	bf00      	nop

004088fc <__aeabi_dcmpun>:
  4088fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408904:	d102      	bne.n	40890c <__aeabi_dcmpun+0x10>
  408906:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40890a:	d10a      	bne.n	408922 <__aeabi_dcmpun+0x26>
  40890c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  408910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408914:	d102      	bne.n	40891c <__aeabi_dcmpun+0x20>
  408916:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40891a:	d102      	bne.n	408922 <__aeabi_dcmpun+0x26>
  40891c:	f04f 0000 	mov.w	r0, #0
  408920:	4770      	bx	lr
  408922:	f04f 0001 	mov.w	r0, #1
  408926:	4770      	bx	lr

00408928 <__aeabi_d2iz>:
  408928:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40892c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  408930:	d215      	bcs.n	40895e <__aeabi_d2iz+0x36>
  408932:	d511      	bpl.n	408958 <__aeabi_d2iz+0x30>
  408934:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  408938:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40893c:	d912      	bls.n	408964 <__aeabi_d2iz+0x3c>
  40893e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  408942:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  408946:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40894a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40894e:	fa23 f002 	lsr.w	r0, r3, r2
  408952:	bf18      	it	ne
  408954:	4240      	negne	r0, r0
  408956:	4770      	bx	lr
  408958:	f04f 0000 	mov.w	r0, #0
  40895c:	4770      	bx	lr
  40895e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  408962:	d105      	bne.n	408970 <__aeabi_d2iz+0x48>
  408964:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  408968:	bf08      	it	eq
  40896a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40896e:	4770      	bx	lr
  408970:	f04f 0000 	mov.w	r0, #0
  408974:	4770      	bx	lr
  408976:	bf00      	nop

00408978 <__aeabi_ldivmod>:
  408978:	b97b      	cbnz	r3, 40899a <__aeabi_ldivmod+0x22>
  40897a:	b972      	cbnz	r2, 40899a <__aeabi_ldivmod+0x22>
  40897c:	2900      	cmp	r1, #0
  40897e:	bfbe      	ittt	lt
  408980:	2000      	movlt	r0, #0
  408982:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
  408986:	e006      	blt.n	408996 <__aeabi_ldivmod+0x1e>
  408988:	bf08      	it	eq
  40898a:	2800      	cmpeq	r0, #0
  40898c:	bf1c      	itt	ne
  40898e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
  408992:	f04f 30ff 	movne.w	r0, #4294967295
  408996:	f000 b9c5 	b.w	408d24 <__aeabi_idiv0>
  40899a:	f1ad 0c08 	sub.w	ip, sp, #8
  40899e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4089a2:	2900      	cmp	r1, #0
  4089a4:	db09      	blt.n	4089ba <__aeabi_ldivmod+0x42>
  4089a6:	2b00      	cmp	r3, #0
  4089a8:	db1a      	blt.n	4089e0 <__aeabi_ldivmod+0x68>
  4089aa:	f000 f84d 	bl	408a48 <__udivmoddi4>
  4089ae:	f8dd e004 	ldr.w	lr, [sp, #4]
  4089b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4089b6:	b004      	add	sp, #16
  4089b8:	4770      	bx	lr
  4089ba:	4240      	negs	r0, r0
  4089bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4089c0:	2b00      	cmp	r3, #0
  4089c2:	db1b      	blt.n	4089fc <__aeabi_ldivmod+0x84>
  4089c4:	f000 f840 	bl	408a48 <__udivmoddi4>
  4089c8:	f8dd e004 	ldr.w	lr, [sp, #4]
  4089cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4089d0:	b004      	add	sp, #16
  4089d2:	4240      	negs	r0, r0
  4089d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4089d8:	4252      	negs	r2, r2
  4089da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4089de:	4770      	bx	lr
  4089e0:	4252      	negs	r2, r2
  4089e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4089e6:	f000 f82f 	bl	408a48 <__udivmoddi4>
  4089ea:	f8dd e004 	ldr.w	lr, [sp, #4]
  4089ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4089f2:	b004      	add	sp, #16
  4089f4:	4240      	negs	r0, r0
  4089f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4089fa:	4770      	bx	lr
  4089fc:	4252      	negs	r2, r2
  4089fe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  408a02:	f000 f821 	bl	408a48 <__udivmoddi4>
  408a06:	f8dd e004 	ldr.w	lr, [sp, #4]
  408a0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408a0e:	b004      	add	sp, #16
  408a10:	4252      	negs	r2, r2
  408a12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  408a16:	4770      	bx	lr

00408a18 <__aeabi_uldivmod>:
  408a18:	b953      	cbnz	r3, 408a30 <__aeabi_uldivmod+0x18>
  408a1a:	b94a      	cbnz	r2, 408a30 <__aeabi_uldivmod+0x18>
  408a1c:	2900      	cmp	r1, #0
  408a1e:	bf08      	it	eq
  408a20:	2800      	cmpeq	r0, #0
  408a22:	bf1c      	itt	ne
  408a24:	f04f 31ff 	movne.w	r1, #4294967295
  408a28:	f04f 30ff 	movne.w	r0, #4294967295
  408a2c:	f000 b97a 	b.w	408d24 <__aeabi_idiv0>
  408a30:	f1ad 0c08 	sub.w	ip, sp, #8
  408a34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  408a38:	f000 f806 	bl	408a48 <__udivmoddi4>
  408a3c:	f8dd e004 	ldr.w	lr, [sp, #4]
  408a40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408a44:	b004      	add	sp, #16
  408a46:	4770      	bx	lr

00408a48 <__udivmoddi4>:
  408a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408a4c:	468c      	mov	ip, r1
  408a4e:	460d      	mov	r5, r1
  408a50:	4604      	mov	r4, r0
  408a52:	9e08      	ldr	r6, [sp, #32]
  408a54:	2b00      	cmp	r3, #0
  408a56:	d151      	bne.n	408afc <__udivmoddi4+0xb4>
  408a58:	428a      	cmp	r2, r1
  408a5a:	4617      	mov	r7, r2
  408a5c:	d96d      	bls.n	408b3a <__udivmoddi4+0xf2>
  408a5e:	fab2 fe82 	clz	lr, r2
  408a62:	f1be 0f00 	cmp.w	lr, #0
  408a66:	d00b      	beq.n	408a80 <__udivmoddi4+0x38>
  408a68:	f1ce 0c20 	rsb	ip, lr, #32
  408a6c:	fa01 f50e 	lsl.w	r5, r1, lr
  408a70:	fa20 fc0c 	lsr.w	ip, r0, ip
  408a74:	fa02 f70e 	lsl.w	r7, r2, lr
  408a78:	ea4c 0c05 	orr.w	ip, ip, r5
  408a7c:	fa00 f40e 	lsl.w	r4, r0, lr
  408a80:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  408a84:	0c25      	lsrs	r5, r4, #16
  408a86:	fbbc f8fa 	udiv	r8, ip, sl
  408a8a:	fa1f f987 	uxth.w	r9, r7
  408a8e:	fb0a cc18 	mls	ip, sl, r8, ip
  408a92:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  408a96:	fb08 f309 	mul.w	r3, r8, r9
  408a9a:	42ab      	cmp	r3, r5
  408a9c:	d90a      	bls.n	408ab4 <__udivmoddi4+0x6c>
  408a9e:	19ed      	adds	r5, r5, r7
  408aa0:	f108 32ff 	add.w	r2, r8, #4294967295
  408aa4:	f080 8123 	bcs.w	408cee <__udivmoddi4+0x2a6>
  408aa8:	42ab      	cmp	r3, r5
  408aaa:	f240 8120 	bls.w	408cee <__udivmoddi4+0x2a6>
  408aae:	f1a8 0802 	sub.w	r8, r8, #2
  408ab2:	443d      	add	r5, r7
  408ab4:	1aed      	subs	r5, r5, r3
  408ab6:	b2a4      	uxth	r4, r4
  408ab8:	fbb5 f0fa 	udiv	r0, r5, sl
  408abc:	fb0a 5510 	mls	r5, sl, r0, r5
  408ac0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  408ac4:	fb00 f909 	mul.w	r9, r0, r9
  408ac8:	45a1      	cmp	r9, r4
  408aca:	d909      	bls.n	408ae0 <__udivmoddi4+0x98>
  408acc:	19e4      	adds	r4, r4, r7
  408ace:	f100 33ff 	add.w	r3, r0, #4294967295
  408ad2:	f080 810a 	bcs.w	408cea <__udivmoddi4+0x2a2>
  408ad6:	45a1      	cmp	r9, r4
  408ad8:	f240 8107 	bls.w	408cea <__udivmoddi4+0x2a2>
  408adc:	3802      	subs	r0, #2
  408ade:	443c      	add	r4, r7
  408ae0:	eba4 0409 	sub.w	r4, r4, r9
  408ae4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408ae8:	2100      	movs	r1, #0
  408aea:	2e00      	cmp	r6, #0
  408aec:	d061      	beq.n	408bb2 <__udivmoddi4+0x16a>
  408aee:	fa24 f40e 	lsr.w	r4, r4, lr
  408af2:	2300      	movs	r3, #0
  408af4:	6034      	str	r4, [r6, #0]
  408af6:	6073      	str	r3, [r6, #4]
  408af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408afc:	428b      	cmp	r3, r1
  408afe:	d907      	bls.n	408b10 <__udivmoddi4+0xc8>
  408b00:	2e00      	cmp	r6, #0
  408b02:	d054      	beq.n	408bae <__udivmoddi4+0x166>
  408b04:	2100      	movs	r1, #0
  408b06:	e886 0021 	stmia.w	r6, {r0, r5}
  408b0a:	4608      	mov	r0, r1
  408b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408b10:	fab3 f183 	clz	r1, r3
  408b14:	2900      	cmp	r1, #0
  408b16:	f040 808e 	bne.w	408c36 <__udivmoddi4+0x1ee>
  408b1a:	42ab      	cmp	r3, r5
  408b1c:	d302      	bcc.n	408b24 <__udivmoddi4+0xdc>
  408b1e:	4282      	cmp	r2, r0
  408b20:	f200 80fa 	bhi.w	408d18 <__udivmoddi4+0x2d0>
  408b24:	1a84      	subs	r4, r0, r2
  408b26:	eb65 0503 	sbc.w	r5, r5, r3
  408b2a:	2001      	movs	r0, #1
  408b2c:	46ac      	mov	ip, r5
  408b2e:	2e00      	cmp	r6, #0
  408b30:	d03f      	beq.n	408bb2 <__udivmoddi4+0x16a>
  408b32:	e886 1010 	stmia.w	r6, {r4, ip}
  408b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408b3a:	b912      	cbnz	r2, 408b42 <__udivmoddi4+0xfa>
  408b3c:	2701      	movs	r7, #1
  408b3e:	fbb7 f7f2 	udiv	r7, r7, r2
  408b42:	fab7 fe87 	clz	lr, r7
  408b46:	f1be 0f00 	cmp.w	lr, #0
  408b4a:	d134      	bne.n	408bb6 <__udivmoddi4+0x16e>
  408b4c:	1beb      	subs	r3, r5, r7
  408b4e:	0c3a      	lsrs	r2, r7, #16
  408b50:	fa1f fc87 	uxth.w	ip, r7
  408b54:	2101      	movs	r1, #1
  408b56:	fbb3 f8f2 	udiv	r8, r3, r2
  408b5a:	0c25      	lsrs	r5, r4, #16
  408b5c:	fb02 3318 	mls	r3, r2, r8, r3
  408b60:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408b64:	fb0c f308 	mul.w	r3, ip, r8
  408b68:	42ab      	cmp	r3, r5
  408b6a:	d907      	bls.n	408b7c <__udivmoddi4+0x134>
  408b6c:	19ed      	adds	r5, r5, r7
  408b6e:	f108 30ff 	add.w	r0, r8, #4294967295
  408b72:	d202      	bcs.n	408b7a <__udivmoddi4+0x132>
  408b74:	42ab      	cmp	r3, r5
  408b76:	f200 80d1 	bhi.w	408d1c <__udivmoddi4+0x2d4>
  408b7a:	4680      	mov	r8, r0
  408b7c:	1aed      	subs	r5, r5, r3
  408b7e:	b2a3      	uxth	r3, r4
  408b80:	fbb5 f0f2 	udiv	r0, r5, r2
  408b84:	fb02 5510 	mls	r5, r2, r0, r5
  408b88:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  408b8c:	fb0c fc00 	mul.w	ip, ip, r0
  408b90:	45a4      	cmp	ip, r4
  408b92:	d907      	bls.n	408ba4 <__udivmoddi4+0x15c>
  408b94:	19e4      	adds	r4, r4, r7
  408b96:	f100 33ff 	add.w	r3, r0, #4294967295
  408b9a:	d202      	bcs.n	408ba2 <__udivmoddi4+0x15a>
  408b9c:	45a4      	cmp	ip, r4
  408b9e:	f200 80b8 	bhi.w	408d12 <__udivmoddi4+0x2ca>
  408ba2:	4618      	mov	r0, r3
  408ba4:	eba4 040c 	sub.w	r4, r4, ip
  408ba8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408bac:	e79d      	b.n	408aea <__udivmoddi4+0xa2>
  408bae:	4631      	mov	r1, r6
  408bb0:	4630      	mov	r0, r6
  408bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408bb6:	f1ce 0420 	rsb	r4, lr, #32
  408bba:	fa05 f30e 	lsl.w	r3, r5, lr
  408bbe:	fa07 f70e 	lsl.w	r7, r7, lr
  408bc2:	fa20 f804 	lsr.w	r8, r0, r4
  408bc6:	0c3a      	lsrs	r2, r7, #16
  408bc8:	fa25 f404 	lsr.w	r4, r5, r4
  408bcc:	ea48 0803 	orr.w	r8, r8, r3
  408bd0:	fbb4 f1f2 	udiv	r1, r4, r2
  408bd4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  408bd8:	fb02 4411 	mls	r4, r2, r1, r4
  408bdc:	fa1f fc87 	uxth.w	ip, r7
  408be0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  408be4:	fb01 f30c 	mul.w	r3, r1, ip
  408be8:	42ab      	cmp	r3, r5
  408bea:	fa00 f40e 	lsl.w	r4, r0, lr
  408bee:	d909      	bls.n	408c04 <__udivmoddi4+0x1bc>
  408bf0:	19ed      	adds	r5, r5, r7
  408bf2:	f101 30ff 	add.w	r0, r1, #4294967295
  408bf6:	f080 808a 	bcs.w	408d0e <__udivmoddi4+0x2c6>
  408bfa:	42ab      	cmp	r3, r5
  408bfc:	f240 8087 	bls.w	408d0e <__udivmoddi4+0x2c6>
  408c00:	3902      	subs	r1, #2
  408c02:	443d      	add	r5, r7
  408c04:	1aeb      	subs	r3, r5, r3
  408c06:	fa1f f588 	uxth.w	r5, r8
  408c0a:	fbb3 f0f2 	udiv	r0, r3, r2
  408c0e:	fb02 3310 	mls	r3, r2, r0, r3
  408c12:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408c16:	fb00 f30c 	mul.w	r3, r0, ip
  408c1a:	42ab      	cmp	r3, r5
  408c1c:	d907      	bls.n	408c2e <__udivmoddi4+0x1e6>
  408c1e:	19ed      	adds	r5, r5, r7
  408c20:	f100 38ff 	add.w	r8, r0, #4294967295
  408c24:	d26f      	bcs.n	408d06 <__udivmoddi4+0x2be>
  408c26:	42ab      	cmp	r3, r5
  408c28:	d96d      	bls.n	408d06 <__udivmoddi4+0x2be>
  408c2a:	3802      	subs	r0, #2
  408c2c:	443d      	add	r5, r7
  408c2e:	1aeb      	subs	r3, r5, r3
  408c30:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  408c34:	e78f      	b.n	408b56 <__udivmoddi4+0x10e>
  408c36:	f1c1 0720 	rsb	r7, r1, #32
  408c3a:	fa22 f807 	lsr.w	r8, r2, r7
  408c3e:	408b      	lsls	r3, r1
  408c40:	fa05 f401 	lsl.w	r4, r5, r1
  408c44:	ea48 0303 	orr.w	r3, r8, r3
  408c48:	fa20 fe07 	lsr.w	lr, r0, r7
  408c4c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  408c50:	40fd      	lsrs	r5, r7
  408c52:	ea4e 0e04 	orr.w	lr, lr, r4
  408c56:	fbb5 f9fc 	udiv	r9, r5, ip
  408c5a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  408c5e:	fb0c 5519 	mls	r5, ip, r9, r5
  408c62:	fa1f f883 	uxth.w	r8, r3
  408c66:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  408c6a:	fb09 f408 	mul.w	r4, r9, r8
  408c6e:	42ac      	cmp	r4, r5
  408c70:	fa02 f201 	lsl.w	r2, r2, r1
  408c74:	fa00 fa01 	lsl.w	sl, r0, r1
  408c78:	d908      	bls.n	408c8c <__udivmoddi4+0x244>
  408c7a:	18ed      	adds	r5, r5, r3
  408c7c:	f109 30ff 	add.w	r0, r9, #4294967295
  408c80:	d243      	bcs.n	408d0a <__udivmoddi4+0x2c2>
  408c82:	42ac      	cmp	r4, r5
  408c84:	d941      	bls.n	408d0a <__udivmoddi4+0x2c2>
  408c86:	f1a9 0902 	sub.w	r9, r9, #2
  408c8a:	441d      	add	r5, r3
  408c8c:	1b2d      	subs	r5, r5, r4
  408c8e:	fa1f fe8e 	uxth.w	lr, lr
  408c92:	fbb5 f0fc 	udiv	r0, r5, ip
  408c96:	fb0c 5510 	mls	r5, ip, r0, r5
  408c9a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  408c9e:	fb00 f808 	mul.w	r8, r0, r8
  408ca2:	45a0      	cmp	r8, r4
  408ca4:	d907      	bls.n	408cb6 <__udivmoddi4+0x26e>
  408ca6:	18e4      	adds	r4, r4, r3
  408ca8:	f100 35ff 	add.w	r5, r0, #4294967295
  408cac:	d229      	bcs.n	408d02 <__udivmoddi4+0x2ba>
  408cae:	45a0      	cmp	r8, r4
  408cb0:	d927      	bls.n	408d02 <__udivmoddi4+0x2ba>
  408cb2:	3802      	subs	r0, #2
  408cb4:	441c      	add	r4, r3
  408cb6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  408cba:	eba4 0408 	sub.w	r4, r4, r8
  408cbe:	fba0 8902 	umull	r8, r9, r0, r2
  408cc2:	454c      	cmp	r4, r9
  408cc4:	46c6      	mov	lr, r8
  408cc6:	464d      	mov	r5, r9
  408cc8:	d315      	bcc.n	408cf6 <__udivmoddi4+0x2ae>
  408cca:	d012      	beq.n	408cf2 <__udivmoddi4+0x2aa>
  408ccc:	b156      	cbz	r6, 408ce4 <__udivmoddi4+0x29c>
  408cce:	ebba 030e 	subs.w	r3, sl, lr
  408cd2:	eb64 0405 	sbc.w	r4, r4, r5
  408cd6:	fa04 f707 	lsl.w	r7, r4, r7
  408cda:	40cb      	lsrs	r3, r1
  408cdc:	431f      	orrs	r7, r3
  408cde:	40cc      	lsrs	r4, r1
  408ce0:	6037      	str	r7, [r6, #0]
  408ce2:	6074      	str	r4, [r6, #4]
  408ce4:	2100      	movs	r1, #0
  408ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408cea:	4618      	mov	r0, r3
  408cec:	e6f8      	b.n	408ae0 <__udivmoddi4+0x98>
  408cee:	4690      	mov	r8, r2
  408cf0:	e6e0      	b.n	408ab4 <__udivmoddi4+0x6c>
  408cf2:	45c2      	cmp	sl, r8
  408cf4:	d2ea      	bcs.n	408ccc <__udivmoddi4+0x284>
  408cf6:	ebb8 0e02 	subs.w	lr, r8, r2
  408cfa:	eb69 0503 	sbc.w	r5, r9, r3
  408cfe:	3801      	subs	r0, #1
  408d00:	e7e4      	b.n	408ccc <__udivmoddi4+0x284>
  408d02:	4628      	mov	r0, r5
  408d04:	e7d7      	b.n	408cb6 <__udivmoddi4+0x26e>
  408d06:	4640      	mov	r0, r8
  408d08:	e791      	b.n	408c2e <__udivmoddi4+0x1e6>
  408d0a:	4681      	mov	r9, r0
  408d0c:	e7be      	b.n	408c8c <__udivmoddi4+0x244>
  408d0e:	4601      	mov	r1, r0
  408d10:	e778      	b.n	408c04 <__udivmoddi4+0x1bc>
  408d12:	3802      	subs	r0, #2
  408d14:	443c      	add	r4, r7
  408d16:	e745      	b.n	408ba4 <__udivmoddi4+0x15c>
  408d18:	4608      	mov	r0, r1
  408d1a:	e708      	b.n	408b2e <__udivmoddi4+0xe6>
  408d1c:	f1a8 0802 	sub.w	r8, r8, #2
  408d20:	443d      	add	r5, r7
  408d22:	e72b      	b.n	408b7c <__udivmoddi4+0x134>

00408d24 <__aeabi_idiv0>:
  408d24:	4770      	bx	lr
  408d26:	bf00      	nop

00408d28 <__errno>:
  408d28:	4b01      	ldr	r3, [pc, #4]	; (408d30 <__errno+0x8>)
  408d2a:	6818      	ldr	r0, [r3, #0]
  408d2c:	4770      	bx	lr
  408d2e:	bf00      	nop
  408d30:	20000108 	.word	0x20000108

00408d34 <__libc_init_array>:
  408d34:	b570      	push	{r4, r5, r6, lr}
  408d36:	4e0f      	ldr	r6, [pc, #60]	; (408d74 <__libc_init_array+0x40>)
  408d38:	4d0f      	ldr	r5, [pc, #60]	; (408d78 <__libc_init_array+0x44>)
  408d3a:	1b76      	subs	r6, r6, r5
  408d3c:	10b6      	asrs	r6, r6, #2
  408d3e:	bf18      	it	ne
  408d40:	2400      	movne	r4, #0
  408d42:	d005      	beq.n	408d50 <__libc_init_array+0x1c>
  408d44:	3401      	adds	r4, #1
  408d46:	f855 3b04 	ldr.w	r3, [r5], #4
  408d4a:	4798      	blx	r3
  408d4c:	42a6      	cmp	r6, r4
  408d4e:	d1f9      	bne.n	408d44 <__libc_init_array+0x10>
  408d50:	4e0a      	ldr	r6, [pc, #40]	; (408d7c <__libc_init_array+0x48>)
  408d52:	4d0b      	ldr	r5, [pc, #44]	; (408d80 <__libc_init_array+0x4c>)
  408d54:	1b76      	subs	r6, r6, r5
  408d56:	f000 faa9 	bl	4092ac <_init>
  408d5a:	10b6      	asrs	r6, r6, #2
  408d5c:	bf18      	it	ne
  408d5e:	2400      	movne	r4, #0
  408d60:	d006      	beq.n	408d70 <__libc_init_array+0x3c>
  408d62:	3401      	adds	r4, #1
  408d64:	f855 3b04 	ldr.w	r3, [r5], #4
  408d68:	4798      	blx	r3
  408d6a:	42a6      	cmp	r6, r4
  408d6c:	d1f9      	bne.n	408d62 <__libc_init_array+0x2e>
  408d6e:	bd70      	pop	{r4, r5, r6, pc}
  408d70:	bd70      	pop	{r4, r5, r6, pc}
  408d72:	bf00      	nop
  408d74:	004092b8 	.word	0x004092b8
  408d78:	004092b8 	.word	0x004092b8
  408d7c:	004092c0 	.word	0x004092c0
  408d80:	004092b8 	.word	0x004092b8

00408d84 <memcpy>:
  408d84:	4684      	mov	ip, r0
  408d86:	ea41 0300 	orr.w	r3, r1, r0
  408d8a:	f013 0303 	ands.w	r3, r3, #3
  408d8e:	d16d      	bne.n	408e6c <memcpy+0xe8>
  408d90:	3a40      	subs	r2, #64	; 0x40
  408d92:	d341      	bcc.n	408e18 <memcpy+0x94>
  408d94:	f851 3b04 	ldr.w	r3, [r1], #4
  408d98:	f840 3b04 	str.w	r3, [r0], #4
  408d9c:	f851 3b04 	ldr.w	r3, [r1], #4
  408da0:	f840 3b04 	str.w	r3, [r0], #4
  408da4:	f851 3b04 	ldr.w	r3, [r1], #4
  408da8:	f840 3b04 	str.w	r3, [r0], #4
  408dac:	f851 3b04 	ldr.w	r3, [r1], #4
  408db0:	f840 3b04 	str.w	r3, [r0], #4
  408db4:	f851 3b04 	ldr.w	r3, [r1], #4
  408db8:	f840 3b04 	str.w	r3, [r0], #4
  408dbc:	f851 3b04 	ldr.w	r3, [r1], #4
  408dc0:	f840 3b04 	str.w	r3, [r0], #4
  408dc4:	f851 3b04 	ldr.w	r3, [r1], #4
  408dc8:	f840 3b04 	str.w	r3, [r0], #4
  408dcc:	f851 3b04 	ldr.w	r3, [r1], #4
  408dd0:	f840 3b04 	str.w	r3, [r0], #4
  408dd4:	f851 3b04 	ldr.w	r3, [r1], #4
  408dd8:	f840 3b04 	str.w	r3, [r0], #4
  408ddc:	f851 3b04 	ldr.w	r3, [r1], #4
  408de0:	f840 3b04 	str.w	r3, [r0], #4
  408de4:	f851 3b04 	ldr.w	r3, [r1], #4
  408de8:	f840 3b04 	str.w	r3, [r0], #4
  408dec:	f851 3b04 	ldr.w	r3, [r1], #4
  408df0:	f840 3b04 	str.w	r3, [r0], #4
  408df4:	f851 3b04 	ldr.w	r3, [r1], #4
  408df8:	f840 3b04 	str.w	r3, [r0], #4
  408dfc:	f851 3b04 	ldr.w	r3, [r1], #4
  408e00:	f840 3b04 	str.w	r3, [r0], #4
  408e04:	f851 3b04 	ldr.w	r3, [r1], #4
  408e08:	f840 3b04 	str.w	r3, [r0], #4
  408e0c:	f851 3b04 	ldr.w	r3, [r1], #4
  408e10:	f840 3b04 	str.w	r3, [r0], #4
  408e14:	3a40      	subs	r2, #64	; 0x40
  408e16:	d2bd      	bcs.n	408d94 <memcpy+0x10>
  408e18:	3230      	adds	r2, #48	; 0x30
  408e1a:	d311      	bcc.n	408e40 <memcpy+0xbc>
  408e1c:	f851 3b04 	ldr.w	r3, [r1], #4
  408e20:	f840 3b04 	str.w	r3, [r0], #4
  408e24:	f851 3b04 	ldr.w	r3, [r1], #4
  408e28:	f840 3b04 	str.w	r3, [r0], #4
  408e2c:	f851 3b04 	ldr.w	r3, [r1], #4
  408e30:	f840 3b04 	str.w	r3, [r0], #4
  408e34:	f851 3b04 	ldr.w	r3, [r1], #4
  408e38:	f840 3b04 	str.w	r3, [r0], #4
  408e3c:	3a10      	subs	r2, #16
  408e3e:	d2ed      	bcs.n	408e1c <memcpy+0x98>
  408e40:	320c      	adds	r2, #12
  408e42:	d305      	bcc.n	408e50 <memcpy+0xcc>
  408e44:	f851 3b04 	ldr.w	r3, [r1], #4
  408e48:	f840 3b04 	str.w	r3, [r0], #4
  408e4c:	3a04      	subs	r2, #4
  408e4e:	d2f9      	bcs.n	408e44 <memcpy+0xc0>
  408e50:	3204      	adds	r2, #4
  408e52:	d008      	beq.n	408e66 <memcpy+0xe2>
  408e54:	07d2      	lsls	r2, r2, #31
  408e56:	bf1c      	itt	ne
  408e58:	f811 3b01 	ldrbne.w	r3, [r1], #1
  408e5c:	f800 3b01 	strbne.w	r3, [r0], #1
  408e60:	d301      	bcc.n	408e66 <memcpy+0xe2>
  408e62:	880b      	ldrh	r3, [r1, #0]
  408e64:	8003      	strh	r3, [r0, #0]
  408e66:	4660      	mov	r0, ip
  408e68:	4770      	bx	lr
  408e6a:	bf00      	nop
  408e6c:	2a08      	cmp	r2, #8
  408e6e:	d313      	bcc.n	408e98 <memcpy+0x114>
  408e70:	078b      	lsls	r3, r1, #30
  408e72:	d08d      	beq.n	408d90 <memcpy+0xc>
  408e74:	f010 0303 	ands.w	r3, r0, #3
  408e78:	d08a      	beq.n	408d90 <memcpy+0xc>
  408e7a:	f1c3 0304 	rsb	r3, r3, #4
  408e7e:	1ad2      	subs	r2, r2, r3
  408e80:	07db      	lsls	r3, r3, #31
  408e82:	bf1c      	itt	ne
  408e84:	f811 3b01 	ldrbne.w	r3, [r1], #1
  408e88:	f800 3b01 	strbne.w	r3, [r0], #1
  408e8c:	d380      	bcc.n	408d90 <memcpy+0xc>
  408e8e:	f831 3b02 	ldrh.w	r3, [r1], #2
  408e92:	f820 3b02 	strh.w	r3, [r0], #2
  408e96:	e77b      	b.n	408d90 <memcpy+0xc>
  408e98:	3a04      	subs	r2, #4
  408e9a:	d3d9      	bcc.n	408e50 <memcpy+0xcc>
  408e9c:	3a01      	subs	r2, #1
  408e9e:	f811 3b01 	ldrb.w	r3, [r1], #1
  408ea2:	f800 3b01 	strb.w	r3, [r0], #1
  408ea6:	d2f9      	bcs.n	408e9c <memcpy+0x118>
  408ea8:	780b      	ldrb	r3, [r1, #0]
  408eaa:	7003      	strb	r3, [r0, #0]
  408eac:	784b      	ldrb	r3, [r1, #1]
  408eae:	7043      	strb	r3, [r0, #1]
  408eb0:	788b      	ldrb	r3, [r1, #2]
  408eb2:	7083      	strb	r3, [r0, #2]
  408eb4:	4660      	mov	r0, ip
  408eb6:	4770      	bx	lr

00408eb8 <memset>:
  408eb8:	b470      	push	{r4, r5, r6}
  408eba:	0786      	lsls	r6, r0, #30
  408ebc:	d046      	beq.n	408f4c <memset+0x94>
  408ebe:	1e54      	subs	r4, r2, #1
  408ec0:	2a00      	cmp	r2, #0
  408ec2:	d041      	beq.n	408f48 <memset+0x90>
  408ec4:	b2ca      	uxtb	r2, r1
  408ec6:	4603      	mov	r3, r0
  408ec8:	e002      	b.n	408ed0 <memset+0x18>
  408eca:	f114 34ff 	adds.w	r4, r4, #4294967295
  408ece:	d33b      	bcc.n	408f48 <memset+0x90>
  408ed0:	f803 2b01 	strb.w	r2, [r3], #1
  408ed4:	079d      	lsls	r5, r3, #30
  408ed6:	d1f8      	bne.n	408eca <memset+0x12>
  408ed8:	2c03      	cmp	r4, #3
  408eda:	d92e      	bls.n	408f3a <memset+0x82>
  408edc:	b2cd      	uxtb	r5, r1
  408ede:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  408ee2:	2c0f      	cmp	r4, #15
  408ee4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  408ee8:	d919      	bls.n	408f1e <memset+0x66>
  408eea:	f103 0210 	add.w	r2, r3, #16
  408eee:	4626      	mov	r6, r4
  408ef0:	3e10      	subs	r6, #16
  408ef2:	2e0f      	cmp	r6, #15
  408ef4:	f842 5c10 	str.w	r5, [r2, #-16]
  408ef8:	f842 5c0c 	str.w	r5, [r2, #-12]
  408efc:	f842 5c08 	str.w	r5, [r2, #-8]
  408f00:	f842 5c04 	str.w	r5, [r2, #-4]
  408f04:	f102 0210 	add.w	r2, r2, #16
  408f08:	d8f2      	bhi.n	408ef0 <memset+0x38>
  408f0a:	f1a4 0210 	sub.w	r2, r4, #16
  408f0e:	f022 020f 	bic.w	r2, r2, #15
  408f12:	f004 040f 	and.w	r4, r4, #15
  408f16:	3210      	adds	r2, #16
  408f18:	2c03      	cmp	r4, #3
  408f1a:	4413      	add	r3, r2
  408f1c:	d90d      	bls.n	408f3a <memset+0x82>
  408f1e:	461e      	mov	r6, r3
  408f20:	4622      	mov	r2, r4
  408f22:	3a04      	subs	r2, #4
  408f24:	2a03      	cmp	r2, #3
  408f26:	f846 5b04 	str.w	r5, [r6], #4
  408f2a:	d8fa      	bhi.n	408f22 <memset+0x6a>
  408f2c:	1f22      	subs	r2, r4, #4
  408f2e:	f022 0203 	bic.w	r2, r2, #3
  408f32:	3204      	adds	r2, #4
  408f34:	4413      	add	r3, r2
  408f36:	f004 0403 	and.w	r4, r4, #3
  408f3a:	b12c      	cbz	r4, 408f48 <memset+0x90>
  408f3c:	b2c9      	uxtb	r1, r1
  408f3e:	441c      	add	r4, r3
  408f40:	f803 1b01 	strb.w	r1, [r3], #1
  408f44:	429c      	cmp	r4, r3
  408f46:	d1fb      	bne.n	408f40 <memset+0x88>
  408f48:	bc70      	pop	{r4, r5, r6}
  408f4a:	4770      	bx	lr
  408f4c:	4614      	mov	r4, r2
  408f4e:	4603      	mov	r3, r0
  408f50:	e7c2      	b.n	408ed8 <memset+0x20>
  408f52:	bf00      	nop

00408f54 <register_fini>:
  408f54:	4b02      	ldr	r3, [pc, #8]	; (408f60 <register_fini+0xc>)
  408f56:	b113      	cbz	r3, 408f5e <register_fini+0xa>
  408f58:	4802      	ldr	r0, [pc, #8]	; (408f64 <register_fini+0x10>)
  408f5a:	f000 b805 	b.w	408f68 <atexit>
  408f5e:	4770      	bx	lr
  408f60:	00000000 	.word	0x00000000
  408f64:	00408f75 	.word	0x00408f75

00408f68 <atexit>:
  408f68:	2300      	movs	r3, #0
  408f6a:	4601      	mov	r1, r0
  408f6c:	461a      	mov	r2, r3
  408f6e:	4618      	mov	r0, r3
  408f70:	f000 b81e 	b.w	408fb0 <__register_exitproc>

00408f74 <__libc_fini_array>:
  408f74:	b538      	push	{r3, r4, r5, lr}
  408f76:	4c0a      	ldr	r4, [pc, #40]	; (408fa0 <__libc_fini_array+0x2c>)
  408f78:	4d0a      	ldr	r5, [pc, #40]	; (408fa4 <__libc_fini_array+0x30>)
  408f7a:	1b64      	subs	r4, r4, r5
  408f7c:	10a4      	asrs	r4, r4, #2
  408f7e:	d00a      	beq.n	408f96 <__libc_fini_array+0x22>
  408f80:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  408f84:	3b01      	subs	r3, #1
  408f86:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  408f8a:	3c01      	subs	r4, #1
  408f8c:	f855 3904 	ldr.w	r3, [r5], #-4
  408f90:	4798      	blx	r3
  408f92:	2c00      	cmp	r4, #0
  408f94:	d1f9      	bne.n	408f8a <__libc_fini_array+0x16>
  408f96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  408f9a:	f000 b991 	b.w	4092c0 <_fini>
  408f9e:	bf00      	nop
  408fa0:	004092d0 	.word	0x004092d0
  408fa4:	004092cc 	.word	0x004092cc

00408fa8 <__retarget_lock_acquire_recursive>:
  408fa8:	4770      	bx	lr
  408faa:	bf00      	nop

00408fac <__retarget_lock_release_recursive>:
  408fac:	4770      	bx	lr
  408fae:	bf00      	nop

00408fb0 <__register_exitproc>:
  408fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408fb4:	4d2c      	ldr	r5, [pc, #176]	; (409068 <__register_exitproc+0xb8>)
  408fb6:	4606      	mov	r6, r0
  408fb8:	6828      	ldr	r0, [r5, #0]
  408fba:	4698      	mov	r8, r3
  408fbc:	460f      	mov	r7, r1
  408fbe:	4691      	mov	r9, r2
  408fc0:	f7ff fff2 	bl	408fa8 <__retarget_lock_acquire_recursive>
  408fc4:	4b29      	ldr	r3, [pc, #164]	; (40906c <__register_exitproc+0xbc>)
  408fc6:	681c      	ldr	r4, [r3, #0]
  408fc8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  408fcc:	2b00      	cmp	r3, #0
  408fce:	d03e      	beq.n	40904e <__register_exitproc+0x9e>
  408fd0:	685a      	ldr	r2, [r3, #4]
  408fd2:	2a1f      	cmp	r2, #31
  408fd4:	dc1c      	bgt.n	409010 <__register_exitproc+0x60>
  408fd6:	f102 0e01 	add.w	lr, r2, #1
  408fda:	b176      	cbz	r6, 408ffa <__register_exitproc+0x4a>
  408fdc:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  408fe0:	2401      	movs	r4, #1
  408fe2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  408fe6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  408fea:	4094      	lsls	r4, r2
  408fec:	4320      	orrs	r0, r4
  408fee:	2e02      	cmp	r6, #2
  408ff0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  408ff4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  408ff8:	d023      	beq.n	409042 <__register_exitproc+0x92>
  408ffa:	3202      	adds	r2, #2
  408ffc:	f8c3 e004 	str.w	lr, [r3, #4]
  409000:	6828      	ldr	r0, [r5, #0]
  409002:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  409006:	f7ff ffd1 	bl	408fac <__retarget_lock_release_recursive>
  40900a:	2000      	movs	r0, #0
  40900c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409010:	4b17      	ldr	r3, [pc, #92]	; (409070 <__register_exitproc+0xc0>)
  409012:	b30b      	cbz	r3, 409058 <__register_exitproc+0xa8>
  409014:	f44f 70c8 	mov.w	r0, #400	; 0x190
  409018:	f3af 8000 	nop.w
  40901c:	4603      	mov	r3, r0
  40901e:	b1d8      	cbz	r0, 409058 <__register_exitproc+0xa8>
  409020:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  409024:	6002      	str	r2, [r0, #0]
  409026:	2100      	movs	r1, #0
  409028:	6041      	str	r1, [r0, #4]
  40902a:	460a      	mov	r2, r1
  40902c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  409030:	f04f 0e01 	mov.w	lr, #1
  409034:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  409038:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40903c:	2e00      	cmp	r6, #0
  40903e:	d0dc      	beq.n	408ffa <__register_exitproc+0x4a>
  409040:	e7cc      	b.n	408fdc <__register_exitproc+0x2c>
  409042:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  409046:	430c      	orrs	r4, r1
  409048:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40904c:	e7d5      	b.n	408ffa <__register_exitproc+0x4a>
  40904e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  409052:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  409056:	e7bb      	b.n	408fd0 <__register_exitproc+0x20>
  409058:	6828      	ldr	r0, [r5, #0]
  40905a:	f7ff ffa7 	bl	408fac <__retarget_lock_release_recursive>
  40905e:	f04f 30ff 	mov.w	r0, #4294967295
  409062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409066:	bf00      	nop
  409068:	20000538 	.word	0x20000538
  40906c:	004092a8 	.word	0x004092a8
  409070:	00000000 	.word	0x00000000
  409074:	00000001 	.word	0x00000001
  409078:	00000002 	.word	0x00000002
  40907c:	00000004 	.word	0x00000004
  409080:	00000008 	.word	0x00000008
  409084:	00000010 	.word	0x00000010
  409088:	00000020 	.word	0x00000020
  40908c:	00000040 	.word	0x00000040
  409090:	00000080 	.word	0x00000080
  409094:	00000100 	.word	0x00000100
  409098:	00000200 	.word	0x00000200
  40909c:	00000400 	.word	0x00000400

004090a0 <table_sin_128_Q20>:
  4090a0:	00000000 0000c8fb 0001917a 00025902     ........z....Y..
  4090b0:	00031f17 0003e33f 0004a501 000563e6     ....?........c..
  4090c0:	00061f78 0006d744 00078ad7 000839c3     x...D........9..
  4090d0:	0008e39d 000987fb 000a2679 000abeb4     ........y&......
  4090e0:	000b504f 000bdaef 000c5e40 000cd9f0     OP......@^......
  4090f0:	000d4db3 000db941 000e1c59 000e76bd     .M..A...Y....v..
  409100:	000ec835 000f1090 000f4fa0 000f853f     5........O..?...
  409110:	000fb14b 000fd3aa 000fec46 000ffb10     K.......F.......
  409120:	00100000 000ffb10 000fec46 000fd3aa     ........F.......
  409130:	000fb14b 000f853f 000f4fa0 000f1090     K...?....O......
  409140:	000ec835 000e76bd 000e1c59 000db941     5....v..Y...A...
  409150:	000d4db3 000cd9f0 000c5e40 000bdaef     .M......@^......
  409160:	000b504f 000abeb4 000a2679 000987fb     OP......y&......
  409170:	0008e39d 000839c3 00078ad7 0006d744     .....9......D...
  409180:	00061f78 000563e6 0004a501 0003e33f     x....c......?...
  409190:	00031f17 00025902 0001917a 0000c8fb     .....Y..z.......
  4091a0:	00000000 ffff3704 fffe6e85 fffda6fd     .....7...n......
  4091b0:	fffce0e8 fffc1cc0 fffb5afe fffa9c19     .........Z......
  4091c0:	fff9e087 fff928bb fff87528 fff7c63c     .....(..(u..<...
  4091d0:	fff71c62 fff67804 fff5d986 fff5414b     b....x......KA..
  4091e0:	fff4afb0 fff42510 fff3a1bf fff3260f     .....%.......&..
  4091f0:	fff2b24c fff246be fff1e3a6 fff18942     L....F......B...
  409200:	fff137ca fff0ef6f fff0b05f fff07ac0     .7..o..._....z..
  409210:	fff04eb4 fff02c55 fff013b9 fff004ef     .N..U,..........
  409220:	fff00000 fff004ef fff013b9 fff02c55     ............U,..
  409230:	fff04eb4 fff07ac0 fff0b05f fff0ef6f     .N...z.._...o...
  409240:	fff137ca fff18942 fff1e3a6 fff246be     .7..B........F..
  409250:	fff2b24c fff3260f fff3a1bf fff42510     L....&.......%..
  409260:	fff4afb0 fff5414b fff5d986 fff67804     ....KA.......x..
  409270:	fff71c62 fff7c63c fff87528 fff928bb     b...<...(u...(..
  409280:	fff9e087 fffa9c19 fffb5afe fffc1cc0     .........Z......
  409290:	fffce0e8 fffda6fd fffe6e85 ffff3704     .........n...7..
  4092a0:	74727173 00000000                       sqrt....

004092a8 <_global_impure_ptr>:
  4092a8:	20000110                                ... 

004092ac <_init>:
  4092ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4092ae:	bf00      	nop
  4092b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4092b2:	bc08      	pop	{r3}
  4092b4:	469e      	mov	lr, r3
  4092b6:	4770      	bx	lr

004092b8 <__init_array_start>:
  4092b8:	00408f55 	.word	0x00408f55

004092bc <__frame_dummy_init_array_entry>:
  4092bc:	004000f1                                ..@.

004092c0 <_fini>:
  4092c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4092c2:	bf00      	nop
  4092c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4092c6:	bc08      	pop	{r3}
  4092c8:	469e      	mov	lr, r3
  4092ca:	4770      	bx	lr

004092cc <__fini_array_start>:
  4092cc:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr

2000000a <pwm_duty>:
2000000a:	0064                                        d.

2000000c <ch_list>:
2000000c:	0903 0802                                   ....

20000010 <udi_api_cdc_comm>:
20000010:	2289 0040 24c1 0040 251d 0040 260b 0040     ."@..$@..%@..&@.
20000020:	0000 0000                                   ....

20000024 <udi_api_cdc_data>:
20000024:	23cd 0040 24e1 0040 25fd 0040 260b 0040     .#@..$@..%@..&@.
20000034:	2619 0040                                   .&@.

20000038 <udc_device_desc>:
20000038:	0112 0200 0002 4000 03eb 2404 0100 0201     .......@...$....
20000048:	0100 0000                                   ....

2000004c <udc_desc_fs>:
2000004c:	0209 0043 0102 c000 0932 0004 0100 0202     ..C.....2.......
2000005c:	0001 2405 1000 0401 0224 0502 0624 0100     ...$....$...$...
2000006c:	2405 0301 0701 8305 4003 1000 0409 0001     .$.......@......
2000007c:	0a02 0000 0700 8105 4002 0000 0507 0202     .........@......
2000008c:	0040 0000                                   @...

20000090 <udi_apis>:
20000090:	0010 2000 0024 2000                         ... $.. 

20000098 <udc_config_fs>:
20000098:	004c 2000 0090 2000                         L.. ... 

200000a0 <udc_config>:
200000a0:	0038 2000 0098 2000 0000 0000               8.. ... ....

200000ac <udc_string_desc_languageid>:
200000ac:	0304 0409                                   ....

200000b0 <udc_string_manufacturer_name>:
200000b0:	7441 656d 006c 0000                         Atmel...

200000b8 <udc_string_product_name>:
200000b8:	4443 2043 6956 7472 6175 206c 4f43 204d     CDC Virtual COM 
200000c8:	6f50 7472 0000 0000                         Port....

200000d0 <udc_string_desc>:
200000d0:	0300 0000 0000 0000 0000 0000 0000 0000     ................
	...

200000fa <CRCPoly.9551>:
200000fa:	a001                                        ..

200000fc <g_interrupt_enabled>:
200000fc:	0001 0000                                   ....

20000100 <SystemCoreClock>:
20000100:	0900 003d                                   ..=.

20000104 <__fdlib_version>:
20000104:	0001 0000                                   ....

20000108 <_impure_ptr>:
20000108:	0110 2000 0000 0000                         ... ....

20000110 <impure_data>:
20000110:	0000 0000 03fc 2000 0464 2000 04cc 2000     ....... d.. ... 
	...
200001b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200001c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000538 <__atexit_recursive_mutex>:
20000538:	1df4 2000                                   ... 
